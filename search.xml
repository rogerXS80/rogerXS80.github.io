<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>[Linux基础]</title>
    <url>/2019/03/01/Linux%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<p><a href="https://rogerxs80.github.io/2019/03/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/" target="_blank" rel="noopener">1.计算机组成原理（Computer）</a></p>
<p><a href="https://rogerxs80.github.io/2019/03/01/%E8%99%9A%E6%8B%9F%E5%8C%96%E7%8E%AF%E5%A2%83/" target="_blank" rel="noopener">2.虚拟化环境（Vmware）</a></p>
<p><a href="https://rogerxs80.github.io/2019/03/01/Bash%E5%88%9D%E8%AF%86/" target="_blank" rel="noopener">3.人机交互接口（Bash Shell）</a></p>
<p><a href="https://rogerxs80.github.io/2019/03/01/%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/" target="_blank" rel="noopener">4.文件管理（File）</a></p>
<p><a href="https://rogerxs80.github.io/2019/03/01/vim%E7%BC%96%E8%BE%91%E5%99%A8/" target="_blank" rel="noopener">5.vim编辑器（Edit）</a></p>
<p><a href="https://rogerxs80.github.io/2019/03/01/%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86/" target="_blank" rel="noopener">6.用户管理（User）</a></p>
<p><a href="https://rogerxs80.github.io/2019/03/08/%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/" target="_blank" rel="noopener">7.权限管理（Permission）</a></p>
<p><a href="https://rogerxs80.github.io/2019/03/09/%E8%BD%AF%E4%BB%B6%E5%8C%85%E7%AE%A1%E7%90%86/" target="_blank" rel="noopener">8.软件包管理（Package）</a></p>
<p><a href="https://rogerxs80.github.io/2019/03/12/%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/" target="_blank" rel="noopener">9.进程管理（Process）</a></p>
<p><a href="https://rogerxs80.github.io/2019/03/12/%E5%BC%80%E6%9C%BA%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/" target="_blank" rel="noopener">10.开机启动流程（Power-up）</a></p>
<p><a href="https://rogerxs80.github.io/2019/03/13/%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/" target="_blank" rel="noopener">11.定时任务（Crontab）</a></p>
]]></content>
      <categories>
        <category>SRE</category>
      </categories>
      <tags>
        <tag>Linux基础</tag>
      </tags>
  </entry>
  <entry>
    <title>[vim编辑器]</title>
    <url>/2019/03/01/vim%E7%BC%96%E8%BE%91%E5%99%A8/</url>
    <content><![CDATA[<h1 id="编辑工具vim"><a href="#编辑工具vim" class="headerlink" title="编辑工具vim"></a>编辑工具vim</h1><blockquote>
<p>Q：什么是vim？</p>
<p>vi和vim是linux下的一个文本编辑工具。（可以理解为windows的记事本，或Notepad++）</p>
<p>Q：为什么需要vim？</p>
<p>因为linxu一切皆为文件，而我们工作最多的就是蟹盖某个服务的配置。（其实就是修改文件内容）<br>也就是说如果没有vi或vim我们有很多工作都无法完成。所以vim是学习linux最重要的命令之一</p>
<p>Q：vi和vim的区别？</p>
<p>vi和vim都是文本编辑器，只不过vim是vi的增强版，比vi多了语法高亮显示，其他编辑功能几乎无差，所以使用vi还是vim取决于个人习惯。<br>由于前期我们采用最小化安装操作系统所以没有vim命令，可以使用yum install vim进行安装</p>
<p>Q：如何使用vim？</p>
<p>在使用vim之前，我们需要线介绍下vim的三种模式：普通模式、编辑模式、末行模式<br>每种模式分别支持多种不同的快捷键，要向高效率地操作文本，就必须先搞清这三种模式的操作区别以及模式之间的切换方法</p>
</blockquote>
<h2 id="vim三种模式介绍"><a href="#vim三种模式介绍" class="headerlink" title="vim三种模式介绍"></a>vim三种模式介绍</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1.普通模式：主要是控制光标移动，可对文本进行复制、粘贴、删除等工作。</span><br><span class="line">  -使用vim filename编辑一个文件时，已进入该文件就是普通模式</span><br><span class="line">  -在这个模式下，可以进行光标移动、复制、删除、粘贴操作</span><br><span class="line">2.编辑模式：主要进行文本内容编辑和修改</span><br><span class="line">  -从普通模式进入编辑模式，只需按一个键即可i,I,a,A,o,O</span><br><span class="line">  -当进入编辑模式时，会在屏幕的最下一行会出现INSERT标记</span><br><span class="line">  -从编辑模式回到普通模式会需要按键盘左上方的ESC键即可</span><br><span class="line">3.末行模式：主要用于保存或推出文本</span><br><span class="line">  -在普通模式下，输入<span class="string">":"</span>或者<span class="string">"/"</span>即可进入末行模式</span><br><span class="line">  -在命令模式下，可进行的操作有，显示行号、搜索、替换、保存、退出</span><br><span class="line">4.小结：vim编辑打开文件整体流程如下：</span><br><span class="line">  -默认打开文件处于普通模式</span><br><span class="line">  -从普通模式切换至编辑模式需要使用a、i、o</span><br><span class="line">  -编辑模式修改完毕后需要先使用ECS返回普通模式</span><br><span class="line">  -在普通模式输入<span class="string">":"</span>或<span class="string">"/"</span>进入末行模式，可实现文件的保存于退出</span><br><span class="line">注意：在vim中，无法直接从编辑模式切换到末行模式。</span><br></pre></td></tr></table></figure>



<h2 id="vim使用"><a href="#vim使用" class="headerlink" title="vim使用"></a>vim使用</h2><p>普通模式：主要用于光标移动，复制，粘贴，删除，替换</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1.命令光标跳转</span></span><br><span class="line">G		 <span class="comment">#光标跳转至末端</span></span><br><span class="line">gg	 <span class="comment">#光标跳转至顶端</span></span><br><span class="line">Ngg  <span class="comment">#光标跳转至当前文件内的N行</span></span><br><span class="line">$		 <span class="comment">#光标跳转至当前光标所在行的尾部</span></span><br><span class="line">^|0	 <span class="comment">#光标跳转至当前光标所在行的首部</span></span><br><span class="line">-------------------------------------------</span><br><span class="line"><span class="comment">#2.文件内容较多</span></span><br><span class="line">ctrl+f  <span class="comment">#往下翻页（行比较多）</span></span><br><span class="line">ctrl+b  <span class="comment">#往上翻页</span></span><br><span class="line">-------------------------------------------</span><br><span class="line"><span class="comment">#3复制</span></span><br><span class="line">yy   <span class="comment">#复制当前光标所在的行			</span></span><br><span class="line">5yy  <span class="comment">#复制当前光标以及光标向下4行</span></span><br><span class="line"></span><br><span class="line">p(小写)   <span class="comment">#粘贴至当前光标下一行</span></span><br><span class="line">P(大写)   <span class="comment">#粘贴至当前光标上一行</span></span><br><span class="line">-------------------------------------------</span><br><span class="line"><span class="comment">#4.删除、剪贴、撤销	</span></span><br><span class="line">dd			<span class="comment">#删除当前光标所在的行</span></span><br><span class="line">4dd			<span class="comment">#删除当前光标所在的行及往下的3行</span></span><br><span class="line">dG			<span class="comment">#删除当前光标以后的所有行</span></span><br><span class="line">D			  <span class="comment">#删除当前光标及光标以后的内容</span></span><br><span class="line">x			  <span class="comment">#删除当前光标标记往后的字符</span></span><br><span class="line">X			  <span class="comment">#删除当前光标标记往前的字符</span></span><br><span class="line">dd &amp; p  <span class="comment">#剪贴、先删除dd(number dd),后粘贴p</span></span><br><span class="line">u			  <span class="comment">#撤销上一次的操作</span></span><br><span class="line">-------------------------------------------</span><br><span class="line"><span class="comment">#5.替换</span></span><br><span class="line">r  <span class="comment">#๊替换当前光标标记的单个字符</span></span><br><span class="line">R	 <span class="comment">#进入Replace模式，连续替换，ESC结束</span></span><br></pre></td></tr></table></figure>

<p>编辑模式：主要用于编辑文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">i  <span class="comment">#进入编辑模式，光标不做任何操作</span></span><br><span class="line">a	 <span class="comment">#进入编辑模式，将当前光标往后一位</span></span><br><span class="line">o  <span class="comment">#进入编辑模式，并且当前光标下添加一行空白内容</span></span><br><span class="line">-------------------------------------------</span><br><span class="line">I		<span class="comment">#进入编辑模式，并且光标会跳转至本行的头部</span></span><br><span class="line">A		<span class="comment">#进入编辑模式，将光标移动至本行的末尾</span></span><br><span class="line">O		<span class="comment">#进入编辑模式，并在当前光标上添加一行空白内容</span></span><br></pre></td></tr></table></figure>

<p>末行模式：主要用于搜索，保存，退出文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1.文件保存于退出</span></span><br><span class="line">:w		     <span class="comment">#保存当前状态</span></span><br><span class="line">:w！	      <span class="comment">#强制保存当前状态</span></span><br><span class="line">:q		     <span class="comment">#退出当前文档（文档必须保存才能退出）</span></span><br><span class="line">:q！		    <span class="comment">#强制退出当前文档不会修改当前内容</span></span><br><span class="line">:wq		     <span class="comment">#先保存，再退出</span></span><br><span class="line">:wq！	    <span class="comment">#强制保存并退出</span></span><br><span class="line">:x		     <span class="comment">#先保存，在退出</span></span><br><span class="line">ZZ		     <span class="comment">#保存退出，shift+zz</span></span><br><span class="line">:number    <span class="comment">#跳转至对应行号</span></span><br><span class="line">-------------------------------------------</span><br><span class="line"><span class="comment">#2.文件内容查找</span></span><br><span class="line">/string		<span class="comment">#需要搜索的内容</span></span><br><span class="line">n		      <span class="comment">#按搜索到的内容依次往下进行查找</span></span><br><span class="line">N		      <span class="comment">#按搜索到的内容依次往上进行查找</span></span><br><span class="line">-------------------------------------------</span><br><span class="line"><span class="comment">#3.文件内容替换</span></span><br><span class="line">:1,5s<span class="comment">#sbin#test#g  #替换1-5行中包含sbin的内容为test</span></span><br><span class="line">:%s<span class="comment">#sbin#test#g		 #替换整个文本文件中包含sbin的替换为test</span></span><br><span class="line">:%s<span class="comment">#sbin#test#gc   #替换内容时提示是否需要替换</span></span><br><span class="line">-------------------------------------------</span><br><span class="line"><span class="comment">#4.文件内容另存</span></span><br><span class="line">:w /root/test.txt  <span class="comment">#将所有内容另存为/root/test.txt</span></span><br><span class="line">-------------------------------------------</span><br><span class="line"><span class="comment">#5.文件内容读入</span></span><br><span class="line">:r /etc/hosts		<span class="comment">#读入/etc/hosts文件至当前光标下面</span></span><br><span class="line">:5r /etc/hosts  <span class="comment">#指定插入/etc/hosts文件至当前文件的第五行下面</span></span><br><span class="line"><span class="comment">#6.跳转至Number行</span></span><br><span class="line">:number</span><br></pre></td></tr></table></figure>

<p>视图模式：主要进行批量操作</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ctrl+v 进入可视块模式，选中需要注释的行</span><br><span class="line">1.插入：按<span class="built_in">shift</span>+i进入编辑模式，输入<span class="comment">#，结束按ECS键</span></span><br><span class="line">2.删除：选中内容后，按x或者d键删除</span><br><span class="line">3.替换：选中需要替换的内容，按下r键，然后输入替换后的内容</span><br><span class="line">-------------------------------------------</span><br><span class="line"><span class="built_in">shift</span>+v 进入可视行模式，选中整行内容</span><br><span class="line">1.复制：选中行内容后按y键既可复制</span><br><span class="line">2.删除：选中行内容后按d键删除</span><br></pre></td></tr></table></figure>

<h2 id="vim扩展知识"><a href="#vim扩展知识" class="headerlink" title="vim扩展知识"></a>vim扩展知识</h2><p>vim环境变量</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#环境变量临时生效</span></span><br><span class="line">:<span class="built_in">set</span> nu				     <span class="comment">#显示行号</span></span><br><span class="line">:<span class="built_in">set</span> ic				     <span class="comment">#忽略大小写，在搜索的时候有用</span></span><br><span class="line">:<span class="built_in">set</span> ai				     <span class="comment">#自动缩进</span></span><br><span class="line">:<span class="built_in">set</span> list			     <span class="comment">#显示制表符（空行，tab键）</span></span><br><span class="line">:<span class="built_in">set</span> no[nu|ic|ai]	 <span class="comment">#取消临时设定的变量</span></span><br></pre></td></tr></table></figure>

<p>环境变量永久生效。<code>~/.vimrc</code> 个人环境变量（优先级高） <code>/etc/vimrc</code> 全局环境变量</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#vim ~/.vimrc  #当下次再打开文件自动显示行号并忽略大小写</span></span><br><span class="line"><span class="built_in">set</span> nu</span><br><span class="line"><span class="built_in">set</span> ic</span><br><span class="line"></span><br><span class="line"><span class="comment">#如果个人vim环境没有配置，则使用全局vim环境变量配置</span></span><br><span class="line"><span class="comment">#如果个人vim环境和全局环境变量产生冲突，优先使用个人vim环境变量</span></span><br></pre></td></tr></table></figure>

<p>vim分页</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim -O 文件1 文件2</span><br></pre></td></tr></table></figure>

<p>vimdiff文件比对</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#相同文件之间差异比对，通常用于对比修改前后差异</span></span><br><span class="line">diff		  <span class="comment">#文件比对</span></span><br><span class="line">vimdiff		<span class="comment">#以vim方式打开两个文件对比，高亮显示不同的内容</span></span><br></pre></td></tr></table></figure>

<p>vim异常退出处理</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#如果vim非正常退出（ctrl+z）挂起或强制退出终端没关闭vim后</span></span><br><span class="line">1.假设打开filename文件被意外关闭，需要删除同文件名的.swp文件即可解决</span><br><span class="line">2.rm -f .filename.swp</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>SRE</category>
      </categories>
      <tags>
        <tag>Linux基础</tag>
      </tags>
  </entry>
  <entry>
    <title>[开机启动流程]</title>
    <url>/2019/03/12/%E5%BC%80%E6%9C%BA%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="开机启动流程"><a href="#开机启动流程" class="headerlink" title="开机启动流程"></a>开机启动流程</h1><h2 id="CentOS-6-启动流程"><a href="#CentOS-6-启动流程" class="headerlink" title="CentOS 6 启动流程"></a>CentOS 6 启动流程</h2><ol>
<li><p>内核引导</p>
<ul>
<li><code>BIOS</code>加电自检，检测主板上的硬件设备，根据<code>BIOS</code>设置启动系统</li>
<li>读取<code>/boot</code>分区下，所有内核文件</li>
</ul>
</li>
<li><p>运行<code>init</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sysV：CentOS5之前使用的pid为1的进程 </span><br><span class="line">Upstart：CentOS6使用的init进程 </span><br><span class="line">Systemd：CentOS7</span><br><span class="line"></span><br><span class="line"><span class="comment">#加载init，涉及到Linux系统中7个运行级别</span></span><br><span class="line">0：关机运行级别 </span><br><span class="line">1：单用户运行级别（修改root密码）</span><br><span class="line">2：多用户运行级别，没有文件系统 </span><br><span class="line">3：多用户运行级别，有文件系统（命令行模式） </span><br><span class="line">4：CentOS6和7 保留，未使用 </span><br><span class="line">5：多用户，图形化运行级别 </span><br><span class="line">6：重启运行级别（reboot）</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看Linux系统当前的运行级别 </span></span><br><span class="line">[root@localhost ~]<span class="comment"># runlevel </span></span><br><span class="line">N 3</span><br><span class="line"></span><br><span class="line"><span class="comment">#运行init，会读取 /etc/inittab配置文件</span></span><br><span class="line"><span class="comment">#读取配置文件中的默认运行级别</span></span><br><span class="line"><span class="comment">#获取当前系统的运行级别</span></span><br><span class="line"><span class="comment">#启动init进程</span></span><br><span class="line">[root@localhost ~]<span class="comment"># systemctl get-default</span></span><br><span class="line">C6id:3:initdefault: </span><br><span class="line">C7multi-user.target</span><br><span class="line">[root@localhost ~]<span class="comment"># systemctl set-default graphical.target</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>系统初始化</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#根据运行级别中设置了开机自启动服务来启动对应服务 </span></span><br><span class="line">C6</span><br><span class="line">[root@localhost ~]<span class="comment"># chkconfig --list </span></span><br><span class="line"></span><br><span class="line">C7</span><br><span class="line">[root@localhost ~]<span class="comment"># systemctl list-unit-files </span></span><br><span class="line">[root@localhost ~]<span class="comment"># ll /etc/systemd/system/multi-user.target.wants/</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>建立终端</p>
</li>
<li><p>用户登录系统</p>
</li>
</ol>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_devops/image-20220507193246943.png" alt="image-20220507193246943"></p>
<h2 id="CentOS-7启动流程"><a href="#CentOS-7启动流程" class="headerlink" title="CentOS 7启动流程"></a>CentOS 7启动流程</h2><ol>
<li><code>BIOS</code>(开机自检)</li>
</ol>
<ul>
<li><p><code>BIOS</code>加电自检，检测主板上的硬件设备，根据<code>BIOS</code>设置启动系统</p>
</li>
<li><p>读取<code>/boot</code>分区下，所有内核文件</p>
</li>
</ul>
<ol start="2">
<li><code>MBR</code> ( <code>Master Boot Record</code>主引导记录)</li>
</ol>
<ul>
<li>主引导记录放在<code>linux</code>引导硬盘的第一个扇区中，此信息通过<code>BIOS</code>预加载到<code>ROM</code>中</li>
</ul>
<ol start="3">
<li><code>GRUB2 Bootloader</code>（引导菜单）</li>
</ol>
<ul>
<li>加载<code>grub2</code>菜单，选择要进入的系统</li>
<li>可以选择多系统</li>
</ul>
<ol start="4">
<li><code>Kernel</code>（内核引导）</li>
</ol>
<ul>
<li>读取<code>/boot</code>目录下所有内核文件</li>
</ul>
<ol start="5">
<li>.<code>Systemd</code> （不再使用<code>init</code>，改成了<code>systemd</code>）</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">runlevel0.target -&gt; poweroff.target </span><br><span class="line">runlevel1.target -&gt; rescue.target </span><br><span class="line">runlevel2.target -&gt; multi-user.target </span><br><span class="line">runlevel3.target -&gt; multi-user.target </span><br><span class="line">runlevel4.target -&gt; multi-user.target </span><br><span class="line">runlevel5.target -&gt; graphical.target </span><br><span class="line">runlevel6.target -&gt; reboot.target</span><br></pre></td></tr></table></figure>

<ol start="6">
<li><code>Runlevel-Target</code> （运行级别）</li>
</ol>
<h2 id="CentOS7进入单用户模式"><a href="#CentOS7进入单用户模式" class="headerlink" title="CentOS7进入单用户模式"></a>CentOS7进入单用户模式</h2><h3 id="忘记root密码"><a href="#忘记root密码" class="headerlink" title="忘记root密码"></a>忘记root密码</h3><ul>
<li><p>关机</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">halt </span><br><span class="line">poweroff </span><br><span class="line">shutdown -h now </span><br><span class="line">init 0</span><br></pre></td></tr></table></figure>
</li>
<li><p>开机</p>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_devops/image-20220507194704562.png" alt="image-20220507194704562"></p>
</li>
<li><p>进入<code>gurb2</code>菜单</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#修改内核参数</span></span><br><span class="line">selinux</span><br><span class="line">vim /etc/sysconfig/selinux selinux=enforcing ==&gt; selinux=disabled</span><br><span class="line"></span><br><span class="line">在linux16行末，写入：enforcing=0 init=/bin/bash </span><br><span class="line">按Ctrl + x</span><br></pre></td></tr></table></figure>

<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_devops/image-20220507195445025.png" alt="image-20220507195445025"></p>
</li>
<li><p>修改密码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">无法直接修改密码，因为当前/目录是只读状态</span><br><span class="line"></span><br><span class="line"><span class="comment">#重新挂载/目录</span></span><br><span class="line">mount -o rw,remount /</span><br><span class="line"></span><br><span class="line"><span class="comment">#修改密码 </span></span><br><span class="line">passwd root </span><br><span class="line"><span class="built_in">echo</span> 111 | passwd --stdin root</span><br><span class="line"></span><br><span class="line"><span class="comment">#重新加载init </span></span><br><span class="line"><span class="built_in">exec</span> /sbin/init</span><br></pre></td></tr></table></figure>

<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_devops/image-20220507200132878.png" alt="image-20220507200132878"></p>
</li>
</ul>
<h2 id="修改默认运行级别"><a href="#修改默认运行级别" class="headerlink" title="修改默认运行级别"></a>修改默认运行级别</h2><ul>
<li><p>关机</p>
</li>
<li><p>进入<code>grub2</code>菜单</p>
</li>
<li><p>按<code>e</code>编辑<code>grub2</code>菜单的内核参数</p>
</li>
</ul>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_devops/image-20220507205723245.png" alt="image-20220507205723245"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Linux16行中 ro改成rw </span><br><span class="line">行末写：rd.break</span><br><span class="line">修改后，按Ctrl + x</span><br></pre></td></tr></table></figure>

<ul>
<li>修改运行级别</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1.重新挂载root权限目录 </span></span><br><span class="line">mount -o rw,remount /sysroot</span><br><span class="line"></span><br><span class="line"><span class="comment">#2.获取root权限 </span></span><br><span class="line">chroot /sysroot</span><br><span class="line"></span><br><span class="line"><span class="comment">#3.修改默认运行级别 </span></span><br><span class="line">systemctl <span class="built_in">set</span>-default multi-user.target </span><br><span class="line"></span><br><span class="line"><span class="comment">#4.退出 </span></span><br><span class="line"><span class="built_in">exit</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">#5.重启 </span></span><br><span class="line">reboot</span><br></pre></td></tr></table></figure>

<h1 id="救援模式"><a href="#救援模式" class="headerlink" title="救援模式"></a>救援模式</h1><h2 id="进入救援模式"><a href="#进入救援模式" class="headerlink" title="进入救援模式"></a>进入救援模式</h2><p>需要有系统盘，才能进入救援模式</p>
<p>要进入安装系统的界面，才能进入救援模式</p>
<ul>
<li><p>关机</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">init 0 </span><br><span class="line">halt </span><br><span class="line">poweroff </span><br><span class="line">shutdown -h now</span><br></pre></td></tr></table></figure>
</li>
<li><p>将系统盘放入光驱中</p>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_devops/image-20220509225438678.png" alt="image-20220509225438678"></p>
</li>
<li><p>进入BIOS</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">将系统启动的顺序，改为从光盘启动 </span><br><span class="line">方法一：开机时，不断按f2 </span><br><span class="line">方法二：在电源里面点击，进入固件</span><br></pre></td></tr></table></figure>

<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_devops/image-20220509225610047.png" alt="image-20220509225610047"></p>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_devops/image-20220509225732441.png" alt="image-20220509225732441"></p>
<p>把CD-ROM启动顺序排到第一个</p>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_devops/image-20220509225816522.png" alt="image-20220509225816522"></p>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_devops/image-20220509230044904.png" alt="image-20220509230044904"></p>
<p>按F10保存并退出 -&gt;选择yes</p>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_devops/image-20220509230014368.png" alt="image-20220509230014368"></p>
<p>进入安装系统的界面</p>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_devops/image-20220509231009067.png" alt="image-20220509231009067"></p>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_devops/image-20220509231305601.png" alt="image-20220509231305601"></p>
<p>进入救援模式</p>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_devops/image-20220509231805231.png" alt="image-20220509231805231"></p>
<p>输入：1</p>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_devops/image-20220509232317336.png" alt="image-20220509232317336"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1.先输入回车 </span></span><br><span class="line"><span class="comment">#2.获取root的环境（root权限） </span></span><br><span class="line">chroot /mnt/sysimage</span><br></pre></td></tr></table></figure>
</li>
<li><p>重启</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bash-4.2<span class="comment"># exit</span></span><br><span class="line">bash-4.2<span class="comment"># reboot</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>进入BIOS从硬盘启动</p>
</li>
</ul>
<h2 id="生产案例"><a href="#生产案例" class="headerlink" title="生产案例"></a>生产案例</h2><ul>
<li>生产场景1： 当系统坏了，无法登陆系统，但是需要把里面的数据拷贝出来，怎么办？</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bash-4.2<span class="comment"># mkfs.xfs -f /dev/sdc</span></span><br><span class="line">bash-4.2<span class="comment"># mkdir /data</span></span><br><span class="line">bash-4.2<span class="comment"># mount /dev/sdc /data</span></span><br><span class="line">bash-4.2<span class="comment"># cp -a 重要文件 /data</span></span><br><span class="line">bash-4.2<span class="comment"># umount /dev/sdb</span></span><br></pre></td></tr></table></figure>

<ul>
<li>生产场景2： 修复MBR，主要出现在安装双系统的时候，后安装的系统把原来的MBR删除了，需要修复</li>
</ul>
<p>1.破坏硬盘的钱446字节，模拟MBR引导损坏，会发现重启无法启动系统</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># dd &lt; /dev/zero &gt;/dev/sda bs=1 count=446</span></span><br></pre></td></tr></table></figure>

<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_devops/image-20220509233837613.png" alt="image-20220509233837613"></p>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_devops/image-20220509233734772.png" alt="image-20220509233734772"></p>
<p>扇区损坏，需要进入救援模式修复扇区</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1.修复扇区 </span></span><br><span class="line">grub2-install /dev/sda </span><br><span class="line"></span><br><span class="line"><span class="comment">#2.退出root环境 </span></span><br><span class="line"><span class="built_in">exit</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">#3.重启 </span></span><br><span class="line">reboot</span><br></pre></td></tr></table></figure>

<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_devops/image-20220510000439174.png" alt="image-20220510000439174"></p>
<ul>
<li>生产场景3：<code>CentOS7</code>误删除grub文件，进行修复</li>
</ul>
<p>1.模拟故障</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#删除grub2</span></span><br><span class="line">[root@zls ~]<span class="comment"># rm -fr /boot/grub2/</span></span><br><span class="line"><span class="comment">#重启</span></span><br><span class="line">[root@zls ~]<span class="comment"># reboot</span></span><br></pre></td></tr></table></figure>

<p>2.进入救援模式</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1.修复扇区（恢复磁盘）</span></span><br><span class="line">grub2-install /dev/sda </span><br><span class="line"></span><br><span class="line"><span class="comment">#1.5 重置grub.cfg配置文件 </span></span><br><span class="line">grub2-mkconfig -o /boot/grub2/grub.cfg </span><br><span class="line"></span><br><span class="line"><span class="comment">#2.退出root环境 </span></span><br><span class="line"><span class="built_in">exit</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">#3.重启 reboot</span></span><br></pre></td></tr></table></figure>

<h1 id="systemd管理进程"><a href="#systemd管理进程" class="headerlink" title="systemd管理进程"></a>systemd管理进程</h1><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_devops/image-20211001192508822.png" alt="image-20211001192508822"></p>
<h2 id="systemd的优势"><a href="#systemd的优势" class="headerlink" title="systemd的优势"></a>systemd的优势</h2><ul>
<li><p>最新系统都采用systemd管理（RedHat7，CentOS7，Ubuntu15…）</p>
</li>
<li><p>CentOS7 支持开机并行启动服务,显著提高开机启动效率</p>
</li>
<li><p>CentOS7关机只关闭正在运行的服务，而CentOS6，全部都关闭一次。</p>
</li>
<li><p>CentOS7服务的启动与停止不在使用脚本进行管理，也就是/etc/init.d下不在有脚本。</p>
</li>
<li><p>CentOS7使用systemd解决原有模式缺陷，比如原有service不会关闭程序产生的子进程。</p>
</li>
</ul>
<h2 id="systemd相关配置文件"><a href="#systemd相关配置文件" class="headerlink" title="systemd相关配置文件"></a>systemd相关配置文件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#系统中所有服务启动的脚本存放路径 </span></span><br><span class="line">C7：/usr/lib/systemd/system/ nginx.service </span><br><span class="line">C6: /etc/init.d/ </span><br><span class="line"></span><br><span class="line"><span class="comment">#系统运行级别相关目录</span></span><br><span class="line">C7：/etc/systemd/system</span><br><span class="line">C6：/etc/rc*.d</span><br><span class="line"></span><br><span class="line"><span class="comment">#默认运行级别需要开机自启的服务存放目录 </span></span><br><span class="line">C7：/etc/systemd/system/multi-user.target.wants/</span><br><span class="line">C6：/etc/rc3.d/</span><br></pre></td></tr></table></figure>

<h2 id="systemd管理服务的命令"><a href="#systemd管理服务的命令" class="headerlink" title="systemd管理服务的命令"></a>systemd管理服务的命令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1.启动服务 </span></span><br><span class="line">C6：/etc/init.d/服务名 start </span><br><span class="line">service 服务名 start </span><br><span class="line">C7: systemctl start 服务名 </span><br><span class="line">service 服务名 start</span><br><span class="line"></span><br><span class="line"><span class="comment">#2.停止服务 </span></span><br><span class="line">C6： /etc/init.d/服务名 stop </span><br><span class="line">service 服务名 stop </span><br><span class="line">C7: systemctl stop 服务名 </span><br><span class="line">service 服务名 stop</span><br><span class="line"></span><br><span class="line"><span class="comment">#3.服务重启 </span></span><br><span class="line">C6： /etc/init.d/服务名 restart </span><br><span class="line">service 服务名 restart </span><br><span class="line">C7: systemctl restart 服务名 </span><br><span class="line">service 服务名 restart</span><br><span class="line"></span><br><span class="line"><span class="comment">#4.服务重新加载 </span></span><br><span class="line">C6： /etc/init.d/服务名 reload </span><br><span class="line">service 服务名 reload </span><br><span class="line">C7: systemctl reload 服务名 </span><br><span class="line">service 服务名 reload</span><br><span class="line"></span><br><span class="line"><span class="comment">#5.检查服务的启动状态 </span></span><br><span class="line">C6： [root@localhost ~]<span class="comment"># /etc/init.d/sshd status </span></span><br><span class="line">openssh-daemon (pid 1508) is running...</span><br><span class="line">C7： systemctl status sshd</span><br><span class="line"></span><br><span class="line"><span class="comment">#6.判断服务是否在运行 </span></span><br><span class="line">[root@localhost ~]<span class="comment"># systemctl is-active sshd </span></span><br><span class="line">active </span><br><span class="line">[root@localhost ~]<span class="comment"># systemctl stop sshd </span></span><br><span class="line">[root@localhost ~]<span class="comment"># systemctl is-active sshd </span></span><br><span class="line">inactive</span><br><span class="line"></span><br><span class="line"><span class="comment">#7.禁用某个服务 </span></span><br><span class="line">[root@localhost ~]<span class="comment"># systemctl mask crond </span></span><br><span class="line"></span><br><span class="line"><span class="comment">#8.取消禁用某个服务 </span></span><br><span class="line">[root@localhost ~]<span class="comment"># systemctl unmask crond</span></span><br></pre></td></tr></table></figure>

<h2 id="开机自启服务管理"><a href="#开机自启服务管理" class="headerlink" title="开机自启服务管理"></a>开机自启服务管理</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1.查看开机自启的服务有哪些 </span></span><br><span class="line">C6：[root@localhost ~]<span class="comment"># chkconfig </span></span><br><span class="line">C7：[root@localhost ~]<span class="comment"># systemctl list-unit-files</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#2.设置开机自启动</span></span><br><span class="line">C6：[root@localhost ~]<span class="comment"># chkconfig sshd on （默认2、3、4、5运行级别都自启）</span></span><br><span class="line">C7：[root@localhost ~]<span class="comment"># systemctl enable sshd</span></span><br><span class="line">相当于：ln -s /usr/lib/systemd/system/nginx.service /etc/systemd/system/multi-user.target.wants/</span><br><span class="line"></span><br><span class="line"><span class="comment">#3.关闭开机自启 </span></span><br><span class="line">C6：[root@localhost ~]<span class="comment"># chkconfig sshd off </span></span><br><span class="line">C7：[root@localhost ~]<span class="comment"># systemctl disable sshd</span></span><br><span class="line">相当于：rm -f /etc/systemd/system/multi-user.target.wants/nginx.service</span><br><span class="line"></span><br><span class="line"><span class="comment">#4.查看指定服务是否开机自启</span></span><br><span class="line">C6：[root@localhost ~]<span class="comment"># chkconfig --list sshd</span></span><br><span class="line">C7：[root@localhost ~]<span class="comment"># systemctl is-enabled nginx</span></span><br><span class="line">enabled：允许开机自启 </span><br><span class="line">disabled：不允许开机自启</span><br><span class="line"></span><br><span class="line"><span class="comment">#5.如果启动脚本被修改，重新加载启动脚本</span></span><br><span class="line">C7：systemctl daemon-reload</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>SRE</category>
      </categories>
      <tags>
        <tag>Linux基础</tag>
      </tags>
  </entry>
  <entry>
    <title>[定时任务]</title>
    <url>/2019/03/13/%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/</url>
    <content><![CDATA[<h1 id="定时任务"><a href="#定时任务" class="headerlink" title="定时任务"></a>定时任务</h1><blockquote>
<p><strong>什么是crond？</strong></p>
<p>crond是一个服务，是定时任务的守护进程</p>
<p><strong>定时任务的作用？</strong></p>
<p>1.系统级别的定时任务</p>
<ul>
<li><p>临时文件清理</p>
</li>
<li><p>系统信息采集</p>
</li>
<li><p>日志文件切割</p>
</li>
</ul>
<p>2.用户级别的定时任务</p>
<ul>
<li><p>定时向互联网同步时间</p>
</li>
<li><p>定时备份系统配置文件</p>
</li>
<li><p>定时备份数据库的数据</p>
</li>
</ul>
</blockquote>
<h2 id="定时任务语法"><a href="#定时任务语法" class="headerlink" title="定时任务语法"></a>定时任务语法</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># vim /etc/crontab</span></span><br><span class="line"><span class="comment">#定时任务，支持bash命令 </span></span><br><span class="line">SHELL=/bin/bash</span><br><span class="line"><span class="comment">#定时任务只支持直接写一下目录中的命令（建议：定时任务中的命令全部使用绝对路径）*****</span></span><br><span class="line">PATH=/sbin:/bin:/usr/sbin:/usr/bin 建议：定时任务能不用命令就不用，最好使用脚本 </span><br><span class="line"><span class="comment">#定时任务执行的内容，如果有输出，或者有报错，则通过邮件发给root用户 </span></span><br><span class="line">MAILTO=root</span><br><span class="line"></span><br><span class="line"><span class="comment"># For details see man 4 crontabs </span></span><br><span class="line"><span class="comment"># Example of job definition: </span></span><br><span class="line"><span class="comment"># .---------------- minute (0 - 59) </span></span><br><span class="line"><span class="comment"># | .------------- hour (0 - 23) </span></span><br><span class="line"><span class="comment"># | | .---------- day of month (1 - 31) </span></span><br><span class="line"><span class="comment"># | | | .------- month (1 - 12) OR jan,feb,mar,apr ... </span></span><br><span class="line"><span class="comment"># | | | | .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat </span></span><br><span class="line"><span class="comment"># | | | | | </span></span><br><span class="line"><span class="comment"># * * * * * user-name command to be executed</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#语法</span></span><br><span class="line">写定时任务</span><br><span class="line"></span><br><span class="line">30 7 * * * 用户 ls </span><br><span class="line">分 时 日 月 周</span><br><span class="line"></span><br><span class="line">/：每分钟</span><br><span class="line">,：和</span><br><span class="line">-：至（2-3,7-8）</span><br><span class="line"></span><br><span class="line">注意：定时任务最小单位分钟，无法精确到秒级</span><br></pre></td></tr></table></figure>

<h2 id="定时任务相关命令"><a href="#定时任务相关命令" class="headerlink" title="定时任务相关命令"></a>定时任务相关命令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-l：list 列出当前定时任务的列表 </span><br><span class="line">-e：edit 编辑定时任务 vim /var/spool/cron/root </span><br><span class="line">-r：remove 删除定时任务（删除全部定时任务） </span><br><span class="line">-u：user 指定定时任务的用户</span><br></pre></td></tr></table></figure>

<h2 id="定时任务练习"><a href="#定时任务练习" class="headerlink" title="定时任务练习"></a>定时任务练习</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#每天凌晨2点，执行一次ls命令 </span></span><br><span class="line">00 02 * * * ls &gt;/dev/null </span><br><span class="line"></span><br><span class="line"><span class="comment">#每个月的1号凌晨2点执行一次ls命令 </span></span><br><span class="line">00 02 1 * * ls </span><br><span class="line"></span><br><span class="line"><span class="comment">#每年的2月14凌晨2点，执行一次ls命令 </span></span><br><span class="line">00 02 14 2 * ls </span><br><span class="line"></span><br><span class="line"><span class="comment">#每周日，凌晨2点执行一次ls命令 </span></span><br><span class="line">00 02 * * 7 ls </span><br><span class="line"></span><br><span class="line"><span class="comment">#每年6月份的每个周五凌晨2点执行一次ls命令 </span></span><br><span class="line">00 02 * 6 5 ls </span><br><span class="line"></span><br><span class="line"><span class="comment">#每年的每个月的14号恰巧又是周日的时候 </span></span><br><span class="line">00 02 14 * 7 ls </span><br><span class="line"></span><br><span class="line"><span class="comment">#每年的2月14号，恰巧又是周日凌晨两点才执行ls命令 </span></span><br><span class="line">00 02 14 2 7 ls </span><br><span class="line"></span><br><span class="line"><span class="comment">#每天凌晨2点，每隔10分钟执行一次ls命令</span></span><br><span class="line">*/10 02 * * * ls </span><br><span class="line"></span><br><span class="line"><span class="comment">#每分钟执行一次ls命令 </span></span><br><span class="line">* * * * * ls </span><br><span class="line"></span><br><span class="line"><span class="comment">#每年的2月14日，00点执行一次ls </span></span><br><span class="line">00 00 14 2 * ls </span><br><span class="line"></span><br><span class="line"><span class="comment">#每隔5分钟执行一次ls命令 </span></span><br><span class="line">*/5 * * * * ls </span><br><span class="line"></span><br><span class="line"><span class="comment">#每年的1月和5月和8月的每天凌晨2点都执行一次ls命令 </span></span><br><span class="line">00 02 * 1,5,8 * ls </span><br><span class="line"></span><br><span class="line"><span class="comment">#每个月的1号到8号凌晨2点执行一次ls命令 </span></span><br><span class="line">00 02 1-8 * * ls </span><br><span class="line"></span><br><span class="line"><span class="comment">#每天晚上21点执行一次ls命令 </span></span><br><span class="line">0 21 * * * ls </span><br><span class="line"></span><br><span class="line"><span class="comment">#每个月的1号 10号 和 22号的凌晨4点45分执行一次ls命令 </span></span><br><span class="line">45 4 1,10,22 * * ls </span><br><span class="line"></span><br><span class="line"><span class="comment">#每个月的1号到10号4点45分执行一次ls命令 </span></span><br><span class="line">45 4 1-10 * * ls </span><br><span class="line"></span><br><span class="line"><span class="comment">#每个月的每隔2天的8点到11点的03分和15分分别执行ls命令 </span></span><br><span class="line">3,15 8-11 */2 * * ls </span><br><span class="line"></span><br><span class="line"><span class="comment">#每天的1点到7点和23点到24点的整点执行一次ls命令 </span></span><br><span class="line">0 23-7/1 * * * ls </span><br><span class="line"></span><br><span class="line"><span class="comment">#每周的周一到周五21点15分执行一次ls命令 </span></span><br><span class="line">15 21 * * 1-5 ls</span><br></pre></td></tr></table></figure>

<h2 id="定时任务注意事项"><a href="#定时任务注意事项" class="headerlink" title="定时任务注意事项"></a>定时任务注意事项</h2><ul>
<li>给定时任务注释 </li>
<li>将需要定期执行的任务写入Shell脚本中，避免直接使用命令无法执行的情况tar date </li>
<li>定时任务的结尾一定要有&amp;&gt;/dev/null或者将结果追加重定向&gt;&gt;/tmp/date.log文件 </li>
<li>注意有些命令是无法成功执行的 echo “123” &gt;&gt;/tmp/test.log &amp;&gt;/dev/null </li>
<li>如果一定要是用命令，命令必须使用绝对路径</li>
</ul>
<h2 id="备份定时任务的内容"><a href="#备份定时任务的内容" class="headerlink" title="备份定时任务的内容"></a>备份定时任务的内容</h2><p>就是备份/var/spool/cron/用户名</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@zls ~]<span class="comment"># cp /var/spool/cron/root /backup/root_cron</span></span><br></pre></td></tr></table></figure>

<h2 id="拒绝某个用户使用定时任务"><a href="#拒绝某个用户使用定时任务" class="headerlink" title="拒绝某个用户使用定时任务"></a>拒绝某个用户使用定时任务</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#只要将用户名写入 /etc/cron.deny文件中，则该用户无法使用定时任务</span></span><br><span class="line">[root@zls ~]<span class="comment"># vim /etc/cron.deny </span></span><br><span class="line">zls </span><br><span class="line">oldboy </span><br><span class="line">abc</span><br></pre></td></tr></table></figure>

<h2 id="定时任务调试规则"><a href="#定时任务调试规则" class="headerlink" title="定时任务调试规则"></a>定时任务调试规则</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1.crond调试</span><br><span class="line">1) 调整任务每分钟执行的频率, 以便做后续的调试</span><br><span class="line">2) 如果使用cron运行脚本，请将脚本执行的结果写入指定日志文件, 观察日志内容是否正常</span><br><span class="line">3) 命令使用绝对路径, 防止无法找到命令导致定时任务执行产生故障</span><br><span class="line">4) 通过查看/var/<span class="built_in">log</span>/cron日志，以便检查我们执行的结果，方便进行调试</span><br><span class="line"></span><br><span class="line">2.crond编写思路</span><br><span class="line">1) 手动执行命令，然后保留执行成功的结果</span><br><span class="line">2) 编写脚本</span><br><span class="line">	-脚本需要统一路径/scripts</span><br><span class="line">	-脚本内容复制执行成功的命令(减少每个环节出错几率)</span><br><span class="line">	-脚本内容尽可能的优化, 使用一些变量或使用简单的判断语句</span><br><span class="line">	-脚本执行的输出信息可以重定向至其他位置保留或写入/dev/null</span><br><span class="line">3) 执行脚本</span><br><span class="line">	-使用bash命令执行, 防止脚本没有增加执行权限(/usr/bin/bash)</span><br><span class="line">	-执行脚本成功后，复制该执行的命令，以便写入cron</span><br><span class="line">4) 编写计划任务</span><br><span class="line">	-加上必要的注释信息, 人、时间、任务</span><br><span class="line">	-设定计划任务执行的周期</span><br><span class="line">	-粘贴执行脚本的命令(不要手敲)</span><br><span class="line">5) 调试计划任务</span><br><span class="line">	-增加任务频率测试</span><br><span class="line">	-检查环境变量问题</span><br><span class="line">	-检查crond服务日志</span><br></pre></td></tr></table></figure>

<h2 id="定时任务实战-时间同步"><a href="#定时任务实战-时间同步" class="headerlink" title="定时任务实战-时间同步"></a>定时任务实战-时间同步</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1.需要下载时间同步命令</span></span><br><span class="line">[root@localhost ~]<span class="comment"># yum install -y ntpdate</span></span><br><span class="line"><span class="comment">#2.要先测试命令是否可以在命令行执行成功</span></span><br><span class="line">[root@localhost ~]<span class="comment"># ntpdate 时间同步服务器</span></span><br><span class="line">[root@localhost ~]<span class="comment"># ntpdate time1.aliyun.com</span></span><br><span class="line"><span class="comment">#3.编辑定时任务</span></span><br><span class="line">[root@localhost ~]<span class="comment"># crontab -e</span></span><br><span class="line"><span class="comment">#4.写入规则（命令复制刚才执行成功的命令）</span></span><br><span class="line">* * * * * ntpdate time1.aliyun.com</span><br><span class="line"><span class="comment">#5.查找该命令的绝对路径 </span></span><br><span class="line">[root@localhost ~]<span class="comment"># which ntpdate</span></span><br><span class="line">/usr/sbin/ntpdate</span><br><span class="line"><span class="comment">#6.完善规则中的命令路径 </span></span><br><span class="line">* * * * * /usr/sbin/ntpdate time1.aliyun.com</span><br><span class="line"><span class="comment">#7.根据规定的时间来进行定时任务编写 </span></span><br><span class="line">*/5 * * * * /usr/sbin/ntpdate time1.aliyun.com</span><br><span class="line"><span class="comment">#8.查看命令是否有输出内容，如果有则扔进黑洞 </span></span><br><span class="line">*/5 * * * * /usr/sbin/ntpdate time1.aliyun.com &amp;&gt;/dev/null</span><br><span class="line"><span class="comment">#9.加上规范注释 </span></span><br><span class="line"><span class="comment">#Usage: Sync Date By:zls Date:2022/05/10 </span></span><br><span class="line">*/5 * * * * /usr/sbin/ntpdate time1.aliyun.com &amp;&gt;/dev/null</span><br><span class="line"><span class="comment">#10.查看定时任务日志 </span></span><br><span class="line">最开始定时任务，每分钟执行一次，写完之后查看日志</span><br><span class="line">[root@localhost ~]<span class="comment"># tail -f /var/log/cron</span></span><br></pre></td></tr></table></figure>

<h2 id="定时任务实战-备份文件"><a href="#定时任务实战-备份文件" class="headerlink" title="定时任务实战-备份文件"></a>定时任务实战-备份文件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">需求：每天凌晨3点做一次备份，将备份命令写入一个脚本中</span><br><span class="line">任务：</span><br><span class="line">1.每天备份文件名要求格式：2018-02-20_hostname_etc.tar.gz</span><br><span class="line">2.存放备份内容的目录要求只保留3天的数据</span><br><span class="line">3.在执行计划任务时，不要输出任务信息</span><br><span class="line"></span><br><span class="line"><span class="comment">#1.备份使用tar命令</span></span><br><span class="line">1）实现包名加日期需求：date +%F</span><br><span class="line">[root@localhost ~]<span class="comment"># cd / &amp;&amp; tar zcf `date +%F`_hostname_etc.tar.gz etc</span></span><br><span class="line">[root@localhost ~]<span class="comment"># cd / &amp;&amp; tar zcf $(date +%F)_hostname_etc.tar.gz etc</span></span><br><span class="line">2）实现包名加主机名需求：hostname</span><br><span class="line">[root@localhost ~]<span class="comment"># cd / &amp;&amp; tar zcf `date +%F`_`hostname`_etc.tar.gz etc</span></span><br><span class="line">[root@localhost ~]<span class="comment"># cd / &amp;&amp; tar zcf $(date +%F)_$(hostname)_etc.tar.gz etc</span></span><br><span class="line">3）直接写在crontab中</span><br><span class="line">[root@localhost ~]<span class="comment"># crontab -e</span></span><br><span class="line">* * * * * /usr/bin/<span class="built_in">cd</span> / &amp;&amp; /usr/bin/tar zcf `date +%F`_`hostname`_etc.tar.gz etc</span><br><span class="line">[root@localhost ~]<span class="comment"># tail -f /var/log/cron</span></span><br><span class="line"><span class="comment">#报错</span></span><br><span class="line">[root@localhost ~]<span class="comment"># cat /var/spool/mail/root</span></span><br><span class="line">/bin/sh: -c: line 0: unexpected EOF <span class="keyword">while</span> looking <span class="keyword">for</span> matching ``<span class="string">'</span></span><br><span class="line"><span class="string">/bin/sh: -c: line 1: syntax error: unexpected end of file</span></span><br><span class="line"><span class="string">4）将命令写入脚本中</span></span><br><span class="line"><span class="string">[root@localhost ~]# vim backup_etc.sh</span></span><br><span class="line"><span class="string">#!/bin/bash</span></span><br><span class="line"><span class="string">bak_dir="/backup"</span></span><br><span class="line"><span class="string">if [ ! -d /backup ];then</span></span><br><span class="line"><span class="string">	mkdir /backup</span></span><br><span class="line"><span class="string">fi</span></span><br><span class="line"><span class="string">cd / &amp;&amp; tar zcf /backup/`date +%F`_`hostname`_etc.tar.gz etc</span></span><br><span class="line"><span class="string">find /backup -type f -mtime -3 | xargs rm -f</span></span><br><span class="line"><span class="string">[root@localhost ~]# sh backup_etc.sh</span></span><br><span class="line"><span class="string">5）不输出任务信息 </span></span><br><span class="line"><span class="string">在定时任务中 &amp;&gt;/dev/null</span></span><br><span class="line"><span class="string">6）编写定时任务</span></span><br><span class="line"><span class="string">#先在命令行中手动执行一次脚本</span></span><br><span class="line"><span class="string">#如果没有报错，再编写定时任务</span></span><br><span class="line"><span class="string">#定时任务，提高频率先每分钟执行一次</span></span><br><span class="line"><span class="string">[root@localhost ~]# crontab -e</span></span><br><span class="line"><span class="string">* * * * * /bin/sh /root/backup_etc.sh</span></span><br><span class="line"><span class="string">##优化脚本内容</span></span><br><span class="line"><span class="string">#1.不需要输出内容</span></span><br><span class="line"><span class="string">* * * * * /bin/sh /root/backup_etc.sh &amp;&gt; /dev/null</span></span><br><span class="line"><span class="string">#2.满足需求中的时间</span></span><br><span class="line"><span class="string">00 03 * * * /bin/sh /root/backup_etc.sh &amp;&gt; /dev/null</span></span><br><span class="line"><span class="string">#3.加注释</span></span><br><span class="line"><span class="string"># Usage:backup etc By roger Data:2011-5-11</span></span><br><span class="line"><span class="string">00 03 * * * /bin/sh /root/backup_etc.sh &amp;&gt; /dev/null</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">注意：脚本中每添加一行内容就测试执行一次</span></span><br></pre></td></tr></table></figure>

<h2 id="定时任务实战-邮件发送"><a href="#定时任务实战-邮件发送" class="headerlink" title="定时任务实战-邮件发送"></a>定时任务实战-邮件发送</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1.安装发邮件工具mailx</span></span><br><span class="line">[root@localhost ~]<span class="comment"># yum install -y mailx</span></span><br><span class="line">[root@localhost ~]<span class="comment"># echo '123' | mail -s '发给root的邮件' root@localhost</span></span><br><span class="line">[root@localhost ~]<span class="comment"># tail -f /var/spool/mail/root</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#2.配置发件人</span></span><br><span class="line">[root@localhost ~]<span class="comment"># vim /etc/mail.rc</span></span><br><span class="line"><span class="comment">#发件人 </span></span><br><span class="line"><span class="built_in">set</span> from=<span class="comment">#你的QQ邮箱</span></span><br><span class="line"><span class="comment">#QQ邮箱使用的邮件协议</span></span><br><span class="line"><span class="built_in">set</span> smtp=smtps://smtp.qq.com:465</span><br><span class="line"><span class="comment">#发件人账号</span></span><br><span class="line"><span class="built_in">set</span> smtp-auth-user=<span class="comment">#你的QQ邮箱登录账号</span></span><br><span class="line"><span class="comment">#发件人密码</span></span><br><span class="line"><span class="built_in">set</span> smtp-auth-password=<span class="comment">#客户端授权码</span></span><br><span class="line"><span class="comment">#认证登录</span></span><br><span class="line"><span class="built_in">set</span> smtp-auth=login</span><br><span class="line"><span class="comment">#忽略证书</span></span><br><span class="line"><span class="built_in">set</span> ssl-verify=ignore</span><br><span class="line"><span class="comment">#证书存放目录</span></span><br><span class="line"><span class="built_in">set</span> nss-config-dir=/etc/pki/nssdb/</span><br><span class="line"></span><br><span class="line"><span class="comment">#3.邮箱开启服务，获取客户端授权码</span></span><br><span class="line">POP3/SMTP服务</span><br><span class="line">IMAP/SMTP服务</span><br><span class="line">授权码：rffwtpfinrndbdjh/lsytktvegbwobegf</span><br><span class="line"></span><br><span class="line"><span class="comment">#4.编辑情书</span></span><br><span class="line">[root@localhost ~]<span class="comment"># mkdir qingshu</span></span><br><span class="line">[root@localhost ~]<span class="comment"># vim qingshu1.txt</span></span><br><span class="line">我很笨，我不知道要怎么表达我心中对你的感觉。</span><br><span class="line">[root@localhost ~]<span class="comment"># vim qingshu2.txt</span></span><br><span class="line">喜欢你的人很多，不缺我一个，但我爱的人很少，只有你一个！</span><br><span class="line">[root@localhost ~]<span class="comment"># vim qingshu3.txt</span></span><br><span class="line">一直想说，无论走到哪里，最想去的是你的身边。</span><br><span class="line">[root@localhost ~]<span class="comment"># vim qingshu4.txt</span></span><br><span class="line">愿我们彼此相爱，一直到时间的尽头</span><br><span class="line">[root@localhost ~]<span class="comment"># vim qingshu5.txt</span></span><br><span class="line">我相信我们可以一起，等青丝变白发</span><br><span class="line">[root@localhost ~]<span class="comment"># vim qingshu6.txt</span></span><br><span class="line">无论岁月如何变迁，我对你的爱曾从不改变</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建脚本</span></span><br><span class="line">[root@localhost ~]<span class="comment"># vim qingshu.sh</span></span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">love_dir=<span class="string">"/root/qingshu"</span></span><br><span class="line">love_name=`ls -1 <span class="variable">$love_dir</span> | head -1`</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$love_dir</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$love_name</span></span><br><span class="line">cat <span class="variable">$love_dir</span>/<span class="variable">$love_name</span> |mail -s <span class="string">'发送给roger的邮件'</span> 690705712@qq.com</span><br><span class="line">mv <span class="variable">$love_dir</span>/<span class="variable">$love_name</span> /tmp</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建定时任务</span></span><br><span class="line">[root@localhost ~]<span class="comment"># crontab -e</span></span><br><span class="line"><span class="comment"># Usage:send qingshu By roger Date:2022-05-11</span></span><br><span class="line">* * * * * /bin/sh /root/qingshu.sh &amp;&gt;/dev/null</span><br><span class="line"></span><br><span class="line">注意：当文件数为0时会发空邮件</span><br><span class="line"></span><br><span class="line"><span class="comment">#解决空邮件问题</span></span><br><span class="line"><span class="keyword">if</span> [<span class="variable">$count</span> -gt 0];<span class="keyword">then</span></span><br><span class="line">  cat <span class="variable">$love_dir</span>/<span class="variable">$love_name</span> |mail -s <span class="string">'发送给roger的邮件'</span> 690705712@qq.com</span><br><span class="line">  mv <span class="variable">$love_dir</span>/<span class="variable">$love_name</span> /tmp</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>SRE</category>
      </categories>
      <tags>
        <tag>Linux基础</tag>
      </tags>
  </entry>
  <entry>
    <title>[文件管理]</title>
    <url>/2019/03/01/%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<h1 id="文件管理"><a href="#文件管理" class="headerlink" title="文件管理"></a>文件管理</h1><p>在linux中，一切皆文件，文件没有后缀区分（所谓的后缀是给用户看的）</p>
<p>文件管理就是对一个文件进行创建、复制、移动、查看、编辑、压缩、查找、删除等</p>
<h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><p>几乎所有的计算机操作系统都使用目录结构组织文件，具体来说就是在一个目录中存放子目录和文件，而子目录中又会进一步存放子目录和文件，依此类推形成一个树状的文件结构，称为”目录树”</p>
<p>Windows：以多根的方式组织文件<code>C:\、D:\</code></p>
<p>Linux：以单根的方式组织文件<code>/</code></p>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20220320175307261.png" alt="image-20220320175307261"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#存放系统可执行程序（系统命令） </span></span><br><span class="line">bin -&gt; usr/bin  </span><br><span class="line"><span class="comment">#存放系统可执行程序（系统命令：只有超级管理员可执行命令 super超级） </span></span><br><span class="line">sbin -&gt; usr/sbin </span><br><span class="line"><span class="comment">#系统启动的加载程序文件 </span></span><br><span class="line">boot</span><br><span class="line"><span class="comment">#设备文件</span></span><br><span class="line">dev</span><br><span class="line"><span class="comment">#存放系统及应用的配置文件</span></span><br><span class="line">etc  </span><br><span class="line"><span class="comment">#普通用户的家目录 </span></span><br><span class="line">home</span><br><span class="line"><span class="comment">#存放开发人员的系统库文件 </span></span><br><span class="line">lib -&gt; usr/lib lib64 -&gt; usr/lib64  </span><br><span class="line"><span class="comment">#一般来说是挂载光驱的目录 </span></span><br><span class="line">media  </span><br><span class="line"><span class="comment">#可挂载目录 </span></span><br><span class="line">mnt  </span><br><span class="line"><span class="comment">#存放第三方应用程序目录 </span></span><br><span class="line">opt  </span><br><span class="line"><span class="comment">#存放系统进程相关的目录</span></span><br><span class="line">proc  </span><br><span class="line"><span class="comment">#超级管理员root用户的家目录 </span></span><br><span class="line">root </span><br><span class="line"><span class="comment">#执行后的程序，产生的启动文件存放目录 </span></span><br><span class="line">run  </span><br><span class="line"><span class="comment">#无实意，空目录</span></span><br><span class="line">srv</span><br><span class="line"><span class="comment">#系统文件存放目录</span></span><br><span class="line">sys</span><br><span class="line"><span class="comment">#回收站，存放临时文件或者没有用要删除的文件 </span></span><br><span class="line">tmp</span><br><span class="line"><span class="comment">#存放系统用户文件 </span></span><br><span class="line">usr</span><br><span class="line"><span class="comment">#存放系统日志文件</span></span><br><span class="line">var</span><br><span class="line"></span><br><span class="line">-&gt;：软链接方式</span><br><span class="line">绿色：可执行程序</span><br></pre></td></tr></table></figure>

<p>配置文件目录/etc</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#主机名配置文件</span></span><br><span class="line">/etc/hostname  </span><br><span class="line"><span class="comment">#本地域名解析配置文件（本地DNS） </span></span><br><span class="line">/etc/hosts </span><br><span class="line"><span class="comment">#网卡配置文件 </span></span><br><span class="line">/etc/sysconfig/network-scripts/ifcfg-ens33 </span><br><span class="line"><span class="comment">#DNS配置文件 </span></span><br><span class="line">/etc/resolv.conf </span><br><span class="line"><span class="comment">#开机登录欢迎界面配置文件 </span></span><br><span class="line">/etc/motd </span><br><span class="line"><span class="comment">#全局环境变量配置文件 </span></span><br><span class="line">/etc/profile </span><br><span class="line"><span class="comment">#存放用户默认的环境变量配置文件（用于误删除之后的恢复）</span></span><br><span class="line">/etc/skel </span><br><span class="line"><span class="comment">#存放用户信息配置文件 </span></span><br><span class="line">/etc/passwd </span><br><span class="line"><span class="comment">#存放用户密码信息的配置文件 </span></span><br><span class="line">/etc/shadow </span><br><span class="line"><span class="comment">#存放用户组信息的配置文件 </span></span><br><span class="line">/etc/group </span><br><span class="line"><span class="comment">#存放用户组密码信息的配置文件</span></span><br><span class="line">/etc/gshadow</span><br></pre></td></tr></table></figure>

<p>可变的目录/var</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#系统日志 </span></span><br><span class="line">/var/log/messages </span><br><span class="line"><span class="comment">#系统登录日志 </span></span><br><span class="line">/var/log/secure</span><br></pre></td></tr></table></figure>

<p>设备相关目录/dev</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#系统中的第一块磁盘</span></span><br><span class="line">/dev/sda </span><br><span class="line"><span class="comment">#系统中的第一块磁盘的第一个分区</span></span><br><span class="line">/dev/sda1 </span><br><span class="line"><span class="comment">#系统中第五块磁盘的第4个分区 </span></span><br><span class="line">/dev/sde4</span><br><span class="line"><span class="comment">#黑洞（用于无用的内容输出）</span></span><br><span class="line">/dev/null</span><br><span class="line"><span class="comment">#从该设备中可以源源不断的取出数据</span></span><br><span class="line">/dev/zero</span><br><span class="line"><span class="comment">#随机数设备</span></span><br><span class="line">/dev/random  </span><br><span class="line"><span class="comment">#终端设备文件</span></span><br><span class="line">/dev/pts/0 </span><br><span class="line">/dev/pts/1 </span><br><span class="line"><span class="comment">#光驱</span></span><br><span class="line">/dev/cdrom</span><br></pre></td></tr></table></figure>

<h2 id="路径的定位"><a href="#路径的定位" class="headerlink" title="路径的定位"></a>路径的定位</h2><ul>
<li><p>绝对路径：以’/‘开头的路径，就是绝对路径</p>
</li>
<li><p>相对路径：不以’/‘开头的路径，就是相对路径</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#cd 绝对路径</span></span><br><span class="line">cd /etc/hostname</span><br><span class="line"><span class="comment">#cd 相对路径</span></span><br><span class="line">cd	test/abc</span><br><span class="line"></span><br><span class="line">FQ：/abc/test和abc/test是一样吗</span><br><span class="line"></span><br><span class="line">pwd  <span class="comment">#查看当前所在的路径</span></span><br><span class="line">cd   <span class="comment">#切换目录</span></span><br><span class="line">[root@client ~]<span class="comment"># cd /etc/sysconfig/network-scripts/</span></span><br><span class="line">[root@client network-scripts]<span class="comment"># pwd</span></span><br><span class="line">/etc/sysconfig/network-scripts</span><br></pre></td></tr></table></figure>

<h2 id="特殊目录"><a href="#特殊目录" class="headerlink" title="特殊目录"></a>特殊目录</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">. ：代表当前目录 </span><br><span class="line">.. ：代表上一级目录</span><br><span class="line">-：返回上一次所在目录</span><br><span class="line">cd：返回当前用户家目录</span><br><span class="line"></span><br><span class="line">[root@client ~]<span class="comment"># cd ./etc</span></span><br><span class="line">[root@client ~]<span class="comment"># cd ../etc</span></span><br><span class="line">[root@client ~]<span class="comment"># cd ~/../etc</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#根目录是最顶级目录</span></span><br><span class="line">[root@client etc]<span class="comment"># cd /</span></span><br><span class="line">[root@client /]<span class="comment"># cd ..</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#-后不能加任何目录</span></span><br><span class="line">[root@client /]<span class="comment"># cd /usr/local/src/</span></span><br><span class="line">[root@client src]<span class="comment"># cd -/bin</span></span><br><span class="line">-bash: cd: -/: 无效选项</span><br><span class="line">cd: 用法:cd [-L|[-P [-e]]] [dir]</span><br><span class="line">        </span><br><span class="line">ps：所谓的.和..目录实际上属于相对路径的一种表示形式</span><br></pre></td></tr></table></figure>

<h1 id="文件操作类命令"><a href="#文件操作类命令" class="headerlink" title="文件操作类命令"></a>文件操作类命令</h1><h2 id="目录创建mkdir"><a href="#目录创建mkdir" class="headerlink" title="目录创建mkdir"></a>目录创建<code>mkdir</code></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#语法</span></span><br><span class="line">mkdir [OPTION] 目录名 </span><br><span class="line">创建目录 [选项可有可无，可以有多个] 目录名字，可以有多个</span><br><span class="line"><span class="comment">#选项</span></span><br><span class="line">-p：递归创建目录，如果目录已存在，则不创建，并且不报错</span><br><span class="line">-v：打印目录的创建过程</span><br><span class="line"><span class="comment">#示例</span></span><br><span class="line">[root@client ~]<span class="comment"># mkdir dir1</span></span><br><span class="line">[root@client ~]<span class="comment"># mkdir /home/ob/dir1 /home/ob/dir2</span></span><br><span class="line">[root@client ~]<span class="comment"># mkdir -v /home/ob/&#123;dir3,dir4&#125;	</span></span><br><span class="line">[root@client ~]<span class="comment"># mkdir -pv /home/ob/dir5/dir6</span></span><br><span class="line">[root@client ~]<span class="comment"># mkdir -pv /home/&#123;ob/&#123;diu,but&#125;,boy&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#报错1</span></span><br><span class="line">没有这样的文件或目录，不能创建/d/wyk/dsb/250</span><br><span class="line">[root@client ~]<span class="comment"># mkdir /d/wyk/dsb/250</span></span><br><span class="line">mkdir: cannot create directory ‘/d/wyk/dsb/250’: No such file or directory</span><br><span class="line"><span class="comment">#报错2</span></span><br><span class="line">目录不能创建，zls文件已存在 </span><br><span class="line">[root@client ~]<span class="comment"># mkdir zls </span></span><br><span class="line">mkdir: cannot create directory ‘zls’: File exists</span><br><span class="line"></span><br><span class="line">ps：使用mkdir创建目录，它的上一级目录必须存在，才能创建</span><br><span class="line"></span><br><span class="line"><span class="comment">#练习：一条命令创建出以下目录</span></span><br><span class="line">/home/zls</span><br><span class="line">/home/zls/test1</span><br><span class="line">/home/zls/test2</span><br><span class="line">/home/oldboy</span><br><span class="line">/home/oldboy/test1</span><br><span class="line">/tmp/oldboy</span><br><span class="line">/tmp/oldgirl</span><br><span class="line">/root/<span class="built_in">test</span>/test1</span><br><span class="line">/root/<span class="built_in">test</span>/test2</span><br><span class="line">/root/abc</span><br><span class="line">/backup</span><br><span class="line"></span><br><span class="line">[root@client ~]<span class="comment"># mkdir -pv /&#123;home/&#123;zls/&#123;test1,test2&#125;,oldboy/test1&#125;,tmp/&#123;oldboy,oldgirl&#125;,root/&#123;test/&#123;test1,test2&#125;,abc&#125;,bachup&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="文件创建touch"><a href="#文件创建touch" class="headerlink" title="文件创建touch"></a>文件创建<code>touch</code></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#语法</span></span><br><span class="line">touch [OPTION] 文件名</span><br><span class="line">touch命令 [选项] 文件名，可以有多个</span><br><span class="line"></span><br><span class="line">[root@client ~]<span class="comment"># touch file  //文件已存在修改时间戳</span></span><br><span class="line">[root@client ~]<span class="comment"># touch file2 file3</span></span><br><span class="line">[root@client ~]<span class="comment"># touch /home/od/file4 file5</span></span><br><span class="line">[root@client ~]<span class="comment"># touch file&#123;a,b,c&#125;  //&#123;&#125;集合，等价touch a b c</span></span><br><span class="line">[root@client ~]<span class="comment"># touch file&#123;1..10&#125;</span></span><br><span class="line">[root@client ~]<span class="comment"># touch file&#123;a..z&#125;</span></span><br><span class="line"></span><br><span class="line">ps1：touch想要创建文件，该文件的上级目录必须存在</span><br><span class="line">ps2：&#123;a..z&#125;根据ASCII表进行创建</span><br></pre></td></tr></table></figure>

<h2 id="文件移动mv"><a href="#文件移动mv" class="headerlink" title="文件移动mv"></a>文件移动<code>mv</code></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@client ~]<span class="comment"># mv file1 file2    //原地移动相当于改名</span></span><br><span class="line">[root@client ~]<span class="comment"># mv file1 /tmp/    //移动文件至tmp目录</span></span><br><span class="line">[root@client ~]<span class="comment"># mv /tmp/file1 ./  //移动tmp目录的文件至当前目录</span></span><br><span class="line">[root@client ~]<span class="comment"># mv dir/ /tmp/     //移动目录至/tmp目录下</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#移动多个文件至同一个目录</span></span><br><span class="line">touch file&#123;1..3&#125;</span><br><span class="line">mv file1 file2 file3 /opt/</span><br><span class="line"></span><br><span class="line"><span class="comment">#移动多个目录至同一个目录</span></span><br><span class="line">mkdir dir&#123;1..3&#125;</span><br><span class="line">mv dir1/ dir2/ dir3/ /opt</span><br></pre></td></tr></table></figure>

<h2 id="显示目录结构tree"><a href="#显示目录结构tree" class="headerlink" title="显示目录结构tree"></a>显示目录结构<code>tree</code></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#修改yum源</span></span><br><span class="line">rm -fr /etc/yum.repos.d/*</span><br><span class="line">curl -o /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-7.repo</span><br><span class="line">curl -o /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-7.repo</span><br><span class="line"><span class="comment">#安装tree命令</span></span><br><span class="line">yum install -y tree</span><br><span class="line"></span><br><span class="line"><span class="comment">#选项</span></span><br><span class="line">-L：显示目录树的层级</span><br><span class="line">-d：只查看目录</span><br><span class="line">[root@client ~]<span class="comment"># tree /home/ob/  //显示当前目录下的结构</span></span><br><span class="line">/home/ob/</span><br><span class="line">├──	dir1</span><br><span class="line">├──	dir2</span><br><span class="line">├──	dir3</span><br><span class="line">├──	dir4</span><br><span class="line">├──	dir5</span><br><span class="line">│    └──dir6</span><br><span class="line">└──	dir7</span><br></pre></td></tr></table></figure>

<h2 id="文件复制cp"><a href="#文件复制cp" class="headerlink" title="文件复制cp"></a>文件复制<code>cp</code></h2><table>
<thead>
<tr>
<th align="center">选项</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">-p</td>
<td align="center">保持文件属性</td>
</tr>
<tr>
<td align="center">-r</td>
<td align="center">递归复制，复制目录及目录下的所有文件</td>
</tr>
<tr>
<td align="center">-a</td>
<td align="center">相当于-rp，既可以拷贝目录，又可以保持文件属性</td>
</tr>
<tr>
<td align="center">-i</td>
<td align="center">提示是否覆盖（cp命令默认使用”cp -i”）</td>
</tr>
<tr>
<td align="center">-v</td>
<td align="center">显示拷贝的过程</td>
</tr>
</tbody></table>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#语法 </span></span><br><span class="line">cp [option] 源文件 目标文件</span><br><span class="line"></span><br><span class="line">ps：默认只能拷贝文件</span><br><span class="line"></span><br><span class="line"><span class="comment">#示例</span></span><br><span class="line">[root@localhost ~]<span class="comment"># cp file /tmp/file_copy</span></span><br><span class="line"><span class="comment">#不修改名称</span></span><br><span class="line">[root@localhost ~]<span class="comment"># cp name /tmp/name</span></span><br><span class="line">[root@localhost ~]<span class="comment"># cp file /tmp/</span></span><br><span class="line"><span class="comment">#-p保持原文件属性</span></span><br><span class="line">[root@localhost ~]<span class="comment"># cp -p /abc/oldboy.txt .</span></span><br><span class="line">[root@localhost ~]<span class="comment"># cp -p file /tmp/file_p</span></span><br><span class="line"><span class="comment">#-r复制目录使用，递归复制</span></span><br><span class="line">[root@localhost ~]<span class="comment"># cp -r /etc/ /tmp/</span></span><br><span class="line">[root@localhost ~]<span class="comment"># cp -r /tmp /root/</span></span><br><span class="line"><span class="comment">#拷贝多个文件至一个目录</span></span><br><span class="line">[root@localhost ~]<span class="comment"># cp -rv /etc/hosts /etc/hostname /tmp</span></span><br><span class="line">[root@localhost ~]<span class="comment"># cp -rv /etc/&#123;hosts,hosts.bak&#125; /tmp</span></span><br><span class="line"><span class="comment">#-a拷贝目录，保持目录属性 </span></span><br><span class="line">[root@localhost ~]<span class="comment"># cp -a /abc /root/</span></span><br><span class="line"><span class="comment">#-i提示是否覆盖</span></span><br><span class="line">[root@localhost ~]<span class="comment"># cp -i /abc/oldboy.txt /tmp/zhujiao </span></span><br><span class="line">cp: overwrite ‘/tmp/zhujiao’?</span><br><span class="line"><span class="comment">#-v显示拷贝过程</span></span><br><span class="line">[root@localhost ~]<span class="comment"># cp -av /etc /tmp/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#避免提示的两种方式</span></span><br><span class="line">1.使用转义符：让转义符后面的内容还原成原始状态</span><br><span class="line">[root@localhost ~]<span class="comment"># \cp -a /etc /tmp/ </span></span><br><span class="line">2.使用命令的绝对路径 </span><br><span class="line">[root@localhost ~]<span class="comment"># /bin/cp -a /etc /tmp/</span></span><br><span class="line"><span class="comment">#查看命令所在位置</span></span><br><span class="line">[root@localhost ~]<span class="comment"># which cp</span></span><br><span class="line"></span><br><span class="line">ps：当拷贝文件有多个源文件的情况下，最后一个必须是目录，不能是普通文件，也不能不存在</span><br></pre></td></tr></table></figure>

<h2 id="删除命令rm"><a href="#删除命令rm" class="headerlink" title="删除命令rm"></a>删除命令<code>rm</code></h2><table>
<thead>
<tr>
<th align="center">选项</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">-i</td>
<td align="center">提示是否删除（rm命令默认使用”rm -i”）</td>
</tr>
<tr>
<td align="center">-r</td>
<td align="center">递归删除</td>
</tr>
<tr>
<td align="center">-f</td>
<td align="center">强制删除force</td>
</tr>
<tr>
<td align="center">-d</td>
<td align="center">只能删除空目录</td>
</tr>
</tbody></table>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#语法 </span></span><br><span class="line">rm [OPTION] 文件名</span><br><span class="line"></span><br><span class="line">ps：默认只能删除普通文件</span><br><span class="line"></span><br><span class="line"><span class="comment">#示例</span></span><br><span class="line">[root@localhost ~]<span class="comment"># rm /tmp/ooo </span></span><br><span class="line">rm: remove regular empty file ‘/tmp/ooo’?</span><br><span class="line"><span class="comment">#-f删除文件不提示</span></span><br><span class="line">[root@localhost ~]<span class="comment"># rm -f file.txt</span></span><br><span class="line">[root@localhost ~]<span class="comment"># rm -fr ./*</span></span><br><span class="line"><span class="comment">#-f删除不包括隐藏文件</span></span><br><span class="line">[root@localhost ~]<span class="comment"># mkdir /home/dir10</span></span><br><span class="line">[root@localhost ~]<span class="comment"># touch /home/dir10/&#123;file2,file3,.file4&#125;</span></span><br><span class="line">[root@localhost ~]<span class="comment"># rm -f /home/dir10/*</span></span><br><span class="line">[root@localhost ~]<span class="comment"># ls /home/dir10/ -a</span></span><br><span class="line">...	.file4</span><br><span class="line"><span class="comment">#-r递归删除</span></span><br><span class="line">[root@localhost ~]<span class="comment"># rm -r /root/abc/ </span></span><br><span class="line">rm: descend into directory ‘/root/abc/’? y </span><br><span class="line">rm: remove regular file ‘/root/abc/oldboy.txt’? y </span><br><span class="line">rm: remove directory ‘/root/abc/’? y</span><br><span class="line"><span class="comment">#-rf递归删除不提示（慎用）</span></span><br><span class="line">[root@localhost ~]<span class="comment"># rm -rf dir/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#报错</span></span><br><span class="line">[root@localhost ~]<span class="comment"># rm /root/abc/ </span></span><br><span class="line">rm: cannot remove ‘/root/abc/’: Is a directory </span><br><span class="line">/root/abc是一个目录，rm不能直接删除目录</span><br></pre></td></tr></table></figure>

<h1 id="文件查看类命令"><a href="#文件查看类命令" class="headerlink" title="文件查看类命令"></a>文件查看类命令</h1><h2 id="cat命令"><a href="#cat命令" class="headerlink" title="cat命令"></a>cat命令</h2><table>
<thead>
<tr>
<th align="center">选项</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">-n</td>
<td align="center">number 打印行号，显示行号</td>
</tr>
<tr>
<td align="center">-E</td>
<td align="center">end ，查看文件每一行的结尾，以$符表示</td>
</tr>
<tr>
<td align="center">-T</td>
<td align="center">Tab，查看文件中每一行内容是否含有制表符。以^I表示一个制表符</td>
</tr>
<tr>
<td align="center">-A</td>
<td align="center">既显示制表符，又显示文件的结尾</td>
</tr>
</tbody></table>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#语法</span></span><br><span class="line">cat [OPTION] 文件名</span><br><span class="line"></span><br><span class="line">ps：cat只能查看文件内容</span><br><span class="line"></span><br><span class="line"><span class="comment">#示例</span></span><br><span class="line">[root@localhost ~]<span class="comment"># echo 1 &gt; 1.txt </span></span><br><span class="line">[root@localhost ~]<span class="comment"># echo 2 &gt; 2.txt </span></span><br><span class="line">[root@localhost ~]<span class="comment"># echo 3 &gt; 3.txt</span></span><br><span class="line">[root@localhost ~]<span class="comment"># cat &#123;1..3&#125;.txt </span></span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line"></span><br><span class="line"><span class="comment">#报错 </span></span><br><span class="line">[root@localhost ~]<span class="comment"># cat /tmp </span></span><br><span class="line">cat: /tmp: Is a directory </span><br><span class="line">原因：/tmp是一个目录</span><br><span class="line"></span><br><span class="line"><span class="comment">#打印行号 -n</span></span><br><span class="line">[root@localhost ~]<span class="comment"># cat -n /etc/passwd</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#查看文件结尾 -E</span></span><br><span class="line">[root@localhost ~]<span class="comment"># cat -E 1.txt</span></span><br><span class="line">1 $ </span><br><span class="line">2 $</span><br><span class="line">3 $ </span><br><span class="line">4 7 $ </span><br><span class="line">5 2 0$ </span><br><span class="line">6 9$ </span><br><span class="line">7$</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看文件中的制表符 -T</span></span><br><span class="line">[root@localhost ~]<span class="comment"># cat -T 1.txt</span></span><br><span class="line">1^I^I </span><br><span class="line">2^I3 </span><br><span class="line">4^I^I7 </span><br><span class="line">5^I2^I^I^I0 </span><br><span class="line">6    9 </span><br><span class="line">7</span><br><span class="line"></span><br><span class="line"><span class="comment">#既查看制表符，又查看文件结尾 -A</span></span><br><span class="line">[root@localhost ~]<span class="comment"># cat -A 1.txt</span></span><br><span class="line">1^I^I $ </span><br><span class="line">2 $ </span><br><span class="line">^I3 $ </span><br><span class="line">4^I^I7 $ </span><br><span class="line">5^I2^I^I^I0$ </span><br><span class="line">6 9$ </span><br><span class="line">7$</span><br><span class="line"></span><br><span class="line"><span class="comment">#倒序查看文件</span></span><br><span class="line">[root@localhost ~]<span class="comment"># tac	1.txt</span></span><br></pre></td></tr></table></figure>

<h2 id="more-less命令"><a href="#more-less命令" class="headerlink" title="more-less命令"></a>more-less命令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#more语法</span></span><br><span class="line">more 文件名 </span><br><span class="line"></span><br><span class="line"><span class="comment">#操作</span></span><br><span class="line">按回车，一行一行向下显示 </span><br><span class="line">按空格，一页一页向下显示 </span><br><span class="line">Ctrl + b：向上查看 </span><br><span class="line">Ctrl + f：向下查看</span><br><span class="line"></span><br><span class="line"><span class="comment">#less语法</span></span><br><span class="line">less 文件名 </span><br><span class="line"></span><br><span class="line"><span class="comment">#操作</span></span><br><span class="line">按回车，一行一行向下显示 </span><br><span class="line">按空格，一页一页向下显示</span><br><span class="line">Ctrl + b：向上查看 </span><br><span class="line">Ctrl + f：向下查看 </span><br><span class="line"></span><br><span class="line">输入/关键字，高亮显示，所有匹配到的内容 </span><br><span class="line">按n，查找下一个关键字</span><br><span class="line">Shift + n 查找上一个关键字</span><br></pre></td></tr></table></figure>

<h2 id="head命令"><a href="#head命令" class="headerlink" title="head命令"></a>head命令</h2><table>
<thead>
<tr>
<th align="center">选项</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">-n</td>
<td align="center">指定查看文件开头的前n行，n可以省略</td>
</tr>
</tbody></table>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#语法</span></span><br><span class="line">head 文件名</span><br><span class="line">默认显示一个文件的前10行内容</span><br><span class="line"></span><br><span class="line"><span class="comment">#示例</span></span><br><span class="line">[root@localhost ~]<span class="comment"># head /etc/services</span></span><br><span class="line">[root@localhost ~]<span class="comment"># head -n 3 /etc/services</span></span><br><span class="line">[root@localhost ~]<span class="comment"># head -5 /etc/services</span></span><br></pre></td></tr></table></figure>

<h2 id="tail命令"><a href="#tail命令" class="headerlink" title="tail命令"></a>tail命令</h2><table>
<thead>
<tr>
<th align="center">选项</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">-n</td>
<td align="center">指定查看文件末尾的后n行，n可以省略</td>
</tr>
<tr>
<td align="center">-f</td>
<td align="center">follow，跟踪，动态跟踪一个文件的末尾</td>
</tr>
</tbody></table>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#语法</span></span><br><span class="line">tail 文件名 </span><br><span class="line">默认显示一个文件的后10行内容</span><br><span class="line"></span><br><span class="line"><span class="comment">#示例</span></span><br><span class="line">[root@localhost ~]<span class="comment"># tail /etc/services</span></span><br><span class="line">[root@localhost ~]<span class="comment"># tail -n 3 /etc/services</span></span><br><span class="line">[root@localhost ~]<span class="comment"># tail -3 /etc/services</span></span><br><span class="line"><span class="comment">#-f动态跟踪</span></span><br><span class="line">[root@localhost ~]<span class="comment"># tail -f /var/log/messages</span></span><br><span class="line">Mar 23 21:24:38 client systemd: Created slice User Slice of root.</span><br><span class="line">Mar 23 21:24:38 client systemd: Starting User Slice of root.</span><br><span class="line">Mar 23 21:24:38 client systemd: Started Session 1 of user root.</span><br><span class="line">Mar 23 21:24:38 client systemd-logind: New session 1 of user root.</span><br><span class="line">Mar 23 21:24:38 client systemd: Starting Session 1 of user root.</span><br><span class="line">Mar 23 21:24:46 client systemd: Started Session 2 of user root.</span><br><span class="line">Mar 23 21:24:46 client systemd-logind: New session 2 of user root.</span><br><span class="line">Mar 23 21:24:46 client systemd: Starting Session 2 of user root.</span><br><span class="line">Mar 23 21:38:29 client systemd: Starting Cleanup of Temporary Directories...</span><br><span class="line">Mar 23 21:38:29 client systemd: Started Cleanup of Temporary Directories.</span><br></pre></td></tr></table></figure>

<h1 id="文件过滤类命令"><a href="#文件过滤类命令" class="headerlink" title="文件过滤类命令"></a>文件过滤类命令</h1><h2 id="过滤grep"><a href="#过滤grep" class="headerlink" title="过滤grep"></a>过滤<code>grep</code></h2><table>
<thead>
<tr>
<th align="center">选项</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">-n</td>
<td align="center">打印行号 number</td>
</tr>
<tr>
<td align="center">-A</td>
<td align="center">after 查看过滤内容的后N行</td>
</tr>
<tr>
<td align="center">-B</td>
<td align="center">before 查看过滤内容的前N行</td>
</tr>
<tr>
<td align="center">-C</td>
<td align="center">center 查看过滤内容的前、后N行</td>
</tr>
<tr>
<td align="center">-v</td>
<td align="center">取反</td>
</tr>
<tr>
<td align="center">-E</td>
<td align="center">可以过滤多个结果</td>
</tr>
<tr>
<td align="center">-o</td>
<td align="center">只打印出过滤内容</td>
</tr>
<tr>
<td align="center">-i</td>
<td align="center">不区分大小写</td>
</tr>
</tbody></table>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">|：管道符</span><br><span class="line">作用：将管道符左边命令的标准输出，交给管道符右边命令的标准输入来处理</span><br><span class="line"></span><br><span class="line"><span class="comment">#特殊含义符</span></span><br><span class="line">^：以...开头 </span><br><span class="line">$：以...结尾 </span><br><span class="line">*：匹配*前面的内容至少0次或多次 </span><br><span class="line">.：匹配任意字符</span><br><span class="line"></span><br><span class="line">[root@localhost ~]<span class="comment"># cat &gt;&gt; zls.txt &lt;&lt; EOF</span></span><br><span class="line">卧槽</span><br><span class="line">作者：曾老湿</span><br><span class="line">江山风景美如画，</span><br><span class="line">本想吟诗赠天下。</span><br><span class="line">奈何自己没文化，</span><br><span class="line">一句卧槽风好大。</span><br><span class="line">就这么地吧。</span><br><span class="line">谢谢大家。</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment">#语法</span></span><br><span class="line">grep [option] 参数 条件 文件名</span><br><span class="line"></span><br><span class="line"><span class="comment">#示例</span></span><br><span class="line"><span class="comment">#匹配以root开头的行</span></span><br><span class="line">[root@localhost ~]<span class="comment"># grep "^root" /etc/passwd</span></span><br><span class="line"><span class="comment">#匹配以bash结尾的行</span></span><br><span class="line">[root@localhost ~]<span class="comment"># grep "bash$" /etc/passwd</span></span><br><span class="line"><span class="comment">#匹配除了包含ftp的内容，其他全部打印</span></span><br><span class="line">[root@localhost ~]<span class="comment"># grep -v "ftp" /etc/passwd</span></span><br><span class="line"><span class="comment">#忽略大小写</span></span><br><span class="line">[root@localhost ~]<span class="comment"># grep -i "ftp" /etc/passwd</span></span><br><span class="line"><span class="comment">#匹配/var/log/secure文件中Failed字符串，并打印它的下2行</span></span><br><span class="line">[root@localhost ~]<span class="comment"># grep -n -A 2 "Failed" /var/log/secure</span></span><br><span class="line"><span class="comment">#匹配/var/log/secure文件中Failed字符串，并打印它的上2行</span></span><br><span class="line">[root@localhost ~]<span class="comment"># grep -n -B 2 "Failed" /var/log/secure</span></span><br><span class="line"><span class="comment">#匹配/var/log/secure文件中Failed字符串，并打印它的上下2行</span></span><br><span class="line">[root@localhost ~]<span class="comment"># grep -n -C 2 "Failed" /var/log/secure</span></span><br><span class="line"><span class="comment">#匹配/var/log/secure文件中Failed字符串，并打印它的上5行下2行</span></span><br><span class="line">[root@localhost ~]<span class="comment"># grep -A 5 -B 2 'Failed' /var/log/secure</span></span><br><span class="line"><span class="comment">#匹配特殊字符</span></span><br><span class="line">[root@localhost ~]<span class="comment"># grep "\$" /etc/passwd</span></span><br><span class="line"><span class="comment">#匹配字符0次或多次</span></span><br><span class="line">[root@localhost ~]<span class="comment"># grep "a*" /etc/passwd</span></span><br><span class="line"><span class="comment">#匹配任意字符</span></span><br><span class="line">[root@localhost ~]<span class="comment"># grep "a." /etc/passwd</span></span><br><span class="line"><span class="comment">#只打印出过滤内容</span></span><br><span class="line">[root@localhost ~]<span class="comment"># grep -o "ftp" /etc/passwd</span></span><br><span class="line"><span class="comment">#过滤区间</span></span><br><span class="line">[root@localhost ~]<span class="comment"># grep "[a-z]" /etc/passwd</span></span><br><span class="line">[root@localhost ~]<span class="comment"># grep "[A-Z]" /etc/passwd</span></span><br><span class="line">[root@localhost ~]<span class="comment"># grep "[a-zA-Z]" /etc/passwd</span></span><br><span class="line"><span class="comment">#过滤有效段落</span></span><br><span class="line">[root@<span class="built_in">test</span> ~]<span class="comment"># grep -Ev '^#|^$' /etc/login.defs </span></span><br><span class="line"></span><br><span class="line">ps：[]表示区间</span><br><span class="line"></span><br><span class="line"><span class="comment">#按位与、或、非运算符</span></span><br><span class="line">|：或</span><br><span class="line">&amp;：与</span><br><span class="line">！：非</span><br><span class="line"><span class="comment">#匹配文件中包含sync结尾或ftp字符串</span></span><br><span class="line">[root@localhost ~]<span class="comment"># grep -Ei "sync$|ftp" /etc/passwd</span></span><br></pre></td></tr></table></figure>

<h1 id="字符处理类命令"><a href="#字符处理类命令" class="headerlink" title="字符处理类命令"></a>字符处理类命令</h1><h2 id="字符处理命令-排序sort"><a href="#字符处理命令-排序sort" class="headerlink" title="字符处理命令-排序sort"></a>字符处理命令-排序<code>sort</code></h2><table>
<thead>
<tr>
<th align="center">选项</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">-t</td>
<td align="center">指定分隔符</td>
</tr>
<tr>
<td align="center">-k</td>
<td align="center">指定按照某一列，进行排序</td>
</tr>
<tr>
<td align="center">-n</td>
<td align="center">按照阿拉伯数字排序</td>
</tr>
<tr>
<td align="center">-r</td>
<td align="center">reverse 倒叙排序</td>
</tr>
</tbody></table>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#语法</span></span><br><span class="line">sort [option] 文件名</span><br><span class="line"></span><br><span class="line"><span class="comment">#示例</span></span><br><span class="line"><span class="comment">#1.创建一个文件，写入一些无序的内容</span></span><br><span class="line">[root@www ~]<span class="comment"># cat &gt;&gt; file.txt &lt;&lt;EOF</span></span><br><span class="line">b:3</span><br><span class="line">c:2</span><br><span class="line">a:4</span><br><span class="line">e:5</span><br><span class="line">d:1</span><br><span class="line">f:11</span><br><span class="line">EOF</span><br><span class="line"><span class="comment">#2.使用sort对下面输出的内容进行排序</span></span><br><span class="line">[root@www ~]<span class="comment"># sort file.txt</span></span><br><span class="line">a:4</span><br><span class="line">b:3</span><br><span class="line">c:2</span><br><span class="line">d:1</span><br><span class="line">e:5</span><br><span class="line">f:11</span><br><span class="line"></span><br><span class="line">ps：默认按照每一行的第一个字符进行排序,如果字符相同就往后推，字母按照a-z的顺序排序，排序不修改源文件内容</span><br><span class="line"></span><br><span class="line"><span class="comment">#-t指定分隔符</span></span><br><span class="line">[root@www ~]<span class="comment"># sort -t ':' file.txt</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#-k指定按照某一列，进行排序</span></span><br><span class="line">[root@www ~]<span class="comment"># sort -t ":" -k 2 file.txt</span></span><br><span class="line">d:1</span><br><span class="line">f:11 <span class="comment">#第二行为什么是11？</span></span><br><span class="line">c:2</span><br><span class="line">b:3</span><br><span class="line">a:4</span><br><span class="line">e:5</span><br><span class="line"></span><br><span class="line">ps：按照排序的方式，只会看到第一个字符，11的第一个字符是1，按照字符来排序确实比2小</span><br><span class="line"></span><br><span class="line"><span class="comment">#-n按照阿拉伯数字排序</span></span><br><span class="line">[root@www ~]<span class="comment"># sort -t ":" -n -k 2 file.txt</span></span><br><span class="line">d:1</span><br><span class="line">c:2</span><br><span class="line">b:3</span><br><span class="line">a:4</span><br><span class="line">e:5</span><br><span class="line">f:11</span><br><span class="line"></span><br><span class="line"><span class="comment">#-r倒叙排序</span></span><br><span class="line">[root@www ~]<span class="comment"># sort -t ':' -k 2 -rn file.txt</span></span><br><span class="line">f:11 </span><br><span class="line">e:5 </span><br><span class="line">a:4 </span><br><span class="line">b:3 </span><br><span class="line">c:2 </span><br><span class="line">d:1</span><br><span class="line"></span><br><span class="line"><span class="comment">#练习</span></span><br><span class="line">cat &gt;&gt; paixuti.txt &lt;&lt;EOF </span><br><span class="line">192.168.3.1 00:0F:AF:81:19:1F </span><br><span class="line">192.168.3.2 00:0F:AF:85:6C:25 </span><br><span class="line">192.168.3.3 00:0F:AF:85:70:42 </span><br><span class="line">192.168.2.20 00:0F:AF:85:55:DE </span><br><span class="line">192.168.2.21 00:0F:AF:85:6C:09 </span><br><span class="line">192.168.2.22 00:0F:AF:85:5C:41 </span><br><span class="line">192.168.0.151 00:0F:AF:85:6C:F6 </span><br><span class="line">192.168.0.152 00:0F:AF:83:1F:65 </span><br><span class="line">192.168.0.153 00:0F:AF:85:70:03 </span><br><span class="line">192.168.1.10 00:30:15:A2:3B:B6 </span><br><span class="line">192.168.1.11 00:30:15:A3:23:B7 </span><br><span class="line">192.168.1.12 00:30:15:A2:3A:A1 </span><br><span class="line">192.168.1.1 00:0F:AF:81:19:1F </span><br><span class="line">192.168.2.2 00:0F:AF:85:6C:25 </span><br><span class="line">192.168.3.3 00:0F:AF:85:70:42 </span><br><span class="line">192.168.2.20 00:0F:AF:85:55:DE </span><br><span class="line">192.168.1.21 00:0F:AF:85:6C:09 </span><br><span class="line">192.168.2.22 00:0F:AF:85:5C:41 </span><br><span class="line">192.168.0.151 00:0F:AF:85:6C:F6 </span><br><span class="line">192.168.1.152 00:0F:AF:83:1F:65 </span><br><span class="line">192.168.0.153 00:0F:AF:85:70:03 </span><br><span class="line">192.168.3.10 00:30:15:A2:3B:B6 </span><br><span class="line">192.168.1.11 00:30:15:A3:23:B7 </span><br><span class="line">192.168.3.12 00:30:15:A2:3A:A1 </span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment">#根据第三点后的内容排序</span></span><br><span class="line">[root@localhost ~]<span class="comment"># sort -t '.' -k 4 -n paixuti.txt</span></span><br></pre></td></tr></table></figure>

<h2 id="去重命令uniq"><a href="#去重命令uniq" class="headerlink" title="去重命令uniq"></a>去重命令uniq</h2><p>如果文件中有多行完全相同的内容，希望能删除重复的行，同时还可以统计出完全相同的行出现的总次数，那么就可以使用uniq命令解决这个问题，<strong>必须配合sort使用</strong></p>
<table>
<thead>
<tr>
<th align="center">选项</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">-c</td>
<td align="center">计算重复的行</td>
</tr>
</tbody></table>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#语法</span></span><br><span class="line">uniq [option]</span><br><span class="line"></span><br><span class="line"><span class="comment">#示例</span></span><br><span class="line"><span class="comment">#1.创建一个file.txt文件</span></span><br><span class="line">[root@www ~]<span class="comment"># cat file.txt</span></span><br><span class="line">abc</span><br><span class="line">123</span><br><span class="line">abc</span><br><span class="line">123</span><br><span class="line"><span class="comment">#2.先排序</span></span><br><span class="line">[root@www ~]<span class="comment"># sort file.txt</span></span><br><span class="line">123</span><br><span class="line">123</span><br><span class="line">abc</span><br><span class="line">abc</span><br><span class="line"><span class="comment">#3.去除相邻重复的行</span></span><br><span class="line">[root@www ~]<span class="comment"># sort file.txt | uniq</span></span><br><span class="line">123</span><br><span class="line">abc</span><br><span class="line"><span class="comment">#4.-c统计出文件中每行内容重复的次数</span></span><br><span class="line">[root@www ~]<span class="comment"># sort file.txt | uniq -c</span></span><br><span class="line">    2 123</span><br><span class="line">    2 abc</span><br></pre></td></tr></table></figure>

<h2 id="文件内容截取命令cut"><a href="#文件内容截取命令cut" class="headerlink" title="文件内容截取命令cut"></a>文件内容截取命令cut</h2><table>
<thead>
<tr>
<th align="center">选项</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">-d</td>
<td align="center">指定分隔符</td>
</tr>
<tr>
<td align="center">-f</td>
<td align="center">取列，选择要打印的列内容</td>
</tr>
<tr>
<td align="center">-c</td>
<td align="center">按照字符来取内容</td>
</tr>
</tbody></table>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#语法 </span></span><br><span class="line">cut [option] 文件名</span><br><span class="line"></span><br><span class="line">ps：cut默认没有分隔符</span><br><span class="line"></span><br><span class="line"><span class="comment">#示例1</span></span><br><span class="line">cat &gt;&gt; info.txt &lt;&lt;EOF </span><br><span class="line">I<span class="string">'m zls,18 years old QQ 133411023 </span></span><br><span class="line"><span class="string">I'</span>m wyk,73 years old QQ 383838384 </span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment">#取QQ号</span></span><br><span class="line">[root@localhost ~]<span class="comment"># cut -d " " -f6 info.txt</span></span><br><span class="line"><span class="comment">#取年龄</span></span><br><span class="line">[root@localhost ~]<span class="comment"># cut -d " " -f2 info.txt | cut -d "," -f2</span></span><br><span class="line"><span class="comment">#按字符取QQ号</span></span><br><span class="line">[root@localhost ~]<span class="comment"># cut -c 25-33 info.txt</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#示例2</span></span><br><span class="line">cat &gt;&gt; info.txt &lt;&lt;EOF </span><br><span class="line">I<span class="string">'m zls,18'</span>years old QQ 133411023 </span><br><span class="line">I<span class="string">'m wyk,73'</span>years old QQ 383838384 </span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment">#取年龄</span></span><br><span class="line">[root@localhost ~]<span class="comment"># cut -d  "'" -f2 info.txt | cut -d "," -f1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#请统计分析课件中访问频次前10的IP</span></span><br><span class="line">cut -d <span class="string">" "</span> -f 1 blog.driverzeng.com_access.log | sort -n | uniq -c | sort -rn | head</span><br><span class="line">    8 101.69.218.44</span><br><span class="line">    7 58.215.115.67</span><br><span class="line">    6 58.215.115.30</span><br><span class="line">    5 58.215.115.35</span><br><span class="line">    4 58.215.115.62</span><br><span class="line">    4 36.156.89.176</span><br><span class="line">    4 36.156.89.148</span><br><span class="line">    4 183.162.236.187</span><br><span class="line">    4 183.162.236.172</span><br><span class="line">    3 58.215.115.75</span><br><span class="line">    </span><br><span class="line"><span class="comment">#请统计分析课件中访问频次第1的网址</span></span><br><span class="line">[root@localhost ~]<span class="comment"># cut -d ' ' -f 7 blog.driverzeng.com_access.log |sort |uniq -c|sort -nr|head -1 </span></span><br><span class="line">	32 /xmlrpc.php</span><br></pre></td></tr></table></figure>

<h2 id="文件统计命令wc"><a href="#文件统计命令wc" class="headerlink" title="文件统计命令wc"></a>文件统计命令wc</h2><table>
<thead>
<tr>
<th align="center">选项</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">-l</td>
<td align="center">line 行，统计行数</td>
</tr>
<tr>
<td align="center">-w</td>
<td align="center">word 单词，统计单词数</td>
</tr>
<tr>
<td align="center">-c</td>
<td align="center">char 字符，统计字符数</td>
</tr>
</tbody></table>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wc：统计文件的行数，统计文件的单词数量，统计文件的字符数量</span><br><span class="line"></span><br><span class="line"><span class="comment">#语法</span></span><br><span class="line">wc [option] 文件名</span><br><span class="line"></span><br><span class="line"><span class="comment">#示例</span></span><br><span class="line">[root@localhost ~]<span class="comment"># wc /etc/services </span></span><br><span class="line">11176	61033	670293 /etc/services </span><br><span class="line">文件行数 单词数量 字符数量</span><br><span class="line"></span><br><span class="line">[root@localhost ~]<span class="comment"># cat info.txt </span></span><br><span class="line">I<span class="string">'m zzgx,"18'</span>years old QQ 133411023 </span><br><span class="line">I<span class="string">'m wyk,"103'</span>years old QQ 383838384</span><br><span class="line"><span class="comment">#统计文件行数</span></span><br><span class="line">[root@localhost ~]<span class="comment"># wc -l info.txt </span></span><br><span class="line">2 info.txt </span><br><span class="line"><span class="comment">#统计单词数量</span></span><br><span class="line">[root@localhost ~]<span class="comment"># wc -w info.txt </span></span><br><span class="line">10 info.txt </span><br><span class="line"><span class="comment">#统计字符数量</span></span><br><span class="line">[root@localhost ~]<span class="comment"># wc -c info.txt </span></span><br><span class="line">72 info.txt</span><br></pre></td></tr></table></figure>

<h1 id="文件上传与下载"><a href="#文件上传与下载" class="headerlink" title="文件上传与下载"></a>文件上传与下载</h1><h2 id="上传下载"><a href="#上传下载" class="headerlink" title="上传下载"></a>上传下载</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#安装lrzsz </span></span><br><span class="line">[root@localhost ~]<span class="comment"># yum install -y lrzsz </span></span><br><span class="line"><span class="comment">#如何把windows的文件上传到虚拟机里 </span></span><br><span class="line">rz</span><br><span class="line"></span><br><span class="line"><span class="comment">#如何把虚拟机的文件下载到windows里 </span></span><br><span class="line">sz 文件名</span><br><span class="line"></span><br><span class="line">[root@localhost ~]<span class="comment"># sz /tmp/ooo </span></span><br><span class="line"></span><br><span class="line">ps：只能虚拟机和物理机之间上传下载</span><br></pre></td></tr></table></figure>

<h2 id="wget命令"><a href="#wget命令" class="headerlink" title="wget命令"></a>wget命令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#安装wget命令 </span></span><br><span class="line">[root@localhost ~]<span class="comment"># yum install -y wget </span></span><br><span class="line">wget 下载地址 </span><br><span class="line">-O：指定下载的位置和文件的名字 </span><br><span class="line"></span><br><span class="line"><span class="comment">#将阿里云的centos-7.repo下载到/etc/yum.repos.d/并改名为CentOS-Base.repo</span></span><br><span class="line">wget http://mirrors.aliyun.com/repo/Centos-7.repo</span><br><span class="line">wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span><br></pre></td></tr></table></figure>

<h1 id="文件属性及类型"><a href="#文件属性及类型" class="headerlink" title="文件属性及类型"></a>文件属性及类型</h1><h2 id="文件属性"><a href="#文件属性" class="headerlink" title="文件属性"></a>文件属性</h2><p>当我们使用<code>ls -l</code> 列目录下所有文件时，通常会以长格式的方式显示，其实长格式显示就是我们<code>windows</code>下看到的文件详细信息，我们将其称为文件属性，那整个文件的属性分为十列</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># ll ks.cfg</span></span><br><span class="line">-rw-rwx--- 1 root root 4434 May 30 13:58 ks.cfg</span><br><span class="line"></span><br><span class="line">-rw-------.	①:第一个字符是文件类型，其他则是权限</span><br><span class="line">1			②:硬链接次数</span><br><span class="line">root		③:文件属于哪个用户</span><br><span class="line">root		④:文件属于哪个组</span><br><span class="line">4434		⑤:文件大小</span><br><span class="line">May30	13:58	⑥⑦⑧:最新修改的时间与日期</span><br><span class="line">ks.cfg		⑨:文件或目录名称</span><br><span class="line"></span><br><span class="line"><span class="comment">#以空格为分隔符第二列： </span></span><br><span class="line">文件的权限：Permission denied（权限被拒绝） </span><br><span class="line">rw- r-- r-- </span><br><span class="line">rwx rwx rwx </span><br><span class="line">r：<span class="built_in">read</span> 读 </span><br><span class="line">w：write 写 </span><br><span class="line">x：<span class="built_in">exec</span> 执行 </span><br><span class="line">-：该权限位上没有权限</span><br></pre></td></tr></table></figure>

<h2 id="文件类型"><a href="#文件类型" class="headerlink" title="文件类型"></a>文件类型</h2><p>通常我们使用颜色或者后缀名称来区分文件类型，但很多时候不是很准确，所以我们可以通过<code>ls -l</code>以长格式显示一个文件的属性，通过第一列的第一个字符来进一步的判断文件具体的类型</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># ll </span></span><br><span class="line">-rw-r--r-- 1 root root 56479 Mar 25 10:11 blog.driverzeng.com_access.log </span><br><span class="line">drwxr-xr-x 2 root root 6 Mar 29 08:39 zls</span><br><span class="line"></span><br><span class="line">-：普通文件 touch </span><br><span class="line">d：directory 目录 mkdir </span><br><span class="line">l：link 软链接文件（windows快捷方式） ln </span><br><span class="line">-----------------------------------------------------------</span><br><span class="line">c：设备文件（char字符设备文件）和字符相关的设备，举例：打印机，终端 </span><br><span class="line">b：设备文件（block块设备文件）和存储相关的设备，举例：硬盘，U盘，磁盘分区 </span><br><span class="line">s：socket安全套接字文件，网络编程 </span><br><span class="line">p：pipe管道文件，父进程与子进程之间的通信文件</span><br></pre></td></tr></table></figure>

<p>但有些情况下，我们无法通过<code>ls -l</code>查看文件的类型，比如：一个文件，它可能时普通文件、也可能时压缩文件、或者时命令文件等，那么此时就需要使用<code>file</code>来更加精确的判断这个文件的类型</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#语法</span></span><br><span class="line">file [options] 文件名</span><br><span class="line"></span><br><span class="line">[root@localhost ~]<span class="comment"># file /etc/hosts</span></span><br><span class="line">/etc/hosts: ASCII text</span><br><span class="line">    </span><br><span class="line">[root@localhost ~]<span class="comment"># file /bin/ls</span></span><br><span class="line">/bin/ls: ELF 64-bit LSB	executable,	x86-64,	version	1 (SYSV), dynamically linked (uses	shared libs), <span class="keyword">for</span> GNU/Linux 2.6.32, BuildID[sha1]=aa7ff68f13de25936a098016243ce57c3c982e06, stripped</span><br><span class="line"></span><br><span class="line">[root@localhost ~]<span class="comment"># file /dev/sda</span></span><br><span class="line">/dev/sda: block	special</span><br><span class="line">    </span><br><span class="line">[root@localhost ~]<span class="comment"># file /dev/tty1</span></span><br><span class="line">/dev/tty1: character special</span><br><span class="line">    </span><br><span class="line">[root@localhost ~]<span class="comment"># file /etc/grub2.cfg</span></span><br><span class="line">/etc/grub2.cfg:	broken	symbolic link to ../boot/grub2/grub.cfg</span><br><span class="line">    </span><br><span class="line">[root@localhost ~]<span class="comment"># file /home</span></span><br><span class="line">/home: directory</span><br><span class="line"></span><br><span class="line">ps:Linux文件扩展名不代表任何含义，仅为了我们能更好的识别该文件时说明类型</span><br></pre></td></tr></table></figure>

<h1 id="系统链接文件"><a href="#系统链接文件" class="headerlink" title="系统链接文件"></a>系统链接文件</h1><p>一个文件在Linux中，会被分为两部分：</p>
<ul>
<li><p><strong>真实数据</strong>：文件中的真实内容</p>
</li>
<li><p><strong>元数据</strong>：用来形容一个文件数据</p>
</li>
</ul>
<p>一个文件在Linux中，存储也会被分为两部分：</p>
<ul>
<li><p><strong>inode</strong>：用来存储，文件的元数据</p>
</li>
<li><p><strong>block</strong>：用来存储，文件的真实数据，一个block是<code>4kB</code></p>
</li>
</ul>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20220329142227873.png" alt="image-20220329142227873"></p>
<p>查看磁盘空间 <code>df</code></p>
<table>
<thead>
<tr>
<th align="center">选项</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">-h</td>
<td align="center"><code>human</code> 人类可读</td>
</tr>
<tr>
<td align="center">-i</td>
<td align="center">查看 <code>inode</code> 空间</td>
</tr>
</tbody></table>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#语法</span></span><br><span class="line">df [options]</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看磁盘的block </span></span><br><span class="line">[root@localhost ~]<span class="comment"># df -h </span></span><br><span class="line">Filesystem Size Used Avail Use% Mounted on </span><br><span class="line">/dev/sda3 19G 1.7G 17G 9% / </span><br><span class="line">devtmpfs 476M 0 476M 0% /dev </span><br><span class="line">tmpfs 487M 0 487M 0% /dev/shm tmpfs 487M 39M 449M 8% /run </span><br><span class="line">tmpfs 487M 0 487M 0% /sys/fs/cgroup </span><br><span class="line">/dev/sda1 497M 120M 378M 25% /boot </span><br><span class="line">tmpfs 98M 0 98M 0% /run/user/0 </span><br><span class="line"></span><br><span class="line"><span class="comment">#查看磁盘的inode </span></span><br><span class="line">[root@localhost ~]<span class="comment"># df -hi </span></span><br><span class="line">Filesystem Inodes IUsed IFree IUse% Mounted on </span><br><span class="line">/dev/sda3 9.3M 35K 9.3M 1% / </span><br><span class="line">devtmpfs 119K 377 119K 1% /dev </span><br><span class="line">tmpfs 122K 1 122K 1% /dev/shm </span><br><span class="line">tmpfs 122K 750 121K 1% /run </span><br><span class="line">tmpfs 122K 16 122K 1% /sys/fs/cgroup </span><br><span class="line">/dev/sda1 250K 326 250K 1% /boot </span><br><span class="line">tmpfs 122K 1 122K 1% /run/user/0</span><br><span class="line"></span><br><span class="line"><span class="comment">#stat查看文件详细信息</span></span><br><span class="line">[root@localhost ~]<span class="comment"># stat nginx-1.20.2-1.x86_64.rpm </span></span><br><span class="line">  File: ‘nginx-1.20.2-1.x86_64.rpm’</span><br><span class="line">  Size: 2802126   	Blocks: 5480       IO Block: 4096   regular file</span><br><span class="line">Device: fd00h/64768d	Inode: 33575397    Links: 1</span><br><span class="line">Access: (0644/-rw-r--r--)  Uid: (    0/    root)   Gid: (    0/    root)</span><br><span class="line">Context: unconfined_u:object_r:admin_home_t:s0</span><br><span class="line">Access: 2022-04-30 14:10:58.648933728 +0800</span><br><span class="line">Modify: 2022-04-30 14:10:58.709933724 +0800</span><br><span class="line">Change: 2022-04-30 14:10:58.709933724 +0800</span><br><span class="line"> Birth: -</span><br></pre></td></tr></table></figure>

<p>执行cat的过程</p>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/360%E6%88%AA%E5%9B%BE17100810463447.png" alt="360截图17100810463447"></p>
<h2 id="链接文件的种类"><a href="#链接文件的种类" class="headerlink" title="链接文件的种类"></a>链接文件的种类</h2><ul>
<li><strong>软链接文件</strong><ul>
<li>软链接相当于windows的快捷方式，软链接文件会将<strong>inode</strong>指向源文件的<strong>block</strong></li>
</ul>
</li>
</ul>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/360%E6%88%AA%E5%9B%BE1710081010910195.png" alt="360截图1710081010910195"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#创建软链接的命令 </span></span><br><span class="line">ln：link 链接，创建链接文件 </span><br><span class="line">-s：soft 软，创建软链接文件 </span><br><span class="line"></span><br><span class="line"><span class="comment">#语法</span></span><br><span class="line">ln -s 源文件 链接文件的位置</span><br><span class="line"></span><br><span class="line"><span class="comment">#示例</span></span><br><span class="line"><span class="comment">##不指定文件，产生同名链接</span></span><br><span class="line">[root@localhost ~]<span class="comment"># ln -s /root/1.txt /tmp/ </span></span><br><span class="line">[root@localhost ~]<span class="comment"># ll /tmp/</span></span><br><span class="line">total 196 </span><br><span class="line">lrwxrwxrwx 1 root root 11 Mar 29 10:54 1.txt -&gt; /root/1.txt</span><br><span class="line"><span class="comment">##指定文件</span></span><br><span class="line">[root@localhost ~]<span class="comment"># ln -s /root/1.txt /tmp/2.txt </span></span><br><span class="line">[root@localhost ~]<span class="comment"># ll /tmp/ </span></span><br><span class="line">total 196 </span><br><span class="line">lrwxrwxrwx 1 root root 11 Mar 29 10:54 1.txt -&gt; /root/1.txt </span><br><span class="line">lrwxrwxrwx 1 root root 11 Mar 29 10:55 2.txt -&gt; /root/1.txt</span><br><span class="line"></span><br><span class="line">ps:多个软链接指向同一个block，不占多余空间</span><br><span class="line">   软链接文件，会受到源文件的影响，如果源文件删除，软链接文件也无法使用</span><br><span class="line">   </span><br><span class="line"><span class="comment">#软链接的应用场景</span></span><br><span class="line">1.软件升级</span><br><span class="line">2.代码发布</span><br><span class="line">3.不方便移动的目录</span><br><span class="line">4.数据回滚</span><br><span class="line">5.程序读取</span><br></pre></td></tr></table></figure>

<p><strong>硬链接文件</strong></p>
<ul>
<li>若一个<strong>inode</strong>对应多个文件名，则称这些文件为硬链接。换句话说，硬链接就是同一个文件使用了多个别名</li>
</ul>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/360%E6%88%AA%E5%9B%BE175711199510386.png" alt="360截图175711199510386"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#语法</span></span><br><span class="line">ln 源文件 链接文件的位置</span><br><span class="line"></span><br><span class="line"><span class="comment">#示例</span></span><br><span class="line">[root@localhost ~]<span class="comment"># ln /root/info.txt /opt/ </span></span><br><span class="line">[root@localhost ~]<span class="comment"># ln /root/info.txt /opt/info_1.txt</span></span><br><span class="line"><span class="comment">#查看文件属性</span></span><br><span class="line">[root@localhost ~]<span class="comment"># ls -li /root/info.txt </span></span><br><span class="line">33575833 -rw-r--r-- 3 root root 72 Mar 25 11:09 /root/info.txt </span><br><span class="line">[root@localhost ~]<span class="comment"># ls -li /opt/info.txt </span></span><br><span class="line">33575833 -rw-r--r-- 3 root root 72 Mar 25 11:09 /opt/info.txt </span><br><span class="line">[root@localhost ~]<span class="comment"># ls -li /opt/info_1.txt </span></span><br><span class="line">33575833 -rw-r--r-- 3 root root 72 Mar 25 11:09 /opt/info1.txt</span><br><span class="line"><span class="comment">#查看文件内容 </span></span><br><span class="line">[root@localhost ~]<span class="comment"># cat /root/info.txt </span></span><br><span class="line">I<span class="string">'m zzgx,"18'</span>years old QQ 133411023 </span><br><span class="line">I<span class="string">'m wyk,"103'</span>years old QQ 383838384 </span><br><span class="line">[root@localhost ~]<span class="comment"># cat /opt/info.txt </span></span><br><span class="line">I<span class="string">'m zzgx,"18'</span>years old QQ 133411023 </span><br><span class="line">I<span class="string">'m wyk,"103'</span>years old QQ 383838384 </span><br><span class="line">[root@localhost ~]<span class="comment"># cat /opt/info_1.txt </span></span><br><span class="line">I<span class="string">'m zzgx,"18'</span>years old QQ 133411023 </span><br><span class="line">I<span class="string">'m wyk,"103'</span>years old QQ 383838384</span><br><span class="line"></span><br><span class="line"><span class="comment">#特性 </span></span><br><span class="line">1.硬链接文件，不会受到原文件的影响 </span><br><span class="line">2.所有硬链接文件的inode号与源文件相同 </span><br><span class="line">3.修改一个文件，其他文件都会改变 </span><br><span class="line">4.不允许给目录创建硬链接 </span><br><span class="line">5.默认情况下，新创建的目录，有两个硬链接，一个是目录本身，一个是该目录下的.目录</span><br><span class="line"></span><br><span class="line">[root@localhost ~]<span class="comment"># ls -lai /root/test -d </span></span><br><span class="line">33575836 drwxr-xr-x 2 root root 6 Mar 29 11:52 /root/<span class="built_in">test</span> </span><br><span class="line">[root@localhost ~]<span class="comment"># ls -lai /root/test </span></span><br><span class="line">total 4 </span><br><span class="line">33575836 drwxr-xr-x 2 root root 6 Mar 29 11:52 . </span><br><span class="line"></span><br><span class="line"><span class="comment">#报错 </span></span><br><span class="line">[root@localhost opt]<span class="comment"># ln /root/wyk /tmp/wyk </span></span><br><span class="line">ln: ‘/root/wyk’: hard link not allowed <span class="keyword">for</span> directory</span><br></pre></td></tr></table></figure>

<h2 id="软链接使用场景实践"><a href="#软链接使用场景实践" class="headerlink" title="软链接使用场景实践"></a>软链接使用场景实践</h2><blockquote>
<p>Q：软链接使用场景</p>
<ul>
<li>软件升级</li>
<li>代码发布</li>
</ul>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1.准备网站1.1版本代码</span></span><br><span class="line">[root@www ~]<span class="comment"># mkdir	/data/rainbow-v1.1 -p</span></span><br><span class="line">[root@www ~]<span class="comment"># echo "123" &gt; /data/rainbow-v1.1/index.html</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#2.创建软链接</span></span><br><span class="line">[root@www ~]<span class="comment"># ln -s /data/rainbow-v1.1/ /data/rainbow</span></span><br><span class="line">[root@www ~]<span class="comment"># ll /data/</span></span><br><span class="line">drwxr-xr-x.	2 root root 6 3์ 5 12:23 dir</span><br><span class="line">lrwxrwxrwx.	1 root root	19 3์ 10 12:09 rainbow -&gt; /data/rainbow-v1.1/</span><br><span class="line">drwxr-xr-x.	2 root root	24 3์ 10 12:09 rainbow-v1.1</span><br><span class="line"></span><br><span class="line"><span class="comment">#3.检查网站程序</span></span><br><span class="line">[root@www ~]<span class="comment"># cat /data/rainbow/index.html</span></span><br><span class="line">123</span><br><span class="line"></span><br><span class="line"><span class="comment">#4.新更新一个网站的程序代码</span></span><br><span class="line">[root@www ~]<span class="comment"># mkdir /data/rainbow-v1.2</span></span><br><span class="line">[root@www ~]<span class="comment"># echo "456" &gt; /data/rainbow-v1.2/index.html</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#5.升级</span></span><br><span class="line">[root@www ~]<span class="comment"># rm -f	/data/rainbow &amp;&amp; ln	-s /data/rainbow-v1.2/ /data/rainbow</span></span><br><span class="line">[root@www ~]<span class="comment"># cat /data/rainbow/index.html</span></span><br><span class="line">456</span><br><span class="line"></span><br><span class="line"><span class="comment">#6.回退</span></span><br><span class="line">[root@www ~]<span class="comment"># rm -f /data/rainbow &amp;&amp; ln -s /data/rainbow-v1.1/ /data/rainbow</span></span><br><span class="line">[root@www ~]<span class="comment"># cat /data/rainbow/index.html</span></span><br><span class="line">123</span><br></pre></td></tr></table></figure>

<h2 id="硬链接与软链接的区别"><a href="#硬链接与软链接的区别" class="headerlink" title="硬链接与软链接的区别"></a>硬链接与软链接的区别</h2><table>
<thead>
<tr>
<th align="center">区别</th>
<th align="center">硬链接</th>
<th align="center">软链接</th>
</tr>
</thead>
<tbody><tr>
<td align="center">创建命令</td>
<td align="center">ln</td>
<td align="center">ln -s</td>
</tr>
<tr>
<td align="center">对象</td>
<td align="center">只能对普通文件创建</td>
<td align="center">普通文件和目录</td>
</tr>
<tr>
<td align="center">是否收到源文件影响</td>
<td align="center">否</td>
<td align="center">是</td>
</tr>
<tr>
<td align="center">inode号</td>
<td align="center">相同</td>
<td align="center">不同</td>
</tr>
<tr>
<td align="center">跨分区创建</td>
<td align="center">不可以</td>
<td align="center">可以</td>
</tr>
</tbody></table>
<h2 id="企业面试题"><a href="#企业面试题" class="headerlink" title="企业面试题"></a>企业面试题</h2><p>当前磁盘空间还剩余500G，但是就无法往里面写入数据，报错，磁盘空间满了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1.首先磁盘存储被划分为两块 inode：存储文件的元数据 block：存储文件的真实数据 </span></span><br><span class="line"><span class="comment">#2.在问题当中剩余500G，这500G指的是block </span></span><br><span class="line"><span class="comment">#3.应该是inode被占满了 </span></span><br><span class="line"><span class="comment">#4.这种情况，一般是系统中，小文件太多导致的</span></span><br><span class="line"><span class="comment">#5.使用find命令找到系统中的小文件（没用的），并删除</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#示例</span></span><br><span class="line"><span class="comment">#从/dev/zero中取出1024k数据，保存到/opt/disk文件中</span></span><br><span class="line">[root@www ~]<span class="comment"># dd if=/dev/zero of=/opt/bigdata bs=1K count=1024</span></span><br><span class="line"><span class="comment">#格式化，指定inode</span></span><br><span class="line">[root@www ~]<span class="comment"># mkfs.ext4 -i 1024 /opt/bigdata</span></span><br><span class="line"><span class="comment">#在/下创建一个目录inode</span></span><br><span class="line">[root@www ~]<span class="comment"># mkdir /inode</span></span><br><span class="line"><span class="comment">#把刚才的分区，挂载到/data1下</span></span><br><span class="line">[root@www ~]<span class="comment"># mount -t ext4 -o loop /opt/bigdata /inode</span></span><br><span class="line"><span class="comment">#查看新分区inode大小</span></span><br><span class="line">[root@www ~]<span class="comment"># df -ih</span></span><br><span class="line"><span class="comment">#演示inode被沾满</span></span><br><span class="line">[root@www data1]<span class="comment"># touch &#123;1001..1014&#125;</span></span><br><span class="line">[root@www data1]<span class="comment"># touch www</span></span><br><span class="line">touch: cannot touch ‘zls’: No space left on device</span><br></pre></td></tr></table></figure>

<h1 id="压缩和解压"><a href="#压缩和解压" class="headerlink" title="压缩和解压"></a>压缩和解压</h1><blockquote>
<p>为什么要对文件进行压缩 ?</p>
<ul>
<li>压缩后的文件回避压缩前的文件小，一个<code>28G</code>的文件压缩后能到达<code>6G</code></li>
<li>多个文件传呼很慢，但单个文件传输会很快，同时还能节省网络的消耗</li>
</ul>
</blockquote>
<h2 id="常见压缩包类型"><a href="#常见压缩包类型" class="headerlink" title="常见压缩包类型"></a>常见压缩包类型</h2><table>
<thead>
<tr>
<th align="center">格式</th>
<th align="center">压缩工具</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>.zip</code></td>
<td align="center">zip压缩工具</td>
</tr>
<tr>
<td align="center"><code>.gz</code></td>
<td align="center"><code>gzip</code>压缩工具，只能压缩文件，会删除原文件（通常配合tar使用）</td>
</tr>
<tr>
<td align="center"><code>.bz2</code></td>
<td align="center"><code>bzip2</code>压缩工具，只能压缩文件，会删除原文件（通常配合tar使用）</td>
</tr>
<tr>
<td align="center"><code>.tar.gz</code></td>
<td align="center">先使用tar命令归档打包，然后使用<code>gzip</code>压缩</td>
</tr>
<tr>
<td align="center"><code>.tar.bz2</code></td>
<td align="center">先使用tar命令归档打包，然后使用<code>bzip</code>压缩</td>
</tr>
</tbody></table>
<p>压缩命令<code>gzip</code></p>
<table>
<thead>
<tr>
<th align="center">选项</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">-r</td>
<td align="center">递归压缩</td>
</tr>
<tr>
<td align="center">-d</td>
<td align="center">解压压缩包</td>
</tr>
</tbody></table>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#安装gzip命令 </span></span><br><span class="line">[root@localhost ~]<span class="comment"># yum install -y gzip</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#语法</span></span><br><span class="line">gzip 普通文件名</span><br><span class="line">gzip -d 文件名</span><br><span class="line"></span><br><span class="line"><span class="comment">#特性</span></span><br><span class="line">1.压缩文件后，源文件不存在 </span><br><span class="line">2.只能压缩文件，不能压缩目录</span><br><span class="line">3.压缩后，压缩包的位置在源文件的目录下 </span><br><span class="line">4.压缩后可以直接查看文件内容zcat </span><br><span class="line">5.一个压缩包中，只会有一个文件 </span><br><span class="line">6.解压后，压缩包没了，只剩源文件</span><br><span class="line"></span><br><span class="line"><span class="comment">#示例</span></span><br><span class="line">[root@localhost ~]<span class="comment"># gzip file</span></span><br><span class="line"><span class="comment">#查看gz压缩包的文件</span></span><br><span class="line">[root@localhost ~]<span class="comment"># zcat file.gz</span></span><br><span class="line"><span class="comment">#解压gzip的压缩包</span></span><br><span class="line">[root@localhost ~]<span class="comment"># gzip -d file.gz</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#场景</span></span><br><span class="line">1.备份文件</span><br><span class="line">2.当需要让某个文件不生效时</span><br><span class="line">[root@localhost ~]<span class="comment"># gzip /etc/yum.repos.d/CentOS-Vault.repo</span></span><br></pre></td></tr></table></figure>

<p>压缩命令<code>zip</code></p>
<table>
<thead>
<tr>
<th align="center">选项</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">-r</td>
<td align="center">递归压缩，包括目录下的所有文件</td>
</tr>
<tr>
<td align="center">-l</td>
<td align="center">查看压缩包里面的文件</td>
</tr>
<tr>
<td align="center">-d</td>
<td align="center">指定解压路径</td>
</tr>
</tbody></table>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#安装zip和unzip命令</span></span><br><span class="line">[root@localhost ~]<span class="comment"># yum install -y zip </span></span><br><span class="line">[root@localhost ~]<span class="comment"># yum install -y unzip</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#zip语法</span></span><br><span class="line">zip [options] 压缩包名 文件</span><br><span class="line"></span><br><span class="line"><span class="comment">#示例</span></span><br><span class="line">[root@localhost ~]<span class="comment"># zip python.zip 1.txt 2.txt 3.txt</span></span><br><span class="line"><span class="comment">#指定压缩位置</span></span><br><span class="line">[root@localhost ~]<span class="comment"># zip /opt/python.zip 1.txt 2.txt 3.txt 4.txt</span></span><br><span class="line"><span class="comment">#压缩目录</span></span><br><span class="line">[root@localhost ~]<span class="comment"># zip -r python.zip /python</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#特性</span></span><br><span class="line">1.压缩文件后，源文件存在 </span><br><span class="line">2.可以指定压缩后保存的路径 </span><br><span class="line">3.可以压缩目录，也可以压缩文件，也可以指定多个文件一起压缩 </span><br><span class="line">4.压缩目录需要加选项，如果不加，压缩后，只有一个空目录，没有里面的文件 </span><br><span class="line">5.解压后，压缩包不会消失，如果同一目录下出现同名文件则会询问是否要覆盖</span><br><span class="line"></span><br><span class="line"><span class="comment">#unzip语法</span></span><br><span class="line">unzip [options] 压缩包名</span><br><span class="line"></span><br><span class="line"><span class="comment">#示例</span></span><br><span class="line">[root@localhost ~]<span class="comment"># unzip python.zip </span></span><br><span class="line">Archive: python.zip replace python/1.txt? [y]es, [n]o, [A]ll, [N]one, [r]ename: A</span><br><span class="line"><span class="comment">#查看压缩文件</span></span><br><span class="line">[root@localhost ~]<span class="comment"># unzip -l python.zip</span></span><br><span class="line"><span class="comment">#解压到指定路径</span></span><br><span class="line">[root@localhost ~]<span class="comment"># unzip python.zip -d /opt</span></span><br></pre></td></tr></table></figure>

<p>归档命令<code>tar</code></p>
<table>
<thead>
<tr>
<th align="center">选项</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">-c</td>
<td align="center">创建新的归档文件</td>
</tr>
<tr>
<td align="center">-x</td>
<td align="center">对归档文件解包</td>
</tr>
<tr>
<td align="center">-v</td>
<td align="center">输出命令的归档或解包的过程</td>
</tr>
<tr>
<td align="center">-f</td>
<td align="center">指定包文件名，多参数f写最后</td>
</tr>
<tr>
<td align="center">-t</td>
<td align="center">列出归档文件里的文件列表</td>
</tr>
<tr>
<td align="center">-z</td>
<td align="center">使用<code>gzip</code>压缩归档后的文件</td>
</tr>
<tr>
<td align="center">-j</td>
<td align="center">使用<code>bzip2</code>压缩归档后的文件</td>
</tr>
<tr>
<td align="center">-J</td>
<td align="center">使用<code>xz</code>压缩归档后的文件</td>
</tr>
<tr>
<td align="center">-C</td>
<td align="center">指定解压目录位置</td>
</tr>
<tr>
<td align="center">-X</td>
<td align="center">排除指定文件</td>
</tr>
<tr>
<td align="center">-h</td>
<td align="center">打包软链接</td>
</tr>
<tr>
<td align="center">-P</td>
<td align="center">压缩时带绝对路径，解压时按绝对路径解压</td>
</tr>
</tbody></table>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#安装bzip2压缩</span></span><br><span class="line">[root@localhost ~]<span class="comment"># yum install -y bzip2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#语法</span></span><br><span class="line">tar [options] 压缩包名 文件名</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看压缩包大小</span></span><br><span class="line">[root@localhost ~]<span class="comment"># du -sh 压缩包名</span></span><br><span class="line"><span class="comment">#查看文件类型</span></span><br><span class="line">[root@localhost ~]<span class="comment"># file 文件名</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#示例</span></span><br><span class="line">[root@localhost ~]<span class="comment"># tar zcf python.tar.gz /etc /opt /tmp</span></span><br><span class="line"><span class="comment">#zcf原理</span></span><br><span class="line"><span class="comment">#1.先归档 </span></span><br><span class="line">[root@localhost ~]<span class="comment"># tar cf tmp2.tar /tmp </span></span><br><span class="line"><span class="comment">#2.再使用gzip压缩 </span></span><br><span class="line">[root@localhost ~]<span class="comment"># gzip tmp2.tar</span></span><br><span class="line"><span class="comment">#压缩到指定位置</span></span><br><span class="line">[root@localhost ~]<span class="comment"># tar zcf /usr/local/python.tar.gz /etc /opt /tmp</span></span><br><span class="line"><span class="comment">#解压到指定位置</span></span><br><span class="line">[root@localhost ~]<span class="comment"># tar xf python.tar.gz -C /opt</span></span><br><span class="line"><span class="comment">#查看压缩包文件</span></span><br><span class="line">[root@localhost ~]<span class="comment"># tar tf /usr/local/python.tar.gz</span></span><br><span class="line"><span class="comment">#压缩解压bzip2格式</span></span><br><span class="line">[root@localhost ~]<span class="comment"># tar jcf test.bzip2 test1.txt test2.txt</span></span><br><span class="line">[root@localhost ~]<span class="comment"># tar jxf test.bzip2</span></span><br><span class="line"><span class="comment">#压缩解压xz格式</span></span><br><span class="line">[root@localhost ~]<span class="comment"># tar Jcf test.xz test1.txt test2.txt</span></span><br><span class="line">[root@localhost ~]<span class="comment"># tar Jxf test.xz</span></span><br><span class="line"><span class="comment">#排除指定文件_-X</span></span><br><span class="line">[root@localhost ~]<span class="comment"># vim exclude.txt</span></span><br><span class="line">1.txt</span><br><span class="line">2.txt</span><br><span class="line">[root@localhost ~]<span class="comment"># tar zcf python.tar.gz -X exclude.txt /etc /opt /tmp</span></span><br><span class="line"><span class="comment">#排除指定文件_--exclude（一个--exclude只能排除单个文件）</span></span><br><span class="line">[root@localhost ~]<span class="comment"># tar zcf python.tar.gz --exclude=1.txt /etc /opt /tmp</span></span><br><span class="line">[root@localhost ~]<span class="comment"># tar zcf python.tar.gz --exclude=1.txt --exclude=2.txt /etc /opt /tmp</span></span><br><span class="line"><span class="comment">#打包软链接</span></span><br><span class="line">[root@localhost ~]<span class="comment"># ll /etc/grub2.cfg </span></span><br><span class="line">lrwxrwxrwx. 1 root root 22 Mar 24 16:39 /etc/grub2.cfg -&gt; ../boot/grub2/grub.cfg</span><br><span class="line">[root@localhost ~]<span class="comment"># tar zcf grub2.tar.gz /etc/grub2.cfg</span></span><br><span class="line">[root@localhost ~]<span class="comment"># tar xvf grub2.tar.gz</span></span><br><span class="line"><span class="comment">##grub.cfg无法使用，相对路径失效</span></span><br><span class="line">[root@localhost ~]<span class="comment"># ll etc/</span></span><br><span class="line">total 0</span><br><span class="line">lrwxrwxrwx 1 root root 22 Mar 24 16:39 grub2.cfg -&gt; ../boot/grub2/grub.cfg</span><br><span class="line"><span class="comment">##加h选项</span></span><br><span class="line">[root@localhost ~]<span class="comment"># tar zchf grub2.tar.gz /etc/grub2.cfg</span></span><br><span class="line">[root@localhost ~]<span class="comment"># tar xvhf grub2.tar.gz /etc/grub2.cfg</span></span><br><span class="line"><span class="comment">#保留"/"根号</span></span><br><span class="line">[root@localhost ~]<span class="comment"># tar zcPf etc.tar.gz /etc</span></span><br><span class="line">[root@localhost ~]<span class="comment"># tar xvPf etc.tar.gz</span></span><br><span class="line"></span><br><span class="line">1.压缩文件后，源文件存在 </span><br><span class="line">2.目录和文件都可以压缩 </span><br><span class="line">3.压缩后，压缩包的位置可以指定任意目录</span><br><span class="line">4.可以查看压缩包里有哪些文件，但是查看不了文件内容</span><br><span class="line">5.一个压缩包中，可以有多个文件或目录 </span><br><span class="line">6.解压后，压缩包还在，源文件也可以随意指定路径 -C</span><br><span class="line">7.万能解压命令：xf</span><br><span class="line"></span><br><span class="line">注意：tar命令在解压开文件时，如果有文件名冲突，则不会询问，直接覆盖 </span><br><span class="line">     tar命令，在打包时，会自动删除绝对路径的<span class="string">"/"</span> </span><br><span class="line">     以后打包，尽量使用相对路径，<span class="built_in">cd</span>到需要打包目录或文件的上级目录</span><br></pre></td></tr></table></figure>

<h2 id="企业案例"><a href="#企业案例" class="headerlink" title="企业案例"></a>企业案例</h2><p>数据库物理备份</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1.安装数据库</span></span><br><span class="line">[root@localhost ~]<span class="comment"># yum install -y mariadb-server</span></span><br><span class="line">[root@localhost ~]<span class="comment"># systemctl start mariadb</span></span><br><span class="line">[root@localhost ~]<span class="comment"># mkdir /backup</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#2.创建数据库</span></span><br><span class="line">create database lol;</span><br><span class="line">show databases;</span><br><span class="line">use lol;</span><br><span class="line">create table user(id int,user varchar(10),password varchar(10),money int);</span><br><span class="line">insert into user(id,user,password,money) values(1,<span class="string">'wcj'</span>,<span class="string">'123'</span>,10);</span><br><span class="line"> </span><br><span class="line"><span class="comment">#3.备份数据并删库</span></span><br><span class="line">[root@localhost ~]<span class="comment"># cd /var/lib</span></span><br><span class="line">[root@localhost lib]<span class="comment"># tar zcf mysql.tar.gz mysql</span></span><br><span class="line">[root@localhost lib]<span class="comment"># rm -rf mysql/lol</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#4.停服务并恢复数据</span></span><br><span class="line">[root@localhost lib]<span class="comment"># systemctl stop mariadb</span></span><br><span class="line">[root@localhost lib]<span class="comment"># mv mysqk=l /tmp</span></span><br><span class="line">[root@localhost lib]<span class="comment"># tar xvf mysql.tar.gz -C /var/lib</span></span><br><span class="line">[root@localhost lib]<span class="comment"># systemctl start mariadb</span></span><br></pre></td></tr></table></figure>

<p>传输海量小文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#文件传输（如果etc下小文件特别多，很占用磁盘IO） </span></span><br><span class="line">[root@localhost lib]<span class="comment"># cp -a /etc /tmt</span></span><br><span class="line"><span class="comment">#以下方式减少小文件的传输 </span></span><br><span class="line">[root@localhost lib]<span class="comment"># tar czf - /etc | tar xzf - -C /tmp</span></span><br></pre></td></tr></table></figure>

<p>网络传输海量小文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#常规方法 </span></span><br><span class="line">[root@localhost ~]<span class="comment"># scp -r /etc root@10.0.0.200:/tmp </span></span><br><span class="line"></span><br><span class="line"><span class="comment">#建议方法: </span></span><br><span class="line"><span class="comment">#接收B主机, 需要监听端口 </span></span><br><span class="line">[root@hostB ~]<span class="comment"># systemctl stop firewalld.service </span></span><br><span class="line">[root@hostB ~]<span class="comment"># nc -l 8888 |tar xzf - -C /tmp </span></span><br><span class="line"><span class="comment">#发送方A主机 </span></span><br><span class="line">[root@hostA ~]<span class="comment"># tar -czf - /etc | nc 10.0.0.200 8888 </span></span><br><span class="line">tar: Removing leading `/<span class="string">' from member names</span></span><br></pre></td></tr></table></figure>

<h1 id="文件查找"><a href="#文件查找" class="headerlink" title="文件查找"></a>文件查找</h1><h2 id="find查找概述"><a href="#find查找概述" class="headerlink" title="find查找概述"></a>find查找概述</h2><ul>
<li>find命令可以根据不同的条件进行查找文件：文件名称、文件大小、文件时间、属主属组、权限等</li>
</ul>
<h2 id="find命令语法"><a href="#find命令语法" class="headerlink" title="find命令语法"></a>find命令语法</h2><table>
<thead>
<tr>
<th align="center">命令</th>
<th align="center">路径</th>
<th align="center">选项</th>
<th align="center">表达式</th>
<th align="center">动作</th>
</tr>
</thead>
<tbody><tr>
<td align="center">find</td>
<td align="center">path</td>
<td align="center">options</td>
<td align="center">expression</td>
<td align="center">action</td>
</tr>
<tr>
<td align="center">查找</td>
<td align="center">地区</td>
<td align="center">妹子</td>
<td align="center">18-25岁</td>
<td align="center">？</td>
</tr>
</tbody></table>
<h2 id="find查找实例"><a href="#find查找实例" class="headerlink" title="find查找实例"></a>find查找实例</h2><p>基于名称查找</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1.创建文件</span></span><br><span class="line">touch /etc/sysconfig/network-scripts/&#123;ifcfg-eth1,IFCFG-ETH1&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#2.查找/etc目录下包含ifcfg-eth0名称的文件</span></span><br><span class="line">[root@roger ~]<span class="comment"># find /etc -name "ifcfg-eth1"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#3.-i 忽略大小写</span></span><br><span class="line">[root@roger ~]<span class="comment"># find /etc -iname "ifcfg-eth1"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#ັ4.查找/etc目录下包含ifcfg-eth名称所有文件</span></span><br><span class="line">[root@roger ~]<span class="comment"># find /etc/ -name "ifcfg-eth*"</span></span><br><span class="line">[root@roger ~]<span class="comment"># find /etc -iname "ifcfg-eth*"</span></span><br></pre></td></tr></table></figure>

<p>基于大小查找</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查找大于5M的文件</span></span><br><span class="line">[root@roger ~]<span class="comment"># find /etc -size +5M</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#查找等于5M的文件</span></span><br><span class="line">[root@roger ~]<span class="comment"># find /etc -size 5M</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#查找小于5M的文件</span></span><br><span class="line">[root@roger ~]<span class="comment"># find /etc -size -5M</span></span><br></pre></td></tr></table></figure>

<p>基于类型查找</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#f文件</span></span><br><span class="line">[root@roger ~]<span class="comment"># find /dev -type f</span></span><br><span class="line"><span class="comment">#d目录</span></span><br><span class="line">[root@roger ~]<span class="comment"># find /dev -type d</span></span><br><span class="line"><span class="comment">#l链接</span></span><br><span class="line">[root@roger ~]<span class="comment"># find /dev -type l</span></span><br><span class="line"><span class="comment">#b块设备</span></span><br><span class="line">[root@roger ~]<span class="comment"># find /dev -type b</span></span><br><span class="line"><span class="comment">#c字符设备</span></span><br><span class="line">[root@roger ~]<span class="comment"># find /dev -type c</span></span><br><span class="line"><span class="comment">#s套接字</span></span><br><span class="line">[root@roger ~]<span class="comment"># find /dev -type s</span></span><br><span class="line"><span class="comment">#p管道文件</span></span><br><span class="line">[root@roger ~]<span class="comment"># find /dev -type p</span></span><br></pre></td></tr></table></figure>

<p>基于时间查找</p>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_devops/image-20220414141902344.png" alt="image-20220414141902344"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">stat</span> 文件名</span><br><span class="line">-atime：文件访问时间查找 </span><br><span class="line">-mtime：文件内容创建，修改时间查找</span><br><span class="line">-ctime：文件属性，修改时间查找</span><br><span class="line"></span><br><span class="line">Num：查找第N天的文件（不包括今天） </span><br><span class="line">+Num：查找第N天之前的所有文件（不包括今天） </span><br><span class="line">-NUm：查找从今天开始算，7天内的文件</span><br><span class="line"></span><br><span class="line"><span class="comment">#1.创建测试文件</span></span><br><span class="line">[root@roger ~]<span class="comment"># for i in &#123;01..10&#125;;do date -s 201904$i &amp;&amp; touch file-$i;done</span></span><br><span class="line"><span class="comment">#2.查找7天以前的文件（不会打印当天的文件）</span></span><br><span class="line">[root@roger ~]<span class="comment"># find ./ -iname "file-*" -mtime +7</span></span><br><span class="line"><span class="comment">#3.查找最近7天的文件，不建议使用（会打印当天的文件）</span></span><br><span class="line">[root@roger ~]<span class="comment"># find ./ -iname	"file-*" -mtime	-7</span></span><br><span class="line"><span class="comment">#4.查找第7天文件（不会打印当天的文件）</span></span><br><span class="line">[root@roger ~]<span class="comment"># find ./ -iname	"file-*" -mtime	7</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看三种时间 </span></span><br><span class="line">[root@localhost ~]<span class="comment"># stat abc_zls</span></span><br><span class="line"><span class="comment">#执行脚本</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> `seq -w 30`;<span class="keyword">do</span> date -s 202204<span class="variable">$i</span> &amp;&amp; touch file-<span class="variable">$i</span>;<span class="keyword">done</span> </span><br><span class="line"><span class="comment">#保留近七天的文件 </span></span><br><span class="line">[root@localhost opt]<span class="comment"># find /opt ! -mtime -7 |xargs rm -f</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#面试题：查找/var/log下所有.log结尾的文件，并保留最近7天的log文件</span></span><br><span class="line">[root@roger ~]<span class="comment"># find /var/log -type f -name "*.log" -mtime +7 -delete</span></span><br></pre></td></tr></table></figure>

<p>基于用户查找</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-user -group -nouser -nogroup</span><br><span class="line">并且：-a 或者：-o 非：！</span><br><span class="line">[root@roger ~]<span class="comment"># find /home/ -type f -user jack</span></span><br><span class="line">[root@roger ~]<span class="comment"># find /home/ -user jack -a -group jack | xargs ls -l</span></span><br><span class="line">[root@roger ~]<span class="comment"># find /home/ -nouser -a -nogroup | xargs rm -rf</span></span><br><span class="line">[root@roger ~]<span class="comment"># find -type f ! -name "file-08" -a -name ".[a-Z]*"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#面试题：保留test文件夹下文件96、97、98</span></span><br><span class="line">[root@roger ~]<span class="comment"># find ./test -type f ! -name 'file-9[6-8]' |xargs rm -f</span></span><br></pre></td></tr></table></figure>

<p>基于权限查找</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">包含：-</span><br><span class="line"><span class="comment">#精确</span></span><br><span class="line">[root@roger ~]<span class="comment"># find /root -type f -perm 644 | xargs ls -l</span></span><br><span class="line"><span class="comment">#包含</span></span><br><span class="line">[root@roger ~]<span class="comment"># find /root -type f -perm -644 | xargs ls -l</span></span><br><span class="line"><span class="comment">#特殊权限</span></span><br><span class="line">[root@web ~]<span class="comment"># find /usr/bin/ /usr/sbin/ -type f -perm -4000 -ls</span></span><br><span class="line">[root@web ~]<span class="comment"># find /usr/bin/ /usr/sbin/ -type f -perm -2000 -ls</span></span><br><span class="line">[root@web ~]<span class="comment"># find /usr/bin/ /usr/sbin/ -type f -perm -1000 -ls</span></span><br><span class="line"><span class="comment">#任一权限 </span></span><br><span class="line"><span class="comment">#总共三个权限位，只要有一个权限位的权限被包含，就可以找到 </span></span><br><span class="line">[root@localhost ~]<span class="comment"># find ./ -perm /644 -ls </span></span><br><span class="line"></span><br><span class="line">属主权限位，有一个r或者有一个w就满足条件 </span><br><span class="line">属组权限位，有一个r就满足条件 </span><br><span class="line">其他用户权限位，有一个r就满足条件</span><br></pre></td></tr></table></figure>

<p>基于层级查找</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-maxdepth 针对目录层级查找 </span><br><span class="line"></span><br><span class="line"><span class="comment">#查找/etc/目录下的所有1级和2级目录 </span></span><br><span class="line">[root@localhost ~]<span class="comment"># find /etc -type d -maxdepth 2</span></span><br></pre></td></tr></table></figure>

<h2 id="find逻辑运算符"><a href="#find逻辑运算符" class="headerlink" title="find逻辑运算符"></a>find逻辑运算符</h2><table>
<thead>
<tr>
<th align="center">符号</th>
<th align="center">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center">-a</td>
<td align="center">与</td>
</tr>
<tr>
<td align="center">-o</td>
<td align="center">或</td>
</tr>
<tr>
<td align="center">-not | !</td>
<td align="center">非</td>
</tr>
</tbody></table>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查找当前目录下，属主不是root的所有文件</span></span><br><span class="line">[root@roger ~]<span class="comment"># find . -not -user root	</span></span><br><span class="line">[root@roger ~]<span class="comment"># find . ! -user root</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#查找当前目录下，属主属于hdfs，并且大于1k的文件</span></span><br><span class="line">[root@roger ~]<span class="comment"># find . -type f -a -user hdfs -a -size +1k</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#查找当前目录下，属主为root或者以xml结尾的普通文件</span></span><br><span class="line">[root@roger ~]<span class="comment"># find . -type f -a \( -user hdfs -o -name '*.xml' \)</span></span><br></pre></td></tr></table></figure>

<h2 id="find动作处理"><a href="#find动作处理" class="headerlink" title="find动作处理"></a>find动作处理</h2><p>查找到一个文件后，需要对文件进行如何处理<code>find</code>的默认动作时<code>-print</code></p>
<table>
<thead>
<tr>
<th align="center">动作</th>
<th align="center">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="center">-print</td>
<td align="center">打印找到的内容（默认）</td>
</tr>
<tr>
<td align="center">-ls</td>
<td align="center">以长格式显示的方式打印找到的内容</td>
</tr>
<tr>
<td align="center">-delete</td>
<td align="center">删除查找到的文件（仅能删除空目录）</td>
</tr>
<tr>
<td align="center">-ok</td>
<td align="center">后面跟自定义shell命令（会提示是否操作）</td>
</tr>
<tr>
<td align="center">-exec</td>
<td align="center">后面跟自定义shell命令（标准写法-exec ;）</td>
</tr>
</tbody></table>
<p>find结合exec</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@roger ~]<span class="comment"># find ./test -type f -perm 655 -exec rm -f &#123;&#125; \;</span></span><br><span class="line">[root@roger ~]<span class="comment"># find ./test -type f -perm 655 -exec cp -rv &#123;&#125; /temp \;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#通过innode删除文件</span></span><br><span class="line">[root@roger ~]<span class="comment"># find ./ -type f -inum "innode" -delete</span></span><br></pre></td></tr></table></figure>

<p>find结合xargs</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@roger ~]<span class="comment"># find ./ -type f -name "file-*" | xargs rm -f</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#exec和xargs区别：xargs快于exec</span></span><br><span class="line">[root@roger ~]<span class="comment"># find ./ -type f -name "file-*" -exec rm -f &#123;&#125; \;</span></span><br><span class="line">[root@roger ~]<span class="comment"># find ./ -type f -name "file-*" | xargs rm -f</span></span><br></pre></td></tr></table></figure>

<p>find结合grep</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-n: 显示行号</span><br><span class="line">-R：递归搜索</span><br><span class="line">-i：忽略大小写</span><br><span class="line">应用程序链接数据库的密码是xxx 但是我不知道是那个文件；</span><br><span class="line">[root@roger ~]<span class="comment"># find /code -type f | xargs grep -nRi "Magedu-oldxu"</span></span><br></pre></td></tr></table></figure>

<h1 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h1><h2 id="文件输入-gt"><a href="#文件输入-gt" class="headerlink" title="文件输入 &gt;"></a>文件输入 &gt;</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1.直接vi一个不存在的文件 </span></span><br><span class="line">[root@localhost ~]<span class="comment"># vi 4.txt</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#2.echo内容重定向到一个文件中 </span></span><br><span class="line">[root@localhost ~]<span class="comment"># echo 5 &gt; 5.txt </span></span><br><span class="line">[root@localhost ~]<span class="comment"># cat 5.txt</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.使用cat创建文件并写入内容 </span></span><br><span class="line">[root@localhost ~]<span class="comment"># cat &gt;&gt; 6.txt &lt;&lt;EOF </span></span><br><span class="line">&gt; <span class="number">6</span> </span><br><span class="line">&gt; EOF</span><br><span class="line">EOF：End Of 以....结尾，不是固定用法，规范用法</span><br><span class="line"></span><br><span class="line">注意：cat查看文件时，会将文件所有内容全部加载到内存里</span><br></pre></td></tr></table></figure>

<h2 id="命令查找which"><a href="#命令查找which" class="headerlink" title="命令查找which"></a>命令查找<code>which</code></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查找命令位置which </span></span><br><span class="line"><span class="built_in">which</span> 只能查找命令 </span><br><span class="line"></span><br><span class="line"><span class="comment">#示例</span></span><br><span class="line">[root@localhost ~]<span class="comment"># which grep </span></span><br><span class="line"><span class="built_in">alias</span> grep=<span class="string">'grep --color=auto'</span> </span><br><span class="line">/usr/bin/grep </span><br><span class="line">[root@localhost ~]<span class="comment"># which mkdir </span></span><br><span class="line">/usr/bin/mkdir </span><br><span class="line">[root@localhost ~]<span class="comment"># which cp </span></span><br><span class="line"><span class="built_in">alias</span> cp=<span class="string">'cp -i'</span> </span><br><span class="line">/usr/bin/cp </span><br><span class="line">[root@localhost ~]<span class="comment"># which mv </span></span><br><span class="line"><span class="built_in">alias</span> mv=<span class="string">'mv -i'</span> </span><br><span class="line">/usr/bin/mv  </span><br><span class="line">[root@localhost ~]<span class="comment"># which rm </span></span><br><span class="line"><span class="built_in">alias</span> rm=<span class="string">'rm -i'</span> </span><br><span class="line">/usr/bin/rm</span><br></pre></td></tr></table></figure>

<h2 id="awk"><a href="#awk" class="headerlink" title="awk"></a>awk</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">过滤列</span><br><span class="line">awk + [选项] + <span class="string">'NR==数字&#123;print $n&#125;'</span> n代表第几列</span><br><span class="line">-F 指定分割符号 (默认是以空格为分割符) NR==数字 取行</span><br><span class="line"></span><br><span class="line"><span class="comment">#截取ip</span></span><br><span class="line">[root@localhost ~]<span class="comment"># ifconfig | awk 'NR==2&#123;print $2&#125;'</span></span><br></pre></td></tr></table></figure>

<h2 id="selinux"><a href="#selinux" class="headerlink" title="selinux"></a>selinux</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">selinux：美国安全局NASH设置的最高安全权限</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>SRE</category>
      </categories>
      <tags>
        <tag>Linux基础</tag>
      </tags>
  </entry>
  <entry>
    <title>[权限管理]</title>
    <url>/2019/03/08/%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<h1 id="权限管理"><a href="#权限管理" class="headerlink" title="权限管理"></a>权限管理</h1><h2 id="权限中rwx的含义"><a href="#权限中rwx的含义" class="headerlink" title="权限中rwx的含义"></a>权限中rwx的含义</h2><table>
<thead>
<tr>
<th align="center">字母</th>
<th align="center">含义</th>
<th align="center">二进制</th>
<th align="center">八进制权限表示法</th>
</tr>
</thead>
<tbody><tr>
<td align="center">r–</td>
<td align="center">读取权限</td>
<td align="center">100</td>
<td align="center">4</td>
</tr>
<tr>
<td align="center">-w-</td>
<td align="center">写入权限</td>
<td align="center">010</td>
<td align="center">2</td>
</tr>
<tr>
<td align="center">–x</td>
<td align="center">执行权限</td>
<td align="center">001</td>
<td align="center">1</td>
</tr>
<tr>
<td align="center">—</td>
<td align="center">没有权限</td>
<td align="center">000</td>
<td align="center">0</td>
</tr>
</tbody></table>
<p>权限和属主属组的关系</p>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_devops/15614304341170.jpg" alt="15614304341170"></p>
<h2 id="替换命令tr"><a href="#替换命令tr" class="headerlink" title="替换命令tr"></a>替换命令<code>tr</code></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># ll | tr 'rwx-' '4210'</span></span><br><span class="line">0420000000. 1 4oot 4oot 1635 Ma4 24 16:44 anaconda0ks.cfg</span><br><span class="line">0420400400  1 4oot 4oot   52 Ap4  5 17:17 del_use4.t1t</span><br><span class="line">0420400400  1 4oot 4oot   10 Ap4  9 14:22 test.t1t</span><br><span class="line"></span><br><span class="line"><span class="comment">#使用命令，获取文件的数字权限</span></span><br><span class="line">[root@localhost ~]<span class="comment"># ll|tr 'rwx-' '4210'|sed -n '2p'|awk -F '' '&#123;print $2+$3+$4""$5+$6+$7""$8+$9+$10&#125;'</span></span><br><span class="line">600</span><br><span class="line">[root@localhost ~]<span class="comment"># ll | tr 'rwx-' '4210'| awk -F '' 'NR==2&#123;print$2+$3+$4""$5+$6+$7""$8+$9+$10&#125;'</span></span><br><span class="line">600</span><br><span class="line"></span><br><span class="line"><span class="comment">#stat命令获取权限</span></span><br><span class="line">[root@localhost ~]<span class="comment"># stat test.txt | awk -F '[(/]' 'NR==4&#123;print $2&#125;' </span></span><br><span class="line">0644</span><br><span class="line">[root@localhost ~]<span class="comment"># stat test.txt | awk -F '(' 'NR==4&#123;print $2&#125;' | awk -F '/' '&#123;print $1&#125;' </span></span><br><span class="line">0644</span><br><span class="line"></span><br><span class="line"><span class="comment">#正规取出文件数字权限的命令 </span></span><br><span class="line">[root@localhost ~]<span class="comment"># stat -c %a test.txt </span></span><br><span class="line">644</span><br><span class="line">[root@localhost ~]<span class="comment"># stat -c %a /etc/sysconfig/network-scripts/ifcfg-eth0 </span></span><br><span class="line">644</span><br></pre></td></tr></table></figure>

<h2 id="ugo权限位"><a href="#ugo权限位" class="headerlink" title="ugo权限位"></a><code>ugo</code>权限位</h2><ul>
<li><p>属主权限位：u-user </p>
</li>
<li><p>属组权限位：g-group </p>
</li>
<li><p>其他用户权限位：o-other</p>
</li>
</ul>
<h2 id="授权命令chmod"><a href="#授权命令chmod" class="headerlink" title="授权命令chmod"></a>授权命令<code>chmod</code></h2><p>授权方式</p>
<ul>
<li>数字方式</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># chmod 744 test.txt</span></span><br><span class="line">[root@localhost ~]<span class="comment"># ll </span></span><br><span class="line">-rwxr--r--  1 root root   10 Apr  9 14:22 test.txt</span><br><span class="line">[root@localhost ~]<span class="comment"># stat -c %a test.txt</span></span><br><span class="line">744</span><br></pre></td></tr></table></figure>

<ul>
<li><code>ugo</code>方式</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#格式</span></span><br><span class="line">u：user用户权限 </span><br><span class="line">g：group用户组权限 </span><br><span class="line">o：other其他用户权限 </span><br><span class="line">a：all所有权限位 </span><br><span class="line"></span><br><span class="line">+：加上后面指定的权限 </span><br><span class="line">-：减去后面指定的权限 </span><br><span class="line">=：等于后面指定的权限</span><br><span class="line"></span><br><span class="line">[root@localhost ~]<span class="comment"># chmod u-r,g-r test.txt</span></span><br><span class="line">[root@localhost ~]<span class="comment"># ll</span></span><br><span class="line">--wx---r--  1 root root   10 Apr  9 14:22 test.txt</span><br><span class="line">[root@localhost ~]<span class="comment"># stat -c %a test.txt</span></span><br><span class="line">304</span><br><span class="line"></span><br><span class="line"><span class="comment">#a的使用</span></span><br><span class="line">[root@localhost ~]<span class="comment"># chmod a=rwx test.txt</span></span><br><span class="line">[root@localhost ~]<span class="comment"># ll</span></span><br><span class="line">-rwxrwxrwx  1 root root   10 Apr  9 14:22 test.txt</span><br><span class="line"></span><br><span class="line"><span class="comment">#a可以省略</span></span><br><span class="line">[root@localhost ~]<span class="comment"># chmod a+x a.sh</span></span><br><span class="line">[root@localhost ~]<span class="comment"># chmod +x a.sh</span></span><br></pre></td></tr></table></figure>

<h2 id="权限对文件的影响"><a href="#权限对文件的影响" class="headerlink" title="权限对文件的影响"></a>权限对文件的影响</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">r：文件只能读取 </span><br><span class="line">w：任何编辑命令都可以写入内容，但是vim读取不出来，就会覆盖原文件内容 </span><br><span class="line">x：对于普通用户来说，还是什么都做不了，必须配合r权限才可以执行 </span><br><span class="line"></span><br><span class="line">rw：可读，可写，正常的使用vim编辑，但是不能执行 </span><br><span class="line">rx：可读，可执行，但是不能编辑 </span><br><span class="line">wx：可写，不可读，不可执行 </span><br><span class="line">rwx：可读，可写，可执行</span><br><span class="line"></span><br><span class="line"><span class="comment">#执行文件方式，必须有执行权限</span></span><br><span class="line">./相对路径</span><br><span class="line">. 文件名 </span><br><span class="line">sh 文件名</span><br><span class="line">bash 文件名</span><br><span class="line"><span class="built_in">source</span> 文件名</span><br></pre></td></tr></table></figure>

<h2 id="权限对目录的影响"><a href="#权限对目录的影响" class="headerlink" title="权限对目录的影响"></a>权限对目录的影响</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">r：能看见目录下的文件，但是看不见文件的详细属性 </span><br><span class="line">w：什么都做不了 </span><br><span class="line">x：什么都做不了 </span><br><span class="line"></span><br><span class="line">rx：才能查看目录下的文件 </span><br><span class="line">wx：读取不了目录里的文件，但是创建文件，创建目录，删除文件，删除目录，不能用*代替 </span><br><span class="line">rwx：可以做任何操作，可以创建，删除，移动，复制文件或目录</span><br><span class="line"></span><br><span class="line">ps:目录在只有单权限的情况下，什么都做不了</span><br><span class="line">   只有rx权限，可以把文件向外复制，因为没有改变目录</span><br></pre></td></tr></table></figure>

<h2 id="修改文件属主属组"><a href="#修改文件属主属组" class="headerlink" title="修改文件属主属组"></a>修改文件属主属组</h2><table>
<thead>
<tr>
<th align="center">选项</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">-R</td>
<td align="center">递归修改属组和属主</td>
</tr>
</tbody></table>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chown</span><br><span class="line"></span><br><span class="line"><span class="comment">#语法 </span></span><br><span class="line">chown [options] 属主.属组 文件名 </span><br><span class="line">chown [options] 属主:属组 文件名</span><br><span class="line"></span><br><span class="line"><span class="comment">#示例</span></span><br><span class="line">[root@localhost opt]<span class="comment"># chown roger1:roger2 abc </span></span><br><span class="line"></span><br><span class="line"><span class="comment">#只修改属主 </span></span><br><span class="line">[root@localhost opt]<span class="comment"># chown root abc </span></span><br><span class="line"><span class="comment">#只修改属组 </span></span><br><span class="line">[root@localhost opt]<span class="comment"># chown :roger3 abc </span></span><br><span class="line"><span class="comment">#递归修改属组和属主</span></span><br><span class="line">[root@localhost opt]<span class="comment"># chown -R zls:roger1 /opt/</span></span><br></pre></td></tr></table></figure>

<h1 id="特殊权限"><a href="#特殊权限" class="headerlink" title="特殊权限"></a>特殊权限</h1><h2 id="特殊权限介绍"><a href="#特殊权限介绍" class="headerlink" title="特殊权限介绍"></a>特殊权限介绍</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># ll /bin/passwd</span></span><br><span class="line">-rwsr-xr-x. 1 root root 27832 Jun 10  2014 /bin/passwd</span><br><span class="line">[root@localhost ~]<span class="comment"># ll /bin/write</span></span><br><span class="line">-rwxr-sr-x. 1 root tty 19624 Oct 31  2018 /bin/write</span><br><span class="line">[root@localhost ~]<span class="comment"># ll /tmp/ -d</span></span><br><span class="line">drwxrwxrwt. 12 root root 4096 Apr 12 21:52 /tmp/</span><br></pre></td></tr></table></figure>

<blockquote>
<p>/etc/shadow文件，对于普通用户没有任何权限，不能读取，也不能写入内容 ，那么普通用户，为什么可以修改密码？ </p>
<ul>
<li><p>因为使用了<code>passwd</code>这个命令 </p>
</li>
<li><p><code>passwd</code>命令在属主权限位上，原本是<code>x权限</code>，变成了<code>s权限</code></p>
</li>
<li><p><code>s权限</code>在属主权限位，又叫做<code>SetUID权限</code>，<code>SUID</code></p>
</li>
<li><p>作用：普通用户在使用有<code>SUID</code>权限的文件或命令时，会以该文件的属主身份去执行该命令</p>
</li>
</ul>
<p>普通用户只可以修改自身的密码：系统做了判断，普通用户<code>passwd</code>后不能家参数</p>
</blockquote>
<h2 id="特殊权限-SetUID"><a href="#特殊权限-SetUID" class="headerlink" title="特殊权限 SetUID"></a>特殊权限 SetUID</h2><p><code>SetUID</code>特性</p>
<ul>
<li>原本属主位上如果有x权限，则<code>SetUID</code>为 <code>s</code></li>
<li>原本属主位上如果没有x权限，则<code>SetUID</code>为 <code>S</code> </li>
<li>授权方式 <ul>
<li><code>chmod u+s</code> 文件名</li>
<li><code>chmod 4xxx</code> 文件名</li>
</ul>
</li>
<li><code>SetUID</code>权限的数字是4000</li>
</ul>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_devops/image-20220412225423440.png" alt="image-20220412225423440"></p>
<h2 id="特殊权限-SetGID"><a href="#特殊权限-SetGID" class="headerlink" title="特殊权限 SetGID"></a>特殊权限 SetGID</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># ll /bin/write</span></span><br><span class="line">-rwxr-sr-x. 1 root tty 19624 Oct 31 2018 /bin/write</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建一个目录 </span></span><br><span class="line">[root@db04 ~]<span class="comment"># mkdir /tmp/test </span></span><br><span class="line"><span class="comment">#赋予sgid权限 </span></span><br><span class="line">[root@db04 ~]<span class="comment"># chmod g+s /tmp/test/ </span></span><br><span class="line"><span class="comment">#查看目录权限 </span></span><br><span class="line">[root@db04 ~]<span class="comment"># ll /tmp/test/ -d </span></span><br><span class="line">drwxr-sr-x 2 root root 4096 6月 21 16:26 /tmp/<span class="built_in">test</span>/ </span><br><span class="line"><span class="comment">#使用root用户创建文件 </span></span><br><span class="line">[root@db04 ~]<span class="comment"># touch /tmp/test/root_file </span></span><br><span class="line"><span class="comment">#查看文件 </span></span><br><span class="line">[root@db04 ~]<span class="comment"># ll /tmp/test/  </span></span><br><span class="line">-rw-r--r-- 1 root root 0 6月 21 16:30 root_file </span><br><span class="line"><span class="comment">#切换用户 </span></span><br><span class="line">[root@db04 ~]<span class="comment"># su - lamp </span></span><br><span class="line"><span class="comment">#创建文件 </span></span><br><span class="line">[lamp@db04 ~]$ touch /tmp/<span class="built_in">test</span>/lamp_file </span><br><span class="line">touch: cannot touch <span class="string">'/tmp/test/lamp_file'</span>: Permission denied </span><br><span class="line"><span class="comment">#赋予目录777权限 </span></span><br><span class="line">[root@db04 ~]<span class="comment"># chmod 777 /tmp/test/ </span></span><br><span class="line"><span class="comment">#查看目录权限 </span></span><br><span class="line">[root@db04 ~]<span class="comment"># ll -d /tmp/test/ </span></span><br><span class="line">drwxrwsrwx 2 root root 4096 6月 21 16:26 /tmp/<span class="built_in">test</span>/ </span><br><span class="line"><span class="comment">#切换至普通用户 </span></span><br><span class="line">[root@db04 ~]<span class="comment"># su - lamp </span></span><br><span class="line"><span class="comment">#创建文件 </span></span><br><span class="line">[lamp@db04 ~]$ touch /tmp/<span class="built_in">test</span>/lamp_file </span><br><span class="line"><span class="comment">#查看权限 </span></span><br><span class="line">[lamp@db04 ~]$ ll /tmp/<span class="built_in">test</span>/lamp_file</span><br><span class="line">-rw-rw-r-- 1 lamp root 0 Jun 21 16:34 /tmp/<span class="built_in">test</span>/lamp_file</span><br><span class="line"><span class="comment">#讲test目录属主和属组改为oldboy </span></span><br><span class="line">[root@db04 ~]<span class="comment"># chown oldboy.oldboy /tmp/test/ </span></span><br><span class="line"><span class="comment">#查看权限 </span></span><br><span class="line">[root@db04 ~]<span class="comment"># ll -d /tmp/test/ </span></span><br><span class="line">drwxrwsrwx 2 oldboy oldboy 4096 6月 21 16:34 /tmp/<span class="built_in">test</span>/ </span><br><span class="line"><span class="comment">#切换用户 </span></span><br><span class="line">[root@db04 ~]<span class="comment"># su - lamp </span></span><br><span class="line"><span class="comment">#创建文件 </span></span><br><span class="line">[lamp@db04 ~]$ touch /tmp/<span class="built_in">test</span>/lamp_file2 </span><br><span class="line"><span class="comment">#查看文件权限 </span></span><br><span class="line">[lamp@db04 ~]$ ll /tmp/<span class="built_in">test</span>/lamp_file2 </span><br><span class="line">-rw-rw-r-- 1 lamp oldboy 0 Jun 21 16:35 /tmp/<span class="built_in">test</span>/lamp_file2</span><br></pre></td></tr></table></figure>

<p><code>SetGID</code>特性</p>
<ul>
<li>原本属组位上如果有x权限，则<code>SetGID</code>为 <code>s</code> </li>
<li>原本属组位上如果没有x权限，则<code>SetGID</code>为 <code>S</code></li>
<li>授权方式 <ul>
<li><code>chmod g+s</code> 文件名 </li>
<li><code>chmod 2xxx</code> 文件名 </li>
</ul>
</li>
<li><code>SetGID</code>权限的数字是2000</li>
</ul>
<h3 id="主要应用场景：文件共享"><a href="#主要应用场景：文件共享" class="headerlink" title="主要应用场景：文件共享"></a>主要应用场景：文件共享</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">练习sgid</span><br><span class="line">创建三个用户，分别是zls,oldboy,yourname这些用户都属于oldboyedu组的成员。这些用户的密码都是123 </span><br><span class="line">1.要求以上用户和组可以在/home/oldboyedu目录里访问，创建，删除文件 </span><br><span class="line">2.其他用户一律不允许访问该目录</span><br><span class="line">3.在该目录下新建的文件会自动属于oldboyedu组拥有</span><br></pre></td></tr></table></figure>

<h2 id="chattr概述"><a href="#chattr概述" class="headerlink" title="chattr概述"></a>chattr概述</h2><p>chattr只有root用户可以使用，用来修改文件系统的权限属性，建立凌驾于rwx基础权限之上的授权 </p>
<p>chattr命令格式：# chattr [+-=][选项] 文件名或目录名 </p>
<p>设置文件属性(权限)，针对所有用户，包括 root</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">选项：+增加权限 -减少权限 =等于某个权限</span><br><span class="line">a：让文件或目录仅可追加内容</span><br><span class="line">i：不得任意更改文件或目录</span><br><span class="line"> </span><br><span class="line"><span class="comment">#创建文件并设置属性</span></span><br><span class="line">[root@roger ~]<span class="comment"># touch file_a file_i</span></span><br><span class="line">[root@roger ~]<span class="comment"># lsattr file_a file_i</span></span><br><span class="line">---------------- file_a</span><br><span class="line">---------------- file_i</span><br><span class="line"> </span><br><span class="line"><span class="comment">#设置属性</span></span><br><span class="line">[root@roger ~]<span class="comment"># chattr +a file_a</span></span><br><span class="line">[root@roger ~]<span class="comment"># chattr +i file_i</span></span><br><span class="line">[root@roger ~]<span class="comment"># lsattr file_a file_i</span></span><br><span class="line">-----a---------- file_a</span><br><span class="line">----i----------- file_i</span><br><span class="line"> </span><br><span class="line"><span class="comment">#a权限, 无法覆盖写入和删除文件</span></span><br><span class="line">[root@roger ~]<span class="comment"># echo "aa" &gt; file_a</span></span><br><span class="line">bash: file_a: Operation not permitted</span><br><span class="line">[root@roger ~]<span class="comment"># rm -f file_a</span></span><br><span class="line">rm: cannot remove ‘file_a’: Operation not permitted</span><br><span class="line"> </span><br><span class="line"><span class="comment">#a权限, 只能追加, 适用于日志文件</span></span><br><span class="line">[root@roger ~]<span class="comment"># echo "aa" &gt;&gt; file_a</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#i权限, 无法写入, 无法删除</span></span><br><span class="line">[root@roger ~]<span class="comment"># echo "i" &gt; file_i</span></span><br><span class="line">bash: file_i: Permission denied</span><br><span class="line">[root@roger ~]<span class="comment"># echo "i" &gt;&gt; file_i</span></span><br><span class="line">bash: file_i: Permission denied</span><br><span class="line">[root@roger ~]<span class="comment"># rm -f  file_i</span></span><br><span class="line">rm: cannot remove ‘file_i’: Operation not permitted</span><br><span class="line"> </span><br><span class="line"><span class="comment">#解除限制</span></span><br><span class="line">[root@roger ~]<span class="comment"># chattr -a file100 </span></span><br><span class="line">[root@roger ~]<span class="comment"># chattr -i file200</span></span><br></pre></td></tr></table></figure>

<h1 id="umask进程掩码"><a href="#umask进程掩码" class="headerlink" title="umask进程掩码"></a>umask进程掩码</h1><blockquote>
<p>Q：什么是umask？</p>
<p>当我们登录系统之后，创建一个文件总是有一个默认权限，比如： 目录默认权限：755 文件默认权限：644 那么这个权限是怎么来的呢？ 不瞒你说，这就是umask做的，umask设置了用户创建文件的默认权限。</p>
</blockquote>
<p>umask是如何改变新文件的权限 </p>
<p>系统默认umask为022，那么当我们创建一个目录时，正常情况下目录的权限应该是777，但是umask表示要减去的值，所以新目录文件的权限应该是777-022=755。至于文件的权限也依次类推：666-022=644</p>
<p> umask涉及到的配置文件 </p>
<p>umask涉及到的相关文件/etc/bashrc /etc/profile ~/.bashrc ~/.bash_profile </p>
<p>注意：umask影响的范围 </p>
<p>shell (vim,touch) –umask–&gt; 新文件或目录权限 </p>
<p>vsftpd –umask–&gt; 新文件或目录权限 </p>
<p>samba –umask–&gt; 新文件或目录权限 </p>
<p>useradd –umask–&gt; 用户 HOME</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1.假设<span class="built_in">umask</span>值为：022（所有位为偶数）</span><br><span class="line">//文件的起始权限值</span><br><span class="line">6 6 6  -  0 2 2  = 6 4 4 </span><br><span class="line"> </span><br><span class="line">2.假设<span class="built_in">umask</span>值为：045（其他用户组位为奇数）</span><br><span class="line">//计算出来的权限。由于<span class="built_in">umask</span>的最后一位数字是5，所以，在其他用户组位再加1。</span><br><span class="line">6 6 6  -   0 4 5 = 6 2 1</span><br><span class="line"> </span><br><span class="line">3.默认目录权限计算方法</span><br><span class="line">7 7 7  -  0 2 2 = 7 5 5</span><br><span class="line"> </span><br><span class="line"><span class="built_in">umask</span> 044    //<span class="built_in">umask</span>所有位全为偶数时</span><br><span class="line">示例：mkdir d044   //目录733</span><br><span class="line">示例：touch f044   //文件622</span><br><span class="line"> </span><br><span class="line"><span class="built_in">umask</span> 023    //<span class="built_in">umask</span>值的部分或全部位为奇数时</span><br><span class="line">示例：mkdir d023   //目录754</span><br><span class="line">示例：touch f023   //文件644</span><br><span class="line"> </span><br><span class="line"><span class="built_in">umask</span> 035    //<span class="built_in">umask</span>值的所有位为奇数时</span><br><span class="line">示例：mkdir d035   //目录742</span><br><span class="line">示例：touch f035   //文件642</span><br></pre></td></tr></table></figure>

<p>示例1: 在<code>shell</code>进程中创建文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查看当前用户的umask权限</span></span><br><span class="line">[root@zls ~]<span class="comment"># umask</span></span><br><span class="line">0022</span><br><span class="line">[root@zls ~]<span class="comment"># touch file0022</span></span><br><span class="line">[root@zls ~]<span class="comment"># mkdir dir0022</span></span><br><span class="line">[root@zls ~]<span class="comment"># ll -d file0022  dir0022/</span></span><br><span class="line">drwxr-xr-x 2 root root 6 Jan 24 09:02 dir0022/</span><br><span class="line">-rw-r--r-- 1 root root 0 Jan 24 09:02 file0022</span><br></pre></td></tr></table></figure>

<p>示例2: 修改<code>shell umask</code>值(临时生效)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@zls ~]<span class="comment"># umask 000</span></span><br><span class="line">[root@zls ~]<span class="comment"># mkdir dir000</span></span><br><span class="line">[root@zls ~]<span class="comment"># touch file000</span></span><br><span class="line">[root@zls ~]<span class="comment"># ll -d dir000 file000</span></span><br><span class="line">drwxrwxrwx 2 root root 6 Jan 24 09:04 dir000</span><br><span class="line">-rw-rw-rw- 1 root root 0 Jan 24 09:04 file000</span><br></pre></td></tr></table></figure>

<p>示例3: 修改shell umask值(永久生效, 强烈不建议修改)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@zls ~]<span class="comment"># vim /etc/profile</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$UID</span> -gt 199 ] &amp;&amp; [ <span class="string">"`id -gn`"</span> = <span class="string">"`id -un`"</span> ]; <span class="keyword">then</span> </span><br><span class="line"><span class="built_in">umask</span> 002</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">umask</span> 022</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"> </span><br><span class="line">//立即在当前 shell 中生效</span><br><span class="line">[root@zls ~]<span class="comment"># source /etc/profile</span></span><br></pre></td></tr></table></figure>

<p>示例4: 通过<code>umask</code>决定新建用户<code>HOME</code>目录的权限</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@zls ~]<span class="comment"># vim /etc/login.defs</span></span><br><span class="line">UMASK 077</span><br><span class="line">[root@zls ~]<span class="comment"># useradd dba</span></span><br><span class="line">[root@zls ~]<span class="comment"># ll -d /home/dba/</span></span><br><span class="line">drwx------. 4 dba dba 4096 3 月 11 19:50 /home/dba/</span><br><span class="line"> </span><br><span class="line">[root@zls ~]<span class="comment"># vim /etc/login.defs</span></span><br><span class="line">UMASK 000</span><br><span class="line">[root@zls ~]<span class="comment"># useradd sa</span></span><br><span class="line">[root@zls ~]<span class="comment"># ll -d /home/sa/</span></span><br><span class="line">drwxrwxrwx. 4 sa sa 4096 3 月 11 19:53 /home/sa/</span><br></pre></td></tr></table></figure>

<p>示例 5:例如vsftpd进程/etc/vsftpd/vsftpd.conf</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@zls ~]<span class="comment"># yum -y install vsftpd</span></span><br><span class="line">[root@zls ~]<span class="comment"># man vsftpd.conf</span></span><br><span class="line">anon_umask</span><br><span class="line">local_umask</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>SRE</category>
      </categories>
      <tags>
        <tag>Linux基础</tag>
      </tags>
  </entry>
  <entry>
    <title>[用户管理]</title>
    <url>/2019/03/01/%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<h1 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h1><h2 id="Linux中用户的概述"><a href="#Linux中用户的概述" class="headerlink" title="Linux中用户的概述"></a>Linux中用户的概述</h2><p>用户指的是能够正常登录Linux或windows系统</p>
<p>与windows用户的区别：</p>
<ul>
<li><p>支持同一个用户多个设备同时登录</p>
</li>
<li><p>支持不同的用户多个设备同时登录</p>
</li>
</ul>
<p>用户的作用</p>
<p>1）系统上的每一个进程(运行的程序)都需要特定的用户运行</p>
<p>2）每一个文件都有特定的用户拥有，所以访问一个文件或目录受到用户的限制</p>
<p>3）进程能够以何种方式访问某一个文件或目录, 与进程所关联的用户有关</p>
<h2 id="查看系统中用户的命令"><a href="#查看系统中用户的命令" class="headerlink" title="查看系统中用户的命令"></a>查看系统中用户的命令</h2><table>
<thead>
<tr>
<th align="center">选项</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">-u</td>
<td align="center">查看当前登录用户的uid</td>
</tr>
<tr>
<td align="center">-g</td>
<td align="center">查看当前登录用户的gid</td>
</tr>
<tr>
<td align="center">-n</td>
<td align="center">配合-u或者-g一起使用<br/>配合-u：查看当前登录用户uid对应的名字<br>配合-g：查看当前登录用户gid对应的名字</td>
</tr>
</tbody></table>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查看指定用户的信息 </span></span><br><span class="line">id：默认情况不加用户名则查看当前登录用户的信息 </span><br><span class="line"></span><br><span class="line"><span class="comment">#语法</span></span><br><span class="line">id [用户名]</span><br><span class="line"></span><br><span class="line">[root@localhost ~]<span class="comment"># id python</span></span><br><span class="line">uid=1000(python) gid=1000(python) groups=1000(python)</span><br><span class="line">uid=1000(roger)     <span class="comment">#UserID:用户id号 </span></span><br><span class="line">gid=1000(roger)     <span class="comment">#GroupID：用户组id号 </span></span><br><span class="line">groups=1000(roger)  <span class="comment">#该用户的所有组信息</span></span><br><span class="line"></span><br><span class="line">ps:id不加任何参数查看的是当前登录用户</span><br></pre></td></tr></table></figure>

<p>后台进程查看</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># ps -ef | less</span></span><br><span class="line">UID         PID   PPID  C STIME TTY          TIME CMD</span><br><span class="line">root          1      0  0 Apr01 ?        00:00:02 /usr/lib/systemd/systemd --switched-root --system --deserialize 22</span><br><span class="line">root          2      0  0 Apr01 ?        00:00:00 [kthreadd]</span><br><span class="line">root          3      2  0 Apr01 ?        00:00:00 [ksoftirqd/0]</span><br><span class="line">root          5      2  0 Apr01 ?        00:00:00 [kworker/0:0H]</span><br></pre></td></tr></table></figure>

<h2 id="系统用户相关的配置文件"><a href="#系统用户相关的配置文件" class="headerlink" title="系统用户相关的配置文件"></a>系统用户相关的配置文件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/etc/passwd   <span class="comment">#用户信息配置文件 </span></span><br><span class="line">/etc/shadow   <span class="comment">#用户密码存储文件 </span></span><br><span class="line">/etc/group    <span class="comment">#用户组信息配置文件 </span></span><br><span class="line">/etc/gshadow  <span class="comment">#用户组密码存储文件</span></span><br></pre></td></tr></table></figure>

<p>/etc/passwd</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># cat /etc/passwd</span></span><br><span class="line"><span class="comment">#文件内容 </span></span><br><span class="line">root:x:0:0:root:/root:/bin/bash </span><br><span class="line">dbus:x:81:81:System message bus:/:/sbin/nologin</span><br><span class="line"></span><br><span class="line">/bin/bash：交由bash执行</span><br><span class="line">/sbin/nologin：不允许用户登录</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="center"></th>
<th align="center">第一列</th>
<th align="center">第二列</th>
<th align="center">第三列</th>
<th align="center">第四列</th>
<th align="center">第五列</th>
<th align="center">第六列</th>
<th align="center">第七列</th>
</tr>
</thead>
<tbody><tr>
<td align="center">内容</td>
<td align="center">dbus</td>
<td align="center">x</td>
<td align="center">81</td>
<td align="center">81</td>
<td align="center">System message bus</td>
<td align="center">/</td>
<td align="center">/sbin/nologin</td>
</tr>
<tr>
<td align="center">作用</td>
<td align="center">用户名</td>
<td align="center">密码占位符</td>
<td align="center">UID</td>
<td align="center">GID</td>
<td align="center">用户描述信息</td>
<td align="center">用户家目录</td>
<td align="center">用户登录的shell</td>
</tr>
</tbody></table>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20220402071657752.png" alt="image-20220402071657752"></p>
<p>/etc/shadow</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># cat /etc/shadow</span></span><br><span class="line"><span class="comment">#文件内容</span></span><br><span class="line">root:<span class="variable">$6</span><span class="variable">$YOE1El8va0a</span>/N13b<span class="variable">$E5HM</span>/7RVJu4rY.Kbfp9iC2msOras3rWKzOzWZqmjnVBsFswaZXhz.TCrlbffyavK8nG61.19xOLJBoVrnb7Zb0::0:99999:7:::</span><br><span class="line">bin:*:17834:0:99999:7:::</span><br><span class="line">daemon:*:17834:0:99999:7:::</span><br><span class="line">adm:*:17834:0:99999:7:::</span><br><span class="line"></span><br><span class="line">*、!!：表示没有密码</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="center"></th>
<th align="center">第一列</th>
<th align="center">第二列</th>
<th align="center">第三列</th>
<th align="center">第四列</th>
<th align="center">第五列</th>
<th align="center">第六列</th>
<th align="center">第七列</th>
<th align="center">第八列</th>
<th align="center">第九列</th>
</tr>
</thead>
<tbody><tr>
<td align="center">内容</td>
<td align="center">bin</td>
<td align="center">*</td>
<td align="center">17834</td>
<td align="center">0</td>
<td align="center">99999</td>
<td align="center">7</td>
<td align="center">2</td>
<td align="center">6627567</td>
<td align="center">空</td>
</tr>
<tr>
<td align="center">作用</td>
<td align="center">用户名</td>
<td align="center">密码（加密）</td>
<td align="center">上一次修改密码从1970年到现在过了多少天</td>
<td align="center">密码最少使用多少天，0代表没有限制</td>
<td align="center">密码最多使用多少天</td>
<td align="center">密码快过期前7天，提示修改密码</td>
<td align="center">密码过期后2两天强制修改密码</td>
<td align="center">账户失效时间</td>
<td align="center">保留</td>
</tr>
</tbody></table>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20220402071741563.png" alt="image-20220402071741563"></p>
<h2 id="用户分类（约定、规范CentOS7）"><a href="#用户分类（约定、规范CentOS7）" class="headerlink" title="用户分类（约定、规范CentOS7）"></a>用户分类（约定、规范CentOS7）</h2><table>
<thead>
<tr>
<th align="center">用户UID</th>
<th align="center">系统中含义</th>
</tr>
</thead>
<tbody><tr>
<td align="center">0</td>
<td align="center">超级管理员用户</td>
</tr>
<tr>
<td align="center">1-200</td>
<td align="center">系统用户（系统自己创建的）</td>
</tr>
<tr>
<td align="center">201-999</td>
<td align="center">系统用户（可以手动创建）</td>
</tr>
<tr>
<td align="center">1000+</td>
<td align="center">普通用户</td>
</tr>
</tbody></table>
<h2 id="chage命令修改用户信息（了解）"><a href="#chage命令修改用户信息（了解）" class="headerlink" title="chage命令修改用户信息（了解）"></a>chage命令修改用户信息（了解）</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-d  <span class="comment">#设置最近一次更改密码时间, 0下次登陆系统强制修改密码 </span></span><br><span class="line">-m  <span class="comment">#设置用户两次改变密码之间使用"最小天数"</span></span><br><span class="line">-M  <span class="comment">#设置用户两次改变密码之间使用"最大天数" </span></span><br><span class="line">-W  <span class="comment">#设置密码更改警告时间 将过期警告天数设为“警告天数” </span></span><br><span class="line">-I  <span class="comment">#设置密码过期天数后, 密码为失效状态 </span></span><br><span class="line">-E  <span class="comment">#设置用户过期时间, 账户失效后无法登陆 </span></span><br><span class="line">-l  <span class="comment">#显示用户信息</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#修改时间为2014年08月31日,和图中时间匹配,方便后续验证 </span></span><br><span class="line">[root@roger ~]<span class="comment"># date -s '20140831' </span></span><br><span class="line">Sun Aug 31 00:00:00 CST 2014 </span><br><span class="line">[root@roger ~]<span class="comment"># date </span></span><br><span class="line">Sun Aug 31 00:00:01 CST 2014 </span><br><span class="line">[root@roger ~]<span class="comment"># useradd roger1 </span></span><br><span class="line">[root@roger ~]<span class="comment"># echo "123" |passwd --stdin roger1 </span></span><br><span class="line">[root@roger ~]<span class="comment"># tail -1 /etc/shadow </span></span><br><span class="line">roger1:!!:16312:0:99999:7::: </span><br><span class="line"></span><br><span class="line"><span class="comment">#设置最近一次修改密码时间 </span></span><br><span class="line">[root@roger ~]<span class="comment"># chage -d "2014-09-01" roger1 </span></span><br><span class="line">[root@roger ~]<span class="comment"># tail -n1 /etc/shadow </span></span><br><span class="line">roger1:!!:16314:0:99999:7::: </span><br><span class="line"></span><br><span class="line"><span class="comment">#设置最短使用密码时间 </span></span><br><span class="line">[root@roger ~]<span class="comment"># chage -m 2 roger1 </span></span><br><span class="line">[root@roger ~]<span class="comment"># tail -n1 /etc/shadow </span></span><br><span class="line">roger1:!!:16314:2:99999:7::: </span><br><span class="line"></span><br><span class="line"><span class="comment">#设置密码最长使用时间 </span></span><br><span class="line">[root@roger ~]<span class="comment"># chage -M 15 roger1 </span></span><br><span class="line">[root@roger ~]<span class="comment"># tail -n1 /etc/shadow </span></span><br><span class="line">roger1:!!:16314:2:15:7::: </span><br><span class="line"></span><br><span class="line"><span class="comment">#设置密码警告时间 </span></span><br><span class="line">[root@roger ~]<span class="comment"># chage -W 6 roger1 </span></span><br><span class="line">[root@roger ~]<span class="comment"># tail -n1 /etc/shadow</span></span><br><span class="line">roger1:!!:16314:2:15:6::: </span><br><span class="line">[root@roger ~]<span class="comment"># chage -W 7 roger1 </span></span><br><span class="line">[root@roger ~]<span class="comment"># tail -n1 /etc/shadow roger1:!!:16314:2:15:7::: </span></span><br><span class="line"></span><br><span class="line"><span class="comment">#设置密码过期时间 </span></span><br><span class="line">[root@roger ~]<span class="comment"># chage -I 5 roger1 </span></span><br><span class="line">[root@roger ~]<span class="comment"># tail -n1 /etc/shadow </span></span><br><span class="line">roger1:!!:16314:2:15:6:5:: </span><br><span class="line"></span><br><span class="line"><span class="comment">#设置用户过期时间 </span></span><br><span class="line">[root@roger ~]<span class="comment"># chage -E "20115-08-31" roger1 </span></span><br><span class="line">[root@roger ~]<span class="comment"># tail -n1 /etc/shadow </span></span><br><span class="line">roger1:!!:16314:2:15:6:5:6627567: </span><br><span class="line">[root@roger ~]<span class="comment"># chage -l roger1 e</span></span><br><span class="line">Last password change : Sep 01, 2014  <span class="comment">#最近一次更改密码时间</span></span><br><span class="line">Password expires : Sep 16, 2014  <span class="comment">#密码过期时间 </span></span><br><span class="line">Password inactive : Sep 21, 2014  <span class="comment">#密码失效时间 </span></span><br><span class="line">Account expires : Aug 31, 2015  <span class="comment">#用户失效时间 </span></span><br><span class="line">Minimum number of days between password change : 2  <span class="comment">#密码最短使用时间 </span></span><br><span class="line">Maximum number of days between password change : 15  <span class="comment">#密码最长使用时间 </span></span><br><span class="line">Number of days of warning before password expires : 7  <span class="comment">#密码过期前警告天数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#如何验证,只调整时间为如下进行验证: </span></span><br><span class="line">1.验证普通用户是否能修改密码, 不需要调整时间。 </span><br><span class="line">2.普通用户登陆系统后, 会提示警告密码还剩多少天过期 </span><br><span class="line">[root@roger ~]<span class="comment"># date -s "2014-09-12" </span></span><br><span class="line">3.普通用户登陆系统后, 强制要求修改密码 </span><br><span class="line">[root@roger ~]<span class="comment"># date -s "2014-09-18" </span></span><br><span class="line">4.普通用户登陆系统后, 提示账户已过期 </span><br><span class="line">[root@roger ~]<span class="comment"># date -s "2014-09-23"</span></span><br></pre></td></tr></table></figure>

<h2 id="用户操作命令"><a href="#用户操作命令" class="headerlink" title="用户操作命令"></a>用户操作命令</h2><p><strong>用户创建</strong></p>
<table>
<thead>
<tr>
<th align="center">选项</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">-u</td>
<td align="center">创建用户时指定用户的uid</td>
</tr>
<tr>
<td align="center">-g</td>
<td align="center">创建用户时指定用户的gid 指定用户组名（该组必须存在）</td>
</tr>
<tr>
<td align="center">-G</td>
<td align="center">创建用户时指定用户的附加组（该组必须存在）</td>
</tr>
<tr>
<td align="center">-c</td>
<td align="center">创建用户时指定用户的描述信息</td>
</tr>
<tr>
<td align="center">-d</td>
<td align="center">创建用户时指定用户的家目录（该目录可以不存在，会自动创建）</td>
</tr>
<tr>
<td align="center">-M</td>
<td align="center">创建用户时不创建用户的家目录</td>
</tr>
<tr>
<td align="center">-s</td>
<td align="center">创建用户时指定用户登录的shell（默认是/bin/bash）</td>
</tr>
<tr>
<td align="center">-r</td>
<td align="center">创建用户时指定用户为系统用户</td>
</tr>
</tbody></table>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">useradd</span><br><span class="line">注意：创建用户在默认不指定组的情况下，会同时出跟该用户名相同的组，跟uid相同的gid，除非-g指定组，则 不会创建同名组</span><br><span class="line"></span><br><span class="line"><span class="comment">#语法</span></span><br><span class="line">useradd [options] 用户名</span><br><span class="line"></span><br><span class="line"><span class="comment">#示例</span></span><br><span class="line">[root@root ~]<span class="comment"># useradd user01 </span></span><br><span class="line">[root@root ~]<span class="comment"># useradd user02 -u 503              #创建用户usr02，指定uid </span></span><br><span class="line">[root@root ~]<span class="comment"># useradd user03 -d /aaa             #创建用户user03 指定家目录</span></span><br><span class="line">[root@root ~]<span class="comment"># useradd user04 -M                  #创建用户user04，不创建家目录 </span></span><br><span class="line">[root@root ~]<span class="comment"># useradd user05 -s /sbin/nologin    #创建用户并指定shell </span></span><br><span class="line">[root@root ~]<span class="comment"># useradd user06 -g hr               #创建用户，指定主组 </span></span><br><span class="line">[root@root ~]<span class="comment"># useradd user07 -G sale             #创建用户，指定附加组 </span></span><br><span class="line">[root@root ~]<span class="comment"># useradd user08 -e 2014-04-01       #指定过期时间 </span></span><br><span class="line">[root@root ~]<span class="comment"># useradd xxx -M -s /sbin/nologin    #创建普通用户，但是没有家目录，不能登录系统 </span></span><br><span class="line">[root@root ~]<span class="comment"># useradd -r yyy -s /sbin/nologin    #yyy属于系统用户，uid处于系统用户 uid范围内</span></span><br><span class="line"></span><br><span class="line">-M</span><br><span class="line">启动程序不需要家目录，容易被黑客攻击</span><br><span class="line"></span><br><span class="line"><span class="comment">#报错1 </span></span><br><span class="line">[root@localhost ~]<span class="comment"># useradd roger1 -u 666 -g 666 </span></span><br><span class="line">useradd: group <span class="string">'666'</span> does not exist </span><br><span class="line"></span><br><span class="line">原因：666这个组不存在，前提，-g必须加入到一个已存在的组</span><br><span class="line"></span><br><span class="line"><span class="comment">#报错2 </span></span><br><span class="line">[root@localhost ~]<span class="comment"># mkdir /dsb </span></span><br><span class="line">[root@localhost ~]<span class="comment"># useradd hl1 -d /dsb/ </span></span><br><span class="line">useradd: warning: the home directory already exists. Not copying any file from skel directory into it. </span><br><span class="line"></span><br><span class="line">原因：使用-d指定用户的家目录时，家目录不能提前创建</span><br></pre></td></tr></table></figure>

<p><strong>修改用户</strong></p>
<table>
<thead>
<tr>
<th align="center">选项</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">-u</td>
<td align="center">修改用户时指定用户的uid</td>
</tr>
<tr>
<td align="center">-g</td>
<td align="center">修改用户时指定用户的gid 指定用户组名（该组必须存在）</td>
</tr>
<tr>
<td align="center">-G</td>
<td align="center">修改用户时指定用户的附加组，会覆盖原来的附加组（该组必须存在）</td>
</tr>
<tr>
<td align="center">-a</td>
<td align="center">修改用户附加组的时候，配合-a追加使用</td>
</tr>
<tr>
<td align="center">-c</td>
<td align="center">修改用户时指定用户的描述信息</td>
</tr>
<tr>
<td align="center">-d</td>
<td align="center">修改用户时指定用户的家目录（该目录可以不存在，会自动创建）</td>
</tr>
<tr>
<td align="center">-m</td>
<td align="center">修改用户时迁移用户的家目录，必须配合-d使用</td>
</tr>
<tr>
<td align="center">-s</td>
<td align="center">修改用户时指定用户登录的shell（默认是/bin/bash）</td>
</tr>
<tr>
<td align="center">-l</td>
<td align="center">更改用户登录名</td>
</tr>
<tr>
<td align="center">-L</td>
<td align="center">锁定用户</td>
</tr>
<tr>
<td align="center">-U</td>
<td align="center">解锁用户</td>
</tr>
</tbody></table>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">usermod</span><br><span class="line"></span><br><span class="line"><span class="comment">#语法 </span></span><br><span class="line">usermod [options] 用户名</span><br><span class="line"></span><br><span class="line"><span class="comment">#示例</span></span><br><span class="line">[root@root ~]<span class="comment"># usermod -e 2013-02-11 user1000  #修改过期时间 </span></span><br><span class="line">[root@root ~]<span class="comment"># usermod -g group1 jj            #修改主组 </span></span><br><span class="line">[root@root ~]<span class="comment"># usermod -a -G group2 jj         #修改附加组，-a添加，不加-a代表覆盖</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#报错 [root@localhost ~]# usermod hl3 -l hl38 </span></span><br><span class="line">usermod: user hl3 is currently used by process 70107 </span><br><span class="line"></span><br><span class="line">原因：hl3用户当前正在被PID为70107进程占用，所以无法修改</span><br></pre></td></tr></table></figure>

<p><strong>删除用户</strong></p>
<table>
<thead>
<tr>
<th align="center">选项</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">-r</td>
<td align="center">递归删除，用户所有相关文件</td>
</tr>
</tbody></table>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">userdel</span><br><span class="line">注意：删除用户，默认情况下，只删除用户本身，其他相关目录文件不会删除</span><br><span class="line"></span><br><span class="line"><span class="comment">#语法 </span></span><br><span class="line">userdel [options] 用户名</span><br><span class="line"></span><br><span class="line"><span class="comment">#示例</span></span><br><span class="line">[root@root ~]<span class="comment"># userdel -r python</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#警告 </span></span><br><span class="line">[root@localhost ~]<span class="comment"># useradd test </span></span><br><span class="line">useradd: warning: the home directory already exists. Not copying any file from skel directory into it. Creating mailbox file: File exists </span><br><span class="line"></span><br><span class="line">原因：创建用户时，该用户以前创建过，但是在删除时没有加-r选项，没有删干净（用户同样可以创建出来）</span><br></pre></td></tr></table></figure>

<h2 id="查看用户其他命令"><a href="#查看用户其他命令" class="headerlink" title="查看用户其他命令"></a>查看用户其他命令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查看当前系统登录了哪些用户 </span></span><br><span class="line">[root@localhost ~]<span class="comment"># who</span></span><br><span class="line">当前登录用户    终端      登录时间      从哪个IP登录 </span><br><span class="line">   root      pts/0	  2022-04-01  11:00 (10.0.0.1)</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看当前系统登录了哪些用户 </span></span><br><span class="line">[root@localhost ~]<span class="comment"># w</span></span><br><span class="line">当前系统时间  服务器总共运行时间  登录用户数  系统的平均负载 </span><br><span class="line">08:52:18 up 15 days, 2:03, 4 users, load average: 0.00, 0.01, 0.05 </span><br><span class="line">USER TTY FROM LOGIN@ IDLE JCPU PCPU WHAT </span><br><span class="line">root pts/0 10.0.0.1 Fri11 2.00s 1.59s 0.00s w </span><br><span class="line">root pts/1 10.0.0.1 23Mar22 3days 0.54s 0.54s -bash </span><br><span class="line">root pts/2 10.0.0.1 21Mar22 12days 0.04s 0.04s -bash </span><br><span class="line">root pts/3 10.0.0.1 23Mar22 12days 0.06s 0.06s -bash</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看当前登录的用户 </span></span><br><span class="line">[root@localhost ~]<span class="comment"># whoami</span></span><br><span class="line">root</span><br></pre></td></tr></table></figure>

<h2 id="创建用户流程"><a href="#创建用户流程" class="headerlink" title="创建用户流程"></a>创建用户流程</h2><p>/etc/login.defs</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># grep -Ev '^#|^$' /etc/login.defs</span></span><br><span class="line">[root@localhost ~]<span class="comment"># grep -i '^[a-z]' /etc/login.defs </span></span><br><span class="line"><span class="comment">#指定创建用户时，默认邮件文件位置 </span></span><br><span class="line">MAIL_DIR /var/spool/mail </span><br><span class="line"></span><br><span class="line"><span class="comment">#创建用户默认密码最大使用天数 </span></span><br><span class="line">PASS_MAX_DAYS <span class="number">99999</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">#创建用户默认密码最小使用天数（0代表无限） </span></span><br><span class="line">PASS_MIN_DAYS <span class="number">0</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">#密码最短位数 </span></span><br><span class="line">PASS_MIN_LEN <span class="number">5</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">#密码过期警告 </span></span><br><span class="line">PASS_WARN_AGE <span class="number">7</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">#普通用户，最小UID是1000 </span></span><br><span class="line">UID_MIN <span class="number">1000</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">#普通用户，最大UID是60000 </span></span><br><span class="line">UID_MAX <span class="number">60000</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">#系统用户，最小UID是201 </span></span><br><span class="line">SYS_UID_MIN <span class="number">201</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">#系统用户，最大UID是999 </span></span><br><span class="line">SYS_UID_MAX <span class="number">999</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">#普通用户组，最小GID是1000</span></span><br><span class="line">GID_MIN <span class="number">1000</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#普通用户组，最大GID是60000 </span></span><br><span class="line">GID_MAX <span class="number">60000</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">#系统用户组，最小GID是201 </span></span><br><span class="line">SYS_GID_MIN <span class="number">201</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">#系统用户组，最大GID是999 </span></span><br><span class="line">SYS_GID_MAX <span class="number">999</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">#默认创建用户的家目录 </span></span><br><span class="line">CREATE_HOME yes </span><br><span class="line"></span><br><span class="line"><span class="comment">#UMASK 077 指定用户创建家目录的默认权限 </span></span><br><span class="line">UMASK <span class="number">077</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">#创建用户时，如果不用-g指定组，那么会默认创建出该用户的同名组 </span></span><br><span class="line">USERGROUPS_ENAB yes </span><br><span class="line"></span><br><span class="line"><span class="comment">#用户密码的加密方式 </span></span><br><span class="line">SHA512 ENCRYPT_METHOD SHA512</span><br></pre></td></tr></table></figure>

<p>权限了解</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">r：读权限 4 </span><br><span class="line">w：写权限 2 </span><br><span class="line">x：执行权限 1 </span><br><span class="line">-：没有权限 0 </span><br><span class="line">目录创建默认权限：0777 - <span class="built_in">umask</span> </span><br><span class="line">文件创建默认权限：0666 - <span class="built_in">umask</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#如果当前用户的UID&gt;199并且UID=GID,权限是umask 002否则权限是umask 022</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$UID</span> -gt 199 ] &amp;&amp; [ <span class="string">"`/usr/bin/id -gn`"</span> = <span class="string">"`/usr/bin/id -un`"</span> ]; <span class="keyword">then</span> </span><br><span class="line">	<span class="built_in">umask</span> 002 </span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">	<span class="built_in">umask</span> 022 </span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>

<p>/etc/default/useradd</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># cat /etc/default/useradd </span></span><br><span class="line"></span><br><span class="line"><span class="comment">#如果创建用户不创建同名组，默认会将该用户加入GID为100的系统组中（users） </span></span><br><span class="line">GROUP=100</span><br><span class="line"></span><br><span class="line">ps:如果login.defs文件中的USERGROUPS_ENAB yes是no，该行配置才会生效</span><br><span class="line"></span><br><span class="line"><span class="comment">#指定用户默认创建家目录的位置 </span></span><br><span class="line">HOME=/home </span><br><span class="line"></span><br><span class="line"><span class="comment">#用户账户停权 -1永远不过期</span></span><br><span class="line">INACTIVE=-1 </span><br><span class="line"></span><br><span class="line"><span class="comment">#账号终止时间的设置，不设置不终止</span></span><br><span class="line">EXPIRE= </span><br><span class="line"></span><br><span class="line"><span class="comment">#用户默认创建登录shell </span></span><br><span class="line">SHELL=/bin/bash </span><br><span class="line"></span><br><span class="line"><span class="comment">#该目录下存放的是，用户的环境变量初始配置文件 </span></span><br><span class="line">SKEL=/etc/skel </span><br><span class="line"></span><br><span class="line"><span class="comment">#创建用户的同时，创建该用户的邮箱文件 </span></span><br><span class="line">CREATE_MAIL_SPOOL=yes</span><br></pre></td></tr></table></figure>

<p>用户创建的流程</p>
<ul>
<li><p>1.执行<code>useradd</code> 命令 + 用户名 </p>
</li>
<li><p>2.查看执行命令是否有选项 </p>
</li>
<li><p>3.读取<code>/etc/login.defs</code>文件 </p>
</li>
<li><p>4.读取<code>/etc/default/useradd</code>文件 </p>
</li>
<li><p>5.如果没有-M则创建家目录 </p>
</li>
<li><p>6.根据配置文件中的 <code>SKEL=/etc/skel</code> 将<code>skel</code>下面的环境变量文件拷贝到家目录下 </p>
</li>
<li><p>7.用户信息记录到<code>/etc/passwd</code>文件中 </p>
</li>
<li><p>8.用户密码信息记录到<code>/etc/shadow</code>文件中 </p>
</li>
<li><p>9.用户组信息记录到<code>/etc/group</code>文件中 </p>
</li>
<li><p>10.用户组密码信息记录到<code>/etc/gshadow</code>文件中</p>
</li>
</ul>
<h2 id="用户的密码管理"><a href="#用户的密码管理" class="headerlink" title="用户的密码管理"></a>用户的密码管理</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">passwd：给用户设置密码 </span><br><span class="line"></span><br><span class="line"><span class="comment">#语法：</span></span><br><span class="line">passwd [用户名] </span><br><span class="line"></span><br><span class="line">ps:如果不加用户名，则修改当前登录用户的密码，只有root用户能在passwd命令后加用户名</span><br><span class="line"></span><br><span class="line"><span class="comment">#修改其他用户密码 </span></span><br><span class="line">[root@localhost ~]<span class="comment"># passwd python </span></span><br><span class="line"></span><br><span class="line"><span class="comment">#修改zls用户的密码 </span></span><br><span class="line">Changing password <span class="keyword">for</span> user python. </span><br><span class="line"></span><br><span class="line"><span class="comment">#新密码 </span></span><br><span class="line">New password: </span><br><span class="line">BAD PASSWORD: The password is a palindrome </span><br><span class="line"></span><br><span class="line"><span class="comment">#重复新密码 </span></span><br><span class="line">Retype new password: </span><br><span class="line"></span><br><span class="line"><span class="comment">#所有认证令牌更新成功 </span></span><br><span class="line">passwd: all authentication tokens updated successfully.</span><br></pre></td></tr></table></figure>

<p>免交互方式</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">stdin：标准输入 </span><br><span class="line">stdout：标准输出 </span><br><span class="line">stderr：错误输出</span><br><span class="line"></span><br><span class="line">[root@localhost ~]<span class="comment"># echo 'python' | passwd --stdin python</span></span><br><span class="line">Changing password <span class="keyword">for</span> user python.</span><br><span class="line">passwd: all authentication tokens updated successfully.</span><br><span class="line"></span><br><span class="line"><span class="comment">#脚本创建100个用户</span></span><br><span class="line">vim creat_user</span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> `seq -w 10`;<span class="keyword">do</span></span><br><span class="line">  useradd roger<span class="variable">$i</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">'123'</span> | passwd --stdin roger<span class="variable">$i</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>

<p>随机密码生成</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tee：管道命令 </span><br><span class="line">-a：append 追加 </span><br><span class="line"></span><br><span class="line">[root@localhost ~]<span class="comment"># echo $RANDOM | tee -a /tmp/pass.txt | passwd --stdin roger001</span></span><br></pre></td></tr></table></figure>

<h1 id="用户组管理"><a href="#用户组管理" class="headerlink" title="用户组管理"></a>用户组管理</h1><h2 id="随机密码生成"><a href="#随机密码生成" class="headerlink" title="随机密码生成"></a>随机密码生成</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"> <span class="comment">#md5加密算法</span></span><br><span class="line">[root@localhost ~]<span class="comment"># echo 123 | md5sum</span></span><br><span class="line">[root@localhost ~]<span class="comment"># vim test.txt</span></span><br><span class="line">[root@localhost ~]<span class="comment"># md5sum test.txt &gt; /tmp/md5.txt</span></span><br><span class="line">[root@localhost ~]<span class="comment"># md5sum -c /tmp/md5.txt</span></span><br><span class="line">test.txt: OK</span><br><span class="line"></span><br><span class="line">ps:只要文件篡改就检验失败</span><br><span class="line"></span><br><span class="line">date：查看当前系统时间</span><br><span class="line">date +%F-%T：2022-04-09-14:25:13</span><br><span class="line">date +%F<span class="string">" "</span>%T：2022-04-09 14:25:30</span><br><span class="line">date +%F-%T | md5sum</span><br><span class="line"><span class="comment">#修改当前系统时间格式</span></span><br><span class="line">date -s <span class="string">"2022/4/9 14:34:00"</span></span><br><span class="line"><span class="comment">#格式化时间</span></span><br><span class="line">date +%Y-%m-%d</span><br><span class="line">%Y：年</span><br><span class="line">%m：月</span><br><span class="line">%d：日</span><br><span class="line">%H：时</span><br><span class="line">%M：分</span><br><span class="line">%S：秒</span><br><span class="line">%F：年月日</span><br><span class="line">%T：时分秒</span><br><span class="line"></span><br><span class="line"><span class="comment">#随机密码mkpasswd</span></span><br><span class="line">-l：长度</span><br><span class="line">-d：数字</span><br><span class="line">-c：小写字母</span><br><span class="line">-C：大写字母</span><br><span class="line">-s：特殊符号</span><br><span class="line"></span><br><span class="line">[root@<span class="built_in">test</span> ~]<span class="comment"># mkpasswd -l 13 -d 2 -c 2 -C 4 -s 2</span></span><br><span class="line">uzC4nJ<span class="variable">$UWh2</span>&#123;k</span><br></pre></td></tr></table></figure>

<h2 id="用户组管理-1"><a href="#用户组管理-1" class="headerlink" title="用户组管理"></a>用户组管理</h2><p>/etc/group</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># cat /etc/group </span></span><br><span class="line">root:x:0: </span><br><span class="line"></span><br><span class="line">1.组名字 </span><br><span class="line">2.组密码占位符 </span><br><span class="line">3.GID </span><br><span class="line">4.显示该组的附加成员</span><br></pre></td></tr></table></figure>

<p>/etc/gshadow</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># cat /etc/gshadow</span></span><br><span class="line">root:::roger01</span><br><span class="line"></span><br><span class="line">1.组名字 </span><br><span class="line">2.组密码（空和!是没有密码） </span><br><span class="line">3.组管理员 </span><br><span class="line">4.显示该组的附加成员</span><br></pre></td></tr></table></figure>

<p>创建组<code>groupadd</code></p>
<table>
<thead>
<tr>
<th align="center">选项</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">-g</td>
<td align="center">指定组的gid</td>
</tr>
<tr>
<td align="center">-r</td>
<td align="center">指定gid范围201-999之间的系统组</td>
</tr>
</tbody></table>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">groupadd</span><br><span class="line"></span><br><span class="line"><span class="comment">#语法</span></span><br><span class="line">groupadd [options] 组名</span><br><span class="line"></span><br><span class="line"><span class="comment">#示例</span></span><br><span class="line">[root@localhost ~]<span class="comment"># groupadd workpress01</span></span><br><span class="line">[root@localhost ~]<span class="comment"># groupadd workpress02 -g 10000  </span></span><br><span class="line">[root@localhost ~]<span class="comment"># tail -1 /etc/group</span></span><br><span class="line">workpress02:x:10000:</span><br><span class="line">[root@localhost ~]<span class="comment"># groupadd workpress03 -r</span></span><br><span class="line">[root@localhost ~]<span class="comment"># tail -1 /etc/group</span></span><br><span class="line">workpress03:x:996:</span><br></pre></td></tr></table></figure>

<p>删除组<code>groupdel</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">groupdel</span><br><span class="line"></span><br><span class="line"><span class="comment">#语法</span></span><br><span class="line">groupdel 组名</span><br><span class="line"></span><br><span class="line"><span class="comment">#示例</span></span><br><span class="line">[root@localhost ~]<span class="comment"># groupdel workpress01</span></span><br></pre></td></tr></table></figure>

<p>修改组<code>groupmod</code></p>
<table>
<thead>
<tr>
<th align="center">选项</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">-g</td>
<td align="center">修改组的gid</td>
</tr>
<tr>
<td align="center">-n</td>
<td align="center">修改组名字</td>
</tr>
</tbody></table>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">groupmod</span><br><span class="line"></span><br><span class="line"><span class="comment">#语法</span></span><br><span class="line">groupmod [options] 组名</span><br><span class="line"></span><br><span class="line"><span class="comment">#示例</span></span><br><span class="line">[root@localhost ~]<span class="comment"># groupmod -g 10002 workpress02</span></span><br><span class="line">[root@localhost ~]<span class="comment"># tail -1 /etc/group</span></span><br><span class="line">workpress02:x:10002:</span><br><span class="line">[root@localhost ~]<span class="comment"># groupmod workpress02 -n workpress03</span></span><br><span class="line">[root@localhost ~]<span class="comment"># tail -1 /etc/group</span></span><br><span class="line">workpress03:x:10002:</span><br></pre></td></tr></table></figure>

<p>修改组密码（了解）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@zls ~]<span class="comment"># groupadd devops</span></span><br><span class="line">[root@zls ~]<span class="comment"># gpasswd devops</span></span><br><span class="line">Changing the password <span class="keyword">for</span> group devops</span><br><span class="line">New Password:</span><br><span class="line">Re-enter new password:</span><br></pre></td></tr></table></figure>

<p>切换基本组身份（了解）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#检查账户信息</span></span><br><span class="line">[root@docker ~]<span class="comment"># useradd zls</span></span><br><span class="line">[root@docker ~]<span class="comment"># id zls</span></span><br><span class="line">uid=1069(zls) gid=5005(zls) groups=5005(zls)</span><br><span class="line"> </span><br><span class="line"><span class="comment">#切换普通用户</span></span><br><span class="line">[root@docker ~]<span class="comment"># su - zls</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#创建新文件,并验证权限</span></span><br><span class="line">[zls@docker ~]$ touch file_roots</span><br><span class="line">[zls@docker ~]$ ll</span><br><span class="line">-rw-rw-r-- 1 zls zls 0 Jun 13 10:06 file_roots</span><br><span class="line"> </span><br><span class="line"><span class="comment">#切换组信息</span></span><br><span class="line">[zls@docker ~]$ newgrp devops</span><br><span class="line">Password:</span><br><span class="line"> </span><br><span class="line"><span class="comment">#建立文件,检查权限</span></span><br><span class="line">[zls@docker ~]$ touch file_test</span><br><span class="line">[zls@docker ~]$ ll</span><br><span class="line">total 0</span><br><span class="line">-rw-rw-r-- 1 zls zls 0 Jun 13 10:06 file_roots</span><br><span class="line">-rw-r--r-- 1 zls devops     0 Jun 13 10:08 file_test</span><br></pre></td></tr></table></figure>

<h2 id="用户身份切换"><a href="#用户身份切换" class="headerlink" title="用户身份切换"></a>用户身份切换</h2><p>Linux系统中，有时候普通用户有些事情是没办法操作，除非是root管理员用户才能做到。这时就需要临时切换到root管理员身份来做事了。那么在学习如何切换用户之前,我们先来了解下用户工作环境</p>
<blockquote>
<p>如何在普通用户的情况下，完成日常工作？</p>
<p>su 切换用户，使用普通用户登录，然后使用su命令切换到root</p>
<ul>
<li><p>优点：简单，方便</p>
</li>
<li><p>缺点：需要知道root密码,不安全，切换到root没有日志审计功能</p>
</li>
</ul>
<p>sudo 提权，当需要使用root权限时，进行提权，而无需切换至root用户</p>
<ul>
<li>优点：安全，方便</li>
<li>缺点：复杂</li>
</ul>
</blockquote>
<p>切换用户<code>su</code></p>
<table>
<thead>
<tr>
<th align="center">选项</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">-c</td>
<td align="center">不切换用户，以该用户身份执行</td>
</tr>
</tbody></table>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">su</span><br><span class="line"></span><br><span class="line"><span class="comment">#语法</span></span><br><span class="line">su - 用户名</span><br><span class="line"></span><br><span class="line"><span class="comment">#示例</span></span><br><span class="line"><span class="comment">#不加用户名默认切换root用户</span></span><br><span class="line">[root@localhost ~]<span class="comment"># su - </span></span><br><span class="line">[root@localhost ~]<span class="comment"># su - root -c "mkdir /root/python"</span></span><br><span class="line">[root@localhost ~]<span class="comment"># su - root -c "ls -l /root/python"</span></span><br></pre></td></tr></table></figure>

<p><strong>shell的种类</strong></p>
<ul>
<li>交互式shell<ul>
<li>等待用户输入执行的命令(终端操作,需要不断提示)：passwd</li>
</ul>
</li>
<li>非交互式shell<ul>
<li>执行shell脚本, 脚本执行结束后shell自动退出：su - 用户</li>
</ul>
</li>
<li>登录式shell<ul>
<li>需要输入用户名和密码，才可以登录</li>
</ul>
</li>
<li>非登录式shell<ul>
<li>不需要输入用户名和密码，就可以登录</li>
<li>只加载~/.bashrc、/etc/bashrc 、/etc/profile.d/*.sh </li>
</ul>
</li>
</ul>
<p><strong>系统环境变量文件</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#局部环境变量</span></span><br><span class="line">~/.bashrc</span><br><span class="line">~/.bash_profile</span><br><span class="line"></span><br><span class="line"><span class="comment">#全局环境变量</span></span><br><span class="line">/etc/profile：不能轻易修改</span><br><span class="line">/etc/profile.d/*.sh：推荐在这里增加配置文件，更安全</span><br><span class="line">/etc/bashrc：</span><br></pre></td></tr></table></figure>

<p><strong>环境变量加载顺序</strong></p>
<ul>
<li>/etc/profile </li>
<li>/etc/profile.d/*.sh </li>
<li>~/.bash_profile </li>
<li>~/.bashrc </li>
<li>/etc/bashrc </li>
</ul>
<h1 id="sudo提权"><a href="#sudo提权" class="headerlink" title="sudo提权"></a>sudo提权</h1><blockquote>
<p>什么是<code>sudo</code>？</p>
<ul>
<li><code>sudo</code>就是普通用户可以提权，执行root用户可以执行的命令</li>
</ul>
<p>为什么要用到<code>sudo</code>？</p>
<ul>
<li>如果在公司中，入职后，领导给运维的用户是普通用户，但是有些命令只能root执行</li>
</ul>
</blockquote>
<h2 id="sudo如何使用"><a href="#sudo如何使用" class="headerlink" title="sudo如何使用"></a><code>sudo</code>如何使用</h2><ul>
<li><p>1.系统的超级管理员（root）需要做<code>sudo</code>的配置（发一个兵符给指定的普通用户） </p>
</li>
<li><p>2.普通用户只需要在，执行的命令之前，加上<code>sudo</code>即可</p>
</li>
</ul>
<p>配置文件<code>/etc/sudoers</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"> 99 <span class="comment">## Allow root to run any commands anywhere </span></span><br><span class="line">100 root	ALL=(ALL)	ALL</span><br><span class="line"></span><br><span class="line">1.用户名</span><br><span class="line">2.主机名</span><br><span class="line">3.角色名</span><br><span class="line">4.命令名</span><br></pre></td></tr></table></figure>

<p>编辑权限<code>visudo</code></p>
<table>
<thead>
<tr>
<th align="center">选项</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">-c</td>
<td align="center">检查语法</td>
</tr>
</tbody></table>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#python用户提权</span></span><br><span class="line">python	ALL=(ALL)	ALL</span><br><span class="line">[root@localhost ~]<span class="comment"># sudo passwd roger1</span></span><br><span class="line">[sudo] password <span class="keyword">for</span> python:</span><br><span class="line"><span class="comment">#普通用户无需输入密码</span></span><br><span class="line">python	ALL=(ALL)	NOPASSWD:ALL</span><br><span class="line"></span><br><span class="line"><span class="comment">#主机别名</span></span><br><span class="line">Host_Alias    FILESERVERS = fs1, fs2</span><br><span class="line">python	FILESERVERS=(ALL)	NOPASSWD:ALL</span><br><span class="line"></span><br><span class="line"><span class="comment">#角色别名</span></span><br><span class="line">Cmnd_Alias SOFTWARE = /bin/rpm, /usr/bin/up2date, /usr/bin/yum</span><br><span class="line">python	FILESERVERS=(ALL)	NOPASSWD:Cmnd_Alias SOFTWARE</span><br><span class="line"></span><br><span class="line">Cmnd_Alias SOFTWARE = ！/bin/rpm, !/usr/bin/up2date</span><br><span class="line">python	FILESERVERS=(ALL)	NOPASSWD:Cmnd_Alias SOFTWARE</span><br><span class="line"></span><br><span class="line"><span class="comment">#用户组提权</span></span><br><span class="line">%wheel	ALL=(ALL)	ALL</span><br><span class="line">%wheel	ALL=(ALL)	NOPASSWD:ALL</span><br><span class="line"></span><br><span class="line"><span class="comment">#主要用usermod给用户提权，把用户加到有权限的组里</span></span><br><span class="line">usermod 用户名 -G 提权组</span><br><span class="line"></span><br><span class="line"><span class="comment">#报错 </span></span><br><span class="line">[root@localhost ~]<span class="comment"># sudo ll </span></span><br><span class="line">sudo: ll: <span class="built_in">command</span> not found </span><br><span class="line">原因：ll是别名，不是系统命令，sudo不走别名，只认识系统命令</span><br></pre></td></tr></table></figure>

<p>/var/db/sudo</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#密码过期文件</span></span><br><span class="line">/var/db/sudo/lectured</span><br><span class="line"></span><br><span class="line">通过Atime检验是否过期</span><br></pre></td></tr></table></figure>

<p><code>sudo</code>执行流程</p>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_devops/15613875305374.jpg" alt="15613875305374"></p>
<p>总结</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1.会修改visudo，添加用户提权 </span><br><span class="line">2.给用户免密执行sudo的权限 </span><br><span class="line">3.自定义用户的可执行命令，和不可执行命令 </span><br><span class="line">4.给组分配提权的权限 </span><br><span class="line">5.提权不用修改visudo，只需要加入wheel组，即可</span><br><span class="line"></span><br><span class="line">注意：除非企业中有要求，哪些命令需要用，哪些不能使用</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>SRE</category>
      </categories>
      <tags>
        <tag>Linux基础</tag>
      </tags>
  </entry>
  <entry>
    <title>[人机交互接口]</title>
    <url>/2019/03/01/Bash%E5%88%9D%E8%AF%86/</url>
    <content><![CDATA[<h1 id="Bash-初识"><a href="#Bash-初识" class="headerlink" title="Bash 初识"></a>Bash 初识</h1><p><code>Bash Shell</code>是Linux的命令解释器，主要复杂用户程序与内核系统进行交互操作的一种接口，将用户输入的命令翻译给内核，由内核驱动硬件，最终将处理后的结果输出值<code>Bash Shell</code>屏幕中终端</p>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20220320213559585.png" alt="image-20220320213559585"></p>
<h2 id="Bash的作用"><a href="#Bash的作用" class="headerlink" title="Bash的作用"></a>Bash的作用</h2><p>1）文件管理 </p>
<p>2）权限管理 </p>
<p>3）用户管理 </p>
<p>4）磁盘管理 </p>
<p>5）网络管理 </p>
<p>6）软件管理 </p>
<p>7）应用管理</p>
<h2 id="如何使用bash"><a href="#如何使用bash" class="headerlink" title="如何使用bash"></a>如何使用bash</h2><ul>
<li>执行命令<ul>
<li>效率低，适合平时简单的工作</li>
</ul>
</li>
<li>执行脚本<ul>
<li>效率高，适合比较复杂繁琐的工作</li>
</ul>
</li>
</ul>
<p>创建100个用户，单纯输入命令需要100次，而使用shell脚本则可以轻松解决</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@web	~]<span class="comment"># cat useradd.sh</span></span><br><span class="line"><span class="meta">#!/usr/bin/bash</span></span><br><span class="line"><span class="comment">#批量创建脚本</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> &#123;1..100&#125;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  useradd	alice-<span class="variable">$i</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"alice-<span class="variable">$i</span>"</span> is create ok..</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>

<h2 id="命令提示符"><a href="#命令提示符" class="headerlink" title="命令提示符"></a>命令提示符</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@roger ~]<span class="comment"># </span></span><br><span class="line">[]：没有任何作用，只是为了分割 </span><br><span class="line">root：当前登录系统的用户 </span><br><span class="line">@：没有任何作用，为了分割用户和主机名 </span><br><span class="line">localhost：当前短格式的主机名 </span><br><span class="line">~：当前所在的工作目录 </span><br><span class="line">~特殊意义：任何系统的用户，都有自己的家目录，当前登录用户的家目录 </span><br><span class="line"></span><br><span class="line">超级管理员用户的家目录是：/root </span><br><span class="line">普通用户的家目录是：/home/用户名 </span><br><span class="line"><span class="comment">#：超级管理员的提示符</span></span><br><span class="line">$：普通用户的提示符</span><br></pre></td></tr></table></figure>

<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20220320213853972.png" alt="image-20220320213853972"></p>
<p>PS1的常用参数以及含义</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">\d ：代表日期，格式为weekday month date，例如：<span class="string">"Mon Aug 1"</span></span><br><span class="line">\H ：完整的主机名称</span><br><span class="line">\h ：仅取主机名中的第一个名字</span><br><span class="line">\t ：显示时间为24小时格式，如：HH：MM：SS</span><br><span class="line">\T ：显示时间为12小时格式</span><br><span class="line">\A ：显示时间为24小时格式：HH：MM</span><br><span class="line">\u ：当前用户的账号名称</span><br><span class="line">\v ：BASH的版本信息</span><br><span class="line">\w ：完整的工作目录名称</span><br><span class="line">\W ：利用basename取得工作目录名称，只显示最后一个目录名</span><br><span class="line">\<span class="comment"># ：下达的第几个命令</span></span><br><span class="line">\$ ：提示字符，如果是root用户，提示符为 <span class="comment"># ，普通用户则为 $</span></span><br><span class="line">　　</span><br><span class="line"><span class="comment">#颜色</span></span><br><span class="line">字体/背景</span><br><span class="line">30  40 黑色</span><br><span class="line">31  41 红色</span><br><span class="line">32  42 绿色</span><br><span class="line">33  43 黄色</span><br><span class="line">34  44 蓝色</span><br><span class="line">35  45 紫红色</span><br><span class="line">36  46 青蓝色</span><br><span class="line">37  47 白色</span><br><span class="line"></span><br><span class="line"><span class="comment">#修改配置文件.bashrc</span></span><br><span class="line">PS1=<span class="string">"\[\e[37;40m\][\[\e[32;40m\]\u\[\e[37;40m\]@\[\e[35;40m\]\h\[\e[0m\] \ [\e[36;40m\]\w\[\e[0m\]]\\$ "</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#修改主机名的命令 </span></span><br><span class="line">hostnamectl <span class="built_in">set</span>-hostname 主机名</span><br><span class="line"></span><br><span class="line">vim /etc/profiel.d/PS1.sh</span><br><span class="line"><span class="function"><span class="title">_set_prompt</span></span> () &#123;</span><br><span class="line">        _last_exit_code=$? <span class="comment"># Must come first!</span></span><br><span class="line">        C_EC=<span class="string">'\[\e[1;37m\]'</span>$(<span class="built_in">printf</span> <span class="string">'%3s'</span> <span class="variable">$&#123;_last_exit_code&#125;</span>)<span class="string">'\[\e[0m\]'</span></span><br><span class="line"> </span><br><span class="line">        <span class="comment">#todo: set encoding to UTF-8 !</span></span><br><span class="line">        FancyX=<span class="string">'\342\234\227'</span>      <span class="comment"># ✗ ✘</span></span><br><span class="line">        Checkmark=<span class="string">'\342\234\223'</span>   <span class="comment"># ✓ ✔</span></span><br><span class="line">        C_Fail=<span class="string">'\[\e[1;31m\]'</span><span class="variable">$&#123;FancyX&#125;</span><span class="string">'\[\e[0m\]'</span></span><br><span class="line">        C_Ok=<span class="string">'\[\e[32m\]'</span><span class="variable">$&#123;Checkmark&#125;</span><span class="string">'\[\e[0m\]'</span></span><br><span class="line">        C_Time=<span class="string">'\[\e[2;37m\]'</span><span class="string">'\t'</span><span class="string">'\[\e[0m\]'</span></span><br><span class="line"> </span><br><span class="line">        C_NormalUser=<span class="string">'\[\e[2;33m\]'</span><span class="string">'\u'</span><span class="string">'\[\e[0m\]'</span></span><br><span class="line">        C_RootUser=<span class="string">'\[\e[1;35m\]'</span><span class="string">'\u'</span><span class="string">'\[\e[0m\]'</span></span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span> [ $(uname -s) == <span class="string">"Darwin"</span> ]; <span class="keyword">then</span></span><br><span class="line">                _ip_addr=$(ipconfig getifaddr $(netstat -nr | awk <span class="string">'&#123; if ($1 ~/default/) &#123; print $6&#125; &#125;'</span>))</span><br><span class="line">        <span class="keyword">elif</span> [ $(uname -s) == <span class="string">"Linux"</span> ]; <span class="keyword">then</span></span><br><span class="line">                <span class="comment"># may print $(NF-2)</span></span><br><span class="line">                <span class="comment">#_ip_addr=$(ip route | awk '/ src / &#123;print $NF&#125;' | head -1 )</span></span><br><span class="line">                _ip_addr=$(ip route | grep -oP <span class="string">'(?&lt;=src )[0-9.]+'</span> | tail -1 )</span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line"> </span><br><span class="line">        C_Host=<span class="string">'\[\e[1;33m\]'</span>$(hostname -A | awk <span class="string">'&#123;print $1&#125;'</span>)<span class="string">'\[\e[0m\]'</span>,<span class="string">'\[\e[4;32m\]'</span><span class="variable">$&#123;_ip_addr:-\h&#125;</span><span class="string">'\[\e[0m\]'</span></span><br><span class="line">        C_Pwd=<span class="string">'\[\e[36m\]'</span><span class="string">'\w'</span><span class="string">'\[\e[0m\]'</span></span><br><span class="line">        C_Marker=<span class="string">'\[\e[1;37m\]'</span><span class="string">'\$'</span><span class="string">'\[\e[0m\]'</span></span><br><span class="line"> </span><br><span class="line">        git diff --<span class="built_in">exit</span>-code --quiet HEAD &gt;/dev/null 2&gt;&amp;1</span><br><span class="line">        _git_diff_exit_code=$?</span><br><span class="line">        <span class="keyword">if</span> [ <span class="variable">$&#123;_git_diff_exit_code&#125;</span> -eq 1 ]; <span class="keyword">then</span></span><br><span class="line">                C_Marker=<span class="string">'\[\e[101m\]'</span>*<span class="string">'\[\e[0m\]'</span><span class="string">" <span class="variable">$&#123;C_Marker&#125;</span>"</span></span><br><span class="line">        <span class="keyword">elif</span> [ <span class="variable">$&#123;_git_diff_exit_code&#125;</span> -eq 0 ]; <span class="keyword">then</span></span><br><span class="line">                C_Marker=<span class="string">'\[\e[102m\]'</span>=<span class="string">'\[\e[0m\]'</span><span class="string">" <span class="variable">$&#123;C_Marker&#125;</span>"</span></span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">        <span class="comment"># Add a bright white exit status for the last command</span></span><br><span class="line">        PS1=<span class="string">"<span class="variable">$C_EC</span> "</span></span><br><span class="line"> </span><br><span class="line">        <span class="comment"># If it was successful, print a green check mark.</span></span><br><span class="line">        <span class="comment"># Otherwise, print a red X.</span></span><br><span class="line">        <span class="keyword">if</span> [[ <span class="variable">$&#123;_last_exit_code&#125;</span> -eq 0 ]]; <span class="keyword">then</span></span><br><span class="line">                PS1+=<span class="string">"<span class="variable">$C_Ok</span> "</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">                PS1+=<span class="string">"<span class="variable">$C_Fail</span> "</span></span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line"> </span><br><span class="line">        <span class="comment"># print HH:ii:ss</span></span><br><span class="line">        PS1+=<span class="string">"<span class="variable">$C_Time</span> "</span></span><br><span class="line"> </span><br><span class="line">        <span class="comment"># If root, just print the host in red. Otherwise,</span></span><br><span class="line">        <span class="comment"># print the current user and host in green.</span></span><br><span class="line">        <span class="keyword">if</span> [[ <span class="variable">$EUID</span> -eq 0 ]]; <span class="keyword">then</span></span><br><span class="line">                PS1+=<span class="string">"<span class="variable">$&#123;C_RootUser&#125;</span>@<span class="variable">$&#123;C_Host&#125;</span>:"</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">                PS1+=<span class="string">"<span class="variable">$&#123;C_NormalUser&#125;</span>@<span class="variable">$&#123;C_Host&#125;</span>:"</span></span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line"> </span><br><span class="line">        <span class="comment"># Print the working directory and prompt marker</span></span><br><span class="line">        PS1+=<span class="string">"<span class="variable">$C_Pwd</span> <span class="variable">$C_Marker</span> "</span></span><br><span class="line">&#125;</span><br><span class="line">PROMPT_COMMAND=<span class="string">'_set_prompt'</span></span><br></pre></td></tr></table></figure>

<h1 id="Bash特性"><a href="#Bash特性" class="headerlink" title="Bash特性"></a>Bash特性</h1><h2 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h2><p>在语法中，中括号是可有可无的意思</p>
<table>
<thead>
<tr>
<th align="center">命令</th>
<th align="center">选项</th>
<th align="center">参数</th>
</tr>
</thead>
<tbody><tr>
<td align="center">command</td>
<td align="center">[options]</td>
<td align="center">[arguments]</td>
</tr>
</tbody></table>
<p>查看目录<code>ls</code></p>
<table>
<thead>
<tr>
<th align="center">选项</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">-l</td>
<td align="center">长格式显示详细信息</td>
</tr>
<tr>
<td align="center">-a</td>
<td align="center">显示所有文件，包括隐藏文件</td>
</tr>
<tr>
<td align="center">-d</td>
<td align="center">当遇到目录时列出目录本身而非目录内的文件</td>
</tr>
<tr>
<td align="center">-h</td>
<td align="center">显示文件大小，KB</td>
</tr>
<tr>
<td align="center">-i</td>
<td align="center">查看该文件的inode号</td>
</tr>
<tr>
<td align="center">-F</td>
<td align="center">在条目中追加指示符’/‘</td>
</tr>
</tbody></table>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#语法</span></span><br><span class="line">ls [options] [文件名]</span><br><span class="line"></span><br><span class="line"><span class="comment">#示例</span></span><br><span class="line">[root@web ~]<span class="comment"># ls               //命令</span></span><br><span class="line">[root@web ~]<span class="comment"># ls -l            //命令+选项</span></span><br><span class="line">[root@web ~]<span class="comment"># ls -l /home/     //命令+选项+参数</span></span><br><span class="line"><span class="comment">#命令：整条shell命令的主体</span></span><br><span class="line"><span class="comment">#选项：用于调节命令的具体功能</span></span><br><span class="line">	- 以<span class="string">'-'</span>引导段个事选项（单个字符），例如”-a“</span><br><span class="line">	- 以<span class="string">'--'</span>引导长格式选项（多个字符），例如”--all“</span><br><span class="line">	- 多个短格式选项可以卸载一起，只用一个”-“引导，例如”-la“</span><br><span class="line"><span class="comment">#参数：命令操作的对象，如文件、目录名等</span></span><br><span class="line"></span><br><span class="line">ps:命令必须开头，选项和参数位置可以发生变化</span><br><span class="line">   命令、选项、参数需要有空格隔开</span><br></pre></td></tr></table></figure>

<h2 id="命令补全"><a href="#命令补全" class="headerlink" title="命令补全"></a>命令补全</h2><p>当使用windows查找一个目录层级特别多的文件时，打开的效率会非常的慢，但如果使用linux查找一个目录层级特别多的文件时，可以通过tab键快速补全</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查看本机IP，忘记了具体命令</span></span><br><span class="line">[root@web ~]<span class="comment"># ifc</span></span><br><span class="line">ifcfg     ifconfig</span><br><span class="line"><span class="comment">#按下tab键会自动补全</span></span><br><span class="line">[root@web ~]<span class="comment"># ifconfig</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#按一下tab没有反应，那么需要按两下tab键，列出所有if开头的命令</span></span><br><span class="line">[root@db04 ~]<span class="comment"># if</span></span><br><span class="line"><span class="keyword">if</span>		ifcfg      ifconfig   ifdown     ifenslave  ifnames    ifrename   iftop     ifup</span><br><span class="line"> </span><br><span class="line"><span class="comment">#Linux目录比较深，经常会使用tab键进行补全，如果路径出错是没有办法补全的</span></span><br><span class="line">[root@web ~]<span class="comment"># ls /etc/sysconfig/network-scripts/ifcfg-eth0</span></span><br><span class="line">/etc/sysconfig/network-scripts/ifcfg-eth0</span><br></pre></td></tr></table></figure>

<p>如果无法补全选项，那么需要安装一个扩展包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@db04 ~]<span class="comment"># yum install -y bash-completion</span></span><br></pre></td></tr></table></figure>

<h2 id="帮助文档"><a href="#帮助文档" class="headerlink" title="帮助文档"></a>帮助文档</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#获取ls命令的帮助</span></span><br><span class="line">[root@web ~]<span class="comment"># ls --help</span></span><br><span class="line">用法：ls [选项]... [文件]...</span><br><span class="line"></span><br><span class="line">[root@db04 ~]<span class="comment"># man ls</span></span><br></pre></td></tr></table></figure>

<p><a href="http://linux.51yip.com/" target="_blank" rel="noopener"><strong>Linux命令手册</strong></a></p>
<h2 id="命令快捷键"><a href="#命令快捷键" class="headerlink" title="命令快捷键"></a>命令快捷键</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Ctrl + a    <span class="comment">#光标跳转至正在输入的命令行的首部</span></span><br><span class="line">Ctrl + e    <span class="comment">#光标跳转至正在输入的命令行的尾部</span></span><br><span class="line">Ctrl + w    <span class="comment">#按照空格来删除bash内容</span></span><br><span class="line">Ctrl + c    <span class="comment">#终止前台运行的程序</span></span><br><span class="line">Ctrl + d    <span class="comment">#在shell中，ctrl-d表示退出当前shell。（logout、exit）</span></span><br><span class="line">Ctrl + z    <span class="comment">#将任务暂停，挂至后台</span></span><br><span class="line">Ctrl + l    <span class="comment">#清屏，和clear命令等效。</span></span><br><span class="line">Ctrl + k    <span class="comment">#删除从光标到行末的所有字符</span></span><br><span class="line">Ctrl + u    <span class="comment">#删除从光标到行首的所有字符</span></span><br><span class="line">Ctrl + r    <span class="comment">#搜索历史命令, 利用关键字</span></span><br><span class="line">Ctrl + 左右  <span class="comment">#按照单词快速跳转光标（Xshell提供的）</span></span><br><span class="line">ESC  + .    <span class="comment">#获取最后的指令</span></span><br><span class="line"></span><br><span class="line">ps:在命令行前加面加 <span class="string">"#"</span> 则该命令不会被执行</span><br></pre></td></tr></table></figure>

<h2 id="历史命令"><a href="#历史命令" class="headerlink" title="历史命令"></a>历史命令</h2><p>历史命令的作用：追溯之前的发生情况，在企业中，十分重要，涉及到运维的责任，记录历史命令对于运维人员来说，也有一个专业名词：审计</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">history </span><br><span class="line">-c：clear 清除历史命令 </span><br><span class="line">-d：delete 删除指定编号的历史命令 </span><br><span class="line">-w：write 保存历史命令到一个文件中（将历史命令保存到家目录下的.bash_history 隐藏文件中）</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看最后10条历史记录</span></span><br><span class="line">[root@web ~]<span class="comment"># history 10</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#清空历史记录</span></span><br><span class="line">[root@db04 ~]<span class="comment"># history -c</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#指定一条历史记录删除</span></span><br><span class="line">[root@web ~]<span class="comment"># history -d 110</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#保存历史命令</span></span><br><span class="line">[root@web ~]<span class="comment"># history -w</span></span><br><span class="line">/root/.bash_history</span><br><span class="line"> </span><br><span class="line">!+命令的一部分：执行上一条，含有该命令一部分的命令内容 （常用） </span><br><span class="line">!!：执行上一条命令 </span><br><span class="line">!+数字：执行历史命令中编号所在命令内容</span><br><span class="line"></span><br><span class="line"><span class="comment">#执行上一条命令</span></span><br><span class="line">[root@web ~]<span class="comment"># !!</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#执行上一条ls相关命令</span></span><br><span class="line">[root@web ~]<span class="comment"># !ls</span></span><br><span class="line">ls /etc/sysconfig/network-scripts/ifcfg-eth0</span><br><span class="line">/etc/sysconfig/network-scripts/ifcfg-eth0</span><br><span class="line"> </span><br><span class="line"><span class="comment">#执行历史命令中的第74条命令</span></span><br><span class="line">[root@db04 ~]<span class="comment"># !74</span></span><br></pre></td></tr></table></figure>

<h2 id="命令的别名"><a href="#命令的别名" class="headerlink" title="命令的别名"></a>命令的别名</h2><p>命令别名将用户经常使用的复杂命令简单化，创建属于自己的命令别名</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#设置别名 </span></span><br><span class="line">alias 别名=<span class="string">"完整的命令"</span></span><br><span class="line">[root@web ~]<span class="comment"># alias wk='ifconfig'</span></span><br><span class="line">[root@web ~]<span class="comment"># wk</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#取消别名 </span></span><br><span class="line">unalias 别名</span><br><span class="line">[root@web ~]<span class="comment"># unalias ifconfig</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#永久生效 /root/.bashrc</span></span><br><span class="line">[root@web ~]<span class="comment"># echo "alias ifconfig='ifconfig eth0'" &gt;&gt; /root/.bashrc</span></span><br></pre></td></tr></table></figure>

<h2 id="‘-‘与”-“"><a href="#‘-‘与”-“" class="headerlink" title="‘ ‘与” “"></a>‘ ‘与” “</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="string">' '</span>：所见即所得</span><br><span class="line"><span class="string">" "</span>：涉及变量</span><br><span class="line"></span><br><span class="line">[root@client ~]<span class="comment"># name='roger'</span></span><br><span class="line">[root@client ~]<span class="comment"># echo '$name'</span></span><br><span class="line"><span class="variable">$name</span></span><br><span class="line">[root@client ~]<span class="comment"># echo "$name"</span></span><br><span class="line">roger</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>SRE</category>
      </categories>
      <tags>
        <tag>Linux基础</tag>
      </tags>
  </entry>
  <entry>
    <title>[虚拟化环境]</title>
    <url>/2019/03/01/%E8%99%9A%E6%8B%9F%E5%8C%96%E7%8E%AF%E5%A2%83/</url>
    <content><![CDATA[<h1 id="虚拟机的创建"><a href="#虚拟机的创建" class="headerlink" title="虚拟机的创建"></a>虚拟机的创建</h1><p>新建虚拟机</p>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20220327234018941.png" alt="image-20220327234018941"></p>
<ul>
<li><p>典型（推荐）</p>
</li>
<li><p>自定义</p>
</li>
</ul>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20220318231302176.png" alt="image-20220318231302176"></p>
<ul>
<li><p>安装程序光盘</p>
</li>
<li><p>安装程序光盘映像文件</p>
</li>
<li><p>稍后安装操作系统（推荐）</p>
</li>
</ul>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20220318231421915.png" alt="image-20220318231421915"></p>
<ul>
<li><p>Linux</p>
</li>
<li><p>CentOS 7 64位（CentOS 64位）</p>
</li>
</ul>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20220318231701504.png" alt="image-20220318231701504"></p>
<ul>
<li><p>命名虚拟机</p>
</li>
<li><p>保存虚拟机位置</p>
</li>
</ul>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20220318231838942.png" alt="image-20220318231838942"></p>
<ul>
<li>磁盘容量：20G</li>
</ul>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20220318231920872.png" alt="image-20220318231920872"></p>
<ul>
<li>完成</li>
</ul>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20220318232005796.png" alt="image-20220318232005796"></p>
<h1 id="CentOS安装"><a href="#CentOS安装" class="headerlink" title="CentOS安装"></a>CentOS安装</h1><p>打开CD/DVD光驱 -&gt; 使用ISO映像文件 -&gt; 浏览（找到iso文件位置）-&gt; 勾选”启动时连接”</p>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20220318232308150.png" alt="image-20220318232308150"></p>
<p>开启虚拟机</p>
<p>呼出鼠标：Ctrl + Alt</p>
<ul>
<li><p><font color="red">Install CentOS 7 安装CentOS7系统 (推荐)</font></p>
</li>
<li><p>Test this media &amp; install CentOS 7 先测试镜像，然后再安装CentOS7</p>
</li>
<li><p>救援模式（修复系统，忘记密码，修改密码）</p>
</li>
</ul>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20220318232455160.png" alt="image-20220318232455160"></p>
<p>选择英文-&gt; continue</p>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20220318232552218.png" alt="image-20220318232552218"></p>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20220318232702066.png" alt="image-20220318232702066"></p>
<p>设置时区 DATE &amp; TIME：Asia Shanghai</p>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20220318232643123.png" alt="image-20220318232643123"></p>
<p>关闭KDUMP功能</p>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20220318232737541.png" alt="image-20220318232737541"></p>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20220318232751920.png" alt="image-20220318232751920"></p>
<p>磁盘分区</p>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20220318232813349.png" alt="image-20220318232813349"></p>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20220318232949907.png" alt="image-20220318232949907"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/：根分区 </span><br><span class="line">/boot：系统启动文件存放分区 500M </span><br><span class="line">swap：虚拟内存分区 1024M 真实内存的1~2倍 最高8G</span><br></pre></td></tr></table></figure>

<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20220318233029577.png" alt="image-20220318233029577"></p>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20220318233052284.png" alt="image-20220318233052284"></p>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20220318233115380.png" alt="image-20220318233115380"></p>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20220318233129826.png" alt="image-20220318233129826"></p>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20220318233146258.png" alt="image-20220318233146258"></p>
<p>网络配置</p>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20220318233203911.png" alt="image-20220318233203911"></p>
<ul>
<li><p>DHCP：动态获取IP地址，地址有租期，租期到了，会更改IP</p>
</li>
<li><p>Address：IP地址（计算机之间进行通信的手机号）</p>
</li>
<li><p>NetMask：子网掩码，划分网段，区分网段，决定计算机之间的网络是否可以正常通信</p>
</li>
<li><p>DNS：域名解析服务器</p>
</li>
</ul>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20220318233247528.png" alt="image-20220318233247528"></p>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20220318233444931.png" alt="image-20220318233444931"></p>
<p>设置密码</p>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20220318233512767.png" alt="image-20220318233512767"></p>
<h1 id="虚拟机网络"><a href="#虚拟机网络" class="headerlink" title="虚拟机网络"></a>虚拟机网络</h1><h2 id="网卡配置"><a href="#网卡配置" class="headerlink" title="网卡配置"></a>网卡配置</h2><p>静态<code>IP</code>，不使用<code>DHCP</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">静态IP，不使用DHCP</span><br><span class="line"><span class="comment">#IP地址</span></span><br><span class="line">Address：10.0.0.100</span><br><span class="line"><span class="comment">#子网掩码</span></span><br><span class="line">Netmask：255.255.255.0（24位）</span><br><span class="line"><span class="comment">#网关</span></span><br><span class="line">Gateway：10.0.0.2</span><br></pre></td></tr></table></figure>

<h2 id="虚拟机网络模式"><a href="#虚拟机网络模式" class="headerlink" title="虚拟机网络模式"></a>虚拟机网络模式</h2><ul>
<li><p>桥接模式</p>
<ul>
<li>物理机网络与虚拟机网络共享</li>
<li>物理机与虚拟机需要在同一个网段</li>
<li>可用地址0-255（除0、1、2：网关、255）</li>
<li>耗费IP（IP不能冲突）</li>
</ul>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20220320211342799.png" alt="image-20220320211342799"></p>
</li>
<li><p>NAT模式</p>
<ul>
<li>路由器将一个公有地址转换为多个私有地址（NAT动态网络地址转换）</li>
<li><code>DHCP</code>：动态获取<code>IP</code>地址</li>
</ul>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20220320211622639.png" alt="image-20220320211622639"></p>
</li>
<li><p>仅主机模式</p>
<ul>
<li>虚拟机之间相互通信，无法上外网（局域网）</li>
</ul>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20220320211651398.png" alt="image-20220320211651398"></p>
</li>
</ul>
<p>虚拟机配置NAT上网</p>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20220320204811328.png" alt="image-20220320204811328"></p>
<p>打开虚拟网络编辑器</p>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20220320204841949.png" alt="image-20220320204841949"></p>
<p>检测服务器与外网是否可以正常通信</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ping 命令（打电话） </span><br><span class="line">ping www.baidu.com</span><br></pre></td></tr></table></figure>

<h1 id="Xshell的使用"><a href="#Xshell的使用" class="headerlink" title="Xshell的使用"></a>Xshell的使用</h1><ul>
<li>新建会话</li>
</ul>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20220320212813333.png" alt="image-20220320212813333"></p>
<ul>
<li>设置会话属性</li>
</ul>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20220320212929548.png" alt="image-20220320212929548"></p>
<ul>
<li>用户身份验证</li>
</ul>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20220320213002275.png" alt="image-20220320213002275"></p>
<ul>
<li>连接虚拟机</li>
</ul>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20220320213027809.png" alt="image-20220320213027809"></p>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20220320213043806.png" alt="image-20220320213043806"></p>
<h2 id="Xshell连接虚拟机排错方案"><a href="#Xshell连接虚拟机排错方案" class="headerlink" title="Xshell连接虚拟机排错方案"></a>Xshell连接虚拟机排错方案</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1.搞清楚，谁连接谁 </span></span><br><span class="line"></span><br><span class="line">检测物理机跟虚拟机之间是否能通信 </span><br><span class="line">windows + r </span><br><span class="line">ping <span class="number">10.0</span><span class="number">.0</span><span class="number">.100</span>（虚拟机的IP） </span><br><span class="line"></span><br><span class="line"><span class="comment">#2.如何查看自己本机的IP地址 </span></span><br><span class="line">Linux：ip a </span><br><span class="line">windows：ipconfig</span><br></pre></td></tr></table></figure>

<h1 id="虚拟机的快照"><a href="#虚拟机的快照" class="headerlink" title="虚拟机的快照"></a>虚拟机的快照</h1><p>记录虚拟机某时刻的状态，随时可以还原到记录的状态（存档，读档）</p>
<p>注意：快照尽量在关机状态下拍摄</p>
<h1 id="虚拟机的克隆"><a href="#虚拟机的克隆" class="headerlink" title="虚拟机的克隆"></a>虚拟机的克隆</h1><p>克隆的前提条件：必须在虚拟机关机状态下，才能克隆</p>
<h3 id="克隆的两种方式"><a href="#克隆的两种方式" class="headerlink" title="克隆的两种方式"></a>克隆的两种方式</h3><ul>
<li><p>克隆当前虚拟机状态</p>
</li>
<li><p>从快 照状态克隆</p>
</li>
</ul>
<h3 id="克隆类型"><a href="#克隆类型" class="headerlink" title="克隆类型"></a>克隆类型</h3><p>创建链接克隆</p>
<ul>
<li><p>优点：</p>
<ul>
<li>克隆速度快</li>
<li>占用资源少</li>
</ul>
</li>
<li><p>缺点：</p>
<ul>
<li>受到母体的影响（如果源主机被删除，则克隆主机无法使用）</li>
</ul>
</li>
</ul>
<p>创建完整克隆</p>
<ul>
<li><p>优点：</p>
<ul>
<li>不受到母体的影响（源主机被删除，克隆机可以继续使用）</li>
</ul>
</li>
<li><p>缺点：</p>
<ul>
<li>克隆速度慢</li>
<li>占用资源多</li>
</ul>
</li>
</ul>
<p><strong>注意：</strong>克隆出来的虚拟机和源主机，配置一模一样，要修改<code>IP</code>，并且，只能一台一台启动</p>
<h1 id="GUI图形化"><a href="#GUI图形化" class="headerlink" title="GUI图形化"></a>GUI图形化</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#修改网卡配置文件 </span></span><br><span class="line">nmtui</span><br><span class="line"></span><br><span class="line"><span class="comment">#重启网卡 </span></span><br><span class="line">systemctl restart network</span><br><span class="line"></span><br><span class="line">ps：改完IP需重启Xshell</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>SRE</category>
      </categories>
      <tags>
        <tag>Linux基础</tag>
      </tags>
  </entry>
  <entry>
    <title>[计算机组成原理]</title>
    <url>/2019/03/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<h1 id="计算机组成原理"><a href="#计算机组成原理" class="headerlink" title="计算机组成原理"></a>计算机组成原理</h1><h2 id="什么是计算机"><a href="#什么是计算机" class="headerlink" title="什么是计算机"></a>什么是计算机</h2><ul>
<li>计算机也称为”电脑”<ul>
<li>电脑二字蕴含了人类对计算机的终极期望</li>
<li>希望它能像人脑一样工作，取代人力并解放人力</li>
</ul>
</li>
</ul>
<h2 id="为什么有计算机"><a href="#为什么有计算机" class="headerlink" title="为什么有计算机"></a>为什么有计算机</h2><ul>
<li>为什么要有计算机，或者人类为什么要造计算机<ul>
<li>为了执行人类的程序，从而将人力解放</li>
<li>所以在造计算机的时候把它的每一部分都设计的像人类一样</li>
</ul>
</li>
</ul>
<h2 id="计算机五大组成部分"><a href="#计算机五大组成部分" class="headerlink" title="计算机五大组成部分"></a>计算机五大组成部分</h2><p>计算机有五大组件组成，可以八计算机的五大组件比喻成人类器官</p>
<ul>
<li>控制器</li>
<li>运算器</li>
<li>存储器</li>
<li>输入设备</li>
<li>输出设备</li>
</ul>
<h3 id="CPU"><a href="#CPU" class="headerlink" title="CPU"></a>CPU</h3><ul>
<li>控制器<ul>
<li>作用：计算机的指挥系统，主要负责控制计算机其他所有组件如何工作</li>
<li>例如：控制行为、动作</li>
<li>类比：人类大脑</li>
</ul>
</li>
<li>运算器<ul>
<li>作用：主要包含数学运算、逻辑运算</li>
<li>例如：1+1=逻辑运算</li>
<li>类比：人类大脑</li>
</ul>
</li>
</ul>
<h3 id="内存-硬盘"><a href="#内存-硬盘" class="headerlink" title="内存/硬盘"></a>内存/硬盘</h3><ul>
<li>存储器I/O<ul>
<li>作用：负责程序数据的存取</li>
<li>分类<ul>
<li>内存：内存基于电工作，通电就可以存储数据<ul>
<li>优点：存取数据快</li>
<li>缺点：断电数据会丢失，仅能临时存储数据</li>
</ul>
</li>
<li>外存：外置硬盘，基于磁工作<ul>
<li>优点：断电数据不会丢失，永久保存数据</li>
<li>缺点：存取速度慢</li>
</ul>
</li>
</ul>
</li>
<li>类比：<ul>
<li>内存：大脑的记忆功能（快、短期记忆）</li>
<li>硬盘：随身携带的记事本（慢、长期记忆）</li>
</ul>
</li>
<li>如果程序的数据要快存快取<ul>
<li>第一步：将应用程序存储至硬盘中，如果不用则存储下来即可</li>
<li>第二步：如果需要使用改程序，一定需要将硬盘的数据加载到内存中</li>
<li>第三步：最后CPU读取内存中的指令，进行分析和处理；从而保证程序的执行速度</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="输入设备"><a href="#输入设备" class="headerlink" title="输入设备"></a>输入设备</h3><ul>
<li>输入设备Input<ul>
<li>作用：往计算机里输入内容</li>
<li>例如：看到的、听到的</li>
<li>类比：人类眼睛、耳朵</li>
</ul>
</li>
</ul>
<h3 id="输出设备"><a href="#输出设备" class="headerlink" title="输出设备"></a>输出设备</h3><ul>
<li>输出设备Output<ul>
<li>作用：计算机向外输出数据的工具</li>
<li>例如：说的话、发布的文章</li>
<li>类比：人类嘴巴、写字</li>
</ul>
</li>
</ul>
<h2 id="计算机三大核心硬件"><a href="#计算机三大核心硬件" class="headerlink" title="计算机三大核心硬件"></a>计算机三大核心硬件</h2><p>将五搭组成进步提炼出其中的三大核心硬件（CPU、内存、磁盘），一个程序的运行与三大核心有着密切关系</p>
<ul>
<li>控制指令<ul>
<li>计算机所有组件都受CPU控制</li>
</ul>
</li>
<li>任务反复运行<ul>
<li>内存只能短暂记忆数据，断电后数据消失</li>
<li>编写好的程序或软件必须存储在硬盘上</li>
</ul>
</li>
<li>运行速度<ul>
<li>CPU速度远高于硬盘，每次都从硬盘中读取一条数据处理会浪费大量世界</li>
<li>我们会将数据存储在硬盘，将数据加载到内存中，再由CPU从内存中读取指令运行</li>
</ul>
</li>
</ul>
<h2 id="操作系统基本概念"><a href="#操作系统基本概念" class="headerlink" title="操作系统基本概念"></a>操作系统基本概念</h2><h3 id="操作系统的由来"><a href="#操作系统的由来" class="headerlink" title="操作系统的由来"></a>操作系统的由来</h3><ul>
<li>需求<ul>
<li>开发一个编辑工具，该软件的一个核心业务就是文本编辑，编辑内容就牵扯到要操作计算机硬件</li>
</ul>
</li>
<li>问题<ul>
<li>我们编写软件，最终目的是为了控制硬件</li>
<li>计算机不可能自行运行，所有的硬件运行都需要软件进行支配</li>
</ul>
</li>
<li>实现<ul>
<li>必须先开发一个”控制系统”来控制计算机的硬件基本运行</li>
<li>然后再开发编辑工具的业务功能，但凡设计到操作硬件，则调用控制系统</li>
<li>最后由控制系统来控制计算机硬件进行运行</li>
</ul>
</li>
</ul>
<h3 id="什么是操作系统"><a href="#什么是操作系统" class="headerlink" title="什么是操作系统"></a>什么是操作系统</h3><p>操作系统<code>Operation System，简称OS</code></p>
<ul>
<li>操作系统是”应用软件”与”硬件”之间的桥梁</li>
<li>同时也协调、管理”控制计算机硬件资源”、”应用软件资源”的一个控制程序</li>
</ul>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20220318171442000.png" alt="image-20220318171442000"></p>
<h3 id="为什么需要操作系统"><a href="#为什么需要操作系统" class="headerlink" title="为什么需要操作系统"></a>为什么需要操作系统</h3><ul>
<li>控制计算机的基本运行</li>
<li>将硬件的复杂操作简单化，供上层应用程序使用</li>
<li>为用户与计算机硬件之间提供”图形/命令行”工具</li>
</ul>
]]></content>
      <categories>
        <category>SRE</category>
      </categories>
      <tags>
        <tag>Linux基础</tag>
      </tags>
  </entry>
  <entry>
    <title>[进程管理]</title>
    <url>/2019/03/12/%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<h1 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h1><h2 id="进程概述"><a href="#进程概述" class="headerlink" title="进程概述"></a>进程概述</h2><blockquote>
<p><strong>什么是程序和进程？</strong></p>
<p>程序是一组代码和数据的集合，静态概念，永久存放在系统中</p>
<p>进程是一个正在运行的程序，动态概念，存在生命周期，无法永久存放在系统中</p>
</blockquote>
<p><strong>进程的生命周期</strong></p>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_devops/15630725498256.jpg" alt="15630725498256"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1.用户发起请求 </span><br><span class="line">2.父进程会fork出子进程，子进程会继承父进程大部分的属性，如：文件描述符等，处理任务 </span><br><span class="line">3.子进程在处理任务的过程中，父进程是一个<span class="built_in">wait</span>状态，等待子进程 </span><br><span class="line">4.正常结束 </span><br><span class="line">5.非正常结束 </span><br><span class="line">	- 僵尸进程 </span><br><span class="line">	- 孤儿进程</span><br></pre></td></tr></table></figure>

<p><strong>僵尸进程</strong>：子进程处理完任务后，父进程正在繁忙，无法及时回收子进程的资源</p>
<p><strong>孤儿进程</strong>：子进程处理完任务后，父进程因某些原因倍终止（父进程完成自己的任务，或者认为kill），孤儿进程会被<code>PID</code>为1的进程回收</p>
<h2 id="监控进程的状态"><a href="#监控进程的状态" class="headerlink" title="监控进程的状态"></a>监控进程的状态</h2><h3 id="进程状态管理命令-ps"><a href="#进程状态管理命令-ps" class="headerlink" title="进程状态管理命令-ps"></a>进程状态管理命令-<code>ps</code></h3><table>
<thead>
<tr>
<th align="center">选项</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">a</td>
<td align="center">查看所有与终端相关的进程，由终端发起的进程</td>
</tr>
<tr>
<td align="center">u</td>
<td align="center">显示进程的管理用户</td>
</tr>
<tr>
<td align="center">x</td>
<td align="center">查看所有与终端无关的进程</td>
</tr>
</tbody></table>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#语法</span></span><br><span class="line">ps [options] [argments]</span><br><span class="line"></span><br><span class="line"><span class="comment">#常用选项组合 </span></span><br><span class="line">[root@localhost ~]<span class="comment"># ps -ef </span></span><br><span class="line">[root@localhost ~]<span class="comment"># ps aux</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#示例</span></span><br><span class="line">[root@localhost ~]<span class="comment"># ps -au</span></span><br><span class="line">USER        PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND</span><br><span class="line">root       6140  0.0  0.0 110092   856 tty1     Ss+  08:51   0:00 /sbin/agetty --noclear tty1 linux</span><br><span class="line">root       8002  0.0  0.2 115440  2020 pts/0    Ss   15:09   0:00 -bash</span><br><span class="line">root       8044  0.0  0.1 155360  1884 pts/0    R+   16:01   0:00 ps -au</span><br><span class="line"></span><br><span class="line">[root@localhost ~]<span class="comment"># ps aux|grep nginx</span></span><br><span class="line">USER PID %CPU %MEM VSZ RSS TTY STAT START TIME COMMAND</span><br><span class="line">root 8393 0.0 0.0 39308 940 ? Ss 09:41 0:00 nginx: master process nginx</span><br><span class="line"></span><br><span class="line">USER：该进程的管理用户 </span><br><span class="line">PID：进程号 </span><br><span class="line">%CPU：该进程占用CPU的百分比 </span><br><span class="line">%MEM：该进程占用内存的百分比 </span><br><span class="line">VSZ：该进程占用虚拟内存的大小 </span><br><span class="line">RSS：该进程占用物理内存的大小</span><br><span class="line">TTY</span><br><span class="line">	-？：由内核发起的进程</span><br><span class="line">	-tty：机器上的终端进程</span><br><span class="line">	-pts/N：远程连接工具的终端进程</span><br><span class="line">STAT：进程运行的状态</span><br><span class="line">	-D：无法中断的休眠状态（通IO的进程）*****</span><br><span class="line">	-R：正在运行的状态 *****</span><br><span class="line">	-S：处于休眠状态的进程 *****</span><br><span class="line">	-T：暂停或者被追踪的状态</span><br><span class="line">	-W：进入交换内存的进程（swap，centos7见不到）</span><br><span class="line">	-X：死掉的进程（少见）</span><br><span class="line">	-Z：僵尸进程 *****</span><br><span class="line">	-&lt;：优先级高的进程</span><br><span class="line">	-N：优先级低的进程</span><br><span class="line">	-L：有些数据页被锁进内存的进程</span><br><span class="line">	-s：父进程，在它下面有子进程</span><br><span class="line">	-l：以线程的方式运行</span><br><span class="line">	-|：存在多进程的进程</span><br><span class="line">	-+：在前台运行 *****</span><br><span class="line">START：进程开启的时间 </span><br><span class="line">TIME：该进程占用CPU的时间</span><br><span class="line">COMMAND：进程的名字或者进程的命令 </span><br><span class="line">	-[]：内核态进程 </span><br><span class="line">	-没[]：用户态进程</span><br><span class="line">	</span><br><span class="line"><span class="comment">#如果后台有被暂停的进程，查看所有被暂停的进程 </span></span><br><span class="line">[root@localhost ~]<span class="comment"># jobs </span></span><br><span class="line">[1]- Stopped vim 1.txt </span><br><span class="line">[2]+ Stopped ping baidu.com</span><br><span class="line"></span><br><span class="line">[root@localhost ~]<span class="comment"># fg 2</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">bg</span>：让暂停的进程运行起来，后面加数字，就可以运行第几个被暂停的进程（默认是最后一个） </span><br><span class="line"><span class="built_in">fg</span>：是把后台暂停的进程，调到前台运行，后面加数字，可以将第N个进程调到前台运行（默认是最后一个）</span><br></pre></td></tr></table></figure>

<p><code>ps</code>命令用法 </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1.根据%CPU进行排序 </span></span><br><span class="line">[root@localhost ~]<span class="comment"># ps aux|sort -k 3 </span></span><br><span class="line">[root@localhost ~]<span class="comment"># ps aux --sort %cpu </span></span><br><span class="line">[root@localhost ~]<span class="comment"># ps aux --sort %mem</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#2.自定义显示字段 </span></span><br><span class="line">o：自定义显示字段</span><br><span class="line">[root@localhost ~]<span class="comment"># ps axo pid,%cpu,command,user</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#3.显示子进程 </span></span><br><span class="line">f：查看子进程和父进程的关系 </span><br><span class="line">[root@localhost ~]<span class="comment"># ps auxf|grep nginx</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#4.查看指定进程的pid </span></span><br><span class="line">[root@localhost ~]<span class="comment"># ps aux|grep [n]ginx </span></span><br><span class="line">[root@localhost ~]<span class="comment"># pgrep nginx</span></span><br><span class="line">9319 </span><br><span class="line">9453</span><br><span class="line">[root@localhost ~]<span class="comment"># pgrep nginx | xargs kill</span></span><br><span class="line"></span><br><span class="line">-l：显示该进程的启动命令 </span><br><span class="line">-a：显示该进程的完整描述信息</span><br><span class="line"></span><br><span class="line">[root@localhost ~]<span class="comment"># pidof nginx </span></span><br><span class="line">9453 9319</span><br><span class="line"></span><br><span class="line"><span class="comment">#5.查看父进程子进程</span></span><br><span class="line">[root@localhost ~]<span class="comment"># pstree</span></span><br></pre></td></tr></table></figure>

<h3 id="进程动态管理命令-top"><a href="#进程动态管理命令-top" class="headerlink" title="进程动态管理命令-top"></a>进程动态管理命令-<code>top</code></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@web01 ~]<span class="comment"># top</span></span><br><span class="line"><span class="comment">#第一行：系统相关</span></span><br><span class="line">top - 10:42:55 up 6 days, 7:03, 3 users, load average: 0.01, 0.02, 0.05</span><br><span class="line"></span><br><span class="line">top：命令 </span><br><span class="line">10:42:55：当前系统时间 </span><br><span class="line">up 6 days, 7:03,：该服务器，运行的时间 </span><br><span class="line">3 users,：当前登录的用户数量 </span><br><span class="line">load average: 0.01, 0.02, 0.05：系统的平均负载 </span><br><span class="line">0.01：1分钟 </span><br><span class="line">0.02：5分钟 </span><br><span class="line">0.05：15分钟</span><br><span class="line"></span><br><span class="line"><span class="comment">#第二行：进程状态 </span></span><br><span class="line">Tasks: 102 total, 1 running, 101 sleeping, 0 stopped, 0 zombie</span><br><span class="line">102 total：当前系统中所有的进程数量 </span><br><span class="line">1 running：处于R状态，正在运行状态的进程数 </span><br><span class="line">101 sleeping：处于S状态，sleep状态的进程数 </span><br><span class="line">0 stopped：处于T状态，后台挂起暂停状态的进程数 </span><br><span class="line">0 zombie：处于Z状态，僵尸进程的进程数量</span><br><span class="line"></span><br><span class="line"><span class="comment">#第三行：CPU百分比</span></span><br><span class="line">%Cpu(s): 0.3 us, 0.3 sy, 0.0 ni, 99.3 id, 0.0 wa, 0.0 hi, 0.0 si, 0.0 st</span><br><span class="line">us：用户进程占用cpu的百分比（用户态） *****</span><br><span class="line">sy：系统进程占用cpu的百分比（内核态）*****</span><br><span class="line">id：cpu的空闲程度 *****</span><br><span class="line">ni：优先级较高的进程占用cpu的百分比 </span><br><span class="line">wa：等待状态的进程占用cpu的百分比 </span><br><span class="line">hi：硬中断占用cpu的百分比 </span><br><span class="line">si：软中断占用cpu的百分比</span><br><span class="line">st：虚拟化技术占用cpu的百分比</span><br><span class="line"></span><br><span class="line"><span class="comment">#第四行：物理内存 </span></span><br><span class="line">KiB Mem : 995896 total, 191948 free, 98740 used, 705208 buff/cache</span><br><span class="line">995896 total：总内存数</span><br><span class="line">191948 free：空闲内存数</span><br><span class="line">98740 used：已使用的内存数</span><br><span class="line">705208 buff/cache：buffer缓冲区/缓存区</span><br><span class="line"></span><br><span class="line">可用内存：free + buff/cache</span><br><span class="line"></span><br><span class="line"><span class="comment">#第五行：Swap虚拟内存 </span></span><br><span class="line">KiB Swap: 1048572 total, 1048572 free, 0 used. 687216 avail Mem</span><br><span class="line">1048572 total：总共的虚拟内存数 </span><br><span class="line">1048572 free：空闲的虚拟内存数 </span><br><span class="line">0 used：已使用的虚拟内存数 </span><br><span class="line">687216 avail Mem：可用的虚拟内存数</span><br></pre></td></tr></table></figure>

<p><code>top</code>命令用法</p>
<table>
<thead>
<tr>
<th align="center">选项</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">-d</td>
<td align="center">指定更新的时间（默认是<code>3s</code>更新一次）</td>
</tr>
<tr>
<td align="center">-p</td>
<td align="center">只查看指定<code>PID</code>的进程</td>
</tr>
<tr>
<td align="center">-u</td>
<td align="center">指定相关用户</td>
</tr>
<tr>
<td align="center">-b</td>
<td align="center">将top内容保存到文件中</td>
</tr>
<tr>
<td align="center">-n</td>
<td align="center">指定次数</td>
</tr>
</tbody></table>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#语法</span></span><br><span class="line">top [options] [PID] </span><br><span class="line"></span><br><span class="line"><span class="comment">#示例</span></span><br><span class="line">[root@web01 ~]<span class="comment"># top -d 1 -p 10126</span></span><br><span class="line">[root@web01 ~]<span class="comment"># top -d 1 -u apache</span></span><br><span class="line">[root@web01 ~]<span class="comment"># top -d 1 -b -n 2 &gt; top.txt</span></span><br></pre></td></tr></table></figure>

<p><code>top</code>常见指令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">h 查看帮出 </span><br><span class="line">z 高亮显示 </span><br><span class="line">1 显示所有CPU的负载 </span><br><span class="line">s 设置刷新时间 </span><br><span class="line">b 高亮现实处于R状态的进程 </span><br><span class="line">M 按内存使用百分比排序输出 </span><br><span class="line">P 按CPU使用百分比排序输出 </span><br><span class="line">R 对排序进行反转 </span><br><span class="line">f 自定义显示字段 </span><br><span class="line">k <span class="built_in">kill</span>掉指定PID进程 </span><br><span class="line">W 保存top环境设置 ~/.toprc</span><br><span class="line">q 退出</span><br><span class="line"></span><br><span class="line">PID：进程ID号 </span><br><span class="line">USER：该进程的用户</span><br><span class="line">PR NI：进程优先级</span><br><span class="line">VIRT：虚拟内存占用空间 </span><br><span class="line">RES：物理内存占用空间 </span><br><span class="line">SHR：共享内存占用空间</span><br><span class="line">S：进程的状态 </span><br><span class="line">%CPU：占用CPU的百分比</span><br><span class="line">%MEM：占用内存的百分比</span><br><span class="line">TIME+：运行时间 </span><br><span class="line">COMMAND：进程的运行命令</span><br></pre></td></tr></table></figure>

<h2 id="进程的信号管理-kill"><a href="#进程的信号管理-kill" class="headerlink" title="进程的信号管理-kill"></a>进程的信号管理-kill</h2><p>当程序运行为进程后，如果希望强行停止就可以使用kill命令对进程发送关闭信号，除了kill还有<code>pkill</code>、<code>killall</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@web01 ~]<span class="comment"># kill -l </span></span><br><span class="line">1) SIGHUP 2) SIGINT 3) SIGQUIT 4) SIGILL 5) SIGTRAP 6) SIGABRT 7) SIGBUS 8) SIGFPE </span><br><span class="line">9) SIGKILL 10) SIGUSR1 11) SIGSEGV 12) SIGUSR2 13) SIGPIPE 14) SIGALRM 15) SIGTERM 16) SIGSTKFLT </span><br><span class="line">17) SIGCHLD 18) SIGCONT 19) SIGSTOP 20) SIGTSTP 21) SIGTTIN 22) SIGTTOU 23) SIGURG 24) SIGXCPU </span><br><span class="line">25) SIGXFSZ 26) SIGVTALRM 27) SIGPROF 28) SIGWINCH 29) SIGIO 30) SIGPWR 31) SIGSYS 34) SIGRTMIN </span><br><span class="line">35) SIGRTMIN+1 36) SIGRTMIN+2 37) SIGRTMIN+3 38) SIGRTMIN+4 39) SIGRTMIN+5 40) SIGRTMIN+6 </span><br><span class="line">41) SIGRTMIN+7 42) SIGRTMIN+8 43) SIGRTMIN+9 44) SIGRTMIN+10 45) SIGRTMIN+11 46) SIGRTMIN+12 </span><br><span class="line">47) SIGRTMIN+13 48) SIGRTMIN+14 49) SIGRTMIN+15 50) SIGRTMAX-14 51) SIGRTMAX-13 52) SIGRTMAX-12 </span><br><span class="line">53) SIGRTMAX-11 54) SIGRTMAX-10 55) SIGRTMAX-9 56) SIGRTMAX-8 57) SIGRTMAX-7 58) SIGRTMAX-6 </span><br><span class="line">59) SIGRTMAX-5 60) SIGRTMAX-4 61) SIGRTMAX-3 62) SIGRTMAX-2 63) SIGRTMAX-1 64) SIGRTMAX</span><br><span class="line"></span><br><span class="line"><span class="comment">#常见信号列表: 数字信号、信号别名、作用 </span></span><br><span class="line">1 HUP 挂起信号，往往可以让进程重新配置(重新加载配置文件) </span><br><span class="line">2 INT 中断信号，起到结束进程的作用，和ctrl + c 的作用一样 </span><br><span class="line">3 QUIT 让进程退出，结果是进程退出 </span><br><span class="line">9 KILL 直接结束进程，不能被进程捕获 </span><br><span class="line">15 TERM 进程终止，这是默认信号 </span><br><span class="line">18 CONT 被暂停的进程将继续恢复运行（放在后台运行，<span class="built_in">bg</span>） </span><br><span class="line">19 STOP 暂停进程 </span><br><span class="line">20 TSTP 用户停止请求，作用类似于ctrl + z 把进程放到后台并暂停</span><br><span class="line"></span><br><span class="line">pkill：杀掉所有进程，不用指定pid</span><br><span class="line">killall：杀掉所有进程，不用指定pid</span><br><span class="line"></span><br><span class="line"><span class="comment">#示例</span></span><br><span class="line">[root@web01 ~]<span class="comment"># pkill nginx</span></span><br><span class="line">[root@web01 ~]<span class="comment"># killall nginx</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#踢除用户</span></span><br><span class="line">[root@web01 ~]<span class="comment"># pkill -t pts/0 </span></span><br><span class="line">[root@web01 ~]<span class="comment"># w </span></span><br><span class="line">[root@web01 ~]<span class="comment"># pkill -9 -t pts/0</span></span><br></pre></td></tr></table></figure>

<h2 id="进程的优先级"><a href="#进程的优先级" class="headerlink" title="进程的优先级"></a>进程的优先级</h2><blockquote>
<p><strong>什么是优先级？</strong></p>
<p>优先级高的进程，可以优先享用系统的资源</p>
</blockquote>
<p><strong>优先级的定义和配置</strong></p>
<p>在启动进程时，为不同的进程使用不同的调度策略</p>
<p>nice值越高：表示优先级越低，例如20，该进程容易将CPU使用量让给其他进程</p>
<p>nice值越低：表示优先级越高，例如-20，该进程更不倾向于让出CPU</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#指定优先级执行命令 </span></span><br><span class="line">[root@localhost ~]<span class="comment"># nice -n 19 vim 1.txt</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#重置，已经在运行的程序，优先级</span></span><br><span class="line"><span class="comment">##查看sshd服务的优先级</span></span><br><span class="line">[root@localhost ~]<span class="comment"># ps axo pid,user,nice,command | grep ssh </span></span><br><span class="line">6676 root 0 /usr/sbin/sshd -D </span><br><span class="line"><span class="comment">##重新设置sshd服务的优先级为-20 </span></span><br><span class="line">[root@localhost ~]<span class="comment"># renice -n -20 6676 </span></span><br><span class="line">6676 (process ID) old priority 0, new priority -20 </span><br><span class="line"><span class="comment">##再次查看 </span></span><br><span class="line">[root@localhost ~]<span class="comment"># ps axo pid,user,nice,command | grep ssh </span></span><br><span class="line">6676 root -20 /usr/sbin/sshd -D</span><br></pre></td></tr></table></figure>

<h2 id="企业案例，Linux假死是怎么回事"><a href="#企业案例，Linux假死是怎么回事" class="headerlink" title="企业案例，Linux假死是怎么回事"></a>企业案例，Linux假死是怎么回事</h2><blockquote>
<p><strong>什么是假死？</strong></p>
<p>所谓假死，就是能<code>ping</code>通，但是<code>ssh</code>不上去；任何其他操作也都没反应，包括上面部署的<code>nginx</code>也打不开页面</p>
<p><strong>系统假死为何能ping同无法连接？</strong></p>
<p>此时机器可以<code>ping</code>通，但是无法<code>ssh</code>上去。这是由于<code>ping</code>是在系统底层处理的，没有参与进程调度；<code>sshd</code>要参与进程调度，但是优先级没<code>oom killer</code>高，总得不到调度</p>
<p><strong>出现假死怎么办？</strong></p>
<p>建议使用<code>nice</code>将<code>sshd</code>的进程优先级调高。这样当系统内存吃紧，还能勉强登陆<code>sshd</code>，进入调试。然后分析故障。</p>
</blockquote>
<h2 id="后台进程管理"><a href="#后台进程管理" class="headerlink" title="后台进程管理"></a>后台进程管理</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#在执行的命令后面加 &amp; 会直接将该命令放在后台执行 </span></span><br><span class="line">[root@localhost ~]<span class="comment"># ping baidu.com &amp;</span></span><br><span class="line">[1] 7784</span><br><span class="line">PING baidu.com (220.181.38.251) 56(84) bytes of data.</span><br><span class="line">64 bytes from 220.181.38.251 (220.181.38.251): icmp_seq=1 ttl=128 time=30.3 ms</span><br><span class="line">[1]+  Terminated	ping baidu.com</span><br><span class="line"></span><br><span class="line"><span class="comment">#先把进程放在后台暂停 配合bg将暂停的进程，在后台恢复运行</span></span><br><span class="line">[root@localhost ~]<span class="comment"># ping baidu.com &amp;</span></span><br><span class="line">快捷键：ctrl + z</span><br><span class="line"><span class="comment">#查看暂停的进程</span></span><br><span class="line">[root@localhost ~]<span class="comment"># jobs</span></span><br><span class="line"><span class="comment">#在后台恢复运行</span></span><br><span class="line">[root@localhost ~]<span class="comment"># bg</span></span><br><span class="line"><span class="comment">#在前台恢复运行</span></span><br><span class="line">[root@localhost ~]<span class="comment"># fg</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#将执行的命令放入后台执行，并且将输出结果保存到 nohup.out文件中</span></span><br><span class="line">[root@localhost ~]<span class="comment"># nohup ping baidu.com &amp;</span></span><br><span class="line">[1] 8089</span><br><span class="line">[root@localhost ~]<span class="comment"># nohup: ignoring input and appending output to ‘nohup.out’</span></span><br><span class="line">[1]+  Terminated	nohup ping baidu.com</span><br><span class="line"></span><br><span class="line"><span class="comment">#将进程放入后台（开启一个子shell）</span></span><br><span class="line">[root@localhost ~]<span class="comment"># yum install -y screen </span></span><br><span class="line">-ls：查看所有screen的后台进程 </span><br><span class="line">-r：指定后台进程号，进入该后台进程 </span><br><span class="line">-S：指定后台进程的名字 </span><br><span class="line">Ctrl + a + d：放在后台执行</span><br><span class="line">[root@localhost ~]<span class="comment"># screen -S ping_baidu</span></span><br><span class="line">[root@localhost ~]<span class="comment"># ping baidu.com</span></span><br><span class="line">[detached from 8174.ping_baidu]</span><br><span class="line">[root@localhost ~]<span class="comment"># screen -ls</span></span><br><span class="line">There is a screen on:</span><br><span class="line">	8174.ping_baidu	(Detached)</span><br><span class="line">1 Socket <span class="keyword">in</span> /var/run/screen/S-root.</span><br><span class="line">[root@localhost ~]<span class="comment"># screen -r 8174</span></span><br><span class="line">--- baidu.com ping statistics ---</span><br><span class="line">34 packets transmitted, 34 received, 0% packet loss, time 33306ms</span><br><span class="line">rtt min/avg/max/mdev = 29.373/30.025/30.571/0.300 ms</span><br><span class="line"></span><br><span class="line">使用场景：ping节点，检测丢包率</span><br></pre></td></tr></table></figure>



<h2 id="面试加分项"><a href="#面试加分项" class="headerlink" title="面试加分项"></a>面试加分项</h2><h3 id="中断"><a href="#中断" class="headerlink" title="中断"></a>中断</h3><blockquote>
<p><strong>Q：什么是中断？</strong></p>
<p>中断是系统用来影响硬件设备请求的一种机制，它会打断进程的正常调度和执行，然后调用内核中的中断处理程序来影响设备的请求</p>
<p><strong>Q：为什么要有中断？</strong></p>
<p>举个栗子： 比如你定了一份外卖，但是不确定外卖什么时候送到，也没有别的方法了解外卖的进度，但是配送人员送外卖是不等人的，到了你这，没人接取的话，直接走人了。所以你只能苦苦的等着，时不时的去门口看看外卖送到没有，而不能做其他的事情</p>
<p>不过如果在订外卖的时候，你就跟配送员约定好了，让他送到给你打电话，那你就不用苦苦等着了，可以去忙别的事情了，直到电话一响，接到电话，就可以取外卖了。此时打电话就是一个中断的操作</p>
<p>没接到电话之前，你可以做其他事情，当你接到电话之后（就发生了中断），你才要进行另一个动作取外卖 </p>
<p>注意：中断是一个异步的事件处理机制，可以提高操作系统处理并发的能力</p>
<p><strong>Q：那么中断会带来什么问题？</strong></p>
<p>由于中断处理程序会打断其他进程的运行，所以，为了减少对正常进程运行调度的影响，中弄断处理程序就需要尽可能快的运行，如果中弄断本身要做的事情不多，那么处理起来也不会有太大的问题，但是如果中断要处理的事情很多，中断服务程序就有可能要运行很长时间</p>
<p>特别是，中断处理程序在影响中断时，还会临时关闭中断，这就会导致上一次中断处理完成之前，其他中断都能不能响应，也就是说中断有可能会丢失</p>
<p>还是以外卖为例：加入你定了2份外卖 </p>
<p>一份主食和一份饮料，由2个不同的配送员来配送。这次你不用时时等待着，两份外卖都约定了电话取外卖的方式。那么问题又来了</p>
<p>当第一份外卖送到时，配送员给你打了个很长的电话，商量发票处理的方式，与此同时，第二个配送员也到了，也想给你打电话，但是会占线，因为电话占线（也就关闭了中断的响应），第二个配送给你打电话打不通，所以，那么很有可能在尝试几次还占线，就走了（丢失了一次中断）</p>
<p><strong>系统的软中断</strong></p>
<p>刚才说了丢失一次中断，如果对于系统来说，每次都只能处理一次中断，那就很刺激了，天天都在丢失中断，用户的请求发过来，没响应，还做个P的运维，回家种地吧…</p>
<p>事实上，为了解决中断处理程序执行过长的和丢失中断的问题，Linux将中断处理过程分成了两个阶段：</p>
<p>第一阶段：用来快速处理中断，它在中断禁止模式下运行，主要处理跟硬件紧密相关工作 </p>
<p>第二阶段：用来延迟处理第一阶段未完成的工作，通常以内核线程的方式运行</p>
<p>你猜的没错，还是外卖的那个例子： </p>
<p>第一阶段：当你接到第一个配送员电话时，你可以跟他说，你已经知道了，其他事见面再细说，然后就可以挂断电话了</p>
<p>第二阶段：才是取外卖，然后见面聊发票的处理动作</p>
<p>如此一来，第一个配送员不会在电话里占用你很长时间，第二个配送员来的时候，照样可以打通电话</p>
<p><strong>Linux软中断与硬中断小结：</strong></p>
<ul>
<li><p>Linux中弄断处理程序分为上半部和下半部： 上半部对应硬中断，用来快速处理下半部对应软中断，用来异步处理上半部未完成的工作 </p>
</li>
<li><p>Linux中的软中断包括：网络收发，定时，调度等各种类型，可以通过<code>/proc/softirqs</code>来观察中断的运行情况</p>
</li>
</ul>
</blockquote>
<h1 id="系统平均负载"><a href="#系统平均负载" class="headerlink" title="系统平均负载"></a>系统平均负载</h1><blockquote>
<p><strong>什么是平均负载？</strong></p>
<p>平均负载是指，单位时间内，系统处于可运行状态(R)和不可中断状态(D)的平均进程数，也就是平均活跃进程数</p>
<p><font color='red'><strong>注意：平均负载与CPU使用率并没有直接关系</strong></font></p>
<p><strong>可运行状态和不可中断状态是什么？</strong></p>
<ul>
<li><p>可运行状态进程，是指正在使用CPU或者正在等待CPU的进程，也就是我们用PS命令看的处于R状态的进程 </p>
</li>
<li><p>不可中断进程，（你在做什么事情的时候是不能被打断的呢？）系统中最常见的是等待硬件设备的IO相应，也就是我们PS命令中看到的D状态（也成为Disk Sleep）的进程。</p>
</li>
</ul>
<p><strong>平均负载多少合理？</strong></p>
<p>最理想的状态是每个CPU上都刚还运行着一个进程，这样每个CPU都得到了充分利用</p>
<p><strong>企业中平均负载多高需要重点关注呢？</strong></p>
<p>当平均负载高于CPU数量70%的时候，你就应该分析排查负载高的问题了，一旦负载过高，就可能导致进程相应变慢，进而影响服务的正常功能</p>
<p>但70%这个数字并不是绝对的，最推荐的方法，还是把系统的平均负载监控起来，然后根据更多的历史数据，判断负载的变化趋势，当发现负载有明显升高的趋势时，比如说负载翻倍了，你再去做分析和调查</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#获取CPU数量</span></span><br><span class="line">top命令获取：top 1</span><br><span class="line">grep <span class="string">'model name'</span> /proc/cpuinfo</span><br><span class="line">lscpu</span><br><span class="line"></span><br><span class="line"><span class="comment">#CPU的种类</span></span><br><span class="line">-CPU密集型：计算相关</span><br><span class="line">-IO密集型：数据库相关服务</span><br></pre></td></tr></table></figure>

<h2 id="企业级负载实战"><a href="#企业级负载实战" class="headerlink" title="企业级负载实战"></a>企业级负载实战</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">领导：某一台服务器，很卡，怎么办？ </span><br><span class="line">卡的原因：服务器，负载太高 </span><br><span class="line">如何定位，什么程序，导致负载高？ </span><br><span class="line">如何定位，负载高，是哪个硬件引起的？</span><br></pre></td></tr></table></figure>

<p>前期准备</p>
<p><code>stress</code>是Linux系统压力测试工具，这里我们用作异常进程模拟平均负载升高的场景。</p>
<p><code>mpstat</code>是多核CPU性能分析工具，用来实时检查每个CPU的性能指标，以及所有CPU的平均指标。</p>
<p><code>pidstat</code>是一个常用的进程性能分析工具，用来实时查看进程的CPU，内存，IO，以及上下文切换等性能指标</p>
<ul>
<li>模拟CPU密集型</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#安装stress命令</span></span><br><span class="line">[root@localhost ~]<span class="comment"># yum install -y stress</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#启动了8个cpu密集型的进程，8个占用CPU的进程</span></span><br><span class="line">[root@localhost ~]<span class="comment"># stress --cpu 8 --timeout 600</span></span><br><span class="line">root      20   0    7308    100      0 R  50.0  0.0   0:26.21 stress                                         root      20   0    7308    100      0 R  50.0  0.0   0:26.22 stress                                         root      20   0    7308    100      0 R  50.0  0.0   0:26.22 stress                                         root      20   0    7308    100      0 R  50.0  0.0   0:26.32 stress                                         root      20   0    7308    100      0 R  50.0  0.0   0:26.22 stress                                         root      20   0    7308    100      0 R  50.0  0.0   0:26.31 stress                                         root      20   0    7308    100      0 R  49.7  0.0   0:26.38 stress                                        root      20   0    7308    100      0 R  49.7  0.0   0:26.30 stress </span><br><span class="line"></span><br><span class="line"><span class="comment">#查看所有的CPU，5s显示一次数据 </span></span><br><span class="line">[root@localhost ~]<span class="comment"># yum install sysstat</span></span><br><span class="line">[root@localhost ~]<span class="comment"># mpstat -P ALL 5</span></span><br><span class="line">Linux 3.10.0-957.el7.x86_64 (node2) 	05/06/2022 	_x86_64_	(4 CPU)</span><br><span class="line">06:57:09 PM  CPU    %usr   %nice    %sys %iowait    %irq   %soft  %steal  %guest  %gnice   %idle</span><br><span class="line">06:57:14 PM  all  100.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00</span><br><span class="line">06:57:14 PM    0  100.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00</span><br><span class="line">06:57:14 PM    1   99.80    0.00    0.00    0.00    0.00    0.20    0.00    0.00    0.00    0.00</span><br><span class="line">06:57:14 PM    2  100.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00</span><br><span class="line">06:57:14 PM    3  100.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00</span><br><span class="line"></span><br><span class="line"><span class="comment">#-u指定5s输出一次数据 2 ， 总共输出2组数据 </span></span><br><span class="line">[root@localhost ~]<span class="comment"># pidstat -u 5 2</span></span><br><span class="line">Linux 3.10.0-957.el7.x86_64 (node2) 	05/06/2022 	_x86_64_	(4 CPU)</span><br><span class="line">06:58:50 PM   UID       PID    %usr %system  %guest    %CPU   CPU  Command</span><br><span class="line">06:58:55 PM     0      6258    0.00    0.20    0.00    0.20     1  vmtoolsd</span><br><span class="line">06:58:55 PM     0      7274    0.00    0.20    0.00    0.20     2  top</span><br><span class="line">06:58:55 PM     0      7475   50.00    0.00    0.00   50.00     3  stress</span><br><span class="line">06:58:55 PM     0      7476   49.40    0.00    0.00   49.40     1  stress</span><br><span class="line">06:58:55 PM     0      7477   49.80    0.00    0.00   49.80     3  stress</span><br><span class="line">06:58:55 PM     0      7478   49.80    0.00    0.00   49.80     2  stress</span><br><span class="line">06:58:55 PM     0      7479   49.20    0.00    0.00   49.20     0  stress</span><br><span class="line">06:58:55 PM     0      7480   49.40    0.00    0.00   49.40     1  stress</span><br><span class="line">06:58:55 PM     0      7481   51.59    0.00    0.00   51.59     0  stress</span><br><span class="line">06:58:55 PM     0      7482   50.00    0.00    0.00   50.00     2  stress</span><br><span class="line"></span><br><span class="line">06:58:55 PM   UID       PID    %usr %system  %guest    %CPU   CPU  Command</span><br><span class="line">06:59:00 PM     0      7203    0.00    0.20    0.00    0.20     1  sshd</span><br><span class="line">06:59:00 PM     0      7475   50.00    0.00    0.00   50.00     3  stress</span><br><span class="line">06:59:00 PM     0      7476   50.00    0.00    0.00   50.00     1  stress</span><br><span class="line">06:59:00 PM     0      7477   50.00    0.00    0.00   50.00     3  stress</span><br><span class="line">06:59:00 PM     0      7478   50.00    0.00    0.00   50.00     2  stress</span><br><span class="line">06:59:00 PM     0      7479   50.20    0.00    0.00   50.20     0  stress</span><br><span class="line">06:59:00 PM     0      7480   49.80    0.00    0.00   49.80     1  stress</span><br><span class="line">06:59:00 PM     0      7481   49.80    0.00    0.00   49.80     0  stress</span><br><span class="line">06:59:00 PM     0      7482   49.80    0.00    0.00   49.80     2  stress</span><br><span class="line">06:59:00 PM     0      7499    0.00    0.20    0.00    0.20     0  pidstat</span><br></pre></td></tr></table></figure>

<ul>
<li>模拟IO密集型</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># stress --io 8 --timeout 600</span></span><br><span class="line"></span><br><span class="line">[root@localhost ~]<span class="comment"># mpstat -P ALL 5</span></span><br><span class="line">Linux 3.10.0-957.el7.x86_64 (node2) 	05/06/2022 	_x86_64_	(4 CPU)</span><br><span class="line">07:04:04 PM  CPU    %usr   %nice    %sys %iowait    %irq   %soft  %steal  %guest  %gnice   %idle</span><br><span class="line">07:04:09 PM  all    0.91    0.00   55.06    0.00    0.00    0.00    0.00    0.00    0.00   44.03</span><br><span class="line">07:04:09 PM    0    0.82    0.00   69.53    0.00    0.00    0.00    0.00    0.00    0.00   29.65</span><br><span class="line">07:04:09 PM    1    0.99    0.00   49.14    0.00    0.00    0.00    0.00    0.00    0.00   49.88</span><br><span class="line">07:04:09 PM    2    0.80    0.00   46.40    0.00    0.00    0.00    0.00    0.00    0.00   52.80</span><br><span class="line">07:04:09 PM    3    1.05    0.00   51.05    0.00    0.00    0.00    0.00    0.00    0.00   47.89</span><br><span class="line"></span><br><span class="line">[root@localhost ~]<span class="comment"># pidstat -u 5 2</span></span><br><span class="line">Linux 3.10.0-957.el7.x86_64 (node2) 	05/06/2022 	_x86_64_	(4 CPU)</span><br><span class="line">07:04:29 PM   UID       PID    %usr %system  %guest    %CPU   CPU  Command</span><br><span class="line">07:04:34 PM     0        57    0.00   17.17    0.00   17.17     2  kworker/u256:1</span><br><span class="line">07:04:34 PM     0      7547    0.80   24.15    0.00   24.95     1  stress</span><br><span class="line">07:04:34 PM     0      7548    0.60   24.95    0.00   25.55     1  stress</span><br><span class="line">07:04:34 PM     0      7549    0.80   23.35    0.00   24.15     2  stress</span><br><span class="line">07:04:34 PM     0      7550    0.80   23.95    0.00   24.75     0  stress</span><br><span class="line">07:04:34 PM     0      7551    0.60   27.54    0.00   28.14     0  stress</span><br><span class="line">07:04:34 PM     0      7552    0.60   24.75    0.00   25.35     0  stress</span><br><span class="line">07:04:34 PM     0      7553    0.60   25.95    0.00   26.55     2  stress</span><br><span class="line">07:04:34 PM     0      7554    1.00   28.34    0.00   29.34     0  stress</span><br><span class="line">07:04:34 PM     0      7555    0.00   19.56    0.00   19.56     2  kworker/u256:0</span><br><span class="line">07:04:34 PM     0      7556    0.00   16.37    0.00   16.37     3  kworker/u256:3</span><br><span class="line"></span><br><span class="line">07:04:34 PM   UID       PID    %usr %system  %guest    %CPU   CPU  Command</span><br><span class="line">07:04:39 PM     0        57    0.00   18.60    0.00   18.60     2  kworker/u256:1</span><br><span class="line">07:04:39 PM     0      6258    0.20    0.00    0.00    0.20     0  vmtoolsd</span><br><span class="line">07:04:39 PM     0      7547    0.40   25.60    0.00   26.00     1  stress</span><br><span class="line">07:04:39 PM     0      7548    0.60   26.20    0.00   26.80     0  stress</span><br><span class="line">07:04:39 PM     0      7549    0.80   30.60    0.00   31.40     0  stress</span><br><span class="line">07:04:39 PM     0      7550    0.80   25.20    0.00   26.00     1  stress</span><br><span class="line">07:04:39 PM     0      7551    0.60   29.40    0.00   30.00     2  stress</span><br><span class="line">07:04:39 PM     0      7552    0.60   24.60    0.00   25.20     1  stress</span><br><span class="line">07:04:39 PM     0      7553    0.60   27.80    0.00   28.40     0  stress</span><br><span class="line">07:04:39 PM     0      7554    0.20   25.40    0.00   25.60     0  stress</span><br><span class="line">07:04:39 PM     0      7555    0.00   20.40    0.00   20.40     2  kworker/u256:0</span><br><span class="line">07:04:39 PM     0      7556    0.00   18.00    0.00   18.00     2  kworker/u256:3</span><br><span class="line">07:04:39 PM     0      7571    0.00    0.20    0.00    0.20     3  pidstat</span><br></pre></td></tr></table></figure>

<ul>
<li>模拟大量进程</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># stress -c 8 --timeout 600</span></span><br><span class="line">[root@localhost ~]<span class="comment"># mpstat -P ALL 5</span></span><br><span class="line">[root@localhost ~]<span class="comment"># pidstat -u 5 2</span></span><br></pre></td></tr></table></figure>

<p>总结分析流程： </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1.使用uptime或者top命令查看，系统负载 </span><br><span class="line">2.看1分钟，5分钟，15分钟的负载趋势 </span><br><span class="line">3.是什么情况导致负载上升 </span><br><span class="line">mpstat -P ALL 5 是用户态，还是内核态，导致负载上升</span><br><span class="line">用户态：cpu使用率，大量进程 </span><br><span class="line">内核态：磁盘IO，压缩文件，网络存储挂载，下载文件，数据库查询语句 </span><br><span class="line">4.查看到底是哪个程序，引起用户态或者内核态的负载上升？ </span><br><span class="line">pidstat -u 5 2 </span><br><span class="line">5.查到了是某个进程后 </span><br><span class="line">	- 运维</span><br><span class="line">	  执行了某条命令？ </span><br><span class="line">	  启动了某个服务？ </span><br><span class="line">	- 开发</span><br><span class="line">	  查看开发写好的程序日志，导出日志，交给开发</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>SRE</category>
      </categories>
      <tags>
        <tag>Linux基础</tag>
      </tags>
  </entry>
  <entry>
    <title>[软件包管理]</title>
    <url>/2019/03/09/%E8%BD%AF%E4%BB%B6%E5%8C%85%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<h1 id="RPM包管理"><a href="#RPM包管理" class="headerlink" title="RPM包管理"></a>RPM包管理</h1><blockquote>
<p>什么是rpm包？</p>
<p>rpm全称RedHat Package Manager缩写，由红帽开发用于软件包的安装、升级、卸载与查询</p>
</blockquote>
<h2 id="rpm包名组成部分"><a href="#rpm包名组成部分" class="headerlink" title="rpm包名组成部分"></a>rpm包名组成部分</h2><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_devops/15621427002419.jpg" alt="15621427002419"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#tree-1.6.0-10.el7.x86_64.rpm </span></span><br><span class="line">tree：软件名称 </span><br><span class="line">1.6.0：版本号 </span><br><span class="line">10：该版本的发布次数 </span><br><span class="line">el7：适用系统版本（RedHat7，CentOS7）向下兼容 </span><br><span class="line">x86_64：系统平台64位 x86:32位 i386 </span><br><span class="line">rpm：后缀名</span><br></pre></td></tr></table></figure>

<h2 id="安装包的类型"><a href="#安装包的类型" class="headerlink" title="安装包的类型"></a>安装包的类型</h2><table>
<thead>
<tr>
<th align="center">分类</th>
<th align="center">安装</th>
<th align="center">版本</th>
</tr>
</thead>
<tbody><tr>
<td align="center">rpm包</td>
<td align="center">编译好的源码包，下载下来后，直接使用rpm命令安装，安装简单</td>
<td align="center">软件版本偏低</td>
</tr>
<tr>
<td align="center">源码包</td>
<td align="center">先编译，将源代码翻译成系统认识的软件，再安装，安装繁琐</td>
<td align="center">软件版本随意</td>
</tr>
<tr>
<td align="center">二进制包</td>
<td align="center">解压即可使用，安装简单</td>
<td align="center">不能修改源码</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="center">系统平台</th>
<th align="center">包类型</th>
<th align="center">工具</th>
<th align="center">自动解决依赖</th>
</tr>
</thead>
<tbody><tr>
<td align="center">RedHat/Centos</td>
<td align="center">RPM</td>
<td align="center">rpm</td>
<td align="center">yum</td>
</tr>
<tr>
<td align="center">Ubuntu/Debian</td>
<td align="center">DPKG</td>
<td align="center">dpkg</td>
<td align="center">apt</td>
</tr>
</tbody></table>
<h2 id="RPM包获取途径"><a href="#RPM包获取途径" class="headerlink" title="RPM包获取途径"></a>RPM包获取途径</h2><p>系统光盘镜像：<a href="https://www.centos.org/" target="_blank" rel="noopener">CentOS官网</a></p>
<p><code>RPM</code>查询：<a href="https://rpmfind.net/" target="_blank" rel="noopener">RPM官网</a></p>
<p><strong>挂载mount</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#挂载语法 </span></span><br><span class="line">mount 源设备文件 目标路径</span><br><span class="line"></span><br><span class="line"><span class="comment">#示例</span></span><br><span class="line">[root@localhost ~]<span class="comment"># mount /dev/cdrom /mnt</span></span><br><span class="line">mount: /dev/sr0 is write-protected, mounting <span class="built_in">read</span>-only</span><br><span class="line"><span class="comment">#查看磁盘分区、使用情况、挂载设备及目录</span></span><br><span class="line">[root@localhost ~]<span class="comment"># df -h</span></span><br><span class="line">/dev/sr0    4.3G  4.3G    0 100%  /mnt</span><br><span class="line"></span><br><span class="line"><span class="comment">#挂载报错 </span></span><br><span class="line">[root@ yjc ~ ] <span class="comment"># mount /dev/cdrom /mnt </span></span><br><span class="line">mount: no medium found on /dev/sr0 </span><br><span class="line">原因：设备文件是空的，里面没有任何内容，光驱没有连接</span><br><span class="line"></span><br><span class="line"><span class="comment">#卸载语法 </span></span><br><span class="line">umount 目标路径</span><br><span class="line"></span><br><span class="line"><span class="comment">#示例</span></span><br><span class="line">[root@localhost ~]<span class="comment"># umount /mnt</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#卸载报错 </span></span><br><span class="line">[root@localhost mnt]<span class="comment"># umount /mnt </span></span><br><span class="line">umount: /mnt: target is busy. (In some cases useful info about processes that use the device is found by lsof(8) or fuser(1)) </span><br><span class="line">[root@localhost mnt]<span class="comment"># cd</span></span><br><span class="line">[root@localhost ~]<span class="comment"># umount /mnt </span></span><br><span class="line">原因：设备繁忙</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看基础包</span></span><br><span class="line">[root@localhost ~]<span class="comment"># ll /mnt/Packages/ | grep 'zip'</span></span><br><span class="line">-rw-rw-r-- 1 root root    53120 Nov 25  2015 bzip2-1.0.6-13.el7.x86_64.rpm</span><br><span class="line">-rw-rw-r-- 1 root root   223224 Nov 25  2015 bzip2-devel-1.0.6-13.el7.x86_64.rpm</span><br><span class="line">-rw-rw-r-- 1 root root    40740 Nov 25  2015 bzip2-libs-1.0.6-13.el7.x86_64.rpm</span><br><span class="line">-rw-rw-r-- 1 root root   132636 Apr 25  2018 gzip-1.5-10.el7.x86_64.rpm</span><br><span class="line">-rw-rw-r-- 1 root root    49644 Jul  4  2014 libzip-0.10.1-8.el7.x86_64.rpm</span><br><span class="line">-rw-rw-r-- 1 root root    33172 Jul  4  2014 perl-Compress-Raw-Bzip2-2.061-3.el7.x86_64.rpm</span><br><span class="line">-rw-rw-r-- 1 root root   173704 Apr 25  2018 unzip-6.0-19.el7.x86_64.rpm</span><br><span class="line">-rw-rw-r-- 1 root root   266160 Nov 21  2016 zip-3.0-11.el7.x86_64.rpm</span><br><span class="line">-rw-rw-r-- 1 root root    83872 Nov 12  2018 zziplib-0.13.62-9.el7.x86_64.rpm</span><br></pre></td></tr></table></figure>

<h2 id="rpm命令-安装"><a href="#rpm命令-安装" class="headerlink" title="rpm命令-安装"></a>rpm命令-安装</h2><table>
<thead>
<tr>
<th align="center">选项</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">-i</td>
<td align="center">安装</td>
</tr>
<tr>
<td align="center">-v</td>
<td align="center">显示安装的过程</td>
</tr>
<tr>
<td align="center">-h</td>
<td align="center">显示安装的进度条</td>
</tr>
<tr>
<td align="center">–test</td>
<td align="center">仅测试，不安装</td>
</tr>
<tr>
<td align="center">–force</td>
<td align="center">强制安装</td>
</tr>
<tr>
<td align="center">–nodeps</td>
<td align="center">忽略依赖关系</td>
</tr>
</tbody></table>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#语法： </span></span><br><span class="line">rpm [options] rpm包名</span><br><span class="line"></span><br><span class="line"><span class="comment">#rpm包名</span></span><br><span class="line">-本地包名：在系统中某个目录下的rpm包 </span><br><span class="line">-远程包名：不用下载，直接使用网站上的rpm包</span><br><span class="line"></span><br><span class="line"><span class="comment">#示例</span></span><br><span class="line"><span class="comment">#卸载tree命令</span></span><br><span class="line">[root@localhost ~]<span class="comment"># yum remove -y tree</span></span><br><span class="line"><span class="comment">#安装-i </span></span><br><span class="line">[root@localhost ~]<span class="comment"># rpm -i /mnt/Packages/tree-1.6.0-10.el7.x86_64.rpm</span></span><br><span class="line"><span class="comment">#显示安装过程-v </span></span><br><span class="line">[root@localhost ~]<span class="comment"># rpm -iv /mnt/Packages/tree-1.6.0-10.el7.x86_64.rpm </span></span><br><span class="line">Preparing packages... tree-1.6.0-10.el7.x86_6</span><br><span class="line"><span class="comment">#显示安装进度条-h </span></span><br><span class="line">[root@localhost ~]<span class="comment"># rpm -ivh /mnt/Packages/tree-1.6.0-10.el7.x86_64.rpm </span></span><br><span class="line">Preparing... 			<span class="comment">################################# [100%]</span></span><br><span class="line">Updating / installing... </span><br><span class="line">	1:tree-1.6.0-10.el7 <span class="comment">################################# [100%]</span></span><br><span class="line"><span class="comment">#测似安装--test </span></span><br><span class="line">[root@localhost Packages]<span class="comment"># rpm -ivh --test tree-1.6.0-10.el7.x86_64.rpm </span></span><br><span class="line">Preparing... 			<span class="comment">################################# [100%]</span></span><br><span class="line"><span class="comment">#强制--force --nodeps </span></span><br><span class="line">[root@localhost Packages]<span class="comment"># rpm -ivh --force --nodeps samba-4.8.3-4.el7.x86_64.rpm </span></span><br><span class="line">Preparing... 			  <span class="comment">################################# [100%] </span></span><br><span class="line">Updating / installing... </span><br><span class="line">	1:samba-0:4.8.3-4.el7 <span class="comment">################################# [100%]</span></span><br><span class="line"></span><br><span class="line">ps:rpm命令管理rpm包的缺点，无法解决依赖关系</span><br><span class="line"></span><br><span class="line"><span class="comment">#阿里云镜像源安装</span></span><br><span class="line">[root@localhost ~]<span class="comment"># rpm -ivh https://mirrors.aliyun.com/centos/7.9.2009/os/x86_64/Packages/zip-3.0-11.el7.x86_64.rpm</span></span><br></pre></td></tr></table></figure>

<h2 id="rpm命令-查询"><a href="#rpm命令-查询" class="headerlink" title="rpm命令-查询"></a>rpm命令-查询</h2><table>
<thead>
<tr>
<th align="center">选项</th>
<th align="center">说明（配合以下选项使用）</th>
</tr>
</thead>
<tbody><tr>
<td align="center">-q</td>
<td align="center">查看指定的安装包是否安装</td>
</tr>
<tr>
<td align="center">-p</td>
<td align="center">查询未安装的包相关信息（需要系统存在这个包）</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="center">选项</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">-a</td>
<td align="center">全部安装过的包</td>
</tr>
<tr>
<td align="center">-i</td>
<td align="center">详细信息</td>
</tr>
<tr>
<td align="center">-l</td>
<td align="center">列出rpm包相关的配置文件和目录</td>
</tr>
<tr>
<td align="center">-c</td>
<td align="center">只查看该软件包相关的配置文件</td>
</tr>
<tr>
<td align="center">-d</td>
<td align="center">只查看该软件的帮助文档文件</td>
</tr>
<tr>
<td align="center">-f</td>
<td align="center">反向查找，根据配置文件，目录，帮助文档，查找该文件属于哪个包</td>
</tr>
<tr>
<td align="center">–scripts</td>
<td align="center">查看安装包，安装之前之后，和卸载之前之后要执行的脚本</td>
</tr>
</tbody></table>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#语法 </span></span><br><span class="line">rpm [options] rpm包名</span><br><span class="line"></span><br><span class="line"><span class="comment">#示例</span></span><br><span class="line">[root@localhost Packages]<span class="comment"># rpm -q vim-common vim-common-7.4.629-8.el7_9.x86_64</span></span><br><span class="line"><span class="comment">#查看所有安装过的包-a</span></span><br><span class="line">[root@localhost ~]<span class="comment"># rpm -qa</span></span><br><span class="line">[root@localhost ~]<span class="comment"># rpm -qa | grep 'net'</span></span><br><span class="line"><span class="comment">#查看软件包的详细信息-i</span></span><br><span class="line">[root@localhost Packages]<span class="comment"># rpm -qi $(rpm -qa|grep 'net') </span></span><br><span class="line">[root@localhost Packages]<span class="comment"># rpm -qa | grep 'net' | xargs rpm -qi</span></span><br><span class="line"><span class="comment">#查看软件包的相关文件-l</span></span><br><span class="line">[root@localhost Packages]<span class="comment"># rpm -ql zip</span></span><br><span class="line"><span class="comment">#查看软件包的相关配置文件-c</span></span><br><span class="line">[root@localhost ~]<span class="comment"># rpm -qc mariadb</span></span><br><span class="line">/etc/my.cnf.d/client.cnf</span><br><span class="line">[root@localhost ~]<span class="comment"># rpm -qc mariadb-server </span></span><br><span class="line">/etc/logrotate.d/mariadb</span><br><span class="line">/etc/my.cnf.d/server.cnf</span><br><span class="line">/var/<span class="built_in">log</span>/mariadb/mariadb.log</span><br><span class="line"><span class="comment">#查看软件包的帮助文档</span></span><br><span class="line">[root@localhost ~]<span class="comment"># rpm -qd zip</span></span><br><span class="line"><span class="comment">#查看命令所属的软件包</span></span><br><span class="line">[root@localhost ~]<span class="comment"># rpm -qf /etc/hostname</span></span><br><span class="line">systemd-219-62.el7.x86_64</span><br><span class="line">[root@localhost ~]<span class="comment"># rpm -ql systemd | gerp 'bin'</span></span><br><span class="line"><span class="comment">#p选项</span></span><br><span class="line">-qip：查看没有安装包的详细信息（指定一个已存在的完整包名或者远程包名）</span><br><span class="line">-qlp：查看没有安装包会生成那些文件（指定一个已存在的完整包名或者远程包名） </span><br><span class="line">-qcp：查看没有安装包会生成哪些配置文件（指定一个已存在的完整包名或者远程包名） </span><br><span class="line">-qdp：查看没有安装包会生成哪些帮助文件（指定一个已存在的完整包名或者远程包名）</span><br><span class="line">[root@localhost ~]<span class="comment"># rpm -qip https://mirrors.aliyun.com/epel/7/x86_64/Packages/n/nginx-1.20.1-9.el7.x86_64.rpm</span></span><br><span class="line">[root@localhost ~]<span class="comment"># rpm -qlp https://mirrors.aliyun.com/epel/7/x86_64/Packages/n/nginx-1.20.1-9.el7.x86_64.rpm</span></span><br><span class="line">[root@localhost ~]<span class="comment"># rpm -qcp https://mirrors.aliyun.com/epel/7/x86_64/Packages/n/nginx-1.20.1-9.el7.x86_64.rpm</span></span><br><span class="line">[root@localhost ~]<span class="comment"># rpm -qcd https://mirrors.aliyun.com/epel/7/x86_64/Packages/n/nginx-1.20.1-9.el7.x86_64.rpm</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#报错</span></span><br><span class="line">[root@localhost ~]<span class="comment"># rpm -q ifconfig</span></span><br><span class="line">package ifconfig is not installed</span><br><span class="line">原因：需要知道命令隶属的包</span><br></pre></td></tr></table></figure>

<h2 id="rpm命令-更新"><a href="#rpm命令-更新" class="headerlink" title="rpm命令-更新"></a>rpm命令-更新</h2><table>
<thead>
<tr>
<th align="center">选项</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">-U</td>
<td align="center">老版本不存在，则安装；如果老版本存在则升级</td>
</tr>
<tr>
<td align="center">-f</td>
<td align="center">必须有老版本存在</td>
</tr>
</tbody></table>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#安装nginx的包（1.10版本）</span></span><br><span class="line">[root@localhost ~]<span class="comment"># rpm -ivh nginx-1.10.0-1.el7.ngx.x86_64.rpm</span></span><br><span class="line"><span class="comment">#查询当前系统中安装nginx的包</span></span><br><span class="line">[root@localhost ~]<span class="comment"># rpm -qa | grep nginx </span></span><br><span class="line">nginx-1.10.0-1.el7.ngx.x86_64</span><br><span class="line"><span class="comment">#使用Uvh安装，会将已存在的老版本卸载，升级成新1.12版本</span></span><br><span class="line">[root@localhost ~]<span class="comment"># rpm -Uvh nginx-1.12.0-1.el7.ngx.x86_64.rpm</span></span><br><span class="line"><span class="comment">#查看当前系统中的nginx版本为升级后的1.12版本 </span></span><br><span class="line">[root@zls ~]<span class="comment"># rpm -qa | grep nginx nginx-1.12.0-1.el7.ngx.x86_64</span></span><br></pre></td></tr></table></figure>

<h2 id="rpm命令-卸载"><a href="#rpm命令-卸载" class="headerlink" title="rpm命令-卸载"></a>rpm命令-卸载</h2><table>
<thead>
<tr>
<th align="center">选项</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">-e</td>
<td align="center">后面接卸载的包名即可</td>
</tr>
</tbody></table>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@zls ~]<span class="comment"># rpm -qa | grep nginx nginx-1.12.0-1.el7.ngx.x86_64 </span></span><br><span class="line">[root@zls ~]<span class="comment"># rpm -e nginx </span></span><br><span class="line">[root@zls ~]<span class="comment"># rpm -qa | grep nginx </span></span><br><span class="line">[root@zls ~]<span class="comment"># rpm -qa | grep mariadb </span></span><br><span class="line">mariadb-5.5.68-1.el7.x86_64 </span><br><span class="line">mariadb-server-5.5.68-1.el7.x86_64 </span><br><span class="line">mariadb-libs-5.5.68-1.el7.x86_64 </span><br><span class="line">[root@zls ~]<span class="comment"># rpm -e $(rpm -qa | grep mariadb)</span></span><br></pre></td></tr></table></figure>



<h2 id="镜像站地址"><a href="#镜像站地址" class="headerlink" title="镜像站地址"></a>镜像站地址</h2><ul>
<li><p><a href="http://mirrors.aliyun.com" target="_blank" rel="noopener">阿里云镜像站</a></p>
</li>
<li><p><a href="http://mirrors.163.com/" target="_blank" rel="noopener">网易镜像站</a></p>
</li>
<li><p><a href="https://mirrors.tuna.tsinghua.edu.cn" target="_blank" rel="noopener">清华源</a></p>
</li>
<li><p><a href="https://mirrors.ustc.edu.cn/" target="_blank" rel="noopener">中科大源</a></p>
</li>
<li><p><a href="https://mirrors.huaweicloud.com/home" target="_blank" rel="noopener">华为源</a></p>
</li>
</ul>
<h1 id="yum管理工具"><a href="#yum管理工具" class="headerlink" title="yum管理工具"></a>yum管理工具</h1><blockquote>
<p>什么是yum？</p>
<p>yum 也是一种 rpm 包管理工具，相比于rpm命令，优势是可以自动解决依赖关系</p>
<p>自动解决依赖关系前提条件，你的yum源中要有这些依赖包</p>
<p>什么是yum源？</p>
<p>yum源：可以理解为手机中的应用商店</p>
<p>yum源其他名称：镜像站、yum仓库、rpm仓库</p>
</blockquote>
<h2 id="配置yum源"><a href="#配置yum源" class="headerlink" title="配置yum源"></a>配置yum源</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#使用阿里云的yum源 </span></span><br><span class="line">http://mirrors.aliyun.com</span><br><span class="line"></span><br><span class="line"><span class="comment">#系统中需要的基础yum源 </span></span><br><span class="line">base源：和镜像中的Linux基础rpm包差不多 </span><br><span class="line">epel源：一些扩展安装包</span><br><span class="line"></span><br><span class="line"><span class="comment">#yum源配置文件目录</span></span><br><span class="line">/etc/yum.repos.d/</span><br><span class="line"></span><br><span class="line"><span class="comment">#1.使系统yum源失效</span></span><br><span class="line">[root@localhost ~]<span class="comment"># gzip -r /etc/yum.repos.d/</span></span><br><span class="line"><span class="comment">#2.下载Base源 </span></span><br><span class="line">[root@localhost ~]<span class="comment"># wget -O /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-7.repo </span></span><br><span class="line">[root@localhost ~]<span class="comment"># curl -o /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-7.repo</span></span><br><span class="line"><span class="comment">#3.下载epel源 </span></span><br><span class="line">[root@localhost ~]<span class="comment"># wget -O /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-7.repo </span></span><br><span class="line">[root@localhost ~]<span class="comment"># curl -o /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-7.repo </span></span><br><span class="line">[root@localhost ~]<span class="comment"># ll /etc/yum.repos.d/</span></span><br><span class="line">-rw-r--r-- 1 root root   0 Apr 21 16:22 CentOS-Base.repo</span><br><span class="line">-rw-r--r-- 1 root root 664 Dec 26  2020 epel.repo</span><br><span class="line"></span><br><span class="line">注意：在/etc/yum.repos.d/目录下所有的yum源配置，必须以.repo结尾</span><br></pre></td></tr></table></figure>

<p>查看linux版本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># uname -a</span></span><br><span class="line">Linux localhost.localdomain 3.10.0-957.el7.x86_64 <span class="comment">#1 SMP Thu Nov 8 23:39:32 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux</span></span><br></pre></td></tr></table></figure>

<p>nginx安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#安装nginx服务，使用nginx官方yum源</span></span><br><span class="line">[root@localhost ~]<span class="comment"># vim /etc/yum.repos.d/nginx.repo</span></span><br><span class="line">[nginx-stable]</span><br><span class="line">name=nginx stable repo</span><br><span class="line">baseurl=http://nginx.org/packages/centos/<span class="variable">$releasever</span>/<span class="variable">$basearch</span>/</span><br><span class="line">gpgcheck=1</span><br><span class="line">enabled=1</span><br><span class="line">gpgkey=https://nginx.org/keys/nginx_signing.key</span><br><span class="line">module_hotfixes=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line">[nginx-mainline]</span><br><span class="line">name=nginx mainline repo</span><br><span class="line">baseurl=http://nginx.org/packages/mainline/centos/<span class="variable">$releasever</span>/<span class="variable">$basearch</span>/</span><br><span class="line">gpgcheck=1</span><br><span class="line">enabled=0</span><br><span class="line">gpgkey=https://nginx.org/keys/nginx_signing.key</span><br><span class="line">module_hotfixes=<span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h2 id="yum查询软件包"><a href="#yum查询软件包" class="headerlink" title="yum查询软件包"></a>yum查询软件包</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查询所有仓库软件包</span></span><br><span class="line">[root@localhost ~]<span class="comment"># yum list</span></span><br><span class="line"><span class="comment">#查询系统中已安装的软件包</span></span><br><span class="line">[root@localhost ~]<span class="comment"># yum list installed</span></span><br><span class="line"><span class="comment">#过滤yum仓库中是否有wget包 </span></span><br><span class="line">[root@localhost ~]<span class="comment"># yum list | grep wget</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#查看指定包的详细信息 </span></span><br><span class="line">[root@localhost ~]<span class="comment"># yum info wget</span></span><br><span class="line"><span class="comment">#查看yum仓库中，所有安装包的详细信息 </span></span><br><span class="line">[root@localhost ~]<span class="comment"># yum info</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#查询互联网中所有软件包存在的某个命令</span></span><br><span class="line">[root@localhost ~]<span class="comment"># yum provides nginx</span></span><br><span class="line">[root@localhost ~]<span class="comment"># yum provides ifconfig</span></span><br><span class="line"><span class="comment">##该命令隶属于的包名 </span></span><br><span class="line">net-tools-2.0-0.25.20131004git.el7.x86_64 : Basic networking tools </span><br><span class="line"><span class="comment">##该命令隶属于的仓库 </span></span><br><span class="line">Repo	: @base </span><br><span class="line">Matched from: </span><br><span class="line"><span class="comment">##装完后，命令会在/usr/sbin下叫ifconfig </span></span><br><span class="line">Filename : /usr/sbin/ifconfig</span><br><span class="line"><span class="comment">#根据命令查找属于哪个安装包，最好写命令的绝对路径 </span></span><br><span class="line">[root@localhost ~]<span class="comment"># yum provides */ifconfig</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#查看启用/禁用的软件包</span></span><br><span class="line">[root@localhost ~]<span class="comment"># yum list all</span></span><br></pre></td></tr></table></figure>

<h2 id="yum安装软件包"><a href="#yum安装软件包" class="headerlink" title="yum安装软件包"></a>yum安装软件包</h2><p>yum安装方式： </p>
<ul>
<li>本地安装 </li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#前提该包已经下载在服务器上</span></span><br><span class="line">yum localinstall -y 包名</span><br></pre></td></tr></table></figure>

<ul>
<li>yum源安装 </li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install -y tree</span><br></pre></td></tr></table></figure>

<ul>
<li>网站安装</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install -y http://test.driverzeng.com/Nginx_package/nginx-1.12.2- 3.el7.x86_64.rpm</span><br></pre></td></tr></table></figure>

<p><font color='red'><strong>注意：自动解决依赖关系的前提条件，在你的所有yum源中都要有该软件的依赖包</strong></font></p>
<h2 id="yum重装软件包"><a href="#yum重装软件包" class="headerlink" title="yum重装软件包"></a>yum重装软件包</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum reinstall -y 包名 </span><br><span class="line">作用：误删除了该服务相关的任何一个文件，使用reinstall都可以恢复，但是恢复的是最初始的配置</span><br><span class="line"></span><br><span class="line">reinstall的方式，必须跟最开始安装这个包的方式保持一致</span><br></pre></td></tr></table></figure>

<h2 id="yum更新软件包"><a href="#yum更新软件包" class="headerlink" title="yum更新软件包"></a>yum更新软件包</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查看当前系统中，有哪些软件是可以更新的 </span></span><br><span class="line">[root@localhost ~]<span class="comment"># yum check-update </span></span><br><span class="line"></span><br><span class="line"><span class="comment">#更新指定的软件包 </span></span><br><span class="line">[root@localhost ~]<span class="comment"># yum update -y zlib</span></span><br></pre></td></tr></table></figure>

<h2 id="yum卸载软件包"><a href="#yum卸载软件包" class="headerlink" title="yum卸载软件包"></a>yum卸载软件包</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># yum remove 包名 -y</span></span><br><span class="line">[root@localhost ~]<span class="comment"># yum erase 包名 -y</span></span><br></pre></td></tr></table></figure>

<h2 id="yum中止软件包"><a href="#yum中止软件包" class="headerlink" title="yum中止软件包"></a>yum中止软件包</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#第一个端口</span></span><br><span class="line">[root@localhost ~]<span class="comment"># yum install -y python36-devel</span></span><br><span class="line"><span class="comment">#第二个端口</span></span><br><span class="line">[root@localhost ~]<span class="comment"># yum remove -y tree</span></span><br><span class="line">Loaded plugins: fastestmirror</span><br><span class="line">Existing lock /var/run/yum.pid: another copy is running as pid 7387.</span><br><span class="line">Another app is currently holding the yum lock; waiting <span class="keyword">for</span> it to <span class="built_in">exit</span>...</span><br><span class="line">  The other application is: yum</span><br><span class="line">    Memory :  24 M RSS (419 MB VSZ)</span><br><span class="line">    Started: Sat Apr 23 13:54:25 2022 - 00:05 ago</span><br><span class="line">    State  : Sleeping, pid: 7387</span><br><span class="line">原因：另一个yum进程正在启动</span><br><span class="line"><span class="comment">#查看yum进程</span></span><br><span class="line">[root@localhost ~]<span class="comment"># /var/run/yum.pid</span></span><br><span class="line">37494</span><br><span class="line"><span class="comment">#中止进程</span></span><br><span class="line">[root@localhost ~]<span class="comment"># kill 进程号</span></span><br></pre></td></tr></table></figure>

<h2 id="yum缓存命令"><a href="#yum缓存命令" class="headerlink" title="yum缓存命令"></a>yum缓存命令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#清除所有的缓存 </span></span><br><span class="line">yum clean all</span><br><span class="line"><span class="comment">#加载缓存 </span></span><br><span class="line">yum makecache</span><br><span class="line"></span><br><span class="line"><span class="comment">#默认情况下，yum是不会下载rpm的只会安装 </span></span><br><span class="line"><span class="comment">#除非开启，下载的配置 </span></span><br><span class="line">[root@localhost ~]<span class="comment"># vim /etc/yum.conf </span></span><br><span class="line">[main] cachedir=/var/cache/yum/<span class="variable">$basearch</span>/<span class="variable">$releasever</span> </span><br><span class="line">keepcache=0  <span class="comment">#把0改成1就是开启下载rpm</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#下面是yum下载后的默认路径 </span></span><br><span class="line">[root@localhost ~]<span class="comment"># ll /var/cache/yum/x86_64/7/</span></span><br><span class="line">total 12</span><br><span class="line">drwxr-xr-x. 4 root root  256 Apr 23 13:54 base</span><br><span class="line">drwxr-xr-x  4 root root 4096 Apr 23 13:54 epel</span><br><span class="line">drwxr-xr-x. 4 root root  161 Apr 23 13:54 extras</span><br><span class="line">drwxr-xr-x  4 root root  254 Apr 23 13:54 nginx-stable</span><br><span class="line">-rw-r--r--  1 root root   76 Apr 23 13:55 timedhosts</span><br><span class="line">-rw-r--r--. 1 root root  105 Apr 20 17:50 timedhosts.txt</span><br><span class="line">drwxr-xr-x. 4 root root  161 Apr 23 13:54 updates</span><br><span class="line"></span><br><span class="line"><span class="comment">#下载nginx，不安装，并指定目录 </span></span><br><span class="line">yum install nginx -y --downloadonly --downloaddir=/tmp </span><br><span class="line">--downloadonly：仅下载，不安装 </span><br><span class="line">--downloaddir：指定下载的目录</span><br><span class="line"></span><br><span class="line"><span class="comment">#只会清除默认路径下的rpm包</span></span><br><span class="line">yum clean packages</span><br></pre></td></tr></table></figure>

<h2 id="yum包组管理命令"><a href="#yum包组管理命令" class="headerlink" title="yum包组管理命令"></a>yum包组管理命令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查看有哪些包组可以安装 </span></span><br><span class="line">yum group list</span><br><span class="line"><span class="comment">#安装包组 </span></span><br><span class="line">yum groups install 包组名字 </span><br><span class="line"><span class="comment">#卸载包组 </span></span><br><span class="line">yum groups remove 包组名字</span><br></pre></td></tr></table></figure>

<h2 id="yum历史查询"><a href="#yum历史查询" class="headerlink" title="yum历史查询"></a>yum历史查询</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#显示Command line（一次性）</span></span><br><span class="line">[root@localhost ~]<span class="comment"># yum --setopt=history_list_view=commands history list all</span></span><br><span class="line">------------------------------------------------------------------------------- </span><br><span class="line">[root@localhost ~]<span class="comment"># vim /etc/yum.conf</span></span><br><span class="line"><span class="comment"># edit file "/etc/yum.conf" ==&gt;&gt;&gt; and add this line somewhere in it</span></span><br><span class="line">history_list_view=cmds</span><br><span class="line"><span class="comment">#查看yum的历史操作 </span></span><br><span class="line">[root@localhost ~]<span class="comment"># yum history</span></span><br><span class="line">命令的ID 执行的命令 执行的时间 动作 操作几个包 </span><br><span class="line">ID | Command line | Date and time | Action(s) | Altered </span><br><span class="line">------------------------------------------------------------------------------- </span><br><span class="line">55 | install -y tree | 2022-04-22 00:10 | Install | 1 </span><br><span class="line">54 | install -y yum-utils | 2022-04-21 23:44 | I, U | 5</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看某个历史操作的详细信息 </span></span><br><span class="line">yum <span class="built_in">history</span> info ID </span><br><span class="line">[root@localhost ~]<span class="comment"># yum history info 46</span></span><br><span class="line">[root@localhost ~]<span class="comment"># yum history package-list tree</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#撤销历史操作：一般撤销更新操作 </span></span><br><span class="line">[root@localhost ~]<span class="comment"># yum history undo ID </span></span><br><span class="line">[root@localhost ~]<span class="comment"># yum history undo 55</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>SRE</category>
      </categories>
      <tags>
        <tag>Linux基础</tag>
      </tags>
  </entry>
  <entry>
    <title>[Linux架构]</title>
    <url>/2019/04/19/Linux%E6%9E%B6%E6%9E%84/</url>
    <content><![CDATA[<p><a href="https://rogerxs80.github.io/2019/04/20/%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87/" target="_blank" rel="noopener">1.环境准备</a></p>
<p><a href="https://rogerxs80.github.io/2019/04/22/rsync%E6%95%B0%E6%8D%AE%E5%A4%87%E4%BB%BD/" target="_blank" rel="noopener">2.rsync数据备份</a></p>
<p><a href="https://rogerxs80.github.io/2019/04/23/NFS%E5%85%B1%E4%BA%AB%E5%AD%98%E5%82%A8/" target="_blank" rel="noopener">3.NFS共享存储</a></p>
<p><a href="https://rogerxs80.github.io/2019/04/24/ssh%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5/" target="_blank" rel="noopener">4.ssh连接</a></p>
<p><a href="https://rogerxs80.github.io/2019/04/25/http%E5%8D%8F%E8%AE%AE/" target="_blank" rel="noopener">5.http协议</a></p>
<p><a href="https://rogerxs80.github.io/2019/04/26/Nginx%E6%9C%8D%E5%8A%A1/" target="_blank" rel="noopener">6.Nginx服务</a></p>
<p><a href="https://rogerxs80.github.io/2019/02/20/Bash%E5%88%9D%E8%AF%86/" target="_blank" rel="noopener">7.Ansibe自动化</a></p>
<p><a href="https://rogerxs80.github.io/2019/02/21/%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/" target="_blank" rel="noopener">8.防火墙firewailld</a></p>
]]></content>
      <categories>
        <category>SRE</category>
      </categories>
      <tags>
        <tag>Linxu架构</tag>
      </tags>
  </entry>
  <entry>
    <title>[Nginx服务]</title>
    <url>/2019/04/26/Nginx%E6%9C%8D%E5%8A%A1/</url>
    <content><![CDATA[<h1 id="Nginx服务"><a href="#Nginx服务" class="headerlink" title="Nginx服务"></a>Nginx服务</h1><h2 id="Nginx概述"><a href="#Nginx概述" class="headerlink" title="Nginx概述"></a>Nginx概述</h2><p>Nginx是一个开源且高性能、可靠的Http Web服务、代理服务</p>
<p>开源：直接获取源代码 </p>
<p>高性能：支持海量并发 </p>
<p>可靠：服务稳定</p>
<p><strong>Nginx非常轻量</strong> </p>
<p>功能模块少 (源代码仅保留http与核心模块代码,其余不够核心代码会作为插件来安装) </p>
<p>代码模块化 (易读，便于二次开发，对于开发人员非常友好) </p>
<p><strong>互联网公司都选择Nginx</strong> </p>
<ul>
<li><p>Nginx技术成熟，具备的功能是企业最常使用而且最需要的 </p>
</li>
<li><p>适合当前主流架构趋势, 微服务、云架构、中间层 </p>
</li>
<li><p>统一技术栈, 降低维护成本, 降低技术更新成本</p>
</li>
</ul>
<p><strong>Nginx采用Epool网络模型，Apache采用Select模型</strong> </p>
<ul>
<li><p>Select: 当用户发起一次请求，select模型就会进行一次遍历扫描，从而导致性能低下</p>
</li>
<li><p>Epool: 当用户发起请求，epool模型会直接进行处理，效率高效，并无连接限制</p>
</li>
</ul>
<h2 id="Nginx应用场景"><a href="#Nginx应用场景" class="headerlink" title="Nginx应用场景"></a>Nginx应用场景</h2><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_devops/360%E6%88%AA%E5%9B%BE1872011793144109.png" alt="360截图1872011793144109"></p>
<p><strong>静态WEB软件（主要跑前端代码）</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nginx</span><br><span class="line">apache</span><br><span class="line">IIS</span><br><span class="line">lighttpd</span><br><span class="line">tengine</span><br><span class="line">openresty-nginx</span><br></pre></td></tr></table></figure>

<p><strong>动态WEB软件（主要跑后端代码）</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Tomcat</span><br><span class="line">Resin</span><br><span class="line">weblogic</span><br><span class="line">Jboss</span><br></pre></td></tr></table></figure>

<h2 id="Nginx快速安装"><a href="#Nginx快速安装" class="headerlink" title="Nginx快速安装"></a>Nginx快速安装</h2><p><strong>Nginx的安装方式</strong></p>
<p>1.源码编译=&gt;Nginx (1.版本随意 2.安装复杂 3.升级繁琐 4.规范 5.便于管理) </p>
<p>2.epel仓库=&gt;Nginx (1.版本较低 2.安装简单 3.配置不易读) </p>
<p>3.官方仓库=&gt;Nginx (1.版本较新 2.安装简单 3.配置易读)</p>
<p>Nginx官方网站：<a href="https://nginx.org/" target="_blank" rel="noopener">https://nginx.org/</a></p>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_devops/image-20220530203631900.png" alt="image-20220530203631900"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1.添加nginx官方源 </span></span><br><span class="line">[root@web01 ~]<span class="comment"># vim /etc/yum.repos.d/nginx.repo</span></span><br><span class="line">[nginx-stable]</span><br><span class="line">name=nginx stable repo</span><br><span class="line">baseurl=http://nginx.org/packages/centos/<span class="variable">$releasever</span>/<span class="variable">$basearch</span>/</span><br><span class="line">gpgcheck=1</span><br><span class="line">enabled=1</span><br><span class="line">gpgkey=https://nginx.org/keys/nginx_signing.key</span><br><span class="line">module_hotfixes=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#2.安装nginx </span></span><br><span class="line">[root@web01 ~]<span class="comment"># yum install -y nginx </span></span><br><span class="line"></span><br><span class="line"><span class="comment">#3.启动nginx并加入开机自启 </span></span><br><span class="line">[root@web01 ~]<span class="comment"># systemctl start nginx </span></span><br><span class="line">[root@web01 ~]<span class="comment"># systemctl enable nginx</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#4.查看nginx的版本 </span></span><br><span class="line">[root@web01 ~]<span class="comment"># nginx -v </span></span><br><span class="line">nginx version: nginx/1.22.0</span><br><span class="line"></span><br><span class="line"><span class="comment">#5.查看nginx的版本和源码安装生成步骤的参数有哪些</span></span><br><span class="line">[root@web01 ~]<span class="comment"># nginx -V</span></span><br><span class="line">--prefix=/application/nginx-1.22.0 --user=nginx --group=nginx --with-compat --with-file-aio --with-threads --with-http_addition_module --with-http_auth_request_module --with- http_dav_module --with-http_flv_module --with-http_gunzip_module --with- http_gzip_static_module --with-http_mp4_module --with-http_random_index_module --with- http_realip_module --with-http_secure_link_module --with-http_slice_module --with- http_ssl_module --with-http_stub_status_module --with-http_sub_module --with-http_v2_module --with-mail --with-mail_ssl_module --with-stream --with-stream_realip_module --with- stream_ssl_module --with-stream_ssl_preread_module --with-cc-opt=<span class="string">'-O2 -g -pipe -Wall -Wp,- D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector-strong --param=ssp-buffer-size=4 - grecord-gcc-switches -m64 -mtune=generic -fPIC'</span> --with-ld-opt=<span class="string">'-Wl,-z,relro -Wl,-z,now - pie'</span></span><br></pre></td></tr></table></figure>

<h2 id="Nginx的启停"><a href="#Nginx的启停" class="headerlink" title="Nginx的启停"></a>Nginx的启停</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1.启动 </span></span><br><span class="line">systemctl start nginx </span><br><span class="line">nginx </span><br><span class="line">/目录/nginx/sbin/nginx</span><br><span class="line"></span><br><span class="line"><span class="comment">#2.停止 systemctl stop nginx </span></span><br><span class="line">nginx -s stop </span><br><span class="line">/目录/nginx/sbin/nginx -s stop</span><br><span class="line"></span><br><span class="line"><span class="comment">#3.重新加载 </span></span><br><span class="line">systemctl reload nginx </span><br><span class="line">nginx -s reload </span><br><span class="line">/app/nginx/sbin/nginx -s reload</span><br><span class="line"></span><br><span class="line">-c：指定配置文件的路径 </span><br><span class="line">-t：检查配置文件的语法（无法检测单词拼写） </span><br><span class="line">-s：启停重载，服务操作 </span><br><span class="line">-v：查看版本号 </span><br><span class="line">-V：查看版本和编译参数</span><br><span class="line"></span><br><span class="line"><span class="comment">#nginx启动脚本systemd管理 </span></span><br><span class="line">[root@web01 ~]<span class="comment"># vim /usr/lib/systemd/system/nginx.service </span></span><br><span class="line">[Unit] </span><br><span class="line">Description=nginx - high performance web server </span><br><span class="line">Documentation=http://nginx.org/en/docs/ </span><br><span class="line">After=network-online.target remote-fs.target nss-lookup.target </span><br><span class="line">Wants=network-online.target</span><br><span class="line"></span><br><span class="line">[Service] </span><br><span class="line">Type=forking </span><br><span class="line">PIDFile=/var/run/nginx.pid </span><br><span class="line">ExecStart=/usr/sbin/nginx -c /etc/nginx/nginx.conf </span><br><span class="line">ExecReload=/bin/sh -c <span class="string">"/bin/kill -s HUP <span class="variable">$(/bin/cat /var/run/nginx.pid)</span>"</span></span><br><span class="line">ExecStop=/bin/sh -c <span class="string">"/bin/kill -s TERM <span class="variable">$(/bin/cat /var/run/nginx.pid)</span>"</span></span><br><span class="line"></span><br><span class="line">[Install] </span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line"></span><br><span class="line"><span class="comment">#源码安装，使用fpm打包，脚本内容： </span></span><br><span class="line"><span class="comment">##先写脚本 </span></span><br><span class="line">[root@web01 ~]<span class="comment"># vim post_install_nginx.sh </span></span><br><span class="line">ln -s /application/nginx-1.20.2 /opt/nginx </span><br><span class="line"><span class="built_in">echo</span> <span class="string">'PATH="/usr/local/nginx/sbin:$PATH"'</span> &gt; /etc/profile.d/nginx.sh </span><br><span class="line">cat &gt;&gt; /usr/lib/systemd/system/nginx.service &lt;&lt;EOF </span><br><span class="line">[Unit] </span><br><span class="line">Description=nginx - high performance web server </span><br><span class="line">Documentation=http://nginx.org/en/docs/ </span><br><span class="line">After=network-online.target remote-fs.target nss-lookup.target </span><br><span class="line">Wants=network-online.target </span><br><span class="line"></span><br><span class="line">[Service] </span><br><span class="line">Type=forking </span><br><span class="line">PIDFile=/application/nginx/nginx.pid </span><br><span class="line">ExecStart=/application/nginx/sbin/nginx -c /application/nginx/conf/nginx.conf </span><br><span class="line">ExecReload=/bin/sh -c <span class="string">"/bin/kill -s HUP <span class="variable">$(/bin/cat /application/nginx/nginx.pid)</span>"</span> </span><br><span class="line">ExecStop=/bin/sh -c <span class="string">"/bin/kill -s TERM <span class="variable">$(/bin/cat /application/nginx/nginx.pid)</span>"</span> </span><br><span class="line"></span><br><span class="line">[Install] </span><br><span class="line">WantedBy=multi-user.target </span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<h2 id="Nginx配置文件"><a href="#Nginx配置文件" class="headerlink" title="Nginx配置文件"></a>Nginx配置文件</h2><ul>
<li>Nginx主配置文件</li>
</ul>
<table>
<thead>
<tr>
<th align="center">路径</th>
<th align="center">类型</th>
<th align="center">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center">/etc/nginx/nginx.conf</td>
<td align="center">配置文件</td>
<td align="center">nginx主配置文件</td>
</tr>
<tr>
<td align="center">/etc/nginx/conf.d/default.conf</td>
<td align="center">配置文件</td>
<td align="center">nginx网站示例配置文件</td>
</tr>
</tbody></table>
<ul>
<li>Nginx代理相关参数文件</li>
</ul>
<table>
<thead>
<tr>
<th align="center">路径</th>
<th align="center">类型</th>
<th align="center">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center">/etc/nginx/fastcgi_params</td>
<td align="center">配置文件</td>
<td align="center">Fastcgi代理配置文件</td>
</tr>
<tr>
<td align="center">/etc/nginx/scgi_params</td>
<td align="center">配置文件</td>
<td align="center">scgi代理配置文件</td>
</tr>
<tr>
<td align="center">/etc/nginx/uwsgi_params</td>
<td align="center">配置文件</td>
<td align="center">uwsgi代理配置文件</td>
</tr>
</tbody></table>
<ul>
<li>Nginx编码相关配置文件 </li>
</ul>
<table>
<thead>
<tr>
<th align="center">路径</th>
<th align="center">类型</th>
<th align="center">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center">/etc/nginx/win-utf</td>
<td align="center">配置文件</td>
<td align="center">Nginx编码转换映射文件</td>
</tr>
<tr>
<td align="center">/etc/nginx/koi-utf</td>
<td align="center">配置文件</td>
<td align="center">Nginx编码转换映射文件</td>
</tr>
<tr>
<td align="center">/etc/nginx/koi-win</td>
<td align="center">配置文件</td>
<td align="center">Nginx编码转换映射文件</td>
</tr>
<tr>
<td align="center">/etc/nginx/mime.types（*）</td>
<td align="center">配置文件</td>
<td align="center">Content-Type与扩展名</td>
</tr>
</tbody></table>
<ul>
<li>Nginx管理相关命令</li>
</ul>
<table>
<thead>
<tr>
<th align="center">路径</th>
<th align="center">类型</th>
<th align="center">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center">/usr/sbin/nginx</td>
<td align="center">配置文件</td>
<td align="center">Nginx命令行管理终端工具</td>
</tr>
<tr>
<td align="center">/usr/sbin/nginx-debug</td>
<td align="center">配置文件</td>
<td align="center">Nginx命令行与终端调试工具</td>
</tr>
</tbody></table>
<ul>
<li>Nginx日志相关目录与文件</li>
</ul>
<table>
<thead>
<tr>
<th align="center">路径</th>
<th align="center">类型</th>
<th align="center">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center">/var/log/nginx</td>
<td align="center">目录</td>
<td align="center">Nginx默认存放日志目录</td>
</tr>
<tr>
<td align="center">/etc/logrotate.d/nginx</td>
<td align="center">配置文件</td>
<td align="center">Nginx默认的日志切割</td>
</tr>
</tbody></table>
<h2 id="Nginx配置文件详解"><a href="#Nginx配置文件详解" class="headerlink" title="Nginx配置文件详解"></a>Nginx配置文件详解</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#nginx主配置文件 </span></span><br><span class="line">[root@web02 nginx]<span class="comment"># grep -Ev '^$|#' /etc/nginx/nginx.conf</span></span><br><span class="line">注意:nginx配置文件，每一行，都<span class="string">';'</span>结尾</span><br><span class="line">[root@web01 nginx]<span class="comment"># vim /etc/nginx/nginx.conf</span></span><br><span class="line"><span class="comment">##核心层（核心模块）、全局配置</span></span><br><span class="line"><span class="comment">#nginx启动用户配置</span></span><br><span class="line">user nginx;</span><br><span class="line"><span class="comment">#nginx工作线程数量（cpu亲和） </span></span><br><span class="line">worker_processes auto;  <span class="comment">#auto：自动根据cpu的核心数来启动对应的工作进程数</span></span><br><span class="line"><span class="comment">#错误日志 日志路径 日志级别 </span></span><br><span class="line">error_log /var/<span class="built_in">log</span>/nginx/error.log notice;</span><br><span class="line"><span class="comment">#程序启动进程号（pid号）存放的路径 </span></span><br><span class="line">pid /var/run/nginx.pid;</span><br><span class="line"></span><br><span class="line"><span class="comment">##事件层（事件模块）</span></span><br><span class="line">events &#123; </span><br><span class="line">	<span class="comment">#一个worker进程的最大连接数 </span></span><br><span class="line">	worker_connections 1024; </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">##http层，http模块、网站配置</span></span><br><span class="line">http &#123;</span><br><span class="line">	<span class="comment">#浏览器中，默认可以解析的格式（不需要下载的格式） </span></span><br><span class="line">	include /etc/nginx/mime.types;</span><br><span class="line">	<span class="comment">#浏览器中，以下格式，点击后直接下载不解析（安装软件的格式） </span></span><br><span class="line">	default_type application/octet-stream;</span><br><span class="line">	<span class="comment">#日志格式 格式名字 日志格式 </span></span><br><span class="line">	log_format main <span class="string">'$remote_addr - $remote_user [$time_local] "$request" '</span> </span><br><span class="line">					<span class="string">'$status $body_bytes_sent "$http_referer" '</span> </span><br><span class="line">					<span class="string">'"$http_user_agent" "$http_x_forwarded_for"'</span>;</span><br><span class="line">	<span class="comment">#访问日志 日志路径 调用日志格式名字 </span></span><br><span class="line">	access_log /var/<span class="built_in">log</span>/nginx/access.log main;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">#文件传输的优化配置 </span></span><br><span class="line">	sendfile on;</span><br><span class="line">	<span class="comment">#tcp_nopush on;</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">#长链接，超时时间 65s </span></span><br><span class="line">	keepalive_timeout 65;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">#数据传输过程中，使用gzip压缩 </span></span><br><span class="line">	<span class="comment">#gzip on;</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">#包含 nginx其他子配置文件（网站虚拟主机配置文件server） </span></span><br><span class="line">	include /etc/nginx/conf.d/*.conf;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#日志格式 </span></span><br><span class="line"><span class="variable">$remote_addr</span>：远端的IP（上一个节点的IP） </span><br><span class="line"><span class="variable">$remote_user</span>：登录的用户 </span><br><span class="line">[<span class="variable">$time_local</span>]：时间 </span><br><span class="line"><span class="string">"<span class="variable">$request</span>"</span>：请求方式、请求uri、HTTP协议版本号 </span><br><span class="line"><span class="variable">$status</span>：状态码 </span><br><span class="line"><span class="variable">$body_bytes_sent</span>：流量 </span><br><span class="line"><span class="string">"<span class="variable">$http_referer</span>"</span>：跳转地址（从哪个网站跳转过来的） </span><br><span class="line"><span class="string">"<span class="variable">$http_user_agent</span>"</span>：客户端浏览器相关信息</span><br><span class="line"><span class="string">"<span class="variable">$http_x_forwarded_for</span>"</span>：记录透传IP地址（获取用户的真实IP）</span><br><span class="line"><span class="variable">$request_length</span>：请求的长度（包括请求行， 请求头和请求正文）。</span><br><span class="line"><span class="variable">$request_time</span>：请求花费的时间，单位为秒，精度毫秒</span><br><span class="line"><span class="comment">#注:如果Nginx位于负载均衡器，nginx反向代理之后，web服务器无法直接获取到客 户端真实的IP地址</span></span><br><span class="line"><span class="comment">#$remote_addr获取的是反向代理的IP地址。反向代理服务器在转发请求的http头信息中，增加X-Forwarded-For信息，用来记录客户端IP地址和客户端请求的服务器地址</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#access_log日志配置语法</span></span><br><span class="line">Syntax: access_log path [format [buffer=size] [gzip[=level]] [flush=time] [<span class="keyword">if</span>=condition]];</span><br><span class="line">access_log off;</span><br><span class="line">Default: access_log logs/access.log combined;</span><br><span class="line">Context: http, server, location, <span class="keyword">if</span> <span class="keyword">in</span> location, limit_except</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#虚拟主机配置文件 </span></span><br><span class="line">server &#123; </span><br><span class="line">	<span class="comment">#该网站的监听端口 </span></span><br><span class="line">	listen 80; </span><br><span class="line">	<span class="comment">#该网站的主机IP或域名 </span></span><br><span class="line">	server_name localhost;</span><br><span class="line">	<span class="comment">#该网站的日志路径及日志格式 </span></span><br><span class="line">	<span class="comment">#access_log /var/log/nginx/host.access.log main;</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">#uri跳转 </span></span><br><span class="line">	location / &#123; </span><br><span class="line">		<span class="comment">#站点目录 </span></span><br><span class="line">		root /usr/share/nginx/html; </span><br><span class="line">		<span class="comment">#默认首页，索引页面 </span></span><br><span class="line">		index index.html roger.html; </span><br><span class="line">	&#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http&#123;</span><br><span class="line">	access_log /var/<span class="built_in">log</span>/nginx/access.log main;</span><br><span class="line">	</span><br><span class="line">	server&#123; </span><br><span class="line">		listen 80; server_name www.baidu.com; </span><br><span class="line">		... </span><br><span class="line">		access_log /var/<span class="built_in">log</span>/nginx/www.baidu.com.access.log main; </span><br><span class="line">	&#125;</span><br><span class="line">	server&#123; </span><br><span class="line">		listen 80; server_name zhidao.baidu.com; </span><br><span class="line">		... </span><br><span class="line">		access_log /var/<span class="built_in">log</span>/nginx/zhidao.baidu.com.access.log main; </span><br><span class="line">	&#125;</span><br><span class="line">	server&#123; </span><br><span class="line">		listen 80; server_name map.baidu.com; </span><br><span class="line">		... </span><br><span class="line">		access_log /var/<span class="built_in">log</span>/nginx/map.baidu.com.access.log main;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="多虚拟主机（多web网站配置）"><a href="#多虚拟主机（多web网站配置）" class="headerlink" title="多虚拟主机（多web网站配置）"></a>多虚拟主机（多web网站配置）</h2><p>在企业中，是不可能用一个nginx对应一套业务，多个网站都在一个nginx中配置</p>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_devops/15652467829612.jpg" alt="15652467829612"></p>
<p><strong>基于IP的多虚拟主机</strong></p>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_devops/image-20220531214136912.png" alt="image-20220531214136912"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@web01 conf.d]<span class="comment"># ifconfig eth0:0 10.0.0.10 </span></span><br><span class="line">[root@web01 conf.d]<span class="comment"># ifconfig eth0:1 10.0.0.11</span></span><br><span class="line"></span><br><span class="line">[root@web01 conf.d]<span class="comment"># vim 1_game.conf</span></span><br><span class="line">server&#123; </span><br><span class="line">	listen 80; </span><br><span class="line">	server_name 10.0.0.10; </span><br><span class="line">	</span><br><span class="line">	location /&#123; </span><br><span class="line">		root /game/h5_games; </span><br><span class="line">		index index.html; </span><br><span class="line">	&#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[root@web01 conf.d]<span class="comment"># vim 1_roger.conf</span></span><br><span class="line">server&#123; </span><br><span class="line">	listen 80; </span><br><span class="line">	server_name 10.0.0.11; </span><br><span class="line">	root /code; </span><br><span class="line">	</span><br><span class="line">	location /&#123; </span><br><span class="line">		index index.html; </span><br><span class="line">	&#125;</span><br><span class="line">	location /roger&#123; </span><br><span class="line">		index index_1.html roger.html; </span><br><span class="line">	&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>基于多端口的虚拟主机</strong></p>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_devops/image-20220531214817767.png" alt="image-20220531214817767"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@web01 conf.d]<span class="comment"># vim game.conf </span></span><br><span class="line">server&#123; </span><br><span class="line">	listen 8081; </span><br><span class="line">	server_name 10.0.0.7; </span><br><span class="line">	</span><br><span class="line">	location /&#123; </span><br><span class="line">		root /game/h5_games; </span><br><span class="line">		index index.html; </span><br><span class="line">	&#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[root@web01 conf.d]<span class="comment"># vim roger.conf </span></span><br><span class="line">server&#123; </span><br><span class="line">	listen 8082; </span><br><span class="line">	server_name 10.0.0.7; </span><br><span class="line">	root /code; </span><br><span class="line"></span><br><span class="line">	location /&#123; </span><br><span class="line">		index index.html; </span><br><span class="line">	&#125;</span><br><span class="line">	location /roger&#123; </span><br><span class="line">		index index_1.html roger.html; </span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>基于多域名的虚拟主机</strong></p>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_devops/image-20220531214931959.png" alt="image-20220531214931959"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@web01 conf.d]<span class="comment"># vim blog.roger.com.conf </span></span><br><span class="line">server&#123;</span><br><span class="line">        listen 80;</span><br><span class="line">        server_name blog.roger.com;</span><br><span class="line">        root /roger1;</span><br><span class="line">        index index.html;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[root@web01 conf.d]<span class="comment"># vim www.roger.com.conf </span></span><br><span class="line">server&#123; </span><br><span class="line">    listen 80; </span><br><span class="line">    server_name www.roger.com; </span><br><span class="line">    root /roger; </span><br><span class="line">    index index.html; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在windows系统中，配置本地的DNS</p>
<p>1.按win+r打开运行</p>
<p>2.输入：drivers</p>
<p>3.进入与etc目录</p>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_devops/image-20220531222142820.png" alt="image-20220531222142820"></p>
<p>访问不到：</p>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_devops/image-20220531222619360.png" alt="image-20220531222619360"></p>
<h2 id="Nginx日志切割"><a href="#Nginx日志切割" class="headerlink" title="Nginx日志切割"></a>Nginx日志切割</h2><p>使用<code>logrotate</code>切割日志</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@nginx conf.d]<span class="comment"># cat /etc/logrotate.d/nginx</span></span><br><span class="line">/var/<span class="built_in">log</span>/nginx/*.<span class="built_in">log</span> &#123;</span><br><span class="line">        daily                   <span class="comment">#每天切割日志</span></span><br><span class="line">        missingok               <span class="comment">#日志丢失忽略</span></span><br><span class="line">        rotate 52               <span class="comment">#日志保留52天</span></span><br><span class="line">        compress                <span class="comment">#日志文件压缩</span></span><br><span class="line">        delaycompress           <span class="comment">#延迟压缩日志</span></span><br><span class="line">        notifempty              <span class="comment">#不切割空文件</span></span><br><span class="line">        create 640 nginx adm    <span class="comment">#日志文件权限</span></span><br><span class="line">        sharedscripts</span><br><span class="line">        postrotate      		<span class="comment">#切割日志执行的命令</span></span><br><span class="line">                <span class="keyword">if</span> [ -f /var/run/nginx.pid ]; <span class="keyword">then</span></span><br><span class="line">                        <span class="built_in">kill</span> -USR1 `cat /var/run/nginx.pid`</span><br><span class="line">                <span class="keyword">fi</span></span><br><span class="line">        endscript</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>日志切割后的效果</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@oldboy ~]<span class="comment"># ll /var/log/nginx/</span></span><br><span class="line">total 4044</span><br><span class="line">-rw-r----- 1 www adm  54438 Oct 12 03:28 access.log-20181012.gz</span><br><span class="line">-rw-r----- 1 www adm  28657 Oct 13 03:48 access.log-20181013.gz</span><br><span class="line">-rw-r----- 1 www adm  10135 Oct 12 03:28 error.log-20181130.gz</span><br><span class="line">-rw-r----- 1 www adm   7452 Oct 13 03:48 error.log-20181201.gz</span><br></pre></td></tr></table></figure>

<h1 id="Nginx常用模块"><a href="#Nginx常用模块" class="headerlink" title="Nginx常用模块"></a>Nginx常用模块</h1><h2 id="Nginx目录索引模块"><a href="#Nginx目录索引模块" class="headerlink" title="Nginx目录索引模块"></a>Nginx目录索引模块</h2><p><code>ngx_http_autoindex_module</code> 模块处理以斜杠字符（’/‘）结尾的请求，并生成目录列表</p>
<p>当 <code>ngx_http_index_module</code> 模块找不到索引文件时，通常会将请求传递给 <code>ngx_http_autoindex_module</code> 模块</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Syntax: autoindex on | off; </span><br><span class="line">Default: </span><br><span class="line">autoindex off; </span><br><span class="line">Context: http, server, location</span><br><span class="line"></span><br><span class="line">server&#123;</span><br><span class="line">	<span class="comment">#监听端口 </span></span><br><span class="line">	listen 80; </span><br><span class="line">	<span class="comment">#域名（ip，localhost，_，域名） </span></span><br><span class="line">	server_name _; </span><br><span class="line">	</span><br><span class="line">	<span class="comment">#uri </span></span><br><span class="line">	location /&#123; </span><br><span class="line">        <span class="comment">#站点目录（代码存放目录） </span></span><br><span class="line">        root /<span class="built_in">test</span>; </span><br><span class="line">        <span class="comment">#目录索引模块 开启; </span></span><br><span class="line">        autoindex on; </span><br><span class="line">        <span class="comment">#显示带单位的大小 </span></span><br><span class="line">        autoindex_exact_size off; </span><br><span class="line">        <span class="comment">#目录索引页面显示格式（默认html） </span></span><br><span class="line">        <span class="comment">#autoindex_format json; </span></span><br><span class="line">        <span class="comment">#显示本地时间 </span></span><br><span class="line">        autoindex_localtime on; </span><br><span class="line">	&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="windows启用telnet命令"><a href="#windows启用telnet命令" class="headerlink" title="windows启用telnet命令"></a>windows启用telnet命令</h3><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_devops/image-20220606203421218.png" alt="image-20220606203421218"></p>
<h2 id="Nginx状态模块"><a href="#Nginx状态模块" class="headerlink" title="Nginx状态模块"></a>Nginx状态模块</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@web01 conf.d]<span class="comment"># cat sub_stat.conf</span></span><br><span class="line">server&#123; </span><br><span class="line">	listen 80; </span><br><span class="line">	server_name _; </span><br><span class="line">	</span><br><span class="line">	location /&#123; </span><br><span class="line">		root /<span class="built_in">test</span>; </span><br><span class="line">		autoindex on; </span><br><span class="line">		autoindex_exact_size off; </span><br><span class="line">		<span class="comment">#autoindex_format json; </span></span><br><span class="line">		autoindex_localtime on; </span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">	location /roger&#123; </span><br><span class="line">		stub_status; </span><br><span class="line">	&#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#状态属性</span></span><br><span class="line">Active connections  <span class="comment">#当前活动的连接数</span></span><br><span class="line">accepts             <span class="comment">#当前的总连接数TCP</span></span><br><span class="line">handled             <span class="comment">#成功的连接数TCP</span></span><br><span class="line">requests            <span class="comment">#总的http请求数</span></span><br><span class="line"> </span><br><span class="line">Reading             <span class="comment">#请求</span></span><br><span class="line">Writing             <span class="comment">#响应</span></span><br><span class="line">Waiting             <span class="comment">#等待的请求数，开启了keepalive</span></span><br><span class="line"> </span><br><span class="line">注意, 一次TCP的连接，可以发起多次http的请求, 如下参数可配置进行验证</span><br><span class="line">keepalive_timeout  0;   <span class="comment">#类似于关闭长连接</span></span><br><span class="line">keepalive_timeout  65;  <span class="comment">#65s没有活动则断开连接</span></span><br></pre></td></tr></table></figure>

<h2 id="Nginx访问控制模块"><a href="#Nginx访问控制模块" class="headerlink" title="Nginx访问控制模块"></a>Nginx访问控制模块</h2><h3 id="基于用户密码-auth-basic"><a href="#基于用户密码-auth-basic" class="headerlink" title="基于用户密码(auth_basic)"></a>基于用户密码(auth_basic)</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#安装htpasswd命令 </span></span><br><span class="line">[root@web01 conf.d]<span class="comment"># yum install -y httpd </span></span><br><span class="line"><span class="comment">#创建存放认证文件的目录 </span></span><br><span class="line">[root@web01 nginx]<span class="comment"># mkdir /etc/nginx/auth </span></span><br><span class="line"><span class="comment">#创建认证文件</span></span><br><span class="line">-b：允许命令行中输入密码 </span><br><span class="line">-c：创建一个新文件，将用户名和密码保存到指定文件中</span><br><span class="line">[root@web01 nginx]<span class="comment"># htpasswd -b -c /etc/nginx/auth/roger_auth roger 123</span></span><br><span class="line"><span class="comment">#查看认证文件内容 </span></span><br><span class="line">[root@web01 nginx]<span class="comment"># cat /etc/nginx/auth/roger_auth</span></span><br><span class="line">roger:<span class="variable">$apr1</span><span class="variable">$ohAvPJlj</span><span class="variable">$I8viSCSG8FjwOE4z8VelQ</span>.</span><br><span class="line"><span class="comment">#修改nginx配置文件，添加认证</span></span><br><span class="line">[root@web01 nginx]<span class="comment"># vim /etc/nginx/conf.d/sub_stat.conf</span></span><br><span class="line">server&#123; </span><br><span class="line">	listen 80; </span><br><span class="line">	server_name _; </span><br><span class="line">	auth_basic <span class="string">"password is 123"</span>; </span><br><span class="line">	auth_basic_user_file /etc/nginx/auth/roger_auth; </span><br><span class="line">	</span><br><span class="line">	location /&#123; </span><br><span class="line">		root /<span class="built_in">test</span>; </span><br><span class="line">		autoindex on; </span><br><span class="line">		autoindex_exact_size off; </span><br><span class="line">		<span class="comment">#autoindex_format json; </span></span><br><span class="line">		autoindex_localtime on; </span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	location /roger&#123; </span><br><span class="line">		stub_status; </span><br><span class="line">	&#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#追加用户</span></span><br><span class="line">[root@web01 ~]<span class="comment"># htpasswd -b /etc/nginx/auth/roger_auth zls 123</span></span><br><span class="line">[root@web01 ~]<span class="comment"># cat /etc/nginx/auth/roger_auth </span></span><br><span class="line">roger:<span class="variable">$apr1</span><span class="variable">$ohAvPJlj</span><span class="variable">$I8viSCSG8FjwOE4z8VelQ</span>.</span><br><span class="line">zls:<span class="variable">$apr1</span><span class="variable">$txPXciw9</span><span class="variable">$mgO3UhGuXkNhu7j4WvLre</span>.</span><br></pre></td></tr></table></figure>

<h3 id="基于IP访问控制-access"><a href="#基于IP访问控制-access" class="headerlink" title="基于IP访问控制(access)"></a>基于IP访问控制(access)</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server&#123; </span><br><span class="line">	listen 80; server_name _; </span><br><span class="line">	auth_basic <span class="string">"password is 123"</span>; </span><br><span class="line">	auth_basic_user_file auth/zls_auth; </span><br><span class="line">	</span><br><span class="line">	location /&#123; </span><br><span class="line">		root /<span class="built_in">test</span>; </span><br><span class="line">		autoindex on; </span><br><span class="line">		autoindex_exact_size off; </span><br><span class="line">		<span class="comment">#autoindex_format json; </span></span><br><span class="line">		autoindex_localtime on; </span><br><span class="line">		<span class="comment">#只允许10.0.0.8访问</span></span><br><span class="line">		allow 10.0.0.8; </span><br><span class="line">		deny all; </span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	location /roger&#123; </span><br><span class="line">		stub_status; </span><br><span class="line">	&#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">curl http://用户名:密码@10.0.0.7</span><br><span class="line"></span><br><span class="line">注意：默认nginx是allow all;如果只允许某一个IP需要配合deny all使用，deny all;要放在最下面</span><br></pre></td></tr></table></figure>

<h2 id="访问频率限制"><a href="#访问频率限制" class="headerlink" title="访问频率限制"></a>访问频率限制</h2><h3 id="连接频率限制（limit-conn）"><a href="#连接频率限制（limit-conn）" class="headerlink" title="连接频率限制（limit_conn）"></a>连接频率限制（limit_conn）</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">http&#123;</span><br><span class="line">	limit_conn_zone <span class="variable">$remote_addr</span> zone=内存空间的名字:10m; </span><br><span class="line">	server &#123; </span><br><span class="line">		limit_conn 内存空间的名字 1; </span><br><span class="line">	&#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">conn_zone:内存空间的名字 </span><br><span class="line">1：连接次数</span><br></pre></td></tr></table></figure>

<h3 id="请求频率限制（limit-req）"><a href="#请求频率限制（limit-req）" class="headerlink" title="请求频率限制（limit_req）"></a>请求频率限制（limit_req）</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#http标签段定义请求限制, rate限制速率，限制一秒钟最多一个IP请求</span></span><br><span class="line">http &#123;</span><br><span class="line">	limit_req_zone <span class="variable">$binary_remote_addr</span> zone=req_zone:10m rate=1r/s; </span><br><span class="line">&#125;</span><br><span class="line">server &#123; </span><br><span class="line">	listen 80; </span><br><span class="line">	server_name module.oldboy.com;</span><br><span class="line">    <span class="comment">#1r/s只接收一个请求,其余请求拒绝处理并返回错误码给客户端 </span></span><br><span class="line">    <span class="comment">#limit_req zone=req_zone; </span></span><br><span class="line">    <span class="comment">#请求超过1r/s,剩下的将被延迟处理,请求数超过burst定义的数量, 多余的请求返回503 </span></span><br><span class="line">    limit_req zone=req_zone burst=3 nodelay; </span><br><span class="line">    </span><br><span class="line">    location /&#123; </span><br><span class="line">    	root /code; </span><br><span class="line">    	index index.html; </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#请求频率限制错误页面优化</span></span><br><span class="line">[root@web01 ~]<span class="comment"># vim /etc/nginx/conf.d/sub_stat.conf </span></span><br><span class="line">http &#123;</span><br><span class="line">	limit_req_zone <span class="variable">$binary_remote_addr</span> zone=req_zone:10m rate=1r/s; </span><br><span class="line">&#125;</span><br><span class="line">server&#123; </span><br><span class="line">	listen 80; </span><br><span class="line">	server_name _; </span><br><span class="line">	auth_basic <span class="string">"password is 123"</span>; </span><br><span class="line">	auth_basic_user_file auth/zls_auth; </span><br><span class="line">	limit_req zone=req_zone burst=3 nodelay; </span><br><span class="line">	limit_req_status 508;  <span class="comment">#（400 - 599之间） </span></span><br><span class="line">	error_page 508 /508.html; </span><br><span class="line">	</span><br><span class="line">	location /&#123; </span><br><span class="line">		root /<span class="built_in">test</span>; </span><br><span class="line">		autoindex on; </span><br><span class="line">		autoindex_exact_size off; </span><br><span class="line">		<span class="comment">#autoindex_format json; </span></span><br><span class="line">		autoindex_localtime on; </span><br><span class="line">		<span class="comment">#allow 10.0.0.8; </span></span><br><span class="line">		<span class="comment">#deny all;</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    location /roger&#123; </span><br><span class="line">    	stub_status; </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="location优先级"><a href="#location优先级" class="headerlink" title="location优先级"></a>location优先级</h2><table>
<thead>
<tr>
<th align="center">匹配符</th>
<th align="center">匹配规则</th>
<th align="center">优先级</th>
</tr>
</thead>
<tbody><tr>
<td align="center">=</td>
<td align="center">精确匹配</td>
<td align="center">1</td>
</tr>
<tr>
<td align="center">^~</td>
<td align="center">以某个字符串开头</td>
<td align="center">2</td>
</tr>
<tr>
<td align="center">~</td>
<td align="center">区分大小写的正则匹配</td>
<td align="center">3</td>
</tr>
<tr>
<td align="center">~*</td>
<td align="center">不区分大小写的正则匹配</td>
<td align="center">4</td>
</tr>
<tr>
<td align="center">!~</td>
<td align="center">区分大小写不匹配的正则</td>
<td align="center">5</td>
</tr>
<tr>
<td align="center">!~*</td>
<td align="center">不区分大小写不匹配的正则</td>
<td align="center">6</td>
</tr>
<tr>
<td align="center">/</td>
<td align="center">通用匹配，任何请求都会匹配到</td>
<td align="center">7</td>
</tr>
</tbody></table>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#通用匹配，任何请求都会匹配到 </span></span><br><span class="line">location / &#123; </span><br><span class="line">	... </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#严格区分大小写，匹配以.php结尾的都走这个location </span></span><br><span class="line">location ~ \.php$ &#123; </span><br><span class="line">	... </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#严格区分大小写，匹配以.jsp结尾的都走这个location </span></span><br><span class="line">location ~ \.jsp$ &#123; </span><br><span class="line">	... </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#不区分大小写匹配，只要用户访问.jpg,gif,png,js,css 都走这条location </span></span><br><span class="line">location ~* .*\.(jpg|gif|png|js|css)$ &#123; </span><br><span class="line">	... </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location ~* \.(jpg|gif|png|js|css)$ &#123; </span><br><span class="line">	...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#不区分大小写匹配 </span></span><br><span class="line">location ~* <span class="string">"\.(sql|bak|tgz|tar.gz|.git)$"</span> &#123; </span><br><span class="line">	...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Nginx实现web架构"><a href="#Nginx实现web架构" class="headerlink" title="Nginx实现web架构"></a>Nginx实现web架构</h1><h2 id="企业中网站架构"><a href="#企业中网站架构" class="headerlink" title="企业中网站架构"></a>企业中网站架构</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">LNMP:Linux Nginx MySQL PHP </span><br><span class="line">LAMP:Linux Apache MySQL PHP </span><br><span class="line">LNMT:Linux Nginx MySQL Tomcat </span><br><span class="line">LAMT:Linux Apache MySQL Tomcat</span><br><span class="line"></span><br><span class="line">Nginx Apache：运行html css js </span><br><span class="line">PHP：运行php代码 </span><br><span class="line">Tomcat：运行Java代码</span><br></pre></td></tr></table></figure>

<h2 id="LNMP架构概述"><a href="#LNMP架构概述" class="headerlink" title="LNMP架构概述"></a>LNMP架构概述</h2><p><strong>什么是LNMP</strong> </p>
<p>LNMP是一套技术的组合，L=Linux、N=Nginx、M=MySQL、P=PHP</p>
<p><strong>LNMP架构是如何工作的</strong></p>
<p>当用户发起http请求，请求会被Nginx处理，如果是静态资源请求Nginx则直接返回，如果是动态请求Nginx则通过fastcgi协议转交给后端的PHP程序处理，具体如下图所示</p>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_devops/360%E6%88%AA%E5%9B%BE174209167911470.png" alt="360截图174209167911470"></p>
<p><strong>Nginx与Fast-CGO详细工作流程</strong></p>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_devops/image-20220607201555268.png" alt="image-20220607201555268"></p>
<p>1.用户通过http协议发起请求，请求会先抵达LNMP架构中的Nginx </p>
<p>2.Nginx会根据用户的请求进行判断，这个判断是有Location进行完成 </p>
<p>3.判断用户请求的是静态页面，Nginx直接进行处理 </p>
<p>4.判断用户请求的是动态页面，Nginx会将该请求交给fastcgi协议下发 </p>
<p>5.fastgi会将请求交给php-fpm管理进程, php-fpm管理进程接收到后会调用具体的工作进程warrap </p>
<p>6.warrap进程会调用php程序进行解析,如果只是解析代码php直接返回 </p>
<p>7.如果有查询数据库操作，则由php连接数据库(用户 密码 IP)发起查询的操作 </p>
<p>8.最终数据由mysql-&gt;php-&gt;php-fpm-&gt;fastcgi-&gt;nginx-&gt;http-&gt;user</p>
<h2 id="部署PHP"><a href="#部署PHP" class="headerlink" title="部署PHP"></a>部署PHP</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1.卸载Linux自带的旧版本php </span></span><br><span class="line">[root@web01 ~]<span class="comment"># yum remove php-mysql-5.4 php php-fpm php-common</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#2.添加php第三方源 </span></span><br><span class="line">[root@nginx ~]<span class="comment"># vim /etc/yum.repos.d/php.repo</span></span><br><span class="line">[php-webtatic] </span><br><span class="line">name = PHP Repository </span><br><span class="line">baseurl = http://us-east.repo.webtatic.com/yum/el7/x86_64/ </span><br><span class="line">gpgcheck = 0</span><br><span class="line">或者</span><br><span class="line">yum -y install epel-release yum-utils</span><br><span class="line">rpm -Uvh http://mirror.webtatic.com/yum/el6/latest.rpm</span><br><span class="line">rpm -ivh http://rpms.famillecollet.com/enterprise/remi-release-7.rpm</span><br><span class="line">yum install -y --enablerepo=remi --enablerepo=remi-php74 mod_php php-gd* php php-opcache php-mbstring php-mysqlnd php-phpunit-PHPUnit php-pecl-xdebug php-pecl-xhprof php-fpm</span><br><span class="line">yum install -y --enablerepo=remi --enablerepo=remi-php74 php-cli php-redis php-pecl-mcrypt php-process php-devel php-pear</span><br><span class="line">php --version                      <span class="comment">#查看版本</span></span><br><span class="line">php -m                             <span class="comment">#查看安装模块，需要用到的模块，没有安装的需要YUM安装</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#3.安装php </span></span><br><span class="line">[root@web01 ~]<span class="comment"># yum -y install php71w php71w-cli php71w-common php71w-devel php71w-embedded php71w-gd php71w-mcrypt php71w-mbstring php71w-pdo php71w-xml php71w-fpm php71w-mysqlnd php71w-opcache php71w-pecl-memcached php71w-pecl-redis php71w-pecl-mongodb --downloadonly --downloaddir=/tmp</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#4.创建用户 </span></span><br><span class="line">[root@web01 ~]<span class="comment"># groupadd www -g 666 </span></span><br><span class="line">[root@web01 ~]<span class="comment"># useradd www -u 666 -g 666 -s /sbin/nologin -M </span></span><br><span class="line"></span><br><span class="line"><span class="comment">#5.修改nginx运行用户 </span></span><br><span class="line">[root@web01 ~]<span class="comment"># vim /etc/nginx/nginx.conf </span></span><br><span class="line">user www;</span><br><span class="line">[root@web01 ~]<span class="comment"># systemctl reload nginx </span></span><br><span class="line"></span><br><span class="line">php-fpm作用：用来管理php程序运行 </span><br><span class="line"><span class="comment">#php相关配置文件 </span></span><br><span class="line">/etc/php-fpm.conf  <span class="comment">#php管理进程配置文件 </span></span><br><span class="line">/etc/php.ini  <span class="comment">#php程序配置文件 </span></span><br><span class="line">/etc/php-fpm.d/www.conf  <span class="comment">#php管理进程的子配置文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#6.修改php的启动用户 </span></span><br><span class="line">[root@web01 ~]<span class="comment"># vim /etc/php-fpm.d/www.conf </span></span><br><span class="line">[www] </span><br><span class="line">user = www </span><br><span class="line">group = www</span><br><span class="line"></span><br><span class="line">注意：php配置文件中;是注释 </span><br><span class="line"></span><br><span class="line"><span class="comment">#7.启动php并加入开机自启 </span></span><br><span class="line">[root@web01 ~]<span class="comment"># systemctl start php-fpm </span></span><br><span class="line">[root@web01 ~]<span class="comment"># systemctl enable php-fpm</span></span><br><span class="line">或</span><br><span class="line">[root@web01 ~]<span class="comment"># systemctl enable --now php-fpm</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#8.检查php进程和端口 </span></span><br><span class="line">[root@web01 ~]<span class="comment"># ps -ef|grep php</span></span><br><span class="line">root       7764      1  0 06:02 ?        00:00:00 php-fpm: master process (/etc/php-fpm.conf)</span><br><span class="line">www        7765   7764  0 06:02 ?        00:00:00 php-fpm: pool www</span><br><span class="line">www        7766   7764  0 06:02 ?        00:00:00 php-fpm: pool www</span><br><span class="line">www        7767   7764  0 06:02 ?        00:00:00 php-fpm: pool www</span><br><span class="line">www        7768   7764  0 06:02 ?        00:00:00 php-fpm: pool www</span><br><span class="line">www        7769   7764  0 06:02 ?        00:00:00 php-fpm: pool www</span><br><span class="line">root       7772   7043  0 06:02 pts/1    00:00:00 grep --color=auto php</span><br><span class="line"></span><br><span class="line">[root@web01 ~]<span class="comment"># netstat -lntup|grep php</span></span><br><span class="line">tcp        0      0 127.0.0.1:9000          0.0.0.0:*               LISTEN      7764/php-fpm: maste</span><br></pre></td></tr></table></figure>

<h2 id="配置nginx连接php"><a href="#配置nginx连接php" class="headerlink" title="配置nginx连接php"></a>配置nginx连接php</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@web01 movie]<span class="comment"># vim /etc/nginx/conf.d/movie.conf </span></span><br><span class="line">server&#123; </span><br><span class="line">	listen 80; </span><br><span class="line">	server_name movie.roger.com; </span><br><span class="line">	</span><br><span class="line">	location /&#123; </span><br><span class="line">		root /movie; </span><br><span class="line">		index index.php index.html; </span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	location ~ \.php$ &#123; </span><br><span class="line">		root /movie; </span><br><span class="line">		<span class="comment">#nginx调用本机的9000端口（php-fpm程序） </span></span><br><span class="line">		fastcgi_pass 127.0.0.1:9000; </span><br><span class="line">		<span class="comment">#用php程序，解析哪个目录下的哪个.php的文件 </span></span><br><span class="line">		fastcgi_param SCRIPT_FILENAME <span class="variable">$document_root</span><span class="variable">$fastcgi_script_name</span>; </span><br><span class="line">		<span class="comment">#包含php变量的文件 </span></span><br><span class="line">		include /etc/nginx/fastcgi_params; </span><br><span class="line">	&#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#修改/movie的使用权限</span></span><br><span class="line">[root@web01 movie]<span class="comment"># chown www.www /movie/</span></span><br><span class="line"></span><br><span class="line">[root@web01 movie]<span class="comment"># vim php_info.php</span></span><br><span class="line">&lt;?php</span><br><span class="line">	phpinfo();</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<h2 id="部署wordpress"><a href="#部署wordpress" class="headerlink" title="部署wordpress"></a>部署wordpress</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1.编辑nginx配置文件 </span></span><br><span class="line">[root@web01 ~]<span class="comment"># vim /etc/nginx/conf.d/blog.roger.com.conf </span></span><br><span class="line">server&#123; </span><br><span class="line">	listen 80; </span><br><span class="line">	server_name blog.roger.com; </span><br><span class="line">	</span><br><span class="line">	location /&#123; </span><br><span class="line">		root /blog; </span><br><span class="line">		index index.php index.html; </span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	location ~ \.php$ &#123; </span><br><span class="line">		root /blog; </span><br><span class="line">		fastcgi_pass 127.0.0.1:9000; </span><br><span class="line">		fastcgi_param SCRIPT_FILENAME <span class="variable">$document_root</span><span class="variable">$fastcgi_script_name</span>; 		         </span><br><span class="line">		include /etc/nginx/fastcgi_params; </span><br><span class="line">	&#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#2.重新加载nginx </span></span><br><span class="line">[root@web01 conf.d]<span class="comment"># nginx -t</span></span><br><span class="line">nginx: the configuration file /etc/nginx/nginx.conf syntax is ok</span><br><span class="line">nginx: configuration file /etc/nginx/nginx.conf <span class="built_in">test</span> is successful</span><br><span class="line">[root@web01 conf.d]<span class="comment"># systemctl reload nginx</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#3.创建站点目录并授权 </span></span><br><span class="line">[root@web01 ~]<span class="comment"># mkdir /blog/wordpress </span></span><br><span class="line">[root@web01 ~]<span class="comment"># chown -R www.www /blog/wordpress/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#4.测试nginx连接php（编写php info代码） </span></span><br><span class="line">[root@web01 ~]<span class="comment"># vim /blog/info.php </span></span><br><span class="line">&lt;?php </span><br><span class="line">	phpinfo(); </span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">#5.windows域名解析 </span></span><br><span class="line">打开路径：C:\Windows\System32\drivers\etc </span><br><span class="line">编辑hosts文件：10.0.0.7 blog.roger.com</span><br><span class="line"></span><br><span class="line"><span class="comment">#6.打开浏览器访问</span></span><br><span class="line">http://blog.roger.com/info.php</span><br><span class="line"></span><br><span class="line"><span class="comment">#7.下载wordpress代码 </span></span><br><span class="line">wordpress官网：https://wordpress.org/ </span><br><span class="line">[root@web01 blog]<span class="comment"># wget https://cn.wordpress.org/latest-zh_CN.tar.gz</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#8.解压代码 </span></span><br><span class="line">[root@web01 blog]<span class="comment"># tar xf latest-zh_CN.tar.gz</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#9.修改nginx配置文件</span></span><br><span class="line">[root@web01 blog]<span class="comment"># vim /etc/nginx/conf.d/blog.roger.com.conf </span></span><br><span class="line">server&#123; </span><br><span class="line">	listen 80; </span><br><span class="line">	server_name blog.roger.com; </span><br><span class="line">	root /blog/wordpress; </span><br><span class="line">	</span><br><span class="line">	location /&#123; </span><br><span class="line">		index index.php index.html; </span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	location ~ \.php$ &#123; </span><br><span class="line">		fastcgi_pass 127.0.0.1:9000; </span><br><span class="line">		fastcgi_param SCRIPT_FILENAME <span class="variable">$document_root</span><span class="variable">$fastcgi_script_name</span>; 		         </span><br><span class="line">		include /etc/nginx/fastcgi_params; </span><br><span class="line">	&#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#10.重新加载nginx </span></span><br><span class="line">[root@web01 blog]<span class="comment"># nginx -t </span></span><br><span class="line">[root@web01 blog]<span class="comment"># systemctl reload nginx</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#11.打开浏览器，访问</span></span><br><span class="line">http://blog.roger.com/</span><br></pre></td></tr></table></figure>

<h2 id="安装mariadb数据库"><a href="#安装mariadb数据库" class="headerlink" title="安装mariadb数据库"></a>安装mariadb数据库</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1.安装mariadb </span></span><br><span class="line">[root@web01 ~]<span class="comment"># yum install -y mariadb-server</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#2.启动数据库并加入开机自启 </span></span><br><span class="line">[root@web01 ~]<span class="comment"># systemctl start mariadb </span></span><br><span class="line">[root@web01 ~]<span class="comment"># systemctl enable mariadb</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#3.登录数据库 </span></span><br><span class="line">[root@web01 ~]<span class="comment"># mysql</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#4.查看所有库 </span></span><br><span class="line">MariaDB [(none)]&gt; show databases;</span><br><span class="line">+--------------------+ </span><br><span class="line">| Database 			 | </span><br><span class="line">+--------------------+ </span><br><span class="line">| information_schema | </span><br><span class="line">| mysql 			 | </span><br><span class="line">| performance_schema | </span><br><span class="line">| <span class="built_in">test</span> 				 | </span><br><span class="line">+--------------------+</span><br><span class="line"></span><br><span class="line"><span class="comment">#5.切换数据库 </span></span><br><span class="line">MariaDB [(none)]&gt; use mysql</span><br><span class="line"></span><br><span class="line"><span class="comment">#6.查看该库中的所有表</span></span><br><span class="line">MariaDB [mysql]&gt; show tables;</span><br><span class="line"></span><br><span class="line"><span class="comment">#7.创建数据库 </span></span><br><span class="line">MariaDB [mysql]&gt; create database 库名字; </span><br><span class="line">MariaDB [mysql]&gt; create database wordpress;</span><br><span class="line"></span><br><span class="line"><span class="comment">#8.创建用户</span></span><br><span class="line">MariaDB [(none)]&gt; grant all on 所有库.所有表 to 用户名@<span class="string">'主机IP'</span> identified by <span class="string">'密码'</span>; </span><br><span class="line">MariaDB [(none)]&gt; grant all on *.* to wp@<span class="string">'localhost'</span> identified by <span class="string">'123'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#9.查看用户 </span></span><br><span class="line">MariaDB [(none)]&gt; select user,host from mysql.user;</span><br><span class="line">+------+-----------+ </span><br><span class="line">| user | host      | </span><br><span class="line">+------+-----------+ </span><br><span class="line">| root | 127.0.0.1 | </span><br><span class="line">| root | ::1 | </span><br><span class="line">| 	   | localhost | </span><br><span class="line">| root | localhost | </span><br><span class="line">| wp   | localhost | </span><br><span class="line">|      | web01     | </span><br><span class="line">| root | web01     | </span><br><span class="line">+------+-----------+</span><br><span class="line"></span><br><span class="line"><span class="comment">#10.退出数据库 </span></span><br><span class="line">MariaDB [(none)]&gt; <span class="built_in">exit</span> </span><br><span class="line">MariaDB [(none)]&gt; quit</span><br><span class="line"></span><br><span class="line">数据库名字：wordpress </span><br><span class="line">连接用户名：wp </span><br><span class="line">连接密码：123 </span><br><span class="line">连接IP：localhost</span><br><span class="line"></span><br><span class="line"><span class="comment">#11.设置数据库用户密码</span></span><br><span class="line">[root@web01 ~]<span class="comment"># mysqladmin -uroot -p password '123'</span></span><br><span class="line">Enter password:</span><br><span class="line"></span><br><span class="line"><span class="comment">#12.测试php是否可以跟MySQL建立连接</span></span><br><span class="line">[root@web01 ~]<span class="comment"># vim /blog/pm.php</span></span><br><span class="line">&lt;?php</span><br><span class="line">    <span class="variable">$servername</span> = <span class="string">"localhost"</span>;</span><br><span class="line">    <span class="variable">$username</span> = <span class="string">"wp"</span>;</span><br><span class="line">    <span class="variable">$password</span> = <span class="string">"123"</span>;</span><br><span class="line"></span><br><span class="line">    //创建连接</span><br><span class="line">    <span class="variable">$conn</span> = mysqli_connect(<span class="variable">$servername</span>, <span class="variable">$username</span>, <span class="variable">$password</span>);</span><br><span class="line"></span><br><span class="line">    //检测连接</span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable">$conn</span>) &#123;</span><br><span class="line">        die(<span class="string">"Connection failed: "</span> . mysqli_connect_error());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"小哥哥,php可以连接MySQL..."</span>;</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">&lt;img style=<span class="string">'width:100%;height:100%;'</span> src=https://blog.driverzeng.com/zenglaoshi/php_mysql.png&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">#13.主题下载</span></span><br><span class="line">[root@web01 ~]<span class="comment"># wget http://test.driverzeng.com/Nginx_Code/QQ2.8.zip</span></span><br></pre></td></tr></table></figure>

<h2 id="通过socket文件启动php"><a href="#通过socket文件启动php" class="headerlink" title="通过socket文件启动php"></a>通过socket文件启动php</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#启动php服务时，创建php.sock安全套接字文件，该文件的属主和属组</span></span><br><span class="line">listen = /dev/shm/php.sock</span><br><span class="line">listen.owner = www</span><br><span class="line">listen.group = www</span><br><span class="line"></span><br><span class="line"><span class="comment">#完整php配置文件</span></span><br><span class="line">[root@web01 ~]<span class="comment"># grep -EV "^;|^$" /etc/php-fpm.d/www.conf</span></span><br><span class="line">[www]</span><br><span class="line">user = www</span><br><span class="line">group = www</span><br><span class="line">;listen = 0.0.0.0:9000</span><br><span class="line">listen = /dev/shm/php.sock</span><br><span class="line">listen.owner = www</span><br><span class="line">listen.group = www</span><br><span class="line">listen.allowed_clients = 127.0.0.1</span><br><span class="line">pm = dynamic</span><br><span class="line">pm.max_children = 50</span><br><span class="line">pm.start_servers = 5</span><br><span class="line">pm.min_spare_servers = 5</span><br><span class="line">pm.max_spare_servers = 35</span><br><span class="line">slowlog = /var/<span class="built_in">log</span>/php-fpm/www-slow.log</span><br><span class="line">php_admin_value[error_log] = /var/<span class="built_in">log</span>/php-fpm/www-error.log</span><br><span class="line">php_admin_flag[log_errors] = on</span><br><span class="line">php_value[session.save_handler] = files</span><br><span class="line">php_value[session.save_path]    = /var/lib/php/session</span><br><span class="line">php_value[soap.wsdl_cache_dir]  = /var/lib/php/wsdlcache</span><br><span class="line"></span><br><span class="line"><span class="comment">#配置nginx连接php</span></span><br><span class="line">[root@web01 ~]<span class="comment"># vim /etc/nginx/conf.d/blog.roger.com.conf </span></span><br><span class="line">server&#123;</span><br><span class="line">        listen 80;</span><br><span class="line">        server_name blog.roger.com;</span><br><span class="line">        root /blog;</span><br><span class="line">        index index.php index.html;</span><br><span class="line"></span><br><span class="line">        location ~ \.php$ &#123;</span><br><span class="line">                <span class="comment">#fastcgi_pass 127.0.0.1:9000;</span></span><br><span class="line">                fastcgi_pass unix:/dev/shm/php.sock;</span><br><span class="line">                fastcgi_param SCRIPT_FILENAME <span class="variable">$document_root</span><span class="variable">$fastcgi_script_name</span>;</span><br><span class="line">                include fastcgi_params;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="优化Nginx配置"><a href="#优化Nginx配置" class="headerlink" title="优化Nginx配置"></a>优化Nginx配置</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#nginx上传文件大小限制优化</span></span><br><span class="line">vim /etc/nginx/nginx.conf</span><br><span class="line">http&#123;</span><br><span class="line">    ...</span><br><span class="line">    client_max_body_size 500m;  <span class="comment">#推荐500m</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="wordpress更换域名排坑"><a href="#wordpress更换域名排坑" class="headerlink" title="wordpress更换域名排坑"></a>wordpress更换域名排坑</h2><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_devops/image-20220609154934739.png" alt="image-20220609154934739"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1.后台更新</span></span><br><span class="line">浏览器访问：blog.roger.com/wp-admin</span><br><span class="line">修改wordpress地址和站点地址</span><br><span class="line"></span><br><span class="line"><span class="comment">#2.修改nginx配置文件域名 </span></span><br><span class="line">[root@web01 conf.d]<span class="comment"># vim blog.roger.com.conf </span></span><br><span class="line">server&#123; </span><br><span class="line">	listen 80; </span><br><span class="line">	server_name www.roger.com; </span><br><span class="line">	root /blog/wordpress; </span><br><span class="line">	index index.php index.html; </span><br><span class="line">	</span><br><span class="line">	location ~ \.php$ &#123;</span><br><span class="line">		<span class="comment">#fastcgi_pass 127.0.0.1:9000; </span></span><br><span class="line">		fastcgi_pass unix:/opt/php.sock; </span><br><span class="line">		fastcgi_param SCRIPT_FILENAME <span class="variable">$document_root</span><span class="variable">$fastcgi_script_name</span>; </span><br><span class="line">		include fastcgi_params; </span><br><span class="line">	&#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#3.重新加载nginx </span></span><br><span class="line">[root@web01 conf.d]<span class="comment"># systemctl reload nginx</span></span><br><span class="line"></span><br><span class="line">[root@web01 conf.d]<span class="comment"># wget https://www.php.net/distributions/php-7.3.15.tar.gz</span></span><br><span class="line">[root@web01 conf.d]<span class="comment"># tar xf php-7.3.15.tar.gz</span></span><br><span class="line">./configure \</span><br><span class="line">    --prefix=/usr/<span class="built_in">local</span>/php \</span><br><span class="line">    --<span class="built_in">exec</span>-prefix=/usr/<span class="built_in">local</span>/php \</span><br><span class="line">    --bindir=/usr/<span class="built_in">local</span>/php/bin \</span><br><span class="line">    --sbindir=/usr/<span class="built_in">local</span>/php/sbin \</span><br><span class="line">    --includedir=/usr/<span class="built_in">local</span>/php/include \</span><br><span class="line">    --libdir=/usr/<span class="built_in">local</span>/php/lib/php \</span><br><span class="line">    --mandir=/usr/<span class="built_in">local</span>/php/php/man \</span><br><span class="line">    --with-config-file-path=/usr/<span class="built_in">local</span>/php/etc \</span><br><span class="line">    --with-mysql-sock=/var/lib/mysql/mysql.sock \</span><br><span class="line">    --with-mhash \</span><br><span class="line">    --with-openssl \</span><br><span class="line">    --with-mysqli=shared,mysqlnd \</span><br><span class="line">    --with-pdo-mysql=shared,mysqlnd \</span><br><span class="line">    --with-gd \</span><br><span class="line">    --with-jpeg-dir \</span><br><span class="line">    --with-png-dir \</span><br><span class="line">    --with-iconv \</span><br><span class="line">    --with-zlib \</span><br><span class="line">    --<span class="built_in">enable</span>-zip \</span><br><span class="line">    --<span class="built_in">enable</span>-inline-optimization \</span><br><span class="line">    --<span class="built_in">disable</span>-debug \</span><br><span class="line">    --<span class="built_in">disable</span>-rpath \</span><br><span class="line">    --<span class="built_in">enable</span>-shared \</span><br><span class="line">    --<span class="built_in">enable</span>-xml \</span><br><span class="line">    --<span class="built_in">enable</span>-bcmath \</span><br><span class="line">    --<span class="built_in">enable</span>-shmop \</span><br><span class="line">    --<span class="built_in">enable</span>-sysvsem \</span><br><span class="line">    --<span class="built_in">enable</span>-mbregex \</span><br><span class="line">    --<span class="built_in">enable</span>-mbstring \</span><br><span class="line">    --<span class="built_in">enable</span>-ftp \</span><br><span class="line">    --<span class="built_in">enable</span>-pcntl \</span><br><span class="line">    --<span class="built_in">enable</span>-sockets \</span><br><span class="line">    --with-xmlrpc \</span><br><span class="line">    --<span class="built_in">enable</span>-soap \</span><br><span class="line">    --without-pear \</span><br><span class="line">    --with-gettext \</span><br><span class="line">    --<span class="built_in">enable</span>-session \</span><br><span class="line">    --with-curl \</span><br><span class="line">    --with-freetype-dir \</span><br><span class="line">    --<span class="built_in">enable</span>-opcache \</span><br><span class="line">    --<span class="built_in">enable</span>-fpm \</span><br><span class="line">    --with-fpm-user=www \</span><br><span class="line">    --with-fpm-group=www \</span><br><span class="line">    --without-gdbm \</span><br><span class="line">    --<span class="built_in">enable</span>-fileinfo \</span><br><span class="line">    --<span class="built_in">disable</span>-fileinfo</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>SRE</category>
      </categories>
      <tags>
        <tag>Linxu架构</tag>
      </tags>
  </entry>
  <entry>
    <title>[NFS共享存储]</title>
    <url>/2019/04/23/NFS%E5%85%B1%E4%BA%AB%E5%AD%98%E5%82%A8/</url>
    <content><![CDATA[<h1 id="NFS共享存储"><a href="#NFS共享存储" class="headerlink" title="NFS共享存储"></a>NFS共享存储</h1><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><table>
<thead>
<tr>
<th align="center">主机名</th>
<th align="center">WanIP</th>
<th align="center">LanIP</th>
<th align="center">角色</th>
</tr>
</thead>
<tbody><tr>
<td align="center">web01</td>
<td align="center">10.0.0.7</td>
<td align="center">172.16.1.7</td>
<td align="center">网站服务（nfs客户端）</td>
</tr>
<tr>
<td align="center">web02</td>
<td align="center">10.0.0.8</td>
<td align="center">172.16.1.8</td>
<td align="center">网站服务（nfs客户端）</td>
</tr>
<tr>
<td align="center">nfs</td>
<td align="center">10.0.0.31</td>
<td align="center">172.16.1.31</td>
<td align="center">共享存储（nfs服务端）</td>
</tr>
</tbody></table>
<h2 id="NFS概述"><a href="#NFS概述" class="headerlink" title="NFS概述"></a>NFS概述</h2><p><code>NFS（Network File System）</code>通过网络来做文件存储</p>
<p><code>NFS</code>用于企业集群架构中<em>,</em> 如果是大型网站<em>,</em> 会用到更复杂的分布式文件系统<code>FastDFS</code>,<code>glusterfs</code>,<code>HDFS</code></p>
<blockquote>
<p><strong>为什么使用共享存储？</strong></p>
<ul>
<li><p>实现多台服务器之间数据共享 </p>
</li>
<li><p>实现多台服务器之间数据一致</p>
</li>
</ul>
</blockquote>
<h2 id="NFS工作原理"><a href="#NFS工作原理" class="headerlink" title="NFS工作原理"></a>NFS工作原理</h2><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_devops/image-20220518160108133.png" alt="image-20220518160108133"></p>
<p>1.用户进程访问NFS客户端，使用不同的函数对数据进行处理 </p>
<p>2.NFS客户端通过TCP/IP的方式传递给NFS服务端</p>
<p>3.NFS服务端接收到请求后，会先调用portmap进程进行端口映射</p>
<p>4.nfsd进程用于判断NFS客户端是否拥有权限连接NFS服务端</p>
<p>5.Rpc.mount进程判断客户端是否有对应的权限进行验证 </p>
<p>6.idmap进程实现用户映射和压缩 </p>
<p>7.最后NFS服务端会将对应请求的函数转换为本地能识别的命令，传递至内核，由内核驱动硬件</p>
<p><font color='red'><strong>注意: rpc是一个远程过程调用，那么使用nfs必须有rpc服务</strong></font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#安装apache、php</span></span><br><span class="line">yum install -y httpd php</span><br><span class="line"></span><br><span class="line"><span class="comment">#httpd站点目录</span></span><br><span class="line">/var/www/html</span><br><span class="line"></span><br><span class="line"><span class="comment">#启动服务</span></span><br><span class="line">systemctl start httpd</span><br><span class="line"></span><br><span class="line"><span class="comment">#修改属主、属组</span></span><br><span class="line">chown -R apache.apache /var/www/html/</span><br></pre></td></tr></table></figure>

<h2 id="安装部署NFS服务端"><a href="#安装部署NFS服务端" class="headerlink" title="安装部署NFS服务端"></a>安装部署NFS服务端</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#C5 C6安装nfs服务 </span></span><br><span class="line">[root@nfs ~]<span class="comment"># yum install -y nfs rpcbind</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#C7安装nfs服务 </span></span><br><span class="line">[root@nfs ~]<span class="comment"># yum install -y nfs-utils</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#配置NFS服务端 NFS配置文件的位置 </span></span><br><span class="line">[root@nfs ~]<span class="comment"># ll /etc/exports </span></span><br><span class="line">-rw-r--r--. 1 root root 0 Jun 7 2013 /etc/exports</span><br><span class="line">[root@nfs ~]<span class="comment"># vim /etc/exports </span></span><br><span class="line"><span class="comment">#共享目录、允许访问NFS服务端的网段 (可读可写,同步,任何用户都映射成nfs的匿名用户) </span></span><br><span class="line">/data 172.16.1.0/24(rw,sync,all_squash)</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建共享目录 </span></span><br><span class="line">[root@nfs ~]<span class="comment"># mkdir /data</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#修改共享目录的属主和属组为nfs的匿名用户 </span></span><br><span class="line">[root@nfs ~]<span class="comment"># chown nfsnobody:nfsnobody /data</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#启动服务 </span></span><br><span class="line">[root@nfs ~]<span class="comment"># systemctl start nfs</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#加入开机自启 </span></span><br><span class="line">[root@nfs ~]<span class="comment"># systemctl enable nfs</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#检查进程 </span></span><br><span class="line">[root@nfs ~]<span class="comment"># ps -ef|grep [n]fs</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#检测配置文件是否生效 </span></span><br><span class="line">[root@nfs ~]<span class="comment"># cat /var/lib/nfs/etab</span></span><br><span class="line">/data	172.16.1.0/24(rw,sync,wdelay,hide,nocrossmnt,secure,root_squash,all_squash,no_subtree_check,secure_locks,acl,no_pnfs,anonuid=65534,anongid=65534,sec=sys,rw,secure,root_squash,all_squash)</span><br></pre></td></tr></table></figure>

<h2 id="NFS配置详解"><a href="#NFS配置详解" class="headerlink" title="NFS配置详解"></a>NFS配置详解</h2><table>
<thead>
<tr>
<th align="center">nfs共享参数</th>
<th align="center">参数作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center">rw*</td>
<td align="center">客户端针对服务端的共享目录有可读，可写权限</td>
</tr>
<tr>
<td align="center">ro</td>
<td align="center">客户端针对服务端的共享目录只读权限</td>
</tr>
<tr>
<td align="center">root_squash</td>
<td align="center">客户端必须是以root身份写入共享目录文件时，到服务端才能以nfs的系统用户写入（不常用）</td>
</tr>
<tr>
<td align="center">no_root_squash</td>
<td align="center">客户端以root身份连接服务端，也会以nfs服务器的root用户来操作共享目录（不常用）</td>
</tr>
<tr>
<td align="center">all_squash*</td>
<td align="center">无论NFS客户端用什么用户访问共享目录，到服务端都是nfs的系统用户权限（常用）</td>
</tr>
<tr>
<td align="center">no_all_squash</td>
<td align="center">无论NFS客户端使用什么账户访问，都不会变成nfs系统用户的身份（不常用）</td>
</tr>
<tr>
<td align="center">sync*</td>
<td align="center">同时将数据写入到内存与硬盘中，保证不丢失数据</td>
</tr>
<tr>
<td align="center">async</td>
<td align="center">优先将数据保存到内存，然后再写入硬盘；这样效率更高，但可能会丢失数据</td>
</tr>
<tr>
<td align="center">anonuid*</td>
<td align="center">配置all_squash使用,指定NFS的用户UID,必须存在系统</td>
</tr>
<tr>
<td align="center">anongid*</td>
<td align="center">配置all_squash使用,指定NFS的用户UID,必须存在系统</td>
</tr>
</tbody></table>
<h2 id="客户端操作"><a href="#客户端操作" class="headerlink" title="客户端操作"></a>客户端操作</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1.安装nfs </span></span><br><span class="line">[root@web01 ~]<span class="comment"># yum install -y nfs-utils </span></span><br><span class="line">[root@web02 ~]<span class="comment"># yum install -y nfs-utils </span></span><br><span class="line"></span><br><span class="line"><span class="comment">#2.查看哪些目录可以挂载 </span></span><br><span class="line">[root@web01 ~]<span class="comment"># showmount -e 172.16.1.31 </span></span><br><span class="line">[root@web02 ~]<span class="comment"># showmount -e 172.16.1.31 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">#3.挂载共享目录 </span></span><br><span class="line">[root@web01 ~]<span class="comment"># mount -t nfs 172.16.1.31:/data /opt </span></span><br><span class="line">[root@web02 ~]<span class="comment"># mount -t nfs 172.16.1.31:/data /opt</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#查看nfs配置文件是否生效</span></span><br><span class="line">cat /var/lib/nfs/etab</span><br></pre></td></tr></table></figure>

<h1 id="NFS存储实战"><a href="#NFS存储实战" class="headerlink" title="NFS存储实战"></a>NFS存储实战</h1><h2 id="准备环境"><a href="#准备环境" class="headerlink" title="准备环境"></a>准备环境</h2><table>
<thead>
<tr>
<th align="center">主机名</th>
<th align="center">WanIP</th>
<th align="center">LanIP</th>
<th align="center">角色</th>
<th align="center">部署应用</th>
</tr>
</thead>
<tbody><tr>
<td align="center">web01</td>
<td align="center">10.0.0.7</td>
<td align="center">172.16.1.7</td>
<td align="center">网站服务（nfs客户端）</td>
<td align="center">httpd、php、nfs</td>
</tr>
<tr>
<td align="center">web02</td>
<td align="center">10.0.0.8</td>
<td align="center">172.16.1.8</td>
<td align="center">网站服务（nfs客户端）</td>
<td align="center">httpd、php、nfs</td>
</tr>
<tr>
<td align="center">nfs</td>
<td align="center">10.0.0.31</td>
<td align="center">172.16.1.31</td>
<td align="center">共享存储（nfs服务端）</td>
<td align="center">nfs</td>
</tr>
</tbody></table>
<h2 id="部署交作业网站"><a href="#部署交作业网站" class="headerlink" title="部署交作业网站"></a>部署交作业网站</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1.安装apache和php </span></span><br><span class="line">[root@web01 ~]<span class="comment"># yum install -y httpd php </span></span><br><span class="line">[root@web02 ~]<span class="comment"># yum install -y httpd php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#2.下载代码（到站点目录下） </span></span><br><span class="line">[root@web01 html]<span class="comment"># ll </span></span><br><span class="line">-rw-r--r-- 1 root root 26927 May 18 09:33 kaoshi.zip </span><br><span class="line">[root@web01 html]<span class="comment"># pwd</span></span><br><span class="line">/var/www/html</span><br><span class="line"></span><br><span class="line"><span class="comment">#3.解压代码 </span></span><br><span class="line">[root@web01 html]<span class="comment"># unzip kaoshi_modify.zip </span></span><br><span class="line">[root@web02 html]<span class="comment"># unzip kaoshi_modify.zip</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#4.启动apache服务 </span></span><br><span class="line">[root@web01 html]<span class="comment"># systemctl start httpd </span></span><br><span class="line">[root@web02 html]<span class="comment"># systemctl start httpd</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#5.检查进程 </span></span><br><span class="line">[root@web01 html]<span class="comment"># ps -ef|grep 'httpd' </span></span><br><span class="line">[root@web02 html]<span class="comment"># ps -ef|grep 'httpd'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#6.端口检查 </span></span><br><span class="line">[root@web01 html]<span class="comment"># netstat -lntup|grep httpd </span></span><br><span class="line">tcp6       0      0 :::80             :::*            LISTEN      7498/httpd</span><br><span class="line">[root@web02 html]<span class="comment"># netstat -lntup|grep httpd </span></span><br><span class="line">tcp6       0      0 :::80             :::*            LISTEN      7123/httpd</span><br><span class="line"></span><br><span class="line"><span class="comment">#7.打开浏览器访问 </span></span><br><span class="line">http://10.0.0.7/ </span><br><span class="line">http://10.0.0.8/ </span><br><span class="line"></span><br><span class="line"><span class="comment">#8.授权站点目录 </span></span><br><span class="line">[root@web01 html]<span class="comment"># chown apache.apache /var/www/html</span></span><br><span class="line">[root@web02 html]<span class="comment"># chown apache.apache /var/www/html</span></span><br><span class="line">[root@web01 html]<span class="comment"># ll /var/www/html/user_data/</span></span><br><span class="line">-rw-r--r-- 1 apache apache 298685 May 18 20:20 33_aa.jpg</span><br><span class="line">[root@web02 html]<span class="comment"># ll /var/www/html/user_data/</span></span><br><span class="line">-rw-r--r-- 1 apache apache 298685 May 18 20:20 33_bb.jpg</span><br></pre></td></tr></table></figure>

<h2 id="部署共享存储"><a href="#部署共享存储" class="headerlink" title="部署共享存储"></a>部署共享存储</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#先创建用户数据上传目录 </span></span><br><span class="line">[root@web01 html]<span class="comment"># mkdir /var/www/html/user_data/ </span></span><br><span class="line">[root@web02 html]<span class="comment"># mkdir /var/www/html/user_data/ </span></span><br><span class="line"></span><br><span class="line"><span class="comment">#客户端挂载nfs服务端 </span></span><br><span class="line">[root@web01 html]<span class="comment"># mount -t nfs 172.16.1.31:/data /var/www/html/user_data/ </span></span><br><span class="line">[root@web02 html]<span class="comment"># mount -t nfs 172.16.1.31:/data /var/www/html/user_data/</span></span><br></pre></td></tr></table></figure>

<h2 id="统一用户"><a href="#统一用户" class="headerlink" title="统一用户"></a>统一用户</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">##客户端</span></span><br><span class="line"><span class="comment">#创建www用户 </span></span><br><span class="line">[root@web01 ~]<span class="comment"># groupadd www -g 666 </span></span><br><span class="line">[root@web01 ~]<span class="comment"># useradd www -u 666 -g 666 -s /sbin/nologin -M</span></span><br><span class="line"></span><br><span class="line">[root@web02 ~]<span class="comment"># groupadd www -g 666 </span></span><br><span class="line">[root@web02 ~]<span class="comment"># useradd www -u 666 -g 666 -s /sbin/nologin -M</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#修改apache配置文件（启动用户）</span></span><br><span class="line">[root@web01 html]<span class="comment"># vim /etc/httpd/conf/httpd.conf</span></span><br><span class="line">User www</span><br><span class="line">Group www</span><br><span class="line"></span><br><span class="line">[root@web02 html]<span class="comment"># vim /etc/httpd/conf/httpd.conf</span></span><br><span class="line">User www</span><br><span class="line">Group www</span><br><span class="line"></span><br><span class="line"><span class="comment">#授权html目录</span></span><br><span class="line">[root@web01 html]<span class="comment"># chown www.www /var/www/html</span></span><br><span class="line">[root@web02 html]<span class="comment"># chown www.www /var/www/html</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##服务端</span></span><br><span class="line"><span class="comment">#创建www用户 </span></span><br><span class="line">[root@nfs ~]<span class="comment"># groupadd www -g 666 </span></span><br><span class="line">[root@nfs ~]<span class="comment"># useradd www -u 666 -g 666 -s /sbin/nologin -M</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#修改nfs配置文件</span></span><br><span class="line">[root@nfs ~]<span class="comment"># vim /etc/exports</span></span><br><span class="line">/data 172.16.1.0/24(rw,sync,anonuid=666,anongid=666,all_squash)</span><br><span class="line"></span><br><span class="line"><span class="comment">#授权共享目录</span></span><br><span class="line">[root@nfs ~]<span class="comment"># chown -R www:www /data</span></span><br></pre></td></tr></table></figure>

<h2 id="排错流程"><a href="#排错流程" class="headerlink" title="排错流程"></a>排错流程</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1.网络问题 </span></span><br><span class="line">[root@web01 html]<span class="comment"># showmount -e 172.16.1.31 </span></span><br><span class="line">[root@web01 html]<span class="comment"># ping 172.16.1.31</span></span><br><span class="line">1）不通</span><br><span class="line">	- 检查网卡配置文件 </span><br><span class="line">	- 虚拟机物理网卡设置 </span><br><span class="line">	- 虚拟网络编辑器中的设置 </span><br><span class="line">2）通</span><br><span class="line">	- 防火墙 </span><br><span class="line">	- selinux </span><br><span class="line">	- 服务没有启动 </span><br><span class="line">	- 服务启动了，但是配置没有生效 cat /var/lib/nfs/etab</span><br><span class="line">	</span><br><span class="line"><span class="comment">#2.权限问题 </span></span><br><span class="line">1）服务端权限 </span><br><span class="line">	- 配置文件 </span><br><span class="line">	[root@nfs ~]<span class="comment"># cat /etc/exports </span></span><br><span class="line">	/data 172.16.1.0/24(rw,sync,anonuid=666,anongid=666,all_squash)</span><br><span class="line">	- 共享目录权限</span><br><span class="line">	[root@nfs ~]<span class="comment"># ll -d /data/ </span></span><br><span class="line">	drwxr-xr-x 2 www www 28 May 19 10:40 /data/</span><br><span class="line">	- 用户信息 </span><br><span class="line">	[root@nfs html]<span class="comment"># id www </span></span><br><span class="line">	uid=666(www) gid=666(www) groups=666(www)</span><br><span class="line">2）客户端权限 </span><br><span class="line">	- 站点目录权限 </span><br><span class="line">	[root@web01 html]<span class="comment"># ll /var/www/html/ </span></span><br><span class="line">	-d drwxr-xr-x 3 www www 119 May 19 10:38 /var/www/html/ </span><br><span class="line">	- 用户上传数据的目录权限 </span><br><span class="line">	[root@web01 html]<span class="comment"># ll /var/www/html/user_data/ -d </span></span><br><span class="line">	drwxr-xr-x 2 www www 28 May 19 10:40 /var/www/html/user_data/ </span><br><span class="line">	- apache配置文件中用户和组 </span><br><span class="line">	[root@web01 html]<span class="comment"># grep -E '^User|^Group' /etc/httpd/conf/httpd.conf </span></span><br><span class="line">	User www </span><br><span class="line">	Group www</span><br><span class="line">	- apache服务启动用户 </span><br><span class="line">	[root@web01 html]<span class="comment"># ps -ef|grep [h]ttpd</span></span><br><span class="line">	- 用户信息 </span><br><span class="line">	[root@web01 html]<span class="comment"># id www </span></span><br><span class="line">	uid=666(www) gid=666(www) groups=666(www) </span><br><span class="line">	- 错误日志 </span><br><span class="line">	[root@web02 html]<span class="comment"># tail -f /var/log/httpd/error_log</span></span><br></pre></td></tr></table></figure>

<h1 id="NFS挂载"><a href="#NFS挂载" class="headerlink" title="NFS挂载"></a>NFS挂载</h1><h2 id="开机自动挂载"><a href="#开机自动挂载" class="headerlink" title="开机自动挂载"></a>开机自动挂载</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#开机自动挂载配置文件 </span></span><br><span class="line">[root@web02 ~]<span class="comment"># ll /etc/fstab </span></span><br><span class="line">-rw-r--r--. 1 root root 501 May 12 19:20 /etc/fstab</span><br><span class="line"></span><br><span class="line"><span class="comment">#设置开机自动挂载</span></span><br><span class="line">[root@web02 ~]<span class="comment"># vim /etc/fstab </span></span><br><span class="line">172.16.1.31:/data  /var/www/html/user_data  nfs  defaults  0  0</span><br><span class="line"></span><br><span class="line"><span class="comment">#检测配置是否有问题 </span></span><br><span class="line">[root@web02 ~]<span class="comment"># mount -a</span></span><br></pre></td></tr></table></figure>

<h2 id="NFS卸载"><a href="#NFS卸载" class="headerlink" title="NFS卸载"></a>NFS卸载</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#卸载挂载目录 </span></span><br><span class="line">[root@web02 ~]<span class="comment"># umount /var/www/html/user_data </span></span><br><span class="line"></span><br><span class="line"><span class="comment">#报错：设备繁忙 </span></span><br><span class="line">umount.nfs4: /var/www/html/user_data: device is busy </span><br><span class="line"></span><br><span class="line"><span class="comment">#强制卸载 </span></span><br><span class="line">[root@web02 ~]<span class="comment"># umount -lf /var/www/html/user_data</span></span><br></pre></td></tr></table></figure>

<h2 id="增加安全性"><a href="#增加安全性" class="headerlink" title="增加安全性"></a>增加安全性</h2><p>在企业工作场景，通常情况NFS服务器共享的只是普通静态数据（图片、附件、视频），不需要执行suid、exec等权限，挂载的这个文件系统只能作为数据存取之用，无法执行程序，对于客户端来讲增加了安全性。例如: 很多木马篡改站点文件都是由上传入口上传的程序到存储目录，然后执行的</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#通过mount -o指定挂载参数，禁止使用suid，exec，增加安全性能</span></span><br><span class="line">[root@nfs-client ~]<span class="comment"># mount -t nfs -o nosuid,noexec,nodev 172.16.1.31:/data /mnt</span></span><br></pre></td></tr></table></figure>

<h2 id="增加性能（可选）"><a href="#增加性能（可选）" class="headerlink" title="增加性能（可选）"></a>增加性能（可选）</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#通过mount -o指定挂载参数，禁止更新目录及文件时间戳挂载</span></span><br><span class="line">[root@nfs-client ~]<span class="comment"># mount -t nfs -o noatime,nodiratime 172.16.1.31:/data /mnt</span></span><br></pre></td></tr></table></figure>

<h2 id="NFS存储小结"><a href="#NFS存储小结" class="headerlink" title="NFS存储小结"></a>NFS存储小结</h2><ul>
<li><p>NFS存储优点 </p>
<ul>
<li>NFS文件系统简单易用、方便部署、数据可靠、服务稳定、满足中小企业需求。 </li>
<li>NFS文件系统内存放的数据都在文件系统之上，所有数据都是能看得见。</li>
<li>客户端挂载NFS服务没有密码验证, 安全性一般(内网使用)</li>
</ul>
</li>
<li><p>2.NFS存储局限 </p>
<ul>
<li>1.存在单点故障, 如果构建高可用维护麻烦web-&gt;nfs()-&gt;backup </li>
<li>2.NFS数据明文, 并不对数据做任何校验。 </li>
<li>3.客户端挂载NFS服务没有密码验证, 安全性一般(内网使用)</li>
</ul>
</li>
<li><p>3.NFS应用建议 </p>
<ul>
<li>1.生产场景应将静态数据尽可能往前端推, 减少后端存储压力 </li>
<li>2.必须将存储里的静态资源通过CDN缓存jpg\png\mp4\avi\css\js </li>
<li>3.如果没有缓存或架构本身历史遗留问题太大, 在多存储也无用</li>
</ul>
</li>
</ul>
<h1 id="NFS结合Rsync"><a href="#NFS结合Rsync" class="headerlink" title="NFS结合Rsync"></a>NFS结合Rsync</h1><h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>1.备份用户数据</p>
<ul>
<li>目的：避免运维人员，或者其他技术人员误操作，误删除了用户数据，还可以恢复</li>
</ul>
<p>2.实时同步用户数据</p>
<ul>
<li><p>保证用户数据的一致性</p>
</li>
<li><p>解决NFS的单点故障</p>
</li>
</ul>
<p><strong><font color='red'>注意：统一用户</font></strong></p>
<p>1.web01和web02可以上传图片</p>
<p>2.nfs用户数据每天凌晨1点做备份</p>
<p>3.校验数据的完整性</p>
<p>4.nfs用户数据实时同步到backup的/data/目录下，做nfs的备机</p>
<h2 id="环境准备-1"><a href="#环境准备-1" class="headerlink" title="环境准备"></a>环境准备</h2><table>
<thead>
<tr>
<th align="center">主机名</th>
<th align="center">WanIP</th>
<th align="center">LanIP</th>
<th align="center">角色</th>
<th align="center">部署服务</th>
</tr>
</thead>
<tbody><tr>
<td align="center">web01</td>
<td align="center">10.0.0.7</td>
<td align="center">172.16.1.7</td>
<td align="center">nfs客户端</td>
<td align="center">httpd、php、nfs</td>
</tr>
<tr>
<td align="center">web02</td>
<td align="center">10.0.0.8</td>
<td align="center">172.16.1.8</td>
<td align="center">nfs客户端</td>
<td align="center">httpd、php、nfs</td>
</tr>
<tr>
<td align="center">nfs</td>
<td align="center">10.0.0.31</td>
<td align="center">172.16.1.31</td>
<td align="center">rsync客户端、nfs服务端</td>
<td align="center">nfs、rsync、inotify</td>
</tr>
<tr>
<td align="center">backup</td>
<td align="center">10.0.0.41</td>
<td align="center">172.16.1.41</td>
<td align="center">rsync服务端、nfs服务端（备机）</td>
<td align="center">nfs、rsync</td>
</tr>
</tbody></table>
<h2 id="部署rsync"><a href="#部署rsync" class="headerlink" title="部署rsync"></a>部署rsync</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">##服务端</span></span><br><span class="line"><span class="comment">#1.安装rsync </span></span><br><span class="line">[root@backup ~]<span class="comment"># yum install -y rsync</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#2.修改rsync的配置文件 </span></span><br><span class="line">[root@backup ~]<span class="comment"># vim /etc/rsyncd.conf </span></span><br><span class="line">uid = www </span><br><span class="line">gid = www </span><br><span class="line">port = 873 </span><br><span class="line">fake super = yes </span><br><span class="line">use chroot = no </span><br><span class="line">max connections = 200 </span><br><span class="line">timeout = 600 </span><br><span class="line">ignore errors </span><br><span class="line"><span class="built_in">read</span> only = <span class="literal">false</span> </span><br><span class="line">list = <span class="literal">false</span> </span><br><span class="line">auth users = rsync_backup </span><br><span class="line">secrets file = /etc/rsync.passwd </span><br><span class="line"><span class="built_in">log</span> file = /var/<span class="built_in">log</span>/rsyncd.log </span><br><span class="line"><span class="comment">##################################### </span></span><br><span class="line">[nfs_backup] </span><br><span class="line">comment = nfs_backup</span><br><span class="line">path = /backup </span><br><span class="line"></span><br><span class="line">[nfs_data] </span><br><span class="line">comment = nfs_data </span><br><span class="line">path = /data</span><br><span class="line"></span><br><span class="line"><span class="comment">#3.创建www用户和组 </span></span><br><span class="line">[root@backup ~]<span class="comment"># groupadd www -g 666 </span></span><br><span class="line">[root@backup ~]<span class="comment"># useradd www -u 666 -g 666 -s /sbin/nologin -M</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#4.创建密码文件 </span></span><br><span class="line">[root@backup ~]<span class="comment"># echo 'rsync_backup:123' &gt; /etc/rsync.passwd</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#5.授权密码文件 </span></span><br><span class="line">[root@backup ~]<span class="comment"># chmod 600 /etc/rsync.passwd</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#6.创建备份目录和实时同步目录 </span></span><br><span class="line">[root@backup ~]<span class="comment"># mkdir /&#123;backup,data&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#7.授权备份目录和实时同步目录 </span></span><br><span class="line">[root@backup ~]<span class="comment"># chown www.www /&#123;backup,data&#125; </span></span><br><span class="line">[root@backup ~]<span class="comment"># ll /backup/ /data/ -d </span></span><br><span class="line">drwxr-xr-x 2 www www 6 May 20 10:23 /backup/ </span><br><span class="line">drwxr-xr-x 2 www www 6 May 20 10:23 /data/</span><br><span class="line"></span><br><span class="line"><span class="comment">#8.启动rsync并加入开机自启 </span></span><br><span class="line">[root@backup ~]<span class="comment"># systemctl start rsyncd </span></span><br><span class="line">[root@backup ~]<span class="comment"># systemctl enable rsyncd</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#9.检查进程和端口 </span></span><br><span class="line">[root@backup ~]<span class="comment"># ps -ef|grep [r]sync</span></span><br><span class="line">[root@backup ~]<span class="comment"># netstat -lntup|grep 873</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##客户端</span></span><br><span class="line"><span class="comment">#1.安装rsync和inotify </span></span><br><span class="line">[root@nfs ~]<span class="comment"># yum install -y rsync inotify-tools</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#2.测试数据推送 </span></span><br><span class="line">[root@nfs ~]<span class="comment"># rsync -avz /tmp/ rsync_backup@172.16.1.41::nfs_backup </span></span><br><span class="line">[root@nfs ~]<span class="comment"># rsync -avz /tmp/ rsync_backup@172.16.1.41::nfs_data</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#3.测试实时同步 </span></span><br><span class="line">[root@nfs ~]<span class="comment"># vim inotify.sh</span></span><br><span class="line"><span class="meta">#!/bin/bash </span></span><br><span class="line">dir=/tmp/</span><br><span class="line"><span class="built_in">export</span> RSYNC_PASSWORD=123 </span><br><span class="line">inotifywait -mrq --format <span class="string">'%w %f'</span> -e create,delete,attrib,close_write <span class="variable">$dir</span>|<span class="keyword">while</span> <span class="built_in">read</span> line;<span class="keyword">do</span></span><br><span class="line">	rsync -az --delete <span class="variable">$dir</span> rsync_backup@172.16.1.41::nfs_data </span><br><span class="line"><span class="keyword">done</span> &amp;</span><br></pre></td></tr></table></figure>

<h2 id="部署nfs"><a href="#部署nfs" class="headerlink" title="部署nfs"></a>部署nfs</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">##部署nfs服务端</span></span><br><span class="line"><span class="comment">#1.安装nfs服务 </span></span><br><span class="line">[root@nfs ~]<span class="comment"># yum install -y nfs-utils </span></span><br><span class="line">[root@backup ~]<span class="comment"># yum install -y nfs-utils</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#2.修改nfs配置文件 </span></span><br><span class="line">[root@nfs ~]<span class="comment"># vim /etc/exports </span></span><br><span class="line">/data 172.16.1.0/24(rw,sync,anonuid=666,anongid=666,all_squash) </span><br><span class="line">[root@backup ~]<span class="comment"># vim /etc/exports </span></span><br><span class="line">/data 172.16.1.0/24(rw,sync,anonuid=666,anongid=666,all_squash)</span><br><span class="line"></span><br><span class="line"><span class="comment">#3.创建www用户和组 </span></span><br><span class="line">[root@nfs ~]<span class="comment"># groupadd www -g 666 </span></span><br><span class="line">[root@nfs ~]<span class="comment"># useradd www -u 666 -g 666 -s /sbin/nologin -M</span></span><br><span class="line">[root@backup ~]<span class="comment"># groupadd www -g 666 </span></span><br><span class="line">[root@backup ~]<span class="comment"># useradd www -u 666 -g 666 -s /sbin/nologin -M</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#4.创建共享目录 </span></span><br><span class="line">[root@nfs ~]<span class="comment"># mkdir /data </span></span><br><span class="line">[root@backup ~]<span class="comment"># mkdir /data</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#5.授权共享目录 </span></span><br><span class="line">[root@nfs ~]<span class="comment"># chown www.www /data/ </span></span><br><span class="line">[root@backup ~]<span class="comment"># chown www.www /data/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#6.启动nfs服务并加入开机自启 </span></span><br><span class="line">[root@nfs ~]<span class="comment"># systemctl start nfs </span></span><br><span class="line">[root@nfs ~]<span class="comment"># systemctl enable nfs </span></span><br><span class="line">[root@backup ~]<span class="comment"># systemctl start nfs </span></span><br><span class="line">[root@backup ~]<span class="comment"># systemctl enable nfs</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#7.检查配置是否生效</span></span><br><span class="line">[root@nfs ~]<span class="comment"># cat /var/lib/nfs/etab </span></span><br><span class="line">[root@backup ~]<span class="comment"># cat /var/lib/nfs/etab</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#8.检查进程和端口 </span></span><br><span class="line">[root@nfs ~]<span class="comment"># ps -ef|grep [n]fs </span></span><br><span class="line">[root@nfs ~]<span class="comment"># netstat -lntup</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##部署nfs客户端 </span></span><br><span class="line"><span class="comment"># 1.安装nfs客户端 </span></span><br><span class="line">[root@web01 ~]<span class="comment"># yum install -y nfs-utils </span></span><br><span class="line">[root@web02 ~]<span class="comment"># yum install -y nfs-utils</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#2.查看挂载点 </span></span><br><span class="line">[root@web01 ~]<span class="comment"># showmount -e 172.16.1.31 </span></span><br><span class="line">Export list <span class="keyword">for</span> 172.16.1.31: /data 172.16.1.0/24 </span><br><span class="line">[root@web01 ~]<span class="comment"># showmount -e 172.16.1.41 </span></span><br><span class="line">Export list <span class="keyword">for</span> 172.16.1.41: /data 172.16.1.0/24</span><br><span class="line"></span><br><span class="line">[root@web02 ~]<span class="comment"># showmount -e 172.16.1.31 </span></span><br><span class="line">Export list <span class="keyword">for</span> 172.16.1.31: /data 172.16.1.0/24 </span><br><span class="line">[root@web02 ~]<span class="comment"># showmount -e 172.16.1.41 </span></span><br><span class="line">Export list <span class="keyword">for</span> 172.16.1.41: /data 172.16.1.0/24</span><br><span class="line"></span><br><span class="line"><span class="comment">#3.测试挂载 </span></span><br><span class="line">[root@web01 ~]<span class="comment"># mount -t nfs 172.16.1.31:/data /mnt </span></span><br><span class="line">[root@web01 ~]<span class="comment"># mount -t nfs 172.16.1.41:/data /media/</span></span><br><span class="line">[root@web01 ~]<span class="comment"># df -h</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#4.测试创建文件 </span></span><br><span class="line">[root@web01 ~]<span class="comment"># touch /mnt/1.txt</span></span><br><span class="line">[root@web01 ~]<span class="comment"># ll /mnt/</span></span><br><span class="line">[root@web01 ~]<span class="comment"># touch /media/1.txt </span></span><br><span class="line">[root@web01 ~]<span class="comment"># ll /media/</span></span><br></pre></td></tr></table></figure>

<h2 id="部署web网站"><a href="#部署web网站" class="headerlink" title="部署web网站"></a>部署web网站</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1.安装httpd和php </span></span><br><span class="line">[root@web01 ~]<span class="comment"># yum install -y httpd php </span></span><br><span class="line">[root@web02 ~]<span class="comment"># yum install -y httpd php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#2.修改httpd的配置文件 </span></span><br><span class="line">[root@web01 ~]<span class="comment"># vim /etc/httpd/conf/httpd.conf </span></span><br><span class="line">User www Group www </span><br><span class="line">[root@web02 ~]<span class="comment"># vim /etc/httpd/conf/httpd.conf </span></span><br><span class="line">User www Group www</span><br><span class="line"></span><br><span class="line"><span class="comment">#3.创建www用户和组 </span></span><br><span class="line">[root@web01 ~]<span class="comment"># groupadd www -g 666</span></span><br><span class="line">[root@web01 ~]<span class="comment"># useradd www -u 666 -g 666 -s /sbin/nologin -M </span></span><br><span class="line">[root@web02 ~]<span class="comment"># groupadd www -g 666 </span></span><br><span class="line">[root@web02 ~]<span class="comment"># useradd www -u 666 -g 666 -s /sbin/nologin -M</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#4.部署代码 </span></span><br><span class="line">[root@web01 ~]<span class="comment"># cd /var/www/html/ </span></span><br><span class="line">[root@web01 html]<span class="comment"># unzip kaoshi_modify.zip</span></span><br><span class="line">[root@web02 ~]<span class="comment"># cd /var/www/html/ </span></span><br><span class="line">[root@web02 html]<span class="comment"># unzip kaoshi_modify.zip</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#5.创建用户上传目录</span></span><br><span class="line">[root@web01 html]<span class="comment"># mkdir /var/www/html/user_data </span></span><br><span class="line">[root@web02 html]<span class="comment"># mkdir /var/www/html/user_data</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#6.授权用户上传数据目录 </span></span><br><span class="line">[root@web01 html]<span class="comment"># chown www.www /var/www/html/user_data </span></span><br><span class="line">[root@web02 html]<span class="comment"># chown www.www /var/www/html/user_data</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#7.启动httpd服务 </span></span><br><span class="line">[root@web01 html]<span class="comment"># systemctl start httpd </span></span><br><span class="line">[root@web01 html]<span class="comment"># systemctl enable httpd </span></span><br><span class="line">[root@web02 html]<span class="comment"># systemctl start httpd </span></span><br><span class="line">[root@web02 html]<span class="comment"># systemctl enable httpd</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#8.检查。。。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#9.浏览器访问 </span></span><br><span class="line">http://10.0.0.7/ </span><br><span class="line">http://10.0.0.8/</span><br><span class="line"></span><br><span class="line"><span class="comment">#10.挂载用户上传数据目录 </span></span><br><span class="line">[root@web01 html]<span class="comment"># mount -t nfs 172.16.1.31:/data /var/www/html/user_data </span></span><br><span class="line">[root@web02 html]<span class="comment"># mount -t nfs 172.16.1.31:/data /var/www/html/user_data</span></span><br></pre></td></tr></table></figure>

<h2 id="实时同步"><a href="#实时同步" class="headerlink" title="实时同步"></a>实时同步</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1.编写实时同步脚本 </span></span><br><span class="line">[root@nfs ~]<span class="comment"># vim inotify.sh </span></span><br><span class="line"><span class="meta">#!/bin/bash </span></span><br><span class="line">dir=/data/ </span><br><span class="line"><span class="built_in">export</span> RSYNC_PASSWORD=123 </span><br><span class="line">inotifywait -mrq --format <span class="string">'%w %f'</span> -e create,delete,attrib,close_write <span class="variable">$dir</span>|<span class="keyword">while</span> <span class="built_in">read</span> line;<span class="keyword">do</span></span><br><span class="line">	rsync -az --delete <span class="variable">$dir</span> rsync_backup@172.16.1.41::nfs_data </span><br><span class="line"><span class="keyword">done</span> &amp;</span><br><span class="line"></span><br><span class="line"><span class="comment">#2.上传图片测试</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#3.检查测试结果 </span></span><br><span class="line">[root@web01 html]<span class="comment"># ll /var/www/html/user_data/</span></span><br><span class="line">[root@web02 html]<span class="comment"># ll /var/www/html/user_data/</span></span><br><span class="line">[root@nfs ~]<span class="comment"># ll /data/</span></span><br><span class="line">-rw-r--r-- 1 www www 638916 May 23 05:50 33_cc.jpg</span><br><span class="line">[root@backup ~]<span class="comment"># ll /data/</span></span><br><span class="line">-rw-r--r-- 1 www www 638916 May 23 05:50 33_cc.jpg</span><br><span class="line"></span><br><span class="line"><span class="comment">#4.nfs服务器宕机</span></span><br><span class="line">[root@web01 html]<span class="comment"># umount -lf /var/www/html/user_data</span></span><br><span class="line">[root@web02 html]<span class="comment"># umount -lf /var/www/html/user_data</span></span><br><span class="line">[root@web01 html]<span class="comment"># mount -t nfs 172.16.1.41:/data /var/www/html/user_data </span></span><br><span class="line">[root@web02 html]<span class="comment"># mount -t nfs 172.16.1.41:/data /var/www/html/user_data</span></span><br></pre></td></tr></table></figure>

<h2 id="每日备份"><a href="#每日备份" class="headerlink" title="每日备份"></a>每日备份</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1.编写客户端备份脚本 </span></span><br><span class="line">[root@nfs ~]<span class="comment"># vim backup.sh </span></span><br><span class="line"><span class="meta">#!/bin/bash </span></span><br><span class="line">bak_dir=<span class="string">"/client_backup"</span> </span><br><span class="line">data_dir=<span class="string">"/data"</span> </span><br><span class="line">host_name=`hostname` </span><br><span class="line">ip=`/usr/sbin/ifconfig eth1|awk <span class="string">'NR==2&#123;print $2&#125;'</span>` </span><br><span class="line">date_time=`date +%F` </span><br><span class="line"><span class="built_in">export</span> RSYNC_PASSWORD=123</span><br><span class="line"></span><br><span class="line"><span class="comment">#1.创建客户端的备份目录 </span></span><br><span class="line">mkdir -p <span class="variable">$bak_dir</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.进入备份目录，压缩备份文件 </span></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$data_dir</span> &amp;&amp; \ </span><br><span class="line">tar zcf <span class="variable">$bak_dir</span>/<span class="variable">$&#123;host_name&#125;</span>_<span class="variable">$&#123;ip&#125;</span>_<span class="variable">$&#123;date_time&#125;</span>.tar.gz .</span><br><span class="line"></span><br><span class="line"><span class="comment">#3.生成校验文件 </span></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$bak_dir</span> &amp;&amp; \ </span><br><span class="line">md5sum <span class="variable">$&#123;host_name&#125;</span>_<span class="variable">$&#123;ip&#125;</span>_<span class="variable">$&#123;date_time&#125;</span>.tar.gz &gt; <span class="variable">$&#123;host_name&#125;</span>_<span class="variable">$&#123;ip&#125;</span>_<span class="variable">$&#123;date_time&#125;</span>.md5 </span><br><span class="line"></span><br><span class="line"><span class="comment">#4.推送数据到rsync服务端 </span></span><br><span class="line">rsync -avz <span class="variable">$bak_dir</span>/ rsync_backup@172.16.1.41::nfs_backup </span><br><span class="line"></span><br><span class="line"><span class="comment">#5.保留7天内的文件 </span></span><br><span class="line">find <span class="variable">$bak_dir</span> -<span class="built_in">type</span> f ! -mtime -7|xargs rm -f</span><br></pre></td></tr></table></figure>

<h2 id="发邮件"><a href="#发邮件" class="headerlink" title="发邮件"></a>发邮件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1.安装mailx</span></span><br><span class="line">[root@backup ~]<span class="comment"># yum install -y mailx </span></span><br><span class="line"></span><br><span class="line"><span class="comment">#2.先配置邮箱 </span></span><br><span class="line">[root@backup ~]<span class="comment"># vim /etc/mail.rc </span></span><br><span class="line"><span class="built_in">set</span> from=690705712@qq.com </span><br><span class="line"><span class="built_in">set</span> smtp=smtps://smtp.qq.com:465 </span><br><span class="line"><span class="built_in">set</span> smtp-auth-user=690705712@qq.com </span><br><span class="line"><span class="built_in">set</span> smtp-auth-password=授权码 </span><br><span class="line"><span class="built_in">set</span> smtp-auth=login </span><br><span class="line"><span class="built_in">set</span> ssl-verify=ignore </span><br><span class="line"><span class="built_in">set</span> nss-config-dir=/etc/pki/nssdb/</span><br><span class="line"></span><br><span class="line"><span class="comment">#3.编写服务端脚本 </span></span><br><span class="line">[root@backup ~]<span class="comment"># vim check_md5.sh </span></span><br><span class="line"><span class="meta">#!/bin/bash </span></span><br><span class="line">bak_dir=<span class="string">"/backup"</span> </span><br><span class="line">host_name=`hostname` </span><br><span class="line">ip=`ifconfig eth1|awk <span class="string">'NR==2&#123;print $2&#125;'</span>` </span><br><span class="line">date_time=`date +%F` </span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$&#123;bak_dir&#125;</span> &amp;&amp; \ </span><br><span class="line">md5sum -c *<span class="variable">$&#123;date_time&#125;</span>.md5|mail -s <span class="string">"<span class="variable">$&#123;date_time&#125;</span>_数据备份校验"</span> 管理员邮箱 &gt;/dev/null </span><br><span class="line">find /backup -<span class="built_in">type</span> f ! -mtime -180|xargs rm -f</span><br><span class="line"></span><br><span class="line"><span class="comment">#4.编写定时任务 </span></span><br><span class="line">[root@nfs ~]<span class="comment"># crontab -e </span></span><br><span class="line">00 01 * * * /bin/sh /root/backup.sh &amp;&gt;/dev/null </span><br><span class="line">[root@backup ~]<span class="comment"># crontab -e </span></span><br><span class="line">01 01 * * * /bin/sh /root/check_md5.sh &amp;&gt;/dev/null</span><br></pre></td></tr></table></figure>

<h1 id="Sersync实时同步"><a href="#Sersync实时同步" class="headerlink" title="Sersync实时同步"></a>Sersync实时同步</h1><h2 id="实时同步目的"><a href="#实时同步目的" class="headerlink" title="实时同步目的"></a>实时同步目的</h2><ul>
<li><p>解决单点故障</p>
</li>
<li><p>保证数据的一致性</p>
</li>
</ul>
<h2 id="sersync做实时同步的依赖"><a href="#sersync做实时同步的依赖" class="headerlink" title="sersync做实时同步的依赖"></a>sersync做实时同步的依赖</h2><ul>
<li><p><code>rsync</code></p>
</li>
<li><p><code>inotify</code></p>
</li>
</ul>
<p><code>Inotify</code>是一个通知接口，用来监控文件系统的各种变化，如果文件存取，删除，移动。可以非常方便地实现文件 异动告警，增量备份，并针对目录或文件的变化及时作出响应。<code>rsync+inotify</code>可以实触发式实时同步增量备份</p>
<p><code>Sersync</code>官网：<a href="https://github.com/wsgzao/sersync" target="_blank" rel="noopener">https://github.com/wsgzao/sersync</a></p>
<h2 id="sersync实战"><a href="#sersync实战" class="headerlink" title="sersync实战"></a>sersync实战</h2><h3 id="环境准备-2"><a href="#环境准备-2" class="headerlink" title="环境准备"></a>环境准备</h3><table>
<thead>
<tr>
<th align="center">主机名</th>
<th align="center">WanIP</th>
<th align="center">LanIP</th>
<th align="center">角色</th>
<th align="center">部署服务</th>
</tr>
</thead>
<tbody><tr>
<td align="center">web01</td>
<td align="center">10.0.0.7</td>
<td align="center">172.16.1.7</td>
<td align="center">nfs客户端</td>
<td align="center">httpd、php、nfs-utils</td>
</tr>
<tr>
<td align="center">web02</td>
<td align="center">10.0.0.8</td>
<td align="center">172.16.1.8</td>
<td align="center">nfs客户端</td>
<td align="center">httpd、php、nfs-utils</td>
</tr>
<tr>
<td align="center">nfs</td>
<td align="center">10.0.0.31</td>
<td align="center">172.16.1.31</td>
<td align="center">rsync客户端、nfs服务端</td>
<td align="center">nfs-utils、rsync、inotify-tools、sersync</td>
</tr>
<tr>
<td align="center">backup</td>
<td align="center">10.0.0.41</td>
<td align="center">172.16.1.41</td>
<td align="center">rsync服务端、nfs服务端（备机）</td>
<td align="center">nfs-utils、rsync</td>
</tr>
</tbody></table>
<h3 id="部署sersync"><a href="#部署sersync" class="headerlink" title="部署sersync"></a>部署sersync</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1.安装sersync的依赖 </span></span><br><span class="line">[root@nfs ~]<span class="comment"># yum install -y rsync inotify-tools</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#2.下载sersync </span></span><br><span class="line"><span class="comment">##国内下载地址（尽量别用） </span></span><br><span class="line">[root@nfs ~]<span class="comment"># wget http://test.driverzeng.com/other/sersync2.5.4_64bit_binary_stable_final.tar.gz</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#3.创建安装目录 </span></span><br><span class="line">[root@nfs ~]<span class="comment"># mkdir /application </span></span><br><span class="line"></span><br><span class="line"><span class="comment">#4.解压sersync </span></span><br><span class="line">[root@nfs ~]<span class="comment"># tar xf sersync2.5.4_64bit_binary_stable_final.tar.gz -C /application/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#5.改名 </span></span><br><span class="line">[root@nfs ~]<span class="comment"># mv /application/GNU-Linux-x86/ /application/sersync-2.5.4 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">#6.修改配置文件 </span></span><br><span class="line">[root@nfs ~]<span class="comment"># vim /application/sersync-2.5.4/confxml.xml</span></span><br><span class="line">&lt;!-- inotify监控动作配置 全部改成<span class="literal">true</span> --&gt;</span><br><span class="line">&lt;inotify&gt;</span><br><span class="line">    &lt;delete start=<span class="string">"true"</span>/&gt;</span><br><span class="line">    &lt;createFolder start=<span class="string">"true"</span>/&gt;</span><br><span class="line">    &lt;createFile start=<span class="string">"false"</span>/&gt;  --&gt;<span class="literal">true</span></span><br><span class="line">    &lt;closeWrite start=<span class="string">"true"</span>/&gt;</span><br><span class="line">    &lt;moveFrom start=<span class="string">"true"</span>/&gt;</span><br><span class="line">    &lt;moveTo start=<span class="string">"true"</span>/&gt;</span><br><span class="line">    &lt;attrib start=<span class="string">"false"</span>/&gt;  --&gt;<span class="literal">true</span></span><br><span class="line">    &lt;modify start=<span class="string">"false"</span>/&gt;  --&gt;<span class="literal">true</span></span><br><span class="line">&lt;/inotify&gt;</span><br><span class="line">相当于</span><br><span class="line">inotifywait -mrq --format %w %f -e create,delete,attrib,close_write /data</span><br><span class="line"></span><br><span class="line">&lt;sersync&gt;</span><br><span class="line">	&lt;!-- 监控目录，推送数据的目录 /data --&gt;</span><br><span class="line">    &lt;localpath watch=<span class="string">"/opt/tongbu"</span>&gt;  --&gt;/data</span><br><span class="line">    	&lt;!-- rsync服务端的IP地址：172.16.1.41 和 模块名：nfs_data --&gt;</span><br><span class="line">    	&lt;remote ip=<span class="string">"127.0.0.1"</span> name=<span class="string">"tongbu1"</span>/&gt;  --&gt;172.16.1.41，nfs_data</span><br><span class="line">    &lt;/localpath&gt;</span><br><span class="line">    &lt;rsync&gt;</span><br><span class="line">    	&lt;!-- rsync命令执行时的选项 --&gt;</span><br><span class="line">        &lt;commonParams params=<span class="string">"-artuz"</span>/&gt;  --&gt; -az --delete</span><br><span class="line">        &lt;!-- rsync命令认证，打开认证，rsync匿名用户，密码文件 --&gt;</span><br><span class="line">        &lt;auth start=<span class="string">"false"</span> users=<span class="string">"root"</span> passwordfile=<span class="string">"/etc/rsync.pas"</span>/&gt;  --&gt;<span class="literal">true</span>，rsync_backup，/etc/rsync.pass</span><br><span class="line">        &lt;userDefinedPort start=<span class="string">"false"</span> port=<span class="string">"874"</span>/&gt;&lt;!-- port=874 --&gt;</span><br><span class="line">        &lt;timeout start=<span class="string">"false"</span> time=<span class="string">"100"</span>/&gt;&lt;!-- timeout=100 --&gt;</span><br><span class="line">        &lt;ssh start=<span class="string">"false"</span>/&gt;</span><br><span class="line">    &lt;/rsync&gt;</span><br><span class="line">    &lt;failLog path=<span class="string">"/tmp/rsync_fail_log.sh"</span> timeToExecute=<span class="string">"60"</span>/&gt;&lt;!--default every 60mins execute once--&gt;</span><br><span class="line">    &lt;crontab start=<span class="string">"false"</span> schedule=<span class="string">"600"</span>&gt;&lt;!--600mins--&gt;</span><br><span class="line">        &lt;crontabfilter start=<span class="string">"false"</span>&gt;</span><br><span class="line">            &lt;exclude expression=<span class="string">"*.php"</span>&gt;&lt;/exclude&gt;</span><br><span class="line">            &lt;exclude expression=<span class="string">"info/*"</span>&gt;&lt;/exclude&gt;</span><br><span class="line">        &lt;/crontabfilter&gt;</span><br><span class="line">    &lt;/crontab&gt;</span><br><span class="line">    &lt;plugin start=<span class="string">"false"</span> name=<span class="string">"command"</span>/&gt;</span><br><span class="line">&lt;/sersync&gt;</span><br><span class="line">相当于</span><br><span class="line">rsync -az --delete /data rsync_backup@172.16.1.41::nfs_data --password-file=rsync.pass</span><br><span class="line"></span><br><span class="line"><span class="comment">#7.创建密码文件 </span></span><br><span class="line">[root@nfs data]<span class="comment"># echo '123' &gt; /etc/rsync.pass </span></span><br><span class="line"></span><br><span class="line"><span class="comment">#8.授权密码文件 </span></span><br><span class="line">[root@nfs data]<span class="comment"># chmod 600 /etc/rsync.pass </span></span><br><span class="line"></span><br><span class="line"><span class="comment">#9.启动sersync </span></span><br><span class="line">[root@nfs sersync-2.5.4]<span class="comment"># /application/sersync-2.5.4/sersync2 -rdo /application/sersync-2.5.4/confxml.xml</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##10.停止方式 </span></span><br><span class="line"><span class="comment">#停止 </span></span><br><span class="line">[root@nfs ~]<span class="comment"># pidof sersync2|xargs kill -3 </span></span><br><span class="line"><span class="comment">#重新加载 </span></span><br><span class="line">[root@nfs ~]<span class="comment"># pidof sersync2|xargs kill -1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#11.编写systemd管理脚本 </span></span><br><span class="line">[root@nfs ~]<span class="comment"># vim /usr/lib/systemd/system/sersyncd.service</span></span><br><span class="line">[Unit] </span><br><span class="line">Description=Client <span class="keyword">for</span> sersync </span><br><span class="line">After=network.target </span><br><span class="line"></span><br><span class="line">[Service] </span><br><span class="line">Type=forking </span><br><span class="line">ExecStart=/application/sersync-2.5.4/sersync2 -rdo /application/sersync-2.5.4/confxml.xml </span><br><span class="line">ExecReload=pidof sersync2|xargs <span class="built_in">kill</span> -1 </span><br><span class="line">ExecStop=pidof sersync2|xargs <span class="built_in">kill</span> -3 </span><br><span class="line"></span><br><span class="line">[Install] </span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line"></span><br><span class="line"><span class="comment">#10.启动sersync并加入开机自启 </span></span><br><span class="line">[root@nfs ~]<span class="comment"># systemctl start sersyncd </span></span><br><span class="line">[root@nfs ~]<span class="comment"># systemctl enable sersyncd</span></span><br></pre></td></tr></table></figure>

<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_devops/17690622498793.png" alt="17690622498793"></p>
]]></content>
      <categories>
        <category>SRE</category>
      </categories>
      <tags>
        <tag>Linux架构</tag>
      </tags>
  </entry>
  <entry>
    <title>[http协议]</title>
    <url>/2019/04/25/http%E5%8D%8F%E8%AE%AE/</url>
    <content><![CDATA[<h1 id="http协议"><a href="#http协议" class="headerlink" title="http协议"></a>http协议</h1><h2 id="http请求方法"><a href="#http请求方法" class="headerlink" title="http请求方法"></a>http请求方法</h2><p><strong>请求头信息</strong></p>
<p>在HTTP请求报文中的方法(Method)，是对所请求对象所进行的操作，也就是一些命令。请求报文中的操作有：</p>
<table>
<thead>
<tr>
<th align="center">方法(Method)</th>
<th align="center">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="center">GET</td>
<td align="center">请求读取一个Web页面</td>
</tr>
<tr>
<td align="center">POST</td>
<td align="center">明文提交数据，读取页面</td>
</tr>
<tr>
<td align="center">DELETE</td>
<td align="center">调用后的接口删除功能的页面</td>
</tr>
<tr>
<td align="center">CONNECT</td>
<td align="center">用于代理服务器</td>
</tr>
<tr>
<td align="center">HEAD</td>
<td align="center">请求读取一个Web页面的头部</td>
</tr>
<tr>
<td align="center">PUT</td>
<td align="center">调用后端，储存、上传功能页面</td>
</tr>
<tr>
<td align="center">TRACE</td>
<td align="center">用于测试，要求服务器送回收到的请求</td>
</tr>
<tr>
<td align="center">OPTION</td>
<td align="center">查询特定选项</td>
</tr>
</tbody></table>
<p><code>POST</code>请求向指定的资源提交要被处理的数据</p>
<h2 id="http响应方法"><a href="#http响应方法" class="headerlink" title="http响应方法"></a>http响应方法</h2><p><strong>响应报文中的状态码</strong></p>
<p>状态码（status-code）是响应报文状态行中包含的一个3位数字，指明特定的请求是否被满足，如果没有满足，原因是什么。状态码分为以下五类：</p>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_devops/image-20220528213523553.png" alt="image-20220528213523553"></p>
<table>
<thead>
<tr>
<th align="center">状态码</th>
<th align="center">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="center">200</td>
<td align="center">成功</td>
</tr>
<tr>
<td align="center">301</td>
<td align="center">永久重定向（跳转）</td>
</tr>
<tr>
<td align="center">302</td>
<td align="center">临时重定向（跳转）</td>
</tr>
<tr>
<td align="center">304</td>
<td align="center">本地缓存</td>
</tr>
<tr>
<td align="center">307</td>
<td align="center">内部重定向（跳转）</td>
</tr>
<tr>
<td align="center">400</td>
<td align="center">客户端错误</td>
</tr>
<tr>
<td align="center">401</td>
<td align="center">认证失败</td>
</tr>
<tr>
<td align="center">403</td>
<td align="center">找不到主页，权限不足</td>
</tr>
<tr>
<td align="center">404</td>
<td align="center">找不到页面</td>
</tr>
<tr>
<td align="center">500</td>
<td align="center">内部错误</td>
</tr>
<tr>
<td align="center">502</td>
<td align="center">找不到后端主机（哪台服务器日志出现，就查哪台机器）</td>
</tr>
<tr>
<td align="center">503</td>
<td align="center">服务器过载</td>
</tr>
<tr>
<td align="center">504</td>
<td align="center">后端主机超时</td>
</tr>
</tbody></table>
<p><strong>头部信息</strong></p>
<table>
<thead>
<tr>
<th align="center">头（header）</th>
<th align="center">类型</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">User-Agent</td>
<td align="center">请求</td>
<td align="center">关于浏览器和他平台的信息，如Mozilla5.0</td>
</tr>
<tr>
<td align="center">Accept</td>
<td align="center">请求</td>
<td align="center">客户能处理的页面的类型，如text-html</td>
</tr>
<tr>
<td align="center">Accept-Charset</td>
<td align="center">请求</td>
<td align="center">客户可以接受的字符集，如Uni’code-1-1</td>
</tr>
<tr>
<td align="center">Accept-Encoding</td>
<td align="center">请求</td>
<td align="center">客户能处理的页面编码方法，如gzip</td>
</tr>
<tr>
<td align="center">Accept-Language</td>
<td align="center">请求</td>
<td align="center">客户能处理的自然预言，如en，zh-cn</td>
</tr>
<tr>
<td align="center">Host</td>
<td align="center">请求</td>
<td align="center">服务器的DNS名称，从URL中提取出来，必需</td>
</tr>
<tr>
<td align="center">Referer</td>
<td align="center">请求</td>
<td align="center">用户从该URL代表的页面出发访问当前请求的页面</td>
</tr>
<tr>
<td align="center">Cookie</td>
<td align="center">请求</td>
<td align="center">将以前设置的Cookie送回服务器，可用来作为会话信息</td>
</tr>
<tr>
<td align="center">Date</td>
<td align="center">双向</td>
<td align="center">消息被发送时的日期和时间</td>
</tr>
<tr>
<td align="center">Server</td>
<td align="center">响应</td>
<td align="center">关于服务器的信息，如Microsoft-IIS/6.0</td>
</tr>
<tr>
<td align="center">Content-Encoding</td>
<td align="center">响应</td>
<td align="center">内容似乎如何被编码的，如gzip</td>
</tr>
<tr>
<td align="center">Content-Language</td>
<td align="center">响应</td>
<td align="center">页面所使用的自然语言</td>
</tr>
<tr>
<td align="center">Content-Length</td>
<td align="center">响应</td>
<td align="center">以字节计算的页面长度</td>
</tr>
<tr>
<td align="center">Content-Type</td>
<td align="center">响应</td>
<td align="center">页面的MIME类型</td>
</tr>
<tr>
<td align="center">Last-Modified</td>
<td align="center">响应</td>
<td align="center">页面最后被修改的时间和日期，在页面缓存机制中意义重大</td>
</tr>
<tr>
<td align="center">Location</td>
<td align="center">响应</td>
<td align="center">指示客户将请求发送给别处，即重定向到另一个URL</td>
</tr>
<tr>
<td align="center">Set-Cookie</td>
<td align="center">响应</td>
<td align="center">服务器希望客户保存一个Cookie</td>
</tr>
</tbody></table>
<p><strong>User-Agent</strong></p>
<p>User-Agent：浏览器标识（操作系统标识；加密等级标识；浏览器语言）渲染引擎标识 版本信息</p>
<p><strong>Server</strong></p>
<p>Server：响应头包含处理请求的原始服务器的软件信息</p>
<p><strong>Referer</strong></p>
<p>Referer：浏览器向 WEB 服务器表明自己是从哪个 网页/URL 获得/点击 当前请求中的网址/URL</p>
<p><strong>HTTP重定向</strong></p>
<p>Location：WEB 服务器告诉浏览器，试图访问的对象已经被移到别的位置了，到该头部指定的位置去取</p>
<p><strong>HTTP访问流程图</strong></p>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_devops/image-20220528223732645.png" alt="image-20220528223732645"></p>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_devops/image-20220528223102817.png" alt="image-20220528223102817"></p>
<p><strong>HTTP协议原理总结</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#在浏览器中输入http://blog.driverzeng.com </span></span><br><span class="line">1.浏览器向<span class="built_in">local</span> DNS发起域名解析请求，本地DNS（/etc/hosts）文件中没有 </span><br><span class="line">2.浏览器向DNS根域服务器发起请求，解析域名blog.driverzeng.com </span><br><span class="line">3.DNS进行递归查询和迭代查询： </span><br><span class="line">	客户端向服务端发起查询 -&gt; 递归查询 </span><br><span class="line">	服务端向服务端发起查询 -&gt; 迭代查询 </span><br><span class="line">	</span><br><span class="line">	.com根域服务器发起查询 </span><br><span class="line">	.com根域服务器 -&gt; .driverzeng.com </span><br><span class="line">	.driverzeng.com -&gt; blog.driverzeng.com A记录 39.104.203.184 </span><br><span class="line">	将A记录：39.104.203.184返回给浏览器 </span><br><span class="line">4.浏览器和39.104.203.184所在服务器的80端口建立TCP/IP连接 </span><br><span class="line">	防火墙的规则不允许你的IP地址访问该服务器的80端口，则拒绝连接，报错返回给用户 </span><br><span class="line">	防火墙的规则允许你的IP地址访问该服务器的80端口，则放行 </span><br><span class="line">	-建立连接（TCP/IP 三次握手） syn（建立连接信号） </span><br><span class="line">	客户端 ---------------------&gt; 服务端 syn+ack(我收到建立连接的请求了) </span><br><span class="line">	服务端 ---------------------&gt; 客户端 ack(告诉服务端，我知道你收到建立连接的请求了) </span><br><span class="line">	客户端 ---------------------&gt; 服务端 </span><br><span class="line">5.向服务端的web服务发起http请求（负载均衡） </span><br><span class="line">	-请求头部信息 </span><br><span class="line">	1）请求的方法是什么: GET获取 </span><br><span class="line">	2）请求的Host主机是: blog.driverzeng.com </span><br><span class="line">	3）请求的资源是什么: /index.html </span><br><span class="line">	4）请求的端口是什么: 默认http是80 https是443 </span><br><span class="line">	5）请求携带的参数是什么: 属性（请求类型、压缩、认证、浏览器信息、等等） </span><br><span class="line">	6）请求最后的空行 </span><br><span class="line">6.将请求根据调度算法（rr 轮询）将请求下发给后端的web服务器 </span><br><span class="line">7.读取web服务器上的nginx配置文件，找到站点目录 </span><br><span class="line">8.找到对应的代码文件</span><br><span class="line">	- 静态请求：web服务器将静态求情下发到共享存储服务器上，找到对应的静态资源返回给用户 </span><br><span class="line">	- 动态请求：</span><br><span class="line">		1）将请求发送给后端代码，处理 </span><br><span class="line">		2）先找数据库的缓存（Redis，memcache） </span><br><span class="line">		3）如果缓存中有数据，则直接将数据返回给用户 </span><br><span class="line">		4）如果缓存没有数据，则找后端数据库 </span><br><span class="line">		5）从数据库中取出数据后，先存入缓存一份，然后在返回给用户</span><br><span class="line">9.返回对应的状态码和响应头部信息给浏览器 </span><br><span class="line">10.断开TCP/IP连接</span><br><span class="line">	-四次挥手</span><br><span class="line">11.浏览器展示网站页面</span><br></pre></td></tr></table></figure>

<h2 id="CDN"><a href="#CDN" class="headerlink" title="CDN"></a>CDN</h2><p>CDN：分布式静态缓存服务器</p>
<p>静态资源：html,css,js,mp3,mp4,avi,jpg.png…</p>
<p>1.提升了网站访问速度</p>
<p>2.减少后端服务器的压力</p>
<h2 id="HTTP相关术语"><a href="#HTTP相关术语" class="headerlink" title="HTTP相关术语"></a>HTTP相关术语</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">PV：独立页面浏览量（一条日志，一个请求） </span><br><span class="line">UV：独立设备 </span><br><span class="line">IP：独立的IP地址</span><br><span class="line"></span><br><span class="line">假设公司有一座大厦，大厦有100人，每个人有一台电脑和一部手机，上网都是通过nat转换出口，每个人点击网站2次, 请 问对应的pv,uv,ip分别是多少？</span><br><span class="line">pv：100 * 2 * 2 = 400 </span><br><span class="line">uv：100 * 2 </span><br><span class="line">IP：1</span><br></pre></td></tr></table></figure>

<h2 id="SOA松耦合架构"><a href="#SOA松耦合架构" class="headerlink" title="SOA松耦合架构"></a>SOA松耦合架构</h2><p>开发网站为了解耦，做出SOA架构</p>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_devops/image-20220529001030555.png" alt="image-20220529001030555"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#一个电商公司，他的网站页面功能会有很多</span></span><br><span class="line">注册</span><br><span class="line">登录</span><br><span class="line">首页</span><br><span class="line">详情页</span><br><span class="line">购物车</span><br><span class="line">价格标签</span><br><span class="line">留言</span><br><span class="line">客服</span><br><span class="line">支付中心</span><br><span class="line">物流</span><br><span class="line">仓储信息</span><br><span class="line">订单相信</span><br><span class="line">图片</span><br></pre></td></tr></table></figure>

<h1 id="OSI七层协议"><a href="#OSI七层协议" class="headerlink" title="OSI七层协议"></a>OSI七层协议</h1><h2 id="CS架构与BS架构"><a href="#CS架构与BS架构" class="headerlink" title="CS架构与BS架构"></a>CS架构与BS架构</h2><figure class="highlight"><table><tr><td class="code"><pre><span class="line">   Client &lt;= = = = = = = = = = =&gt; Server</span><br><span class="line">客户端软件send                  服务端软件recv</span><br><span class="line">   操作系统                        操作系统        </span><br><span class="line">计算机硬件&lt;= = = =物理介质= = = =&gt;计算机硬件</span><br><span class="line"></span><br><span class="line">	 Browser&lt;= = = = = = = = = = =&gt; Server</span><br></pre></td></tr></table></figure>

<h2 id="网络通信"><a href="#网络通信" class="headerlink" title="网络通信"></a>网络通信</h2><p>网络存在的意义就是跨地域数据传输=》称之为通信 网络=物理链接介质+互联网通信协议</p>
<h2 id="OSI七层协议-1"><a href="#OSI七层协议-1" class="headerlink" title="OSI七层协议"></a>OSI七层协议</h2><p>五层协议 应用层 传输层 网络层 数据链路层 物理层</p>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/%E6%88%AA%E5%B1%8F2022-12-08%2020.05.09.png" alt="截屏2022-12-08 20.05.09"></p>
<p>协议：规定数据的组织格式</p>
<p>格式：头部+数据部分</p>
<p>封包裹的过程：数据外加头</p>
<p>拆包裹的过程：拆掉头获取数据</p>
<p>OSI七层协议数据传输的封包与解包过程</p>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/1036857-20200415215541847-564448301.gif" alt="1036857-20200415215541847-564448301"></p>
<h2 id="五层协议"><a href="#五层协议" class="headerlink" title="五层协议"></a>五层协议</h2><p>数据链路层</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">物理层负责发送电信号 一组物理层数据称之为：位 单纯的电信号毫无意义，必须对其进行分组</span><br><span class="line">数据链路层：ethernet以太网协议</span><br><span class="line"></span><br><span class="line">规定<span class="number">1</span>：一组数据称之为一个数据帧</span><br><span class="line"></span><br><span class="line">规定<span class="number">2</span>：数据帧分成两部分=》头+数据 </span><br><span class="line">头包含：源地址与目标地址，该地址是mac地址 </span><br><span class="line">数据包含：包含的是网络层发过来的整体的内容</span><br><span class="line"></span><br><span class="line">规定<span class="number">3</span>：规定但凡接入互联网的主机必须有一块网卡，每块网卡在出厂时都烧制好一个全世界独一无二的地址，</span><br><span class="line">该地址称之为mac地址</span><br><span class="line"></span><br><span class="line">head包含：(固定<span class="number">18</span>个字节)</span><br><span class="line"></span><br><span class="line">发送者／源地址，<span class="number">6</span>个字节</span><br><span class="line">接收者／目标地址，<span class="number">6</span>个字节</span><br><span class="line">数据类型，<span class="number">6</span>个字节</span><br><span class="line"></span><br><span class="line">data包含：(最短<span class="number">46</span>字节，最长<span class="number">1500</span>字节)</span><br><span class="line">head长度＋data长度＝最短<span class="number">64</span>字节，最长<span class="number">1518</span>字节，超过最大限制就分片发送</span><br></pre></td></tr></table></figure>

<p><strong>mac地址：</strong></p>
<p>head中包含的源和目标地址由来：ethernet规定接入internet的设备都必须具备网卡，发送端和接收端的地址便是指网卡的地址，即mac地址</p>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/%E6%88%AA%E5%B1%8F2022-12-08%2020.07.04.png" alt="截屏2022-12-08 20.07.04"></p>
<p><strong>广播：</strong></p>
<p>有了mac地址，同一网络内的两台主机就可以通信了（一台主机通过arp协议获取另外一台主机的mac地址）</p>
<p>ethernet采用最原始的方式，广播的方式进行通信，即计算机通信基本靠吼</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">网络层：</span><br><span class="line">IP协议 要达到的目的： 划分广播域 每一个广播域但凡要接通外部，</span><br><span class="line">一定要有一个网关帮内部的计算机转发包到公网 网关与外界通信走的是路由协议</span><br><span class="line"></span><br><span class="line">规定<span class="number">1</span>：一组数据称之为一个数据包 </span><br><span class="line">规定<span class="number">2</span>：数据帧分成两部分=》头+数据 </span><br><span class="line">头包含：源地址与目标地址，该地址是IP地址 数据包含的：传输层发过来的整体的内容</span><br><span class="line"></span><br><span class="line">IP协议：</span><br><span class="line"></span><br><span class="line">规定网络地址的协议叫ip协议，它定义的地址称之为ip地址，广泛采用的v4版本即ipv4，</span><br><span class="line">它规定网络地址由<span class="number">32</span>位<span class="number">2</span>进制表示</span><br><span class="line">范围<span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span><span class="number">-255.255</span><span class="number">.255</span><span class="number">.255</span></span><br><span class="line">一个ip地址通常写成四段十进制数，例：<span class="number">172.16</span><span class="number">.10</span><span class="number">.1</span></span><br><span class="line">ipv4地址： <span class="number">8</span>bit<span class="number">.8</span>bit<span class="number">.8</span>bit<span class="number">.8</span>bit</span><br><span class="line"></span><br><span class="line">子网掩码： <span class="number">8</span>bit<span class="number">.8</span>bit<span class="number">.8</span>bit<span class="number">.8</span>bit</span><br><span class="line"></span><br><span class="line">一个合法的ipv4地址组成部分=ip地址/子网掩码地址 <span class="number">172.16</span><span class="number">.10</span><span class="number">.1</span>/<span class="number">255.255</span><span class="number">.255</span><span class="number">.0</span> <span class="number">172.16</span><span class="number">.10</span><span class="number">.1</span>/<span class="number">24</span></span><br><span class="line"></span><br><span class="line">知道”子网掩码”，我们就能判断，任意两个IP地址是否处在同一个子网络。</span><br><span class="line"></span><br><span class="line">IP协议的作用主要有两个，一个是为每一台计算机分配IP地址，另一个是确定哪些地址在同一个子网络。</span><br><span class="line"></span><br><span class="line">总结****** ip地址+mac地址=》标识全世界范围内独一无二的一台计算机</span><br><span class="line"></span><br><span class="line">或者： ip地址=》标识全世界范围内独一无二的一台计算机</span><br></pre></td></tr></table></figure>

<p>事先知道的是对方的ip地址 但是计算机的底层通信是基于ethernet以太网协议的mac地址通信</p>
<p><strong>arp协议：将ip地址解析成mac地址</strong></p>
<p><strong>FF:FF:FF:FF:FF:FF：表示想要获取对方的mac地址</strong></p>
<p>二者网络地址一样，拿到目标的mac地址</p>
<p>二者网络地址不一样，拿到网关的mac地址</p>
<p>mac地址学习：记录广播过的mac地址</p>
<h2 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h2><p>路由器，三层交换机</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#IP协议:</span></span><br><span class="line">规定网络地址的协议叫ip协议，它定义的地址称之为ip地址，广泛采用的v4版本即ipv4，它规定网络地址由32位2进 制表示</span><br><span class="line">范围0.0.0.0-255.255.255.255</span><br><span class="line">一个ip地址通常写成四段十进制数，例:172.16.10.1</span><br><span class="line"></span><br><span class="line"><span class="comment">#ip地址分成两部分(点分十进制)</span></span><br><span class="line">网络部分:标识子网</span><br><span class="line">主机部分:标识主机 注意:单纯的ip地址段只是标识了ip地址的种类，从网络部分或主机部分都无法辨识一个ip所处的子网 例:172.16.10.1与172.16.10.2并不能确定二者处于同一子网</span><br><span class="line"></span><br><span class="line"><span class="comment">#子网掩码</span></span><br><span class="line">所谓”子网掩码”，就是表示子网络特征的一个参数。它在形式上等同于IP地址，也是一个32位二进制数字，它的网络部分全部为1，主机部分全部为0。比如，IP地址172.16.10.1，如果已知网络部分是前24位，主机部分是后8位，那 么子网络掩码就是11111111.11111111.11111111.00000000，写成十进制就是255.255.255.0。</span><br><span class="line">知道”子网掩码”，我们就能判断，任意两个IP地址是否处在同一个子网络。方法是将两个IP地址与子网掩码分别进行 AND运算(两个数位都为1，运算结果为1，否则为0)，然后比较结果是否相同，如果是的话，就表明它们在同一个子网络中，否则就不是。</span><br><span class="line"></span><br><span class="line">比如，已知IP地址172.16.10.1和172.16.10.2的子网掩码都是255.255.255.0，请问它们是否在同一个子网络? </span><br><span class="line">两者与子网掩码分别进行AND运算，</span><br><span class="line">172.16.10.1:10101100.00010000.00001010.000000001</span><br><span class="line">255255.255.255.0:11111111.11111111.11111111.00000000 </span><br><span class="line">AND运算得网络地址结果:10101100.00010000.00001010.000000001-&gt;172.16.10.0 </span><br><span class="line">AND运算又叫做<span class="string">"按位与"</span>运算，符号:<span class="string">"&amp;"</span>，在编程术语中表示一种运算方法，不可逆</span><br><span class="line">172.16.10.2:10101100.00010000.00001010.000000010 255255.255.255.0:11111111.11111111.11111111.00000000</span><br><span class="line">AND运算得网络地址结果:10101100.00010000.00001010.000000001-&gt;172.16.10.0 结果都是172.16.10.0，因此它们在同一个子网络。</span><br><span class="line">总结一下，IP协议的作用主要有两个，一个是为每一台计算机分配IP地址，另一个是确定哪些地址在同一个子网段 </span><br><span class="line"></span><br><span class="line"><span class="comment">#ip数据包</span></span><br><span class="line">ip数据包也分为head和data部分，无须为ip包定义单独的栏位，直接放入以太网包的data部分 head:长度为20到60字节</span><br><span class="line">data:最长为65,515字节。 而以太网数据包的”数据”部分，最长只有1500字节。因此，如果IP数据包超过了1500字节，它就需要分割成几个以太 网数据包，分开发送了。</span><br></pre></td></tr></table></figure>

<p>按位与运算 AND</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#按位与运算 </span></span><br><span class="line">1&amp;1=1; </span><br><span class="line">1&amp;0=0; </span><br><span class="line">0&amp;1=0;</span><br><span class="line">0&amp;0=0;</span><br><span class="line"></span><br><span class="line"><span class="comment">#如何判断是否在统一网段，取决于IP和子网掩码</span></span><br><span class="line">172.16.10.1</span><br><span class="line">10101100.00010000.00001010.00000001</span><br><span class="line">255.255.255.0</span><br><span class="line">11111111.11111111.11111111.00000000</span><br><span class="line">172.16.10.2</span><br><span class="line">10101100.00010000.00001010.00000010</span><br><span class="line">255.255.255.0</span><br><span class="line">11111111.11111111.11111111.00000000</span><br></pre></td></tr></table></figure>

<h2 id="传输层"><a href="#传输层" class="headerlink" title="传输层"></a>传输层</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">传输层功能:建立端口到端口的通信</span><br><span class="line"></span><br><span class="line">四层路由器、四层交换机 传输层的由来:网络层的ip帮我们区分子网，以太网层的mac帮我们找到主机，然后大家使用的都是应用程序，你的电脑上可能同时开启qq，暴风影音，等多个应用程序， 那么我们通过ip和mac找到了一台特定的主机，如何标识这台主机上的应用程序，答案就是端口，端口即应用程序与 网卡关联的编号。</span><br><span class="line"></span><br><span class="line">注意：端口范围0-65535，0-1023为系统占用端口</span><br><span class="line"></span><br><span class="line">TCP好人协议、可靠协议</span><br><span class="line">SYN洪水攻击（持续syn_rcvd状态）</span><br></pre></td></tr></table></figure>

<p>TCP三次握手</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">TCP协议的11种状态 </span><br><span class="line">三次握手</span><br><span class="line">syn_sent  <span class="comment">#客户端发送SYN建立连接是的状态</span></span><br><span class="line">LISTEN  <span class="comment">#服务端等待客户端连接时的，监听状态 </span></span><br><span class="line">syn_rcvd  <span class="comment">#服务端返回ACK和SYN给客户端的转态 </span></span><br><span class="line">ESTABLISHED  <span class="comment">#客户端和服务端建立连接时的状态</span></span><br></pre></td></tr></table></figure>

<img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/%E6%88%AA%E5%B1%8F2022-12-08%2020.30.59.png" alt="截屏2022-12-08 20.30.59" style="zoom:50%;" />

<p>四次挥手</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#四次挥手 </span></span><br><span class="line">FIN_WAIT_1  <span class="comment">#客户单发送FIN断开连接是的状态</span></span><br><span class="line">CLOSE_WAIT  <span class="comment">#服务端收到了客户端发来的断开连接是返回ACK的状态</span></span><br><span class="line">FIN_WAIT_2  <span class="comment">#客户端接收服务端返回的ACK的状态</span></span><br><span class="line">LAST_ACK    <span class="comment">#服务端发送FIN给客户端的状态</span></span><br><span class="line">TIME_WAIT   <span class="comment">#客户单返回ACK给服务端，断开连接后的状态</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#关闭状态</span></span><br><span class="line">CLOSED (被动关闭端在接收ACK包后，进入CLOSED状态关闭TCP请求) </span><br><span class="line">CLOSING (客户端和服务端同时发起断开连接)</span><br></pre></td></tr></table></figure>

<img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/%E6%88%AA%E5%B1%8F2022-12-08%2020.29.38.png" alt="截屏2022-12-08 20.29.38" style="zoom:50%;" />

<h2 id="会话层"><a href="#会话层" class="headerlink" title="会话层"></a>会话层</h2><p>建立会话：登录网站</p>
<p>保持会话：保持登录</p>
<p>断开会话：离开网页，断开登录</p>
<h2 id="表示层"><a href="#表示层" class="headerlink" title="表示层"></a>表示层</h2><p>表示层主要三大功能:</p>
<p>1.内码转换 </p>
<p>2.压缩与解压缩 </p>
<p>3.加密与解密</p>
<h2 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">应用层功能：规定应用程序的数据格式。</span><br><span class="line">应用层由来：用户使用的都是应用程序，均工作于应用层，互联网是开发的，大家都可以开发自己的应用程序，数据多种多样，必须规定好数据的组织形式</span><br></pre></td></tr></table></figure>

<p><a href="https://www.cnblogs.com/linhaifeng/articles/6129246.html#_label2" target="_blank" rel="noopener">参考博客</a></p>
]]></content>
      <categories>
        <category>SRE</category>
      </categories>
      <tags>
        <tag>Linux架构</tag>
      </tags>
  </entry>
  <entry>
    <title>[rsync数据备份]</title>
    <url>/2019/04/22/rsync%E6%95%B0%E6%8D%AE%E5%A4%87%E4%BB%BD/</url>
    <content><![CDATA[<h1 id="rsync数据备份"><a href="#rsync数据备份" class="headerlink" title="rsync数据备份"></a>rsync数据备份</h1><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><table>
<thead>
<tr>
<th align="center">主机名</th>
<th align="center">内网IP</th>
<th align="center">外网IP</th>
<th align="center">角色</th>
</tr>
</thead>
<tbody><tr>
<td align="center">web01</td>
<td align="center">172.16.1.7</td>
<td align="center">10.0.0.7</td>
<td align="center">备份客户端</td>
</tr>
<tr>
<td align="center">backup</td>
<td align="center">172.16.1.41</td>
<td align="center">10.0.0.41</td>
<td align="center">备份服务端</td>
</tr>
</tbody></table>
<h2 id="rsync概述"><a href="#rsync概述" class="headerlink" title="rsync概述"></a>rsync概述</h2><p>rsync是一款开源、快速、多功能、可实现<strong>全量及增量</strong>的本地或<strong>远程数据同步</strong>备份的优秀工具。rsync软件适用于Unix、linux、windows等多种操作平台</p>
<blockquote>
<p><strong>为什么使用rsync不用scp？</strong></p>
<ul>
<li><p>scp是基于ssh协议的命令，不是一个服务</p>
</li>
<li><p>scp每次都基于全量拷贝，rsync支持增量拷贝</p>
</li>
</ul>
</blockquote>
<h2 id="备份类型"><a href="#备份类型" class="headerlink" title="备份类型"></a>备份类型</h2><ul>
<li><p>全量备份</p>
<ul>
<li><p>将数据全部备份出来</p>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_devops/image-20220513223426274.png" alt="image-20220513223426274"></p>
</li>
</ul>
</li>
<li><p>增量备份</p>
<ul>
<li><p>基于上一次备份，新增部分的数据备份出来</p>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_devops/image-20220513223539309.png" alt="image-20220513223539309"></p>
</li>
</ul>
</li>
<li><p>差异备份</p>
<ul>
<li>基于全量备份，新增部分的数据备份出来</li>
</ul>
</li>
</ul>
<h2 id="rsync应用场景"><a href="#rsync应用场景" class="headerlink" title="rsync应用场景"></a>rsync应用场景</h2><ul>
<li>推：所有主机推送本地数据至rsync备份服务器，会导致数据同步缓慢（适合少量数据备份）</li>
</ul>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_devops/image-20220513225122692.png" alt="image-20220513225122692"></p>
<ul>
<li>拉：rsync备份服务端拉去所有主机上的数据，会导致备份服务器开销过大</li>
</ul>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_devops/360%E6%88%AA%E5%9B%BE1814122193114116.png" alt="360截图1814122193114116"></p>
<ul>
<li>大量服务器备份场景</li>
</ul>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_devops/image-20220513225426835.png" alt="image-20220513225426835"></p>
<ul>
<li>异地备份实现思路</li>
</ul>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_devops/image-20220513225858773.png" alt="image-20220513225858773"></p>
<h2 id="rsync传输模式"><a href="#rsync传输模式" class="headerlink" title="rsync传输模式"></a>rsync传输模式</h2><p><font color='red'><strong>注意：rsync拷贝目录时，加/和不加/是有区别的</strong></font></p>
<p>/etc/ ：将etc目录下的所有文件拷贝过去，不包括目录本身</p>
<p>/etc ：将etc目录本身和目录下的所有文件一并拷贝过去</p>
<ul>
<li>本地模式（cp）</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Local: rsync [OPTION...] SRC... [DEST] </span><br><span class="line">	cp [OPTION]... SOURCE DEST </span><br><span class="line"></span><br><span class="line"><span class="comment">#语法</span></span><br><span class="line">rsync [选项] 源文件.. 目标路径</span><br></pre></td></tr></table></figure>

<ul>
<li>远程模式（scp）</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Access via remote shell: </span><br><span class="line">	Pull: 拉 rsync [OPTION...] [USER@]HOST:SRC... [DEST] </span><br><span class="line">	Push: 推 rsync [OPTION...] SRC... [USER@]HOST:DEST</span><br><span class="line"></span><br><span class="line"><span class="comment">#语法</span></span><br><span class="line">拉：rsync [选项] [用户@]主机IP:文件路径 本机目录 </span><br><span class="line">推：rsync [选项] 本机文件 [用户@]主机IP:目录</span><br><span class="line"></span><br><span class="line">注意：如果不加 用户@ 默认以当前系统登录的用户为用户名</span><br></pre></td></tr></table></figure>

<ul>
<li>守护进程模式（把rsync当成服务启动）</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Access via rsync daemon: </span><br><span class="line">	Pull: rsync [OPTION...] [USER@]HOST::SRC... [DEST] </span><br><span class="line">	Push: rsync [OPTION...] SRC... [USER@]HOST::DEST </span><br><span class="line"></span><br><span class="line">拉：rsync [选项..] [用户名@]主机IP::配置文件中的模块名 本机目录 </span><br><span class="line">推：rsync [选项..] 本机文件 [用户名@]主机IP::配置文件中的模块名</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>企业中为啥使用守护进程模式？</strong></p>
<ul>
<li><p>远程模式和scp差不多，基于ssh协议</p>
</li>
<li><p>需要知道系统的用户名和密码</p>
</li>
<li><p>守护进程不需要ssh协议，服务启动后，自带端口</p>
</li>
<li><p>守护进程可以设置匿名用户，不需要使用系统用户</p>
</li>
</ul>
</blockquote>
<h2 id="rsync选项"><a href="#rsync选项" class="headerlink" title="rsync选项"></a>rsync选项</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-a：归档模式传输, 等于-tropgDl </span><br><span class="line">-v：显示同步过程 </span><br><span class="line">-z：压缩，提高传输效率 </span><br><span class="line">============================== </span><br><span class="line">-t：time 保持文件的时间信息 </span><br><span class="line">-r：拷贝目录时，递归拷贝 </span><br><span class="line">-o：owner 保持文件的属主信息 </span><br><span class="line">-g：group 保持文件的属组信息 </span><br><span class="line">-p：perm 保持文件的权限信息 </span><br><span class="line">-D：device 保持设备文件的信息 </span><br><span class="line">-l：link 保留软链接</span><br><span class="line">==============================</span><br><span class="line">-P：显示进度 </span><br><span class="line">-L：保留软链接指向的目标文件 </span><br><span class="line">--exclude=PATTERN 指定排除不需要传输的文件模式 </span><br><span class="line">--exclude-from=file 指定排除文件 </span><br><span class="line">--bwlimit=1 限速传输 </span><br><span class="line">--partial 断点续传 </span><br><span class="line">--delete 决定数据是否要同步 rm </span><br><span class="line">--password-file= 指定密码文件</span><br></pre></td></tr></table></figure>

<h1 id="rsync环境准备"><a href="#rsync环境准备" class="headerlink" title="rsync环境准备"></a>rsync环境准备</h1><table>
<thead>
<tr>
<th align="center">主机名</th>
<th align="center">WanIP</th>
<th align="center">LanIP</th>
<th align="center">角色</th>
</tr>
</thead>
<tbody><tr>
<td align="center">web01</td>
<td align="center">10.0.0.7</td>
<td align="center">172.16.1.7</td>
<td align="center">rsync客户端</td>
</tr>
<tr>
<td align="center">backup</td>
<td align="center">10.0.0.41</td>
<td align="center">172.16.1.41</td>
<td align="center">rsync服务端</td>
</tr>
</tbody></table>
<h2 id="rsync工作模式"><a href="#rsync工作模式" class="headerlink" title="rsync工作模式"></a>rsync工作模式</h2><ul>
<li><p>本地模式（cp）</p>
</li>
<li><p>远程模式（scp）</p>
</li>
<li><p>守护进程模式</p>
</li>
</ul>
<p>rsync官网：<a href="https://rsync.samba.org/" target="_blank" rel="noopener">https://rsync.samba.org/</a></p>
<p>rsync监听端口：873</p>
<p>rsync运行架构：C/S Client/Server</p>
<p><strong>架构类型</strong></p>
<p>C/S Client/Server</p>
<p>B/S Browser/Server</p>
<p>rsync服务端的作用：存储备份数据的</p>
<h2 id="服务端操作"><a href="#服务端操作" class="headerlink" title="服务端操作"></a>服务端操作</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1.安装 </span></span><br><span class="line">[root@backup ~]<span class="comment"># yum install -y rsync</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#2.配置 </span></span><br><span class="line">[root@backup ~]<span class="comment"># vim /etc/rsyncd.conf </span></span><br><span class="line">uid = rsync </span><br><span class="line">gid = rsync </span><br><span class="line">port = <span class="number">873</span> </span><br><span class="line">fake super = yes </span><br><span class="line">use chroot = no </span><br><span class="line">max connections = <span class="number">200</span> </span><br><span class="line">timeout = <span class="number">600</span> </span><br><span class="line">ignore errors </span><br><span class="line">read only = false </span><br><span class="line">list = false</span><br><span class="line">auth users = rsync_backup </span><br><span class="line">secrets file = /etc/rsync.passwd </span><br><span class="line">log file = /var/log/rsyncd.log </span><br><span class="line"><span class="comment">##################################### </span></span><br><span class="line">[backup] comment = welcome to oldboyedu backup! </span><br><span class="line">path = /backup</span><br><span class="line"></span><br><span class="line"><span class="comment">#服务的用户</span></span><br><span class="line">uid = rsync</span><br><span class="line"><span class="comment">#服务的用户组</span></span><br><span class="line">gid = rsync</span><br><span class="line"><span class="comment">#该服务监听的端口</span></span><br><span class="line">port = <span class="number">873</span></span><br><span class="line"><span class="comment">#rsync不以root身份运行，传输数据不使用系统用户</span></span><br><span class="line">fake super = yes</span><br><span class="line"><span class="comment">#禁锢目录，客户端推送时只能在创建的目录（不允许获取到root权限）</span></span><br><span class="line">use chroot = no</span><br><span class="line"><span class="comment">#最大连接数，最多能有多少个客户端跟服务端的873端口建立连接</span></span><br><span class="line">max connections = <span class="number">200</span></span><br><span class="line"><span class="comment">#超时时间</span></span><br><span class="line">timeout = <span class="number">600</span></span><br><span class="line"><span class="comment">#忽略错误</span></span><br><span class="line">ignore errors</span><br><span class="line"><span class="comment">#只读 = false，不只读，可读可写</span></span><br><span class="line">read only = false</span><br><span class="line"><span class="comment">#不允许查看模块信息</span></span><br><span class="line">list = false</span><br><span class="line"><span class="comment">#匿名用户</span></span><br><span class="line">auth users = rsync_backup</span><br><span class="line"><span class="comment">#匿名用户的密码文件</span></span><br><span class="line">secrets file = /etc/rsync.passwd</span><br><span class="line"><span class="comment">#日志文件</span></span><br><span class="line">log file = /var/log/rsyncd.log</span><br><span class="line"><span class="comment">#################################</span></span><br><span class="line">[backup]</span><br><span class="line"><span class="comment">#模块的描述信息</span></span><br><span class="line">comment = welcome to oldboyedu backup!</span><br><span class="line"><span class="comment">#备份的目录</span></span><br><span class="line">path = /backup</span><br><span class="line"></span><br><span class="line">端口的范围：<span class="number">1</span>~<span class="number">65535</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#3.创建rsync系统用户 </span></span><br><span class="line">[root@backup ~]<span class="comment"># useradd rsync -s /sbin/nologin -M</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#4.创建服务端的密码文件 </span></span><br><span class="line">[root@backup ~]<span class="comment"># vim /etc/rsync.passwd </span></span><br><span class="line">rsync_backup:<span class="number">123</span></span><br><span class="line">或</span><br><span class="line">[root@backup ~]<span class="comment"># echo 'rsync_backup:123456' &gt; /etc/rsync.passwd</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#5.修改密码文件的权限为 600（rsync规定）</span></span><br><span class="line">[root@backup ~]<span class="comment"># chmod 600 /etc/rsync.passwd</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#6.创建备份目录 </span></span><br><span class="line">[root@backup ~]<span class="comment"># mkdir /backup</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#7.修改备份目录的属组和属主 </span></span><br><span class="line">[root@backup ~]<span class="comment"># chown rsync:rsync /backup/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#8.启动rsync服务并加入开机自启 </span></span><br><span class="line">[root@backup ~]<span class="comment"># systemctl start rsyncd </span></span><br><span class="line">[root@backup ~]<span class="comment"># systemctl enable rsyncd</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 9.检查服务进程 </span></span><br><span class="line">[root@backup ~]<span class="comment"># ps -ef|grep [r]sync</span></span><br><span class="line">root     7787      1  0 05:58 ?      00:00:00 /usr/bin/rsync --daemon --no-detach</span><br><span class="line"></span><br><span class="line"><span class="comment"># 10.检查服务端口 </span></span><br><span class="line">[root@backup ~]<span class="comment"># netstat -lntup|grep 873</span></span><br><span class="line">tcp        <span class="number">0</span>      <span class="number">0</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:<span class="number">873</span>           <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:*           LISTEN      <span class="number">7787</span>/rsync </span><br><span class="line">tcp6       <span class="number">0</span>      <span class="number">0</span> :::<span class="number">873</span>                :::*                LISTEN      <span class="number">7787</span>/rsync</span><br></pre></td></tr></table></figure>

<h2 id="客户端操作"><a href="#客户端操作" class="headerlink" title="客户端操作"></a>客户端操作</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">推：rsync [option..] 原文件 [用户名@]主机IP::模块名 </span><br><span class="line">rsync -avz /etc/passwd rsync_backup@172.16.1.41::backup</span><br><span class="line"></span><br><span class="line"><span class="comment">#报错</span></span><br><span class="line"><span class="comment">##用户密码认证失败</span></span><br><span class="line">[root@web01 ~]<span class="comment"># rsync -avz /etc/passwd rsync_backup@172.16.1.41::backup</span></span><br><span class="line">Password: </span><br><span class="line">@ERROR: auth failed on module backup </span><br><span class="line">rsync error: error starting client-server protocol (code 5) at main.c(1649) [sender=3.1.2]</span><br><span class="line">原因：1.用户输入错误 2.密码输入错误 3.密码文件的权限不是600</span><br><span class="line"><span class="comment">##模块名不认识</span></span><br><span class="line">[root@web01 ~]<span class="comment"># rsync -avz /etc/passwd rsync_backup@172.16.1.41::bak </span></span><br><span class="line">@ERROR: Unknown module <span class="string">'bak'</span> rsync error: error starting client-server protocol (code 5) at main.c(1649) [sender=3.1.2] </span><br><span class="line"><span class="comment">##无法和172.16.1.41rsync服务建立连接</span></span><br><span class="line">[root@web01 ~]<span class="comment"># rsync -avz /etc/passwd rsync_backup@172.16.1.41::backup </span></span><br><span class="line">rsync: failed to connect to 172.16.1.41 (172.16.1.41): No route to host (113)</span><br><span class="line">rsync error: error <span class="keyword">in</span> socket IO (code 10) at clientserver.c(125) [sender=3.1.2]</span><br><span class="line">原因：1.防火墙 2.selinux 3.服务没启动 4.服务的端口改了</span><br><span class="line"><span class="comment">##客户端的密码文件权限也必须是600，否则报错</span></span><br><span class="line">[root@web01 ~]<span class="comment"># rsync -avz /etc/shadow rsync_backup@172.16.1.41::backup --password-file=/etc/rsync.pass </span></span><br><span class="line">ERROR: password file must not be other-accessible rsync error: syntax or usage error (code 1) at authenticate.c(196) [sender=3.1.2]</span><br><span class="line"></span><br><span class="line"><span class="comment">#1.安装 </span></span><br><span class="line">[root@web01 ~]<span class="comment"># yum install -y rsync</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#2.客户端创建密码文件（客户端上的密码文件，只需要写密码，不需要写用户） </span></span><br><span class="line">[root@web01 ~]<span class="comment"># vim /etc/rsync.pass</span></span><br><span class="line">123456</span><br><span class="line"></span><br><span class="line"><span class="comment">#3.客户端上的密码文件也必须是600权限 </span></span><br><span class="line">[root@web01 ~]<span class="comment"># chmod 600 /etc/rsync.pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#4.推数据</span></span><br><span class="line">[root@web01 ~]<span class="comment"># rsync -avz /etc/shadow rsync_backup@172.16.1.41::backup --password-file=/etc/rsync.pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#5.使用环境变量免交互输入密码 </span></span><br><span class="line">[root@web01 ~]<span class="comment"># export RSYNC_PASSWORD=123456 </span></span><br><span class="line">[root@web01 ~]<span class="comment"># rsync -avz /etc/shadow rsync_backup@172.16.1.41::backup</span></span><br></pre></td></tr></table></figure>

<h2 id="排错过程"><a href="#排错过程" class="headerlink" title="排错过程"></a>排错过程</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">##服务端 </span></span><br><span class="line"><span class="comment">#1.检查配置文件 </span></span><br><span class="line">[root@backup ~]<span class="comment"># cat /etc/rsyncd.conf </span></span><br><span class="line"><span class="comment">#2.检查密码文件的权限 </span></span><br><span class="line">[root@backup ~]<span class="comment"># ll /etc/rsync.passwd </span></span><br><span class="line">-rw------- 1 root root 20 May 16 17:37 /etc/rsync.passwd </span><br><span class="line"><span class="comment">#3.检查密码文件中的内容 </span></span><br><span class="line">检查用户名是否和配置文件中的用户名一致 </span><br><span class="line"><span class="comment">#4.检查模块目录的权限</span></span><br><span class="line">模块目录的权限，必须是rsync配置文件中指定的uid和gid的权限</span><br><span class="line"></span><br><span class="line"><span class="comment">##客户端</span></span><br><span class="line"><span class="comment">#1.检查命令用户名</span></span><br><span class="line">命令中的用户名要跟服务端配置文件和密码文件中的用户名一致 rsync_backup</span><br><span class="line"><span class="comment">#2.检查命令模块名 </span></span><br><span class="line">命令中的模块名要跟服务端配置文件中的模块名一致 backup</span><br><span class="line"><span class="comment">#3.如果有密码文件，检查权限 </span></span><br><span class="line">600 root root</span><br><span class="line"><span class="comment">#4.检查密码文件内容 </span></span><br><span class="line">只需要写密码</span><br><span class="line"><span class="comment">#5.检查环境变量中的密码 </span></span><br><span class="line">[root@web01 ~]<span class="comment"># echo $RSYNC_PASSWORD </span></span><br><span class="line">123456</span><br><span class="line">密码是否和服务端密码文件保持一致</span><br></pre></td></tr></table></figure>

<h1 id="rsync企业实战"><a href="#rsync企业实战" class="headerlink" title="rsync企业实战"></a>rsync企业实战</h1><h2 id="环境准备-1"><a href="#环境准备-1" class="headerlink" title="环境准备"></a>环境准备</h2><table>
<thead>
<tr>
<th align="center">主机名</th>
<th align="center">WanIP</th>
<th align="center">LanIP</th>
<th align="center">角色</th>
</tr>
</thead>
<tbody><tr>
<td align="center">backup</td>
<td align="center">10.0.0.41</td>
<td align="center">172.16.1.41</td>
<td align="center">rsync服务端</td>
</tr>
<tr>
<td align="center">web01</td>
<td align="center">10.0.0.7</td>
<td align="center">172.16.1.7</td>
<td align="center">rsync客户端</td>
</tr>
<tr>
<td align="center">nfs</td>
<td align="center">10.0.0.31</td>
<td align="center">172.16.1.31</td>
<td align="center">rsync客户端</td>
</tr>
</tbody></table>
<h2 id="先决条件"><a href="#先决条件" class="headerlink" title="先决条件"></a>先决条件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1.安装时间同步</span></span><br><span class="line">yum install -y ntpdate</span><br><span class="line"></span><br><span class="line"><span class="comment">#2.时间同步</span></span><br><span class="line">crontab -e </span><br><span class="line">*/5 * * * * /usr/sbin/ntpdate time1.aliyun.com &gt;/dev/null </span><br><span class="line"></span><br><span class="line"><span class="comment">#3.关闭防火墙 </span></span><br><span class="line">systemctl stop firewalld </span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld </span><br><span class="line"></span><br><span class="line"><span class="comment">#4.关闭selinux </span></span><br><span class="line">setenforce 0 sed -i <span class="string">'s#selinux=enforcing#selinux=disabled#g'</span> /etc/sysconfig/selinux</span><br></pre></td></tr></table></figure>

<h2 id="客户端需求"><a href="#客户端需求" class="headerlink" title="客户端需求"></a>客户端需求</h2><p>1.客户端提前准备存放的备份的目录，目录规则如下: <code>/client_backup</code></p>
<p>2.客户端在本地打包备份(系统配置文件、应用配置等)拷贝至 /client_backup 包名：<code>nfs_172.16.1.31_2022-05- 16.tar.gz</code></p>
<p>3.客户端最后将备份的数据进行推送至备份服务器</p>
<p>4.客户端每天凌晨1点定时执行该脚本</p>
<p>5.客户端服务器本地保留最近7天的数据, 避免浪费磁盘空间</p>
<h2 id="服务端需求"><a href="#服务端需求" class="headerlink" title="服务端需求"></a>服务端需求</h2><p>1.服务端部署<code>rsync</code>，用于接收客户端推送过来的备份数据</p>
<p>2.服务端需要每天校验客户端推送过来的数据是否完整</p>
<p>3.服务端需要每天校验的结果通知给管理员</p>
<p>4.服务端仅保留6个月的备份数据,其余的全部删除</p>
<h2 id="如何校验一个数据的完整性"><a href="#如何校验一个数据的完整性" class="headerlink" title="如何校验一个数据的完整性"></a>如何校验一个数据的完整性</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1.备份打包后，给压缩包做一个MD5加密 </span><br><span class="line">/client_backup/nfs_172.16.1.31_2022-05-16.tar.gz </span><br><span class="line">md5sum nfs_172.16.1.31_2022-05-16.tar.gz &gt; jiaoyan.txt</span><br><span class="line"></span><br><span class="line">2.将校验文件，和压缩包一并传递到服务端 </span><br><span class="line"></span><br><span class="line">3.在服务端使用md5sum -c检查校验 </span><br><span class="line"><span class="comment">#完整传输 </span></span><br><span class="line">[root@backup tmp]<span class="comment"># md5sum -c jiaoyan.txt</span></span><br><span class="line">1.txt: OK</span><br><span class="line"></span><br><span class="line"><span class="comment">#被篡改或不完整 </span></span><br><span class="line">[root@backup tmp]<span class="comment"># md5sum -c jiaoyan.txt </span></span><br><span class="line">1.txt: FAILED </span><br><span class="line">md5sum: WARNING: 1 computed checksum did NOT match</span><br></pre></td></tr></table></figure>

<h2 id="脚本实现客户端需求"><a href="#脚本实现客户端需求" class="headerlink" title="脚本实现客户端需求"></a>脚本实现客户端需求</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1.客户端提前准备存放的备份的目录，目录规则如下:/client_backup</span><br><span class="line">mkdir /client_backup</span><br><span class="line"></span><br><span class="line">2.客户端在本地打包备份(/etc/passwd)拷贝至/client_backup，包名：nfs_172.16.1.31_2022-05- 16.tar.gz</span><br><span class="line"><span class="built_in">cd</span> /etc &amp;&amp; tar zcf /client_backup/nfs_172.16.1.31_2022-05-16.tar.gz passwd</span><br><span class="line"></span><br><span class="line">3.客户端最后将备份的数据进行推送至备份服务器 </span><br><span class="line">rsync -az /client_backup/ rsync_backup@172.16.1.41::backup</span><br><span class="line"></span><br><span class="line">4.客户端服务器本地保留最近7天的数据, 避免浪费磁盘空间 </span><br><span class="line">find /client_backup -<span class="built_in">type</span> f ! -mtime -7|xargs rm -f</span><br><span class="line"></span><br><span class="line">5.客户端每天凌晨1点定时执行该脚本 </span><br><span class="line">crontab -e </span><br><span class="line">00 01 * * * /bin/sh /root/bakup.sh &gt;/dev/null</span><br><span class="line"></span><br><span class="line"><span class="comment">#编写脚本 </span></span><br><span class="line">[root@web01 ~]<span class="comment"># vim /root/backup.sh </span></span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">bak_dir=<span class="string">"/client_backup"</span> </span><br><span class="line">host_name=`hostname` </span><br><span class="line">ip=`/usr/sbin/ifconfig eth1|awk <span class="string">'NR==2&#123;print $2&#125;'</span>` </span><br><span class="line">date_time=`date +%F` </span><br><span class="line"><span class="built_in">export</span> RSYNC_PASSWORD=123456</span><br><span class="line"></span><br><span class="line"><span class="comment">#1.创建客户端的备份目录 </span></span><br><span class="line">mkdir -p <span class="variable">$bak_dir</span></span><br><span class="line"><span class="comment">#2.进入备份目录，压缩备份文件 </span></span><br><span class="line"><span class="built_in">cd</span> /etc &amp;&amp; \</span><br><span class="line">tar zcf <span class="variable">$bak_dir</span>/<span class="variable">$&#123;host_name&#125;</span>_<span class="variable">$&#123;ip&#125;</span>_<span class="variable">$&#123;date_time&#125;</span>.tar.gz passwd</span><br><span class="line"><span class="comment">#3.生成校验文件</span></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$bak_dir</span> &amp;&amp; \</span><br><span class="line">md5sum <span class="variable">$&#123;host_name&#125;</span>_<span class="variable">$&#123;ip&#125;</span>_<span class="variable">$&#123;date_time&#125;</span>.tar.gz &gt; <span class="variable">$&#123;host_name&#125;</span>_<span class="variable">$&#123;ip&#125;</span>_<span class="variable">$&#123;date_time&#125;</span>.md5</span><br><span class="line"><span class="comment">#4.推送数据到rsync服务端 </span></span><br><span class="line">rsync -avz <span class="variable">$bak_dir</span>/ rsync_backup@172.16.1.41::backup </span><br><span class="line"><span class="comment">#5.保留7天内的文件 </span></span><br><span class="line">find <span class="variable">$bak_dir</span> -<span class="built_in">type</span> f ! -mtime -7|xargs rm -f</span><br></pre></td></tr></table></figure>

<h2 id="脚本实现服务端需求"><a href="#脚本实现服务端需求" class="headerlink" title="脚本实现服务端需求"></a>脚本实现服务端需求</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">##rsync部署</span></span><br><span class="line"><span class="comment">#1.服务端部署rsync，用于接收客户端推送过来的备份数据 </span></span><br><span class="line">[root@backup ~]<span class="comment"># vim /etc/rsyncd.conf </span></span><br><span class="line">uid = rsync </span><br><span class="line">gid = rsync </span><br><span class="line">port = 873 </span><br><span class="line">fake super = yes </span><br><span class="line">use chroot = no </span><br><span class="line">max connections = 200 </span><br><span class="line">timeout = 600 </span><br><span class="line">ignore errors </span><br><span class="line"><span class="built_in">read</span> only = <span class="literal">false</span> </span><br><span class="line">list = <span class="literal">false</span> </span><br><span class="line">auth users = rsync_backup</span><br><span class="line">secrets file = /etc/rsync.passwd <span class="built_in">log</span></span><br><span class="line">file = /var/<span class="built_in">log</span>/rsyncd.log</span><br><span class="line"><span class="comment">##################################### </span></span><br><span class="line">[backup] </span><br><span class="line">comment = welcome to oldboyedu backup! </span><br><span class="line">path = /backup</span><br><span class="line"></span><br><span class="line"><span class="comment">#2.服务端需要每天校验客户端推送过来的数据是否完整 </span></span><br><span class="line"><span class="built_in">cd</span> /backup/ &amp;&amp; md5sum -c *2022-05-16.md5 </span><br><span class="line"></span><br><span class="line"><span class="comment">#3.服务端需要每天校验的结果通知给管理员 </span></span><br><span class="line">md5sum -c *2022-05-16.md5 |mail -s <span class="string">'xxx'</span> 123@qq.com </span><br><span class="line"></span><br><span class="line"><span class="comment">#4.服务端仅保留180天的备份数据,其余的全部删除 </span></span><br><span class="line">find /backup -<span class="built_in">type</span> f ! -mtime -180|xargs rm -f</span><br><span class="line"></span><br><span class="line"><span class="comment">##配置发邮件</span></span><br><span class="line"><span class="comment">#1.安装发邮件服务 </span></span><br><span class="line">[root@backup ~]<span class="comment"># yum install -y mailx</span></span><br><span class="line"><span class="comment">#2.修改配置文件 </span></span><br><span class="line">[root@backup ~]<span class="comment"># vim /etc/mail.rc </span></span><br><span class="line"><span class="built_in">set</span> from=253097001@qq.com </span><br><span class="line"><span class="built_in">set</span> smtp=smtps://smtp.qq.com:465 </span><br><span class="line"><span class="built_in">set</span> smtp-auth-user=管理员邮箱</span><br><span class="line"><span class="built_in">set</span> smtp-auth-password=授权码 </span><br><span class="line"><span class="built_in">set</span> smtp-auth=login </span><br><span class="line"><span class="built_in">set</span> ssl-verify=ignore </span><br><span class="line"><span class="built_in">set</span> nss-config-dir=/etc/pki/nssdb/</span><br><span class="line"><span class="comment">#3.编写脚本 </span></span><br><span class="line">[root@backup ~]<span class="comment"># vim check_md5.sh</span></span><br><span class="line"><span class="meta">#!/bin/bash </span></span><br><span class="line">bak_dir=<span class="string">"/backup"</span> </span><br><span class="line">host_name=`hostname` </span><br><span class="line">ip=`/usr/sbin/ifconfig eth1|awk <span class="string">'NR==2&#123;print $2&#125;'</span>` </span><br><span class="line">date_time=`date +%F`</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$&#123;bak_dir&#125;</span> &amp;&amp; \</span><br><span class="line">md5sum -c *<span class="variable">$&#123;date_time&#125;</span>.md5|mail -s <span class="string">"<span class="variable">$&#123;date_time&#125;</span>_数据备份校验"</span> 管理员邮箱 &gt;/dev/null </span><br><span class="line">find /backup -<span class="built_in">type</span> f ! -mtime -180|xargs rm -f</span><br></pre></td></tr></table></figure>

<h2 id="测试crontab"><a href="#测试crontab" class="headerlink" title="测试crontab"></a>测试crontab</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#客户端定时任务 </span></span><br><span class="line">crontab -e </span><br><span class="line"><span class="comment">#Usage:backup BY roger Date:2022-5-16</span></span><br><span class="line">00 01 * * * /bin/sh /root/backup.sh &amp;&gt;/dev/null </span><br><span class="line"></span><br><span class="line"><span class="comment">#服务端定时任务 </span></span><br><span class="line">crontab -e </span><br><span class="line"><span class="comment">#Usage:md5 BY roger Date:2022-5-16</span></span><br><span class="line">01 01 * * * /bin/sh /root/check_md5.sh &amp;&gt;/dev/null</span><br></pre></td></tr></table></figure>

<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_devops/image-20220517011007669.png" alt="image-20220517011007669"></p>
<h1 id="rsync结合inotify实时同步"><a href="#rsync结合inotify实时同步" class="headerlink" title="rsync结合inotify实时同步"></a>rsync结合inotify实时同步</h1><p>如果只是做备份，不需要实时备份</p>
<p>定时任务最小单位是分钟级别</p>
<p>数据需要实时同步该如何解决？</p>
<h2 id="inotify概述"><a href="#inotify概述" class="headerlink" title="inotify概述"></a>inotify概述</h2><p>inotify其实是一个监控命令，监控一个文件或目录的状态</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1.安装inotify（客户端） </span></span><br><span class="line">[root@web01 ~]<span class="comment"># yum install -y inotify-tools </span></span><br><span class="line">[root@nfs ~]<span class="comment"># yum install -y inotify-tools</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#2.选项</span></span><br><span class="line">-m 持续监控 </span><br><span class="line">-r 递归 </span><br><span class="line">-q 静默，仅打印时间信息 </span><br><span class="line">--timefmt 指定输出时间格式 </span><br><span class="line">--format 指定事件输出格式</span><br><span class="line">-%Xe 事件 </span><br><span class="line">-%w 目录 </span><br><span class="line">-%f 文件 </span><br><span class="line">-e 指定监控的事件 </span><br><span class="line">access 访问</span><br><span class="line">modify 内容修改 </span><br><span class="line">attrib 属性修改 </span><br><span class="line">close_write 修改真实文件内容 </span><br><span class="line">open 打开 </span><br><span class="line">create 创建 </span><br><span class="line">delete 删除 </span><br><span class="line">umount 卸载</span><br><span class="line"></span><br><span class="line"><span class="comment">#3.监控测试 </span></span><br><span class="line">/usr/bin/inotifywait -mrq --format <span class="string">'%Xe %w %f'</span> -e create,modify,delete,attrib,close_write /client_backup</span><br><span class="line"></span><br><span class="line"><span class="comment">#4.编写脚本 </span></span><br><span class="line"><span class="meta">#!/bin/bash </span></span><br><span class="line">dir=/client_backup/ </span><br><span class="line"><span class="built_in">export</span> RSYNC_PASSWORD=123456</span><br><span class="line">inotifywait -mrq --format <span class="string">'%w %f'</span> -e create,delete,attrib,close_write <span class="variable">$dir</span>|<span class="keyword">while</span> <span class="built_in">read</span> line;<span class="keyword">do</span></span><br><span class="line">	rsync -az --delete <span class="variable">$dir</span> rsync_backup@172.16.1.41::backup </span><br><span class="line"><span class="keyword">done</span> &amp;</span><br></pre></td></tr></table></figure>

<h1 id="rsync总结"><a href="#rsync总结" class="headerlink" title="rsync总结"></a>rsync总结</h1><p><strong>rsync作用：</strong>数据备份，数据同步</p>
<p><strong>备份类型：</strong></p>
<ul>
<li><p>全量备份</p>
<ul>
<li>将数据全部做一次备份</li>
</ul>
</li>
<li><p>增量备份</p>
<ul>
<li>基于上一次备份的数据，新增的部分</li>
</ul>
</li>
<li><p>差异备份（数据库 物理备份 Xtrabackup）</p>
<ul>
<li>基于上一次全备的数据，新增的部分</li>
</ul>
</li>
</ul>
<p><strong>rsync三种工作模式：</strong></p>
<ul>
<li><p>本地模式（local）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#类似于cp命令：可以拷贝本地的文件目录等... </span></span><br><span class="line">语法： </span><br><span class="line">rsync [选项] 源文件 目标路径 </span><br><span class="line">rsync /root/1.txt /tmp </span><br><span class="line"></span><br><span class="line">当需要拷贝比较大的目录，或者文件比较多的目录，建议使用rsync</span><br></pre></td></tr></table></figure>
</li>
<li><p>远程模式（remote） </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#类似于scp命令：基于ssh协议，会受到ssh协议的限制 </span></span><br><span class="line">语法： </span><br><span class="line">推： rsync [选项] 源文件 系统用户@IP地址:/目标路径 </span><br><span class="line">rsync -avz /root/1.txt root@172.16.1.41:/tmp </span><br><span class="line"></span><br><span class="line">拉： rsync [选项] 系统用户@IP地址:/远端文件 本地路径 </span><br><span class="line">rsync -avz root@172.16.1.41:/etc/passwd .</span><br></pre></td></tr></table></figure>
</li>
<li><p>守护进程模式（daemon） </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#将rsync当成是一个服务启动起来</span></span><br><span class="line">优势:</span><br><span class="line">1.不受到ssh协议影响 </span><br><span class="line">2.不需要知道系统用户的密码</span><br><span class="line"></span><br><span class="line"><span class="comment">#1.安装 </span></span><br><span class="line"><span class="comment">#2.修改配置文件 </span></span><br><span class="line">[root@backup ~]<span class="comment"># cat /etc/rsyncd.conf</span></span><br><span class="line"> <span class="comment">#服务的用户 uid = rsync # 服务的用户组 </span></span><br><span class="line"> gid = rsync  </span><br><span class="line"> <span class="comment">#该服务监听的端口 客户端 --port=xxx </span></span><br><span class="line"> port = 873  </span><br><span class="line"> <span class="comment">#不以root身份运行，传输数据不使用系统用户 </span></span><br><span class="line"> fake super = yes </span><br><span class="line"> <span class="comment">#禁锢目录，不允许获取到root权限 </span></span><br><span class="line"> use chroot = no  </span><br><span class="line"> <span class="comment">#最大连接数，最多能有多少个客户端跟服务端的873端口建立连接 </span></span><br><span class="line"> max connections = 200  </span><br><span class="line"> <span class="comment">#超时时间 </span></span><br><span class="line"> timeout = 600  </span><br><span class="line"> <span class="comment">#忽略错误 </span></span><br><span class="line"> ignore errors </span><br><span class="line"> <span class="comment">#只读 = false，不只读，可读可写 </span></span><br><span class="line"> <span class="built_in">read</span> only = <span class="literal">false</span>  </span><br><span class="line"> <span class="comment">#不允许查看模块信息 </span></span><br><span class="line"> list = <span class="literal">false</span>  </span><br><span class="line"> <span class="comment">#匿名用户 </span></span><br><span class="line"> auth users = rsync_backup </span><br><span class="line"> <span class="comment">#匿名用户的密码文件（权限600，属主和属组都是root） </span></span><br><span class="line"> secrets file = /etc/rsync.passwd </span><br><span class="line"> <span class="comment">#日志文件 </span></span><br><span class="line"> <span class="built_in">log</span> file = /var/<span class="built_in">log</span>/rsyncd.log </span><br><span class="line"> <span class="comment">##################################### </span></span><br><span class="line"> <span class="comment">#模块名 </span></span><br><span class="line"> [backup] </span><br><span class="line"> <span class="comment">#模块的描述信息 </span></span><br><span class="line"> comment = This directory <span class="keyword">for</span> backup Nginx ! </span><br><span class="line"> <span class="comment">#备份的目录 </span></span><br><span class="line"> path = /backup</span><br><span class="line"> </span><br><span class="line"><span class="comment">###多模块配置 </span></span><br><span class="line"><span class="comment">##################################### </span></span><br><span class="line">[backup] </span><br><span class="line">comment = This directory <span class="keyword">for</span> backup Nginx ! </span><br><span class="line">path = /backup [zls] comment = xxx</span><br><span class="line"></span><br><span class="line">[zls] </span><br><span class="line">comment = xxx </span><br><span class="line">path = /bak</span><br><span class="line"></span><br><span class="line"><span class="comment">#3.启动服务 </span></span><br><span class="line"><span class="comment">##客户端，密码的三种方式 </span></span><br><span class="line">1.密码文件（权限600，内容只有密码，不能写用户，属主和属组必须是root）</span><br><span class="line">2.手动输入密码 </span><br><span class="line">3.export RSYNC_PASSWORD=123456（推荐）</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p><strong>数据校验：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">md5加密算法 </span><br><span class="line">md5sum 文件名  <span class="comment">#给指定的文件生成一个加密字符串 </span></span><br><span class="line">校验文件：-c </span><br><span class="line">md5sum -c 校验文件</span><br></pre></td></tr></table></figure>

<p><strong>实时同步：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">作用：为了保证数据的一致性 </span><br><span class="line">inotify：了解 </span><br><span class="line">sersync：实时同步，底层inotify</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>SRE</category>
      </categories>
      <tags>
        <tag>Linux架构</tag>
      </tags>
  </entry>
  <entry>
    <title>[ssh远程连接]</title>
    <url>/2019/04/24/ssh%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5/</url>
    <content><![CDATA[<h1 id="ssh远程管理"><a href="#ssh远程管理" class="headerlink" title="ssh远程管理"></a>ssh远程管理</h1><h2 id="远程连接"><a href="#远程连接" class="headerlink" title="远程连接"></a>远程连接</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Linux：</span><br><span class="line">	- ssh 端口：22 加密传输数据 </span><br><span class="line">	- telnet 端口：23 明文传输数据 </span><br><span class="line">Windows： </span><br><span class="line">	- rdp 端口：3389 remote desktop protocol</span><br></pre></td></tr></table></figure>

<h2 id="ssh相关命令及选项"><a href="#ssh相关命令及选项" class="headerlink" title="ssh相关命令及选项"></a>ssh相关命令及选项</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">注意：不加用户@，默认使用当前登录的用户</span><br><span class="line"></span><br><span class="line">ssh：远程连接Linux服务器 </span><br><span class="line">-p：port指定端口 </span><br><span class="line"></span><br><span class="line"><span class="comment">#不连接上服务器，直接执行命令 </span></span><br><span class="line">ssh root@10.0.0.41 <span class="string">'ls /'</span></span><br><span class="line"></span><br><span class="line">scp：远程拷贝数据（写在前面的是源文件） </span><br><span class="line">-r：递归（远程拷贝目录） </span><br><span class="line">-p：拷贝的时候保持属性</span><br><span class="line">-P：大写p指定port</span><br><span class="line"></span><br><span class="line">推：scp sersync2.5.4 root@172.16.1.7:/root </span><br><span class="line">拉：scp root@172.16.1.7:/root/sersync2.5.4 /opt</span><br><span class="line"></span><br><span class="line"><span class="comment">#总结： </span></span><br><span class="line">1.scp通过ssh协议加密方式进行文件或目录拷贝</span><br><span class="line">2.scp连接时的用户作为为拷贝文件或目录的权限。（-p保持文件属性，-a） </span><br><span class="line">3.scp支持数据推送和拉取，每次都是全量拷贝，效率较低</span><br></pre></td></tr></table></figure>

<h2 id="ssh免密连接"><a href="#ssh免密连接" class="headerlink" title="ssh免密连接"></a>ssh免密连接</h2><p><strong>验证方式：</strong></p>
<ul>
<li><p>用户名密码验证</p>
</li>
<li><p>密钥对验证方式</p>
</li>
</ul>
<p><strong>ssh密钥对认证流程</strong></p>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_devops/image-20220524001806812.png" alt="image-20220524001806812"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#ssh-keygen：生成密钥对 </span></span><br><span class="line">[root@m01 ~]<span class="comment"># ssh-keygen</span></span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line"><span class="comment">#将秘钥保存到文件中，可以指定其他路径（直接回车） </span></span><br><span class="line">Enter file <span class="keyword">in</span> <span class="built_in">which</span> to save the key (/root/.ssh/id_rsa):</span><br><span class="line">Created directory <span class="string">'/root/.ssh'</span>.</span><br><span class="line"><span class="comment">#给密钥对设置密码，不需要设置（直接回车） </span></span><br><span class="line">Enter passphrase (empty <span class="keyword">for</span> no passphrase):</span><br><span class="line"><span class="comment">#重复输入设置的密码（直接回车） </span></span><br><span class="line">Enter same passphrase again:</span><br><span class="line">Your identification has been saved <span class="keyword">in</span> /root/.ssh/id_rsa.</span><br><span class="line">Your public key has been saved <span class="keyword">in</span> /root/.ssh/id_rsa.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line">SHA256:porTOTgmfhwGF1eJeesKte03G0ZbLlPh6C3kJX0qRDw root@manage01</span><br><span class="line">The key<span class="string">'s randomart image is:</span></span><br><span class="line"><span class="string">+---[RSA 2048]----+</span></span><br><span class="line"><span class="string">|      +..        |</span></span><br><span class="line"><span class="string">|   . + o.        |</span></span><br><span class="line"><span class="string">|    o . .E .     |</span></span><br><span class="line"><span class="string">| . . . .. = .    |</span></span><br><span class="line"><span class="string">|  o . + S* * .   |</span></span><br><span class="line"><span class="string">|   + . =* O o    |</span></span><br><span class="line"><span class="string">|  ooo.+  @ +     |</span></span><br><span class="line"><span class="string">|. =++o ..o*      |</span></span><br><span class="line"><span class="string">|.+oo..  ..o      |</span></span><br><span class="line"><span class="string">+----[SHA256]-----+</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#生成后的密钥对 </span></span><br><span class="line"><span class="string">[root@m01 ~]# ll /root/.ssh/</span></span><br><span class="line"><span class="string">total 8</span></span><br><span class="line"><span class="string">-rw------- 1 root root 1679 May 24 08:21 id_rsa</span></span><br><span class="line"><span class="string">-rw-r--r-- 1 root root  395 May 24 08:21 id_rsa.pub</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#ssh-copy-id：发送公钥 </span></span><br><span class="line"><span class="string">-i：指定公钥位置 </span></span><br><span class="line"><span class="string">[root@m01 ~]# ssh-copy-id -i ~/.ssh/id_rsa.pub root@172.16.1.7 </span></span><br><span class="line"><span class="string">[root@m01 ~]# ssh-copy-id -i ~/.ssh/id_rsa.pub root@172.16.1.8 </span></span><br><span class="line"><span class="string">[root@m01 ~]# ssh-copy-id -i ~/.ssh/id_rsa.pub root@172.16.1.31 </span></span><br><span class="line"><span class="string">[root@m01 ~]# ssh-copy-id -i ~/.ssh/id_rsa.pub root@172.16.1.41</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#.ssh目录中的know_host作用 </span></span><br><span class="line"><span class="string">[root@m01 ~]# cat ~/.ssh/known_hosts </span></span><br><span class="line"><span class="string">记录连接过的服务器，如果没有连接过（第一次连接），需要输入yes</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#生成密钥对命令：ssh-keygen </span></span><br><span class="line"><span class="string">mkdir -m 700 ~/.ssh </span></span><br><span class="line"><span class="string">1.在当前用户的家目录下创建了一个隐藏目录 .ssh mkdir ~/.ssh </span></span><br><span class="line"><span class="string">2.将密钥对存放目录 .ssh 授权为 700 chmod 700 ~/.ssh </span></span><br><span class="line"><span class="string">3.将公钥内容写入 ~/.ssh/id_rsa.pub 文件中 </span></span><br><span class="line"><span class="string">4.将私钥内容写入 ~/.ssh/id_rsa 文件中 </span></span><br><span class="line"><span class="string">5.将私钥文件授权为 600 chmod 600 ~/.ssh/id_rsa</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#发送公钥：ssh-copy-id</span></span><br><span class="line"><span class="string">[root@web01 ~]# ssh-copy-id -i ~/.ssh/id_rsa.pub root@172.16.1.5 </span></span><br><span class="line"><span class="string">输入yes </span></span><br><span class="line"><span class="string">输入密码：1</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">1.在远端的指定用户的家目录下创建了一个隐藏目录.ssh ssh root@172.16.1.5 '</span>mkdir ~/.ssh<span class="string">' </span></span><br><span class="line"><span class="string">2.将密钥对存放目录 .ssh 授权为 700 ssh root@172.16.1.5 '</span>chmod 700 ~/.ssh<span class="string">' </span></span><br><span class="line"><span class="string">3.先在远端~/.ssh目录下创建文件authorized_keys ssh root@172.16.1.5 '</span>touch ~/.ssh/authorized_keys<span class="string">' </span></span><br><span class="line"><span class="string">4.将authorized_keys文件授权为600 ssh root@172.16.1.5 '</span>chmod 600 ~/.ssh/authorized_keys<span class="string">' </span></span><br><span class="line"><span class="string">5.将公钥内容，保存到authorized_keys文件中</span></span><br></pre></td></tr></table></figure>

<h2 id="免密使用场景"><a href="#免密使用场景" class="headerlink" title="免密使用场景"></a>免密使用场景</h2><ul>
<li><strong>批量查看服务器信息</strong></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash </span></span><br><span class="line">[ <span class="variable">$#</span> -ne 1 ] &amp;&amp; <span class="built_in">echo</span> <span class="string">"请输入执行的命令"</span> &amp;&amp; <span class="built_in">exit</span> 1 </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> 5 7 8 31 41 </span><br><span class="line"><span class="keyword">do</span> </span><br><span class="line">	<span class="built_in">echo</span> <span class="string">"#########172.16.1.<span class="variable">$i</span>#####"</span> </span><br><span class="line">	ssh root@172.16.1.<span class="variable">$i</span> <span class="string">"<span class="variable">$1</span>"</span> </span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>跳板机</strong></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@m01 ~]<span class="comment"># cat jump.sh</span></span><br><span class="line"><span class="meta">#!/bin/bash </span></span><br><span class="line"><span class="comment">#jumpserver </span></span><br><span class="line">lb01=172.16.1.5 </span><br><span class="line">lb02=172.16.1.6 </span><br><span class="line">web01=172.16.1.7 </span><br><span class="line">web02=172.16.1.8 </span><br><span class="line">web03=172.16.1.9 </span><br><span class="line">nfs=172.16.1.31 </span><br><span class="line">backup=172.16.1.41 </span><br><span class="line">db01=172.16.1.51 </span><br><span class="line">m01=172.16.1.61 </span><br><span class="line">zabbix=172.16.1.71</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">menu</span></span>()&#123; </span><br><span class="line">	cat &lt;&lt;-EOF </span><br><span class="line">	+-------------------------+</span><br><span class="line">	1) lb01</span><br><span class="line">	2) lb02</span><br><span class="line">	3) web01</span><br><span class="line">	4) web02</span><br><span class="line">	5) web03</span><br><span class="line">	6) nfs</span><br><span class="line">	7) backup</span><br><span class="line">	8) db01</span><br><span class="line">	9) m01</span><br><span class="line">	10) zabbix</span><br><span class="line">	h) <span class="built_in">help</span></span><br><span class="line">	+-------------------------+</span><br><span class="line">	EOF </span><br><span class="line">&#125;</span><br><span class="line">	</span><br><span class="line"><span class="comment">#菜单函数 </span></span><br><span class="line">menu </span><br><span class="line"><span class="comment">#连接函数 </span></span><br><span class="line"><span class="function"><span class="title">connect</span></span>()&#123; </span><br><span class="line">	ping -c 1 -w 1 <span class="variable">$1</span> &amp;&gt;/dev/null </span><br><span class="line">	<span class="keyword">if</span> [ $? -eq 0 ];<span class="keyword">then</span> </span><br><span class="line">		ssh root@<span class="variable">$1</span> </span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		<span class="built_in">echo</span> -e <span class="string">"\033[5;4;40;31m 别连了,我的哥,<span class="variable">$2</span>:<span class="variable">$1</span>机器都没开!!!\033[0m"</span> </span><br><span class="line">	<span class="keyword">fi</span> </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#控制不让输入ctrl+c,z </span></span><br><span class="line"><span class="built_in">trap</span> <span class="string">""</span> HUP INT TSTP </span><br><span class="line"><span class="keyword">while</span> <span class="literal">true</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">	<span class="built_in">read</span> -p <span class="string">"请输入要连接的主机编号："</span> num </span><br><span class="line">	<span class="keyword">case</span> <span class="variable">$num</span> <span class="keyword">in</span></span><br><span class="line">		1|lb01) </span><br><span class="line">			connect <span class="variable">$lb01</span> lb01 </span><br><span class="line">			;; </span><br><span class="line">		2|lb02) </span><br><span class="line">			connect <span class="variable">$lb02</span> lb02 </span><br><span class="line">			;; </span><br><span class="line">		3|web01) </span><br><span class="line">			connect <span class="variable">$web01</span> web01 </span><br><span class="line">			;; </span><br><span class="line">		4|web02) </span><br><span class="line">			connect <span class="variable">$web02</span> web02 </span><br><span class="line">			;; </span><br><span class="line">		5|web03)</span><br><span class="line">			connect <span class="variable">$web03</span> web03 </span><br><span class="line">			;; </span><br><span class="line">		6|nfs) </span><br><span class="line">			connect <span class="variable">$nfs</span> nfs </span><br><span class="line">			;; </span><br><span class="line">		7|backup) </span><br><span class="line">			connect <span class="variable">$backup</span> backup </span><br><span class="line">			;; </span><br><span class="line">		8|db01)</span><br><span class="line">			connect <span class="variable">$db01</span> db01 </span><br><span class="line">			;; </span><br><span class="line">		9|m01) </span><br><span class="line">			connect <span class="variable">$m01</span> m01 </span><br><span class="line">			;; </span><br><span class="line">		10|zabbix)</span><br><span class="line">			connect <span class="variable">$zabbix</span> zabbix </span><br><span class="line">			;; </span><br><span class="line">		h|<span class="built_in">help</span>) </span><br><span class="line">			clear</span><br><span class="line">			menu </span><br><span class="line">			;;</span><br><span class="line">		close) </span><br><span class="line">			<span class="built_in">break</span> </span><br><span class="line">			;;</span><br><span class="line">	<span class="keyword">esac</span> </span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>

<h2 id="SSH安全优化"><a href="#SSH安全优化" class="headerlink" title="SSH安全优化"></a>SSH安全优化</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#ssh配置文件 </span></span><br><span class="line">[root@m01 ~]<span class="comment"># vim /etc/ssh/sshd_config </span></span><br><span class="line">17 Port 52022  <span class="comment">#修改默认端口 </span></span><br><span class="line">115 UseDNS no  <span class="comment">#关闭反向解析 </span></span><br><span class="line">38 PermitRootLogin no  <span class="comment">#禁止root用户登录 </span></span><br><span class="line">65 PasswordAuthentication no  <span class="comment">#禁止使用密码登录 </span></span><br><span class="line">79 GSSAPIAuthentication no  <span class="comment">#关闭GSSAPI认证</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#将以下内容，直接复制到文件最后一行</span></span><br><span class="line">Port 6666  <span class="comment">#变更SSH服务远程连接端口</span></span><br><span class="line">PermitRootLogin no  <span class="comment">#禁止root用户直接远程登录</span></span><br><span class="line">PasswordAuthentication no  <span class="comment">#禁止使用密码直接远程登录</span></span><br><span class="line">UseDNS no  <span class="comment">#禁止ssh进行dns反向解析，影响ssh连接效率参数</span></span><br><span class="line">GSSAPIAuthentication no  <span class="comment"># 禁止GSS认证，减少连接时产生的延迟</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#重启服务 </span></span><br><span class="line">[root@m01 ~]<span class="comment"># systemctl restart sshd</span></span><br><span class="line"></span><br><span class="line">	1）在windows上生成密钥对 </span><br><span class="line">		- 使用windows的命令行执行 ssh-keygen </span><br><span class="line">		- 使用Xshell</span><br></pre></td></tr></table></figure>

<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>如果已经优化完ssh，发现服务器上出现以下问题：</p>
<ul>
<li><p>没有普通用户 useradd roger（无法创建，进入单用户模式）</p>
</li>
<li><p>windows上秘钥没有推送 </p>
<ul>
<li><p>1）在windows上生成密钥对</p>
<ul>
<li>使用windows的命令行执行 ssh-keygen </li>
<li>使用Xshell</li>
</ul>
<p>2）使用Xshell生成密钥对</p>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_devops/image-20220524223210599.png" alt="image-20220524223210599"></p>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_devops/image-20220524223252594.png" alt="image-20220524223252594"></p>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_devops/image-20220524223321469.png" alt="image-20220524223321469"></p>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_devops/image-20220524223345276.png" alt="image-20220524223345276"></p>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_devops/image-20220524223415813.png" alt="image-20220524223415813"></p>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_devops/image-20220524223450300.png" alt="image-20220524223450300"></p>
</li>
</ul>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[roger@m01 ~]$ mkdir .ssh </span><br><span class="line">[roger@m01 ~]$ chmod 700 .ssh/ </span><br><span class="line">[roger@m01 ~]$ vim .ssh/authorized_keys</span><br><span class="line">ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAuJWo9sSLut7rrATebtwxBZXAoXINN8bXot9VIwXakKZ+711pFWlE2gI52Qkke5xCBMMah72DK00GjkXYEhMm/DxoXloO5ORPkszl5q9BcSjI3k0Ru9BGkwRqtGjzvrHsrSvunJJtglMpe8sEs7KYrzOmHCNxk60h6yxQzS88l76rMMqYDOeChjyyQloGqC4xSqHQFlEF1NgdIlg2o/q69mieH8S9igOeAXbZFGH8219zNTV+WJ/U7nRQGSXtVss8f2pfK0wGLQgz+nR0u3BJUpRevpcqcF+ybxm5QZb/X8NZEW5ca2YsLInxoRCBE88tzXH5K/obwX98kJ6vqlqZJw== rsa 2048-052422</span><br><span class="line">[roger@m01 ~]$ chmod 600 .ssh/authorized_keys</span><br></pre></td></tr></table></figure>

<h2 id="免交互生成密钥对"><a href="#免交互生成密钥对" class="headerlink" title="免交互生成密钥对"></a>免交互生成密钥对</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -P <span class="string">''</span> -f ~/.ssh/id_rsa &amp;&gt;/dev/null </span><br><span class="line">-t：指定加密类型 </span><br><span class="line">-P：空密码 </span><br><span class="line">-f：秘钥生成的位置</span><br></pre></td></tr></table></figure>

<h2 id="免交互推送公钥"><a href="#免交互推送公钥" class="headerlink" title="免交互推送公钥"></a>免交互推送公钥</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#不循环的写法</span></span><br><span class="line"><span class="meta">#!/bin/bash </span></span><br><span class="line">ls -l ~/.ssh/id_rsa &amp;&gt;/dev/null || ssh-keygen -t rsa -P <span class="string">''</span> -f ~/.ssh/id_rsa &amp;&gt;/dev/null ssh-copy-id -i ~/.ssh/id_rsa.pub root@172.16.1.31 </span><br><span class="line">ssh-copy-id -i ~/.ssh/id_rsa.pub root@172.16.1.41 </span><br><span class="line">ssh-copy-id -i ~/.ssh/id_rsa.pub root@172.16.1.5 </span><br><span class="line">ssh-copy-id -i ~/.ssh/id_rsa.pub root@172.16.1.7 </span><br><span class="line">ssh-copy-id -i ~/.ssh/id_rsa.pub root@172.16.1.8</span><br><span class="line"></span><br><span class="line"><span class="comment">#循环的写法</span></span><br><span class="line"><span class="meta">#!/bin/bash </span></span><br><span class="line">ls -l ~/.ssh/id_rsa &amp;&gt;/dev/null || ssh-keygen -t rsa -P <span class="string">''</span> -f ~/.ssh/id_rsa &amp;&gt;/dev/null</span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> `cat /root/1.txt`;<span class="keyword">do</span> </span><br><span class="line">	ssh-copy-id -i ~/.ssh/id_rsa.pub root@<span class="variable">$n</span> </span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#解决密码交互问题</span></span><br><span class="line">1）使用expect解决 </span><br><span class="line">[root@m01 ~]<span class="comment"># yum install -y expect</span></span><br><span class="line"><span class="comment">#!/usr/bin/expect </span></span><br><span class="line"><span class="built_in">set</span> ip 172.16.1.31 </span><br><span class="line"><span class="built_in">set</span> pass 1 </span><br><span class="line"><span class="built_in">set</span> timeout 30 </span><br><span class="line"></span><br><span class="line">spawn ssh-keygen</span><br><span class="line">expect &#123;</span><br><span class="line">	<span class="string">"id_rsa):"</span> &#123;send <span class="string">"\r"</span>; exp_continue&#125; </span><br><span class="line">	<span class="string">"passphrase):"</span> &#123;send <span class="string">"\r"</span>; exp_continue&#125; </span><br><span class="line">	<span class="string">"again:"</span> &#123;send <span class="string">"\r"</span>&#125; </span><br><span class="line">&#125;</span><br><span class="line">expect eof</span><br><span class="line"></span><br><span class="line">spawn ssh-copy-id -i /root/.ssh/id_rsa.pub root@<span class="variable">$ip</span></span><br><span class="line">expect &#123;</span><br><span class="line">	<span class="string">"(yes/no)"</span> &#123;send <span class="string">"yes\r"</span>; exp_continue&#125; </span><br><span class="line">	<span class="string">"password:"</span> &#123;send <span class="string">"<span class="variable">$pass</span>\r"</span>&#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#expect "root@*" &#123;send "df -h\r"&#125; </span></span><br><span class="line"><span class="comment">#expect "root@*" &#123;send "exit\r"&#125;</span></span><br><span class="line">expect eof</span><br><span class="line"></span><br><span class="line">2）使用sshpass解决</span><br><span class="line">[root@m01 ~]<span class="comment"># yum install -y sshpass</span></span><br><span class="line">-p：指定密码</span><br><span class="line">-f：从文件中取密码</span><br><span class="line">-e：从环境变量中取密码</span><br><span class="line">-P：设置密码提示</span><br><span class="line"><span class="comment">#ssh不需要输入yes的选项</span></span><br><span class="line">[root@m01 ~]<span class="comment"># ssh -o 'StrictHostKeyChecking no' root@172.16.1.7 </span></span><br><span class="line">[root@m01 ~]<span class="comment"># sshpass -p 1 ssh-copy-id -o 'StrictHostKeyChecking no' -i ~/.ssh/id_rsa.pub root@172.16.1.8</span></span><br><span class="line">[root@m01 ~]<span class="comment"># cat send_public_key.sh</span></span><br><span class="line"><span class="meta">#!/bin/bash </span></span><br><span class="line">ls -l ~/.ssh/id_rsa &amp;&gt;/dev/null || ssh-keygen -t rsa -P <span class="string">''</span> -f ~/.ssh/id_rsa &amp;&gt;/dev/null</span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> `cat /root/1.txt`;<span class="keyword">do</span> </span><br><span class="line">	shpass -p 1 ssh-copy-id -o <span class="string">'StrictHostKeyChecking no'</span> -i ~/.ssh/id_rsa.pub root@<span class="variable">$ip</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">[root@m01 ~]<span class="comment"># cat /root/1.txt</span></span><br><span class="line">172.16.1.31 </span><br><span class="line">172.16.1.41</span><br><span class="line">172.16.1.5 </span><br><span class="line">172.16.1.7 </span><br><span class="line">172.16.1.8</span><br><span class="line"></span><br><span class="line"><span class="comment">#每台机器密码不一致的情况</span></span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">ls -l ~/.ssh/id_rsa &amp;&gt;/dev/null || ssh-keygen -t rsa -P <span class="string">''</span> -f ~/.ssh/id_rsa &amp;&gt;/dev/null</span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> `cat /root/1.txt`;<span class="keyword">do</span> </span><br><span class="line">	pass=`<span class="built_in">echo</span> <span class="variable">$n</span>|awk -F <span class="string">':'</span> <span class="string">'&#123;print $2&#125;'</span>` </span><br><span class="line">	ip=`<span class="built_in">echo</span> <span class="variable">$n</span>|awk -F <span class="string">':'</span> <span class="string">'&#123;print $1&#125;'</span>` </span><br><span class="line">	sshpass -p <span class="variable">$pass</span> ssh-copy-id -o <span class="string">'StrictHostKeyChecking no'</span> -i ~/.ssh/id_rsa.pub root@<span class="variable">$ip</span> </span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">[root@m01 ~]<span class="comment"># cat /root/1.txt</span></span><br><span class="line">172.16.1.31:1 </span><br><span class="line">172.16.1.41:2 </span><br><span class="line">172.16.1.5:3 </span><br><span class="line">172.16.1.7:4 </span><br><span class="line">172.16.1.8:111</span><br><span class="line"></span><br><span class="line"><span class="comment">#优化后不使用判断的脚本</span></span><br><span class="line"><span class="meta">#!/bin/bash </span></span><br><span class="line">. /etc/init.d/<span class="built_in">functions</span></span><br><span class="line">ls -l ~/.ssh/id_rsa &amp;&gt;/dev/null || ssh-keygen -t rsa -P <span class="string">''</span> -f ~/.ssh/id_rsa &amp;&gt;/dev/null</span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> `cat /root/1.txt`;<span class="keyword">do</span></span><br><span class="line">	pass=`<span class="built_in">echo</span> <span class="variable">$n</span>|awk -F <span class="string">':'</span> <span class="string">'&#123;print $2&#125;'</span>`</span><br><span class="line">	ip=`<span class="built_in">echo</span> <span class="variable">$n</span>|awk -F <span class="string">':'</span> <span class="string">'&#123;print $1&#125;'</span>`</span><br><span class="line">	sshpass -p <span class="variable">$pass</span> ssh-copy-id -o <span class="string">'StrictHostKeyChecking no'</span> -i ~/.ssh/id_rsa.pub root@<span class="variable">$ip</span> &amp;&gt;/dev/null &amp;&amp; \</span><br><span class="line">	action <span class="string">"<span class="variable">$ip</span> send public key "</span> /bin/<span class="literal">true</span> || \</span><br><span class="line">	action <span class="string">"<span class="variable">$ip</span> send public key "</span> /bin/<span class="literal">false</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>

<h1 id="Google双向认证"><a href="#Google双向认证" class="headerlink" title="Google双向认证"></a>Google双向认证</h1><h2 id="Google-Authenticator介绍"><a href="#Google-Authenticator介绍" class="headerlink" title="Google Authenticator介绍"></a>Google Authenticator介绍</h2><p>通常我们直接通过ssh输入密码连接服务器，但这样很容易出现暴力破解情况，所以我们可以结合google的动态认证+ssh密码，这样能够大大的提升登陆的安全。简单来说，就是当用户通过ssh登陆系统时，先输入google的随机验证码，然后在输入服务器的ssh密码</p>
<h2 id="GoogleAuthenticator安装部署"><a href="#GoogleAuthenticator安装部署" class="headerlink" title="GoogleAuthenticator安装部署"></a>GoogleAuthenticator安装部署</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1.安装依赖</span></span><br><span class="line">yum install -y pam-devel libpng-devel autoconf automake libtool</span><br><span class="line"><span class="comment">#2.下载Google apm插件</span></span><br><span class="line"><span class="comment">#官方下载地址</span></span><br><span class="line">wget https://github.com/google/google-authenticator-libpam/archive/1.04.tar.gz</span><br><span class="line"><span class="comment">#个人下载地址</span></span><br><span class="line">wget http://test.driverzeng.com/other/1.04.tar.gz </span><br><span class="line"><span class="comment">#3.解压插件</span></span><br><span class="line">tar xf 1.04.tar.gz</span><br><span class="line"><span class="comment">#4.构建代码</span></span><br><span class="line"><span class="comment">#进入解压开的目录 </span></span><br><span class="line">[root@m01 ~]<span class="comment"># cd google-authenticator-libpam-1.04/</span></span><br><span class="line"><span class="comment">#执行bootstrap构建 </span></span><br><span class="line">[root@m01 google-authenticator-libpam-1.04]<span class="comment"># ./bootstrap.sh</span></span><br><span class="line"><span class="comment">#5.生成 </span></span><br><span class="line">[root@m01 google-authenticator-libpam-1.04]<span class="comment"># ./configure</span></span><br><span class="line"><span class="comment">#6.编译 &amp;&amp; 安装 </span></span><br><span class="line">[root@m01 google-authenticator-libpam-1.04]<span class="comment"># make &amp;&amp; make install</span></span><br><span class="line"><span class="comment">#7.检查插件是否安装 </span></span><br><span class="line">[root@m01 google-authenticator-libpam-1.04]<span class="comment"># ll /usr/local/lib/security/ </span></span><br><span class="line">-rwxr-xr-x 1 root root 1021 May 25 09:15 pam_google_authenticator.la </span><br><span class="line">-rwxr-xr-x 1 root root 133552 May 25 09:15 pam_google_authenticator.so</span><br><span class="line"><span class="comment"># 8.将安装好的插件，拷贝到系统库文件目录中 </span></span><br><span class="line">[root@m01 ~]<span class="comment"># cp /usr/local/lib/security/pam_google_authenticator.so /usr/lib64/security/</span></span><br><span class="line"><span class="comment">#9.生成初始google认证识别码 </span></span><br><span class="line">[root@m01 ~]<span class="comment"># google-authenticator</span></span><br><span class="line"><span class="comment">#认证令牌是否随时间变化 Do you want authentication tokens to be time-based (y/n) y                                                  Your new secret key is: 5HV5PHOI3HGJ6OCLTFDVV62FSY</span></span><br><span class="line">Your verification code is 262995</span><br><span class="line">Do you want me to update your <span class="string">"/root/.google_authenticator"</span> file? (y/n) y</span><br><span class="line">Do you want to disallow multiple uses of the same authentication token? This restricts you to one login about every 30s, but it increases your chances to notice or even prevent man-in-the-middle attacks (y/n) y</span><br><span class="line">By default, a new token is generated every 30 seconds by the mobile app. In order to compensate <span class="keyword">for</span> possible time-skew between the client and the server, we allow an extra token before and after the current time. This allows <span class="keyword">for</span> a time skew of up to 30 seconds between authentication server and client. If you experience problems with poor time synchronization, you can increase the window from its default size of 3 permitted codes (one previous code, the current code, the next code) to 17 permitted codes (the 8 previous codes, the current code, and the 8 next codes). This will permit <span class="keyword">for</span> a time skew of up to 4 minutes between client and server. Do you want to <span class="keyword">do</span> so? (y/n) y</span><br><span class="line">If the computer that you are logging into isn<span class="string">'t hardened against brute-force login attempts, you can enable rate-limiting for the authentication module. By default, this limits attackers to no more than 3 login attempts every 30s. Do you want to enable rate-limiting? (y/n) y</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">##将Google 2FA接入SSH</span></span><br><span class="line"><span class="string">#1.修改ssh认证配置 </span></span><br><span class="line"><span class="string">[root@m01 ~]# vim /etc/pam.d/sshd</span></span><br><span class="line"><span class="string">auth required pam_google_authenticator.so </span></span><br><span class="line"><span class="string">#2.修改SSH配置文件，关联Google认证 </span></span><br><span class="line"><span class="string">[root@m01 ~]# vim /etc/ssh/sshd_config</span></span><br><span class="line"><span class="string">69 ChallengeResponseAuthentication yes</span></span><br><span class="line"><span class="string">#3.重启sshd服务 </span></span><br><span class="line"><span class="string">[root@m01 ~]# systemctl restart sshd</span></span><br></pre></td></tr></table></figure>

<h2 id="使用Python脚本登录CRT"><a href="#使用Python脚本登录CRT" class="headerlink" title="使用Python脚本登录CRT"></a>使用Python脚本登录CRT</h2><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_devops/image-20220525130858361.png" alt="image-20220525130858361"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># $language = "python" </span></span><br><span class="line"><span class="comment"># $interface = "1.0" </span></span><br><span class="line"><span class="keyword">import</span> hmac, base64, struct, hashlib, time,re </span><br><span class="line"></span><br><span class="line"><span class="comment">#获取当前脚本所在的tab对象</span></span><br><span class="line">objTab = crt.GetScriptTab() </span><br><span class="line"><span class="comment">#objTab = crt.GetActiveTab() </span></span><br><span class="line">objTab.Screen.Synchronous = <span class="literal">True</span> </span><br><span class="line">objTab.Screen.IgnoreEscape = <span class="literal">True</span> </span><br><span class="line"><span class="comment">#获取终端名字 </span></span><br><span class="line">tabName=objTab.Caption </span><br><span class="line">reIp=<span class="string">r'\d&#123;1,3&#125;\.\d&#123;1,3&#125;\.\d&#123;1,3&#125;\.\d&#123;1,3&#125;'</span> </span><br><span class="line">hostIp=re.findall(reIp,tabName)[<span class="number">0</span>] </span><br><span class="line">secretKey=<span class="string">"Your new secret key is:"</span> </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calGoogleCode</span><span class="params">(secretKey)</span>:</span> </span><br><span class="line">    <span class="comment">#secreKey 需要是8的倍数 </span></span><br><span class="line">    t = int(time.time())//<span class="number">30</span> </span><br><span class="line">    lens = len(secretKey) </span><br><span class="line">    lenx = <span class="number">8</span> - (lens % <span class="number">4</span> <span class="keyword">if</span> lens % <span class="number">4</span> <span class="keyword">else</span> <span class="number">4</span>) </span><br><span class="line">    secretKey += lenx * <span class="string">'='</span> </span><br><span class="line">    key = base64.b32decode(secretKey) </span><br><span class="line">    msg = struct.pack(<span class="string">"&gt;Q"</span>, t)</span><br><span class="line">    googleCode = hmac.new(key, msg, hashlib.sha1).digest() </span><br><span class="line">    o = ord(str(googleCode[<span class="number">19</span>])) &amp; <span class="number">15</span> </span><br><span class="line">    googleCode = str((struct.unpack(<span class="string">"&gt;I"</span>, googleCode[o:o+<span class="number">4</span>])[<span class="number">0</span>] &amp; <span class="number">0x7fffffff</span>) % <span class="number">1000000</span>) </span><br><span class="line">    <span class="keyword">return</span> googleCode.zfill(<span class="number">6</span>)</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_string</span><span class="params">(objTab,szStart,szPrompt)</span>:</span> </span><br><span class="line">    objTab.Screen.WaitForStrings(szStart) </span><br><span class="line">    <span class="keyword">return</span> objTab.Screen.ReadString(szPrompt)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_string</span><span class="params">(objTab,waitString,strings,selfSleepTime=<span class="number">20</span>)</span>:</span> </span><br><span class="line">    objTab.Screen.WaitForStrings(waitString) </span><br><span class="line">    time.sleep(<span class="number">0.0001</span>) </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> strings: </span><br><span class="line">        crt.Sleep(<span class="number">5</span>) </span><br><span class="line">        objTab.Screen.Send(i) </span><br><span class="line">    <span class="comment">#time.sleep(0.0001) </span></span><br><span class="line">    objTab.Screen.WaitForStrings(strings) </span><br><span class="line">    <span class="keyword">if</span> strings[<span class="number">-1</span>] != <span class="string">'\r'</span>: </span><br><span class="line">        objTab.Screen.Send(<span class="string">'\r'</span>)</span><br><span class="line">    <span class="comment">#msg(objTab.Screen.ReadString('[ q ]')) </span></span><br><span class="line">    <span class="comment">#time.sleep(0.0001)</span></span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_pass</span><span class="params">(objTab,waitString,strings)</span>:</span> </span><br><span class="line">    objTab.Screen.WaitForStrings(waitString) </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> strings: </span><br><span class="line">        crt.Sleep(<span class="number">5</span>) </span><br><span class="line">        objTab.Screen.Send(i) </span><br><span class="line">    <span class="keyword">if</span> strings[<span class="number">-1</span>] != <span class="string">'\r'</span>: </span><br><span class="line">    	objTab.Screen.Send(<span class="string">'\r'</span>) </span><br><span class="line">    time.sleep(<span class="number">0.01</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment">#发送2fa </span></span><br><span class="line">send_pass(objTab,<span class="string">'Verification code:'</span>,calGoogleCode(secretKey)) </span><br><span class="line"><span class="comment">#发送密码 </span></span><br><span class="line">send_pass(objTab,<span class="string">'Password: '</span>,<span class="string">'1'</span>) <span class="comment"># '1' 是服务器的密码 </span></span><br><span class="line"><span class="comment">#发送登录ip </span></span><br><span class="line">send_string(objTab,<span class="string">'Opt&gt; '</span>,hostIp)</span><br><span class="line"></span><br><span class="line"><span class="comment">#objTab.Screen.WaitForStrings("[MFA auth]: ","") </span></span><br><span class="line"><span class="comment">#if objTab.Screen.WaitForStrings("Opt&gt; ",1): </span></span><br><span class="line">	<span class="comment">#发送登录ip 克隆会话,不需要二次验证码 </span></span><br><span class="line">    <span class="comment">#send_string(objTab,'Opt&gt; ',hostIp) </span></span><br><span class="line"><span class="comment">#else: </span></span><br><span class="line">	<span class="comment">#发送2fa </span></span><br><span class="line">    <span class="comment">#send_pass(objTab,'[MFA auth]: ',calGoogleCode(secretKey)) </span></span><br><span class="line">    <span class="comment">#发送登录ip </span></span><br><span class="line">    <span class="comment">#send_string(objTab,'Opt&gt; ',hostIp)</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>SRE</category>
      </categories>
      <tags>
        <tag>Linux架构</tag>
      </tags>
  </entry>
  <entry>
    <title>[Linux持续集成]</title>
    <url>/2019/05/20/Linux%E6%8C%81%E7%BB%AD%E5%8C%96%E9%9B%86%E6%88%90/</url>
    <content><![CDATA[<p><a href="https://rogerxs80.github.io/2019/05/20/Shell%E7%BC%96%E7%A8%8B/" target="_blank" rel="noopener">1.Shell脚本</a></p>
<p><a href="https://rogerxs80.github.io/2019/02/20/%E8%99%9A%E6%8B%9F%E5%8C%96%E7%8E%AF%E5%A2%83/" target="_blank" rel="noopener">2.MySQL数据库</a></p>
<p><a href="https://rogerxs80.github.io/2019/02/20/Bash%E5%88%9D%E8%AF%86/" target="_blank" rel="noopener">3.Zabbix监控</a></p>
<p><a href="https://rogerxs80.github.io/2019/02/21/%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/" target="_blank" rel="noopener">4.CICD持续集成</a></p>
<p><a href="https://rogerxs80.github.io/2019/02/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/" target="_blank" rel="noopener">5.Redis数据库</a></p>
<p><a href="https://rogerxs80.github.io/2019/02/20/%E8%99%9A%E6%8B%9F%E5%8C%96%E7%8E%AF%E5%A2%83/" target="_blank" rel="noopener">6.ELK图形监控</a></p>
]]></content>
      <categories>
        <category>SRE</category>
      </categories>
      <tags>
        <tag>Linxu持续集成</tag>
      </tags>
  </entry>
  <entry>
    <title>[环境准备]</title>
    <url>/2019/04/20/%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87/</url>
    <content><![CDATA[<h1 id="架构介绍"><a href="#架构介绍" class="headerlink" title="架构介绍"></a>架构介绍</h1><h2 id="架构相关名词"><a href="#架构相关名词" class="headerlink" title="架构相关名词"></a>架构相关名词</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">项目：独立的一个网站，或者独立的一个app应用 </span><br><span class="line">架构：用来维护或者运行一个项目的一组服务器 </span><br><span class="line">集群：为解决某个特定问题将多台计算机组合起来形成的单个系统（避免单点故障）</span><br><span class="line">高可用：当一台服务器不可用，另一台服务器自动接管，保证业务不down机 </span><br><span class="line">负载均衡：将用户的请求，分摊到多个操作单元上执行,为了解决服务器压力不均衡的问题</span><br></pre></td></tr></table></figure>

<h2 id="架构演变"><a href="#架构演变" class="headerlink" title="架构演变"></a>架构演变</h2><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_devops/image-20220512193446428.png" alt="image-20220512193446428"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#用户请求，针对用户设计的架构 </span></span><br><span class="line">在浏览器中输入：https://blog.driverzeng.com </span><br><span class="line">1.DNS域名解析服务器 ==》将blog.driverzeng.com解析成IP地址：114.80.187.8 </span><br><span class="line">2.浏览器和该IP地址（114.80.187.8）的服务器(https:// 443)端（http:// 80）口建立连接 </span><br><span class="line">3.请求要经过114.80.187.8服务器的防火墙，如果允许你的IP（101.229.206.48）访问服务器的443端口 </span><br><span class="line">	- 防火墙：过滤用户请求，防止恶意请求，针对IP和端口进行限制 </span><br><span class="line">	- 关闭防火墙，关闭Selinux </span><br><span class="line">	- CentOS6之前：iptables </span><br><span class="line">	- CentOS7开始：firewalld，也可以使用iptables </span><br><span class="line">	- 硬件防火墙 </span><br><span class="line">4.请求通过防火墙后，访问到负载均衡服务器 </span><br><span class="line">	- Nginx </span><br><span class="line">	- HAproxy </span><br><span class="line">	- LVS </span><br><span class="line">	- F5（硬件） </span><br><span class="line">5.请求通过负载均衡后会被下发到后面的web服务器 </span><br><span class="line">	- Nginx </span><br><span class="line">	- Apache </span><br><span class="line">	- Tomcat（Java） </span><br><span class="line">	- PHP（PHP代码容器） </span><br><span class="line">6.前端代码会请求后端的代码，后端代码请求数据库 </span><br><span class="line">	- MySQL </span><br><span class="line">	- Oracle </span><br><span class="line">	- SQLServer </span><br><span class="line">	- MariaDB </span><br><span class="line">7.数据库之前会有缓存服务器，如果缓存中有请求的数据，则直接通过缓存返回给用户 </span><br><span class="line">	- Redis </span><br><span class="line">	- MangoDB </span><br><span class="line">	- Memcache </span><br><span class="line">8.文件服务器（共享存储服务器）专门用来存储图片，视频，二进制类型的数据 </span><br><span class="line">	- NFS </span><br><span class="line">	- GFS </span><br><span class="line">	- FastDFS </span><br><span class="line">	- ceph</span><br><span class="line"></span><br><span class="line"><span class="comment">#运维自动化工具 </span></span><br><span class="line">所有服务器，至少要有两块网卡（有两个IP地址） </span><br><span class="line">外网IP地址：针对用户访问，给用户提供服务 </span><br><span class="line">内网IP地址：服务器之间互相可以访问 </span><br><span class="line">跳板机，VPN：访问内网服务器 </span><br><span class="line">	- openvpn </span><br><span class="line">	- pptpvpn </span><br><span class="line">	- jumpserver </span><br><span class="line">监控：检测服务器上的应用状态，硬件状态，网络状态，系统状态，业务状态 </span><br><span class="line">	- zabbix </span><br><span class="line">	- nagios </span><br><span class="line">	- open-falcon </span><br><span class="line">	- promethues </span><br><span class="line">	- cacti</span><br><span class="line">数据备份服务器：用来备份所有重要数据 </span><br><span class="line">	- rsync 批量管理服务器 </span><br><span class="line">	- ansible </span><br><span class="line">	- saltstack </span><br><span class="line">日志服务器 </span><br><span class="line">	- ELK </span><br><span class="line">	- flume </span><br><span class="line">代码发布服务器 </span><br><span class="line">	- Jenkins </span><br><span class="line">代码存储服务器 </span><br><span class="line">	- Gitlab</span><br></pre></td></tr></table></figure>

<h2 id="架构模板机准备"><a href="#架构模板机准备" class="headerlink" title="架构模板机准备"></a>架构模板机准备</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#编辑网卡名</span></span><br><span class="line">按Tab键</span><br><span class="line">quiet net.ifnames=0 biosdevname=0</span><br><span class="line"></span><br><span class="line"><span class="comment">#配置网卡</span></span><br><span class="line"><span class="comment">##编辑第一块网卡 </span></span><br><span class="line">vi /etc/sysconfig/network-scripts/ifcfg-eth0 </span><br><span class="line">删除UUID  <span class="comment">#mac地址</span></span><br><span class="line">BOOTPROTO=dhcp =&gt; BOOTPROTO=static 或者 BOOTPROTO=none </span><br><span class="line">ONBOOT=no =&gt; ONBOOT=yes </span><br><span class="line">IPADDR=10.0.0.100 </span><br><span class="line">NETMASK=255.255.255.0 </span><br><span class="line">GATEWAY=10.0.0.2 </span><br><span class="line">DNS1=223.5.5.5 </span><br><span class="line"><span class="comment">##编辑第二块网卡 </span></span><br><span class="line">vi /etc/sysconfig/network-scripts/ifcfg-eth1 </span><br><span class="line">删除UUID </span><br><span class="line">BOOTPROTO=dhcp =&gt; BOOTPROTO=static 或者 BOOTPROTO=none </span><br><span class="line">ONBOOT=no =&gt; ONBOOT=yes </span><br><span class="line">IPADDR=172.16.1.100 </span><br><span class="line">NETMASK=255.255.255.0 </span><br><span class="line"><span class="comment">##重启网卡 </span></span><br><span class="line">systemctl restart network</span><br><span class="line"></span><br><span class="line"><span class="comment">#系统优化</span></span><br><span class="line"><span class="comment">#1.更改yum源 </span></span><br><span class="line"><span class="comment">##删除所有系统内置yum源</span></span><br><span class="line">[root@localhost ~]<span class="comment"># gzip /etc/yum.repos.d/*.repo</span></span><br><span class="line">[root@localhost ~]<span class="comment"># rm -fr /etc/yum.repos.d/* </span></span><br><span class="line"><span class="comment">##Base源 </span></span><br><span class="line">curl -o /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-7.repo </span><br><span class="line"><span class="comment">##Epel源 </span></span><br><span class="line">curl -o /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-7.repo</span><br><span class="line"><span class="comment">##优化阿里云的源（删除多余的baseurl） </span></span><br><span class="line">[root@localhost ~]<span class="comment"># vi /etc/yum.repos.d/CentOS-Base.repo</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#安装基础命令和环境 </span></span><br><span class="line">yum install net-tools vim tree htop iftop gcc gcc-c++ glibc iotop lrzsz sl wget unzip telnet nmap nc psmisc dos2unix bash-completion bash-completion-extra sysstat rsync nfs- utils httpd-tools -y</span><br><span class="line"></span><br><span class="line"><span class="comment">#关闭防火墙 </span></span><br><span class="line"><span class="comment">##关闭防火墙服务 </span></span><br><span class="line">[root@localhost ~]<span class="comment"># systemctl stop firewalld </span></span><br><span class="line"><span class="comment">##取消防火墙开机自启 </span></span><br><span class="line">[root@localhost ~]<span class="comment"># systemctl disable firewalld</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#关闭selinux </span></span><br><span class="line"><span class="comment">##查看selinux </span></span><br><span class="line">[root@localhost ~]<span class="comment"># getenforce Enforcing </span></span><br><span class="line"><span class="comment">##开启状态 </span></span><br><span class="line"><span class="comment">##临时关闭 </span></span><br><span class="line">[root@localhost ~]<span class="comment"># setenforce 0 </span></span><br><span class="line"><span class="comment">##永久关闭 </span></span><br><span class="line">[root@localhost ~]<span class="comment"># vim /etc/sysconfig/selinux SELINUX=enfocing =&gt; SELINUX=disabled</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#优化文件描述符 </span></span><br><span class="line"><span class="comment">##查看文件描述 </span></span><br><span class="line">[root@lb01 ~]<span class="comment"># ulimit -n 65535 </span></span><br><span class="line">[root@lb01 ~]<span class="comment"># ulimit -a </span></span><br><span class="line"><span class="comment">##设置文件描述符为65535 </span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'* - nofile 65535'</span> &gt;&gt; /etc/security/limits.conf</span><br><span class="line"></span><br><span class="line"><span class="comment">#修改主机脚本</span></span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">read</span> -p <span class="string">"Please input HOSTNAME："</span> h</span><br><span class="line"><span class="built_in">read</span> -p <span class="string">"Please input IP："</span> IP</span><br><span class="line"></span><br><span class="line">hostnamectl <span class="built_in">set</span>-hostname <span class="variable">$h</span></span><br><span class="line">sed -i <span class="string">"s#100#<span class="variable">$IP</span>#g"</span> /etc/sysconfig/network-scripts/ifcfg-eth&#123;0,1&#125;</span><br></pre></td></tr></table></figure>

<h2 id="机器准备"><a href="#机器准备" class="headerlink" title="机器准备"></a>机器准备</h2><table>
<thead>
<tr>
<th align="center">外网IP</th>
<th align="center">内网IP</th>
<th align="center">主机名</th>
</tr>
</thead>
<tbody><tr>
<td align="center">10.0.0.5</td>
<td align="center">172.16.1.5</td>
<td align="center">lb01</td>
</tr>
<tr>
<td align="center">10.0.0.6</td>
<td align="center">172.16.1.6</td>
<td align="center">lb02</td>
</tr>
<tr>
<td align="center">10.0.0.7</td>
<td align="center">172.16.1.7</td>
<td align="center">web01</td>
</tr>
<tr>
<td align="center">10.0.0.8</td>
<td align="center">172.16.1.8</td>
<td align="center">web02</td>
</tr>
<tr>
<td align="center">10.0.0.9</td>
<td align="center">172.16.1.9</td>
<td align="center">web03</td>
</tr>
<tr>
<td align="center">10.0.0.31</td>
<td align="center">172.16.1.31</td>
<td align="center">nfs</td>
</tr>
<tr>
<td align="center">10.0.0.41</td>
<td align="center">172.16.1.41</td>
<td align="center">backup</td>
</tr>
<tr>
<td align="center">10.0.0.51</td>
<td align="center">172.16.1.51</td>
<td align="center">db01</td>
</tr>
<tr>
<td align="center">10.0.0.61</td>
<td align="center">172.16.1.61</td>
<td align="center">m01</td>
</tr>
<tr>
<td align="center">10.0.0.71</td>
<td align="center">172.16.1.71</td>
<td align="center">zabbix</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>SRE</category>
      </categories>
      <tags>
        <tag>Linux架构</tag>
      </tags>
  </entry>
  <entry>
    <title>[云计算架构]</title>
    <url>/2019/05/20/%E4%BA%91%E8%AE%A1%E7%AE%97%E6%9E%B6%E6%9E%84/</url>
    <content><![CDATA[<p><a href="https://rogerxs80.github.io/2019/05/20/Shell%E7%BC%96%E7%A8%8B/" target="_blank" rel="noopener">1.Docker容器</a></p>
<p><a href="https://rogerxs80.github.io/2019/02/20/%E8%99%9A%E6%8B%9F%E5%8C%96%E7%8E%AF%E5%A2%83/" target="_blank" rel="noopener">2.Kubernetes二进制安装</a></p>
]]></content>
      <categories>
        <category>SRE</category>
      </categories>
      <tags>
        <tag>Kubernets</tag>
      </tags>
  </entry>
  <entry>
    <title>[Shell编程]</title>
    <url>/2019/05/20/Shell%E7%BC%96%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="shell基础入门"><a href="#shell基础入门" class="headerlink" title="shell基础入门"></a>shell基础入门</h1><h2 id="为什么使用shell"><a href="#为什么使用shell" class="headerlink" title="为什么使用shell"></a>为什么使用shell</h2><p>1.安装操作系统(CentOS)自动化安装操作系统(kickstart cobbler)底层shell</p>
<p>2.初始化/优化操作系统</p>
<ul>
<li>ntp时间同步</li>
<li>更改默认yum源</li>
<li>ssh优化 </li>
<li>关闭Selinux</li>
<li>关闭/开启 防火墙(C6:iptables C7:firewalld)</li>
<li>安装基础服务(wget vim lrzsz net-tools unzip gzip…)</li>
<li>优化文件描述符</li>
<li>优化字符集</li>
</ul>
<p>3.安装服务</p>
<ul>
<li>Nginx</li>
<li>PHP</li>
<li>MySQL</li>
<li>Redis</li>
<li>MHA</li>
<li>Rsync</li>
<li>NFS</li>
<li>MongoDB</li>
<li>Zabbix</li>
</ul>
<p>4.启动服务（系统默认的shell脚本）</p>
<p>5.脚本实现自动化代码上线</p>
<p>6.监控服务（使用shell）</p>
<p>7.结合定时任务使用shell</p>
<p>8.重复性工作写入脚本</p>
<ul>
<li>日志切割</li>
<li>日志分析</li>
<li>数据统计</li>
<li>机器巡检</li>
<li>数据备份</li>
</ul>
<h2 id="shell编程需要掌握的基础知识"><a href="#shell编程需要掌握的基础知识" class="headerlink" title="shell编程需要掌握的基础知识"></a>shell编程需要掌握的基础知识</h2><ul>
<li>熟练使用vim编辑器</li>
<li>熟悉ssh终端（Xshell、CRT）</li>
<li>熟练掌握linux常用命令</li>
<li>熟练掌握linux正则表达式及三剑客命令</li>
<li>VScode</li>
</ul>
<h2 id="shell脚本规范"><a href="#shell脚本规范" class="headerlink" title="shell脚本规范"></a>shell脚本规范</h2><p>1.目录统一<br>2.shell脚本的结尾要以.sh结尾<br>3.脚本的开头需要有解释器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br></pre></td></tr></table></figure>

<p>4.作者信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">#Author: _DriverZeng_</span></span><br><span class="line"><span class="comment">#Date: _1999-12-21_</span></span><br><span class="line"><span class="comment">#Name: _Print Message_</span></span><br></pre></td></tr></table></figure>

<p>5.一定要有注释（可以中文）</p>
<p>6.shell中尽量使用英文</p>
<p>7.成对的符号和语句一次性写完</p>
<h2 id="vim模板"><a href="#vim模板" class="headerlink" title="vim模板"></a>vim模板</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1.首先先编辑一个模板文件，该模板文件可以叫任何名字</span></span><br><span class="line">[root@zabbix01 ~]<span class="comment"># vim /usr/share/vim/vimfiles/template.roger</span></span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">#Author: _DriverZeng_</span></span><br><span class="line"><span class="comment">#Date: _1999-12-21_</span></span><br><span class="line"><span class="comment">#Name: _Print Message_</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.写完之后，我们需要修改一下vim的配置文件</span></span><br><span class="line">[root@zabbix01 ~]<span class="comment"># vim /etc/vimrc</span></span><br><span class="line">autocmd BufNewFile *.spec 0r /usr/share/vim/vimfiles/template.spec</span><br><span class="line"><span class="comment">## 在第28行，autocmd自动保存模板文件，修改一下，因为我们是要写shell脚本的模板</span></span><br><span class="line"><span class="comment">## 所以我们要把*.spec 修改成*.sh</span></span><br><span class="line"><span class="comment">## 然后将后面的模板文件改成你定义的模板文件名</span></span><br><span class="line">autocmd BufNewFile *.sh 0r /usr/share/vim/vimfiles/template.roger</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.编辑~/.vimrc</span></span><br><span class="line">[root@zabbix01 ~]<span class="comment"># vim ~/.vimrc</span></span><br><span class="line">autocmd bufNewFile *.py,*.sh,*.java <span class="built_in">exec</span> <span class="string">":call SetTitle()"</span></span><br><span class="line">func SetTitle()</span><br><span class="line">  <span class="keyword">if</span> expand(<span class="string">"%:e"</span>) == <span class="string">'sh'</span></span><br><span class="line">      call setline(1, <span class="string">"#!/bin/bash"</span>)</span><br><span class="line">      call setline(2, <span class="string">""</span>)</span><br><span class="line">      call setline(3, <span class="string">"# File Name: __"</span>.expand(<span class="string">"%"</span>) . <span class="string">"__"</span>)</span><br><span class="line">      call setline(4, <span class="string">"# Version: __v1.1__ "</span>)</span><br><span class="line">      call setline(5, <span class="string">"# Author: __RogerWang__ "</span>)</span><br><span class="line">      call setline(6, <span class="string">"# Mail: __690705712@qq.com__ "</span>)</span><br><span class="line">      call setline(7, <span class="string">"# Blog: __https://rogerxs80.github.io/__ "</span>)</span><br><span class="line">      call setline(8, <span class="string">"# DateTime: __"</span>.expand(strftime(<span class="string">"%Y-%m-%d %H:%M"</span>)) . <span class="string">"__"</span>)</span><br><span class="line">  endif</span><br><span class="line">endfunc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.接下来，我们编辑所有只要以sh结尾的文件，都会带有作者信息</span></span><br><span class="line">[root@zabbix01 ~]<span class="comment"># vim test_roger.sh</span></span><br></pre></td></tr></table></figure>

<h2 id="脚本执行方式"><a href="#脚本执行方式" class="headerlink" title="脚本执行方式"></a>脚本执行方式</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@m01 ~]<span class="comment"># vim test.sh</span></span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">#Author: _DriverZeng_</span></span><br><span class="line"><span class="comment">#Date: _1999-12-21_</span></span><br><span class="line"><span class="comment">#Name: _Print Message_</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'Hello World'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#执行脚本</span></span><br><span class="line">[root@m01 ~]<span class="comment"># sh test.sh</span></span><br><span class="line">Hello World</span><br><span class="line">[root@m01 ~]<span class="comment"># bash test.sh</span></span><br><span class="line">Hello World</span><br><span class="line">[root@m01 ~]<span class="comment"># ./test.sh</span></span><br><span class="line">Hello World</span><br><span class="line">[root@m01 ~]<span class="comment"># /root/test.sh</span></span><br><span class="line">Hello World</span><br><span class="line">[root@m01 ~]<span class="comment"># . test.sh</span></span><br><span class="line">Hello World</span><br><span class="line">[root@m01 ~]<span class="comment"># source test.sh</span></span><br><span class="line">Hello World</span><br></pre></td></tr></table></figure>

<p>. 和 source 都是在父shell下执行的<br>sh ， bash ，相对路径 ，绝对路径都是在子shell下执行的</p>
<h2 id="开发语言中程序代码分类"><a href="#开发语言中程序代码分类" class="headerlink" title="开发语言中程序代码分类"></a>开发语言中程序代码分类</h2><ul>
<li>编译型</li>
<li>解释型</li>
</ul>
]]></content>
      <categories>
        <category>SRE</category>
      </categories>
      <tags>
        <tag>Linxu持续集成</tag>
      </tags>
  </entry>
  <entry>
    <title>[Vue客户端项目搭建]</title>
    <url>/2020/02/27/Vue%E5%AE%A2%E6%88%B7%E7%AB%AF%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h1 id="客户端项目搭建"><a href="#客户端项目搭建" class="headerlink" title="客户端项目搭建"></a>客户端项目搭建</h1><h2 id="创建项目目录"><a href="#创建项目目录" class="headerlink" title="创建项目目录"></a>创建项目目录</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> 项目目录[荏苒资讯]</span><br><span class="line">vue init webpack renran</span><br></pre></td></tr></table></figure>

<p>例如，我要把项目保存在桌面下的子目录renran ~/Desktop/renran，可以如下操作：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> Desktop/renran</span><br><span class="line">vue init webpack renran_pc</span><br></pre></td></tr></table></figure>

<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/1581901045861.png" alt="1581901045861"></p>
<p>打开项目已经，在pycharm的终端下运行vue项目，查看效果。</p>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/1581901177538.png" alt="1581901177538"></p>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/1581901225429.png" alt="1581901225429"></p>
<p>上面的操作步骤，等同于执行了下面这句命令。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure>

<p>接下来，我们根据终端上效果显示的对应地址来访问项目(如果有多个vue项目在运行，8080端口被占据了，服务器会自动改端口，所以根据自己实际在操作中看到的地址来访问。)</p>
<p>访问：<a href="http://localost:8080" target="_blank" rel="noopener">http://localost:8080</a></p>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/1581901294089.png" alt="1581901294089"></p>
<h2 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h2><p>清除默认的HelloWorld.vue组件和APP.vue中的默认模板代码和默认css样式</p>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/1581901419680.png" alt="1581901419680"></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line"></span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  name: <span class="string">'App'</span>,</span><br><span class="line">  components: &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;style&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;/</span>style&gt;</span><br></pre></td></tr></table></figure>

<p>接下来，我们可以查看效果了，一张白纸~</p>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/1556414476287.png" alt="1556414476287"></p>
<h2 id="安装路由vue-router"><a href="#安装路由vue-router" class="headerlink" title="安装路由vue-router"></a>安装路由vue-router</h2><p>官方文档：<a href="https://router.vuejs.org/zh/" target="_blank" rel="noopener">https://router.vuejs.org/zh/</a></p>
<h3 id="下载安装路由组件"><a href="#下载安装路由组件" class="headerlink" title="下载安装路由组件"></a>下载安装路由组件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i vue-router -S<span class="comment"># npm install vue-router --save</span></span><br></pre></td></tr></table></figure>

<h3 id="配置路由"><a href="#配置路由" class="headerlink" title="配置路由"></a>配置路由</h3><h4 id="初始化路由对象"><a href="#初始化路由对象" class="headerlink" title="初始化路由对象"></a>初始化路由对象</h4><p>在src目录下创建routes路由目录，在router目录下创建index.js路由文件</p>
<p>index.js路由文件中，编写初始化路由对象的代码 .</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">// <span class="number">1.</span> 引入vue和vue-router组件核心对象，并在vue中通过use注册vue-router组件</span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">"vue"</span>;</span><br><span class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">"vue-router"</span>;</span><br><span class="line"></span><br><span class="line">Vue.use(Router);</span><br><span class="line"></span><br><span class="line">// <span class="number">2.</span> 暴露vue-router对象，并在vue-router里面编写路由，提供给main.js调用</span><br><span class="line">export default new Router(&#123;</span><br><span class="line">  // 设置路由模式为‘history’，去掉默认的<span class="comment">#</span></span><br><span class="line">  mode: <span class="string">"history"</span>,</span><br><span class="line">  routes:[</span><br><span class="line">    // 路由列表</span><br><span class="line">	</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="注册路由信息"><a href="#注册路由信息" class="headerlink" title="注册路由信息"></a>注册路由信息</h4><p>打开main.js文件，把router路由规则对象注册到vue中，代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">// The Vue build version to load <span class="keyword">with</span> the `<span class="keyword">import</span>` command</span><br><span class="line">// (runtime-only <span class="keyword">or</span> standalone) has been set <span class="keyword">in</span> webpack.base.conf <span class="keyword">with</span> an alias.</span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App'</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">'./router/index'</span>;</span><br><span class="line"></span><br><span class="line">Vue.config.productionTip = false</span><br><span class="line"></span><br><span class="line">/* eslint-disable no-new */</span><br><span class="line">new Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  router,</span><br><span class="line">  components: &#123; App &#125;,</span><br><span class="line">  template: <span class="string">'&lt;App/&gt;'</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="在视图中显示路由对应的内容"><a href="#在视图中显示路由对应的内容" class="headerlink" title="在视图中显示路由对应的内容"></a>在视图中显示路由对应的内容</h4><p>在App.vue组件中，添加显示路由对应的内容。代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 标签名必须是这个rouer-view --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">  name: <span class="string">'App'</span>,</span></span><br><span class="line">  components: &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>注意：如果在vue创建项目的时候，设置安装vue-router，则项目会自动帮我们生成上面的router目录和index.js里面的代码，以及自动到main.js里面注册路由对象。</p>
<h3 id="路由对象提供的操作"><a href="#路由对象提供的操作" class="headerlink" title="路由对象提供的操作"></a>路由对象提供的操作</h3><p>在我们安装注册了vue-router组件以后，vue-router在vue项目中会帮我们在全局范围内所有组件里面创建2个对象给我们使用：</p>
<ol>
<li><code>this.$router</code>，可用于在js代码中进行页面跳转。</li>
<li><code>this.$route</code>，可用于获取地址栏上面的url参数。</li>
</ol>
<h4 id="页面跳转"><a href="#页面跳转" class="headerlink" title="页面跳转"></a>页面跳转</h4><p>在vue-router提供的操作中， 进行页面跳转有2种方式：</p>
<ol>
<li><p>使用<code>&lt;router-link to=&quot;url地址&quot;&gt;</code>来跳转</p>
</li>
<li><p>在<code>&lt;script&gt;</code>中使用<code>this.$router.push(url地址)</code>来跳转</p>
<p>在<code>&lt;script&gt;</code>中还可以使用<code>this.$router.go(整数)</code>，表示跳转返回上一页或者上几页，下一个或者下几页</p>
</li>
</ol>
<h5 id="router-link标签"><a href="#router-link标签" class="headerlink" title="router-link标签"></a>router-link标签</h5><p>例如，我们就可以在Home.vue组件中，使用router-link跳转到User.vue组件中。</p>
<p>routes/index.js，代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">// <span class="number">1.</span> 引入vue和vue-router组件核心对象，并在vue中通过use注册vue-router组件</span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">"vue"</span>;</span><br><span class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">"vue-router"</span>;</span><br><span class="line"></span><br><span class="line">Vue.use(Router); // Router是类</span><br><span class="line">// <span class="number">2.</span> 暴露vue-router对象，并在vue-router里面编写路由，提供给main.js调用</span><br><span class="line"></span><br><span class="line">// 导入组件</span><br><span class="line">// <span class="keyword">import</span> 组件名 <span class="keyword">from</span> <span class="string">"../components/组件名"</span></span><br><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">"../components/Home"</span>;</span><br><span class="line"><span class="keyword">import</span> User <span class="keyword">from</span> <span class="string">"../components/User"</span>;</span><br><span class="line"></span><br><span class="line">export default new Router(&#123;</span><br><span class="line">  mode:<span class="string">"history"</span>,  // 路由地址的显示模式： 默认hash，表示地址栏上面出现<span class="comment">#</span></span><br><span class="line">  routes:[</span><br><span class="line">    // &#123;</span><br><span class="line">    //   name:<span class="string">"路由名称[对应组件的name值，将来用于跳转页面]"</span>,</span><br><span class="line">    //   path: <span class="string">"访问url路径"</span>,</span><br><span class="line">    //   component: 组件名</span><br><span class="line">    // &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      name:<span class="string">"Home"</span>,</span><br><span class="line">      path: <span class="string">"/"</span>,</span><br><span class="line">      component: Home</span><br><span class="line">    &#125;,&#123;</span><br><span class="line">      name:<span class="string">"User"</span>,</span><br><span class="line">      path: <span class="string">"/user"</span>,</span><br><span class="line">      component: User</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// vue-router除了可以进行组件和url地址的绑定以外，还可以</span><br><span class="line">// 进行不同组件的页面跳转，</span><br></pre></td></tr></table></figure>

<p>Home.vue代码：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      首页页面组件</span><br><span class="line">      &lt;a href=<span class="string">"/user"</span>&gt;个人中心&lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp">      &lt;!-- router-link标签，本质上就是a标签，只是由vue-router进行加工处理</span></span><br><span class="line"><span class="regexp">      可以显示局部页面刷新，不会重新加载内容，进行ajax跳转</span></span><br><span class="line"><span class="regexp">       --&gt;</span></span><br><span class="line"><span class="regexp">      &lt;router-link to="/u</span>ser<span class="string">"&gt;个人中心&lt;/router-link&gt;</span></span><br><span class="line"><span class="string">      &lt;router-link :to="</span>url<span class="string">"&gt;个人中心&lt;/router-link&gt;</span></span><br><span class="line"><span class="string">      &lt;router-link :to="</span>&#123;<span class="attr">name</span>:<span class="string">'User'</span>&#125;<span class="string">"&gt;个人中心&lt;/router-link&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;/template&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;script&gt;</span></span><br><span class="line"><span class="string">    export default &#123;</span></span><br><span class="line"><span class="string">        name: "</span>Home<span class="string">",</span></span><br><span class="line"><span class="string">        data()&#123;</span></span><br><span class="line"><span class="string">          return &#123;</span></span><br><span class="line"><span class="string">              url: "</span>/user<span class="string">",</span></span><br><span class="line"><span class="string">          &#125;</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        methods:&#123;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;style scoped&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;/style&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/1581908101280.png" alt="1581908101280"></p>
<h5 id="this-router-push-跳转"><a href="#this-router-push-跳转" class="headerlink" title="this.$router.push()跳转"></a><code>this.$router.push()</code>跳转</h5><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      首页页面组件</span><br><span class="line">      &lt;a href=<span class="string">"/user"</span>&gt;个人中心&lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp">      &lt;!-- router-link标签，本质上就是a标签，只是由vue-router进行加工处理</span></span><br><span class="line"><span class="regexp">      可以显示局部页面刷新，不会重新加载内容，进行ajax跳转</span></span><br><span class="line"><span class="regexp">       --&gt;</span></span><br><span class="line"><span class="regexp">      &lt;router-link to="/u</span>ser<span class="string">"&gt;个人中心&lt;/router-link&gt;</span></span><br><span class="line"><span class="string">      &lt;router-link :to="</span>url<span class="string">"&gt;个人中心&lt;/router-link&gt;</span></span><br><span class="line"><span class="string">      &lt;router-link :to="</span>&#123;<span class="attr">name</span>:<span class="string">'User'</span>&#125;<span class="string">"&gt;个人中心&lt;/router-link&gt;</span></span><br><span class="line"><span class="string">      &lt;button @click="</span>jump<span class="string">"&gt;个人中心&lt;/button&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;/template&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;script&gt;</span></span><br><span class="line"><span class="string">    export default &#123;</span></span><br><span class="line"><span class="string">        name: "</span>Home<span class="string">",</span></span><br><span class="line"><span class="string">        data()&#123;</span></span><br><span class="line"><span class="string">          return &#123;</span></span><br><span class="line"><span class="string">              url: "</span>/user<span class="string">",</span></span><br><span class="line"><span class="string">          &#125;</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        methods:&#123;</span></span><br><span class="line"><span class="string">          jump()&#123;</span></span><br><span class="line"><span class="string">              // 开发中可以先进行权限，登录之类的判断，然后再进行跳转</span></span><br><span class="line"><span class="string">                // this.$router.back(); // 返回上一页，本质上就是 location.back()</span></span><br><span class="line"><span class="string">                // this.$router.go(-1); // 返回上一页，本质上就是 location.go()</span></span><br><span class="line"><span class="string">                // this.$router.forward(); // 跳转到下一页，本质上就是 location.forward()</span></span><br><span class="line"><span class="string">                this.$router.push("</span>/user<span class="string">"); // 跳转到站内的制定地址页面中，本质上就是 location.href</span></span><br><span class="line"><span class="string">                // 注意,this.$router.push() 不能跳转到其他网站。如果真的要跳转外站，则使用location.href="</span>站外地址，记得加上http:<span class="comment">//协议"</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;style scoped&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;/</span>style&gt;</span><br></pre></td></tr></table></figure>

<h4 id="参数传递"><a href="#参数传递" class="headerlink" title="参数传递"></a>参数传递</h4><p><code>vue-router</code>提供了<code>this.$route</code>，可以让我们接收来自其他页面的附带参数。参数有2种：</p>
<ol>
<li><p>查询字符串(<code>query string</code>)，就是地址栏上面<code>?</code>号后面的参数，</p>
<p>例如：<code>http://localhost:8008/user?name=xiaoming&amp;pwd=123</code>，这里<code>name=xiaoming&amp;pwd=123</code>就是查询字符串参数。</p>
</li>
<li><p>路由参数(<code>router params</code>)，就是地址栏上面路由路径的一部分，</p>
<p>例如：<code>http://localhost:8080/user/300/xiaoming</code>，此时，300属于路由路径的一部分，这个300就是路由参数.，当然，xiaoming,或者user也可以理解是路由参数，就是看我们的页面中是否需要接收而已。</p>
</li>
</ol>
<h5 id="获取查询字符串"><a href="#获取查询字符串" class="headerlink" title="获取查询字符串"></a>获取查询字符串</h5><p>必须先有一个页面跳转发送参数。例如，在Home组件中跳转到User组件中，需要传递name和pwd查询字符串。</p>
<p>Home.vue代码：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      首页页面组件</span><br><span class="line">&lt;!--      <span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/user"</span>&gt;</span>个人中心<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line">      &amp;lt;!&amp;ndash; router-link标签，本质上就是a标签，只是由vue-router进行加工处理</span><br><span class="line">      可以显示局部页面刷新，不会重新加载内容，进行ajax跳转</span><br><span class="line">       &amp;ndash;&amp;gt;</span><br><span class="line">      &lt;router-link to=<span class="string">"/user"</span>&gt;个人中心&lt;<span class="regexp">/router-link&gt;</span></span><br><span class="line"><span class="regexp">      &lt;router-link :to="url"&gt;个人中心&lt;/</span>router-link&gt;</span><br><span class="line">      &lt;router-link :to=<span class="string">"&#123;name:'User'&#125;"</span>&gt;个人中心&lt;<span class="regexp">/router-link&gt;</span></span><br><span class="line"><span class="regexp">      &lt;button @click="jump"&gt;个人中心&lt;/</span>button&gt;--&gt;</span><br><span class="line"></span><br><span class="line">      &lt;router-link :to=<span class="string">"`/user?name=$&#123;name&#125;&amp;pwd=$&#123;pwd&#125;`"</span>&gt;查询字符串参数&lt;<span class="regexp">/router-link&gt;</span></span><br><span class="line"><span class="regexp">      &lt;router-link :to="'/u</span>ser?name=<span class="string">'+name+'</span>&amp;pwd=<span class="string">'+pwd"&gt;查询字符串参数&lt;/router-link&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;/template&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;script&gt;</span></span><br><span class="line"><span class="string">    export default &#123;</span></span><br><span class="line"><span class="string">        name: "Home",</span></span><br><span class="line"><span class="string">        data()&#123;</span></span><br><span class="line"><span class="string">          return &#123;</span></span><br><span class="line"><span class="string">              name: "xiaoming",</span></span><br><span class="line"><span class="string">              pwd: "123",</span></span><br><span class="line"><span class="string">              url: "/user",</span></span><br><span class="line"><span class="string">          &#125;</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        methods:&#123;</span></span><br><span class="line"><span class="string">          jump()&#123;</span></span><br><span class="line"><span class="string">              // 开发中可以先进行权限，登录之类的判断，然后再进行跳转</span></span><br><span class="line"><span class="string">                // this.$router.back(); // 返回上一页，本质上就是 location.back()</span></span><br><span class="line"><span class="string">                // this.$router.go(-1); // 返回上一页，本质上就是 location.go()</span></span><br><span class="line"><span class="string">                // this.$router.forward(); // 跳转到下一页，本质上就是 location.forward()</span></span><br><span class="line"><span class="string">                this.$router.push("/user"); // 跳转到站内的制定地址页面中，本质上就是 location.href</span></span><br><span class="line"><span class="string">                // 注意,this.$router.push 不能跳转到其他网站。如果真的要跳转外站，则使用location.href="站外地址，记得加上http://协议"</span></span><br><span class="line"><span class="string">          &#125;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;style scoped&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;/style&gt;</span></span><br></pre></td></tr></table></figure>

<p>可以下一个页面中，这里代表的就是User组件，接收来自Home组件的参数。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      用户中心页面组件</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">        name: <span class="string">"User"</span>,</span><br><span class="line">        created() &#123;</span><br><span class="line">            <span class="comment">// 接收地址栏上面的参数</span></span><br><span class="line">            <span class="comment">// this.$route是vue-router提供的一个用于接收地址参数的对象。</span></span><br><span class="line">            <span class="comment">// 经过main.js里面注册router对象以后，</span></span><br><span class="line">            <span class="comment">// 将来在所有的子组件中，可以通过this.$route来获取参数或者通过this.$router跳转页面</span></span><br><span class="line">            <span class="comment">// 查询字符串参数</span></span><br><span class="line">            <span class="comment">// query是this.$route里面的一个数组，this.$route会自动收集地址栏上所有的参数保存到query里面</span></span><br><span class="line">            <span class="comment">// let name = this.$route.query.name;</span></span><br><span class="line">            <span class="comment">// let pwd = this.$route.query.pwd;</span></span><br><span class="line">            <span class="comment">// console.log(`name=$&#123;name&#125;&amp;pwd=$&#123;pwd&#125;`);  // ``里面，$&#123;&#125;圈住的内容会被js当成变量来解析</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;style scoped&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;/</span>style&gt;</span><br></pre></td></tr></table></figure>

<h4 id="获取路由参数"><a href="#获取路由参数" class="headerlink" title="获取路由参数"></a>获取路由参数</h4><p>例如：我们用户的界面都是一样的，但是每一个用户来到自己的页面中，显示的内容肯定都是不一样的，此时，我们需要使用不同的路径来区分不同的用户。这时候，可以在路由路径中使用路由参数表示不同用户的id</p>
<p>例如：我们就需要设置一个route/index.js中路由信息里面，哪一段路由属于路由参数。</p>
<p>src/routes/index.js设置路由参数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">// <span class="number">1.</span> 引入vue和vue-router组件核心对象，并在vue中通过use注册vue-router组件</span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">"vue"</span>;</span><br><span class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">"vue-router"</span>;</span><br><span class="line"></span><br><span class="line">Vue.use(Router); // Router是类</span><br><span class="line">// <span class="number">2.</span> 暴露vue-router对象，并在vue-router里面编写路由，提供给main.js调用</span><br><span class="line"></span><br><span class="line">// 导入组件</span><br><span class="line">// <span class="keyword">import</span> 组件名 <span class="keyword">from</span> <span class="string">"../components/组件名"</span></span><br><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">"../components/Home"</span>;</span><br><span class="line"><span class="keyword">import</span> User <span class="keyword">from</span> <span class="string">"../components/User"</span>;</span><br><span class="line"></span><br><span class="line">export default new Router(&#123;</span><br><span class="line">  mode:<span class="string">"history"</span>,  // 路由地址的显示模式： 默认hash，表示地址栏上面出现<span class="comment">#</span></span><br><span class="line">  routes:[</span><br><span class="line">    // &#123;</span><br><span class="line">    //   name:<span class="string">"路由名称[对应组件的name值，将来用于跳转页面]"</span>,</span><br><span class="line">    //   path: <span class="string">"访问url路径"</span>,</span><br><span class="line">    //   component: 组件名</span><br><span class="line">    // &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      name:<span class="string">"Home"</span>,</span><br><span class="line">      path: <span class="string">"/"</span>,</span><br><span class="line">      component: Home</span><br><span class="line">    &#125;,&#123;</span><br><span class="line">      name:<span class="string">"User"</span>,</span><br><span class="line">      path: <span class="string">"/user/:id/img-:img_id"</span>,</span><br><span class="line">      component: User</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// vue-router除了可以进行组件和url地址的绑定以外，还可以</span><br><span class="line">// 进行不同组件的页面跳转，</span><br></pre></td></tr></table></figure>

<p>然后我们就是在Home中如果需要转到User里面。</p>
<p>Home.vue代码：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      首页页面组件</span><br><span class="line">&lt;!--      <span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/user"</span>&gt;</span>个人中心<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line">      &amp;lt;!&amp;ndash; router-link标签，本质上就是a标签，只是由vue-router进行加工处理</span><br><span class="line">      可以显示局部页面刷新，不会重新加载内容，进行ajax跳转</span><br><span class="line">       &amp;ndash;&amp;gt;</span><br><span class="line">      &lt;router-link to=<span class="string">"/user"</span>&gt;个人中心&lt;<span class="regexp">/router-link&gt;</span></span><br><span class="line"><span class="regexp">      &lt;router-link :to="url"&gt;个人中心&lt;/</span>router-link&gt;</span><br><span class="line">      &lt;router-link :to=<span class="string">"&#123;name:'User'&#125;"</span>&gt;个人中心&lt;<span class="regexp">/router-link&gt;</span></span><br><span class="line"><span class="regexp">      &lt;button @click="jump"&gt;个人中心&lt;/</span>button&gt;--&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--      <span class="xml"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">"`/user?name=$&#123;name&#125;&amp;pwd=$&#123;pwd&#125;`"</span>&gt;</span>查询字符串参数<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span>--&gt;</span><br><span class="line">&lt;!--      <span class="xml"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">"'/user?name='+name+'&amp;pwd='+pwd"</span>&gt;</span>查询字符串参数<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span>--&gt;</span><br><span class="line">      &lt;router-link to=<span class="string">"/user/100/img-10086"</span>&gt;路由参数&lt;<span class="regexp">/router-link&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">    export default &#123;</span></span><br><span class="line"><span class="regexp">        name: "Home",</span></span><br><span class="line"><span class="regexp">        data()&#123;</span></span><br><span class="line"><span class="regexp">          return &#123;</span></span><br><span class="line"><span class="regexp">              name: "xiaoming",</span></span><br><span class="line"><span class="regexp">              pwd: "123",</span></span><br><span class="line"><span class="regexp">              url: "/u</span>ser<span class="string">",</span></span><br><span class="line"><span class="string">          &#125;</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        methods:&#123;</span></span><br><span class="line"><span class="string">          jump()&#123;</span></span><br><span class="line"><span class="string">              // 开发中可以先进行权限，登录之类的判断，然后再进行跳转</span></span><br><span class="line"><span class="string">                // this.$router.back(); // 返回上一页，本质上就是 location.back()</span></span><br><span class="line"><span class="string">                // this.$router.go(-1); // 返回上一页，本质上就是 location.go()</span></span><br><span class="line"><span class="string">                // this.$router.forward(); // 跳转到下一页，本质上就是 location.forward()</span></span><br><span class="line"><span class="string">                this.$router.push("</span>/user<span class="string">"); // 跳转到站内的制定地址页面中，本质上就是 location.href</span></span><br><span class="line"><span class="string">                // 注意,this.$router.push 不能跳转到其他网站。如果真的要跳转外站，则使用location.href="</span>站外地址，记得加上http:<span class="comment">//协议"</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;style scoped&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;/</span>style&gt;</span><br></pre></td></tr></table></figure>

<p>User.vue，组件中可以通过<code>this.$route.params</code>接收路由参数。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      用户中心页面组件</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">        name: <span class="string">"User"</span>,</span><br><span class="line">        created() &#123;</span><br><span class="line">            <span class="comment">// 接收地址栏上面的参数</span></span><br><span class="line">            <span class="comment">// this.$route是vue-router提供的一个用于接收地址参数的对象。</span></span><br><span class="line">            <span class="comment">// 经过main.js里面注册router对象以后，</span></span><br><span class="line">            <span class="comment">// 将来在所有的子组件中，可以通过this.$route来获取参数或者通过this.$router跳转页面</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 查询字符串参数</span></span><br><span class="line">            <span class="comment">// query是this.$route里面的一个数组，this.$route会自动收集地址栏上所有的参数保存到query里面</span></span><br><span class="line">            <span class="comment">// let name = this.$route.query.name;</span></span><br><span class="line">            <span class="comment">// let pwd = this.$route.query.pwd;</span></span><br><span class="line">            <span class="comment">// console.log(`name=$&#123;name&#125;&amp;pwd=$&#123;pwd&#125;`);  // ``里面，$&#123;&#125;圈住的内容会被js当成变量来解析</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 路由参数</span></span><br><span class="line">            <span class="comment">// params是this.$route里面的一个数组，this.$route会自动收集路由列表中已经标记为路由参数所有内容保存到params中</span></span><br><span class="line">            <span class="keyword">let</span> id = <span class="keyword">this</span>.$route.params.id;</span><br><span class="line">            <span class="built_in">console</span>.log(id);</span><br><span class="line">            <span class="keyword">let</span> img_id = <span class="keyword">this</span>.$route.params.img_id;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">`img_id = <span class="subst">$&#123;img_id&#125;</span>`</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;style scoped&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;/</span>style&gt;</span><br></pre></td></tr></table></figure>

<h1 id="ElementUI"><a href="#ElementUI" class="headerlink" title="ElementUI"></a>ElementUI</h1><p>对于前端页面布局，我们可以使用一些开源的UI框架来配合开发，常用的UI框: bootstap，H-ui框架，lay-UI框架，Amaze UI，zui框架，ElementUI.</p>
<p>Vue开发前端项目中，比较常用的就是ElementUI了。</p>
<p>ElementUI是饿了么团队开发的一个UI组件框架，这个框架提前帮我们提供了很多已经写好的通用模块，我们可以在Vue项目中引入来使用，这个框架的使用类似于我们前面学习的bootstrap框架，也就是说，我们完全可以把官方文档中的组件代码拿来就用，有定制性的内容，可以直接通过样式进行覆盖修改就可以了。</p>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/1552501300174.png" alt="1552501300174"></p>
<p>中文官网：<a href="http://element-cn.eleme.io/#/zh-CN" target="_blank" rel="noopener">http://element-cn.eleme.io/#/zh-CN</a></p>
<p>文档快速入门：<a href="http://element-cn.eleme.io/#/zh-CN/component/quickstart" target="_blank" rel="noopener">http://element-cn.eleme.io/#/zh-CN/component/quickstart</a></p>
<h2 id="快速安装ElementUI"><a href="#快速安装ElementUI" class="headerlink" title="快速安装ElementUI"></a>快速安装ElementUI</h2><p>项目根目录执行以下命令:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i element-ui -S</span><br></pre></td></tr></table></figure>

<p>上面的命令等同于 <code>npm install element-ui --save</code></p>
<p>执行命令效果：</p>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/1556417812874.png" alt="1556417812874"></p>
<h2 id="配置ElementUI到项目中"><a href="#配置ElementUI到项目中" class="headerlink" title="配置ElementUI到项目中"></a>配置ElementUI到项目中</h2><p>在main.js中导入ElementUI，并调用。代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">// elementUI 导入</span><br><span class="line"><span class="keyword">import</span> ElementUI <span class="keyword">from</span> <span class="string">'element-ui'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'element-ui/lib/theme-chalk/index.css'</span>;</span><br><span class="line">// 调用插件</span><br><span class="line">Vue.use(ElementUI);</span><br></pre></td></tr></table></figure>

<p>成功引入了ElementUI以后，接下来我们就可以开始进入前端页面开发，首先是首页。</p>
<h1 id="首页"><a href="#首页" class="headerlink" title="首页"></a>首页</h1><p>首页采用了上下页面布局，首页是导航栏、轮播图。。。脚部等几个小模块。所以我们可以把首页作为一个组件进行开发，然后把首页的这些小模块作为单独的组件来进行开发。</p>
<h2 id="创建首页组件"><a href="#创建首页组件" class="headerlink" title="创建首页组件"></a>创建首页组件</h2><p>在src/components目录下创建文件 Home.vue</p>
<p>代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"home"</span>&gt;</span></span><br><span class="line">    首页</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">  name:<span class="string">"Home"</span>,</span></span><br><span class="line">  data()&#123;</span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="创建首页对应的路由"><a href="#创建首页对应的路由" class="headerlink" title="创建首页对应的路由"></a>创建首页对应的路由</h3><p>在router/index.js中引入Home组件，并设置Home组件作为首页路由。</p>
<p>代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">"vue"</span></span><br><span class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">"vue-router"</span></span><br><span class="line"></span><br><span class="line">// 后面这里引入可以被用户访问的页面组件</span><br><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">"../components/Home"</span></span><br><span class="line"></span><br><span class="line">Vue.use(Router);</span><br><span class="line"></span><br><span class="line">export default new Router(&#123;</span><br><span class="line">  // 路由跳转模式，注意使用 history</span><br><span class="line">  mode: <span class="string">"history"</span>,</span><br><span class="line"></span><br><span class="line">  // 路由规则</span><br><span class="line">  routes:[</span><br><span class="line">    &#123;</span><br><span class="line">      // name:<span class="string">"路由别名"</span>,</span><br><span class="line">      name:<span class="string">"Home"</span>,</span><br><span class="line">      // path: <span class="string">"路由地址"</span>,</span><br><span class="line">      path: <span class="string">"/"</span>,</span><br><span class="line">      // component: 组件类名,</span><br><span class="line">      component: Home,</span><br><span class="line">    &#125;,</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端框架</category>
      </categories>
      <tags>
        <tag>vue框架</tag>
      </tags>
  </entry>
  <entry>
    <title>[Vue对象的属性功能]</title>
    <url>/2020/02/23/Vue%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%B1%9E%E6%80%A7%E5%8A%9F%E8%83%BD/</url>
    <content><![CDATA[<h1 id="Vue对象提供的属性功能"><a href="#Vue对象提供的属性功能" class="headerlink" title="Vue对象提供的属性功能"></a>Vue对象提供的属性功能</h1><h2 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h2><p>过滤器，就是vue允许开发者自定义的文本格式化函数，可以使用在两个地方：输出内容和操作数据中。</p>
<p>定义过滤器的方式有两种。</p>
<h3 id="使用Vue-filter-进行全局定义"><a href="#使用Vue-filter-进行全局定义" class="headerlink" title="使用Vue.filter()进行全局定义"></a>使用Vue.filter()进行全局定义</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Vue.filter(<span class="string">"RMB1"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">v</span>)</span>&#123;</span><br><span class="line">  	<span class="comment">//就是来格式化(处理)v这个数据的</span></span><br><span class="line">  	<span class="keyword">if</span>(v==<span class="number">0</span>)&#123;</span><br><span class="line">    		<span class="keyword">return</span> v</span><br><span class="line">  	&#125;</span><br><span class="line"></span><br><span class="line">  	<span class="keyword">return</span> v+<span class="string">"元"</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="在vue对象中通过filters属性来定义"><a href="#在vue对象中通过filters属性来定义" class="headerlink" title="在vue对象中通过filters属性来定义"></a>在vue对象中通过filters属性来定义</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el:<span class="string">"#app"</span>,</span><br><span class="line">  data:&#123;&#125;,</span><br><span class="line">  filters:&#123;</span><br><span class="line">    RMB2:<span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(value==<span class="string">''</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      	<span class="keyword">return</span> <span class="string">'¥ '</span>+value;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="计算和侦听属性"><a href="#计算和侦听属性" class="headerlink" title="计算和侦听属性"></a>计算和侦听属性</h2><h3 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h3><p>我们之前学习过字符串反转，如果直接把反转的代码写在元素中，则会使得其他同事在开发时时不易发现数据被调整了，所以vue提供了一个计算属性(computed)，可以让我们把调整data数据的代码存在在该属性中。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/vue.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">		<span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el:<span class="string">"#app"</span>,</span></span><br><span class="line">            data:&#123;</span><br><span class="line"><span class="actionscript">                str1: <span class="string">"abcdefgh"</span></span></span><br><span class="line">            &#125;,</span><br><span class="line"><span class="actionscript">            computed:&#123;   <span class="comment">//计算属性：里面的函数都必须有返回值</span></span></span><br><span class="line"><span class="actionscript">                strRevs: <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">var</span> ret = <span class="keyword">this</span>.str1.split(<span class="string">""</span>).reverse().join(<span class="string">""</span>);</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">return</span> ret</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; str1 &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; strRevs &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="监听属性"><a href="#监听属性" class="headerlink" title="监听属性"></a>监听属性</h3><p>侦听属性，可以帮助我们侦听data某个数据的变化，从而做相应的自定义操作。</p>
<p>侦听属性是一个对象，它的键是要监听的对象或者变量，值一般是函数，当侦听的data数据发生变化时，会自定执行的对应函数，这个函数在被调用时，vue会传入两个形参，第一个是变化前的数据值，第二个是变化后的数据值。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/vue.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="actionscript">         <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el:<span class="string">"#app"</span>,</span></span><br><span class="line">            data:&#123;</span><br><span class="line">                num:20</span><br><span class="line">            &#125;,</span><br><span class="line">            watch:&#123;</span><br><span class="line"><span class="actionscript">                num:<span class="function"><span class="keyword">function</span><span class="params">(newval,oldval)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">                    <span class="comment">//num发生变化的时候，要执行的代码</span></span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(<span class="string">"num已经发生了变化！"</span>);</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; num &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"num++"</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="vue对象的生命周期"><a href="#vue对象的生命周期" class="headerlink" title="vue对象的生命周期"></a>vue对象的生命周期</h2><p>每个Vue对象在创建时都要经过一系列的初始化过程。在这个过程中Vue.js会自动运行一些叫做生命周期的的钩子函数，我们可以使用这些函数，在对象创建的不同阶段加上我们需要的代码，实现特定的功能。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">    &lt;script src="js/</span>vue.min.js<span class="string">"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">    &lt;script&gt;</span></span><br><span class="line"><span class="string">    window.onload = function()&#123;</span></span><br><span class="line"><span class="string">        var vm = new Vue(&#123;</span></span><br><span class="line">            el:"#app",</span><br><span class="line">            data:&#123;</span><br><span class="line">                num:<span class="number">0</span></span><br><span class="line">            &#125;,</span><br><span class="line">            beforeCreate:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"beforeCreate,vm对象尚未创建,num="</span>+ <span class="keyword">this</span>.num);  <span class="comment">//undefined</span></span><br><span class="line">                <span class="keyword">this</span>.name=<span class="number">10</span>; <span class="comment">// 此时没有this对象呢，所以设置的name无效，被在创建对象的时候被覆盖为0</span></span><br><span class="line">            &#125;,</span><br><span class="line">            created:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"created,vm对象创建完成,设置好了要控制的元素范围,num="</span>+<span class="keyword">this</span>.num );  <span class="comment">// 0</span></span><br><span class="line">                <span class="keyword">this</span>.num = <span class="number">20</span>;</span><br><span class="line">            &#125;,</span><br><span class="line">            beforeMount:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log( <span class="keyword">this</span>.$el.innerHTML ); <span class="comment">// &lt;p&gt;&#123;&#123;num&#125;&#125;&lt;/p&gt;</span></span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"beforeMount,vm对象尚未把data数据显示到页面中,num="</span>+<span class="keyword">this</span>.num ); <span class="comment">// 20</span></span><br><span class="line">                <span class="keyword">this</span>.num = <span class="number">30</span>;</span><br><span class="line">            &#125;,</span><br><span class="line">            mounted:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log( <span class="keyword">this</span>.$el.innerHTML ); <span class="comment">// &lt;p&gt;30&lt;/p&gt;</span></span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"mounted,vm对象已经把data数据显示到页面中,num="</span>+<span class="keyword">this</span>.num); <span class="comment">// 30</span></span><br><span class="line">            &#125;,</span><br><span class="line">            beforeUpdate:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="comment">// this.$el 就是我们上面的el属性了，$el表示当前vue.js所控制的元素#app</span></span><br><span class="line">                <span class="built_in">console</span>.log( <span class="keyword">this</span>.$el.innerHTML );  <span class="comment">// &lt;p&gt;30&lt;/p&gt;</span></span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"beforeUpdate,vm对象尚未把更新后的data数据显示到页面中,num="</span>+<span class="keyword">this</span>.num); <span class="comment">// beforeUpdate----31</span></span><br><span class="line">                </span><br><span class="line">            &#125;,</span><br><span class="line">            updated:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log( <span class="keyword">this</span>.$el.innerHTML ); <span class="comment">// &lt;p&gt;31&lt;/p&gt;</span></span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"updated,vm对象已经把过呢更新后的data数据显示到页面中,num="</span> + <span class="keyword">this</span>.num ); <span class="comment">// updated----31</span></span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">        &lt;p&gt;&#123;&#123;num&#125;&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">        &lt;button @click="num++"&gt;按钮&lt;/</span>button&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure>

<p>总结：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在vue使用的过程中，如果要初始化操作，把初始化操作的代码放在 mounted 中执行。</span><br><span class="line">mounted阶段就是在vm对象已经把data数据实现到页面以后。一般页面初始化使用。例如，用户访问页面加载成功以后，就要执行的ajax请求。</span><br><span class="line"></span><br><span class="line">另一个就是created，这个阶段就是在 vue对象创建以后，把ajax请求后端数据的代码放进 created</span><br></pre></td></tr></table></figure>

<h2 id="阻止事件冒泡和刷新页面"><a href="#阻止事件冒泡和刷新页面" class="headerlink" title="阻止事件冒泡和刷新页面"></a>阻止事件冒泡和刷新页面</h2><p>事件冒泡：指代js中子元素的事件触发以后，会导致父级元素的同类事件一并被触发到。</p>
<p>事件冒泡有好处，也有坏处。</p>
<p>好处：如果能正确利用这种现象，可以实现事件委托，提升特效的性能</p>
<p>坏处：如果没有正确使用，则会导致不必要的bug出现。</p>
<p>使用.stop和.prevent</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.box1</span>&#123;</span></span><br><span class="line">            width: 200px;</span><br><span class="line">            height: 200px;</span><br><span class="line"><span class="css">            <span class="selector-tag">background</span>: <span class="selector-id">#ccc</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.box2</span>&#123;</span></span><br><span class="line">            width: 100px;</span><br><span class="line">            height: 100px;</span><br><span class="line">            background: pink;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/vue.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el:<span class="string">"#app"</span>,</span></span><br><span class="line">            data:&#123;&#125;</span><br><span class="line">        &#125;)        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box1"</span> @<span class="attr">click</span>=<span class="string">"alert('box1')"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box2"</span> @<span class="attr">click.stop.prevent</span>=<span class="string">"alert('box2')"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>   <span class="comment">&lt;!-- @click.stop来阻止事件冒泡 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"#"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交02"</span> @<span class="attr">click.prevent</span>=<span class="string">""</span>&gt;</span> <span class="comment">&lt;!-- @click.prevent来阻止表单提交 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="综合案例-todolist"><a href="#综合案例-todolist" class="headerlink" title="综合案例-todolist"></a>综合案例-todolist</h2><p>我的计划列表</p>
<p>html代码:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>todolist<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css">		<span class="selector-class">.list_con</span>&#123;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">width</span><span class="selector-pseudo">:600px</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">margin</span><span class="selector-pseudo">:50px</span> <span class="selector-tag">auto</span> 0;</span></span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="selector-class">.inputtxt</span>&#123;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">width</span><span class="selector-pseudo">:550px</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">height</span><span class="selector-pseudo">:30px</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">border</span><span class="selector-pseudo">:1px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ccc</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">padding</span><span class="selector-pseudo">:0px</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">text-indent</span><span class="selector-pseudo">:10px</span>;</span></span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="selector-class">.inputbtn</span>&#123;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">width</span><span class="selector-pseudo">:40px</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">height</span><span class="selector-pseudo">:32px</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">padding</span><span class="selector-pseudo">:0px</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">border</span><span class="selector-pseudo">:1px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ccc</span>;</span></span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="selector-class">.list</span>&#123;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">margin</span><span class="selector-pseudo">:0</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">padding</span><span class="selector-pseudo">:0</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">list-style</span><span class="selector-pseudo">:none</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">margin-top</span><span class="selector-pseudo">:20px</span>;</span></span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="selector-class">.list</span> <span class="selector-tag">li</span>&#123;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">height</span><span class="selector-pseudo">:40px</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">line-height</span><span class="selector-pseudo">:40px</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">border-bottom</span><span class="selector-pseudo">:1px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ccc</span>;</span></span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line"><span class="css">		<span class="selector-class">.list</span> <span class="selector-tag">li</span> <span class="selector-tag">span</span>&#123;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">float</span><span class="selector-pseudo">:left</span>;</span></span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line"><span class="css">		<span class="selector-class">.list</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span>&#123;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">float</span><span class="selector-pseudo">:right</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">text-decoration</span><span class="selector-pseudo">:none</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">margin</span><span class="selector-pseudo">:0</span> 10<span class="selector-tag">px</span>;</span></span><br><span class="line">		&#125;</span><br><span class="line">	<span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list_con"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">h2</span>&gt;</span>To do list<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">"txt1"</span> <span class="attr">class</span>=<span class="string">"inputtxt"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">"增加"</span> <span class="attr">id</span>=<span class="string">"btn1"</span> <span class="attr">class</span>=<span class="string">"inputbtn"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"list"</span> <span class="attr">class</span>=<span class="string">"list"</span>&gt;</span></span><br><span class="line">			<span class="comment">&lt;!-- javascript:; # 阻止a标签跳转 --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">span</span>&gt;</span>学习html<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">class</span>=<span class="string">"up"</span>&gt;</span> ↑ <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">class</span>=<span class="string">"down"</span>&gt;</span> ↓ <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">class</span>=<span class="string">"del"</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>学习css<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">class</span>=<span class="string">"up"</span>&gt;</span> ↑ <span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">class</span>=<span class="string">"down"</span>&gt;</span> ↓ <span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">class</span>=<span class="string">"del"</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>学习javascript<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">class</span>=<span class="string">"up"</span>&gt;</span> ↑ <span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">class</span>=<span class="string">"down"</span>&gt;</span> ↓ <span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">class</span>=<span class="string">"del"</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>特效实现效果：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>todolist<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css">		<span class="selector-class">.list_con</span>&#123;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">width</span><span class="selector-pseudo">:600px</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">margin</span><span class="selector-pseudo">:50px</span> <span class="selector-tag">auto</span> 0;</span></span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="selector-class">.inputtxt</span>&#123;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">width</span><span class="selector-pseudo">:550px</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">height</span><span class="selector-pseudo">:30px</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">border</span><span class="selector-pseudo">:1px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ccc</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">padding</span><span class="selector-pseudo">:0px</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">text-indent</span><span class="selector-pseudo">:10px</span>;</span></span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="selector-class">.inputbtn</span>&#123;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">width</span><span class="selector-pseudo">:40px</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">height</span><span class="selector-pseudo">:32px</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">padding</span><span class="selector-pseudo">:0px</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">border</span><span class="selector-pseudo">:1px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ccc</span>;</span></span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="selector-class">.list</span>&#123;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">margin</span><span class="selector-pseudo">:0</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">padding</span><span class="selector-pseudo">:0</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">list-style</span><span class="selector-pseudo">:none</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">margin-top</span><span class="selector-pseudo">:20px</span>;</span></span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="selector-class">.list</span> <span class="selector-tag">li</span>&#123;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">height</span><span class="selector-pseudo">:40px</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">line-height</span><span class="selector-pseudo">:40px</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">border-bottom</span><span class="selector-pseudo">:1px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ccc</span>;</span></span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line"><span class="css">		<span class="selector-class">.list</span> <span class="selector-tag">li</span> <span class="selector-tag">span</span>&#123;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">float</span><span class="selector-pseudo">:left</span>;</span></span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line"><span class="css">		<span class="selector-class">.list</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span>&#123;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">float</span><span class="selector-pseudo">:right</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">text-decoration</span><span class="selector-pseudo">:none</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">margin</span><span class="selector-pseudo">:0</span> 10<span class="selector-tag">px</span>;</span></span><br><span class="line">		&#125;</span><br><span class="line">	<span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"todolist"</span> <span class="attr">class</span>=<span class="string">"list_con"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">h2</span>&gt;</span>To do list<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"message"</span> <span class="attr">class</span>=<span class="string">"inputtxt"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> @<span class="attr">click</span>=<span class="string">"addItem"</span> <span class="attr">value</span>=<span class="string">"增加"</span> <span class="attr">class</span>=<span class="string">"inputbtn"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"list"</span> <span class="attr">class</span>=<span class="string">"list"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"item,key in dolist"</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">a</span> @<span class="attr">click</span>=<span class="string">"upItem(key)"</span> <span class="attr">class</span>=<span class="string">"up"</span> &gt;</span> ↑ <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">a</span> @<span class="attr">click</span>=<span class="string">"downItem(key)"</span> <span class="attr">class</span>=<span class="string">"down"</span>&gt;</span> ↓ <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">a</span> @<span class="attr">click</span>=<span class="string">"delItem(key)"</span> <span class="attr">class</span>=<span class="string">"del"</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 计划列表代码</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el:<span class="string">"#todolist"</span>,</span></span><br><span class="line">        data:&#123;</span><br><span class="line"><span class="actionscript">            message:<span class="string">""</span>,</span></span><br><span class="line">            dolist:[</span><br><span class="line"><span class="actionscript">                <span class="string">"学习html"</span>,</span></span><br><span class="line"><span class="actionscript">                <span class="string">"学习css"</span>,</span></span><br><span class="line"><span class="actionscript">                <span class="string">"学习javascript"</span>,</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">            addItem()&#123;</span><br><span class="line"><span class="actionscript">                <span class="keyword">if</span>(<span class="keyword">this</span>.messsage==<span class="string">""</span>)&#123;</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.dolist.push(<span class="keyword">this</span>.message);</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.message = <span class="string">""</span></span></span><br><span class="line">            &#125;,</span><br><span class="line">            delItem(key)&#123;</span><br><span class="line"><span class="actionscript">                <span class="comment">// 删除和替换</span></span></span><br><span class="line"><span class="actionscript">                <span class="comment">// 参数1: 开始下表</span></span></span><br><span class="line"><span class="actionscript">                <span class="comment">// 参数2: 元素长度，如果不填默认删除到最后</span></span></span><br><span class="line"><span class="actionscript">                <span class="comment">// 参数3: 表示使用当前参数替换已经删除内容的位置</span></span></span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.dolist.splice(key, <span class="number">1</span>);</span></span><br><span class="line">            &#125;,</span><br><span class="line">            upItem(key)&#123;</span><br><span class="line">                if(key==0)&#123;</span><br><span class="line"><span class="actionscript">                    <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line">                &#125;</span><br><span class="line"><span class="actionscript">                <span class="comment">// 向上移动</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">let</span> result = <span class="keyword">this</span>.dolist.splice(key,<span class="number">1</span>);</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.dolist.splice(key<span class="number">-1</span>,<span class="number">0</span>,result[<span class="number">0</span>]);</span></span><br><span class="line">            &#125;,</span><br><span class="line">            downItem(key)&#123;</span><br><span class="line"><span class="actionscript">                <span class="comment">// 向下移动</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">let</span> result = <span class="keyword">this</span>.dolist.splice(key, <span class="number">1</span>);</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(result);</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.dolist.splice(key+<span class="number">1</span>,<span class="number">0</span>,result[<span class="number">0</span>]);</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端框架</category>
      </categories>
      <tags>
        <tag>vue框架</tag>
      </tags>
  </entry>
  <entry>
    <title>[Vue快速入门使用]</title>
    <url>/2020/02/22/Vue%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="vue-js的快速入门使用"><a href="#vue-js的快速入门使用" class="headerlink" title="vue.js的快速入门使用"></a>vue.js的快速入门使用</h1><h2 id="vue-js库的下载"><a href="#vue-js库的下载" class="headerlink" title="vue.js库的下载"></a>vue.js库的下载</h2><p>vue.js是目前前端web开发最流行的工具库，由尤雨溪在2014年2月发布的。</p>
<p>另外几个常见的工具库：react.js /angular.js/jQuery</p>
<p>官方网站：</p>
<p> 中文：<a href="https://cn.vuejs.org/" target="_blank" rel="noopener">https://cn.vuejs.org/</a></p>
<p> 英文：<a href="https://cn.vuejs.org/" target="_blank" rel="noopener">https://vuejs.org/</a></p>
<p>官方文档：<a href="https://cn.vuejs.org/v2/guide/" target="_blank" rel="noopener">https://cn.vuejs.org/v2/guide/</a></p>
<p>vue.js目前有1.x、2.x和3.x 版本，我们学习2.x版本的。</p>
<h2 id="vue-js库的基本使用"><a href="#vue-js库的基本使用" class="headerlink" title="vue.js库的基本使用"></a>vue.js库的基本使用</h2><p>在github下载：</p>
<p>在官网下载地址： <a href="https://cn.vuejs.org/v2/guide/installation.html" target="_blank" rel="noopener">https://cn.vuejs.org/v2/guide/installation.html</a></p>
<p>vue的引入类似于jQuery，开发中可以使用开发版本vue-x.x.x.js，产品上线要换成vue.min.js。</p>
<p>下图是github网站下载的vue.js目录</p>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/1544363032042.png" alt="1544363032042"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="actionscript">      	<span class="comment">// vue.js的代码开始于一个Vue对象。所以每次操作数据都要声明Vue对象开始。</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el:<span class="string">'#app'</span>,   <span class="comment">// 设置当前vue对象要控制的标签范围。</span></span></span><br><span class="line"><span class="actionscript">            data:&#123;  <span class="comment">// data是将要展示到HTML标签元素中的数据。</span></span></span><br><span class="line"><span class="actionscript">              message: <span class="string">'hello world!'</span>,</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &#123;&#123; message &#125;&#125; 表示把vue对象里面data属性中的对应数据输出到页面中 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 在双标签中显示数据要通过&#123;&#123;  &#125;&#125;来完成 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>总结：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">1. vue的使用要从创建Vue对象开始</span><br><span class="line">   var vm = new Vue();</span><br><span class="line">   </span><br><span class="line">2. 创建vue对象的时候，需要传递参数，是json对象，json对象对象必须至少有两个属性成员</span><br><span class="line">   var vm = new Vue(&#123;</span><br><span class="line">         el:"#app",</span><br><span class="line">	 	 data: &#123;</span><br><span class="line">             数据变量:"变量值",</span><br><span class="line">             数据变量:"变量值",</span><br><span class="line">             数据变量:"变量值",</span><br><span class="line">     	 &#125;,</span><br><span class="line">   &#125;);</span><br><span class="line">   </span><br><span class="line">   el:设置vue可以操作的html内容范围，值一般就是css的id选择器。</span><br><span class="line">   data: 保存vue.js中要显示到html页面的数据。</span><br><span class="line">   </span><br><span class="line">3. vue.js要控制器的内容范围，必须先通过id来设置。</span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="vue-js的M-V-VM思想"><a href="#vue-js的M-V-VM思想" class="headerlink" title="vue.js的M-V-VM思想"></a>vue.js的M-V-VM思想</h2><p>MVVM 是Model-View-ViewModel 的缩写，它是一种基于前端开发的架构模式。</p>
<p><code>Model</code> 指代的就是vue对象的data属性里面的数据。这里的数据要显示到页面中。</p>
<p><code>View</code> 指代的就是vue中数据要显示的HTML页面，在vue中，也称之为“视图模板” 。</p>
<p><code>ViewModel</code> 指代的是vue.js中我们编写代码时的vm对象了，它是vue.js的核心，负责连接 View 和 Model，保证视图和数据的一致性，所以前面代码中，data里面的数据被显示中p标签中就是vm对象自动完成的。</p>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/201105031754285061.png" alt="201105031754285061"></p>
<p>编写代码，让我们更加清晰的了解MVVM：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/vue.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 创建vm对象</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el: <span class="string">"#app"</span>,</span></span><br><span class="line">            data: &#123;</span><br><span class="line"><span class="actionscript">                name:<span class="string">"大标题"</span>,</span></span><br><span class="line">                age:16,</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 在双标签中显示数据要通过&#123;&#123;  &#125;&#125;来完成 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;age&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 在表单输入框中显示数据要使用v-model来完成，模板语法的时候，我们会详细学习 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"name"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在浏览器中可以在 console.log通过 vm对象可以直接访问el和data属性,甚至可以访问data里面的数据</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">console.log(vm.$el)        # #app  vm对象可以控制的范围</span><br><span class="line">console.log(vm.$data);     #    vm对象要显示到页面中的数据</span><br><span class="line">console.log(vm.$data.message);  # 访问data里面的数据</span><br><span class="line">console.log(vm.message);   # 这个 message就是data里面声明的数据,也可以使用 vm.变量名显示其他数据,message只是举例.</span><br></pre></td></tr></table></figure>

<p>总结：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> 如果要输出data里面的数据作为普通标签的内容，需要使用&#123;&#123;  &#125;&#125;</span><br><span class="line">   用法：</span><br><span class="line">      vue对象的data属性：</span><br><span class="line">          data:&#123;</span><br><span class="line">            name:<span class="string">"小明"</span>,</span><br><span class="line">          &#125;</span><br><span class="line">      标签元素：</span><br><span class="line">      		&lt;h1&gt;&#123;&#123; name &#125;&#125;&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">2. 如果要输出data里面的数据作为表单元素的值，需要使用vue.js提供的元素属性v-model</span></span><br><span class="line"><span class="regexp">   用法：</span></span><br><span class="line"><span class="regexp">      vue对象的data属性：</span></span><br><span class="line"><span class="regexp">          data:&#123;</span></span><br><span class="line"><span class="regexp">            name:"小明",</span></span><br><span class="line"><span class="regexp">          &#125;</span></span><br><span class="line"><span class="regexp">      表单元素：</span></span><br><span class="line"><span class="regexp">      		&lt;input v-model="name"&gt;</span></span><br><span class="line"><span class="regexp">      </span></span><br><span class="line"><span class="regexp">   使用v-model把data里面的数据显示到表单元素以后，一旦用户修改表单元素的值，则data里面对应数据的值也会随之发生改变，甚至，页面中凡是使用了这个数据都会发生变化。</span></span><br></pre></td></tr></table></figure>

<h2 id="显示数据"><a href="#显示数据" class="headerlink" title="显示数据"></a>显示数据</h2> 
1. 在双标签中显示数据要通过{{ }}来完成数据显示，双括号中还可以支持js表达式和符合js语法的代码，例如函数调用.
2. 在表单输入框中显示数据要使用v-model来完成数据显示

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/vue.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">          el:<span class="string">"#app"</span>,</span></span><br><span class="line">          data:&#123;</span><br><span class="line"><span class="actionscript">            str1: <span class="string">"hello"</span>,</span></span><br><span class="line">            num: 20,</span><br><span class="line">            price: 7.1,</span><br><span class="line"><span class="actionscript">            url1: <span class="string">"http://www.baidu.com"</span>,</span></span><br><span class="line"><span class="actionscript">            url2: <span class="string">"http://www.taobao.com"</span></span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)        </span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; str1 &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; str1.split("").reverse().join("") &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>num和num2中比较大的数是：&#123;&#123; num&gt;num2? num:num2 &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"name"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;(price+0.8).toFixed(2)&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>双花括号仅用输出文本内容,如果要输出html代码,则不能使用这个.要使用v-html来输出.</p>
<p>v-html必须在html标签里面作为属性写出来.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;title&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123;url1&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        &#123;&#123;img&#125;&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-html</span>=<span class="string">"img"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el:<span class="string">".app"</span>,</span></span><br><span class="line">            data:&#123;</span><br><span class="line"><span class="actionscript">                title:<span class="string">"我的vue"</span>,</span></span><br><span class="line"><span class="actionscript">                url1:<span class="string">"我的收获地址"</span>,</span></span><br><span class="line"><span class="handlebars"><span class="xml">                img:'<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/shendan.png"</span>&gt;</span>',</span></span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>总结：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">1. 可以在普通标签中使用&#123;&#123;  &#125;&#125; 或者 v-html 来输出data里面的数据</span><br><span class="line">   <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">2. 可以在表单标签中使用v-model属性来输出data里面的数据，同时还可以修改data里面的数据</span><br><span class="line">   <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"username"</span>&gt;</span></span><br></pre></td></tr></table></figure>
 
在输出内容到普通标签的使用{{ }}

v-model或者v-html等vue提供的属性，或者 {{}} 都支持js代码。


<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;str1.split("").reverse().join("")&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 3.2 支持js的运算符--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;num1+3&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 3.3 js还有一种运算符,三元运算符,类似于python里面的三元表达式</span></span><br><span class="line"><span class="comment">        三元运算符的语法:</span></span><br><span class="line"><span class="comment">         判断条件 ? 条件为true : 条件为false的结果</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        python 三元表达式[三目运算符]的语法:</span></span><br><span class="line"><span class="comment">        a if 条件 else b</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>num1和num2之间进行比较,最大值:&#123;&#123; num2&gt;num1?num2:num1 &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>例子：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Vue的快速使用<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;url&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;text&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-html</span>=<span class="string">"text"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">"url"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>num是&#123;&#123;num%2==0?'偶数':'奇数'&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>num的下一个数字：&#123;&#123;num-0+1&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"num"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;message.split("").reverse().join("")&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"message"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el:<span class="string">"#app"</span>, <span class="comment">// 设置vue对象控制的标签范围</span></span></span><br><span class="line"><span class="actionscript">        data:&#123;     <span class="comment">// vue要操作的数据</span></span></span><br><span class="line"><span class="actionscript">            url:<span class="string">"http://www.luffycity.com"</span>,</span></span><br><span class="line"><span class="handlebars"><span class="xml">            text:"<span class="tag">&lt;<span class="name">h1</span>&gt;</span>大标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>",</span></span></span><br><span class="line">            num: 100,</span><br><span class="line"><span class="actionscript">            message:<span class="string">"abcdef"</span>,</span></span><br><span class="line">        &#125;,</span><br><span class="line">        </span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h1><p>指令 (Directives) 是带有“v-”前缀的特殊属性。每一个指令在vue中都有固定的作用。</p>
<p>在vue中，提供了很多指令，常用的有：v-if、v-model、v-for等等。</p>
<p>指令会在vm对象的data属性的数据发生变化时，会同时改变元素中的其控制的内容或属性。</p>
<p>因为vue的历史版本原因，所以有一部分指令都有两种写法：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">vue1.x写法             vue2.x的写法</span><br><span class="line">v-html         ----&gt;   v-html</span><br><span class="line">&#123;&#123; 普通文本 &#125;&#125;         &#123;&#123;普通文本&#125;&#125;</span><br><span class="line">v-bind:属性名   ----&gt;  :属性</span><br><span class="line">v-on:事件名     ----&gt;  @事件名</span><br></pre></td></tr></table></figure>

<h2 id="操作属性"><a href="#操作属性" class="headerlink" title="操作属性"></a>操作属性</h2><p>格式：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">标签名</span> <span class="attr">:</span>标签属性=<span class="string">"data属性"</span>&gt;</span><span class="tag">&lt;/<span class="name">标签名</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">:title</span>=<span class="string">"str1"</span>&gt;</span>&#123;&#123; str1 &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span> <span class="comment">&lt;!-- 也可以使用v-html显示双标签的内容，&#123;&#123;  &#125;&#125; 是简写 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">:href</span>=<span class="string">"url2"</span>&gt;</span>淘宝<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">"url1"</span>&gt;</span>百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span>  <span class="comment">&lt;!-- v-bind是vue1.x版本的写法 --&gt;</span></span><br></pre></td></tr></table></figure>

<p>显示wifi密码效果：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"index"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">"url"</span> <span class="attr">:alt</span>=<span class="string">"title"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">:type</span>=<span class="string">"type"</span> <span class="attr">placeholder</span>=<span class="string">"请输入wifi密码"</span>&gt;</span> <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"type='text'"</span>&gt;</span>显示密码<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el:<span class="string">"#index"</span>,</span></span><br><span class="line">        data:&#123;</span><br><span class="line"><span class="actionscript">          url:<span class="string">"https://www.luffycity.com/static/img/head-logo.a7cedf3.svg"</span>,</span></span><br><span class="line"><span class="actionscript">          title:<span class="string">"路飞学成"</span>,</span></span><br><span class="line"><span class="actionscript">          type:<span class="string">"password"</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="事件绑定"><a href="#事件绑定" class="headerlink" title="事件绑定"></a>事件绑定</h2><p>有两种事件操作的写法，@事件名 和 v-on:事件名</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"num++"</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span>   <span class="comment">&lt;!-- v-on 是vue1.x版本的写法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"num+=5"</span>&gt;</span>按钮2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>总结：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">1. 使用@事件名来进行事件的绑定</span><br><span class="line">   语法：</span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span> @<span class="attr">click</span>=<span class="string">"num++"</span>&gt;</span>&#123;&#123;num&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">2. 绑定的事件的事件名，全部都是js的事件名：</span><br><span class="line">   @submit   ---&gt;  onsubmit</span><br><span class="line">   @focus    ---&gt;  onfocus</span><br><span class="line">   @blur     ---&gt;  onblur</span><br><span class="line">   @click    ---&gt;  onclick</span><br><span class="line">   ....</span><br></pre></td></tr></table></figure>

<h3 id="例如-完成商城购物车中的商品增加减少数量"><a href="#例如-完成商城购物车中的商品增加减少数量" class="headerlink" title="例如:完成商城购物车中的商品增加减少数量"></a>例如:完成商城购物车中的商品增加减少数量</h3><p>步骤：</p>
<ol>
<li>给vue对象添加操作数据的方法</li>
<li>在标签中使用指令调用操作数据的方法</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"++num"</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"num"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"sub"</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el:<span class="string">"#box"</span>,</span></span><br><span class="line">            data:&#123;</span><br><span class="line">                num:0,</span><br><span class="line">            &#125;,</span><br><span class="line">            methods:&#123;</span><br><span class="line">                sub()&#123;</span><br><span class="line"><span class="actionscript">                    <span class="keyword">if</span>(<span class="keyword">this</span>.num&lt;=<span class="number">1</span>)&#123;</span></span><br><span class="line"><span class="actionscript">                        <span class="keyword">this</span>.num=<span class="number">0</span>;</span></span><br><span class="line"><span class="actionscript">                    &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="actionscript">                        <span class="keyword">this</span>.num--;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--#box&gt;(button+input+button) tab键--&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="操作样式"><a href="#操作样式" class="headerlink" title="操作样式"></a>操作样式</h2><p>操作样式，本质就是属性操作，使用冒号：</p>
<h3 id="控制标签class类名"><a href="#控制标签class类名" class="headerlink" title="控制标签class类名"></a>控制标签class类名</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">格式：</span><br><span class="line">   <span class="tag">&lt;<span class="name">h1</span> <span class="attr">:class</span>=<span class="string">"值"</span>&gt;</span>元素<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>  值可以是字符串、对象、对象名、数组</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.box1</span>&#123;</span></span><br><span class="line">        color: red;</span><br><span class="line"><span class="css">        <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#000</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.box2</span>&#123;</span></span><br><span class="line">        background-color: orange;</span><br><span class="line">        font-size: 32px;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--- 添加class类名，值是一个对象</span></span><br><span class="line"><span class="comment">        &#123;</span></span><br><span class="line"><span class="comment">         class类1:布尔值变量1,</span></span><br><span class="line"><span class="comment">         class类2:布尔值变量2,</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">         --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">:class</span>=<span class="string">"&#123;box1:myclass1&#125;"</span>&gt;</span>一个段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> @<span class="attr">click</span>=<span class="string">"myclass3=!myclass3"</span> <span class="attr">:class</span>=<span class="string">"&#123;box1:myclass2,box2:myclass3&#125;"</span>&gt;</span>一个段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> vm1=<span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el:<span class="string">"#box"</span>,</span></span><br><span class="line">            data:&#123;</span><br><span class="line"><span class="actionscript">                myclass1:<span class="literal">false</span>, <span class="comment">// 布尔值变量如果是false，则不会添加对象的属性名作为样式</span></span></span><br><span class="line"><span class="actionscript">                myclass2:<span class="literal">true</span>,  <span class="comment">// 布尔值变量如果是true，则不会添加对象的属性名作为样式</span></span></span><br><span class="line"><span class="actionscript">                myclass3:<span class="literal">false</span>,</span></span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 上面的代码可以:class的值保存到data里面的一个变量，然后使用该变量作为:class的值 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.box4</span>&#123;</span></span><br><span class="line">        background-color: red;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.box5</span>&#123;</span></span><br><span class="line">        color: green;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"mycls.box4=!mycls.box4"</span>&gt;</span>改变背景<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"mycls.box5=!mycls.box5"</span>&gt;</span>改变字体颜色<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">:class</span>=<span class="string">"mycls"</span>&gt;</span>第二个段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> vm2 = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el:<span class="string">"#app"</span>,</span></span><br><span class="line">            data:&#123;</span><br><span class="line">                mycls:&#123;</span><br><span class="line"><span class="actionscript">                    box4:<span class="literal">false</span>,</span></span><br><span class="line"><span class="actionscript">                    box5:<span class="literal">true</span></span></span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 批量给元素增加多个class样式类 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.box6</span>&#123;</span></span><br><span class="line">        background-color: red;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.box7</span>&#123;</span></span><br><span class="line">        color: green;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.box8</span>&#123;</span></span><br><span class="line">        border: 1px solid yellow;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app2"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span> <span class="attr">:class</span>=<span class="string">"[mycls1,mycls2]"</span>&gt;</span>第三个段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> vm3 = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el:<span class="string">"#app2"</span>,</span></span><br><span class="line">            data:&#123;</span><br><span class="line">                mycls1:&#123;</span><br><span class="line"><span class="actionscript">                    box6:<span class="literal">true</span>,</span></span><br><span class="line"><span class="actionscript">                    box7:<span class="literal">true</span>,</span></span><br><span class="line">                &#125;,</span><br><span class="line">                mycls2:&#123;</span><br><span class="line"><span class="actionscript">                    box8:<span class="literal">true</span>,</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>代码执行效果：</p>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/1552036325806.png" alt="1552036325806"></p>
<p>总结：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">1. 给元素绑定class类名，最常用的就是第二种。</span><br><span class="line">    vue对象的data数据：</span><br><span class="line">        data:&#123;</span><br><span class="line">          myObj:&#123;</span><br><span class="line">            complete:true,</span><br><span class="line">            uncomplete:false,</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">		html元素：    </span><br><span class="line">    		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span> <span class="attr">:class</span>=<span class="string">"myObj"</span>&gt;</span>2222<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    最终浏览器效果：</span><br><span class="line">		    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box complete"</span>&gt;</span>2222<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="控制标签style样式"><a href="#控制标签style样式" class="headerlink" title="控制标签style样式"></a>控制标签style样式</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">格式1：值是json对象，对象写在元素的:style属性中</span><br><span class="line">	 标签元素：</span><br><span class="line">		     <span class="tag">&lt;<span class="name">div</span> <span class="attr">:style</span>=<span class="string">"&#123;color: activeColor, fontSize: fontSize + 'px' &#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	 data数据如下：</span><br><span class="line">         data: &#123;</span><br><span class="line">             activeColor: 'red',</span><br><span class="line">             fontSize: 30</span><br><span class="line">         &#125;</span><br><span class="line">格式2：值是对象变量名，对象在data中进行声明</span><br><span class="line">   标签元素：</span><br><span class="line">   			<span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:style</span>=<span class="string">"styleObject"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   data数据如下：</span><br><span class="line">         data: &#123;</span><br><span class="line">            	styleObject: &#123;</span><br><span class="line">             		color: 'red',</span><br><span class="line">             		fontSize: '13px'</span><br><span class="line">			  			&#125;</span><br><span class="line">				 &#125;</span><br><span class="line"></span><br><span class="line">格式3：值是数组</span><br><span class="line">  标签元素：</span><br><span class="line">				<span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:style</span>=<span class="string">"[style1, style2]"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	data数据如下：</span><br><span class="line">				data: &#123;</span><br><span class="line">                     style1:&#123;</span><br><span class="line">                       color:"red"</span><br><span class="line">                     &#125;,</span><br><span class="line">                     style2:&#123;</span><br><span class="line">                       background:"yellow",</span><br><span class="line">                       fontSize: "21px"</span><br><span class="line">                     &#125;</span><br><span class="line">				&#125;</span><br></pre></td></tr></table></figure>

<h3 id="实例-vue版本选项卡"><a href="#实例-vue版本选项卡" class="headerlink" title="实例-vue版本选项卡"></a>实例-vue版本选项卡</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-id">#card</span>&#123;</span></span><br><span class="line">            width: 500px;</span><br><span class="line">            height: 350px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.title</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">height</span><span class="selector-pseudo">:50px</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.title</span> <span class="selector-tag">span</span>&#123;</span></span><br><span class="line">            width: 100px;</span><br><span class="line">            height: 50px;</span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>:<span class="selector-id">#ccc</span>;</span></span><br><span class="line">            display: inline-block;</span><br><span class="line"><span class="css">            <span class="selector-tag">line-height</span>: 50<span class="selector-tag">px</span>; <span class="comment">/* 设置行和当前元素的高度相等,就可以让文本内容上下居中 */</span></span></span><br><span class="line"><span class="css">            <span class="selector-tag">text-align</span><span class="selector-pseudo">:center</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.content</span> <span class="selector-class">.list</span>&#123;</span></span><br><span class="line">            width: 500px;</span><br><span class="line">            height: 300px;</span><br><span class="line">            background-color: yellow;</span><br><span class="line">            display: none;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.content</span> <span class="selector-class">.active</span>&#123;</span></span><br><span class="line">            display: block;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.title</span> <span class="selector-class">.current</span>&#123;</span></span><br><span class="line">            background-color: yellow;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"card"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"title"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> @<span class="attr">click</span>=<span class="string">"num=0"</span> <span class="attr">:class</span>=<span class="string">"num==0?'current':''"</span>&gt;</span>国内新闻<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> @<span class="attr">click</span>=<span class="string">"num=1"</span> <span class="attr">:class</span>=<span class="string">"num==1?'current':''"</span>&gt;</span>国际新闻<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> @<span class="attr">click</span>=<span class="string">"num=2"</span> <span class="attr">:class</span>=<span class="string">"num==2?'current':''"</span>&gt;</span>银河新闻<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--&lt;span&gt;&#123;&#123;num&#125;&#125;&lt;/span&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list"</span> <span class="attr">:class</span>=<span class="string">"num==0?'active':''"</span>&gt;</span>国内新闻列表<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list"</span> <span class="attr">:class</span>=<span class="string">"num==1?'active':''"</span>&gt;</span>国际新闻列表<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list"</span> <span class="attr">:class</span>=<span class="string">"num==2?'active':''"</span>&gt;</span>银河新闻列表<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 思路：</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 当用户点击标题栏的按钮[span]时，显示对应索引下标的内容块[.list]</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 代码实现：</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> card = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el:<span class="string">"#card"</span>,</span></span><br><span class="line">            data:&#123;</span><br><span class="line">                num:0,</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>代码运行效果：</p>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/1552038219804.png" alt="1552038219804"></p>
<h2 id="条件渲染指令"><a href="#条件渲染指令" class="headerlink" title="条件渲染指令"></a>条件渲染指令</h2><p>vue中提供了两个指令可以用于判断是否要显示元素，分别是v-if和v-show。</p>
<h3 id="v-if"><a href="#v-if" class="headerlink" title="v-if"></a>v-if</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">标签元素：</span><br><span class="line">      <span class="comment">&lt;!-- vue对象最终会把条件的结果变成布尔值 --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-if</span>=<span class="string">"ok"</span>&gt;</span>Yes<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  data数据：</span><br><span class="line">  		data:&#123;</span><br><span class="line">      		ok:false    // true则是显示，false是隐藏</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>

<h3 id="v-else"><a href="#v-else" class="headerlink" title="v-else"></a>v-else</h3><p>v-else指令来表示 v-if 的“else 块”，v-else 元素必须紧跟在带 v-if 或者 v-else-if 的元素的后面，否则它将不会被识别。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">标签元素：</span><br><span class="line">			<span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-if</span>=<span class="string">"ok"</span>&gt;</span>Yes<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-else</span>&gt;</span>No<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  data数据：</span><br><span class="line">  		data:&#123;</span><br><span class="line">      		ok:false    // true则是显示，false是隐藏</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>

<h3 id="v-else-if"><a href="#v-else-if" class="headerlink" title="v-else-if"></a>v-else-if</h3><p>可以出现多个v-else-if语句，但是v-else-if之前必须有一个v-if开头。后面可以跟着v-else，也可以没有。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">标签元素：</span><br><span class="line">			<span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-if</span>=<span class="string">"num==1"</span>&gt;</span>num的值为1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-else-if</span>=<span class="string">"num==2"</span>&gt;</span>num的值为2<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">		  <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-else</span>&gt;</span>num的值是&#123;&#123;num&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  data数据：</span><br><span class="line">  		data:&#123;</span><br><span class="line">      		num:2</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>

<h3 id="v-show"><a href="#v-show" class="headerlink" title="v-show"></a>v-show</h3><p>用法和v-if大致一样，区别在于2点：</p>
<ol>
<li>v-show后面不能v-else或者v-else-if</li>
<li>v-show隐藏元素时，使用的是display:none来隐藏的，而v-if是直接从HTML文档中移除元素[ DOM操作中的remove ]</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">标签元素：</span><br><span class="line">			<span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-show</span>=<span class="string">"ok"</span>&gt;</span>Hello!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  data数据：</span><br><span class="line">  		data:&#123;</span><br><span class="line">      		ok:false    // true则是显示，false是隐藏</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>

<h2 id="列表渲染指令"><a href="#列表渲染指令" class="headerlink" title="列表渲染指令"></a>列表渲染指令</h2><p>在vue中，可以通过v-for指令可以将一组数据渲染到页面中，数据可以是数组或者对象。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">数据是数组：        </span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--book是列表的每一个元素--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"book in book_list"</span>&gt;</span>&#123;&#123;book.title&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--book是列表的每一个元素，index是每个元素的下标--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(book, index) in book_list"</span>&gt;</span>第&#123;&#123; index+1&#125;&#125;本图书：&#123;&#123;book.title&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> vm1 = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">                el:<span class="string">"#app"</span>,</span></span><br><span class="line">                data:&#123;</span><br><span class="line">                    book_list:[</span><br><span class="line"><span class="actionscript">                        &#123;<span class="string">"id"</span>:<span class="number">1</span>,<span class="string">"title"</span>:<span class="string">"图书名称1"</span>,<span class="string">"price"</span>:<span class="number">200</span>&#125;,</span></span><br><span class="line"><span class="actionscript">                        &#123;<span class="string">"id"</span>:<span class="number">2</span>,<span class="string">"title"</span>:<span class="string">"图书名称2"</span>,<span class="string">"price"</span>:<span class="number">200</span>&#125;,</span></span><br><span class="line"><span class="actionscript">                        &#123;<span class="string">"id"</span>:<span class="number">3</span>,<span class="string">"title"</span>:<span class="string">"图书名称3"</span>,<span class="string">"price"</span>:<span class="number">200</span>&#125;,</span></span><br><span class="line"><span class="actionscript">                        &#123;<span class="string">"id"</span>:<span class="number">4</span>,<span class="string">"title"</span>:<span class="string">"图书名称4"</span>,<span class="string">"price"</span>:<span class="number">200</span>&#125;,</span></span><br><span class="line">                    ]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">数据是对象：</span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--i是每一个value值--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"value in book"</span>&gt;</span>&#123;&#123;value&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--i是每一个value值,j是每一个键名--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"attr, value in book"</span>&gt;</span>&#123;&#123;attr&#125;&#125;:&#123;&#123;value&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> vm1 = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">                el:<span class="string">"#app"</span>,</span></span><br><span class="line">                data:&#123;</span><br><span class="line">                    book: &#123;</span><br><span class="line"><span class="actionscript">                        <span class="comment">// "attr":"value"</span></span></span><br><span class="line"><span class="actionscript">                        <span class="string">"id"</span>:<span class="number">11</span>,</span></span><br><span class="line"><span class="actionscript">                        <span class="string">"title"</span>:<span class="string">"图书名称1"</span>,</span></span><br><span class="line"><span class="actionscript">                        <span class="string">"price"</span>:<span class="number">200</span></span></span><br><span class="line">                    &#125;,</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;)</span><br><span class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>练习：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">goods:[</span><br><span class="line">	&#123;"name":"python入门","price":150&#125;,</span><br><span class="line">	&#123;"name":"python进阶","price":100&#125;,</span><br><span class="line">	&#123;"name":"python高级","price":75&#125;,</span><br><span class="line">	&#123;"name":"python研究","price":60&#125;,</span><br><span class="line">	&#123;"name":"python放弃","price":110&#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"># 把上面的数据采用table表格输出到页面，价格大于60的数据需要添加背景色橙色[orange]</span><br></pre></td></tr></table></figure>

<h1 id="Vue对象提供的属性功能"><a href="#Vue对象提供的属性功能" class="headerlink" title="Vue对象提供的属性功能"></a>Vue对象提供的属性功能</h1><h2 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h2><p>过滤器，就是vue允许开发者自定义的文本格式化函数，可以使用在两个地方：输出内容和操作数据中。</p>
<p>定义过滤器的方式有两种。</p>
<h3 id="使用Vue-filter-进行全局定义"><a href="#使用Vue-filter-进行全局定义" class="headerlink" title="使用Vue.filter()进行全局定义"></a>使用Vue.filter()进行全局定义</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">Vue.filter("RMB1", function(v)&#123;</span><br><span class="line">  	//就是来格式化(处理)v这个数据的</span><br><span class="line">  	if(v==0)&#123;</span><br><span class="line">    		return v</span><br><span class="line">  	&#125;</span><br><span class="line"></span><br><span class="line">  	return v+"元"</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="在vue对象中通过filters属性来定义"><a href="#在vue对象中通过filters属性来定义" class="headerlink" title="在vue对象中通过filters属性来定义"></a>在vue对象中通过filters属性来定义</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">var vm = new Vue(&#123;</span><br><span class="line">  el:"#app",</span><br><span class="line">  data:&#123;&#125;,</span><br><span class="line">  filters:&#123;</span><br><span class="line">    RMB2:function(value)&#123;</span><br><span class="line">      if(value=='')&#123;</span><br><span class="line">        return;</span><br><span class="line">      &#125;else&#123;</span><br><span class="line">      	return '¥ '+value;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="计算和侦听属性"><a href="#计算和侦听属性" class="headerlink" title="计算和侦听属性"></a>计算和侦听属性</h2><h3 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h3><p>我们之前学习过字符串反转，如果直接把反转的代码写在元素中，则会使得其他同事在开发时时不易发现数据被调整了，所以vue提供了一个计算属性(computed)，可以让我们把调整data数据的代码存在在该属性中。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/vue.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">		<span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el:<span class="string">"#app"</span>,</span></span><br><span class="line">            data:&#123;</span><br><span class="line"><span class="actionscript">                str1: <span class="string">"abcdefgh"</span></span></span><br><span class="line">            &#125;,</span><br><span class="line"><span class="actionscript">            computed:&#123;   <span class="comment">//计算属性：里面的函数都必须有返回值</span></span></span><br><span class="line"><span class="actionscript">                strRevs: <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">var</span> ret = <span class="keyword">this</span>.str1.split(<span class="string">""</span>).reverse().join(<span class="string">""</span>);</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">return</span> ret</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; str1 &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; strRevs &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="监听属性"><a href="#监听属性" class="headerlink" title="监听属性"></a>监听属性</h3><p>侦听属性，可以帮助我们侦听data某个数据的变化，从而做相应的自定义操作。</p>
<p>侦听属性是一个对象，它的键是要监听的对象或者变量，值一般是函数，当侦听的data数据发生变化时，会自定执行的对应函数，这个函数在被调用时，vue会传入两个形参，第一个是变化前的数据值，第二个是变化后的数据值。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/vue.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="actionscript">         <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el:<span class="string">"#app"</span>,</span></span><br><span class="line">            data:&#123;</span><br><span class="line">                num:20</span><br><span class="line">            &#125;,</span><br><span class="line">            watch:&#123;</span><br><span class="line"><span class="actionscript">                num:<span class="function"><span class="keyword">function</span><span class="params">(newval,oldval)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">                    <span class="comment">//num发生变化的时候，要执行的代码</span></span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(<span class="string">"num已经发生了变化！"</span>);</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; num &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"num++"</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="vue对象的生命周期"><a href="#vue对象的生命周期" class="headerlink" title="vue对象的生命周期"></a>vue对象的生命周期</h2><p>每个Vue对象在创建时都要经过一系列的初始化过程。在这个过程中Vue.js会自动运行一些叫做生命周期的的钩子函数，我们可以使用这些函数，在对象创建的不同阶段加上我们需要的代码，实现特定的功能。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/vue.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el:<span class="string">"#app"</span>,</span></span><br><span class="line">            data:&#123;</span><br><span class="line">                num:0</span><br><span class="line">            &#125;,</span><br><span class="line"><span class="actionscript">            beforeCreate:<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">"beforeCreate,vm对象尚未创建,num="</span>+ <span class="keyword">this</span>.num);  <span class="comment">//undefined</span></span></span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.name=<span class="number">10</span>; <span class="comment">// 此时没有this对象呢，所以设置的name无效，被在创建对象的时候被覆盖为0</span></span></span><br><span class="line">            &#125;,</span><br><span class="line"><span class="actionscript">            created:<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">"created,vm对象创建完成,设置好了要控制的元素范围,num="</span>+<span class="keyword">this</span>.num );  <span class="comment">// 0</span></span></span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.num = <span class="number">20</span>;</span></span><br><span class="line">            &#125;,</span><br><span class="line"><span class="actionscript">            beforeMount:<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log( <span class="keyword">this</span>.$el.innerHTML ); <span class="comment">// &lt;p&gt;&#123;&#123;num&#125;&#125;&lt;/p&gt;</span></span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">"beforeMount,vm对象尚未把data数据显示到页面中,num="</span>+<span class="keyword">this</span>.num ); <span class="comment">// 20</span></span></span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.num = <span class="number">30</span>;</span></span><br><span class="line">            &#125;,</span><br><span class="line"><span class="actionscript">            mounted:<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log( <span class="keyword">this</span>.$el.innerHTML ); <span class="comment">// &lt;p&gt;30&lt;/p&gt;</span></span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">"mounted,vm对象已经把data数据显示到页面中,num="</span>+<span class="keyword">this</span>.num); <span class="comment">// 30</span></span></span><br><span class="line">            &#125;,</span><br><span class="line"><span class="actionscript">            beforeUpdate:<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="comment">// this.$el 就是我们上面的el属性了，$el表示当前vue.js所控制的元素#app</span></span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log( <span class="keyword">this</span>.$el.innerHTML );  <span class="comment">// &lt;p&gt;30&lt;/p&gt;</span></span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">"beforeUpdate,vm对象尚未把更新后的data数据显示到页面中,num="</span>+<span class="keyword">this</span>.num); <span class="comment">// beforeUpdate----31</span></span></span><br><span class="line">                </span><br><span class="line">            &#125;,</span><br><span class="line"><span class="actionscript">            updated:<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log( <span class="keyword">this</span>.$el.innerHTML ); <span class="comment">// &lt;p&gt;31&lt;/p&gt;</span></span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">"updated,vm对象已经把过呢更新后的data数据显示到页面中,num="</span> + <span class="keyword">this</span>.num ); <span class="comment">// updated----31</span></span></span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;num&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"num++"</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>总结：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在vue使用的过程中，如果要初始化操作，把初始化操作的代码放在 mounted 中执行。</span><br><span class="line">mounted阶段就是在vm对象已经把data数据实现到页面以后。一般页面初始化使用。例如，用户访问页面加载成功以后，就要执行的ajax请求。</span><br><span class="line"></span><br><span class="line">另一个就是created，这个阶段就是在 vue对象创建以后，把ajax请求后端数据的代码放进 created</span><br></pre></td></tr></table></figure>

<h2 id="阻止事件冒泡和刷新页面"><a href="#阻止事件冒泡和刷新页面" class="headerlink" title="阻止事件冒泡和刷新页面"></a>阻止事件冒泡和刷新页面</h2><p>使用.stop和.prevent</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.box1</span>&#123;</span></span><br><span class="line">            width: 200px;</span><br><span class="line">            height: 200px;</span><br><span class="line"><span class="css">            <span class="selector-tag">background</span>: <span class="selector-id">#ccc</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.box2</span>&#123;</span></span><br><span class="line">            width: 100px;</span><br><span class="line">            height: 100px;</span><br><span class="line">            background: pink;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/vue.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el:<span class="string">"#app"</span>,</span></span><br><span class="line">            data:&#123;&#125;</span><br><span class="line">        &#125;)        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box1"</span> @<span class="attr">click</span>=<span class="string">"alert('box1')"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box2"</span> @<span class="attr">click.stop.prevent</span>=<span class="string">"alert('box2')"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>   <span class="comment">&lt;!-- @click.stop来阻止事件冒泡 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"#"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交02"</span> @<span class="attr">click.prevent</span>=<span class="string">""</span>&gt;</span> <span class="comment">&lt;!-- @click.prevent来阻止表单提交 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="综合案例-todolist"><a href="#综合案例-todolist" class="headerlink" title="综合案例-todolist"></a>综合案例-todolist</h2><p>我的计划列表</p>
<p>html代码:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>todolist<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css">		<span class="selector-class">.list_con</span>&#123;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">width</span><span class="selector-pseudo">:600px</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">margin</span><span class="selector-pseudo">:50px</span> <span class="selector-tag">auto</span> 0;</span></span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="selector-class">.inputtxt</span>&#123;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">width</span><span class="selector-pseudo">:550px</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">height</span><span class="selector-pseudo">:30px</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">border</span><span class="selector-pseudo">:1px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ccc</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">padding</span><span class="selector-pseudo">:0px</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">text-indent</span><span class="selector-pseudo">:10px</span>;</span></span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="selector-class">.inputbtn</span>&#123;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">width</span><span class="selector-pseudo">:40px</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">height</span><span class="selector-pseudo">:32px</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">padding</span><span class="selector-pseudo">:0px</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">border</span><span class="selector-pseudo">:1px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ccc</span>;</span></span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="selector-class">.list</span>&#123;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">margin</span><span class="selector-pseudo">:0</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">padding</span><span class="selector-pseudo">:0</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">list-style</span><span class="selector-pseudo">:none</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">margin-top</span><span class="selector-pseudo">:20px</span>;</span></span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="selector-class">.list</span> <span class="selector-tag">li</span>&#123;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">height</span><span class="selector-pseudo">:40px</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">line-height</span><span class="selector-pseudo">:40px</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">border-bottom</span><span class="selector-pseudo">:1px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ccc</span>;</span></span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line"><span class="css">		<span class="selector-class">.list</span> <span class="selector-tag">li</span> <span class="selector-tag">span</span>&#123;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">float</span><span class="selector-pseudo">:left</span>;</span></span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line"><span class="css">		<span class="selector-class">.list</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span>&#123;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">float</span><span class="selector-pseudo">:right</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">text-decoration</span><span class="selector-pseudo">:none</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">margin</span><span class="selector-pseudo">:0</span> 10<span class="selector-tag">px</span>;</span></span><br><span class="line">		&#125;</span><br><span class="line">	<span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list_con"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">h2</span>&gt;</span>To do list<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">"txt1"</span> <span class="attr">class</span>=<span class="string">"inputtxt"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">"增加"</span> <span class="attr">id</span>=<span class="string">"btn1"</span> <span class="attr">class</span>=<span class="string">"inputbtn"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"list"</span> <span class="attr">class</span>=<span class="string">"list"</span>&gt;</span></span><br><span class="line">			<span class="comment">&lt;!-- javascript:; # 阻止a标签跳转 --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">span</span>&gt;</span>学习html<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">class</span>=<span class="string">"up"</span>&gt;</span> ↑ <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">class</span>=<span class="string">"down"</span>&gt;</span> ↓ <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">class</span>=<span class="string">"del"</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>学习css<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">class</span>=<span class="string">"up"</span>&gt;</span> ↑ <span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">class</span>=<span class="string">"down"</span>&gt;</span> ↓ <span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">class</span>=<span class="string">"del"</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>学习javascript<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">class</span>=<span class="string">"up"</span>&gt;</span> ↑ <span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">class</span>=<span class="string">"down"</span>&gt;</span> ↓ <span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">class</span>=<span class="string">"del"</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>特效实现效果：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>todolist<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css">		<span class="selector-class">.list_con</span>&#123;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">width</span><span class="selector-pseudo">:600px</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">margin</span><span class="selector-pseudo">:50px</span> <span class="selector-tag">auto</span> 0;</span></span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="selector-class">.inputtxt</span>&#123;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">width</span><span class="selector-pseudo">:550px</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">height</span><span class="selector-pseudo">:30px</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">border</span><span class="selector-pseudo">:1px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ccc</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">padding</span><span class="selector-pseudo">:0px</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">text-indent</span><span class="selector-pseudo">:10px</span>;</span></span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="selector-class">.inputbtn</span>&#123;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">width</span><span class="selector-pseudo">:40px</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">height</span><span class="selector-pseudo">:32px</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">padding</span><span class="selector-pseudo">:0px</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">border</span><span class="selector-pseudo">:1px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ccc</span>;</span></span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="selector-class">.list</span>&#123;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">margin</span><span class="selector-pseudo">:0</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">padding</span><span class="selector-pseudo">:0</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">list-style</span><span class="selector-pseudo">:none</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">margin-top</span><span class="selector-pseudo">:20px</span>;</span></span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="selector-class">.list</span> <span class="selector-tag">li</span>&#123;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">height</span><span class="selector-pseudo">:40px</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">line-height</span><span class="selector-pseudo">:40px</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">border-bottom</span><span class="selector-pseudo">:1px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ccc</span>;</span></span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line"><span class="css">		<span class="selector-class">.list</span> <span class="selector-tag">li</span> <span class="selector-tag">span</span>&#123;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">float</span><span class="selector-pseudo">:left</span>;</span></span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line"><span class="css">		<span class="selector-class">.list</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span>&#123;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">float</span><span class="selector-pseudo">:right</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">text-decoration</span><span class="selector-pseudo">:none</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">margin</span><span class="selector-pseudo">:0</span> 10<span class="selector-tag">px</span>;</span></span><br><span class="line">		&#125;</span><br><span class="line">	<span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"todolist"</span> <span class="attr">class</span>=<span class="string">"list_con"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">h2</span>&gt;</span>To do list<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"message"</span> <span class="attr">class</span>=<span class="string">"inputtxt"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> @<span class="attr">click</span>=<span class="string">"addItem"</span> <span class="attr">value</span>=<span class="string">"增加"</span> <span class="attr">class</span>=<span class="string">"inputbtn"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"list"</span> <span class="attr">class</span>=<span class="string">"list"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"item,key in dolist"</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">a</span> @<span class="attr">click</span>=<span class="string">"upItem(key)"</span> <span class="attr">class</span>=<span class="string">"up"</span> &gt;</span> ↑ <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">a</span> @<span class="attr">click</span>=<span class="string">"downItem(key)"</span> <span class="attr">class</span>=<span class="string">"down"</span>&gt;</span> ↓ <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">a</span> @<span class="attr">click</span>=<span class="string">"delItem(key)"</span> <span class="attr">class</span>=<span class="string">"del"</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 计划列表代码</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el:<span class="string">"#todolist"</span>,</span></span><br><span class="line">        data:&#123;</span><br><span class="line"><span class="actionscript">            message:<span class="string">""</span>,</span></span><br><span class="line">            dolist:[</span><br><span class="line"><span class="actionscript">                <span class="string">"学习html"</span>,</span></span><br><span class="line"><span class="actionscript">                <span class="string">"学习css"</span>,</span></span><br><span class="line"><span class="actionscript">                <span class="string">"学习javascript"</span>,</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">            addItem()&#123;</span><br><span class="line"><span class="actionscript">                <span class="keyword">if</span>(<span class="keyword">this</span>.messsage==<span class="string">""</span>)&#123;</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.dolist.push(<span class="keyword">this</span>.message);</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.message = <span class="string">""</span></span></span><br><span class="line">            &#125;,</span><br><span class="line">            delItem(key)&#123;</span><br><span class="line"><span class="actionscript">                <span class="comment">// 删除和替换</span></span></span><br><span class="line"><span class="actionscript">                <span class="comment">// 参数1: 开始下表</span></span></span><br><span class="line"><span class="actionscript">                <span class="comment">// 参数2: 元素长度，如果不填默认删除到最后</span></span></span><br><span class="line"><span class="actionscript">                <span class="comment">// 参数3: 表示使用当前参数替换已经删除内容的位置</span></span></span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.dolist.splice(key, <span class="number">1</span>);</span></span><br><span class="line">            &#125;,</span><br><span class="line">            upItem(key)&#123;</span><br><span class="line">                if(key==0)&#123;</span><br><span class="line"><span class="actionscript">                    <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line">                &#125;</span><br><span class="line"><span class="actionscript">                <span class="comment">// 向上移动</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">let</span> result = <span class="keyword">this</span>.dolist.splice(key,<span class="number">1</span>);</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.dolist.splice(key<span class="number">-1</span>,<span class="number">0</span>,result[<span class="number">0</span>]);</span></span><br><span class="line">            &#125;,</span><br><span class="line">            downItem(key)&#123;</span><br><span class="line"><span class="actionscript">                <span class="comment">// 向下移动</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">let</span> result = <span class="keyword">this</span>.dolist.splice(key, <span class="number">1</span>);</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(result);</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.dolist.splice(key+<span class="number">1</span>,<span class="number">0</span>,result[<span class="number">0</span>]);</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端框架</category>
      </categories>
      <tags>
        <tag>vue框架</tag>
      </tags>
  </entry>
  <entry>
    <title>[Vue自动化工具（Vue-cli）]</title>
    <url>/2020/02/26/Vue%E8%87%AA%E5%8A%A8%E5%8C%96%E5%B7%A5%E5%85%B7%EF%BC%88Vue-cli%EF%BC%89/</url>
    <content><![CDATA[<h1 id="Vue自动化工具（Vue-cli）"><a href="#Vue自动化工具（Vue-cli）" class="headerlink" title="Vue自动化工具（Vue-cli）"></a>Vue自动化工具（Vue-cli）</h1><p>前面学习了普通组件以后，接下来我们继续学习单文件组件则需要提前先安装准备一些组件开发工具。否则无法使用和学习单文件组件。</p>
<p>一般情况下，单文件组件，我们运行在 自动化工具vue-CLI中，可以帮我们把单文件组件编译成普通的js代码。所以我们需要在电脑先安装搭建vue-CLI工具。</p>
<p>官网：<a href="https://cli.vuejs.org/zh/" target="_blank" rel="noopener">https://cli.vuejs.org/zh/</a></p>
<p>Vue CLI 需要 <a href="https://nodejs.org/" target="_blank" rel="noopener">Node.js</a> 8.9 或更高版本 (推荐 8.11.0+)。你可以使用 <a href="https://github.com/creationix/nvm" target="_blank" rel="noopener">nvm</a> 或 <a href="https://github.com/coreybutler/nvm-windows" target="_blank" rel="noopener">nvm-windows</a>在同一台电脑中管理多个 Node 版本。</p>
<p>nvm工具的下载和安装： </p>
<p><a href="https://www.jianshu.com/p/d0e0935b150a" target="_blank" rel="noopener">https://www.jianshu.com/p/d0e0935b150a</a></p>
<p> <a href="https://www.jianshu.com/p/622ad36ee020" target="_blank" rel="noopener">https://www.jianshu.com/p/622ad36ee020</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -o- https://github.com/nvm-sh/nvm/v0.35.3/install.sh | bash</span><br></pre></td></tr></table></figure>

<p>安装记录:</p>
<p>打开:<a href="https://github.com/coreybutler/nvm-windows/releases" target="_blank" rel="noopener">https://github.com/coreybutler/nvm-windows/releases</a></p>
<p>安装完成以后,先查看环境变量是否设置好了.</p>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/1552357036022.png" alt="1552357036022"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">常用的nvm命令</span><br><span class="line"></span><br><span class="line">nvm list   <span class="comment"># 列出目前在nvm里面安装的所有node版本</span></span><br><span class="line">nvm install node版本号      <span class="comment"># 安装指定版本的node.js</span></span><br><span class="line">nvm uninstall node版本号    <span class="comment"># 卸载指定版本的node.js</span></span><br><span class="line">nvm use node版本号          <span class="comment"># 切换当前使用的node.js版本</span></span><br></pre></td></tr></table></figure>

<p>如果使用nvm工具，则直接可以不用自己手动下载，如果使用nvm下载安装 node的npm比较慢的时候，可以修改nvm的配置文件(在安装根目录下)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># settings.txt</span><br><span class="line">root: C:\tool\nvm    [这里的目录地址是安装nvm时自己设置的地址,要根据实际修改]</span><br><span class="line">path: C:\tool\nodejs</span><br><span class="line">arch: 64</span><br><span class="line">proxy: none</span><br><span class="line">node_mirror: http:&#x2F;&#x2F;npm.taobao.org&#x2F;mirrors&#x2F;node&#x2F; </span><br><span class="line">npm_mirror: https:&#x2F;&#x2F;npm.taobao.org&#x2F;mirrors&#x2F;npm&#x2F;</span><br></pre></td></tr></table></figure>

<h2 id="安装node-js"><a href="#安装node-js" class="headerlink" title="安装node.js"></a>安装node.js</h2><p>Node.js是一个新的后端(后台)语言，它的语法和JavaScript类似，所以可以说它是属于前端的后端语言，后端语言和前端语言的区别：</p>
<ul>
<li>运行环境：后端语言一般运行在服务器端，前端语言运行在客户端的浏览器上</li>
<li>功能：后端语言可以操作文件，可以读写数据库，前端语言不能操作文件，不能读写数据库。</li>
</ul>
<p>我们一般安装LTS(长线支持版本 Long-Time Support)：</p>
<p>下载地址：<a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">https://nodejs.org/en/download/</a>【上面已经安装了nvm，那么这里不用手动安装了】</p>
<p>node.js的版本有两大分支：</p>
<p>官方发布的node.js版本：0.xx.xx 这种版本号就是官方发布的版本</p>
<p>社区发布的node.js版本：xx.xx.x 就是社区开发的版本</p>
<p>Node.js如果安装成功，可以查看Node.js的版本,在终端输入如下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure>

<h2 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h2><p>在安装node.js完成后，在node.js中会同时帮我们安装一个npm包管理器npm。我们可以借助npm命令来安装node.js的包。这个工具相当于python的pip管理器。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g 包名              <span class="comment"># 安装模块   -g表示全局安装，如果没有-g，则表示在当前项目安装</span></span><br><span class="line">npm list                        <span class="comment"># 查看当前目录下已安装的node包</span></span><br><span class="line">npm view 包名 engines            <span class="comment"># 查看包所依赖的Node的版本 </span></span><br><span class="line">npm outdated                    <span class="comment"># 检查包是否已经过时，命令会列出所有已过时的包</span></span><br><span class="line">npm update 包名                  <span class="comment"># 更新node包</span></span><br><span class="line">npm uninstall 包名               <span class="comment"># 卸载node包</span></span><br><span class="line">npm 命令 -h                      <span class="comment"># 查看指定命令的帮助文档</span></span><br></pre></td></tr></table></figure>

<h2 id="安装Vue-cli"><a href="#安装Vue-cli" class="headerlink" title="安装Vue-cli"></a>安装Vue-cli</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g vue-cli</span><br></pre></td></tr></table></figure>

<p>如果安装速度过慢，一直超时，可以考虑切换npm镜像源：<a href="http://npm.taobao.org/" target="_blank" rel="noopener">http://npm.taobao.org/</a></p>
<h2 id="使用Vue-CLI初始化创建前端项目"><a href="#使用Vue-CLI初始化创建前端项目" class="headerlink" title="使用Vue-CLI初始化创建前端项目"></a>使用Vue-CLI初始化创建前端项目</h2><h3 id="生成项目目录"><a href="#生成项目目录" class="headerlink" title="生成项目目录"></a>生成项目目录</h3><p>使用vue-cli自动化工具可以快速搭建单页应用项目目录。</p>
<p>该工具为现代化的前端开发工作流提供了开箱即用的构建配置。只需几分钟即可创建并启动一个带热重载、保存时静态检查以及可用于生产环境的构建配置的项目：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 生成一个基于 webpack 模板的新项目</span><br><span class="line">vue init webpack 项目目录名</span><br><span class="line">例如：</span><br><span class="line">vue init webpack myproject</span><br><span class="line"></span><br><span class="line">// 启动开发服务器 ctrl+c 停止服务</span><br><span class="line"><span class="built_in">cd</span> myproject</span><br><span class="line">npm run dev           <span class="comment"># 运行这个命令就可以启动node提供的测试http服务器</span></span><br></pre></td></tr></table></figure>

<p>运行了上面代码以后,终端下会出现以下效果提示：</p>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/1552187745456.png" alt="1552187745456"></p>
<p>那么访问：<a href="http://localhost:8080/" target="_blank" rel="noopener">http://localhost:8080/</a></p>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/1552187794989.png" alt="1552187794989"></p>
<h3 id="项目目录结构"><a href="#项目目录结构" class="headerlink" title="项目目录结构"></a>项目目录结构</h3><p>src 主开发目录，要开发的单文件组件全部在这个目录下的components目录下</p>
<p>static 静态资源目录，所有的css，js，图片等资源文件放在这个文件夹</p>
<p>dist项目打包发布文件夹，最后要上线单文件项目文件都在这个文件夹中[后面打包项目,让项目中的vue组件经过编译变成js 代码以后,dist就出现了]</p>
<p>node_modules目录是node的依赖包目录</p>
<p>config是配置目录，</p>
<p>build是项目打包时依赖的目录</p>
<p>src/router 路由,后面需要我们在使用Router路由的时候,自己声明.</p>
<h3 id="vue项目执行流程图"><a href="#vue项目执行流程图" class="headerlink" title="vue项目执行流程图"></a>vue项目执行流程图</h3><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/page_structrue.png" alt="page_structrue"></p>
<p>page_structrue</p>
<p>整个项目是一个主文件index.html,index.html中会引入src文件夹中的main.js,main.js中会导入顶级单文件组件App.vue,App.vue中会通过组件嵌套或者路由来引用components文件夹中的其他单文件组件。</p>
<h2 id="单文件组件的使用"><a href="#单文件组件的使用" class="headerlink" title="单文件组件的使用"></a>单文件组件的使用</h2><p>组件有两种：普通组件、单文件组件</p>
<p>普通组件的缺点：</p>
<ol>
<li>html代码是作为js的字符串进行编写，所以组装和开发的时候不易理解，而且没有高亮效果。</li>
<li>普通组件用在小项目中非常合适，但是复杂的大项目中，如果把更多的组件放在html文件中，那么维护成本就会变得非常昂贵。</li>
<li>普通组件只是整合了js和html，但是css代码被剥离出去了。使用的时候的时候不好处理。</li>
</ol>
<p>将一个组件相关的html结构，css样式，以及交互的JavaScript代码从html文件中剥离出来，合成一个文件，这种文件就是单文件组件，相当于一个组件具有了结构、表现和行为的完整功能，方便组件之间随意组合以及组件的重用，这种文件的扩展名为“.vue”，比如：“Home.vue”。</p>
<ol>
<li>创建组件</li>
</ol>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/1552362045478.png" alt="1552362045478"></p>
<p>在组件中编辑三个标签，编写视图、vm对象和css样式代码。</p>
<h3 id="template-编写html代码的地方"><a href="#template-编写html代码的地方" class="headerlink" title="template 编写html代码的地方"></a>template 编写html代码的地方</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"Home"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> @<span class="attr">click</span>=<span class="string">"num--"</span> <span class="attr">class</span>=<span class="string">"sub"</span>&gt;</span>-<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">size</span>=<span class="string">"1"</span> <span class="attr">v-model</span>=<span class="string">"num"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> @<span class="attr">click</span>=<span class="string">"num++"</span> <span class="attr">class</span>=<span class="string">"add"</span>&gt;</span>+<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="script编写vue-js代码"><a href="#script编写vue-js代码" class="headerlink" title="script编写vue.js代码"></a>script编写vue.js代码</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    name:<span class="string">"Home"</span>,</span><br><span class="line">    data: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        num:<span class="number">0</span>,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="style编写当前组件的样式代码"><a href="#style编写当前组件的样式代码" class="headerlink" title="style编写当前组件的样式代码"></a>style编写当前组件的样式代码</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.sub</span>,<span class="selector-class">.add</span>&#123;</span></span><br><span class="line">    border: 1px solid red;</span><br><span class="line">    padding: 4px 7px;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="完成案例-点击加减数字"><a href="#完成案例-点击加减数字" class="headerlink" title="完成案例-点击加减数字"></a>完成案例-点击加减数字</h3><p>创建Homes.vue</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"add_num"</span>&gt;</span><br><span class="line">      &lt;span @click=<span class="string">"num++"</span>&gt;+&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">      &lt;input type="text" size="2" v-model="num"&gt;</span></span><br><span class="line"><span class="regexp">      &lt;span @click="num--"&gt;-&lt;/</span>span&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line">    name:<span class="string">"AddNum"</span>,</span><br><span class="line">    data: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        num: <span class="number">0</span>,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;style scoped&gt;</span></span><br><span class="line"><span class="regexp">   .add_num&#123;</span></span><br><span class="line"><span class="regexp">      font-size: 32px;</span></span><br><span class="line"><span class="regexp">   &#125;</span></span><br><span class="line"><span class="regexp">&lt;/</span>style&gt;</span><br></pre></td></tr></table></figure>

<p>在App.vue组件中调用上面的组件</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=<span class="string">"Home"</span>&gt;</span><br><span class="line">    &lt;span @click=<span class="string">"num--"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"sub"</span>&gt;-&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">    &lt;input type="text" size="1" v-model="num"&gt;</span></span><br><span class="line"><span class="regexp">    &lt;span @click="num++" class="add"&gt;+&lt;/</span>span&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    name:<span class="string">"Home"</span>,</span><br><span class="line">    data: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        num:<span class="number">0</span>,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;style scoped&gt;</span></span><br><span class="line"><span class="regexp">  .sub,.add&#123;</span></span><br><span class="line"><span class="regexp">    border: 1px solid red;</span></span><br><span class="line"><span class="regexp">    padding: 4px 7px;</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&lt;/</span>style&gt;</span><br></pre></td></tr></table></figure>

<p>在开发vue项目之前，需要手动把 App.vue的HelloWorld组件代码以及默认的css样式，清楚。</p>
<p>上面的代码效果：</p>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/1552362182984.png" alt="1552362182984"></p>
<h3 id="组件的嵌套"><a href="#组件的嵌套" class="headerlink" title="组件的嵌套"></a>组件的嵌套</h3><p>有时候开发vue项目时,页面也可以算是一个大组件,同时页面也可以分成多个子组件.</p>
<p>因为,产生了父组件调用子组件的情况.</p>
<p>例如,我们可以声明一个组件,作为父组件</p>
<p>在components/创建一个保存子组件的目录HomeSon</p>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/1552363669256.png" alt="1552363669256"></p>
<p>在HomeSon目录下,可以创建当前页面的子组件,例如,是Menu.vue</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  组件中代码必须写在同一个标签中</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div id=<span class="string">"menu"</span>&gt;</span><br><span class="line">      &lt;span&gt;&#123;&#123;msg&#125;&#125;&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">      &lt;div&gt;hello&lt;/</span>div&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    name:<span class="string">"Menu"</span>,</span><br><span class="line">    data: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        msg:<span class="string">"这是Menu组件里面的菜单"</span>,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>

<p>然后，在父组件中调用上面声明的子组件。</p>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/1552363770013.png" alt="1552363770013"></p>
<p>最后,父组件被App.vue调用.就可以看到页面效果.</p>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/1552363834171.png" alt="1552363834171"></p>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/1552363702858.png" alt="1552363702858"></p>
<p>效果:</p>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/1552363849977.png" alt="1552363849977"></p>
<h3 id="传递数据"><a href="#传递数据" class="headerlink" title="传递数据"></a>传递数据</h3><h3 id="父组件的数据传递给子组件"><a href="#父组件的数据传递给子组件" class="headerlink" title="父组件的数据传递给子组件"></a>父组件的数据传递给子组件</h3><p>例如,我们希望把父组件的数据传递给子组件.</p>
<p>可以通过props属性来进行数据传递.</p>
<p>传递数据三个步骤：</p>
<ol>
<li><p>在父组件中，调用子组件的组名处，使用属性值的方式往下传递数据</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Menu</span> <span class="attr">:mynum</span>=<span class="string">"num"</span> <span class="attr">title</span>=<span class="string">"home里面写的数据"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"># 上面表示在父组件调用Menu子组件的时候传递了2个数据：</span><br><span class="line">  如果要传递变量[变量可以各种类型的数据]，属性名左边必须加上冒号:，同时，属性名是自定义的，会在子组件中使用。</span><br><span class="line">  如果要传递普通字符串数据，则不需要加上冒号:</span><br></pre></td></tr></table></figure>
</li>
<li><p>在子组件中接受上面父组件传递的数据，需要在vm组件对象中，使用props属性类接受。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    name:<span class="string">"Menu"</span>,</span><br><span class="line">    props:[<span class="string">"mynum"</span>,<span class="string">"title"</span>],</span><br><span class="line">    data: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        msg:<span class="string">"这是Menu组件里面的菜单"</span>,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 上面 props属性中表示接受了两个数据。</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在子组件中的template中使用父组件传递过来的数据.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"menu"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;msg&#125;&#125;，&#123;&#123;title&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>hello，&#123;&#123;mynum&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>效果：</p>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/1552364511546.png" alt="1552364511546"></p>
<p>步骤流程:</p>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/1552364590540.png" alt="1552364590540"></p>
<p>使用父组件传递数据给子组件时, 注意一下几点:</p>
<ol>
<li><p>传递数据是变量,则需要在属性左边添加冒号.</p>
<p>传递数据是变量,这种数据称之为“动态数据传递”</p>
<p>传递数据不是变量,这种数据称之为“静态数据传递”</p>
</li>
<li><p>父组件中修改了数据,在子组件中会被同步修改,但是,子组件中的数据修改了,是不是影响到父组件中的数据.</p>
<p>这种情况,在开发时,也被称为“单向数据流”</p>
</li>
</ol>
<h3 id="子组件传递数据给父组件"><a href="#子组件传递数据给父组件" class="headerlink" title="子组件传递数据给父组件"></a>子组件传递数据给父组件</h3><ol>
<li><p>在子组件中，通过<code>this.$emit()</code>来调用父组件中定义的事件.</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;p&gt;Post的子组件&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">      &lt;h2&gt;&#123;&#123;fnum&#125;&#125;&lt;/</span>h2&gt;</span><br><span class="line">      &lt;p&gt;data=&#123;&#123;data&#125;&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">      &lt;p&gt;fnum=&#123;&#123;fnum&#125;&#125;&lt;/</span>p&gt;</span><br><span class="line">      &lt;div&gt;<span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"fnum"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">        name: <span class="string">"PostSon"</span>,</span><br><span class="line">        <span class="comment">// 父组件传递数据给子组件: 1. 在父组件中调用子组件的组件名称标签上面声明属性和传递值，2. 在子组件中通过props进行接收</span></span><br><span class="line">        props:[<span class="string">"data"</span>,<span class="string">"fnum"</span>],  <span class="comment">// 接受父组件中传递过来的数据</span></span><br><span class="line">        <span class="comment">// 子组件传递数据给父组件[事件的方式进行传递]：</span></span><br><span class="line">        watch:&#123;</span><br><span class="line">          fnum()&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.fnum);</span><br><span class="line">            <span class="comment">// this.$emit("父元素的自定义事件","要传递的数据");  // 通过this.$emit()方法，子组件可以把数据传递给父组件</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">this</span>.$emit(<span class="string">"postparentdata"</span>,<span class="keyword">this</span>.fnum);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;style scoped&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;/</span>style&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>父组件中声明一个和子组件中<code>this.$emit(&quot;自定义事件名称&quot;)</code>对应的事件属性。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>num=&#123;&#123;num&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">Son</span> <span class="attr">data</span>=<span class="string">"我是付组件里面的内容"</span> <span class="attr">:fnum</span>=<span class="string">"num"</span> @<span class="attr">postparentdata</span>=<span class="string">"getsondata"</span>&gt;</span><span class="tag">&lt;/<span class="name">Son</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>父组件中，声明一个自定义方法，在事件被调用时，执行的。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">import</span> Son <span class="keyword">from</span> <span class="string">"./PostSon"</span></span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">        name: <span class="string">"Post"</span>,</span><br><span class="line">        data()&#123;</span><br><span class="line">          <span class="keyword">return</span> &#123;</span><br><span class="line">            num: <span class="number">100</span>,</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        components:&#123;</span><br><span class="line">          Son:Son,</span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">          getsondata(message)&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"父组件"</span>+message);</span><br><span class="line">            <span class="keyword">this</span>.num = message;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="在组件中使用axios获取数据"><a href="#在组件中使用axios获取数据" class="headerlink" title="在组件中使用axios获取数据"></a>在组件中使用axios获取数据</h2><p>默认情况下，我们的项目中并没有对axios包的支持，所以我们需要下载安装。</p>
<p>在项目根目录中使用 npm安装包</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install axios</span><br></pre></td></tr></table></figure>

<p>接着在main.js文件中，导入axios并把axios对象 挂载到vue属性中多为一个子对象，这样我们才能在组件中使用。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">// The Vue build version to load <span class="keyword">with</span> the `<span class="keyword">import</span>` command</span><br><span class="line">// (runtime-only <span class="keyword">or</span> standalone) has been set <span class="keyword">in</span> webpack.base.conf <span class="keyword">with</span> an alias.</span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App'</span> // 这里表示从别的目录下导入 单文件组件</span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span>; // 从node_modules目录中导入包</span><br><span class="line">Vue.config.productionTip = false</span><br><span class="line"></span><br><span class="line">Vue.prototype.$axios = axios; // 把对象挂载vue中</span><br><span class="line"></span><br><span class="line">/* eslint-disable no-new */</span><br><span class="line">new Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  components: &#123; App &#125;,</span><br><span class="line">  template: <span class="string">'&lt;App/&gt;'</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="在组建中使用axios获取数据"><a href="#在组建中使用axios获取数据" class="headerlink" title="在组建中使用axios获取数据"></a>在组建中使用axios获取数据</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line">	。。。</span><br><span class="line">	methods:&#123;</span><br><span class="line">      get_data:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">         <span class="comment">// 使用axios请求数据</span></span><br><span class="line">        <span class="keyword">this</span>.$axios.get(<span class="string">"http://wthrcdn.etouch.cn/weather_mini?city=深圳"</span>).then(<span class="function">(<span class="params">response</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(response);</span><br><span class="line">        &#125;).catch(<span class="function"><span class="params">error</span>=&gt;</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(error);</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果:</p>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/1552202922168.png" alt="1552202922168">使用的时候，因为本质上来说，我们还是原来的axios，所以也会收到同源策略的影响。</p>
]]></content>
      <categories>
        <category>前端框架</category>
      </categories>
      <tags>
        <tag>vue框架</tag>
      </tags>
  </entry>
  <entry>
    <title>[前端Vue框架]</title>
    <url>/2020/02/01/%E5%89%8D%E7%AB%AFVue%E6%A1%86%E6%9E%B6/</url>
    <content><![CDATA[<h1 id="Vue框架"><a href="#Vue框架" class="headerlink" title="Vue框架"></a>Vue框架</h1><p>Vue.js是一款流行的JavaScript前端框架，旨在更好地组织与简化Web开发。Vue所关注的核心是MVC模式中的视图层，同时，它也能方便地取得资料更新，并通过组件内部特定的方法实现视图与模型的互动。</p>
<p><a href="https://rogerxs80.github.io/2020/02/22/vue%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8/" target="_blank" rel="noopener">1.Vue快速入门使用</a></p>
<p><a href="https://rogerxs80.github.io/2020/02/23/vue%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%B1%9E%E6%80%A7%E5%8A%9F%E8%83%BD/" target="_blank" rel="noopener">2.Vue对象的属性功能</a></p>
<p><a href="https://rogerxs80.github.io/2020/02/24/axios%E4%B8%8E%E7%BB%84%E4%BB%B6%E5%8C%96%E5%BC%80%E5%8F%91/" target="_blank" rel="noopener">3.axios与组件化开发</a></p>
<p><a href="https://rogerxs80.github.io/2020/02/26/Vue%E8%87%AA%E5%8A%A8%E5%8C%96%E5%B7%A5%E5%85%B7%EF%BC%88Vue-cli%EF%BC%89/" target="_blank" rel="noopener">4.Vue自动化工具（Vue-cli）</a></p>
<p><a href="https://rogerxs80.github.io/2020/02/27/Vue%E5%AE%A2%E6%88%B7%E7%AB%AF%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/" target="_blank" rel="noopener">5.Vue客户端项目搭建</a></p>
]]></content>
      <categories>
        <category>前端框架</category>
      </categories>
      <tags>
        <tag>vue框架</tag>
      </tags>
  </entry>
  <entry>
    <title>[前端开发]</title>
    <url>/2020/05/12/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<h1 id="前端开发"><a href="#前端开发" class="headerlink" title="前端开发"></a>前端开发</h1><p>前端开发是创建Web页面或app等前端界面呈现给用户的过程，通过HTML，CSS及JavaScript以及衍生出来的各种技术、框架、解决方案，来实现互联网产品的用户界面交互 。它从网页制作演变而来，名称上有很明显的时代特征。在互联网的演化进程中，网页制作是Web1.0时代的产物，早期网站主要内容都是静态，以图片和文字为主，用户使用网站的行为也以浏览为主。随着互联网技术的发展和HTML5、CSS3的应用，现代网页更加美观，交互效果显著，功能更加强大。</p>
<p><a href="https://rogerxs80.github.io/2019/07/12/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8%E4%B8%8E%E6%A0%87%E7%AD%BE%E4%BD%BF%E7%94%A8/" target="_blank" rel="noopener">1.前端入门与标签使用</a></p>
<p><a href="https://rogerxs80.github.io/2019/07/12/CSS%E9%80%89%E6%8B%A9%E5%99%A8%E4%B8%8E%E5%B1%9E%E6%80%A7/" target="_blank" rel="noopener">2.CSS选择器与属性</a></p>
<p><a href="https://rogerxs80.github.io/2019/07/12/JavaScript%E5%85%A5%E9%97%A8/" target="_blank" rel="noopener">3.JavaScript入门</a></p>
<p><a href="https://rogerxs80.github.io/2019/07/12/JQuery%E5%85%A5%E9%97%A8/" target="_blank" rel="noopener">4.JQury入门</a></p>
<p><a href="https://rogerxs80.github.io/2019/07/13/Bootstrap%E6%A1%86%E6%9E%B6/" target="_blank" rel="noopener">5.BootStrap框架</a></p>
]]></content>
      <categories>
        <category>前端开发</category>
      </categories>
      <tags>
        <tag>前端入门</tag>
      </tags>
  </entry>
  <entry>
    <title>[axios与组件化开发]</title>
    <url>/2020/02/24/axios%E4%B8%8E%E7%BB%84%E4%BB%B6%E5%8C%96%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<h1 id="通过axios实现数据请求"><a href="#通过axios实现数据请求" class="headerlink" title="通过axios实现数据请求"></a>通过axios实现数据请求</h1><p>vue.js默认没有提供ajax功能的。</p>
<p>所以使用vue的时候，一般都会使用axios的插件来实现ajax与后端服务器的数据交互。</p>
<p>注意，axios本质上就是javascript的ajax封装，所以会被<strong>同源策略</strong>限制。</p>
<p>下载地址：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;unpkg.com&#x2F;axios@0.18.0&#x2F;dist&#x2F;axios.js</span><br><span class="line">https:&#x2F;&#x2F;unpkg.com&#x2F;axios@0.18.0&#x2F;dist&#x2F;axios.min.js</span><br></pre></td></tr></table></figure>

<p>使用文档：<a href="https://www.kancloud.cn/yunye/axios/234845" target="_blank" rel="noopener">https://www.kancloud.cn/yunye/axios/234845</a> </p>
<p>axios提供发送http请求的常用方法有两个：axios.get() 和 axios.post() 。</p>
<p>增 post</p>
<p>删 delete</p>
<p>改 put/patch</p>
<p>查 get</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 发送get请求</span></span><br><span class="line">    <span class="comment">// 参数1: 必填，字符串，请求的数据接口的url地址，例如请求地址：http://www.baidu.com?id=200</span></span><br><span class="line">    <span class="comment">// 参数2：可选，请求参数和请求头内容，json对象，要提供给数据接口的参数</span></span><br><span class="line">	axios.get(<span class="string">'服务器的资源地址'</span>,&#123; <span class="comment">// http://www.baidu.com</span></span><br><span class="line">    	params:&#123;</span><br><span class="line">    		参数名:<span class="string">'参数值'</span>, <span class="comment">// id: 200,</span></span><br><span class="line">    	&#125;,</span><br><span class="line">        headers:&#123;</span><br><span class="line">            选项名:<span class="string">'选项值'</span>, <span class="comment">// 请求头</span></span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">    &#125;).then(<span class="function"><span class="params">response</span>=&gt;</span>&#123; <span class="comment">// 请求成功以后的回调函数</span></span><br><span class="line">    		<span class="built_in">console</span>.log(<span class="string">"请求成功"</span>);</span><br><span class="line">    		<span class="built_in">console</span>.log(response.data); <span class="comment">// 获取服务端提供的数据</span></span><br><span class="line">    </span><br><span class="line">    &#125;).catch(<span class="function"><span class="params">error</span>=&gt;</span>&#123;   <span class="comment">// 请求失败以后的回调函数</span></span><br><span class="line">    		<span class="built_in">console</span>.log(<span class="string">"请求失败"</span>);</span><br><span class="line">    		<span class="built_in">console</span>.log(error.response);  <span class="comment">// 获取错误信息</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 发送post请求，参数和使用和axios.get()类似。</span></span><br><span class="line">    <span class="comment">// 参数1: 必填，字符串，请求的数据接口的url地址</span></span><br><span class="line">    <span class="comment">// 参数2：必填，json对象，要提供给数据接口的参数,如果没有参数，则必须使用&#123;&#125;</span></span><br><span class="line">    <span class="comment">// 参数3：可选，json对象，请求头信息</span></span><br><span class="line">    axios.post(<span class="string">'服务器的资源地址'</span>,&#123;</span><br><span class="line">    	username: <span class="string">'xiaoming'</span>,</span><br><span class="line">    	password: <span class="string">'123456'</span></span><br><span class="line">    &#125;,&#123;</span><br><span class="line">        headers:&#123;</span><br><span class="line">            选项名:<span class="string">"选项值"</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    .then(<span class="function"><span class="params">response</span>=&gt;</span>&#123; <span class="comment">// 请求成功以后的回调函数</span></span><br><span class="line">      <span class="built_in">console</span>.log(response);</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(<span class="function"><span class="params">error</span>=&gt;</span>&#123;   <span class="comment">// 请求失败以后的回调函数</span></span><br><span class="line">      <span class="built_in">console</span>.log(error);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">	</span><br><span class="line">	<span class="comment">// b'firstName=Fred&amp;lastName=Flintstone'</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：axios.delete() 的用法和参数与axios.get()一样，axios.put()或者axios.patch的用法和参数与axios.post()一样。在http协议中，不同的请求动作都有不同的含义，例如：get 代表向目标服务器请求获取数据post 代表向目标服务器请求上传数据put 代表向目标服务器请求更新数据【修改全部数据】patch 代表向目标服务器请求更新数据【修改部分数据】patch 代表向目标服务器请求更新数据delete 代表向目标服务器请求删除数据</p>
</blockquote>
<h2 id="json"><a href="#json" class="headerlink" title="json"></a>json</h2><p>json是 JavaScript Object Notation 的首字母缩写，单词的意思是javascript对象表示法，这里说的json指的是类似于javascript对象的一种数据格式。</p>
<p>json的作用：在不同的系统平台，或不同编程语言之间传递数据。</p>
<h3 id="json数据的语法"><a href="#json数据的语法" class="headerlink" title="json数据的语法"></a>json数据的语法</h3><p>json数据对象类似于JavaScript中的对象，但是它的键对应的值里面是没有函数方法的，值可以是普通变量，不支持undefined，值还可以是数组或者json对象。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 原生的js的json对象</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  age:<span class="number">10</span>,</span><br><span class="line">  sex: <span class="string">'女'</span>,</span><br><span class="line">  work()&#123;                     <span class="comment">// work: function()&#123;&#125;的简写</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"好好学习"</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// json数据的对象格式,json数据格式,是没有方法的,只有属性,属性值：字符串，数值(整数，浮点数，布尔值), json，</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"name"</span>:<span class="string">"tom"</span>,</span><br><span class="line">    <span class="string">"age"</span>:<span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// json数据的数组格式：</span></span><br><span class="line">[<span class="string">"tom"</span>,<span class="number">18</span>,<span class="string">"programmer"</span>]</span><br></pre></td></tr></table></figure>

<p>复杂的json格式数据可以包含对象和数组的写法。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>:<span class="string">"小明"</span>,</span><br><span class="line">  <span class="attr">"age"</span>:<span class="number">200</span>,</span><br><span class="line">  <span class="attr">"is_delete"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"fav"</span>:[<span class="string">"code"</span>,<span class="string">"eat"</span>,<span class="string">"swim"</span>,<span class="string">"read"</span>],</span><br><span class="line">  <span class="attr">"son"</span>:&#123;</span><br><span class="line">    <span class="attr">"name"</span>:<span class="string">"小小明"</span>,</span><br><span class="line">    <span class="attr">"age"</span>:<span class="number">100</span>,</span><br><span class="line">    <span class="attr">"lve"</span>:[<span class="string">"code"</span>,<span class="string">"eat"</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数组结构也可以作为json传输数据。</span></span><br></pre></td></tr></table></figure>

<p>json数据可以保存在.json文件中，一般里面就只有一个json对象。</p>
<p>总结：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">1. json文件的后缀是.json</span><br><span class="line">2. json文件一般保存一个单一的json数据</span><br><span class="line">3. json数据的属性不能是方法或者undefined，属性值只能：数值[整数,小数,布尔值]、字符串、json和数组</span><br><span class="line">4. json数据只使用双引号、每一个属性成员之间使用逗号隔开，并且最后一个成员没有逗号。</span><br><span class="line">   &#123;</span><br><span class="line">      <span class="attr">"name"</span>:<span class="string">"小明"</span>,</span><br><span class="line">      <span class="attr">"age"</span>:<span class="number">200</span>,</span><br><span class="line">      <span class="attr">"fav"</span>:[<span class="string">"code"</span>,<span class="string">"eat"</span>,<span class="string">"swim"</span>,<span class="string">"read"</span>],</span><br><span class="line">      <span class="attr">"son"</span>:&#123;</span><br><span class="line">        <span class="attr">"name"</span>:<span class="string">"小小明"</span>,</span><br><span class="line">        <span class="attr">"age"</span>:<span class="number">100</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>工具：postman可以用于测试开发的数据接口。</p>
<p>postman就是一个软件，专门提供给开发者组织和测试http请求的。</p>
<h3 id="js中提供的json数据转换方法"><a href="#js中提供的json数据转换方法" class="headerlink" title="js中提供的json数据转换方法"></a>js中提供的json数据转换方法</h3><p>javascript提供了一个JSON对象来操作json数据的数据转换.</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>参数</th>
<th>返回值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>stringify</td>
<td>json对象</td>
<td>字符串</td>
<td>json对象转成字符串</td>
</tr>
<tr>
<td>parse</td>
<td>字符串</td>
<td>json对象</td>
<td>字符串格式的json数据转成json对象</td>
</tr>
</tbody></table>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// json语法</span></span><br><span class="line">    <span class="keyword">let</span> humen = &#123;</span><br><span class="line">        <span class="string">"username"</span>:<span class="string">"xiaohui"</span>,</span><br><span class="line">        <span class="string">"password"</span>:<span class="string">"1234567"</span>,</span><br><span class="line">        <span class="string">"age"</span>:<span class="number">20</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(humen);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span> humen);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// JSON对象提供对json格式数据的转换功能</span></span><br><span class="line">    <span class="comment">// stringify(json对象)  # 用于把json转换成字符串</span></span><br><span class="line">    <span class="keyword">let</span> result = <span class="built_in">JSON</span>.stringify(humen);</span><br><span class="line">    <span class="built_in">console</span>.log(result);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span> result);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// parse(字符串类型的json数据)  # 用于把字符串转成json对象</span></span><br><span class="line">    <span class="keyword">let</span> json_str = <span class="string">'&#123;"password":"1123","age":20,"name":"xiaobai"&#125;'</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(json_str)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span> json_str)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> json_obj = <span class="built_in">JSON</span>.parse(json_str);</span><br><span class="line">    <span class="built_in">console</span>.log(json_obj);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span> json_obj)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(json_obj.age)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="ajax"><a href="#ajax" class="headerlink" title="ajax"></a>ajax</h2><p>ajax，一般中文称之为：“阿贾克斯”，是英文 “Async Javascript And Xml”的简写，译作：异步js和xml数据传输数据。</p>
<p>ajax的作用： ajax可以让js代替浏览器向后端程序发送http请求，与后端通信，在用户不知道的情况下操作数据和信息，从而实现页面局部刷新数据/无刷新更新数据。</p>
<p>所以web开发中ajax是很常用的技术，主要用于操作后端提供的<code>数据接口</code>，从而实现网站的<code>前后端分离</code>。</p>
<p>ajax技术的原理是实例化js的XMLHttpRequest对象，使用此对象提供的内置方法就可以与后端进行数据通信。</p>
<blockquote>
<p>实际而言，axios或者jQuery提供的ajax，本质上就是XMLHttpRequest对象操作的封装。</p>
</blockquote>
<h3 id="数据接口"><a href="#数据接口" class="headerlink" title="数据接口"></a>数据接口</h3><p>数据接口，也叫api接口，表示<code>后端提供</code>操作数据/功能的url地址给客户端使用。</p>
<p>客户端通过发起请求向服务端提供的url地址申请操作数据【操作一般：增删查改】</p>
<p>同时在工作中，大部分数据接口都不是手写，而是通过函数库/框架来生成。</p>
<h3 id="ajax的使用"><a href="#ajax的使用" class="headerlink" title="ajax的使用"></a>ajax的使用</h3><p>ajax的使用必须与服务端程序配合使用，但是目前我们先学习ajax的使用，所以暂时先不涉及到服务端python代码的编写。因此，我们可以使用别人写好的数据接口进行调用。</p>
<p>jQuery将ajax封装成了一个函数$.ajax()，我们可以直接用这个函数来执行ajax请求。</p>
<table>
<thead>
<tr>
<th>接口</th>
<th>地址</th>
</tr>
</thead>
<tbody><tr>
<td>天气接口</td>
<td><a href="http://wthrcdn.etouch.cn/weather_mini?city=城市名称" target="_blank" rel="noopener">http://wthrcdn.etouch.cn/weather_mini?city=城市名称</a></td>
</tr>
<tr>
<td>音乐接口搜索</td>
<td><a href="http://tingapi.ting.baidu.com/v1/restserver/ting?method=baidu.ting.search.catalogSug&amp;query=歌曲标题" target="_blank" rel="noopener">http://tingapi.ting.baidu.com/v1/restserver/ting?method=baidu.ting.search.catalogSug&amp;query=歌曲标题</a></td>
</tr>
<tr>
<td>音乐信息接口</td>
<td><a href="http://tingapi.ting.baidu.com/v1/restserver/ting?method=baidu.ting.song.play&amp;songid=音乐ID" target="_blank" rel="noopener">http://tingapi.ting.baidu.com/v1/restserver/ting?method=baidu.ting.song.play&amp;songid=音乐ID</a></td>
</tr>
</tbody></table>
<p>编写代码获取接口提供的数据：</p>
<p>jQ版本</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">    &lt;script src="js/</span>jquery<span class="number">-1.12</span><span class="number">.4</span>.js<span class="string">"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">    &lt;script&gt;</span></span><br><span class="line"><span class="string">    $(function()&#123;</span></span><br><span class="line">        $("#btn").on("click",function()&#123;</span><br><span class="line">            $.ajax(&#123;</span><br><span class="line">                <span class="comment">// 后端程序的url地址</span></span><br><span class="line">                url: <span class="string">'http://wthrcdn.etouch.cn/weather_mini'</span>,</span><br><span class="line">                <span class="comment">// 也可以使用method，提交数据的方式，默认是'GET'，常用的还有'POST'</span></span><br><span class="line">                type: <span class="string">'get'</span>, </span><br><span class="line">                dataType: <span class="string">'json'</span>,  <span class="comment">// 返回的数据格式，常用的有是'json','html',"jsonp"</span></span><br><span class="line">                data:&#123; <span class="comment">// 设置发送给服务器的数据，如果是get请求，也可以写在url地址的?后面</span></span><br><span class="line">                    <span class="string">"city"</span>:<span class="string">'北京'</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">            .done(<span class="function"><span class="keyword">function</span>(<span class="params">resp</span>) </span>&#123;     <span class="comment">// 请求成功以后的操作</span></span><br><span class="line">                <span class="built_in">console</span>.log(resp);</span><br><span class="line">            &#125;)</span><br><span class="line">            .fail(<span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;    <span class="comment">// 请求失败以后的操作</span></span><br><span class="line">                <span class="built_in">console</span>.log(error);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">    &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;button id=<span class="string">"btn"</span>&gt;点击获取数据&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure>

<p>vue版本：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">    &lt;script src="js/</span>vue.js<span class="string">"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">    &lt;script src="</span>js/axios.js<span class="string">"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">    &lt;div id="</span>app<span class="string">"&gt;</span></span><br><span class="line"><span class="string">        &lt;input type="</span>text<span class="string">" v-model="</span>city<span class="string">"&gt;</span></span><br><span class="line"><span class="string">        &lt;button @click="</span>get_weather<span class="string">"&gt;点击获取天气&lt;/button&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;script&gt;</span></span><br><span class="line"><span class="string">        let vm = new Vue(&#123;</span></span><br><span class="line">            el:"#app",</span><br><span class="line">            data:&#123;</span><br><span class="line">                city:<span class="string">""</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">            methods:&#123;</span><br><span class="line">                get_weather()&#123;</span><br><span class="line">                    <span class="comment">// http://wthrcdn.etouch.cn/weather_mini?city=城市名称</span></span><br><span class="line">                    axios.get(<span class="string">"http://wthrcdn.etouch.cn/weather_mini?city="</span>+<span class="keyword">this</span>.city)</span><br><span class="line">                        .then(<span class="function"><span class="params">response</span>=&gt;</span>&#123;</span><br><span class="line">                            <span class="built_in">console</span>.log(response);</span><br><span class="line"></span><br><span class="line">                        &#125;).catch(<span class="function"><span class="params">error</span>=&gt;</span>&#123;</span><br><span class="line">                            <span class="built_in">console</span>.log(error.response)</span><br><span class="line">                    &#125;);</span><br><span class="line">                  <span class="comment">// 上面的参数写法,也可以是下面这种格式:</span></span><br><span class="line">                  <span class="comment">// axios.get("http://wthrcdn.etouch.cn/weather_mini",&#123;</span></span><br><span class="line">                  <span class="comment">//     // get请求的附带参数</span></span><br><span class="line">                  <span class="comment">//     params:&#123;</span></span><br><span class="line">                  <span class="comment">//         "city":"广州",</span></span><br><span class="line">                  <span class="comment">//     &#125;</span></span><br><span class="line">                  <span class="comment">// &#125;).then(response=&gt;&#123;</span></span><br><span class="line">                  <span class="comment">//     console.log(response.data);  // 获取接口数据</span></span><br><span class="line">                  <span class="comment">// &#125;).catch(error=&gt;&#123;</span></span><br><span class="line">                  <span class="comment">//     console.log(error.response); // 获取错误信息</span></span><br><span class="line">                  <span class="comment">// &#125;)</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="同源策略"><a href="#同源策略" class="headerlink" title="同源策略"></a>同源策略</h3><p>同源策略，是浏览器为了保护用户信息安全的一种安全机制。所谓的同源就是指代通信的两个地址（例如服务端接口地址与浏览器客户端页面地址）之间比较，是否协议、域名(IP)和端口相同。不同源的客户端脚本[javascript]在没有得到服务端的明确授权的情况下，浏览器会拒绝显示服务端信息提供给前端ajax。</p>
<p>ajax本质上还是javascript，是运行在浏览器中的脚本语言，所以会被受到浏览器的同源策略所限制。</p>
<table>
<thead>
<tr>
<th>前端地址：<code>http://www.oldboy.cn/index.html</code></th>
<th>是否同源</th>
<th>原因</th>
</tr>
</thead>
<tbody><tr>
<td><code>http://www.oldboy.cn/user/login.html</code></td>
<td>是</td>
<td>协议、域名、端口相同</td>
</tr>
<tr>
<td><code>http://www.oldboy.cn/about.html</code></td>
<td>是</td>
<td>协议、域名、端口相同</td>
</tr>
<tr>
<td><code>https://www.oldboy.cn:443/user/login.html</code></td>
<td>否</td>
<td>协议不同 ( https和http )</td>
</tr>
<tr>
<td><code>http:/www.oldboy.cn:5000/user/login.html</code></td>
<td>否</td>
<td>端口 不同( 5000和80)</td>
</tr>
<tr>
<td><code>http://bbs.oldboy.cn/user/login.html</code></td>
<td>否</td>
<td>域名不同 ( bbs和www )</td>
</tr>
</tbody></table>
<p>同源策略针对ajax的拦截，代码：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">    &lt;script src="js/</span>vue.js<span class="string">"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">    &lt;script src="</span>js/axios.js<span class="string">"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">    &lt;div id="</span>app<span class="string">"&gt;</span></span><br><span class="line"><span class="string">        &lt;input type="</span>text<span class="string">" v-model="</span>music<span class="string">"&gt;&lt;button @click="</span>get_music<span class="string">"&gt;查询歌曲&lt;/button&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;script&gt;</span></span><br><span class="line"><span class="string">        var vm = new Vue(&#123;</span></span><br><span class="line">            el:"#app",</span><br><span class="line">            data:&#123;</span><br><span class="line">                music:<span class="string">""</span>, <span class="comment">// 歌曲标题</span></span><br><span class="line">            &#125;,</span><br><span class="line">            methods:&#123;</span><br><span class="line">                get_music()&#123;</span><br><span class="line">                    axios.get(<span class="string">`http://tingapi.ting.baidu.com/v1/restserver/ting`</span>,&#123;</span><br><span class="line">                        params:&#123;</span><br><span class="line">                            method:<span class="string">"baidu.ting.search.catalogSug"</span>,</span><br><span class="line">                            query:<span class="keyword">this</span>.music,</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;).then(<span class="function"><span class="params">response</span>=&gt;</span>&#123;</span><br><span class="line">                        <span class="built_in">console</span>.log(<span class="string">"查询数据成功！"</span>);</span><br><span class="line">                    &#125;).catch(<span class="function"><span class="params">error</span>=&gt;</span>&#123;</span><br><span class="line">                        <span class="built_in">console</span>.log(<span class="string">"查询数据失败！"</span>);</span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure>

<p>上面代码运行错误如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Access to XMLHttpRequest at <span class="string">'http://tingapi.ting.baidu.com/v1/restserver/ting?method=baidu.ting.search.catalogSug&amp;query=%E6%88%91%E7%9A%84%E4%B8%AD%E5%9B%BD%E5%BF%83'</span> <span class="keyword">from</span> origin <span class="string">'http://localhost:63342'</span> has been blocked by CORS policy: No <span class="string">'Access-Control-Allow-Origin'</span> header <span class="keyword">is</span> present on the requested resource.</span><br></pre></td></tr></table></figure>

<p>上面错误，关键词：Access-Control-Allow-Origin</p>
<p>只要出现这个关键词，就是访问受限。出现同源策略的拦截问题。</p>
<h3 id="ajax跨域-跨源-方案之CORS"><a href="#ajax跨域-跨源-方案之CORS" class="headerlink" title="ajax跨域(跨源)方案之CORS"></a>ajax跨域(跨源)方案之CORS</h3><p>ajax跨域(跨源)方案：服务端授权[CORS]，jsonp，服务端代理</p>
<p> CORS是一个W3C标准，全称是“跨域资源共享”，它允许浏览器向跨源的后端服务器发出ajax请求，从而克服了AJAX只能同源使用的限制。</p>
<p> 实现CORS主要依靠后端服务器中响应数据中设置响应头信息返回的。</p>
<p>django的视图[伪代码]</p>
<p>def post(request):</p>
<p> response = new Response()</p>
<p> response .set_header(“Access-Control-Allow-Origin”,“<a href="http://localhost:63342”">http://localhost:63342”</a>)</p>
<p> return response;</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">// 在响应行信息里面设置以下内容：</span><br><span class="line">Access-Control-Allow-Origin: ajax所在的域名地址</span><br><span class="line"></span><br><span class="line">Access-Control-Allow-Origin: www.oldboy.cn  <span class="comment"># 表示只允许www.oldboy.cn域名的客户端的ajax跨域访问</span></span><br><span class="line"></span><br><span class="line">// * 表示任意源，表示允许任意源下的客户端的ajax都可以访问当前服务端信息</span><br><span class="line">Access-Control-Allow-Origin: *</span><br></pre></td></tr></table></figure>

<p><img src="/images/1556074087897.png" alt=""></p>
<p>总结：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0. 同源策略：浏览器的一种保护用户数据的一种安全机制。</span><br><span class="line">   浏览器会限制ajax不能跨源访问其他源的数据地址。</span><br><span class="line">   同源：判断两个通信的地址之间，是否协议，域名[IP]，端口一致。</span><br><span class="line">   </span><br><span class="line">   ajax：  http:&#x2F;&#x2F;127.0.0.1&#x2F;index.html</span><br><span class="line">   api数据接口：  http:&#x2F;&#x2F;localhost&#x2F;index</span><br><span class="line">   </span><br><span class="line">   这两个是同源么？不是同源的。是否同源的判断依据不会根据电脑来判断，而是通过协议、域名、端口的字符串是否来判断。</span><br><span class="line">   </span><br><span class="line">1. ajax默认情况下会受到同源策略的影响，一旦受到影响会报错误如下：</span><br><span class="line">	 No &#39;Access-Control-Allow-Origin&#39; header is present on the requested resource</span><br><span class="line"></span><br><span class="line">2. 解决ajax只能同源访问数据接口的方式：</span><br><span class="line">   1. CORS，跨域资源共享，在服务端的响应行中设置：</span><br><span class="line">      Access-Control-Allow-Origin: 允许访问的域名地址</span><br><span class="line">   2. jsonp</span><br><span class="line">   	  所谓的jsonp本质上来说不是ajax技术，jsonp的核心实现是依靠script本身加载外部js文件来实现的。</span><br><span class="line">   	  当然，实现jsonp技术，也需要服务端的配合</span><br><span class="line">   3. 是否服务端代理</span><br><span class="line">      思路：通过python来请求对应的服务器接口，客户端和python这边处于同源，那么就实现了服务端代理</span><br></pre></td></tr></table></figure>

<h1 id="组件化开发"><a href="#组件化开发" class="headerlink" title="组件化开发"></a>组件化开发</h1><h2 id="组件-component"><a href="#组件-component" class="headerlink" title="组件[component]"></a>组件[component]</h2><p>组件（Component）是自定义封装的功能。在前端开发过程中，经常出现多个网页的功能是重复的，而且很多不同的页面之间，也存在同样的功能。</p>
<p>而在网页中实现一个功能，需要使用html定义功能的内容结构，使用css声明功能的外观样式，还要使用js来定义功能的特效，因此就产生了把一个功能相关的[HTML、css和javascript]代码封装在一起组成一个整体的代码块封装模式，我们称之为“组件”。</p>
<p>所以，组件就是一个html网页中的功能，一般就是一个标签，标签中有自己的html内容结构，css样式和js特效。</p>
<p>这样，前端人员就可以在组件化开发时，只需要书写一次代码，随处引入即可使用。</p>
<p>vue的组件有两种：默认组件[全局组件] 和 单文件组件</p>
<h3 id="5-1-1-默认组件"><a href="#5-1-1-默认组件" class="headerlink" title="5.1.1 默认组件"></a>5.1.1 默认组件</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">addnum</span>&gt;</span><span class="tag">&lt;/<span class="name">addnum</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">addnum</span>&gt;</span><span class="tag">&lt;/<span class="name">addnum</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">addnum</span>&gt;</span><span class="tag">&lt;/<span class="name">addnum</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">addnum</span>&gt;</span><span class="tag">&lt;/<span class="name">addnum</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">addnum</span>&gt;</span><span class="tag">&lt;/<span class="name">addnum</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    Vue.component(<span class="string">"addnum"</span>,&#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">        template:'<span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"num"</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"num+=1"</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>',</span></span></span><br><span class="line"><span class="actionscript">        data: <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 写在这里的数据只有当前组件可以使用</span></span></span><br><span class="line"><span class="actionscript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line">                num:1,</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el:<span class="string">"#app"</span>,</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 这里写的数据是全局公用的，整个文件共享</span></span></span><br><span class="line">        data:&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="Vue自动化工具（Vue-cli）"><a href="#Vue自动化工具（Vue-cli）" class="headerlink" title="Vue自动化工具（Vue-cli）"></a>Vue自动化工具（Vue-cli）</h1><p>前面学习了普通组件以后，接下来我们继续学习单文件组件则需要提前先安装准备一些组件开发工具。否则无法使用和学习单文件组件。</p>
<p>一般情况下，单文件组件，我们运行在 自动化工具vue-CLI中，可以帮我们编译单文件组件。所以我们需要在系统中先搭建vue-CLI工具，</p>
<p>官网：<a href="https://cli.vuejs.org/zh/" target="_blank" rel="noopener">https://cli.vuejs.org/zh/</a></p>
<p>Vue CLI 需要 <a href="https://nodejs.org/" target="_blank" rel="noopener">Node.js</a> 8.9 或更高版本 (推荐 8.11.0+)。你可以使用 <a href="https://github.com/creationix/nvm" target="_blank" rel="noopener">nvm</a> 或 <a href="https://github.com/coreybutler/nvm-windows" target="_blank" rel="noopener">nvm-windows</a>在同一台电脑中管理多个 Node 版本。</p>
<p>nvm工具的下载和安装： </p>
<p><a href="https://www.jianshu.com/p/d0e0935b150a" target="_blank" rel="noopener">https://www.jianshu.com/p/d0e0935b150a</a></p>
<p><a href="https://www.jianshu.com/p/622ad36ee020" target="_blank" rel="noopener">​https://www.jianshu.com/p/622ad36ee020</a></p>
<p>安装记录:</p>
<p>打开:<a href="https://github.com/coreybutler/nvm-windows/releases" target="_blank" rel="noopener">https://github.com/coreybutler/nvm-windows/releases</a></p>
<p>安装完成以后,先查看环境变量是否设置好了.</p>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/1552357036022.png" alt="1552357036022"></p>
<p>常用的nvm命令</p>
<p>nvm list # 列出目前在nvm里面安装的所有node版本 nvm install node版本号 # 安装指定版本的node.js nvm uninstall node版本号 # 卸载指定版本的node.js nvm use node版本号 # 切换当前使用的node.js版本</p>
<p>如果使用nvm工具，则直接可以不用自己手动下载，如果使用nvm下载安装 node的npm比较慢的时候，可以修改nvm的配置文件(在安装根目录下)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># settings.txt</span><br><span class="line">root: C:\tool\nvm    [这里的目录地址是安装nvm时自己设置的地址,要根据实际修改]</span><br><span class="line">path: C:\tool\nodejs</span><br><span class="line">arch: 64</span><br><span class="line">proxy: none</span><br><span class="line">node_mirror: http:&#x2F;&#x2F;npm.taobao.org&#x2F;mirrors&#x2F;node&#x2F; </span><br><span class="line">npm_mirror: https:&#x2F;&#x2F;npm.taobao.org&#x2F;mirrors&#x2F;npm&#x2F;</span><br></pre></td></tr></table></figure>

<h2 id="安装node-js"><a href="#安装node-js" class="headerlink" title="安装node.js"></a>安装node.js</h2><p>Node.js是一个新的后端(后台)语言，它的语法和JavaScript类似，所以可以说它是属于前端的后端语言，后端语言和前端语言的区别：</p>
<ul>
<li>运行环境：后端语言一般运行在服务器端，前端语言运行在客户端的浏览器上</li>
<li>功能：后端语言可以操作文件，可以读写数据库，前端语言不能操作文件，不能读写数据库。</li>
</ul>
<p>我们一般安装LTS(长线支持版本 Long-Time Support)：</p>
<p>下载地址：<a href="https://nodejs.org/en/download/【上面已经安装了nvm，那么这里不用手动安装了】" target="_blank" rel="noopener">https://nodejs.org/en/download/【上面已经安装了nvm，那么这里不用手动安装了】</a></p>
<p>node.js的版本有两大分支：</p>
<p>官方发布的node.js版本：0.xx.xx 这种版本号就是官方发布的版本</p>
<p>社区发布的node.js版本：xx.xx.x 就是社区开发的版本</p>
<p>Node.js如果安装成功，可以查看Node.js的版本,在终端输入如下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure>

<h2 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h2><p>在安装node.js完成后，在node.js中会同时帮我们安装一个npm包管理器npm。我们可以借助npm命令来安装node.js的包。这个工具相当于python的pip管理器。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g 包名              <span class="comment"># 安装模块   -g表示全局安装，如果没有-g，则表示在当前项目安装</span></span><br><span class="line">npm list                        <span class="comment"># 查看当前目录下已安装的node包</span></span><br><span class="line">npm view 包名 engines            <span class="comment"># 查看包所依赖的Node的版本 </span></span><br><span class="line">npm outdated                    <span class="comment"># 检查包是否已经过时，命令会列出所有已过时的包</span></span><br><span class="line">npm update 包名                  <span class="comment"># 更新node包</span></span><br><span class="line">npm uninstall 包名               <span class="comment"># 卸载node包</span></span><br><span class="line">npm 命令 -h                      <span class="comment"># 查看指定命令的帮助文档</span></span><br></pre></td></tr></table></figure>

<h2 id="安装Vue-cli"><a href="#安装Vue-cli" class="headerlink" title="安装Vue-cli"></a>安装Vue-cli</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g vue-cli</span><br></pre></td></tr></table></figure>

<p>如果安装速度过慢，一直超时，可以考虑切换npm镜像源：<a href="http://npm.taobao.org/" target="_blank" rel="noopener">http://npm.taobao.org/</a></p>
<h2 id="使用Vue-CLI初始化创建前端项目"><a href="#使用Vue-CLI初始化创建前端项目" class="headerlink" title="使用Vue-CLI初始化创建前端项目"></a>使用Vue-CLI初始化创建前端项目</h2><h3 id="生成项目目录"><a href="#生成项目目录" class="headerlink" title="生成项目目录"></a>生成项目目录</h3><p>使用vue自动化工具可以快速搭建单页应用项目目录。</p>
<p>该工具为现代化的前端开发工作流提供了开箱即用的构建配置。只需几分钟即可创建并启动一个带热重载、保存时静态检查以及可用于生产环境的构建配置的项目：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 生成一个基于 webpack 模板的新项目</span><br><span class="line">vue init webpack 项目目录名</span><br><span class="line">例如：</span><br><span class="line">vue init webpack myproject</span><br><span class="line"></span><br><span class="line">// 启动开发服务器 ctrl+c 停止服务</span><br><span class="line"><span class="built_in">cd</span> myproject</span><br><span class="line">npm run dev           <span class="comment"># 运行这个命令就可以启动node提供的测试http服务器</span></span><br></pre></td></tr></table></figure>

<p>运行了上面代码以后,终端下会出现以下效果提示：</p>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/1552187745456.png" alt="1552187745456"></p>
<p>那么访问：<a href="http://localhost:8080/" target="_blank" rel="noopener">http://localhost:8080/</a></p>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/1552187794989.png" alt="1552187794989"></p>
<h3 id="项目目录结构"><a href="#项目目录结构" class="headerlink" title="项目目录结构"></a>项目目录结构</h3><p>src 主开发目录，要开发的单文件组件全部在这个目录下的components目录下</p>
<p>static 静态资源目录，所有的css，js文件放在这个文件夹</p>
<p>dist项目打包发布文件夹，最后要上线单文件项目文件都在这个文件夹中[后面打包项目,让项目中的vue组件经过编译变成js 代码以后,dist就出现了]</p>
<p>node_modules目录是node的包目录，</p>
<p>config是配置目录，</p>
<p>build是项目打包时依赖的目录</p>
<p>src/router 路由,后面需要我们在使用Router路由的时候,自己声明.</p>
<h3 id="项目执行流程图"><a href="#项目执行流程图" class="headerlink" title="项目执行流程图"></a>项目执行流程图</h3><p><img src="/images/page_structrue.png" alt=""></p>
<p>page_structrue</p>
<p>整个项目是一个主文件index.html,index.html中会引入src文件夹中的main.js,main.js中会导入顶级单文件组件App.vue,App.vue中会通过组件嵌套或者路由来引用components文件夹中的其他单文件组件。</p>
<h2 id="单文件组件的使用"><a href="#单文件组件的使用" class="headerlink" title="单文件组件的使用"></a>单文件组件的使用</h2><p>组件有两种：普通组件、单文件组件</p>
<p>普通组件的缺点：</p>
<ol>
<li>html代码是作为js的字符串进行编写，所以组装和开发的时候不易理解，而且没有高亮效果。</li>
<li>普通组件用在小项目中非常合适，但是复杂的大项目中，如果把更多的组件放在html文件中，那么维护成本就会变得非常昂贵。</li>
<li>普通组件只是整合了js和html，但是css代码被剥离出去了。使用的时候的时候不好处理。</li>
</ol>
<p>将一个组件相关的html结构，css样式，以及交互的JavaScript代码从html文件中剥离出来，合成一个文件，这种文件就是单文件组件，相当于一个组件具有了结构、表现和行为的完整功能，方便组件之间随意组合以及组件的重用，这种文件的扩展名为“.vue”，比如：“Home.vue”。</p>
<ol>
<li>创建组件</li>
</ol>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/1552362045478.png" alt="1552362045478"></p>
<p>在组件中编辑三个标签，编写视图、vm对象和css样式代码。</p>
<h3 id="template-编写html代码的地方"><a href="#template-编写html代码的地方" class="headerlink" title="template 编写html代码的地方"></a>template 编写html代码的地方</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"Home"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> @<span class="attr">click</span>=<span class="string">"num--"</span> <span class="attr">class</span>=<span class="string">"sub"</span>&gt;</span>-<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">size</span>=<span class="string">"1"</span> <span class="attr">v-model</span>=<span class="string">"num"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> @<span class="attr">click</span>=<span class="string">"num++"</span> <span class="attr">class</span>=<span class="string">"add"</span>&gt;</span>+<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="script编写vue-js代码"><a href="#script编写vue-js代码" class="headerlink" title="script编写vue.js代码"></a>script编写vue.js代码</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    name:<span class="string">"Home"</span>,</span><br><span class="line">    data: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        num:<span class="number">0</span>,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="style编写当前组件的样式代码"><a href="#style编写当前组件的样式代码" class="headerlink" title="style编写当前组件的样式代码"></a>style编写当前组件的样式代码</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;<span class="selector-tag">style</span> <span class="selector-tag">scoped</span>&gt;</span><br><span class="line">  <span class="selector-class">.sub</span>,<span class="selector-class">.add</span>&#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">4px</span> <span class="number">7px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<h3 id="完成案例-点击加减数字"><a href="#完成案例-点击加减数字" class="headerlink" title="完成案例-点击加减数字"></a>完成案例-点击加减数字</h3><p>创建Homes.vue</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"add_num"</span>&gt;</span><br><span class="line">      &lt;span @click=<span class="string">"num++"</span>&gt;+&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">      &lt;input type="text" size="2" v-model="num"&gt;</span></span><br><span class="line"><span class="regexp">      &lt;span @click="num--"&gt;-&lt;/</span>span&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line">    name:<span class="string">"AddNum"</span>,</span><br><span class="line">    data: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        num: <span class="number">0</span>,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;style scoped&gt;</span></span><br><span class="line"><span class="regexp">   .add_num&#123;</span></span><br><span class="line"><span class="regexp">      font-size: 32px;</span></span><br><span class="line"><span class="regexp">   &#125;</span></span><br><span class="line"><span class="regexp">&lt;/</span>style&gt;</span><br></pre></td></tr></table></figure>

<p>在App.vue组件中调用上面的组件</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=<span class="string">"Home"</span>&gt;</span><br><span class="line">    &lt;span @click=<span class="string">"num--"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"sub"</span>&gt;-&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">    &lt;input type="text" size="1" v-model="num"&gt;</span></span><br><span class="line"><span class="regexp">    &lt;span @click="num++" class="add"&gt;+&lt;/</span>span&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    name:<span class="string">"Home"</span>,</span><br><span class="line">    data: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        num:<span class="number">0</span>,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;style scoped&gt;</span></span><br><span class="line"><span class="regexp">  .sub,.add&#123;</span></span><br><span class="line"><span class="regexp">    border: 1px solid red;</span></span><br><span class="line"><span class="regexp">    padding: 4px 7px;</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&lt;/</span>style&gt;</span><br></pre></td></tr></table></figure>

<p>在开发vue项目之前，需要手动把 App.vue的HelloWorld组件代码以及默认的css样式，清楚。</p>
<p>上面的代码效果：</p>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/1552362182984.png" alt="1552362182984"></p>
<h3 id="组件的嵌套"><a href="#组件的嵌套" class="headerlink" title="组件的嵌套"></a>组件的嵌套</h3><p>有时候开发vue项目时,页面也可以算是一个大组件,同时页面也可以分成多个子组件.</p>
<p>因为,产生了父组件调用子组件的情况.</p>
<p>例如,我们可以声明一个组件,作为父组件</p>
<p>在components/创建一个保存子组件的目录HomeSon</p>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/1552363669256.png" alt="1552363669256"></p>
<p>在HomeSon目录下,可以创建当前页面的子组件,例如,是Menu.vue</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  组件中代码必须写在同一个标签中</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div id=<span class="string">"menu"</span>&gt;</span><br><span class="line">      &lt;span&gt;&#123;&#123;msg&#125;&#125;&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">      &lt;div&gt;hello&lt;/</span>div&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    name:<span class="string">"Menu"</span>,</span><br><span class="line">    data: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        msg:<span class="string">"这是Menu组件里面的菜单"</span>,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>

<p>然后，在父组件中调用上面声明的子组件。</p>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/1552363770013.png" alt="1552363770013"></p>
<p>最后,父组件被App.vue调用.就可以看到页面效果.</p>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/1552363834171.png" alt="1552363834171"></p>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/1552363849977.png" alt="1552363849977"></p>
<p>效果:</p>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/1552363702858.png" alt="1552363702858"></p>
<h3 id="7-5-传递数据"><a href="#7-5-传递数据" class="headerlink" title="7.5 传递数据"></a>7.5 传递数据</h3><h3 id="父组件的数据传递给子组件"><a href="#父组件的数据传递给子组件" class="headerlink" title="父组件的数据传递给子组件"></a>父组件的数据传递给子组件</h3><p>例如,我们希望把父组件的数据传递给子组件.</p>
<p>可以通过props属性来进行数据传递.</p>
<p>传递数据三个步骤：</p>
<ol>
<li><p>在父组件中，调用子组件的组名处，使用属性值的方式往下传递数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;Menu :mynum&#x3D;&quot;num&quot; title&#x3D;&quot;home里面写的数据&quot;&#x2F;&gt;</span><br><span class="line"></span><br><span class="line"># 上面表示在父组件调用Menu子组件的时候传递了2个数据：</span><br><span class="line">  如果要传递变量[变量可以各种类型的数据]，属性名左边必须加上冒号:，同时，属性名是自定义的，会在子组件中使用。</span><br><span class="line">  如果要传递普通字符串数据，则不需要加上冒号:</span><br></pre></td></tr></table></figure>
</li>
<li><p>在子组件中接受上面父组件传递的数据，需要在vm组件对象中，使用props属性类接受。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    name:<span class="string">"Menu"</span>,</span><br><span class="line">    props:[<span class="string">"mynum"</span>,<span class="string">"title"</span>],</span><br><span class="line">    data: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        msg:<span class="string">"这是Menu组件里面的菜单"</span>,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 上面 props属性中表示接受了两个数据。</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在子组件中的template中使用父组件传递过来的数据.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"menu"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;msg&#125;&#125;，&#123;&#123;title&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>hello，&#123;&#123;mynum&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>效果：</p>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/1552364511546.png" alt="1552364511546"></p>
<p>步骤流程:</p>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/1552364590540.png" alt="1552364590540"></p>
<p>使用父组件传递数据给子组件时, 注意一下几点:</p>
<ol>
<li><p>传递数据是变量,则需要在属性左边添加冒号.</p>
<p>传递数据是变量,这种数据称之为“动态数据传递”</p>
<p>传递数据不是变量,这种数据称之为“静态数据传递”</p>
</li>
<li><p>父组件中修改了数据,在子组件中会被同步修改,但是,子组件中的数据修改了,是不是影响到父组件中的数据.</p>
<p>这种情况,在开发时,也被称为“单向数据流”</p>
</li>
</ol>
<h3 id="子组件传递数据给父组件"><a href="#子组件传递数据给父组件" class="headerlink" title="子组件传递数据给父组件"></a>子组件传递数据给父组件</h3><ol>
<li><p>在子组件中，通过<code>this.$emit()</code>来调用父组件中定义的事件.</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;p&gt;Post的子组件&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">      &lt;h2&gt;&#123;&#123;fnum&#125;&#125;&lt;/</span>h2&gt;</span><br><span class="line">      &lt;p&gt;data=&#123;&#123;data&#125;&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">      &lt;p&gt;fnum=&#123;&#123;fnum&#125;&#125;&lt;/</span>p&gt;</span><br><span class="line">      &lt;div&gt;<span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"fnum"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">        name: <span class="string">"PostSon"</span>,</span><br><span class="line">        <span class="comment">// 父组件传递数据给子组件: 1. 在父组件中调用子组件的组件名称标签上面声明属性和传递值，2. 在子组件中通过props进行接收</span></span><br><span class="line">        props:[<span class="string">"data"</span>,<span class="string">"fnum"</span>],  <span class="comment">// 接受父组件中传递过来的数据</span></span><br><span class="line">        <span class="comment">// 子组件传递数据给父组件[事件的方式进行传递]：</span></span><br><span class="line">        watch:&#123;</span><br><span class="line">          fnum()&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.fnum);</span><br><span class="line">            <span class="comment">// this.$emit("父元素的自定义事件","要传递的数据");  // 通过this.$emit()方法，子组件可以把数据传递给父组件</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">this</span>.$emit(<span class="string">"postparentdata"</span>,<span class="keyword">this</span>.fnum);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;style scoped&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;/</span>style&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>父组件中声明一个和子组件中<code>this.$emit(&quot;自定义事件名称&quot;)</code>对应的事件属性。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>num=&#123;&#123;num&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">Son</span> <span class="attr">data</span>=<span class="string">"我是付组件里面的内容"</span> <span class="attr">:fnum</span>=<span class="string">"num"</span> @<span class="attr">postparentdata</span>=<span class="string">"getsondata"</span>&gt;</span><span class="tag">&lt;/<span class="name">Son</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>父组件中，声明一个自定义方法，在事件被调用时，执行的。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">import</span> Son <span class="keyword">from</span> <span class="string">"./PostSon"</span></span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">        name: <span class="string">"Post"</span>,</span><br><span class="line">        data()&#123;</span><br><span class="line">          <span class="keyword">return</span> &#123;</span><br><span class="line">            num: <span class="number">100</span>,</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        components:&#123;</span><br><span class="line">          Son:Son,</span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">          getsondata(message)&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"父组件"</span>+message);</span><br><span class="line">            <span class="keyword">this</span>.num = message;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>作业：</p>
<ol>
<li>使用组件化开发，完成之前的选项卡练习功能</li>
<li>使用组件化开发，完成之前的todolist功能</li>
<li>使用组件化开发，完成table表格的增删查改作业，数据使用本地存储进行保存</li>
</ol>
<h2 id="在组件中使用axios获取数据"><a href="#在组件中使用axios获取数据" class="headerlink" title="在组件中使用axios获取数据"></a>在组件中使用axios获取数据</h2><p>默认情况下，我们的项目中并没有对axios包的支持，所以我们需要下载安装。</p>
<p>在项目根目录中使用 npm安装包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install axios</span><br></pre></td></tr></table></figure>

<p>接着在main.js文件中，导入axios并把axios对象 挂载到vue属性中多为一个子对象，这样我们才能在组件中使用。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">// The Vue build version to load <span class="keyword">with</span> the `<span class="keyword">import</span>` command</span><br><span class="line">// (runtime-only <span class="keyword">or</span> standalone) has been set <span class="keyword">in</span> webpack.base.conf <span class="keyword">with</span> an alias.</span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App'</span> // 这里表示从别的目录下导入 单文件组件</span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span>; // 从node_modules目录中导入包</span><br><span class="line">Vue.config.productionTip = false</span><br><span class="line"></span><br><span class="line">Vue.prototype.$axios = axios; // 把对象挂载vue中</span><br><span class="line"></span><br><span class="line">/* eslint-disable no-new */</span><br><span class="line">new Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  components: &#123; App &#125;,</span><br><span class="line">  template: <span class="string">'&lt;App/&gt;'</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="在组建中使用axios获取数据"><a href="#在组建中使用axios获取数据" class="headerlink" title="在组建中使用axios获取数据"></a>在组建中使用axios获取数据</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line">	。。。</span><br><span class="line">	methods:&#123;</span><br><span class="line">      get_data:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">         <span class="comment">// 使用axios请求数据</span></span><br><span class="line">        <span class="keyword">this</span>.$axios.get(<span class="string">"http://wthrcdn.etouch.cn/weather_mini?city=深圳"</span>).then(<span class="function">(<span class="params">response</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(response);</span><br><span class="line">        &#125;).catch(<span class="function"><span class="params">error</span>=&gt;</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(error);</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果:</p>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/1552202922168.png" alt="1552202922168"></p>
<p>使用的时候，因为本质上来说，我们还是原来的axios，所以也会收到同源策略的影响。</p>
<h2 id="组件-component-1"><a href="#组件-component-1" class="headerlink" title="组件[component]"></a>组件[component]</h2><p>组件（Component）是自定义封装代码的功能。在前端开发过程中，经常出现多个网页的功能是重复的，而且很多不同的页面之间，也存在同样的功能。</p>
<p>而在网页中实现一个功能，需要使用html定义功能的内容结构，使用css声明功能的外观样式，还要使用js来定义功能的特效，因此就产生了把一个功能相关的[HTML、css和javascript]代码封装在一起组成一个整体的代码块封装模式，我们称之为“组件”。</p>
<p>所以，组件就是一个html网页中的功能，一般就是一个标签，标签中有自己的html内容结构，css样式和js特效。</p>
<p>这样，前端人员就可以在组件化开发时，只需要书写一次代码，随处引入即可使用。</p>
<p>vue的组件有两种：默认组件[全局组件] 和 单文件组件</p>
<h3 id="默认组件"><a href="#默认组件" class="headerlink" title="默认组件"></a>默认组件</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;addnum&gt;&lt;<span class="regexp">/addnum&gt;</span></span><br><span class="line"><span class="regexp">    &lt;addnum&gt;&lt;/</span>addnum&gt;</span><br><span class="line">    &lt;addnum&gt;&lt;<span class="regexp">/addnum&gt;</span></span><br><span class="line"><span class="regexp">    &lt;addnum&gt;&lt;/</span>addnum&gt;</span><br><span class="line">    &lt;addnum&gt;&lt;<span class="regexp">/addnum&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    Vue.component(<span class="string">"addnum"</span>,&#123;</span><br><span class="line">        template:<span class="string">'&lt;div&gt;&lt;input type="text" v-model="num"&gt;&lt;button @click="num+=1"&gt;点击&lt;/button&gt;&lt;/div&gt;'</span>,</span><br><span class="line">        data: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="comment">// 写在这里的数据只有当前组件可以使用</span></span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                num:<span class="number">1</span>,</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">        el:<span class="string">"#app"</span>,</span><br><span class="line">        <span class="comment">// 这里写的数据是全局公用的，整个文件共享</span></span><br><span class="line">        data:&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端框架</category>
      </categories>
      <tags>
        <tag>vue框架</tag>
      </tags>
  </entry>
  <entry>
    <title>[Git命令大全]</title>
    <url>/2020/05/21/Git%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8/</url>
    <content><![CDATA[<h2 id="git-config"><a href="#git-config" class="headerlink" title="git config"></a>git config</h2><p>配置 Git 的相关参数。</p>
<p>Git 一共有3个配置文件：</p>
<p>\1. 仓库级的配置文件：在仓库的 <code>.git/.gitconfig</code>，该配置文件只对所在的仓库有效。 \2. 全局配置文件：Mac 系统在 <code>~/.gitconfig</code>，Windows 系统在 <code>C:\Users\&lt;用户名&gt;\.gitconfig</code>。 \3. 系统级的配置文件：在 Git 的安装目录下（Mac 系统下安装目录在 <code>/usr/local/git</code>）的 <code>etc</code> 文件夹中的 <code>gitconfig</code>。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看配置信息</span></span><br><span class="line"><span class="comment"># --local：仓库级，--global：全局级，--system：系统级</span></span><br><span class="line">$ git config &lt;--<span class="built_in">local</span> | --global | --system&gt; -l</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看当前生效的配置信息</span></span><br><span class="line">$ git config -l</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编辑配置文件</span></span><br><span class="line"><span class="comment"># --local：仓库级，--global：全局级，--system：系统级</span></span><br><span class="line">$ git config &lt;--<span class="built_in">local</span> | --global | --system&gt; -e</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加配置项</span></span><br><span class="line"><span class="comment"># --local：仓库级，--global：全局级，--system：系统级</span></span><br><span class="line">$ git config &lt;--<span class="built_in">local</span> | --global | --system&gt; --add &lt;name&gt; &lt;value&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取配置项</span></span><br><span class="line">$ git config &lt;--<span class="built_in">local</span> | --global | --system&gt; --get &lt;name&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除配置项</span></span><br><span class="line">$ git config &lt;--<span class="built_in">local</span> | --global | --system&gt; --<span class="built_in">unset</span> &lt;name&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置提交记录中的用户信息</span></span><br><span class="line">$ git config --global user.name &lt;用户名&gt;</span><br><span class="line">$ git config --global user.email &lt;邮箱地址&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更改Git缓存区的大小</span></span><br><span class="line"><span class="comment"># 如果提交的内容较大，默认缓存较小，提交会失败</span></span><br><span class="line"><span class="comment"># 缓存大小单位：B，例如：524288000（500MB）</span></span><br><span class="line">$ git config --global http.postBuffer &lt;缓存大小&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用 git status/git diff 命令时以高亮或彩色方式显示改动状态</span></span><br><span class="line">$ git config --global color.ui <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置可以缓存密码，默认缓存时间15分钟</span></span><br><span class="line">$ git config --global credential.helper cache</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置密码的缓存时间</span></span><br><span class="line"><span class="comment"># 缓存时间单位：秒</span></span><br><span class="line">$ git config --global credential.helper <span class="string">'cache --timeout=&lt;缓存时间&gt;'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置长期存储密码</span></span><br><span class="line">$ git config --global credential.helper store</span><br></pre></td></tr></table></figure>

<h2 id="git-clone"><a href="#git-clone" class="headerlink" title="git clone"></a>git clone</h2><p>从远程仓库克隆一个版本库到本地。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 默认在当前目录下创建和版本库名相同的文件夹并下载版本到该文件夹下</span></span><br><span class="line">$ git <span class="built_in">clone</span> &lt;远程仓库的网址&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定本地仓库的目录</span></span><br><span class="line">$ git <span class="built_in">clone</span> &lt;远程仓库的网址&gt; &lt;本地目录&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># -b 指定要克隆的分支，默认是master分支</span></span><br><span class="line">$ git <span class="built_in">clone</span> &lt;远程仓库的网址&gt; -b &lt;分支名称&gt; &lt;本地目录&gt;</span><br></pre></td></tr></table></figure>

<h2 id="git-init"><a href="#git-init" class="headerlink" title="git init"></a>git init</h2><p>初始化项目所在目录，初始化后会在当前目录下出现一个名为 .git 的目录。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 初始化本地仓库，在当前目录下生成 .git 文件夹</span></span><br><span class="line">$ git init</span><br></pre></td></tr></table></figure>

<h2 id="git-status"><a href="#git-status" class="headerlink" title="git status"></a>git status</h2><p>查看本地仓库的状态。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看本地仓库的状态</span></span><br><span class="line">$ git status</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以简短模式查看本地仓库的状态</span></span><br><span class="line"><span class="comment"># 会显示两列，第一列是文件的状态，第二列是对应的文件</span></span><br><span class="line"><span class="comment"># 文件状态：A 新增，M 修改，D 删除，?? 未添加到Git中</span></span><br><span class="line">$ git status -s</span><br></pre></td></tr></table></figure>

<h2 id="git-remote"><a href="#git-remote" class="headerlink" title="git remote"></a>git remote</h2><p>操作远程库。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 列出已经存在的远程仓库</span></span><br><span class="line">$ git remote</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出远程仓库的详细信息，在别名后面列出URL地址</span></span><br><span class="line">$ git remote -v</span><br><span class="line">$ git remote --verbose</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加远程仓库</span></span><br><span class="line">$ git remote add &lt;远程仓库的别名&gt; &lt;远程仓库的URL地址&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改远程仓库的别名</span></span><br><span class="line">$ git remote rename &lt;原远程仓库的别名&gt; &lt;新的别名&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除指定名称的远程仓库</span></span><br><span class="line">$ git remote remove &lt;远程仓库的别名&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改远程仓库的 URL 地址</span></span><br><span class="line">$ git remote <span class="built_in">set</span>-url &lt;远程仓库的别名&gt; &lt;新的远程仓库URL地址&gt;</span><br></pre></td></tr></table></figure>

<h2 id="git-branch"><a href="#git-branch" class="headerlink" title="git branch"></a>git branch</h2><p>操作 Git 的分支命令。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 列出本地的所有分支，当前所在分支以 "*" 标出</span></span><br><span class="line">$ git branch</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出本地的所有分支并显示最后一次提交，当前所在分支以 "*" 标出</span></span><br><span class="line">$ git branch -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建新分支，新的分支基于上一次提交建立</span></span><br><span class="line">$ git branch &lt;分支名&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改分支名称</span></span><br><span class="line"><span class="comment"># 如果不指定原分支名称则为当前所在分支</span></span><br><span class="line">$ git branch -m [&lt;原分支名称&gt;] &lt;新的分支名称&gt;</span><br><span class="line"><span class="comment"># 强制修改分支名称</span></span><br><span class="line">$ git branch -M [&lt;原分支名称&gt;] &lt;新的分支名称&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除指定的本地分支</span></span><br><span class="line">$ git branch -d &lt;分支名称&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 强制删除指定的本地分支</span></span><br><span class="line">$ git branch -D &lt;分支名称&gt;</span><br></pre></td></tr></table></figure>

<h2 id="git-checkout"><a href="#git-checkout" class="headerlink" title="git checkout"></a>git checkout</h2><p>检出命令，用于创建、切换分支等。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 切换到已存在的指定分支</span></span><br><span class="line">$ git checkout &lt;分支名称&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建并切换到指定的分支，保留所有的提交记录</span></span><br><span class="line"><span class="comment"># 等同于 "git branch" 和 "git checkout" 两个命令合并</span></span><br><span class="line">$ git checkout -b &lt;分支名称&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建并切换到指定的分支，删除所有的提交记录</span></span><br><span class="line">$ git checkout --orphan &lt;分支名称&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 替换掉本地的改动，新增的文件和已经添加到暂存区的内容不受影响</span></span><br><span class="line">$ git checkout &lt;文件路径&gt;</span><br></pre></td></tr></table></figure>

<h2 id="git-cherry-pick"><a href="#git-cherry-pick" class="headerlink" title="git cherry-pick"></a>git cherry-pick</h2><p>把已经提交的记录合并到当前分支。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 把已经提交的记录合并到当前分支</span></span><br><span class="line">$ git cherry-pick &lt;commit ID&gt;</span><br></pre></td></tr></table></figure>

<h2 id="git-add"><a href="#git-add" class="headerlink" title="git add"></a>git add</h2><p>把要提交的文件的信息添加到暂存区中。当使用 git commit 时，将依据暂存区中的内容来进行文件的提交。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 把指定的文件添加到暂存区中</span></span><br><span class="line">$ git add &lt;文件路径&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加所有修改、已删除的文件到暂存区中</span></span><br><span class="line">$ git add -u [&lt;文件路径&gt;]</span><br><span class="line">$ git add --update [&lt;文件路径&gt;]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加所有修改、已删除、新增的文件到暂存区中，省略 &lt;文件路径&gt; 即为当前目录</span></span><br><span class="line">$ git add -A [&lt;文件路径&gt;]</span><br><span class="line">$ git add --all [&lt;文件路径&gt;]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看所有修改、已删除但没有提交的文件，进入一个子命令系统</span></span><br><span class="line">$ git add -i [&lt;文件路径&gt;]</span><br><span class="line">$ git add --interactive [&lt;文件路径&gt;]</span><br></pre></td></tr></table></figure>

<h2 id="git-commit"><a href="#git-commit" class="headerlink" title="git commit"></a>git commit</h2><p>将暂存区中的文件提交到本地仓库中。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 把暂存区中的文件提交到本地仓库，调用文本编辑器输入该次提交的描述信息</span></span><br><span class="line">$ git commit</span><br><span class="line"></span><br><span class="line"><span class="comment"># 把暂存区中的文件提交到本地仓库中并添加描述信息</span></span><br><span class="line">$ git commit -m <span class="string">"&lt;提交的描述信息&gt;"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 把所有修改、已删除的文件提交到本地仓库中</span></span><br><span class="line"><span class="comment"># 不包括未被版本库跟踪的文件，等同于先调用了 "git add -u"</span></span><br><span class="line">$ git commit -a -m <span class="string">"&lt;提交的描述信息&gt;"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改上次提交的描述信息</span></span><br><span class="line">$ git commit --amend</span><br></pre></td></tr></table></figure>

<h2 id="git-fetch"><a href="#git-fetch" class="headerlink" title="git fetch"></a>git fetch</h2><p>从远程仓库获取最新的版本到本地的 tmp 分支上。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将远程仓库所有分支的最新版本全部取回到本地</span></span><br><span class="line">$ git fetch &lt;远程仓库的别名&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将远程仓库指定分支的最新版本取回到本地</span></span><br><span class="line">$ git fetch &lt;远程主机名&gt; &lt;分支名&gt;</span><br></pre></td></tr></table></figure>

<h2 id="git-merge"><a href="#git-merge" class="headerlink" title="git merge"></a>git merge</h2><p>合并分支。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 把指定的分支合并到当前所在的分支下</span></span><br><span class="line">$ git merge &lt;分支名称&gt;</span><br></pre></td></tr></table></figure>

<h2 id="git-diff"><a href="#git-diff" class="headerlink" title="git diff"></a>git diff</h2><p>比较版本之间的差异。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 比较当前文件和暂存区中文件的差异，显示没有暂存起来的更改</span></span><br><span class="line">$ git diff</span><br><span class="line"></span><br><span class="line"><span class="comment"># 比较暂存区中的文件和上次提交时的差异</span></span><br><span class="line">$ git diff --cached</span><br><span class="line">$ git diff --staged</span><br><span class="line"></span><br><span class="line"><span class="comment"># 比较当前文件和上次提交时的差异</span></span><br><span class="line">$ git diff HEAD</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看从指定的版本之后改动的内容</span></span><br><span class="line">$ git diff &lt;commit ID&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 比较两个分支之间的差异</span></span><br><span class="line">$ git diff &lt;分支名称&gt; &lt;分支名称&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看两个分支分开后各自的改动内容</span></span><br><span class="line">$ git diff &lt;分支名称&gt;...&lt;分支名称&gt;</span><br></pre></td></tr></table></figure>

<h2 id="git-pull"><a href="#git-pull" class="headerlink" title="git pull"></a>git pull</h2><p>从远程仓库获取最新版本并合并到本地。 首先会执行 <code>git fetch</code>，然后执行 <code>git merge</code>，把获取的分支的 HEAD 合并到当前分支。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 从远程仓库获取最新版本。</span></span><br><span class="line">$ git pull</span><br></pre></td></tr></table></figure>

<h2 id="git-push"><a href="#git-push" class="headerlink" title="git push"></a>git push</h2><p>把本地仓库的提交推送到远程仓库。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 把本地仓库的分支推送到远程仓库的指定分支</span></span><br><span class="line">$ git push &lt;远程仓库的别名&gt; &lt;本地分支名&gt;:&lt;远程分支名&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除指定的远程仓库的分支</span></span><br><span class="line">$ git push &lt;远程仓库的别名&gt; :&lt;远程分支名&gt;</span><br><span class="line">$ git push &lt;远程仓库的别名&gt; --delete &lt;远程分支名&gt;</span><br></pre></td></tr></table></figure>

<h2 id="git-log"><a href="#git-log" class="headerlink" title="git log"></a>git log</h2><p>显示提交的记录。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 打印所有的提交记录</span></span><br><span class="line">$ git <span class="built_in">log</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印从第一次提交到指定的提交的记录</span></span><br><span class="line">$ git <span class="built_in">log</span> &lt;commit ID&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印指定数量的最新提交的记录</span></span><br><span class="line">$ git <span class="built_in">log</span> -&lt;指定的数量&gt;</span><br></pre></td></tr></table></figure>

<h2 id="git-reset"><a href="#git-reset" class="headerlink" title="git reset"></a>git reset</h2><p>还原提交记录。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 重置暂存区，但文件不受影响</span></span><br><span class="line"><span class="comment"># 相当于将用 "git add" 命令更新到暂存区的内容撤出暂存区，可以指定文件</span></span><br><span class="line"><span class="comment"># 没有指定 commit ID 则默认为当前 HEAD</span></span><br><span class="line">$ git reset [&lt;文件路径&gt;]</span><br><span class="line">$ git reset --mixed [&lt;文件路径&gt;]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将 HEAD 的指向改变，撤销到指定的提交记录，文件未修改</span></span><br><span class="line">$ git reset &lt;commit ID&gt;</span><br><span class="line">$ git reset --mixed &lt;commit ID&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将 HEAD 的指向改变，撤销到指定的提交记录，文件未修改</span></span><br><span class="line"><span class="comment"># 相当于调用 "git reset --mixed" 命令后又做了一次 "git add"</span></span><br><span class="line">$ git reset --soft &lt;commit ID&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将 HEAD 的指向改变，撤销到指定的提交记录，文件也修改了</span></span><br><span class="line">$ git reset --hard &lt;commit ID&gt;</span><br></pre></td></tr></table></figure>

<h2 id="git-revert"><a href="#git-revert" class="headerlink" title="git revert"></a>git revert</h2><p>生成一个新的提交来撤销某次提交，此次提交之前的所有提交都会被保留。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 生成一个新的提交来撤销某次提交</span></span><br><span class="line">$ git revert &lt;commit ID&gt;</span><br></pre></td></tr></table></figure>

<h2 id="git-tag"><a href="#git-tag" class="headerlink" title="git tag"></a>git tag</h2><p>操作标签的命令。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 打印所有的标签</span></span><br><span class="line">$ git tag</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加轻量标签，指向提交对象的引用，可以指定之前的提交记录</span></span><br><span class="line">$ git tag &lt;标签名称&gt; [&lt;commit ID&gt;]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加带有描述信息的附注标签，可以指定之前的提交记录</span></span><br><span class="line">$ git tag -a &lt;标签名称&gt; -m &lt;标签描述信息&gt; [&lt;commit ID&gt;]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换到指定的标签</span></span><br><span class="line">$ git checkout &lt;标签名称&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看标签的信息</span></span><br><span class="line">$ git show &lt;标签名称&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除指定的标签</span></span><br><span class="line">$ git tag -d &lt;标签名称&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将指定的标签提交到远程仓库</span></span><br><span class="line">$ git push &lt;远程仓库的别名&gt; &lt;标签名称&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将本地所有的标签全部提交到远程仓库</span></span><br><span class="line">$ git push &lt;远程仓库的别名&gt; –tags</span><br></pre></td></tr></table></figure>

<h2 id="git-mv"><a href="#git-mv" class="headerlink" title="git mv"></a>git mv</h2><p>重命名文件或者文件夹。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 重命名指定的文件或者文件夹</span></span><br><span class="line">$ git mv &lt;源文件/文件夹&gt; &lt;目标文件/文件夹&gt;</span><br></pre></td></tr></table></figure>

<h2 id="git-rm"><a href="#git-rm" class="headerlink" title="git rm"></a>git rm</h2><p>删除文件或者文件夹。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 移除跟踪指定的文件，并从本地仓库的文件夹中删除</span></span><br><span class="line">$ git rm &lt;文件路径&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 移除跟踪指定的文件夹，并从本地仓库的文件夹中删除</span></span><br><span class="line">$ git rm -r &lt;文件夹路径&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 移除跟踪指定的文件，在本地仓库的文件夹中保留该文件</span></span><br><span class="line">$ git rm --cached</span><br></pre></td></tr></table></figure>

<h2 id="Git操作场景示例"><a href="#Git操作场景示例" class="headerlink" title="Git操作场景示例"></a>Git操作场景示例</h2><h3 id="1-删除掉本地不存在的远程分支"><a href="#1-删除掉本地不存在的远程分支" class="headerlink" title="1. 删除掉本地不存在的远程分支"></a>1. 删除掉本地不存在的远程分支</h3><p>多人合作开发时，如果远程的分支被其他开发删除掉，在本地执行 <code>git branch --all</code> 依然会显示该远程分支，可使用下列的命令进行删除：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用 pull 命令，添加 -p 参数</span></span><br><span class="line">$ git pull -p</span><br><span class="line"></span><br><span class="line"><span class="comment"># 等同于下面的命令</span></span><br><span class="line">$ git fetch -p</span><br><span class="line">$ git fetch --prune origin</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>IT兵器谱</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>[Git安装与介绍]</title>
    <url>/2020/05/21/Git%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BB%8B%E7%BB%8D/</url>
    <content><![CDATA[<h1 id="如何多人协同开发同一个项目？"><a href="#如何多人协同开发同一个项目？" class="headerlink" title="如何多人协同开发同一个项目？"></a>如何多人协同开发同一个项目？</h1><p>使用代码版本控制[version control]软件,</p>
<p>目前市面上比较流行的代码版本控制器有: git,svn,csv</p>
<p>澄清一个问题：</p>
<blockquote>
<p>github，gitee和git之间的关系github和gitee是一个网站，git是一个代码版本控制软件。git是当初Linux系统的作者【林纳斯·托瓦兹】为了开发Linux代码所开发的一个开软软件。github是全球知名的一个开源源码托管平台，之所以叫github是因为他支持通过git上传和下载代码，同时因为git比较出名，所以借助了他的名气而已。他们之间的关系类似，张三和张三丰。gitee是一个国内知名的开源源码托管平台，和github出现的原因类似。</p>
</blockquote>
<h1 id="1-使用git管理代码版本"><a href="#1-使用git管理代码版本" class="headerlink" title="1. 使用git管理代码版本"></a>1. 使用git管理代码版本</h1><p>本项目使用git管理项目代码，代码库放在gitee码云平台。（注意，公司中通常放在gitlab私有服务器中）</p>
<h2 id="1-1-Git-的诞生"><a href="#1-1-Git-的诞生" class="headerlink" title="1.1 Git 的诞生"></a>1.1 Git 的诞生</h2><p>2005 年 4 月3 日，Git 是目前世界上最先进的分布式版本控制系统（没有之一）</p>
<p>作用：源代码管理</p>
<p><strong>为什么要进行源代码管理?</strong></p>
<ul>
<li>方便多人协同开发[防止代码冲突，相互覆盖]</li>
<li>方便版本控制[利于以后的开发人员快速了解项目的开发过程，利于需求变更的时候进行代码回滚]</li>
</ul>
<h2 id="1-2-git与svn区别"><a href="#1-2-git与svn区别" class="headerlink" title="1.2 git与svn区别"></a>1.2 git与svn区别</h2><p>SVN 都是集中控制管理的，也就是有一个中央服务器，大家都把代码提交到中央服务器，而 git 是分布式的版本控制工具，也就是说没有中央服务器，每个节点的地位平等。</p>
<p>SVN</p>
<p><img src="/image/1553208721216.png" alt=""></p>
<p>Git</p>
<p><img src="/image/1553208738888.png" alt=""></p>
<h2 id="Git的windows下安装"><a href="#Git的windows下安装" class="headerlink" title="Git的windows下安装"></a>Git的windows下安装</h2><p>官网地址：<a href="https://git-scm.com/download" target="_blank" rel="noopener">https://git-scm.com/download</a></p>
<p><img src="/image/1553220095452.png" alt=""></p>
<p><img src="/image/1553208779674.png" alt=""></p>
<p>下载到本地磁盘</p>
<p><img src="/image/1553208790623.png" alt=""></p>
<p>安装</p>
<p><img src="/image/1553208801316.png" alt=""></p>
<p>一路【next】就可以了</p>
<p><img src="/image/1553220218170.png" alt=""></p>
<p><img src="/image/1553220208875.png" alt=""></p>
<p><img src="/image/1553220240618.png" alt=""></p>
<p>注意：<strong>openssl 一定选它</strong></p>
<p>安装完成后，右击菜单栏，有如下菜单，表示安装完成</p>
<p><img src="/image/1553220425466.png" alt=""></p>
<p>进入git bash选项</p>
<p><img src="/image/1553220553963.png" alt=""></p>
<p>Git工作区、暂存区和版本库</p>
<p><img src="/image/1593749346903.png" alt=""></p>
<h2 id="1、工作区介绍"><a href="#1、工作区介绍" class="headerlink" title="1、工作区介绍"></a>1、工作区介绍</h2><p>就是在你本要电脑磁盘上能看到的目录。</p>
<h2 id="2、暂存区介绍"><a href="#2、暂存区介绍" class="headerlink" title="2、暂存区介绍"></a>2、暂存区介绍</h2><p>一般存放在【.git】目录下的index文件(.git/index) 中，所以我们把暂存区有时也叫作索引。</p>
<h2 id="3、版本库介绍"><a href="#3、版本库介绍" class="headerlink" title="3、版本库介绍"></a>3、版本库介绍</h2><p>工作区有一个隐藏目录.git，这个不算工作区，而是Git的版本库。git中的head/master是分支，是版本库。</p>
<h3 id="git项目仓库的本地搭建"><a href="#git项目仓库的本地搭建" class="headerlink" title="git项目仓库的本地搭建"></a>git项目仓库的本地搭建</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span>进入到自己希望存储代码的目录路径，并创建本地仓库.git</span><br><span class="line">新创建的本地仓库.git是个空仓库</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> 目录路径</span><br><span class="line">git init gitdemo  <span class="comment"># 如果没有声明目录,则自动把当前目录作为git仓库</span></span><br></pre></td></tr></table></figure>

<p>创建仓库</p>
<p><img src="/image/1553222861995.png" alt=""></p>
<h3 id="仓库目录的结构"><a href="#仓库目录的结构" class="headerlink" title="仓库目录的结构"></a>仓库目录的结构</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">branches&#x2F;   分支管理目录config      </span><br><span class="line">当前项目仓木的配置信息description </span><br><span class="line">当前项目的描述HEAD        </span><br><span class="line">当前项目仓库的当前版本信息hooks       </span><br><span class="line">当前项目仓库的钩子目录[可以利用这个目录下面的文件实现自己拉去代码到服务器]info        </span><br><span class="line">仓库相关信息objects     </span><br><span class="line">仓库版本信息refs        </span><br><span class="line">引用信息</span><br></pre></td></tr></table></figure>

<h3 id="配置用户名和邮箱"><a href="#配置用户名和邮箱" class="headerlink" title="配置用户名和邮箱"></a>配置用户名和邮箱</h3><blockquote>
<p>–global表示全局配置，配置信息默认保存到当前操作系统的用户家目录中的.gitconfig文件，可以通过命令cat ~/.gitconfig查看全局配置如果不加上这个参数，则默认配置信息保存到.git/config文件中，可以通过命令 cat 项目/.git/config查看仓库配置</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.name <span class="string">'lisi'</span></span><br><span class="line">git config --global user.email <span class="string">'lisi@163.com'</span></span><br></pre></td></tr></table></figure>

<p><img src="/image/1553209118220.png" alt=""></p>
<h3 id="查看仓库状态"><a href="#查看仓库状态" class="headerlink" title="查看仓库状态"></a>查看仓库状态</h3><p>所以的仓库状态指代的就是开发者每次对于项目的文件/目录都会进行增删查改操作。每次对于文件/目录进行操作时，仓库的状态都会记录下来。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git status</span><br><span class="line"></span><br><span class="line">git status –s 简约显示</span><br></pre></td></tr></table></figure>

<ul>
<li>红色表示新建文件或者新修改的文件,都在工作区.</li>
<li>绿色表示文件在暂存区</li>
<li>新建的<code>login.py</code>文件在工作区，需要添加到暂存区并提交到仓库区</li>
</ul>
<p><img src="/image/1553209157268.png" alt=""></p>
<p>上图表示： 暂时没有新文件需要提交到暂存区</p>
<h3 id="添加文件到暂存区"><a href="#添加文件到暂存区" class="headerlink" title="添加文件到暂存区"></a>添加文件到暂存区</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 添加项目中所有文件</span></span><br><span class="line">git add .</span><br><span class="line">或者</span><br><span class="line"><span class="comment"># 添加指定文件</span></span><br><span class="line">git add login.py</span><br></pre></td></tr></table></figure>

<p>例如： 创建3个文件 ，并查看状态.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">touch 1.htmltouch 2.html 3.htmlgit statusgit add 1.html 2.html 3.html <span class="comment"># 或 git add .git status</span></span><br></pre></td></tr></table></figure>

<p>效果：</p>
<p><img src="/image/1593749524017.png" alt=""></p>
<p>如果要测试1.html，2.html的暂存状态，则</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git rm --cached 1.html 2.html</span><br></pre></td></tr></table></figure>

<p>结果就是只有3.html是被保留在了暂存区</p>
<p><img src="/image/1593749620435.png" alt=""></p>
<h3 id="提交到版本库"><a href="#提交到版本库" class="headerlink" title="提交到版本库"></a>提交到版本库</h3><p>要把文件/目录提交到版本库必须先把文件/目录添加到暂存库才可以。所以上述的3.html可以提交，1.html和2.html是不能被提交的。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git commit -m <span class="string">"版本描述"</span></span><br></pre></td></tr></table></figure>

<h3 id="手动删除文件"><a href="#手动删除文件" class="headerlink" title="手动删除文件"></a>手动删除文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">手动操作删除 或者 在命令行下 使用 rm 文件名 删除 都是表示在工作区删除.</span><br><span class="line">对于这种删除,如果还原,则可以使用 git reset --hard HEAD</span><br></pre></td></tr></table></figure>

<p><img src="/image/1553221937786.png" alt=""></p>
<h3 id="查看历史版本-查看日志"><a href="#查看历史版本-查看日志" class="headerlink" title="查看历史版本[查看日志]"></a>查看历史版本[查看日志]</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span>      <span class="comment"># 查看详细日志列表</span></span><br><span class="line">git reflog   <span class="comment"># 查看简单日志列表</span></span><br><span class="line"> </span><br><span class="line">过滤查看日志</span><br><span class="line">  git <span class="built_in">log</span> –p </span><br><span class="line">  退出按【q】键</span><br><span class="line">  ctrl+f 向下分页</span><br><span class="line">  ctrl+b 向上分页</span><br><span class="line"></span><br><span class="line">显示指定日期之后的日志   git <span class="built_in">log</span> --after  <span class="string">'2018-11-6'</span></span><br><span class="line">显示指定日期之前的日志   git <span class="built_in">log</span> --before <span class="string">'2018-11-6'</span></span><br><span class="line"></span><br><span class="line">指定显示指定开发者的日志  git <span class="built_in">log</span> --author <span class="string">'lisi'</span></span><br></pre></td></tr></table></figure>

<p><strong>回退版本</strong></p>
<ul>
<li><p><strong>方案一：</strong></p>
<ul>
<li><p><code>HEAD</code>表示当前最新版本</p>
</li>
<li><p><code>HEAD^</code>表示当前最新版本的前一个版本</p>
</li>
<li><p><code>HEAD^^</code>表示当前最新版本的前两个版本，<strong>以此类推…</strong></p>
</li>
<li><p><code>HEAD~1</code>表示当前最新版本的前一个版本</p>
</li>
<li><p><code>HEAD~10</code>表示当前最新版本的前10个版本，<strong>以此类推…</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git reset --hard HEAD^</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p><strong>方案二：当版本非常多时可选择的方案</strong></p>
<ul>
<li><p>通过每个版本的版本号回退到指定版本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git reset --hard 版本号</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<h2 id="查看文件状态"><a href="#查看文件状态" class="headerlink" title="查看文件状态"></a>查看文件状态</h2><p><strong>针对与文件所处的不同分区，文件所处的状态:</strong></p>
<p>(1)未追踪, 文件第一次出现在工作区, 版本库还没有存储该文件的状态</p>
<p>(2)已追踪, 只要第一次,git add了文件, 文件就是已追踪</p>
<p>(3)未修改, 文件在工作区未被编辑</p>
<p>(4)已修改, 文件在工作区被修改</p>
<p>(5)未暂存, 文件已修改, 但是没有add到暂存区</p>
<p>(6)已暂存, 已经将修改的文件add到暂存区</p>
<p>(7)未提交, 已暂存的文件, 没有commit提交. 处于暂存区</p>
<p>(8)已提交, 提交到版本库的文件修改,只有commit以后才会有仓库的版本号生成</p>
<p>注意：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">公司一般使用git管理项目,往往会搭建一个gitlab自己内部管理代码,也有公司选择使用码云的企业版仓库来管理</span><br><span class="line"></span><br><span class="line">使用git开发项目时，有时候不一定通过https协议提交代码的。也有的公司是通过ssh协议提交,此时需要生成ssh公钥和提交公钥给仓库。[码云这些官网都会有详细的提示说明]</span><br><span class="line"></span><br><span class="line">生成SSH公钥【必须安装git bash才可以使用这个命令，而且还要把git bash添加到系统变量里面】</span><br><span class="line">  ssh-keygen -t rsa -C &quot;源码托管平台的账号&quot;</span><br><span class="line"></span><br><span class="line">参考：https:&#x2F;&#x2F;gitee.com&#x2F;help&#x2F;articles&#x2F;4180</span><br></pre></td></tr></table></figure>

<h1 id="2-在git平台创建工程"><a href="#2-在git平台创建工程" class="headerlink" title="2. 在git平台创建工程"></a>2. 在git平台创建工程</h1><p>1） 创建私有项目库</p>
<p><img src="/image/1553225634429.png" alt=""></p>
<p><img src="/image/1553225730511.png" alt=""></p>
<p>创建私有空仓库以后的界面:</p>
<p><img src="/image/1553225968558.png" alt=""></p>
<p>2）克隆项目到本地</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone 仓库地址</span><br><span class="line">注意，如果当前目录下出现git仓库同名目录时，会克隆失败。</span><br></pre></td></tr></table></figure>

<p><img src="/image/1553227023342.png" alt=""></p>
<p>3）创建并切换分支到dev</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 分支管理的命令</span></span><br><span class="line">git branch            <span class="comment"># 查看当前项目的所有分支列表</span></span><br><span class="line">git bracn 分支名称     <span class="comment"># 新建一个分支</span></span><br><span class="line">git checkout 分支名称  <span class="comment"># 切换分支，让当前目录下显示对应分支里面的内容</span></span><br><span class="line">git checkout -d  分支名称  <span class="comment"># 删除指定名称的分支</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># git branch dev      # 创建本地分支dev,dev是自定义</span></span><br><span class="line"><span class="comment"># git checkout dev    # 切换本地分支代码</span></span><br><span class="line">git checkout -b dev   <span class="comment"># 这里是上面两句代码的简写</span></span><br></pre></td></tr></table></figure>

<p>git提交</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git add 代码目录</span><br><span class="line">git status</span><br><span class="line">git commit -m <span class="string">'添加项目代码'</span></span><br></pre></td></tr></table></figure>

<p>推送到远端</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># git push origin 本地分支名称:线上分支名称</span></span><br><span class="line"><span class="comment"># 如果本地分支和线上分支名称一致，则可以简写 git push origin 分支名称</span></span><br><span class="line"><span class="comment"># 如果有的本地分支名称，但是线上没有，则代码推送时，线上会自动创建</span></span><br><span class="line">git push origin dev:dev</span><br></pre></td></tr></table></figure>

<p>如果推送代码,出现以下提示: git pull ….,则表示当前本地的代码和线上的代码版本不同.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 把线上的代码执行以下命令,拉取到本地,进行同步</span><br><span class="line">git pull</span><br><span class="line"></span><br><span class="line">2. 根据提示,移除多余的冲突的文件,也可以删除.</span><br><span class="line">完成这些步骤以后,再次add,commit,push,通知其他同事git pull即可.</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>IT兵器谱</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>[Markdown语法]</title>
    <url>/2020/05/28/Markdown%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<h1 id="一：概述"><a href="#一：概述" class="headerlink" title="一：概述"></a>一：概述</h1><h2 id="1-设计理念"><a href="#1-设计理念" class="headerlink" title="1.设计理念"></a>1.设计理念</h2><p>Markdown 易于阅读，方便创作web文档，利于各平台无缝分发。</p>
<p>Markdown 语法灵感最大的来源还是纯文本 email 的格式，完全由标点符号标签组成的纯文本。</p>
<p>Markdown 文件应该以纯文本形式原样发布，不应该包含标记标签和格式化指令。</p>
<h2 id="2-内联-HTML-语法"><a href="#2-内联-HTML-语法" class="headerlink" title="2.内联 HTML 语法"></a>2.内联 HTML 语法</h2><p>HTML 是一种<strong>发布格式</strong>，Markdown 是一种<strong>创作格式</strong>。</p>
<p>Markdown语法集合比较小，只是HTML标签的一小部分。</p>
<p>对于 Markdown 中未包含的标签, 可以直接使用 HTML标签，例如用 HTML <code>&lt;a&gt;</code> 标签替代 Markdown 的链接语法。</p>
<h2 id="3-特殊字符自动转义"><a href="#3-特殊字符自动转义" class="headerlink" title="3.特殊字符自动转义"></a>3.特殊字符自动转义</h2><p>在 HTML 中, 有两个字符需要特殊对待: &lt; 和 &amp;，左尖括号用于起始标签。如果你想将它们用作字面量, 你必须将它们转义为字符实体, 例如<code>&lt;</code> 和 <code>&amp;</code>。</p>
<h1 id="二：标题"><a href="#二：标题" class="headerlink" title="二：标题"></a>二：标题</h1><h2 id="1-标题等级1-6（快捷键：Ctrl-1-6）"><a href="#1-标题等级1-6（快捷键：Ctrl-1-6）" class="headerlink" title="1.标题等级1-6（快捷键：Ctrl+1~6）"></a>1.标题等级1-6（快捷键：Ctrl+1~6）</h2><h3 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 一级标题（我最大）</span><br><span class="line">## 二级标题</span><br><span class="line">### 三级标题</span><br><span class="line">#### 四级标题</span><br><span class="line">##### 五级标题</span><br><span class="line">###### 六级标题（我最小）</span><br></pre></td></tr></table></figure>

<h3 id="效果展示："><a href="#效果展示：" class="headerlink" title="效果展示："></a>效果展示：</h3><h1 id="一级标题（我最大）"><a href="#一级标题（我最大）" class="headerlink" title="一级标题（我最大）"></a>一级标题（我最大）</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题（我最小）"><a href="#六级标题（我最小）" class="headerlink" title="六级标题（我最小）"></a>六级标题（我最小）</h6><h1 id="三：字体"><a href="#三：字体" class="headerlink" title="三：字体"></a>三：字体</h1><h2 id="1-加粗（Ctrl-B）"><a href="#1-加粗（Ctrl-B）" class="headerlink" title="1.加粗（Ctrl+B）"></a>1.加粗（Ctrl+B）</h2><h3 id="代码：-1"><a href="#代码：-1" class="headerlink" title="代码："></a>代码：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">我的正常状态下的字体</span><br><span class="line"></span><br><span class="line">**我是加粗后的字体**</span><br></pre></td></tr></table></figure>

<h3 id="效果："><a href="#效果：" class="headerlink" title="效果："></a>效果：</h3><p>我的正常状态下的字体</p>
<p><strong>我是加粗后的字体</strong></p>
<h2 id="2-斜体（Ctrl-I）"><a href="#2-斜体（Ctrl-I）" class="headerlink" title="2.斜体（Ctrl+I）"></a>2.斜体（Ctrl+I）</h2><h3 id="代码：-2"><a href="#代码：-2" class="headerlink" title="代码："></a>代码：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">我的正常状态下的字体</span><br><span class="line"></span><br><span class="line">*我是斜体的字体*</span><br></pre></td></tr></table></figure>

<h3 id="效果：-1"><a href="#效果：-1" class="headerlink" title="效果："></a>效果：</h3><p>我的正常状态下的字体</p>
<p><em>我是斜体的字体</em></p>
<h2 id="3-下划线（Ctrl-U）"><a href="#3-下划线（Ctrl-U）" class="headerlink" title="3.下划线（Ctrl+U）"></a>3.下划线（Ctrl+U）</h2><h3 id="代码：-3"><a href="#代码：-3" class="headerlink" title="代码："></a>代码：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">我的正常状态下的字体</span><br><span class="line"></span><br><span class="line">&lt;u&gt;我是加了下划线的字体&lt;&#x2F;u&gt;</span><br></pre></td></tr></table></figure>

<h3 id="效果：-2"><a href="#效果：-2" class="headerlink" title="效果："></a>效果：</h3><p>我的正常状态下的字体</p>
<p>我是加了下划线的字体</p>
<h2 id="4-删除线（Alt-Shift-5）"><a href="#4-删除线（Alt-Shift-5）" class="headerlink" title="4.删除线（Alt+Shift+5）"></a>4.删除线（Alt+Shift+5）</h2><h3 id="代码：-4"><a href="#代码：-4" class="headerlink" title="代码："></a>代码：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">我的正常状态下的字体</span><br><span class="line"></span><br><span class="line">~~我是加了删除线的字体~~</span><br></pre></td></tr></table></figure>

<h3 id="效果：-3"><a href="#效果：-3" class="headerlink" title="效果："></a>效果：</h3><p>我的正常状态下的字体</p>
<p>我是加了删除线的字体</p>
<h2 id="5-混合使用"><a href="#5-混合使用" class="headerlink" title="5.混合使用"></a>5.混合使用</h2><h3 id="代码：-5"><a href="#代码：-5" class="headerlink" title="代码："></a>代码：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">我的正常状态下的字体</span><br><span class="line"></span><br><span class="line">**我是加粗后的字体**</span><br><span class="line">*我是斜体的字体*</span><br><span class="line">&lt;u&gt;我是加了下划线的字体&lt;&#x2F;u&gt;</span><br><span class="line">~~我是加了删除线的字体~~</span><br><span class="line"></span><br><span class="line">***我是加粗加斜体的字体***</span><br><span class="line">&lt;u&gt;**我是加粗加下划线的字体**&lt;&#x2F;u&gt;</span><br><span class="line"></span><br><span class="line">~~**我是加粗加删除线的字体**~~</span><br><span class="line"></span><br><span class="line">*&lt;u&gt;我是加斜体加下划线的字体&lt;&#x2F;u&gt;*</span><br><span class="line">~~*我是加斜体加删除线的字体*~~</span><br><span class="line"></span><br><span class="line">&lt;u&gt;~~我是加下划线加删除线的字体~~&lt;&#x2F;u&gt;</span><br><span class="line">&lt;u&gt;***我是加粗加斜体加下划线的字体***&lt;&#x2F;u&gt;</span><br><span class="line">~~***我是加粗加斜体加删除线的字体***~~</span><br><span class="line"></span><br><span class="line">~~&lt;u&gt;*我是加斜体加下划线加删除线的字体*&lt;&#x2F;u&gt;~~</span><br><span class="line"></span><br><span class="line">~~*&lt;u&gt;**我是加粗加斜体加下划线加删除线的字体**&lt;&#x2F;u&gt;*~~</span><br></pre></td></tr></table></figure>

<h3 id="效果：-4"><a href="#效果：-4" class="headerlink" title="效果："></a>效果：</h3><p>我的正常状态下的字体</p>
<p><strong>我是加粗后的字体</strong><br><em>我是斜体的字体</em><br>我是加了下划线的字体<br>我是加了删除线的字体</p>
<p><strong><em>我是加粗加斜体的字体</em></strong><br><strong>我是加粗加下划线的字体</strong></p>
<p><strong>我是加粗加删除线的字体</strong></p>
<p><em>我是加斜体加下划线的字体</em><br><em>我是加斜体加删除线的字体</em></p>
<p>我是加下划线加删除线的字体<br><strong><em>我是加粗加斜体加下划线的字体</em></strong><br><strong><em>我是加粗加斜体加删除线的字体</em></strong></p>
<p><em>我是加斜体加下划线加删除线的字体</em></p>
<p><strong><em>我是加粗加斜体加下划线加删除线的字体</em></strong></p>
<h1 id="四：引用与标记"><a href="#四：引用与标记" class="headerlink" title="四：引用与标记"></a>四：引用与标记</h1><h2 id="1-引用（Ctrl-Shift-Q）"><a href="#1-引用（Ctrl-Shift-Q）" class="headerlink" title="1.引用（Ctrl+Shift+Q）"></a>1.引用（Ctrl+Shift+Q）</h2><h3 id="代码：-6"><a href="#代码：-6" class="headerlink" title="代码："></a>代码：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">这是普通内容</span><br><span class="line"></span><br><span class="line">&gt; 这是引用的内容</span><br><span class="line">&gt;&gt; 这也是引用的内容</span><br><span class="line">&gt;&gt;&gt; 这也是引用的内容</span><br><span class="line">&gt;&gt;&gt;&gt; 这也是引用的内容</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 我叫腰间盘</span><br></pre></td></tr></table></figure>

<h3 id="效果：-5"><a href="#效果：-5" class="headerlink" title="效果："></a>效果：</h3><p>这是普通内容</p>
<blockquote>
<p>这是引用的内容</p>
<blockquote>
<p>这也是引用的内容</p>
<blockquote>
<p>这也是引用的内容</p>
<blockquote>
<p>这也是引用的内容</p>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<p>我叫腰间盘</p>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
<h2 id="2-高亮"><a href="#2-高亮" class="headerlink" title="2.高亮"></a>2.高亮</h2><h3 id="代码：-7"><a href="#代码：-7" class="headerlink" title="代码："></a>代码：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">这是普通文本</span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;这是高亮文本&#x3D;&#x3D;</span><br></pre></td></tr></table></figure>

<h3 id="效果：-6"><a href="#效果：-6" class="headerlink" title="效果："></a>效果：</h3><p>这是普通文本</p>
<p>这是高亮文本</p>
<h2 id="3-分割线"><a href="#3-分割线" class="headerlink" title="3.分割线"></a>3.分割线</h2><h3 id="代码：-8"><a href="#代码：-8" class="headerlink" title="代码："></a>代码：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">我下面是分割线</span><br><span class="line"></span><br><span class="line">------</span><br><span class="line"></span><br><span class="line">我上面是分割线</span><br></pre></td></tr></table></figure>

<h3 id="效果：-7"><a href="#效果：-7" class="headerlink" title="效果："></a>效果：</h3><p>我下面是分割线</p>
<hr>
<p>我上面是分割线</p>
<h2 id="4-行内代码引用"><a href="#4-行内代码引用" class="headerlink" title="4.行内代码引用"></a>4.行内代码引用</h2><h3 id="代码：-9"><a href="#代码：-9" class="headerlink" title="代码："></a>代码：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">执行了&#96;print&#96;方法</span><br></pre></td></tr></table></figure>

<h3 id="效果：-8"><a href="#效果：-8" class="headerlink" title="效果："></a>效果：</h3><p>执行了<code>print</code>方法</p>
<h2 id="5-代码块引用"><a href="#5-代码块引用" class="headerlink" title="5.代码块引用"></a>5.代码块引用</h2><h3 id="代码：-10"><a href="#代码：-10" class="headerlink" title="代码："></a>代码：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">​</span><br></pre></td></tr></table></figure>
<p>str1 = ‘I am’<br>str2 = ‘ a String’<br>str_all = str1 + str2<br>print(str_all)<br>​```</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">### 效果：</span><br></pre></td></tr></table></figure>
<p>str1 = ‘I am’<br>str2 = ‘ a String’<br>str_all = str1 + str2<br>print(str_all)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"># 五：插入</span><br><span class="line"></span><br><span class="line">## 1.插入链接</span><br><span class="line"></span><br><span class="line">### 代码：</span><br></pre></td></tr></table></figure>
<p><a href="https://www.cnblogs.com/xuexianqi/" target="_blank" rel="noopener">https://www.cnblogs.com/xuexianqi/</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">### 效果：</span><br><span class="line"></span><br><span class="line">https:&#x2F;&#x2F;www.cnblogs.com&#x2F;xuexianqi&#x2F;</span><br><span class="line"></span><br><span class="line">## 2.插入链接（只显示标题，不显示链接本体）</span><br><span class="line"></span><br><span class="line">### 代码：</span><br></pre></td></tr></table></figure>
<p><a href="https://www.cnblogs.com/xuexianqi/" target="_blank" rel="noopener">这是我的个人博客</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">### 效果：</span><br><span class="line"></span><br><span class="line">[这是我的个人博客](https:&#x2F;&#x2F;www.cnblogs.com&#x2F;xuexianqi&#x2F;)</span><br><span class="line"></span><br><span class="line">## 3.插入图片</span><br><span class="line"></span><br><span class="line">### 代码：</span><br></pre></td></tr></table></figure>
<p><img src="https://images.cnblogs.com/cnblogs_com/xuexianqi/1652079/o_200221125314%E5%98%9A%E7%91%9F.gif" alt="img"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">### 效果：</span><br><span class="line"></span><br><span class="line">[![img](https:&#x2F;&#x2F;images.cnblogs.com&#x2F;cnblogs_com&#x2F;xuexianqi&#x2F;1652079&#x2F;o_200221125314%E5%98%9A%E7%91%9F.gif)](https:&#x2F;&#x2F;images.cnblogs.com&#x2F;cnblogs_com&#x2F;xuexianqi&#x2F;1652079&#x2F;o_200221125314嘚瑟.gif)</span><br><span class="line"></span><br><span class="line"># 六：列表与表格</span><br><span class="line"></span><br><span class="line">## 1.有序列表</span><br><span class="line"></span><br><span class="line">### 代码：</span><br></pre></td></tr></table></figure>
<ol>
<li>有序列表1</li>
<li>有序列表2</li>
<li>有序列表3</li>
<li>有序列表4<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">### 效果：</span><br><span class="line"></span><br><span class="line">1. List1</span><br><span class="line">2. List2</span><br><span class="line">3. List3</span><br><span class="line">4. List4</span><br><span class="line"></span><br><span class="line">## 2.无序列表</span><br><span class="line"></span><br><span class="line">### 代码：</span><br></pre></td></tr></table></figure></li>
</ol>
<ul>
<li>无序列表1</li>
<li>无序列表2</li>
<li>无序列表3</li>
<li>无序列表4<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">### 效果：</span><br><span class="line"></span><br><span class="line">- 无序列表1</span><br><span class="line">- 无序列表2</span><br><span class="line">- 无序列表3</span><br><span class="line">- 无序列表4</span><br><span class="line"></span><br><span class="line">## 3.表格</span><br><span class="line"></span><br><span class="line">### 第二行必须得有，并且第二行的冒号代表对齐格式，分别为：左对齐、居中、右对齐）</span><br><span class="line"></span><br><span class="line">### 代码：</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th align="left">name</th>
<th align="center">age</th>
<th align="right">sex</th>
</tr>
</thead>
<tbody><tr>
<td align="left">马冬梅</td>
<td align="center">20</td>
<td align="right">女</td>
</tr>
<tr>
<td align="left">李雷</td>
<td align="center">16</td>
<td align="right">男</td>
</tr>
<tr>
<td align="left">韩梅梅</td>
<td align="center">15</td>
<td align="right">女</td>
</tr>
<tr>
<td align="left">张三</td>
<td align="center">30</td>
<td align="right">男</td>
</tr>
<tr>
<td align="left"><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">### 效果：</span><br><span class="line"></span><br><span class="line">| name   | age  |  sex |</span><br><span class="line">| :----- | :--: | ---: |</span><br><span class="line">| 马冬梅 |  20  |   女 |</span><br><span class="line">| 李雷   |  16  |   男 |</span><br><span class="line">| 韩梅梅 |  15  |   女 |</span><br><span class="line">| 张三   |  30  |   男 |</span><br><span class="line"></span><br><span class="line"># 七：特殊字符</span><br><span class="line"></span><br><span class="line">| 特殊字符 |     描述      | 字符的代码 |</span><br><span class="line">| :------: | :-----------: | :--------: |</span><br><span class="line">|          |    空格符     |    &#96; &#96;     |</span><br><span class="line">|    &lt;     |    小于号     |    &#96;&lt;&#96;     |</span><br><span class="line">|    &gt;     |    大于号     |    &#96;&gt;&#96;     |</span><br><span class="line">|    &amp;     |     和号      |    &#96;&amp;&#96;     |</span><br><span class="line">|    ￥    |    人民币     |    &#96;¥&#96;     |</span><br><span class="line">|    ©     |     版权      |    &#96;©&#96;     |</span><br><span class="line">|    ®     |   注册商标    |    &#96;®&#96;     |</span><br><span class="line">|    °C    |    摄氏度     |   &#96;°°C&#96;    |</span><br><span class="line">|    ±     |    正负号     |    &#96;±&#96;     |</span><br><span class="line">|    ×     |     乘号      |    &#96;×&#96;     |</span><br><span class="line">|    ÷     |     除号      | &#96;&amp;devide;&#96; |</span><br><span class="line">|    ²     | 平方（上标²） |    &#96;²&#96;     |</span><br><span class="line">|    ³     | 立方（上标³） |    &#96;³&#96;     |</span><br><span class="line"></span><br><span class="line"># 八：流程图</span><br><span class="line"></span><br><span class="line">### 代码：</span><br></pre></td></tr></table></figure></td>
<td align="center"></td>
<td align="right"></td>
</tr>
<tr>
<td align="left">​```flow</td>
<td align="center"></td>
<td align="right"></td>
</tr>
<tr>
<td align="left">st=&gt;start: 开始</td>
<td align="center"></td>
<td align="right"></td>
</tr>
<tr>
<td align="left">op=&gt;operation: My Operation</td>
<td align="center"></td>
<td align="right"></td>
</tr>
<tr>
<td align="left">cond=&gt;condition: Yes or No?</td>
<td align="center"></td>
<td align="right"></td>
</tr>
<tr>
<td align="left">e=&gt;end</td>
<td align="center"></td>
<td align="right"></td>
</tr>
<tr>
<td align="left">st-&gt;op-&gt;cond</td>
<td align="center"></td>
<td align="right"></td>
</tr>
<tr>
<td align="left">cond(yes)-&gt;e</td>
<td align="center"></td>
<td align="right"></td>
</tr>
<tr>
<td align="left">cond(no)-&gt;op</td>
<td align="center"></td>
<td align="right"></td>
</tr>
<tr>
<td align="left">&amp;```</td>
<td align="center"></td>
<td align="right"></td>
</tr>
<tr>
<td align="left"><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">### 效果图：</span><br><span class="line"></span><br><span class="line">![](https:&#x2F;&#x2F;gitee.com&#x2F;wjxyzs&#x2F;img&#x2F;raw&#x2F;master&#x2F;img&#x2F;20200707161534.png)</span><br><span class="line"></span><br><span class="line">&gt; ### 字体颜色</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;javascript</span><br><span class="line">&lt;font face&#x3D;&quot;黑体&quot;&gt;我是黑体字&lt;&#x2F;font&gt;</span><br><span class="line">&lt;font face&#x3D;&quot;微软雅黑&quot;&gt;我是微软雅黑&lt;&#x2F;font&gt;</span><br><span class="line">&lt;font face&#x3D;&quot;STCAIYUN&quot;&gt;我是华文彩云&lt;&#x2F;font&gt;</span><br><span class="line">&lt;font color&#x3D;#0099ff size&#x3D;7 face&#x3D;&quot;黑体&quot;&gt;color&#x3D;#0099ff size&#x3D;72 face&#x3D;&quot;黑体&quot;&lt;&#x2F;font&gt;</span><br><span class="line">&lt;font color&#x3D;#00ffff size&#x3D;72&gt;color&#x3D;#00ffff&lt;&#x2F;font&gt;</span><br><span class="line">&lt;font color&#x3D;gray size&#x3D;72&gt;color&#x3D;gray&lt;&#x2F;font&gt;</span><br><span class="line"></span><br><span class="line">Size：规定文本的尺寸大小。可能的值：从 1 到 7 的数字。浏览器默认值是 3</span><br></pre></td></tr></table></figure></td>
<td align="center"></td>
<td align="right"></td>
</tr>
</tbody></table>
</li>
</ul>
<blockquote>
<h3 id="背景颜色"><a href="#背景颜色" class="headerlink" title="背景颜色"></a>背景颜色</h3></blockquote>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="comment">#D1EEEE #FBE4E4 #E9E5E3 #EAE4F2 #D3EBF1</span></span><br><span class="line"></span><br><span class="line">&lt;table&gt;&lt;tr&gt;&lt;td bgcolor=<span class="comment">#D1EEEE align=center&gt;**下载**&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;center&gt;居中&lt;/center&gt;</span><br></pre></td></tr></table></figure>

<p>☆☆☆☆☆</p>
]]></content>
      <categories>
        <category>技能get</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>[NoSQL的前世今生]</title>
    <url>/2020/03/08/NoSQL%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/</url>
    <content><![CDATA[<blockquote>
<p>成长手册，<strong>GitHub</strong> <a href="https://github.com/rogerXS80/roger" target="_blank" rel="noopener">Lupinus</a> ，N线互联网开发必备技能兵器谱</p>
</blockquote>
<h2 id="啥玩意："><a href="#啥玩意：" class="headerlink" title="啥玩意："></a>啥玩意：</h2><p>NoSQL(NoSQL = Not Only SQL )，“不仅仅是SQL”，泛指<strong>非关系型的数据库</strong>。随着互联网web2.0网站的兴起，传统的关系数据库在处理web2.0网站，特别是超大规模和高并发的SNS类型的web2.0纯动态网站已经显得力不从心，暴露了很多难以克服的问题，而非关系型的数据库则由于其本身的特点得到了非常迅速的发展。NoSQL数据库的产生就是为了解决大规模数据集合多重数据种类带来的挑战，尤其是大数据应用难题，包括超大规模数据的存储。（例如谷歌或Facebook每天为他们的用户收集万亿比特的数据）。这些类型的数据存储不需要固定的模式，无需多余操作就可以横向扩展。</p>
<h3 id="互联网时代背景下，数据库的发展以及为什么要用nosql"><a href="#互联网时代背景下，数据库的发展以及为什么要用nosql" class="headerlink" title="互联网时代背景下，数据库的发展以及为什么要用nosql"></a>互联网时代背景下，数据库的发展以及为什么要用nosql</h3><h4 id="1-单机MySQL的美好年代"><a href="#1-单机MySQL的美好年代" class="headerlink" title="1. 单机MySQL的美好年代"></a>1. 单机MySQL的美好年代</h4><p> 在以前，一个网站的访问量一般都不大，用单个数据库完全可以轻松应付。在那个时候，更多的都是静态网页，动态交互类型的网站不多。上述架构下，我们来看看数据存储的瓶颈是什么？</p>
<ul>
<li>数据量的总大小 一个机器放不下时</li>
<li>数据的索引（B+ Tree）一个机器的内存放不下时</li>
<li>访问量(读写混合)一个实例不能承受</li>
</ul>
<h4 id="2-Memcached-缓存-MySQL-垂直拆分"><a href="#2-Memcached-缓存-MySQL-垂直拆分" class="headerlink" title="2. Memcached(缓存)+MySQL+垂直拆分"></a>2. Memcached(缓存)+MySQL+垂直拆分</h4><p> 后来，随着访问量的上升，几乎大部分使用MySQL架构的网站在数据库上都开始出现了性能问题，web程序不再仅仅专注在功能上，同时也在追求性能。程序员们开始大量的使用<strong>缓存技术</strong>来缓解数据库的压力，优化数据库的结构和索引。开始比较流行的是通过<strong>文件缓存</strong>来缓解数据库压力，但是当访问量继续增大的时候，多台web机器通过文件缓存不能共享，大量的小文件缓存也带了了比较高的IO压力。在这个时候，Memcached就自然的成为一个非常时尚的技术产品。</p>
<p> Memcached作为一个<strong>独立的分布式的缓存服务器</strong>，为多个web服务器提供了一个共享的高性能缓存服务，在Memcached服务器上，又发展了根据hash算法来进行多台Memcached缓存服务的扩展，然后又出现了一致性hash来解决增加或减少缓存服务器导致重新hash带来的大量缓存失效的弊端</p>
<h4 id="3-Mysql主从读写分离"><a href="#3-Mysql主从读写分离" class="headerlink" title="3. Mysql主从读写分离"></a>3. Mysql主从读写分离</h4><p> 由于数据库的写入压力增加，Memcached只能缓解数据库的读取压力。读写集中在一个数据库上让数据库不堪重负，大部分网站开始<strong>使用主从复制技术来达到读写分离，以提高读写性能和读库的可扩展性</strong>。<strong>Mysql的master-slave模式</strong>成为这个时候的网站标配了。</p>
<h4 id="4-分表分库-水平拆分-mysql集群"><a href="#4-分表分库-水平拆分-mysql集群" class="headerlink" title="4. 分表分库+水平拆分+mysql集群"></a>4. 分表分库+水平拆分+mysql集群</h4><p> 在Memcached的高速缓存，MySQL的主从复制，读写分离的基础之上，这时MySQL主库的写压力开始出现瓶颈，而数据量的持续猛增，由于<strong>MyISAM</strong>使用<strong>表锁</strong>，在高并发下会出现严重的锁问题，大量的高并发MySQL应用开始使用<strong>InnoDB</strong>引擎代替MyISAM。</p>
<p> 同时，开始流行<strong>使用分表分库来缓解写压力和数据增长的扩展问题</strong>。这个时候，分表分库成了一个热门技术，是面试的热门问题也是业界讨论的热门技术问题。也就在这个时候，MySQL推出了还不太稳定的表分区，这也给技术实力一般的公司带来了希望。虽然MySQL推出了MySQL Cluster集群，但性能也不能很好满足互联网的要求，只是在高可靠性上提供了非常大的保证。</p>
<h4 id="5-MySQL的扩展性瓶颈"><a href="#5-MySQL的扩展性瓶颈" class="headerlink" title="5. MySQL的扩展性瓶颈"></a>5. MySQL的扩展性瓶颈</h4><p> MySQL数据库也经常存储一些大文本字段，导致数据库表非常的大，在做数据库恢复的时候就导致非常的慢，不容易快速恢复数据库。比如1000万4KB大小的文本就接近40GB的大小，如果能把这些数据从MySQL省去，MySQL将变得非常的小。关系数据库很强大，但是它并不能很好的应付所有的应用场景。MySQL的扩展性差（需要复杂的技术来实现），大数据下IO压力大，表结构更改困难，正是当前使用MySQL的开发人员面临的问题。</p>
<h4 id="6-为什么用NoSQL"><a href="#6-为什么用NoSQL" class="headerlink" title="6. 为什么用NoSQL"></a>6. 为什么用NoSQL</h4><p> 今天我们可以通过第三方平台（如：Google,Facebook等）可以很容易的<strong>访问和抓取数据</strong>（爬虫私密信息有风险哈）。用户的个人信息，社交网络，地理位置，用户生成的数据和用户操作日志已经成倍的增加。我们如果要对这些用户数据进行挖掘，那SQL数据库已经不适合这些应用了, NoSQL数据库的发展也不能很好的处理这些大的数据。</p>
<p><img src="https://gitee.com/wjxyzs/img/raw/master/img/16f118aa1160ab73.jpg" alt=""></p>
<h2 id="NoSql的优缺点"><a href="#NoSql的优缺点" class="headerlink" title="NoSql的优缺点"></a>NoSql的优缺点</h2><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ul>
<li><strong>易扩展</strong> ： NoSQL数据库种类繁多，但是一个共同的特点都是去掉关系数据库的关系型特性。数据之间无关系，这样就非常容易扩展。也无形之间，在架构的层面上带来了可扩展的能力。</li>
<li><strong>大数据量高性能</strong>：NoSQL数据库都具有非常高的读写性能，尤其在大数据量下，同样表现优秀。这得益于它的无关系性，数据库的结构简单。一般MySQL使用Query Cache，每次表的更新Cache就失效，是一种大粒度的Cache，在针对web2.0的交互频繁的应用，Cache性能不高。而NoSQL的Cache是记录级的，是一种细粒度的Cache，所以NoSQL在这个层面上来说就要性能高很多了</li>
<li><strong>多样灵活的数据模型</strong>：NoSQL无需事先为要存储的数据建立字段，随时可以存储自定义的数据格式。而在关系数据库里，增删字段是一件非常麻烦的事情。如果是非常大数据量的表，增加字段简直就是一个噩梦</li>
</ul>
<h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ul>
<li>没有标准化</li>
<li>有限的查询功能（到目前为止）</li>
<li>最终一致是不直观的程序</li>
</ul>
<h3 id="传统RDBMS-VS-NOSQL："><a href="#传统RDBMS-VS-NOSQL：" class="headerlink" title="传统RDBMS VS NOSQL："></a>传统<strong>RDBMS</strong> <em>VS</em> <strong>NOSQL</strong>：</h3><h4 id="RDBMS"><a href="#RDBMS" class="headerlink" title="RDBMS"></a>RDBMS</h4><ul>
<li>高度组织化结构化数据</li>
<li>结构化查询语言（SQL）</li>
<li>数据和关系都存储在单独的表中。</li>
<li>数据操纵语言，数据定义语言</li>
<li>严格的一致性</li>
<li>基础事务</li>
</ul>
<h4 id="NoSQL"><a href="#NoSQL" class="headerlink" title="NoSQL"></a>NoSQL</h4><ul>
<li>代表着不仅仅是SQL</li>
<li>没有声明性查询语言</li>
<li>没有预定义的模式</li>
<li>键 - 值对存储，列存储，文档存储，图形数据库</li>
<li>最终一致性，而非ACID属性</li>
<li>非结构化和不可预知的数据</li>
<li>CAP定理</li>
<li>高性能，高可用性和可伸缩性</li>
</ul>
<h4 id="3V-3高"><a href="#3V-3高" class="headerlink" title="3V+3高"></a><strong>3V+3高</strong></h4><ul>
<li>大数据时代的3V（海量Volume、多样Variety、实时Velocity）</li>
<li>互联网需求的3高（高并发、高可扩、高性能）</li>
</ul>
<h2 id="NoSQL数据模型简介"><a href="#NoSQL数据模型简介" class="headerlink" title="NoSQL数据模型简介"></a>NoSQL数据模型简介</h2><p><strong>聚合模型</strong></p>
<ul>
<li>KV键值</li>
<li>bson：BSON（）是一种类json的一种二进制形式的存储格式，简称Binary JSON，它和JSON一样，支持内嵌的文档对象和数组对象</li>
<li>列族：顾名思义，是按列存储数据的。最大的特点是方便存储结构化和半结构化数据，方便做数据压缩，对针对某一列或者某几列的查询有非常大的IO优势。</li>
<li>图形：</li>
</ul>
<h2 id="NoSQL数据库的四大分类"><a href="#NoSQL数据库的四大分类" class="headerlink" title="NoSQL数据库的四大分类"></a>NoSQL数据库的四大分类</h2><p><strong>KV键值：</strong></p>
<p> 新浪：BerkeleyDB+redis</p>
<p> 美团：redis+tair</p>
<p> 阿里、百度：memcache+redis</p>
<p><strong>文档型数据库(bson格式比较多)</strong>：</p>
<p> CouchDB</p>
<p> MongoDB：MongoDB 是一个基于分布式文件存储的数据库。由 C++ 语言编写。旨在为 WEB 应用提供可扩展的高性能数据存储解决方案。MongoDB 是一个介于关系数据库和非关系数据库之间的产品，是非关系数据库当中功能最丰富，最像关系数据库的。</p>
<p><strong>列存储数据库</strong></p>
<p> Cassandra, HBase</p>
<p> 分布式文件系统</p>
<p><strong>图关系数据库</strong></p>
<p> 它不是放图形的，放的是关系比如:朋友圈社交网络、广告推荐系统、社交网络，推荐系统等。专注于构建关系图谱</p>
<p>Neo4J, InfoGrid</p>
<h4 id="四者对比"><a href="#四者对比" class="headerlink" title="四者对比"></a>四者对比</h4><p><strong>在分布式数据库中CAP原理CAP+BASE</strong></p>
<p>传统的<strong>ACID</strong></p>
<p><font color=red size=4>A (Atomicity) 原子性</font></p>
<p><font color=red size=4>C (Consistency) 一致性</font></p>
<p><font color=red size=4>I (Isolation) 独立性</font></p>
<p><font color=red size=4>D (Durability) 持久性</font></p>
<h3 id="CAP"><a href="#CAP" class="headerlink" title="CAP"></a><strong>CAP</strong></h3><p><font color=red size=4><strong>C (Consistency) 强一致性——所有节点在同一时间具有相同的数据</strong></font></p>
<p><font color=red size=4><strong>A (Availability) 可用性——保证每个请求不管成功或者失败都有响应</strong></font></p>
<p><font color=red size=4><strong>P (Partition tolerance) 分区容错性——系统中任意信息的丢失或失败不会影响系统的继续运作</strong></font></p>
<p>CAP理论的核心是：<strong>一个分布式系统不可能同时很好的满足一致性，可用性和分区容错性这三个需求，最多只能同时较好的满足两个</strong>。而由于当前的网络硬件肯定会出现延迟丢包等问题，所以<strong>分区容忍性是我们必须需要实现的</strong>。我们称之为<strong>CAP的3进2，</strong>所以我们只能在一致性和可用性之间进行权衡，没有NoSQL系统能同时保证这三点。</p>
<p>因此，根据 CAP 原理将 NoSQL 数据库分成了满足 CA 原则、满足 CP 原则和满足 AP 原则三大类：</p>
<ul>
<li>CA - 单点集群，满足一致性，可用性的系统，通常在可扩展性上不太强大。传统Oracle数据库</li>
<li>CP - 满足一致性，分区容忍性的系统，通常性能不是特别高。Redis、Mongodb</li>
<li>AP - 满足可用性，分区容忍性的系统，通常可能对一致性要求低一些。大多数网站架构的选择</li>
</ul>
<p><img src="https://gitee.com/wjxyzs/img/raw/master/img/16f118aa11736452.jpg" alt=""></p>
<p>☆ 注意</p>
<p><strong>分布式架构的时候必须做出取舍</strong>：一致性和可用性之间取一个平衡。多余大多数web应用，其实并不需要强一致性。因此牺牲C换取P，这是目前分布式数据库产品的方向</p>
<p><strong>一致性与可用性的决择</strong>：对于web2.0网站来说，关系数据库的很多主要特性却往往无用武之地</p>
<p><strong>数据库事务一致性需求</strong> ：很多web实时系统并不要求严格的数据库事务，对读一致性的要求很低， 有些场合对写一致性要求并不高。允许实现最终一致性。</p>
<p><strong>数据库的写实时性和读实时性需求</strong>：对关系数据库来说，插入一条数据之后立刻查询，是肯定可以读出来这条数据的，但是对于很多web应用来说，并不要求这么高的实时性，比方说发一条消息之 后，过几秒乃至十几秒之后，我的订阅者才看到这条动态是完全可以接受的。</p>
<p><strong>对复杂的SQL查询，特别是多表关联查询的需求</strong> ：任何大数据量的web系统，都非常忌讳多个大表的关联查询，以及复杂的数据分析类型的报表查询，特别是SNS类型的网站，从需求以及产品设计角度，就避免了这种情况的产生。往往更多的只是单表的主键查询，以及单表的简单条件分页查询，SQL的功能被极大的弱化了。</p>
<h2 id="BASE是什么"><a href="#BASE是什么" class="headerlink" title="BASE是什么"></a>BASE是什么</h2><p>BASE就是为了解决关系数据库强一致性引起的的可用性降低问题而提出的方案。</p>
<p>BASE其实是下面三个术语的缩写：</p>
<ul>
<li>基本可用（Basically Available）</li>
<li>软状态（Soft state）</li>
<li>最终一致（Eventually consistent）</li>
</ul>
<p>它的思想是通过让系统放松对某一时刻数据一致性的要求来换取系统整体伸缩性和性能上改观。为什么这么说呢，缘由就在于大型系统往往由于地域分布和极高性能的要求，不可能采用分布式事务来完成这些指标，要想获得这些指标，我们必须采用另外一种方式来完成，这里BASE就是解决这个问题的办法</p>
<p><strong>分布式+集群简介</strong></p>
<p>分布式系统（distributed system）</p>
<p>由多台计算机和通信的软件组件通过计算机网络连接（本地网络或广域网）组成。分布式系统是建立在网络之上的软件系统。正是因为软件的特性，所以分布式系统具有高度的内聚性和透明性。因此，网络和分布式系统之间的区别更多的在于高层软件（特别是操作系统），而不是硬件。分布式系统可以应用在在不同的平台上如：PC、工作站、局域网和广域网上等。</p>
<p><strong>分布式计算的优点</strong></p>
<ul>
<li><strong>可靠性（容错）</strong> ：分布式计算系统中的一个重要的优点是可靠性。一台服务器的系统崩溃并不影响到其余的服务器。</li>
<li><strong>可扩展性</strong>：在分布式计算系统可以根据需要增加更多的机器。</li>
<li><strong>资源共享</strong>：共享数据是必不可少的应用，如银行，预订系统。</li>
<li><strong>灵活性</strong>：由于该系统是非常灵活的，它很容易安装，实施和调试新的服务。</li>
<li><strong>更快的速度</strong>：分布式计算系统可以有多台计算机的计算能力，使得它比其他系统有更快的处理速度。</li>
<li><strong>开放系统</strong>：由于它是开放的系统，本地或者远程都可以访问到该服务。</li>
<li><strong>更高的性能</strong>：相较于集中式计算机网络集群可以提供更高的性能（及更好的性价比）。</li>
</ul>
<p><strong>分布式计算的缺点</strong></p>
<ul>
<li><strong>故障排除</strong>： 故障排除和诊断问题。</li>
<li><strong>软件</strong>：更少的软件支持是分布式计算系统的主要缺点。</li>
<li><strong>网络</strong>：网络基础设施的问题，包括：传输问题，高负载，信息丢失等。</li>
<li><strong>安全性</strong>：开发系统的特性让分布式计算系统存在着数据的安全性和共享的风险等问题。</li>
</ul>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>[用Hexo+Github搭建个人博客]</title>
    <url>/2020/07/08/%E7%94%A8Hexo-Github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h1 id="hexo框架搭建个人博客"><a href="#hexo框架搭建个人博客" class="headerlink" title="hexo框架搭建个人博客"></a>hexo框架搭建个人博客</h1><h2 id="1-github配置"><a href="#1-github配置" class="headerlink" title="1. github配置"></a>1. github配置</h2><h3 id="下载安装git"><a href="#下载安装git" class="headerlink" title="下载安装git"></a>下载安装git</h3><h3 id="https-git-scm-com"><a href="#https-git-scm-com" class="headerlink" title="https://git-scm.com/"></a><a href="https://git-scm.com/" target="_blank" rel="noopener">https://git-scm.com/</a></h3><h3 id="桌面右击打开Git-Bash-Here"><a href="#桌面右击打开Git-Bash-Here" class="headerlink" title="桌面右击打开Git Bash Here"></a>桌面右击打开Git Bash Here</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git config --global user.name <span class="string">"用户名"</span></span><br><span class="line"></span><br><span class="line">$ git config --global user.email <span class="string">"邮箱"</span></span><br></pre></td></tr></table></figure>

<h3 id="登录github"><a href="#登录github" class="headerlink" title="登录github"></a>登录github</h3><p><img src="/images/github.png" alt="github.png"></p>
<h3 id="创建新仓库"><a href="#创建新仓库" class="headerlink" title="创建新仓库"></a>创建新仓库</h3><p><img src="/images/hexo%20b6a26e944b45432b84f717029640e041.png" alt="hexo%20b6a26e944b45432b84f717029640e041.png"></p>
<h3 id="仓库名是固定的，用户名-github-io，这边已经创建过，所以飘红"><a href="#仓库名是固定的，用户名-github-io，这边已经创建过，所以飘红" class="headerlink" title="仓库名是固定的，用户名+github.io，这边已经创建过，所以飘红"></a>仓库名是固定的，用户名+github.io，这边已经创建过，所以飘红</h3><p><img src="/images/2.png" alt="2.png"></p>
<h3 id="生成key，在到ssh-key位置"><a href="#生成key，在到ssh-key位置" class="headerlink" title="生成key，在到ssh-key位置"></a>生成key，在到ssh-key位置</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ssh-keygen -t -rsa -C <span class="string">"fastsword66@gmail.com"</span></span><br></pre></td></tr></table></figure>

<p><img src="/images/ssh-keygen.png" alt="ssh-keygen.png"></p>
<h3 id="找到ssh-keygen目录，复制id-rsa-pub中的内容"><a href="#找到ssh-keygen目录，复制id-rsa-pub中的内容" class="headerlink" title="找到ssh-keygen目录，复制id_rsa.pub中的内容"></a>找到ssh-keygen目录，复制id_rsa.pub中的内容</h3><p><img src="/images/ssh-keygen%201.png" alt="ssh-keygen%201.png"></p>
<h3 id="到github的settings中设置ssh-keys，把复制的内容copy进去"><a href="#到github的settings中设置ssh-keys，把复制的内容copy进去" class="headerlink" title="到github的settings中设置ssh-keys，把复制的内容copy进去"></a>到github的settings中设置ssh-keys，把复制的内容copy进去</h3><p><img src="/images/ssh.png" alt="ssh.png"></p>
<p><img src="/images/copy-key.png" alt="copy-key.png"></p>
<h3 id="确认key是否能够使用"><a href="#确认key是否能够使用" class="headerlink" title="确认key是否能够使用"></a>确认key是否能够使用</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ssh -T git@github.com</span><br></pre></td></tr></table></figure>

<h2 id="2-hexo框架"><a href="#2-hexo框架" class="headerlink" title="2. hexo框架"></a>2. hexo框架</h2><h3 id="查看npm版本号"><a href="#查看npm版本号" class="headerlink" title="查看npm版本号"></a>查看npm版本号</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm -v</span><br></pre></td></tr></table></figure>

<h3 id="如果有就通过npm安装hexo"><a href="#如果有就通过npm安装hexo" class="headerlink" title="如果有就通过npm安装hexo"></a>如果有就通过npm安装hexo</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g hexo</span><br></pre></td></tr></table></figure>

<p><img src="/images/hexo.png" alt="hexo.png"></p>
<h3 id="选个位置创建个新文件夹myblog，在文件夹中右键打开Git-Bash-Here，初始化hexo"><a href="#选个位置创建个新文件夹myblog，在文件夹中右键打开Git-Bash-Here，初始化hexo" class="headerlink" title="选个位置创建个新文件夹myblog，在文件夹中右键打开Git Bash Here，初始化hexo"></a>选个位置创建个新文件夹myblog，在文件夹中右键打开Git Bash Here，初始化hexo</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo init</span><br></pre></td></tr></table></figure>

<h3 id="安装hexo-deploy-git，方便以后用hexo-deoloy去部署网站"><a href="#安装hexo-deploy-git，方便以后用hexo-deoloy去部署网站" class="headerlink" title="安装hexo-deploy-git，方便以后用hexo-deoloy去部署网站"></a>安装hexo-deploy-git，方便以后用hexo-deoloy去部署网站</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<h3 id="本地测试是否能预览博客，复制地址"><a href="#本地测试是否能预览博客，复制地址" class="headerlink" title="本地测试是否能预览博客，复制地址"></a>本地测试是否能预览博客，复制地址</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p><img src="/images/hexo%20b6a26e944b45432b84f717029640e041%201.png" alt="hexo%20b6a26e944b45432b84f717029640e041%201.png"></p>
<h3 id="打开-config设置deployment"><a href="#打开-config设置deployment" class="headerlink" title="打开_config设置deployment"></a>打开_config设置deployment</h3><p><img src="/images/deployment.png" alt="deployment.png"></p>
<h3 id="repository从你的仓库中copy"><a href="#repository从你的仓库中copy" class="headerlink" title="repository从你的仓库中copy"></a>repository从你的仓库中copy</h3><p><img src="/images/1593523025(1).png" alt="1593523025(1).png"></p>
<h3 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ctrl+c 退出server</span><br><span class="line"></span><br><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<h2 id="3-更换主题"><a href="#3-更换主题" class="headerlink" title="3. 更换主题"></a>3. 更换主题</h2><h3 id="到hexo官网：-https-hexo-io-zh-cn"><a href="#到hexo官网：-https-hexo-io-zh-cn" class="headerlink" title="到hexo官网： https://hexo.io/zh-cn/"></a>到hexo官网： <a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">https://hexo.io/zh-cn/</a></h3><p><img src="/images/hexo%20b6a26e944b45432b84f717029640e041%202.png" alt="hexo%20b6a26e944b45432b84f717029640e041%202.png"></p>
<p><img src="/images/2%201.png" alt="2%201.png"></p>
<h3 id="下载主题"><a href="#下载主题" class="headerlink" title="下载主题"></a>下载主题</h3><p><img src="/images/hexo%20b6a26e944b45432b84f717029640e041%203.png" alt="hexo%20b6a26e944b45432b84f717029640e041%203.png"></p>
<h3 id="解压后放到myblog中的themes"><a href="#解压后放到myblog中的themes" class="headerlink" title="解压后放到myblog中的themes"></a>解压后放到myblog中的themes</h3><p><img src="/images/1593525431(1).png" alt="1593525431(1).png"></p>
<h3 id="打开-config设置主题，名称是主题文件夹名字，可以更改"><a href="#打开-config设置主题，名称是主题文件夹名字，可以更改" class="headerlink" title="打开_config设置主题，名称是主题文件夹名字，可以更改"></a>打开_config设置主题，名称是主题文件夹名字，可以更改</h3><p><img src="/images/hexo%20b6a26e944b45432b84f717029640e041%204.png" alt="hexo%20b6a26e944b45432b84f717029640e041%204.png"></p>
<h3 id="生成静态文件-1"><a href="#生成静态文件-1" class="headerlink" title="生成静态文件"></a>生成静态文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<h3 id="部署发布"><a href="#部署发布" class="headerlink" title="部署发布"></a>部署发布</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<h3 id="完成，是不是非常简单"><a href="#完成，是不是非常简单" class="headerlink" title="完成，是不是非常简单"></a>完成，是不是非常简单</h3><p><img src="/images/hexo%20b6a26e944b45432b84f717029640e041%205.png" alt="hexo%20b6a26e944b45432b84f717029640e041%205.png"></p>
<h2 id="Ending…"><a href="#Ending…" class="headerlink" title="Ending…"></a>Ending…</h2>]]></content>
      <categories>
        <category>技能get</category>
      </categories>
      <tags>
        <tag>博客搭建</tag>
      </tags>
  </entry>
  <entry>
    <title>[用PicGo+Gitee（码云）搭建Markdown图床]</title>
    <url>/2020/07/08/%E7%94%A8PicGo-Gitee%EF%BC%88%E7%A0%81%E4%BA%91%EF%BC%89%E6%90%AD%E5%BB%BAMarkdown%E5%9B%BE%E5%BA%8A/</url>
    <content><![CDATA[<h1 id="用PicGo-Gitee（码云）搭建Markdown图床"><a href="#用PicGo-Gitee（码云）搭建Markdown图床" class="headerlink" title="用PicGo+Gitee（码云）搭建Markdown图床"></a>用PicGo+Gitee（码云）搭建Markdown图床</h1><h2 id="一：引言"><a href="#一：引言" class="headerlink" title="一：引言"></a>一：引言</h2><p>图床一般是指储存图片的服务器，有国内和国外之分。国外的图床由于有空间距离等因素决定访问速度很慢影响图片显示速度。国内也分为单线空间、多线空间和cdn加速三种。</p>
<p>简单来说，图床就是自动把本地图片转换成链接的一款工具，网络上有很多图床工具，就目前使用种类而言，PicGo 算得上一款比较优秀的图床工具。它是一款用 Electron-vue 开发的软件，可以支持微博，七牛云，腾讯云COS，又拍云，GitHub，阿里云OSS，<a href="http://sm.ms/" target="_blank" rel="noopener">SM.MS</a>，imgur 等8种常用图床，功能强大，简单易用，同时，它也支持Gitee（码云）。</p>
<h2 id="二：需要用到的软件"><a href="#二：需要用到的软件" class="headerlink" title="二：需要用到的软件"></a>二：需要用到的软件</h2><h3 id="1-Typora（Markdown文本编辑软件）"><a href="#1-Typora（Markdown文本编辑软件）" class="headerlink" title="1.Typora（Markdown文本编辑软件）"></a><strong>1.Typora（Markdown文本编辑软件）</strong></h3><h3 id="Typora-是一款支持实时预览的-Markdown-文本编辑器，并且完全免费。"><a href="#Typora-是一款支持实时预览的-Markdown-文本编辑器，并且完全免费。" class="headerlink" title="Typora 是一款支持实时预览的 Markdown 文本编辑器，并且完全免费。"></a><strong>Typora 是一款支持实时预览的 Markdown 文本编辑器，并且完全免费。</strong></h3><h3 id="下载地址：https-www-typora-io"><a href="#下载地址：https-www-typora-io" class="headerlink" title="下载地址：https://www.typora.io/"></a><strong>下载地址：<a href="https://www.typora.io/" target="_blank" rel="noopener">https://www.typora.io/</a></strong></h3><h3 id="使用教程：https-www-cnblogs-com-xuexianqi-p-13260516-html"><a href="#使用教程：https-www-cnblogs-com-xuexianqi-p-13260516-html" class="headerlink" title="使用教程：https://www.cnblogs.com/xuexianqi/p/13260516.html"></a><strong>使用教程：<a href="https://www.cnblogs.com/xuexianqi/p/13260516.html" target="_blank" rel="noopener">https://www.cnblogs.com/xuexianqi/p/13260516.html</a></strong></h3><h3 id="进入下载地址后，根据系统来选择安装包，下载完成后，直接无脑下一步即可，路径默认"><a href="#进入下载地址后，根据系统来选择安装包，下载完成后，直接无脑下一步即可，路径默认" class="headerlink" title="进入下载地址后，根据系统来选择安装包，下载完成后，直接无脑下一步即可，路径默认"></a><strong>进入下载地址后，根据系统来选择安装包，下载完成后，直接无脑下一步即可，路径默认</strong></h3><p><img src="/images/o_20070611481801.png" alt="o_20070611481801.png"></p>
<h3 id="2-PicGo（图床软件）"><a href="#2-PicGo（图床软件）" class="headerlink" title="2.PicGo（图床软件）"></a><strong>2.PicGo（图床软件）</strong></h3><h3 id="一个图床，一个用于快速上传图片并获取图片URL链接的工具，也完全免费。"><a href="#一个图床，一个用于快速上传图片并获取图片URL链接的工具，也完全免费。" class="headerlink" title="一个图床，一个用于快速上传图片并获取图片URL链接的工具，也完全免费。"></a><strong>一个图床，一个用于快速上传图片并获取图片URL链接的工具，也完全免费。</strong></h3><h3 id="官方指南：https-picgo-github-io-PicGo-Doc-zh-guide"><a href="#官方指南：https-picgo-github-io-PicGo-Doc-zh-guide" class="headerlink" title="官方指南：https://picgo.github.io/PicGo-Doc/zh/guide/"></a><strong>官方指南：<a href="https://picgo.github.io/PicGo-Doc/zh/guide/" target="_blank" rel="noopener">https://picgo.github.io/PicGo-Doc/zh/guide/</a></strong></h3><h3 id="下载地址：https-github-com-Molunerfinn-PicGo-releases"><a href="#下载地址：https-github-com-Molunerfinn-PicGo-releases" class="headerlink" title="下载地址：https://github.com/Molunerfinn/PicGo/releases"></a><strong>下载地址：<a href="https://github.com/Molunerfinn/PicGo/releases" target="_blank" rel="noopener">https://github.com/Molunerfinn/PicGo/releases</a></strong></h3><h3 id="GitHub网站进不去的点这里：https-www-cnblogs-com-xuexianqi-p-13219719-html"><a href="#GitHub网站进不去的点这里：https-www-cnblogs-com-xuexianqi-p-13219719-html" class="headerlink" title="GitHub网站进不去的点这里：https://www.cnblogs.com/xuexianqi/p/13219719.html"></a><strong>GitHub网站进不去的点这里：<a href="https://www.cnblogs.com/xuexianqi/p/13219719.html" target="_blank" rel="noopener">https://www.cnblogs.com/xuexianqi/p/13219719.html</a></strong></h3><h3 id="进入下载地址后，选择最新版本，Windows系统点击-exe文件进行下载，安装直接无脑下一步，路径默认即可（MacOS系统点击-dmg文件，Linux系统点击tar-gz下载）"><a href="#进入下载地址后，选择最新版本，Windows系统点击-exe文件进行下载，安装直接无脑下一步，路径默认即可（MacOS系统点击-dmg文件，Linux系统点击tar-gz下载）" class="headerlink" title="进入下载地址后，选择最新版本，Windows系统点击.exe文件进行下载，安装直接无脑下一步，路径默认即可（MacOS系统点击.dmg文件，Linux系统点击tar.gz下载）"></a><strong>进入下载地址后，选择最新版本，Windows系统点击.exe文件进行下载，安装直接无脑下一步，路径默认即可（MacOS系统点击.dmg文件，Linux系统点击tar.gz下载）</strong></h3><p><img src="/images/o_20070611482102.png" alt="o_20070611482102.png"></p>
<h3 id="3-Gitee（码云）"><a href="#3-Gitee（码云）" class="headerlink" title="3.Gitee（码云）"></a><strong>3.Gitee（码云）</strong></h3><h3 id="码云，一款基于-Git-的代码托管和研发协作平台官方，又称为国内的github。"><a href="#码云，一款基于-Git-的代码托管和研发协作平台官方，又称为国内的github。" class="headerlink" title="码云，一款基于 Git 的代码托管和研发协作平台官方，又称为国内的github。"></a><strong>码云，一款基于 Git 的代码托管和研发协作平台官方，又称为国内的github。</strong></h3><h3 id="官方网站：https-gitee-com"><a href="#官方网站：https-gitee-com" class="headerlink" title="官方网站：https://gitee.com/"></a><strong>官方网站：<a href="https://gitee.com/" target="_blank" rel="noopener">https://gitee.com/</a></strong></h3><h3 id="注册网址：https-gitee-com-signup"><a href="#注册网址：https-gitee-com-signup" class="headerlink" title="注册网址：https://gitee.com/signup"></a><strong>注册网址：<a href="http://www.baidu.com/link?url=Q9yIAdEvisuJfrmu8LQ_LZt3jRfQICY7Q4jyCEKyPdkDfh2x1FcKkIfyg-7bkdLc" target="_blank" rel="noopener">https://gitee.com/signup</a></strong></h3><h1 id="三：搭建教程"><a href="#三：搭建教程" class="headerlink" title="三：搭建教程"></a><strong>三：搭建教程</strong></h1><h3 id="1-创建好Gitee账号后，点击右上角加号-“-”，点击：新建仓库"><a href="#1-创建好Gitee账号后，点击右上角加号-“-”，点击：新建仓库" class="headerlink" title="1.创建好Gitee账号后，点击右上角加号 “+”，点击：新建仓库"></a>1.创建好Gitee账号后，点击右上角加号 “+”，点击：新建仓库</h3><h3 id="2-仓库名称（自定义）-路径（自定义）-公开-使用Readme文件初始化这个仓库-创建"><a href="#2-仓库名称（自定义）-路径（自定义）-公开-使用Readme文件初始化这个仓库-创建" class="headerlink" title="2.仓库名称（自定义） - 路径（自定义） - 公开 - 使用Readme文件初始化这个仓库 - 创建"></a>2.仓库名称（自定义） - 路径（自定义） - 公开 - 使用Readme文件初始化这个仓库 - 创建</h3><p><img src="/images/o_20070710300302.png" alt="o_20070710300302.png"></p>
<h3 id="3-点击右上角用户头像右边的下拉框，点击：设置"><a href="#3-点击右上角用户头像右边的下拉框，点击：设置" class="headerlink" title="3.点击右上角用户头像右边的下拉框，点击：设置"></a>3.点击右上角用户头像右边的下拉框，点击：设置</h3><h3 id="4-点击左侧-：私人令牌"><a href="#4-点击左侧-：私人令牌" class="headerlink" title="4.点击左侧 ：私人令牌"></a>4.点击左侧 ：私人令牌</h3><h3 id="5-点击：生成新令牌"><a href="#5-点击：生成新令牌" class="headerlink" title="5.点击：生成新令牌"></a>5.点击：生成新令牌</h3><h3 id="6-私人令牌描述（自定义）-选择-“peojects”-提交"><a href="#6-私人令牌描述（自定义）-选择-“peojects”-提交" class="headerlink" title="6.私人令牌描述（自定义） - 选择 “peojects” - 提交"></a>6.私人令牌描述（自定义） - 选择 “peojects” - 提交</h3><p><img src="/images/o_20070710303206.png" alt="o_20070710303206.png"></p>
<h3 id="7-Note-自定义一个名称，repo-打上-√"><a href="#7-Note-自定义一个名称，repo-打上-√" class="headerlink" title="7.Note 自定义一个名称，repo 打上 √"></a>7.Note 自定义一个名称，repo 打上 √</h3><h3 id="8-输入登录码云的密码，点击：验证"><a href="#8-输入登录码云的密码，点击：验证" class="headerlink" title="8.输入登录码云的密码，点击：验证"></a>8.输入登录码云的密码，点击：验证</h3><p><img src="/images/o_20070710303507.png" alt="o_20070710303507.png"></p>
<h3 id="9-现在生成的是一串Token，只会在现在显示一次，所以要妥善保管好，点击：复制-打勾“我已经了解…”-确认并关闭"><a href="#9-现在生成的是一串Token，只会在现在显示一次，所以要妥善保管好，点击：复制-打勾“我已经了解…”-确认并关闭" class="headerlink" title="9.现在生成的是一串Token，只会在现在显示一次，所以要妥善保管好，点击：复制 - 打勾“我已经了解…” - 确认并关闭"></a>9.现在生成的是一串Token，只会在现在显示一次，所以要妥善保管好，点击：复制 - 打勾“我已经了解…” - 确认并关闭</h3><p><img src="/images/o_20070710303808.png" alt="o_20070710303808.png"></p>
<h3 id="10-打开PicGo，点击左侧-插件设置-搜索框输入：gitee-点击右边的gitee-uploader：安装"><a href="#10-打开PicGo，点击左侧-插件设置-搜索框输入：gitee-点击右边的gitee-uploader：安装" class="headerlink" title="10.打开PicGo，点击左侧 - 插件设置 - 搜索框输入：gitee - 点击右边的gitee-uploader：安装"></a>10.打开PicGo，点击左侧 - 插件设置 - 搜索框输入：gitee - 点击右边的gitee-uploader：安装</h3><p><img src="/images/o_20070710304309.png" alt="o_20070710304309.png"></p>
<h3 id="11-点击左侧：图床设置-gitee，进行如下设置"><a href="#11-点击左侧：图床设置-gitee，进行如下设置" class="headerlink" title="11.点击左侧：图床设置 - gitee，进行如下设置"></a>11.点击左侧：图床设置 - gitee，进行如下设置</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">repo：  填写用户名/仓库名</span><br><span class="line"></span><br><span class="line">branch：  填写：master</span><br><span class="line"></span><br><span class="line">token：  填写刚才生成的那一串token</span><br><span class="line"></span><br><span class="line">path：  填写：img</span><br><span class="line"></span><br><span class="line">customPath：  默认即可，不用填写</span><br><span class="line"></span><br><span class="line">customUrl：  默认即可，不用填写</span><br></pre></td></tr></table></figure>

<p><img src="/images/1594124775(1).png" alt="1594124775(1).png"></p>
<h2 id="四：图片上传至图库的方法1（推荐）"><a href="#四：图片上传至图库的方法1（推荐）" class="headerlink" title="四：图片上传至图库的方法1（推荐）"></a><strong>四：图片上传至图库的方法1（推荐）</strong></h2><h3 id="1-打开Typora，点击左上角：文件-偏好设置"><a href="#1-打开Typora，点击左上角：文件-偏好设置" class="headerlink" title="1.打开Typora，点击左上角：文件 - 偏好设置"></a><strong>1.打开Typora，点击左上角：文件 - 偏好设置</strong></h3><h3 id="2-点击：图像-插入图片时（下拉选择：上传图片）-对网络位置的图片应用上述规则（可选可不选，选中就是图片也会复制到本地）-允许根据YAML设置自动上传图片-上传服务：下拉后选择-PicGo（app）-选择PicGo路径"><a href="#2-点击：图像-插入图片时（下拉选择：上传图片）-对网络位置的图片应用上述规则（可选可不选，选中就是图片也会复制到本地）-允许根据YAML设置自动上传图片-上传服务：下拉后选择-PicGo（app）-选择PicGo路径" class="headerlink" title="2.点击：图像 - 插入图片时（下拉选择：上传图片） - 对网络位置的图片应用上述规则（可选可不选，选中就是图片也会复制到本地） - 允许根据YAML设置自动上传图片 - 上传服务：下拉后选择 PicGo（app） - 选择PicGo路径"></a>2.点击：图像 - 插入图片时（下拉选择：上传图片） - 对网络位置的图片应用上述规则（可选可不选，选中就是图片也会复制到本地） - 允许根据YAML设置自动上传图片 - 上传服务：下拉后选择 PicGo（app） - 选择PicGo路径</h3><p><img src="/images/o_20070612482223.png" alt="o_20070612482223.png"></p>
<h3 id="3-找到PicGo的安装路径，默认是C-Program-Files-PicGo点击：打开"><a href="#3-找到PicGo的安装路径，默认是C-Program-Files-PicGo点击：打开" class="headerlink" title="3.找到PicGo的安装路径，默认是C:\Program Files\PicGo点击：打开"></a>3.找到PicGo的安装路径，默认是C:\Program Files\PicGo点击：打开</h3><p><img src="/images/o_20070612104519.png" alt="o_20070612104519.png"></p>
<h3 id="4-点击：验证图片上传选项，显示绿色字-“成功上床图片并获得新的URL”，点击：OK"><a href="#4-点击：验证图片上传选项，显示绿色字-“成功上床图片并获得新的URL”，点击：OK" class="headerlink" title="4.点击：验证图片上传选项，显示绿色字 “成功上床图片并获得新的URL”，点击：OK"></a>4.点击：验证图片上传选项，显示绿色字 “成功上床图片并获得新的URL”，点击：OK</h3><p><img src="/images/20200707184938.png" alt="20200707184938.png"></p>
<h3 id="5-此时，截完图之后，直接按粘贴快捷键（Ctrl-V）即可将图片上传到图库"><a href="#5-此时，截完图之后，直接按粘贴快捷键（Ctrl-V）即可将图片上传到图库" class="headerlink" title="5.此时，截完图之后，直接按粘贴快捷键（Ctrl+V）即可将图片上传到图库"></a>5.此时，截完图之后，直接按粘贴快捷键（Ctrl+V）即可将图片上传到图库</h3><h3 id="6-也成功显示出来了"><a href="#6-也成功显示出来了" class="headerlink" title="6.也成功显示出来了"></a>6.也成功显示出来了</h3><p><img src="/images/20200707185045.png" alt="20200707185045.png"></p>
<h1 id="五：图片上传至图库的方法2"><a href="#五：图片上传至图库的方法2" class="headerlink" title="五：图片上传至图库的方法2"></a><strong>五：图片上传至图库的方法2</strong></h1><h3 id="1-设置快捷键"><a href="#1-设置快捷键" class="headerlink" title="1.设置快捷键"></a>1.设置快捷键</h3><p><img src="/images/o_20070611485712.png" alt="o_20070611485712.png"></p>
<h3 id="2-点击：编辑"><a href="#2-点击：编辑" class="headerlink" title="2.点击：编辑"></a>2.点击：编辑</h3><p><img src="/images/o_20070611490013.png" alt="o_20070611490013.png"></p>
<h3 id="3-同时按住Ctrl、Shift、V-组合键（当然，也可以自定义），点击：确定"><a href="#3-同时按住Ctrl、Shift、V-组合键（当然，也可以自定义），点击：确定" class="headerlink" title="3.同时按住Ctrl、Shift、V 组合键（当然，也可以自定义），点击：确定"></a>3.同时按住Ctrl、Shift、V 组合键（当然，也可以自定义），点击：确定</h3><p><img src="/images/o_20070611490414.png" alt="o_20070611490414.png"></p>
<h3 id="4-我们截完图之后，直接按下快捷键（Ctrl-Shift-V）就把截图上传到图库了，并且自动复制了图片的外链，然后我们直接按下快捷键（Ctr-V）就可以粘贴了"><a href="#4-我们截完图之后，直接按下快捷键（Ctrl-Shift-V）就把截图上传到图库了，并且自动复制了图片的外链，然后我们直接按下快捷键（Ctr-V）就可以粘贴了" class="headerlink" title="4.我们截完图之后，直接按下快捷键（Ctrl+Shift+V）就把截图上传到图库了，并且自动复制了图片的外链，然后我们直接按下快捷键（Ctr+V）就可以粘贴了"></a>4.我们截完图之后，直接按下快捷键（Ctrl+Shift+V）就把截图上传到图库了，并且自动复制了图片的外链，然后我们直接按下快捷键（Ctr+V）就可以粘贴了</h3><p><img src="/images/20200707185135.png" alt="20200707185135.png"></p>
<h3 id="5-单击图片即可看到图片的外链"><a href="#5-单击图片即可看到图片的外链" class="headerlink" title="5.单击图片即可看到图片的外链"></a>5.单击图片即可看到图片的外链</h3><p><img src="/images/20200707185144.png" alt="20200707185144.png"></p>
<h2 id="Ending…"><a href="#Ending…" class="headerlink" title="Ending…."></a>Ending….</h2>]]></content>
      <categories>
        <category>技能get</category>
      </categories>
      <tags>
        <tag>图床制作</tag>
      </tags>
  </entry>
  <entry>
    <title>[「直击面试」搞定计算机网络]</title>
    <url>/2020/06/22/%E6%90%9E%E5%AE%9A%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</url>
    <content><![CDATA[<blockquote>
<p>在浏览器中输入一个 URL 至页面呈现，网络上都发生了什么事？</p>
<p>能说说 ISO 七层模型和 TCP/IP 四层模型吗？</p>
<p>TCP/IP 与 HTTP 有什么关系吗？</p>
<p>TCP协议与UDP协议的区别？</p>
<p>请详细介绍一下 TCP 的三次握手机制，为什么要三次握手？挥手却又是四次呢？</p>
<p>详细讲一下TCP的滑动窗口？知道流量控制和拥塞控制吗？</p>
<p>说一下对称加密与非对称加密？</p>
<p>状态码 206 是什么意思？</p>
<p>你们用的 https 是吧，https 工作原理是什么？</p>
<p>……</p>
</blockquote>
<blockquote>
<p>成长手册，<strong>GitHub</strong> <a href="https://github.com/rogerXS80/roger" target="_blank" rel="noopener">Lupinus</a> ，N线互联网开发必备技能兵器谱</p>
</blockquote>
<h2 id="一、计算机网络"><a href="#一、计算机网络" class="headerlink" title="一、计算机网络"></a>一、计算机网络</h2><h3 id="通信协议"><a href="#通信协议" class="headerlink" title="通信协议"></a>通信协议</h3><p>通信协议（communications protocol）是指双方实体完成通信或服务所必须遵循的规则和约定。通过通信信道和设备互连起来的多个不同地理位置的数据通信系统，要使其能协同工作实现信息交换和资源共享，它们之间必须具有共同的语言。交流什么、怎样交流及何时交流，都必须遵循某种互相都能接受的规则。这个规则就是通信协议。</p>
<h3 id="网络模型"><a href="#网络模型" class="headerlink" title="网络模型"></a>网络模型</h3><p>随着技术的发展，计算机的应用越来越广泛，计算机之间的通信开始了百花齐放的状态，每个具有独立计算服务体系的信息技术公司都会建立自己的计算机通信规则，而这种情况会导致异构计算机之间无法通信，极大的阻碍了网络通信的发展，至此为了解决这个问题，国际标准化组织（ISO）制定了OSI模型，该模型定义了不同计算机互联的标准，OSI模型把网络通信的工作分为7层，分别是<strong>物理层、数据链路层、网络层、传输层、会话层、表示层和应用层</strong>。</p>
<p>这七层模型是设计层面的概念，每一层都有固定要完成的职责和功能，分层的好处在于清晰和功能独立性，但分层过多会使层次变的更加复杂，虽然不需要实现本层的功能，但是也需要构造本层的上下文，空耗系统资源，所以在落地实施网络通信模型的时候将这七层模型简化合并为四层模型分别是<strong>应用层、传输层、网络层、网络接口层</strong>（各层之间的模型、协议统称为：<strong>TCP/IP协议簇</strong>）。</p>
<p><img src="https://gitee.com/wjxyzs/img/raw/master/img/17180bed7719799d.jpg" alt=""></p>
<p>从上图可以看到，TCP/IP模型合并了OSI模型的应用层、表示层和会话层，将OSI模型的数据链路层和物理层合并为网络访问层。</p>
<p>上图还列出了各层模型对应TCP/IP协议栈中的协议以及各层协议之间的关系。比如DNS协议是建立在TCP和UDP协议的基础上，FTP、HTTP、TELNET协议建立在TCP协议的基础上，NTP、TFTP、SNMP建立在UDP协议的基础上，而TCP、UDP协议又建立在IP协议的基础上，以此类推….</p>
<table>
<thead>
<tr>
<th align="left">OSI中的层</th>
<th>功能</th>
<th align="left">TCP/IP协议族</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><strong>应用层</strong></td>
<td>文件传输，电子邮件，文件服务，虚拟终端</td>
<td align="left">TFTP，HTTP，SNMP，FTP，SMTP，DNS，RIP，Telnet</td>
</tr>
<tr>
<td align="left"><strong>表示层</strong></td>
<td>数据格式化，代码转换，数据加密</td>
<td align="left">无</td>
</tr>
<tr>
<td align="left"><strong>会话层</strong></td>
<td>控制应用程序之间会话能力；如不同软件数据分发给不同软件</td>
<td align="left">ASAP、TLS、SSH、ISO 8327 / CCITT X.225、RPC、NetBIOS、ASP、Winsock、BSD sockets</td>
</tr>
<tr>
<td align="left"><strong>传输层</strong></td>
<td>端到端传输数据的基本功能</td>
<td align="left">TCP、UDP</td>
</tr>
<tr>
<td align="left"><strong>网络层</strong></td>
<td>定义IP编址，定义路由功能；如不同设备的数据转发</td>
<td align="left">IP，ICMP，RIP，OSPF，BGP，IGMP</td>
</tr>
<tr>
<td align="left"><strong>数据链路层</strong></td>
<td>定义数据的基本格式，如何传输，如何标识</td>
<td align="left">SLIP，CSLIP，PPP，ARP，RARP，MTU</td>
</tr>
<tr>
<td align="left"><strong>物理层</strong></td>
<td>以<strong>二进制</strong>数据形式在物理媒体上传输数据</td>
<td align="left">ISO2110，IEEE802</td>
</tr>
</tbody></table>
<p>当我们某一个网站上不去的时候。通常会ping一下这个网站</p>
<p><code>ping</code> 可以说是ICMP的最著名的应用，是TCP/IP协议的一部分。利用<code>ping</code>命令可以检查网络是否连通，可以很好地帮助我们分析和判定网络故障。</p>
<h2 id="二、TCP-IP"><a href="#二、TCP-IP" class="headerlink" title="二、TCP/IP"></a>二、TCP/IP</h2><p>数据在网络中传输最终一定是通过物理介质传输。物理介质就是把电脑连接起来的物理手段，常见的有光纤、双绞线，以及无线电波，它决定了电信号(0和1)的传输方式，物理介质的不同决定了电信号的传输带宽、速率、传输距离以及抗干扰性等等。网络数据传输就像快递邮寄，数据就是快件。只有路打通了，你的”快递”才能送到，因此物理介质是网络通信的基石。</p>
<p>寄快递首先得称重、确认体积(确认数据大小)，贵重物品还得层层包裹填充物确保安全，封装，然后填写发件地址(源主机地址)和收件地址(目标主机地址)，确认快递方式。对于偏远地区，快递不能直达，还需要中途转发。网络通信也是一样的道理，只不过把这些步骤都规定成了各种协议。</p>
<p>TCP/IP的模型的每一层都需要下一层所提供的协议来完成自己的目的。我们来看下数据是怎么通过TCP/IP协议模型从一台主机发送到另一台主机的。</p>
<p><img src="https://gitee.com/wjxyzs/img/raw/master/img/17180bed76faefb0.jpg" alt=""></p>
<p>当用户通过HTTP协议发起一个请求，应用层、传输层、网络互联层和网络访问层的相关协议依次对该请求进行包装并携带对应的首部，最终在网络访问层生成以太网数据包，以太网数据包通过物理介质传输给对方主机，对方接收到数据包以后，然后再一层一层采用对应的协议进行拆包，最后把应用层数据交给应用程序处理。</p>
<h3 id="TCP-IP-与-HTTP"><a href="#TCP-IP-与-HTTP" class="headerlink" title="TCP/IP 与 HTTP"></a>TCP/IP 与 HTTP</h3><p>TCP/IP（Transmission Control Protocol/Internet Protocol，传输控制协议/网际协议）是指能够在多个不同网络间实现信息传输的协议簇。TCP/IP 协议不仅仅指的是 TCP 和 IP 两个协议，而是指一个由FTP、SMTP、TCP、UDP、IP等协议构成的协议簇， 只是因为在TCP/IP协议中TCP协议和IP协议最具代表性，所以被称为TCP/IP协议。</p>
<p><strong>而HTTP是应用层协议，主要解决如何包装数据。</strong></p>
<p>“IP”代表网际协议，TCP 和 UDP 使用该协议从一个网络传送数据包到另一个网络。把<strong>IP想像成一种高速公路</strong>，它允许其它协议在上面行驶并找到到其它电脑的出口。<strong>TCP和UDP是高速公路上的“卡车”，它们携带的货物就是像HTTP</strong>，文件传输协议FTP这样的协议等。</p>
<h3 id="TCP-与-UDP"><a href="#TCP-与-UDP" class="headerlink" title="TCP 与 UDP"></a>TCP 与 UDP</h3><p>都属于传输层协议。</p>
<p>TCP（Transmission Control Protocol，传输控制协议）是面向连接的协议，也就是说，在收发数据前，必须和对方建立可靠的连接。一个TCP连接必须有三次握手、四次挥手。</p>
<p>UDP（User Data Protocol，用户数据报协议）是一个非连接的协议，传输数据之前源端和终端不建立连接， 当它想传送时就简单地去抓取来自应用程序的数据，并尽可能快地把它扔到网络上</p>
<table>
<thead>
<tr>
<th align="left"></th>
<th align="left">TCP</th>
<th align="left">UDP</th>
</tr>
</thead>
<tbody><tr>
<td align="left">连接性</td>
<td align="left">面向连接</td>
<td align="left">面向非连接</td>
</tr>
<tr>
<td align="left">传输可靠性</td>
<td align="left">可靠</td>
<td align="left">不可靠</td>
</tr>
<tr>
<td align="left">报文</td>
<td align="left">面向字节流</td>
<td align="left">面向报文</td>
</tr>
<tr>
<td align="left">效率</td>
<td align="left">传输效率低</td>
<td align="left">传输效率高</td>
</tr>
<tr>
<td align="left">流量控制</td>
<td align="left">滑动窗口</td>
<td align="left">无</td>
</tr>
<tr>
<td align="left">拥塞控制</td>
<td align="left">慢开始、拥塞避免、快重传、快恢复</td>
<td align="left">无</td>
</tr>
<tr>
<td align="left">传输速度</td>
<td align="left">慢</td>
<td align="left">快</td>
</tr>
<tr>
<td align="left">应用场合</td>
<td align="left">对效率要求低，对准确性要求高或要求有连接的场景</td>
<td align="left">对效率要求高，对准确性要求低</td>
</tr>
</tbody></table>
<p>TCP和UDP协议的一些应用</p>
<p><img src="https://gitee.com/wjxyzs/img/raw/master/img/17180bed76fa926f.jpg" alt=""></p>
<h3 id="TCP连接的建立与终止"><a href="#TCP连接的建立与终止" class="headerlink" title="TCP连接的建立与终止"></a>TCP连接的建立与终止</h3><p>TCP虽然是面向字节流的，但TCP传送的数据单元却是报文段。一个TCP报文段分为首部和数据两部分，而TCP的全部功能体现在它首部中的各字段的作用。</p>
<p>TCP报文段首部的前20个字节是固定的（下图），后面有4n字节是根据需要而增加的选项（n是整数）。因此TCP首部的最小长度是20字节。</p>
<p><img src="https://gitee.com/wjxyzs/img/raw/master/img/17180bed764405fc.jpg" alt=""></p>
<h4 id="TCP报文首部"><a href="#TCP报文首部" class="headerlink" title="TCP报文首部"></a>TCP报文首部</h4><ul>
<li><p>源端口和目的端口，各占2个字节，分别写入源端口和目的端口；</p>
</li>
<li><p><strong>序列号</strong>（Sequence number），占4字节。序号范围是【0，2^32 - 1】，共2^32个序号。序号增加到 2^32-1后，下一个序号就又回到 0。TCP是面向字节流的。在一个TCP连接中传送的字节流中的每一个字节都按顺序编号。整个要传送的字节流的起始序号必须在连接建立时设置。首部中的序号字段值则是指的是本报文段所发送的数据的第一个字节的序号。例如，一报文段的序号是301，而接待的数据共有100字节。这就表明：本报文段的数据的第一个字节的序号是301，最后一个字节的序号是400。显然，下一个报文段（如果还有的话）的数据序号应当从401开始，即下一个报文段的序号字段值应为401。这个字段的序号也叫“报文段序号”;</p>
</li>
<li><p><strong>确认号</strong>（Acknowledge number），占4个字节，是期望收到对方下一个报文的第一个数据字节的序号。例如，B收到了A发送过来的报文，其序列号字段是501，而数据长度是200字节，这表明B正确的收到了A发送的到序号700为止的数据。因此，B期望收到A的下一个数据序号是701，于是B在发送给A的确认报文段中把确认号置为701；</p>
</li>
<li><p>数据偏移，占4位，它指出TCP报文段的数据起始处距离TCP报文段的起始处有多远。</p>
</li>
<li><p>保留，占6位，保留为今后使用，但目前应置为0；</p>
</li>
<li><p>紧急URG（URGent），当URG=1，表明紧急指针字段有效。告诉系统此报文段中有紧急数据；</p>
</li>
<li><p>确认ACK（ACKnowledgment），仅当ACK=1时，确认号字段才有效。<strong>TCP规定，在连接建立后所有报文的传输都必须把ACK置1</strong>；</p>
</li>
<li><p>推送PSH（PuSH） ，当两个应用进程进行交互式通信时，有时在一端的应用进程希望在键入一个命令后立即就能收到对方的响应，这时候就将PSH=1；</p>
</li>
<li><p>复位RST（ReSeT），当RST=1，表明TCP连接中出现严重差错，必须释放连接，然后再重新建立连接；</p>
</li>
<li><p>同步SYN（SYNchronization），在连接建立时用来同步序号。<strong>当SYN=1，ACK=0，表明是连接请求报文，若同意连接，则响应报文中应该使SYN=1，ACK=1</strong>；</p>
</li>
<li><p>终止FIN（FINis），用来释放连接。</p>
<p>当FIN=1，表明此报文的发送方的数据已经发送完毕，并且要求释放</p>
<p>；</p>
<ul>
<li>窗口，占2字节，指的是通知接收方，发送本报文你需要有多大的空间来接受；</li>
</ul>
</li>
<li><p>检验和，占2字节，校验首部和数据这两部分；</p>
</li>
<li><p>紧急指针，占2字节，指出本报文段中的紧急数据的字节数；</p>
</li>
<li><p>选项，长度可变，定义一些其他的可选的参数</p>
</li>
</ul>
<p>TCP是一种面向连接的单播协议，在发送数据前，通信双方必须在彼此间建立一条连接。所谓的“连接”，其实是客户端和服务器的内存里保存的一份关于对方的信息，如ip地址、端口号等。</p>
<h4 id="TCP-三次握手"><a href="#TCP-三次握手" class="headerlink" title="TCP 三次握手"></a>TCP 三次握手</h4><p>所谓三次握手(Three-way Handshake)，是指建立一个 TCP 连接时，需要客户端和服务器总共发送3个包。</p>
<p>三次握手的目的是连接服务器指定端口，建立 TCP 连接，并同步连接双方的序列号和确认号，交换 TCP 窗口大小信息。</p>
<p><img src="https://user-gold-cdn.xitu.io/2020/4/16/17180bed7721f0c0?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"></p>
<ul>
<li><p><strong>第一次握手</strong>(SYN=1, seq=x)</p>
<p>建立连接。客户端发送连接请求报文段，这是报文首部中的同步位SYN=1，同时选择一个初始序列号 seq=x ，此时，客户端进程进入了 SYN-SENT（同步已发送状态）状态。TCP规定，SYN报文段（SYN=1的报文段）不能携带数据，但需要消耗掉一个序号；</p>
</li>
<li><p><strong>第二次握手</strong>(SYN=1, ACK=1, seq=y, ACKnum=x+1)</p>
<p>服务器收到客户端的SYN报文段，如果同意连接，则发出确认报文。确认报文中应该 ACK=1，SYN=1，确认号ACKnum=x+1，同时，自己还要发送SYN请求信息，SYN=1，为自己初始化一个序列号 seq=y，服务器端将上述所有信息放到一个报文段（即SYN+ACK报文段）中，一并发送给客户端，此时，TCP服务器进程进入了SYN-RCVD（同步收到）状态。这个报文也不能携带数据，但是同样要消耗一个序号</p>
</li>
<li><p><strong>第三次握手</strong>(ACK=1，ACKnum=y+1)</p>
<p>客户端收到服务器的SYN+ACK报文段，再次发送确认包(ACK)，<strong>SYN 标志位为0</strong>，ACK 标志位为1，确认号 ACKnum = y+1，这个报文段发送完毕以后，客户端和服务器端都进入ESTABLISHED（已建立连接）状态，完成TCP三次握手。</p>
</li>
</ul>
<blockquote>
<p>为什么需要三次握手呢？两次不行吗？</p>
</blockquote>
<p>为了防止已失效的连接请求报文段突然又传送到了服务端，因而产生错误。</p>
<p>具体例子：“已失效的连接请求报文段”的产生在这样一种情况下：client发出的第一个连接请求报文段并没有丢失，而是在某个网络结点长时间的滞留了，以致延误到连接释放以后的某个时间才到达server。本来这是一个早已失效的报文段。但server收到此失效的连接请求报文段后，就误认为是client再次发出的一个新的连接请求。于是就向client发出确认报文段，同意建立连接。假设不采用“三次握手”，那么只要server发出确认，新的连接就建立了。由于现在client并没有发出建立连接的请求，因此不会理睬server的确认，也不会向server发送数据。但server却以为新的运输连接已经建立，并一直等待client发来数据。这样，server的很多资源就白白浪费掉了。采用“三次握手”的办法可以防止上述现象发生。例如刚才那种情况，client不会向server的确认发出确认。server由于收不到确认，就知道client并没有要求建立连接。”</p>
<h4 id="TCP-四次挥手"><a href="#TCP-四次挥手" class="headerlink" title="TCP 四次挥手"></a>TCP 四次挥手</h4><p>TCP 的连接的拆除需要发送四个包，因此称为四次挥手(Four-way handshake)，也叫做改进的三次握手。<strong>客户端或服务器均可主动发起挥手动作</strong>。</p>
<p><img src="https://gitee.com/wjxyzs/img/raw/master/img/17180bed772ce689.jpg" alt=""></p>
<ul>
<li><p>第一次挥手(FIN=1，seq=x)red</p>
<p>主机1（可以使客户端，也可以是服务器端），设置seq=x，向主机2发送一个FIN报文段；此时，主机1进入<font color=red size=4><code>FIN_WAIT_1</code></font>状态；这表示主机1没有数据要发送给主机2了；</p>
</li>
<li><p>第二次挥手(ACK=1，ACKnum=x+1)</p>
<p>主机2收到了主机1发送的FIN报文段，向主机1回一个ACK报文段，Acknnum=x+1，主机1进入<font color=red size=4><code>FIN_WAIT_2</code></font>状态；主机2告诉主机1，我“同意”你的关闭请求；</p>
</li>
<li><p>第三次挥手(FIN=1，seq=y)</p>
<p>主机2向主机1发送FIN报文段，请求关闭连接，同时主机2进入<code>LAST_ACK</code> 状态</p>
</li>
<li><p>第四次挥手(ACK=1，ACKnum=y+1)</p>
<p>主机1收到主机2发送的FIN报文段，向主机2发送ACK报文段，然后主机1进入<font color=red size=4><code>TIME_WAIT</code></font>状态；主机2收到主机1的ACK报文段以后，就关闭连接；此时，<strong>主机1等待2MSL后依然没有收到回复</strong>，则证明Server端已正常关闭，那好，主机1也可以关闭连接了，进入 <font color=red size=4><code>CLOSED</code></font> 状态。</p>
<p>主机 1 等待了某个固定时间（两个最大段生命周期，2MSL，2 Maximum Segment Lifetime）之后，没有收到服务器端的 ACK ，认为服务器端已经正常关闭连接，于是自己也关闭连接，进入 <font color=red size=4><code>CLOSED</code></font>  状态。</p>
</li>
</ul>
<blockquote>
<p>为什么连接的时候是三次握手，关闭的时候却是四次握手？</p>
</blockquote>
<p>因为当Server端收到Client端的SYN连接请求报文后，可以直接发送SYN+ACK报文。其中ACK报文是用来应答的，SYN报文是用来同步的。但是关闭连接时，当Server端收到FIN报文时，很可能并不会立即关闭SOCKET，所以只能先回复一个ACK报文，告诉Client端，”你发的FIN报文我收到了”。只有等到我Server端所有的报文都发送完了，我才能发送FIN报文，因此不能一起发送。故需要四步握手。</p>
<p>由于 TCP 协议是全双工的，也就是说客户端和服务端都可以发起断开连接。两边各发起一次断开连接的申请，加上各自的两次确认，看起来就像执行了四次挥手。</p>
<blockquote>
<p><strong>为什么TIME_WAIT状态需要经过2MSL(最大报文段生存时间)才能返回到CLOSE状态？</strong></p>
</blockquote>
<p>虽然按道理，四个报文都发送完毕，我们可以直接进入CLOSE状态了，但是我们必须假象网络是不可靠的，有可以最后一个ACK丢失。所以TIME_WAIT状态就是用来重发可能丢失的ACK报文。</p>
<p>还有一个原因，防止类似与“三次握手”中提到了的“已经失效的连接请求报文段”出现在本连接中。客户端发送完最后一个确认报文后，在这个2MSL时间中，就可以使本连接持续的时间内所产生的所有报文段都从网络中消失。这样新的连接中不会出现旧连接的请求报文。</p>
<h3 id="TCP协议如何来保证传输的可靠性"><a href="#TCP协议如何来保证传输的可靠性" class="headerlink" title="TCP协议如何来保证传输的可靠性"></a>TCP协议如何来保证传输的可靠性</h3><p>对于可靠性，TCP通过以下方式进行保证：</p>
<ul>
<li>数据包校验：目的是检测数据在传输过程中的任何变化，若校验出包有错，则丢弃报文段并且不给出响应，这时TCP发送数据端超时后会重发数据；</li>
<li>对失序数据包重排序：既然TCP报文段作为IP数据报来传输，而IP数据报的到达可能会失序，因此TCP报文段的到达也可能会失序。TCP将对失序数据进行重新排序，然后才交给应用层；</li>
<li>丢弃重复数据：对于重复数据，能够丢弃重复数据；</li>
<li>应答机制：当TCP收到发自TCP连接另一端的数据，它将发送一个确认。这个确认不是立即发送，通常将推迟几分之一秒；</li>
<li>超时重发：当TCP发出一个段后，它启动一个定时器，等待目的端确认收到这个报文段。如果不能及时收到一个确认，将重发这个报文段；</li>
<li>流量控制：TCP连接的每一方都有固定大小的缓冲空间。TCP的接收端只允许另一端发送接收端缓冲区所能接纳的数据，这可以防止较快主机致使较慢主机的缓冲区溢出，这就是流量控制。TCP使用的流量控制协议是可变大小的滑动窗口协议。</li>
</ul>
<blockquote>
<p>详细讲一下TCP的滑动窗口</p>
</blockquote>
<h3 id="滑动窗口机制"><a href="#滑动窗口机制" class="headerlink" title="滑动窗口机制"></a>滑动窗口机制</h3><p>如果发送方把数据发送得过快，接收方可能会来不及接收，这就会造成数据的丢失。所谓<strong>流量控制</strong>就是让发送方的发送速率不要太快，要让接收方来得及接收。</p>
<p>利用<strong>滑动窗口机制</strong>可以很方便地在TCP连接上实现对发送方的流量控制。</p>
<p><img src="https://gitee.com/wjxyzs/img/raw/master/img/17180bed9bb2cb0c.jpg" alt=""></p>
<p>从上面的图可以看到滑动窗口左边的是已发送并且被确认的分组，滑动窗口右边是还没有轮到的分组。滑动窗口里面也分为两块，一块是已经发送但是未被确认的分组，另一块是窗口内等待发送的分组。随着已发送的分组不断被确认，窗口内等待发送的分组也会不断被发送。整个窗口就会往右移动，让还没轮到的分组进入窗口内。</p>
<p>可以看到滑动窗口起到了一个限流的作用，也就是说当前滑动窗口的大小决定了当前 TCP 发送包的速率，而滑动窗口的大小取决于拥塞控制窗口和流量控制窗口的两者间的最小值。</p>
<h4 id="流量控制"><a href="#流量控制" class="headerlink" title="流量控制"></a>流量控制</h4><p>TCP 是全双工的，客户端和服务器均可作为发送方或接收方，我们现在假设一个发送方向接收方发送数据的场景来讲解流量控制。首先我们的接收方有一块接收缓存，当数据来到时会先把数据放到缓存中，上层应用等缓存中有数据时就会到缓存中取数据。假如发送方没有限制地不断地向接收方发送数据，接收方的应用程序又没有及时把接收缓存中的数据读走，就会出现缓存溢出，数据丢失的现象，为了解决这个问题，我们引入流量控制窗口。</p>
<p>假设应用程序最后读走的数据序号是 lastByteRead，接收缓存中接收到的最后一个数据序号是 lastByteRcv，接收缓存的大小为 RcvSize，那么必须要满足 lastByteRcv - lastByteRead &lt;= RcvSize 才能保证接收缓存不会溢出，所以我们定义流量窗口为接收缓存剩余的空间，也就是Rcv = RcvSize - (lastByteRcv - lastByteRead)。只要接收方在响应 ACK 的时候把这个窗口的值带给发送方，发送方就能知道接收方的接收缓存还有多大的空间，进而设置滑动窗口的大小。</p>
<h4 id="拥塞控制"><a href="#拥塞控制" class="headerlink" title="拥塞控制"></a>拥塞控制</h4><p>拥塞控制是指发送方先设置一个小的窗口值作为发送速率，当成功发包并接收到ACK时，便以指数速率增大发送窗口的大小，直到遇到丢包（超时/三个冗余ACK），才停止并调整窗口的大小。这么做能最大限度地利用带宽，又不至于让网络环境变得太过拥挤。</p>
<p>最终滑动窗口的值将设置为流量控制窗口和拥塞控制窗口中的较小值。</p>
<h3 id="TCP的拥塞处理"><a href="#TCP的拥塞处理" class="headerlink" title="TCP的拥塞处理"></a>TCP的拥塞处理</h3><p>计算机网络中的带宽、交换结点中的缓存及处理机等都是网络的资源。在某段时间，若对网络中某一资源的需求超过了该资源所能提供的可用部分，网络的性能就会变坏，这种情况就叫做拥塞。拥塞控制就是防止过多的数据注入网络中，这样可以使网络中的路由器或链路不致过载。注意，拥塞控制和流量控制不同，前者是一个全局性的过程，而后者指点对点通信量的控制。拥塞控制的方法主要有以下四种：</p>
<ol>
<li>慢启动：不要一开始就发送大量的数据，先探测一下网络的拥塞程度，也就是说由小到大逐渐增加拥塞窗口的大小;</li>
<li>拥塞避免：拥塞避免算法让拥塞窗口缓慢增长，即每经过一个往返时间RTT就把发送方的拥塞窗口cwnd加1，而不是加倍，这样拥塞窗口按线性规律缓慢增长。          </li>
<li>快重传：快重传要求接收方在收到一个 失序的报文段 后就立即发出 重复确认（为的是使发送方及早知道有报文段没有到达对方）而不要等到自己发送数据时捎带确认。快重传算法规定，发送方只要一连收到三个重复确认就应当立即重传对方尚未收到的报文段，而不必继续等待设置的重传计时器时间到期。         </li>
<li>快恢复：快重传配合使用的还有快恢复算法，当发送方连续收到三个重复确认时，就执行“乘法减小”算法，把ssthresh门限减半，但是接下去并不执行慢开始算法：因为如果网络出现拥塞的话就不会收到好几个重复的确认，所以发送方现在认为网络可能没有出现拥塞。所以此时不执行慢开始算法，而是将cwnd设置为ssthresh的大小，然后执行拥塞避免算法。</li>
</ol>
<h3 id="服务器出现了大量CLOSE-WAIT状态如何解决"><a href="#服务器出现了大量CLOSE-WAIT状态如何解决" class="headerlink" title="服务器出现了大量CLOSE_WAIT状态如何解决"></a>服务器出现了大量CLOSE_WAIT状态如何解决</h3><p>大量 CLOSE_WAIT 表示程序出现了问题，对方的 socket 已经关闭连接，而我方忙于读或写没有及时关闭连接，需要检查代码，特别是释放资源的代码，或者是处理请求的线程配置。</p>
<h3 id="讲一讲SYN超时，洪泛攻击，以及解决策略"><a href="#讲一讲SYN超时，洪泛攻击，以及解决策略" class="headerlink" title="讲一讲SYN超时，洪泛攻击，以及解决策略"></a>讲一讲SYN超时，洪泛攻击，以及解决策略</h3><p>什么 SYN 是洪泛攻击？ 在 TCP 的三次握手机制的第一步中，客户端会向服务器发送 SYN 报文段。服务器接收到 SYN 报文段后会为该TCP分配缓存和变量，如果攻击分子大量地往服务器发送 SYN 报文段，服务器的连接资源终将被耗尽，导致内存溢出无法继续服务。</p>
<p>解决策略： 当服务器接受到 SYN 报文段时，不直接为该 TCP 分配资源，而只是打开一个半开的套接字。接着会使用 SYN 报文段的源Id，目的Id，端口号以及只有服务器自己知道的一个秘密函数生成一个 cookie，并把 cookie 作为序列号响应给客户端。</p>
<p>如果客户端是正常建立连接，将会返回一个确认字段为 cookie + 1 的报文段。接下来服务器会根据确认报文的源Id，目的Id，端口号以及秘密函数计算出一个结果，如果结果的值 + 1等于确认字段的值，则证明是刚刚请求连接的客户端，这时候才为该 TCP 分配资源</p>
<p>这样一来就不会为恶意攻击的 SYN 报文段分配资源空间，避免了攻击。</p>
<h2 id="三、HTTP"><a href="#三、HTTP" class="headerlink" title="三、HTTP"></a>三、HTTP</h2><blockquote>
<p>HTTP1.0、HTTP1.1、HTTP2.0 的区别</p>
<p>post 和 get 的区别</p>
</blockquote>
<p>HTTP全称是 HyperText Transfer Protocal，即：超文本传输协议。是互联网上应用最为广泛的一种<strong>网络通信协议</strong>，它允许将超文本标记语言（HTML）文档从Web服务器传送到客户端的浏览器。目前我们使用的是<strong>HTTP/1.1 版本</strong>。所有的WWW文件都必须遵守这个标准。设计HTTP最初的目的是为了提供一种发布和接收HTML页面的方法。1960年美国人 Ted Nelson 构思了一种通过计算机处理文本信息的方法，并称之为超文本（hypertext），这成为了HTTP超文本传输协议标准架构的发展根基。</p>
<h3 id="URI-和-URL"><a href="#URI-和-URL" class="headerlink" title="URI 和 URL"></a>URI 和 URL</h3><p>每个Web 服务器资源都有一个名字，这样客户端就可以说明他们感兴趣的资源是什么了，服务器资源名被称为统一资源标识符（Uniform Resource Identifier,URI）。URI 就像因特网上的邮政地址一样，在世界范围内唯一标识并定位信息资源。</p>
<p>统一资源定位符（URL）是资源标识符最常见的形式。 URL 描述了一台特定服务器上某资源的特定位置。</p>
<p>现在几乎所有的 URI 都是 URL。</p>
<p>URI 的第二种形式就是统一资源名（URN）。URN 是作为特定内容的唯一名称使用的，与目前的资源所在地无关。 </p>
<h3 id="HTTP消息的结构"><a href="#HTTP消息的结构" class="headerlink" title="HTTP消息的结构"></a>HTTP消息的结构</h3><p><strong>事务和报文</strong></p>
<p>客户端是怎样通过HTTP与Web服务器及其资源进行事务处理的呢？一个<strong>HTTP事务</strong>由一条请求命令（从客户端发往服务器）和一个响应（从服务器发回客户端）结果组成。这种通信是通过名为<strong>HTTP报文</strong>（HTTP Message）的格式化数据块进行的。</p>
<h4 id="HTTP事务："><a href="#HTTP事务：" class="headerlink" title="HTTP事务："></a>HTTP事务：</h4><p><img src="https://gitee.com/wjxyzs/img/raw/master/img/17180bed9d208228.jpg" alt=""></p>
<h4 id="报文："><a href="#报文：" class="headerlink" title="报文："></a>报文：</h4><p>HTTP 报文是纯文本，不是二进制代码。从 Web 客户端发往 Web 服务器的 HTTP 报文称为请求报文（request message）。从服务器发往客户端的报文称为响应报文。</p>
<p><img src="https://gitee.com/wjxyzs/img/raw/master/img/17180beda8938bd4.jpg" alt=""></p>
<p>HTTP 报文包括三部分：</p>
<ul>
<li>起始行</li>
<li>首部字段</li>
<li>主体</li>
</ul>
<h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><p>Http协议定义了很多与服务器交互的方法，最基本的有4种，分别是<strong>GET,POST,PUT,DELETE</strong>. 一个URL地址用于描述一个网络上的资源，而HTTP中的GET, POST, PUT, DELETE就对应着对这个资源的查，改，增，删4个操作。 我们最常见的就是GET和POST了。GET一般用于获取/查询资源信息，而POST一般用于更新资源信息。</p>
<ul>
<li>GET</li>
<li>HEAD</li>
<li>PUT</li>
<li>POST</li>
<li>TRACE</li>
<li>OPTIONS</li>
<li>DELETE</li>
</ul>
<h3 id="Get与POST的区别"><a href="#Get与POST的区别" class="headerlink" title="Get与POST的区别"></a>Get与POST的区别</h3><p>GET与POST是我们常用的两种HTTP Method，二者之间的区别主要包括如下五个方面：</p>
<ol>
<li>从功能上讲，GET一般用来从服务器上获取资源，POST一般用来更新服务器上的资源；</li>
<li>从REST服务角度上说，GET是幂等的，即读取同一个资源，总是得到相同的数据，而POST不是幂等的，因为每次请求对资源的改变并不是相同的；进一步地，GET不会改变服务器上的资源，而POST会对服务器资源进行改变；</li>
<li>从请求参数形式上看，GET请求的数据会附在URL之后，即将请求数据放置在HTTP报文的 请求头 中，以?分割URL和传输数据，参数之间以&amp;相连。特别地，如果数据是英文字母/数字，原样发送；否则，会将其编码为 application/x-www-form-urlencoded MIME 字符串(如果是空格，转换为+，如果是中文/其他字符，则直接把字符串用BASE64加密，得出如：%E4%BD%A0%E5%A5%BD，其中％XX中的XX为该符号以16进制表示的ASCII)；而POST请求会把提交的数据则放置在是HTTP请求报文的 请求体 中。</li>
<li>就安全性而言，POST的安全性要比GET的安全性高，因为GET请求提交的数据将明文出现在URL上，而且POST请求参数则被包装到请求体中，相对更安全。</li>
<li>从请求的大小看，GET请求的长度受限于浏览器或服务器对URL长度的限制，允许发送的数据量比较小，而POST请求则是没有大小限制的。</li>
</ol>
<p>HTTP请求结构： 请求方式 + 请求URI + 协议及其版本</p>
<p>HTTP响应结构： 状态码 + 原因短语 + 协议及其版本</p>
<h3 id="状态码"><a href="#状态码" class="headerlink" title="状态码"></a>状态码</h3><p>每条HTTP响应报文返回时都会携带一个状态码。状态码是一个三位数字的代码，告知客户端请求是否成功，或者是都需要采取其他动作。</p>
<ul>
<li>1xx：表明服务端接收了客户端请求，客户端继续发送请求；</li>
<li>2xx：客户端发送的请求被服务端成功接收并成功进行了处理；</li>
<li>3xx：服务端给客户端返回用于重定向的信息；</li>
<li>4xx：客户端的请求有非法内容；</li>
<li>5xx：服务端未能正常处理客户端的请求而出现意外错误。</li>
<li><strong>200 OK</strong>：表示从客户端发送给服务器的请求被正常处理并返回；</li>
<li><strong>204 No Content</strong>：表示客户端发送给客户端的请求得到了成功处理，但在返回的响应报文中不含实体的主体部分（没有资源可以返回）</li>
<li><strong>206 Patial Content</strong>：表示客户端进行了范围请求，并且服务器成功执行了这部分的GET请求，响应报文中包含由Content-Range指定范围的实体内容。</li>
<li><strong>301 Moved Permanently</strong>：永久性重定向，表示请求的资源被分配了新的URL，之后应使用更改的URL；</li>
<li><strong>302 Found</strong>：临时性重定向，表示请求的资源被分配了新的URL，希望本次访问使用新的URL；</li>
<li><strong>303 See Other</strong>：表示请求的资源被分配了新的URL，应使用GET方法定向获取请求的资源</li>
<li>304 Not Modified：表示客户端发送附带条件（是指采用GET方法的请求报文中包含if-Match、If-Modified-Since、If-None-Match、If-Range、If-Unmodified-Since中任一首部）的请求时，服务器端允许访问资源，但是请求为满足条件的情况下返回改状态码；</li>
<li><strong>400 Bad Request</strong>:表示请求报文中存在语法错误；</li>
<li><strong>401 Unauthorized</strong>：经许可，需要通过HTTP认证；</li>
<li><strong>403 Forbidden</strong>：服务器拒绝该次访问（访问权限出现问题）</li>
<li><strong>404 Not Found</strong>：表示服务器上无法找到请求的资源，除此之外，也可以在服务器拒绝请求但不想给拒绝原因时使用；</li>
<li><strong>500 Inter Server Error</strong>：表示服务器在执行请求时发生了错误，也有可能是web应用存在的bug或某些临时的错误时；</li>
<li><strong>503 Server Unavailable</strong>：表示服务器暂时处于超负载或正在进行停机维护，无法处理请求；</li>
</ul>
<p>HTTP 是个应用层协议。HTTP 无需操心网络通信的具体细节，而是把这些细节都交给了通用可靠的因特网传输协议 TCP/IP。</p>
<p>在 HTTP 客户端向服务器发送报文之前，需要用网络协议（Internet Protocol，IP）地址和端口号在客户端和服务器之间建立一条 TCP/IP 协议。而 IP 地址就是通过 URL 提供的，像<font color=red size=4><code>http://207.200.21.11:80/index.html</code></font> ，还有使用域名服务（Domain Name Services，DNS）的 <font color=red size=4><code>http://www.lazyegg.net</code></font>。</p>
<p><img src="https://gitee.com/wjxyzs/img/raw/master/img/17180bed9f762409.jpg" alt=""></p>
<h3 id="协议版本"><a href="#协议版本" class="headerlink" title="协议版本"></a>协议版本</h3><ul>
<li><p><strong>HTTP/0.9</strong></p>
<p>HTTP协议的最初版本，功能简陋，仅支持 GET 方法，并且仅能请求访问 HTML 格式的资源</p>
</li>
<li><p><strong>HTTP/1.0</strong></p>
<ul>
<li>增加了请求方式 POST 和 HEAD</li>
<li>不再局限于0.9版本的HTML格式，根据Content-Type可以支持多种数据格式，即MIME多用途互联网邮件扩展，例如text/html、image/jpeg等</li>
<li>同时也开始支持 cache，就是当客户端在规定时间内访问统一网站，直接访问cache即可</li>
<li>HTTP请求和回应的格式也变了。除了数据部分，每次通信都必须包括头信息（HTTP header），用来描述一些元数据。其他的新增功能还包括状态码（status code）、多字符集支持、多部分发送（multi-part type）、权限（authorization）、缓存（cache）、内容编码（content encoding）等</li>
<li>但是1.0版本的工作方式是每次TCP连接只能发送一个请求，当服务器响应后就会关闭这次连接，下一个请求需要再次建立TCP连接，就是不支持keepalive</li>
</ul>
</li>
<li><p><strong>HTTP/1.0+</strong></p>
<p>在20世纪90年代中叶，为满足飞快发展的万维网，很多流行的 Web 客户端和服务器飞快的向 HTTP 中添加各种特性，包括持久的 keep-alive 连接、虚拟主机支持，以及代理连接支持都被假如到 HTTP 中，并称为非官方的事实标准。这种非正式的 HTTP 扩展版本通常称为 HTTP/1.0+</p>
</li>
<li><p><strong>HTTP/1.1</strong></p>
<ul>
<li>http1.1是目前最为主流的http协议版本，从1997年发布至今，仍是主流的http协议版本。</li>
<li>引入了持久连接，或叫长连接（ persistent connection），即TCP连接默认不关闭，可以被多个请求复用，不用声明Connection: keep-alive。</li>
<li>引入了管道机制（ pipelining），即在同一个TCP连接里，客户端可以同时发送多个请求，进一步改进了HTTP协议的效率。</li>
<li>新增方法：PUT、 PATCH、 OPTIONS、 DELETE。</li>
<li>http协议不带有状态，每次请求都必须附上所有信息。请求的很多字段都是重复的，浪费带宽，影响速度。</li>
</ul>
</li>
<li><p><strong>HTTP/2.0（又名 HTTP-NG）</strong></p>
<ul>
<li>http/2发布于2015年，目前应用还比较少。</li>
<li>http/2是一个彻底的二进制协议，头信息和数据体都是二进制，并且统称为”帧”（frame）：头信息帧和数据帧。</li>
<li>复用TCP连接，在一个连接里，客户端和浏览器都可以同时发送多个请求或回应，且不用按顺序一一对应，避免了队头堵塞的问题,此双向的实时通信称为多工（ Multiplexing）。</li>
<li>HTTP/2 允许服务器未经请求，主动向客户端发送资源，即服务器推送。</li>
<li>引入头信息压缩机制（ header compression） ,头信息使用gzip或compress压缩后再发送。</li>
</ul>
</li>
</ul>
<h2 id="四、HTTPS"><a href="#四、HTTPS" class="headerlink" title="四、HTTPS"></a>四、HTTPS</h2><p>HTTP缺点：</p>
<ol>
<li>通信使用明文不对数据进行加密（内容容易被窃听）</li>
<li>不验证通信方身份（容易伪装）</li>
<li>无法确定报文完整性（内容易被篡改）</li>
</ol>
<p>因此，HTTP协议不适合传输一些敏感信息，比如：信用卡号、密码等支付信息。</p>
<p>为了解决HTTP协议的这一缺陷，需要使用另一种协议：安全套接字层超文本传输协议 HTTPS，为了数据传输的安全，HTTPS在HTTP的基础上加入了SSL（安全套接层）协议，SSL依靠证书来验证服务器的身份，并为浏览器和服务器之间的通信加密。</p>
<p><strong>与 SSL（安全套接层）组合使用的 HTTP 就是 HTTPS</strong></p>
<p><img src="https://gitee.com/wjxyzs/img/raw/master/img/17180bedb27f3f29.jpg" alt=""></p>
<p><img src="https://gitee.com/wjxyzs/img/raw/master/img/17180bedb8848bf2.jpg" alt=""></p>
<h3 id="HTTP和HTTPS对比"><a href="#HTTP和HTTPS对比" class="headerlink" title="HTTP和HTTPS对比"></a>HTTP和HTTPS对比</h3><p>HTTP协议传输的数据都是未加密的，也就是明文的，因此使用HTTP协议传输隐私信息非常不安全，为了保证这些隐私数据能加密传输，于是网景公司设计了SSL（Secure Sockets Layer）协议用于对HTTP协议传输的数据进行加密，从而就诞生了HTTPS。简单来说，HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议，要比http协议安全。</p>
<p>HTTPS和HTTP的区别主要如下：</p>
<ol>
<li>https协议需要到ca申请证书，一般免费证书较少，因而需要一定费用。</li>
<li>http是超文本传输协议，信息是明文传输，https则是具有安全性的ssl加密传输协议。</li>
<li>http和https使用的是完全不同的连接方式，用的端口也不一样，前者是80，后者是443。</li>
<li>http的连接很简单，是无状态的；HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议，比http协议安全。</li>
</ol>
<h3 id="对称加密与非对称加密"><a href="#对称加密与非对称加密" class="headerlink" title="对称加密与非对称加密"></a>对称加密与非对称加密</h3><p>主要的加密方法分为两种：一种是共享密钥加密（对称密钥加密），一种是公开密钥加密（非对称密钥加密）</p>
<h4 id="共享密钥加密-对称秘钥加密"><a href="#共享密钥加密-对称秘钥加密" class="headerlink" title="共享密钥加密(对称秘钥加密)"></a>共享密钥加密(对称秘钥加密)</h4><p>加密与解密使用同一个密钥，常见的对称加密算法：DES，AES，3DES等。</p>
<p><img src="https://gitee.com/wjxyzs/img/raw/master/img/17180bedbd853fe2.jpg" alt=""></p>
<p>也就是说在加密的同时，也会把密钥发送给对方。在发送密钥过程中可能会造成密钥被窃取，那么如何解决这一问题呢？</p>
<h4 id="公开密钥（非对称密钥）"><a href="#公开密钥（非对称密钥）" class="headerlink" title="公开密钥（非对称密钥）"></a>公开密钥（非对称密钥）</h4><p>公开密钥使用一对非对称密钥。一把叫私有密钥，另一把叫公开密钥。私有密钥不让任何人知道，公有密钥随意发送。公钥加密的信息，只有私钥才能解密。常见的非对称加密算法：RSA，ECC等。</p>
<p>也就是说，发送密文方使用对方的公开密钥进行加密，对方接受到信息后，使用私有密钥进行解密。</p>
<p><img src="https://gitee.com/wjxyzs/img/raw/master/img/17180bede10f9420.jpg" alt=""></p>
<p>对称加密加密与解密使用的是同样的密钥，所以速度快，但由于需要将密钥在网络传输，所以安全性不高。</p>
<p>非对称加密使用了一对密钥，公钥与私钥，所以安全性高，但加密与解密速度慢。</p>
<p>为了解决这一问题，https采用对称加密与非对称加密的混合加密方式。</p>
<h3 id="SSL-TSL"><a href="#SSL-TSL" class="headerlink" title="SSL/TSL"></a>SSL/TSL</h3><p>SSL（Secure Sockets Layer），中文叫做“安全套接层”。它是在上世纪90年代中期，由网景公司设计的。</p>
<p>SSL 协议就是用来解决 HTTP 传输过程的不安全问题，到了1999年，SSL 因为应用广泛，已经成为互联网上的事实标准。IETF 就在那年把 SSL 标准化。标准化之后的名称改为 TLS（是“Transport Layer Security”的缩写），中文叫做“传输层安全协议”。</p>
<p>很多相关的文章都把这两者并列称呼（SSL/TLS），因为这两者可以视作同一个东西的不同阶段。</p>
<p>SSL/TLS协议的基本思路是采用<a href="http://en.wikipedia.org/wiki/Public-key_cryptography" target="_blank" rel="noopener">公钥加密法</a>，也就是说，客户端先向服务器端索要公钥，然后用公钥加密信息，服务器收到密文后，用自己的私钥解密。</p>
<p>但是，这里有两个问题。</p>
<ul>
<li><p><strong>如何保证公钥不被篡改？</strong></p>
<p>解决方法：将公钥放在数字证书中。只要证书是可信的，公钥就是可信的。</p>
</li>
<li><p><strong>公钥加密计算量太大，如何减少耗用的时间？</strong></p>
<p>每一次对话（session），客户端和服务器端都生成一个”对话密钥”（session key），用它来加密信息。由于”对话密钥”是对称加密，所以运算速度非常快，而服务器公钥只用于加密”对话密钥”本身，这样就减少了加密运算的消耗时间。</p>
</li>
</ul>
<p>因此，SSL/TLS协议的基本过程是这样的：</p>
<ol>
<li>服务端将非对称加密的公钥发送给客户端；</li>
<li>客户端拿着服务端发来的公钥，对对称加密的key做加密并发给服务端；</li>
<li>服务端拿着自己的私钥对发来的密文解密，从来获取到对称加密的key；</li>
<li>二者利用对称加密的key对需要传输的消息做加解密传输。</li>
</ol>
<p>HTTPS相比HTTP，在请求前多了一个「握手」的环节。</p>
<p>握手过程中确定了数据加密的密码。在握手过程中，网站会向浏览器发送 SSL 证书，SSL 证书和我们日常用的身份证类似，是一个支持 HTTPS 网站的身份证明，SSL 证书里面包含了网站的域名，证书有效期，证书的颁发机构以及用于加密传输密码的公钥等信息，由于公钥加密的密码只能被在申请证书时生成的私钥解密，因此浏览器在生成密码之前需要先核对当前访问的域名与证书上绑定的域名是否一致，同时还要对证书的颁发机构进行验证，如果验证失败浏览器会给出证书错误的提示。</p>
<h3 id="证书"><a href="#证书" class="headerlink" title="证书"></a>证书</h3><p><img src="https://gitee.com/wjxyzs/img/raw/master/img/17180bedc063a776.jpg" alt=""></p>
<p>实际上，我们使用的证书分很多种类型，SSL证书只是其中的一种。证书的格式是由 X.509 标准定义。SSL 证书负责传输公钥，是一种PKI（Public Key Infrastructure，公钥基础结构）证书。</p>
<p>我们常见的证书根据用途不同大致有以下几种：</p>
<ol>
<li>SSL证书，用于加密HTTP协议，也就是HTTPS。</li>
<li>代码签名证书，用于签名二进制文件，比如Windows内核驱动，Firefox插件，Java代码签名等等。</li>
<li>客户端证书，用于加密邮件。</li>
<li>双因素证书，网银专业版使用的USB Key里面用的就是这种类型的证书。</li>
</ol>
<p>这些证书都是由受认证的证书颁发机构——我们称之为CA（Certificate Authority）机构来颁发，针对企业与个人的不同，可申请的证书的类型也不同，价格也不同。CA机构颁发的证书都是受信任的证书，对于 SSL 证书来说，如果访问的网站与证书绑定的网站一致就可以通过浏览器的验证而不会提示错误。</p>
<p><strong>为什么服务端要发送证书给客户端</strong></p>
<p>互联网有太多的服务需要使用证书来验证身份，以至于客户端(操作系统或浏览器等)无法内置所有证书，需要通过服务端将证书发送给客户端。</p>
<p><strong>客户端为什么要验证接收到的证书</strong></p>
<p>中间人攻击</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">客户端&lt;------------攻击者&lt;------------服务端</span><br><span class="line">        伪造证书            拦截请求</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>

<p><strong>客户端如何验证接收到的证书</strong></p>
<p>为了回答这个问题，需要引入数字签名(Digital Signature)。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+---------------------+</span><br><span class="line">| A digital signature |</span><br><span class="line">|(not to be confused  |</span><br><span class="line">|with a digital       |</span><br><span class="line">|certificate)         |            +---------+              +--------+</span><br><span class="line">| is a mathematical   |----哈希---&gt;| 消息摘要  |---私钥加密---&gt;| 数字签名 |</span><br><span class="line">|technique used       |            +---------+              +--------+</span><br><span class="line">|to validate the      |</span><br><span class="line">|authenticity and     |</span><br><span class="line">|integrity of a       |</span><br><span class="line">|message, software    |</span><br><span class="line">|or digital document. |</span><br><span class="line">+---------------------+</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>

<p>将一段文本通过哈希（hash）和私钥加密处理后生成数字签名。</p>
<p>假设消息传递在Bob，Susan和Pat三人之间发生。Susan将消息连同数字签名一起发送给Bob，Bob接收到消息后，可以这样验证接收到的消息就是Susan发送的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+---------------------+</span><br><span class="line">| A digital signature |</span><br><span class="line">|(not to be confused  |</span><br><span class="line">|with a digital       |</span><br><span class="line">|certificate)         |            +---------+</span><br><span class="line">| is a mathematical   |----哈希---&gt;|  消息摘要 |</span><br><span class="line">|technique used       |            +---------+</span><br><span class="line">|to validate the      |                 |</span><br><span class="line">|authenticity and     |                 |</span><br><span class="line">|integrity of a       |                 |</span><br><span class="line">|message, software    |                 对</span><br><span class="line">|or digital document. |                 比</span><br><span class="line">+---------------------+                 |</span><br><span class="line">                                        |</span><br><span class="line">                                        |</span><br><span class="line">          +--------+               +---------+</span><br><span class="line">          | 数字签名 |---公钥解密---&gt;|  消息摘要 |</span><br><span class="line">          +--------+               +---------+</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>

<p>当然，这个前提是Bob知道Susan的公钥。更重要的是，和消息本身一样，公钥不能在不安全的网络中直接发送给Bob。此时就引入了<a href="https://en.wikipedia.org/wiki/Certificate_authority" target="_blank" rel="noopener">证书颁发机构</a>（Certificate Authority，简称CA），CA数量并不多，Bob客户端内置了所有受信任CA的证书。CA对Susan的公钥（和其他信息）数字签名后生成证书。</p>
<p>Susan将证书发送给Bob后，Bob通过CA证书的公钥验证证书签名。</p>
<p>Bob信任CA，CA信任Susan 使得 Bob信任Susan，<a href="https://en.wikipedia.org/wiki/Chain_of_trust" target="_blank" rel="noopener">信任链</a>（Chain Of Trust）就是这样形成的。</p>
<p>事实上，Bob客户端内置的是CA的根证书(Root Certificate)，HTTPS协议中服务器会发送证书链（Certificate Chain）给客户端。</p>
<h3 id="HTTPS的工作原理"><a href="#HTTPS的工作原理" class="headerlink" title="HTTPS的工作原理"></a>HTTPS的工作原理</h3><ol>
<li>Client 使用https的URL访问 Server，要求与 Server 建立 SSL 连接</li>
<li>Server 把事先配置好的公钥证书返回给客户端。</li>
<li>Client验证公钥证书：比如是否在有效期内，证书的用途是不是匹配Client请求的站点，是不是在CRL吊销列表里面，它的上一级证书是否有效，这是一个递归的过程，直到验证到根证书（操作系统内置的Root证书或者Client内置的Root证书）。如果验证通过则继续，不通过则显示警告信息。</li>
<li>Client使用伪随机数生成器生成加密所使用的对称密钥，然后用证书的公钥加密这个对称密钥，发给Server。</li>
<li>Server使用自己的私钥（private key）解密这个消息，得到对称密钥。至此，Client和Server双方都持有了相同的对称密钥。</li>
<li>Server使用对称密钥加密“明文内容A”，发送给Client。</li>
<li>Client使用对称密钥解密响应的密文，得到“明文内容A”。</li>
<li>Client再次发起HTTPS的请求，使用对称密钥加密请求的“明文内容B”，然后Server使用对称密钥解密密文，得到“明文内容B”。</li>
</ol>
<p><img src="https://gitee.com/wjxyzs/img/raw/master/img/17180bedeeb2c715.jpg" alt=""></p>
<h3 id="HTTPS的优点"><a href="#HTTPS的优点" class="headerlink" title="HTTPS的优点"></a>HTTPS的优点</h3><p>尽管HTTPS并非绝对安全，掌握根证书的机构、掌握加密算法的组织同样可以进行中间人形式的攻击，但HTTPS仍是现行架构下最安全的解决方案，主要有以下几个好处：</p>
<ol>
<li>使用HTTPS协议可认证用户和服务器，确保数据发送到正确的客户机和服务器；</li>
<li>HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议，要比http协议安全，可防止数据在传输过程中不被窃取、改变，确保数据的完整性。</li>
<li>HTTPS是现行架构下最安全的解决方案，虽然不是绝对安全，但它大幅增加了中间人攻击的成本。</li>
<li>谷歌曾在2014年8月份调整搜索引擎算法，并称“比起同等HTTP网站，采用HTTPS加密的网站在搜索结果中的排名将会更高”。</li>
</ol>
<h3 id="HTTPS的缺点"><a href="#HTTPS的缺点" class="headerlink" title="HTTPS的缺点"></a>HTTPS的缺点</h3><p>虽然说HTTPS有很大的优势，但其相对来说，还是存在不足之处的：</p>
<ol>
<li>HTTPS协议握手阶段比较费时，会使页面的加载时间延长近50%，增加10%到20%的耗电；</li>
<li>HTTPS连接缓存不如HTTP高效，会增加数据开销和功耗，甚至已有的安全措施也会因此而受到影响；</li>
<li>SSL证书需要钱，功能越强大的证书费用越高，个人网站、小网站没有必要一般不会用。</li>
<li>SSL证书通常需要绑定IP，不能在同一IP上绑定多个域名，IPv4资源不可能支撑这个消耗。</li>
<li>HTTPS协议的加密范围也比较有限，在黑客攻击、拒绝服务攻击、服务器劫持等方面几乎起不到什么作用。最关键的，SSL证书的信用链体系并不安全，特别是在某些国家可以控制CA根证书的情况下，中间人攻击一样可行。</li>
</ol>
<h3 id="HTTP-切换到-HTTPS"><a href="#HTTP-切换到-HTTPS" class="headerlink" title="HTTP 切换到 HTTPS"></a>HTTP 切换到 HTTPS</h3><p>如果需要将网站从http切换到https到底该如何实现呢？</p>
<p>这里需要将页面中所有的链接，例如js，css，图片等等链接都由http改为https。例如：<a href="http://www.baidu.com改为https://www.baidu.com" target="_blank" rel="noopener">www.baidu.com改为https://www.baidu.com</a></p>
<p>BTW，这里虽然将http切换为了https，还是建议保留http。所以我们在切换的时候可以做http和https的兼容，具体实现方式是，去掉页面链接中的http头部，这样可以自动匹配http头和https头。例如：将 <a href="http://www.baidu.com改为//www.baidu.com。然后当用户从http的入口进入访问页面时，页面就是http，如果用户是从https的入口进入访问页面，页面即使https的。" target="_blank" rel="noopener">http://www.baidu.com改为//www.baidu.com。然后当用户从http的入口进入访问页面时，页面就是http，如果用户是从https的入口进入访问页面，页面即使https的。</a></p>
<h3 id="什么是Cookie，Cookie的使用过程是怎么样的？"><a href="#什么是Cookie，Cookie的使用过程是怎么样的？" class="headerlink" title="什么是Cookie，Cookie的使用过程是怎么样的？"></a>什么是Cookie，Cookie的使用过程是怎么样的？</h3><p>由于 http 协议是无状态协议，如果客户通过浏览器访问 web 应用时没有一个保存用户访问状态的机制，那么将不能持续跟踪应用的操作。比如当用户往购物车中添加了商品，web 应用必须在用户浏览别的商品的时候仍保存购物车的状态，以便用户继续往购物车中添加商品。</p>
<p>cookie 是浏览器的一种缓存机制，它可用于维持客户端与服务器端之间的会话。由于下面一题会讲到session，所以这里要强调cookie会将会话保存在客户端（session则是把会话保存在服务端）</p>
<p>这里以最常见的登陆案例讲解cookie的使用过程：</p>
<ol>
<li>首先用户在客户端浏览器向服务器发起登陆请求</li>
<li>登陆成功后，服务端会把登陆的用户信息设置 cookie 中，返回给客户端浏览器</li>
<li>客户端浏览器接收到 cookie 请求后，会把 cookie 保存到本地（可能是内存，也可能是磁盘，看具体使用情况而定）</li>
<li>以后再次访问该 web 应用时，客户端浏览器就会把本地的 cookie 带上，这样服务端就能根据 cookie 获得用户信息了</li>
</ol>
<h3 id="什么是session，有哪些实现session的机制？"><a href="#什么是session，有哪些实现session的机制？" class="headerlink" title="什么是session，有哪些实现session的机制？"></a>什么是session，有哪些实现session的机制？</h3><p>session 是一种维持客户端与服务器端会话的机制。但是与 <strong>cookie 把会话信息保存在客户端本地不一样，session 把会话保留在浏览器端。</strong></p>
<p>我们同样以登陆案例为例子讲解 session 的使用过程：</p>
<ol>
<li>首先用户在客户端浏览器发起登陆请求</li>
<li>登陆成功后，服务端会把用户信息保存在服务端，并返回一个唯一的 session 标识给客户端浏览器。</li>
<li>客户端浏览器会把这个唯一的 session 标识保存在起来</li>
<li>以后再次访问 web 应用时，客户端浏览器会把这个唯一的 session 标识带上，这样服务端就能根据这个唯一标识找到用户信息。</li>
</ol>
<p>看到这里可能会引起疑问：把唯一的 session 标识返回给客户端浏览器，然后保存起来，以后访问时带上，这难道不是 cookie 吗？</p>
<p>没错，<strong>session 只是一种会话机制，在许多 web 应用中，session 机制就是通过 cookie 来实现的</strong>。也就是说它只是使用了 cookie 的功能，并不是使用 cookie 完成会话保存。与 cookie 在保存客户端保存会话的机制相反，session 通过 cookie 的功能把会话信息保存到了服务端。</p>
<p>进一步地说，session 是一种维持服务端与客户端之间会话的机制，它可以有不同的实现。以现在比较流行的小程序为例，阐述一个 session 的实现方案：</p>
<ol>
<li>首先用户登陆后，需要把用户登陆信息保存在服务端，这里我们可以采用 redis。比如说给用户生成一个 userToken，然后以 userId 作为键，以 userToken 作为值保存到 redis 中，并在返回时把 userToken 带回给小程序端。</li>
<li>小程序端接收到 userToken 后把它缓存起来，以后每当访问后端服务时就把 userToken 带上。</li>
<li>在后续的服务中服务端只要拿着小程序端带来的 userToken 和 redis 中的 userToken 进行比对，就能确定用户的登陆状态了。</li>
</ol>
<h3 id="session和cookie有什么区别"><a href="#session和cookie有什么区别" class="headerlink" title="session和cookie有什么区别"></a>session和cookie有什么区别</h3><p>经过上面两道题的阐述，这道题就很清晰了</p>
<ol>
<li>cookie 是浏览器提供的一种缓存机制，它可以用于维持客户端与服务端之间的会话</li>
<li>session 指的是维持客户端与服务端会话的一种机制，它可以通过 cookie 实现，也可以通过别的手段实现。</li>
<li>如果用 cookie 实现会话，那么会话会保存在客户端浏览器中</li>
<li>而 session 机制提供的会话是保存在服务端的。</li>
</ol>
<h2 id="Other-FAQ"><a href="#Other-FAQ" class="headerlink" title="Other FAQ     "></a>Other FAQ     </h2><h3 id="从输入网址到获得页面的过程"><a href="#从输入网址到获得页面的过程" class="headerlink" title="从输入网址到获得页面的过程"></a>从输入网址到获得页面的过程</h3><ol>
<li>浏览器查询 DNS，获取域名对应的IP地址:具体过程包括浏览器搜索自身的DNS缓存、搜索操作系统的DNS缓存、读取本地的Host文件和向本地DNS服务器进行查询等。对于向本地DNS服务器进行查询，如果要查询的域名包含在本地配置区域资源中，则返回解析结果给客户机，完成域名解析(此解析具有权威性)；如果要查询的域名不由本地DNS服务器区域解析，但该服务器已缓存了此网址映射关系，则调用这个IP地址映射，完成域名解析（此解析不具有权威性）。如果本地域名服务器并未缓存该网址映射关系，那么将根据其设置发起递归查询或者迭代查询；</li>
<li>浏览器获得域名对应的IP地址以后，浏览器向服务器请求建立链接，发起三次握手；</li>
<li>TCP/IP链接建立起来后，浏览器向服务器发送HTTP请求；</li>
<li>服务器接收到这个请求，并根据路径参数映射到特定的请求处理器进行处理，并将处理结果及相应的视图返回给浏览器；</li>
<li>浏览器解析并渲染视图，若遇到对js文件、css文件及图片等静态资源的引用，则重复上述步骤并向服务器请求这些资源；</li>
<li>浏览器根据其请求到的资源、数据渲染页面，最终向用户呈现一个完整的页面。</li>
</ol>
<h3 id="XSS-攻击"><a href="#XSS-攻击" class="headerlink" title="XSS 攻击"></a>XSS 攻击</h3><p>XSS 是一种经常出现在web应用中的计算机安全漏洞，与SQL注入一起成为web中最主流的攻击方式。XSS是指恶意攻击者利用网站没有对用户提交数据进行转义处理或者过滤不足的缺点，进而添加一些脚本代码嵌入到web页面中去，使别的用户访问都会执行相应的嵌入代码，从而盗取用户资料、利用用户身份进行某种动作或者对访问者进行病毒侵害的一种攻击方式。</p>
<p>          </p>
<h3 id="IP地址的分类"><a href="#IP地址的分类" class="headerlink" title="IP地址的分类"></a>IP地址的分类</h3><p>IP地址是指互联网协议地址，是IP协议提供的一种统一的地址格式，它为互联网上的每一个网络和每一台主机分配一个逻辑地址，以此来屏蔽物理地址的差异。IP地址编址方案将IP地址空间划分为A、B、C、D、E五类，其中A、B、C是基本类，D、E类作为多播和保留使用，为特殊地址。</p>
<p>每个IP地址包括两个标识码（ID），即网络ID和主机ID。同一个物理网络上的所有主机都使用同一个网络ID，网络上的一个主机（包括网络上工作站，服务器和路由器等）有一个主机ID与其对应。A~E类地址的特点如下：</p>
<p>A类地址：以0开头，第一个字节范围：0~127；</p>
<p>B类地址：以10开头，第一个字节范围：128~191；</p>
<p>C类地址：以110开头，第一个字节范围：192~223；</p>
<p>D类地址：以1110开头，第一个字节范围为224~239；</p>
<p>E类地址：以1111开头，保留地址</p>
<p><img src="https://gitee.com/wjxyzs/img/raw/master/img/17180bedf2021893.jpg" alt=""></p>
<h2 id="参考与感谢"><a href="#参考与感谢" class="headerlink" title="参考与感谢"></a>参考与感谢</h2><ul>
<li>《HTTP 权威指南》</li>
<li><a href="https://arch-long.cn/articles/network/OSI模型TCPIP协议栈.html" target="_blank" rel="noopener">arch-long.cn/articles/ne…</a></li>
<li><a href="https://blog.csdn.net/qq_32998153/article/details/79680704" target="_blank" rel="noopener">blog.csdn.net/qq_32998153…</a></li>
</ul>
]]></content>
      <categories>
        <category>直击面试</category>
      </categories>
      <tags>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title>[MySOL数据库]</title>
    <url>/2020/10/08/MySOL%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
    <content><![CDATA[<h2 id="MySQL数据库"><a href="#MySQL数据库" class="headerlink" title="MySQL数据库"></a>MySQL数据库</h2><p>MySQL是一种开放源代码的关系型数据库管理系统（RDBMS），使用最常用的数据库管理语言–结构化查询语言（SQL）进行数据库管理。 MySQL是开放源代码的，因此任何人都可以在General Public License的许可下下载并根据个性化的需要对其进行修改。 MySQL因为其速度、可靠性和适应性而备受关注。</p>
<p><a href="https://rogerxs80.github.io/2020/03/09/%E5%88%9D%E8%AF%86%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%8Emysql%E5%AE%89%E8%A3%85/" target="_blank" rel="noopener">1.mysql安装</a></p>
<p><a href="https://rogerxs80.github.io/2020/03/09/%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/" target="_blank" rel="noopener">2.存储引擎与数据类型</a></p>
<p><a href="https://rogerxs80.github.io/2020/03/10/%E7%BA%A6%E6%9D%9F%E6%9D%A1%E4%BB%B6%E4%B8%8E%E8%A1%A8%E5%85%B3%E7%B3%BB/" target="_blank" rel="noopener">3.约束条件与表关系</a></p>
<p><a href="https://rogerxs80.github.io/2020/03/11/%E8%81%9A%E5%90%88%E5%87%BD%E6%95%B0/" target="_blank" rel="noopener">4.聚合函数</a></p>
<p><a href="https://rogerxs80.github.io/2020/03/12/navicat%E5%AE%89%E8%A3%85%E4%B8%8Epymysql%E6%A8%A1%E5%9D%97/" target="_blank" rel="noopener">5.navicat安装与pymysql模块</a></p>
<p><a href="https://rogerxs80.github.io/2020/03/13/%E4%BA%8B%E5%8A%A1%E4%B8%8E%E5%85%B6%E4%BB%96%E4%BB%8B%E7%BB%8D/" target="_blank" rel="noopener">6.事务与开发模型</a></p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>[Django框架]</title>
    <url>/2020/02/10/Django%E6%A1%86%E6%9E%B6/</url>
    <content><![CDATA[<h2 id="Django框架"><a href="#Django框架" class="headerlink" title="Django框架"></a>Django框架</h2><p>Django 是用Python开发的一个免费开源的Web框架，可以用于快速搭建高性能，优雅的网站！采用了MVC的框架模式，即模型M，视图V和控制器C，也可以称为MVT模式，模型M，视图V，模板T</p>
<p><a href="https://rogerxs80.github.io/2020/02/10/%E5%88%9D%E8%AF%86django%E6%A1%86%E6%9E%B6/" target="_blank" rel="noopener">1.初识django框架</a></p>
<p><a href="https://rogerxs80.github.io/2020/02/10/%E9%9D%99%E6%80%81%E6%96%87%E4%BB%B6%E3%80%81request%E5%AF%B9%E8%B1%A1%E4%B8%8E%E9%93%BE%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93/" target="_blank" rel="noopener">2.静态文件、request对象与链接数据库</a></p>
<p><a href="https://rogerxs80.github.io/2020/02/11/%E6%95%B0%E6%8D%AE%E7%BC%96%E8%BE%91%E3%80%81orm%E8%A1%A8%E5%85%B3%E7%B3%BB%E5%92%8C%E8%B7%AF%E7%94%B1%E5%B1%82/" target="_blank" rel="noopener">3.数据编辑、orm表关系和路由层</a></p>
<p><a href="https://rogerxs80.github.io/2020/02/12/%E8%A7%86%E5%9B%BE%E5%B1%82/" target="_blank" rel="noopener">4.视图层</a></p>
<p><a href="https://rogerxs80.github.io/2020/02/12/%E6%A8%A1%E6%9D%BF%E5%B1%82/" target="_blank" rel="noopener">5.模板层</a></p>
<p><a href="https://rogerxs80.github.io/2020/02/12/%E6%A8%A1%E5%9E%8B%E5%B1%82/" target="_blank" rel="noopener">6.模型层</a></p>
<p><a href="https://rogerxs80.github.io/2020/02/15/Ajax%E6%93%8D%E4%BD%9C/" target="_blank" rel="noopener">7.Ajax操作</a></p>
<p><a href="https://rogerxs80.github.io/2020/02/15/Forms%E7%BB%84%E4%BB%B6/" target="_blank" rel="noopener">8.Forms组件</a></p>
<p><a href="https://rogerxs80.github.io/2020/02/16/Cookie%E4%B8%8ESession/" target="_blank" rel="noopener">9.Cookie与Session</a></p>
<p><a href="https://rogerxs80.github.io/2020/02/17/django%E4%B8%AD%E9%97%B4%E4%BB%B6%E4%B8%8Ecsrf%E8%B7%A8%E7%AB%99%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0/" target="_blank" rel="noopener">10.django中间件与csrf跨站请求伪造</a></p>
<p><a href="https://rogerxs80.github.io/2020/02/17/MTV%E5%92%8CMVC%E6%A8%A1%E5%9E%8B%E4%B8%8EAuth%E6%A8%A1%E5%9D%97/" target="_blank" rel="noopener">11.MTV和MVC模型与Auth模块</a></p>
<p><a href="https://rogerxs80.github.io/2020/02/15/%E6%89%B9%E9%87%8F%E6%8F%92%E5%85%A5%E4%B8%8E%E5%88%86%E9%A1%B5%E5%99%A8/" target="_blank" rel="noopener">12.批量插入与分页器</a></p>
<p><a href="https://rogerxs80.github.io/2020/02/19/%E4%BA%86%E8%A7%A3%E7%9F%A5%E8%AF%86/" target="_blank" rel="noopener">13.了解知识</a></p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>django框架</tag>
      </tags>
  </entry>
  <entry>
    <title>[Redis系列]</title>
    <url>/2020/06/21/Redis%E7%B3%BB%E5%88%97/</url>
    <content><![CDATA[<h2 id="Redis系列"><a href="#Redis系列" class="headerlink" title="Redis系列"></a>Redis系列</h2><p>Redis（Remote Dictionary Server )，即远程字典服务，是一个开源的使用ANSI C语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API…</p>
<p><a href="https://rogerxs80.github.io/2020/06/21/Redis%E5%88%9D%E8%AF%86/" target="_blank" rel="noopener">1.Redis介绍安装配置</a></p>
<p><a href="https://rogerxs80.github.io/2020/06/21/API%E7%9A%84%E4%BD%BF%E7%94%A8/" target="_blank" rel="noopener">2.API的使用</a></p>
<p><a href="https://rogerxs80.github.io/2020/06/21/%E9%AB%98%E7%BA%A7%E7%94%A8%E6%B3%95/" target="_blank" rel="noopener">3.客户端使用</a></p>
<p><a href="https://rogerxs80.github.io/2020/06/21/%E9%AB%98%E7%BA%A7%E7%94%A8%E6%B3%95/" target="_blank" rel="noopener">4.高级用法</a></p>
<p><a href="https://rogerxs80.github.io/2020/06/21/%E6%8C%81%E4%B9%85%E5%8C%96/" target="_blank" rel="noopener">5.持久化</a></p>
<p><a href="https://rogerxs80.github.io/2020/06/21/%E4%BD%BF%E7%94%A8%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/" target="_blank" rel="noopener">6.使用常见问题</a></p>
<p><a href="https://rogerxs80.github.io/2020/06/21/%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E5%8E%9F%E7%90%86%E4%B8%8E%E4%BC%98%E5%8C%96/" target="_blank" rel="noopener">7.主从复制原理与优化</a></p>
<p><a href="https://rogerxs80.github.io/2020/06/21/Sentinel/" target="_blank" rel="noopener">8.Sentinel</a></p>
<p><a href="https://rogerxs80.github.io/2020/06/21/%E7%BC%93%E5%AD%98%E7%9A%84%E4%BD%BF%E7%94%A8%E5%92%8C%E4%BC%98%E5%8C%96/" target="_blank" rel="noopener">9.缓存的使用和优化</a></p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>[Go函数]</title>
    <url>/2021/04/23/Go%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="函数的基本形式"><a href="#函数的基本形式" class="headerlink" title="函数的基本形式"></a>函数的基本形式</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//函数定义。a,b是形参</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">argf</span><span class="params">(a <span class="keyword">int</span>, b <span class="keyword">int</span>)</span></span> &#123; </span><br><span class="line">	a = a + b </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> x, y <span class="keyword">int</span> = <span class="number">3</span>, <span class="number">6</span></span><br><span class="line">argf(x, y) <span class="comment">//函数调用。x,y是实参</span></span><br></pre></td></tr></table></figure>

<ul>
<li>形参是函数内部的局部变量，实参的值会拷贝给形参。</li>
<li>函数定义时的第一个的大括号不能另起一行。</li>
<li>形参可以有0个或多个。</li>
<li>参数类型相同时可以只写一次，比如argf(a,b int)。 </li>
<li>在函数内部修改形参的值，实参的值不受影响。</li>
<li>如果想通过函数修改实参，就需要指针类型。 </li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">argf</span><span class="params">(a, b *<span class="keyword">int</span>)</span></span> &#123; </span><br><span class="line">    *a = *a + *b</span><br><span class="line">    *b = <span class="number">888</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> x, y <span class="keyword">int</span> = <span class="number">3</span>, <span class="number">6</span></span><br><span class="line">argf(&amp;x, &amp;y)</span><br></pre></td></tr></table></figure>

<p>&#8195;&#8195;slice、map、channel都是引用类型，它们作为函数参数时其实跟普通struct没什么区别，都是对struct内部的各个字段做一次拷贝传到函数内部。  </p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">slice_arg_1</span><span class="params">(arr []<span class="keyword">int</span>)</span></span> &#123; <span class="comment">//slice作为参数，实际上是把slice的arrayPointer、len、cap拷贝了一份传进来</span></span><br><span class="line">	arr[<span class="number">0</span>] = <span class="number">1</span>           <span class="comment">//修改底层数据里的首元素</span></span><br><span class="line">	arr = <span class="built_in">append</span>(arr, <span class="number">1</span>) <span class="comment">//arr的len和cap发生了变化，不会影响实参</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	arr := []<span class="keyword">int</span>&#123;<span class="number">8</span>&#125;</span><br><span class="line">	slice_arg_1(arr)</span><br><span class="line">	fmt.Println(arr[<span class="number">0</span>])   <span class="comment">//1</span></span><br><span class="line">	fmt.Println(<span class="built_in">len</span>(arr)) <span class="comment">//1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>关于函数返回值</p>
<ul>
<li>可以返回0个或多个参数。</li>
<li>可以在func行直接声明要返回的变量。</li>
<li>return后面的语句不会执行。</li>
<li>无返回参数时return可以不写。   </li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">returnf</span><span class="params">(a, b <span class="keyword">int</span>)</span> <span class="params">(c <span class="keyword">int</span>)</span></span> &#123; <span class="comment">//返回变量c已经声明好了</span></span><br><span class="line">    a = a + b</span><br><span class="line">    c = a <span class="comment">//直接使用c</span></span><br><span class="line">    <span class="keyword">return</span> <span class="comment">//由于函数要求有返回值，即使给c赋过值了，也需要显式写return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>&#8195;&#8195;不定长参数实际上是slice类型。  </p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">variable_ength_arg</span><span class="params">(a <span class="keyword">int</span>, other ...<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123; </span><br><span class="line">    sum := a</span><br><span class="line">    <span class="keyword">for</span> _, ele := <span class="keyword">range</span> other &#123;<span class="comment">//不定长参数实际上是slice类型</span></span><br><span class="line">        sum += ele</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Printf(<span class="string">"len %d cap %d\n"</span>, <span class="built_in">len</span>(other), <span class="built_in">cap</span>(other))</span><br><span class="line">    <span class="keyword">return</span> sum</span><br><span class="line">&#125;</span><br><span class="line">variable_ength_arg(<span class="number">1</span>)</span><br><span class="line">variable_ength_arg(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br></pre></td></tr></table></figure>

<p>&#8195;&#8195;append函数接收的就是不定长参数。  </p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">arr = <span class="built_in">append</span>(arr, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">arr = <span class="built_in">append</span>(arr, <span class="number">7</span>)</span><br><span class="line">arr = <span class="built_in">append</span>(arr)</span><br><span class="line">slice := <span class="built_in">append</span>([]<span class="keyword">byte</span>(<span class="string">"hello "</span>), <span class="string">"world"</span>...) <span class="comment">//...自动把"world"转成byte切片，等价于[]byte("world")...</span></span><br><span class="line">slice2 := <span class="built_in">append</span>([]<span class="keyword">rune</span>(<span class="string">"hello "</span>), []<span class="keyword">rune</span>(<span class="string">"world"</span>)...) <span class="comment">//需要显式把"world"转成rune切片</span></span><br></pre></td></tr></table></figure>

<p>&#8195;&#8195;在很多场景下string都隐式的转换成了byte切片，而非rune切片，比如”a中”[1]是228而非”中”。<br>递归函数  </p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Fibonacci</span><span class="params">(n <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span> || n == <span class="number">1</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> n <span class="comment">//凡是递归，一定要有终止条件，否则会进入无限循环</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Fibonacci(n<span class="number">-1</span>) + Fibonacci(n<span class="number">-2</span>) <span class="comment">//递归调用函数自身</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h2><p>&#8195;&#8195;函数也是一种数据类型。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">function_arg1</span><span class="params">(f <span class="keyword">func</span>(a, b <span class="keyword">int</span>)</span> <span class="title">int</span>, <span class="title">b</span> <span class="title">int</span>) <span class="title">int</span></span> &#123; <span class="comment">//f参数是一种函数类型</span></span><br><span class="line">	a := <span class="number">2</span> * b</span><br><span class="line">	<span class="keyword">return</span> f(a, b)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> foo <span class="function"><span class="keyword">func</span><span class="params">(a, b <span class="keyword">int</span>)</span> <span class="title">int</span> //<span class="title">foo</span>是一种函数类型</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">function_arg2</span><span class="params">(f foo, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123; <span class="comment">//参数类型看上去简洁多了</span></span><br><span class="line">    a := <span class="number">2</span> * b</span><br><span class="line">    <span class="keyword">return</span> f(a, b)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">    Name <span class="keyword">string</span></span><br><span class="line">    bye foo <span class="comment">//bye的类型是foo，而foo代表一种函数类型</span></span><br><span class="line">    hello <span class="function"><span class="keyword">func</span><span class="params">(name <span class="keyword">string</span>)</span> <span class="title">string</span> //使用匿名函数来声明<span class="title">struct</span>字段的类型</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="function"><span class="keyword">func</span><span class="params">(<span class="keyword">string</span>)</span> <span class="title">string</span>, 10)</span></span><br><span class="line">ch &lt;- <span class="function"><span class="keyword">func</span><span class="params">(name <span class="keyword">string</span>)</span> <span class="title">string</span></span> &#123;  <span class="comment">//使用匿名函数</span></span><br><span class="line">	<span class="keyword">return</span> <span class="string">"hello "</span> + name</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><p>&#8195;&#8195;闭包（Closure）是引用了自由变量的函数，自由变量将和函数一同存在，即使已经离开了创造它的环境。闭包复制的是原对象的指针。  </p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//闭包（Closure）是引用了自由变量的函数。自由变量将和函数一同存在，即使已经离开了创造它的环境。</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sub</span><span class="params">()</span> <span class="title">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">	i := <span class="number">10</span></span><br><span class="line">	fmt.Printf(<span class="string">"%p\n"</span>, &amp;i)</span><br><span class="line">	b := <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">		fmt.Printf(<span class="string">"i addr %p\n"</span>, &amp;i) <span class="comment">//闭包复制的是原对象的指针</span></span><br><span class="line">		i--                           <span class="comment">//b函数内部引用了变量i</span></span><br><span class="line">		fmt.Println(i)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> b <span class="comment">//返回了b函数，变量i和b函数将一起存在，即使已经离开函数sub()</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 外部引用函数参数局部变量</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(base <span class="keyword">int</span>)</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(i <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">		fmt.Printf(<span class="string">"base addr %p\n"</span>, &amp;base)</span><br><span class="line">		base += i</span><br><span class="line">		<span class="keyword">return</span> base</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	b := sub()</span><br><span class="line">	b()</span><br><span class="line">	b()</span><br><span class="line">	fmt.Println()</span><br><span class="line"></span><br><span class="line">	tmp1 := add(<span class="number">10</span>)</span><br><span class="line">	fmt.Println(tmp1(<span class="number">1</span>), tmp1(<span class="number">2</span>)) <span class="comment">//11,13</span></span><br><span class="line">	<span class="comment">// 此时tmp1和tmp2不是一个实体了</span></span><br><span class="line">	tmp2 := add(<span class="number">100</span>)</span><br><span class="line">	fmt.Println(tmp2(<span class="number">1</span>), tmp2(<span class="number">2</span>)) <span class="comment">//101,103</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="延迟调用defer"><a href="#延迟调用defer" class="headerlink" title="延迟调用defer"></a>延迟调用defer</h2><ul>
<li>defer用于注册一个延迟调用（在函数返回之前调用）。</li>
<li>defer典型的应用场景是释放资源，比如关闭文件句柄，释放数据库连接等。</li>
<li>如果同一个函数里有多个defer，则后注册的先执行。</li>
<li>defer后可以跟一个func，func内部如果发生panic，会把panic暂时搁置，当把其他defer执行完之后再来执行这个。</li>
<li>defer后不是跟func，而直接跟一条执行语句，则相关变量在注册defer时被拷贝或计算。</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">basic</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">"A"</span>)</span><br><span class="line">    <span class="keyword">defer</span> fmt.Println(<span class="number">1</span>) fmt.Println(<span class="string">"B"</span>)</span><br><span class="line">    <span class="comment">//如果同一个函数里有多个defer，则后注册的先执行</span></span><br><span class="line">    <span class="keyword">defer</span> fmt.Println(<span class="number">2</span>)</span><br><span class="line">    fmt.Println(<span class="string">"C"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">defer_exe_time</span><span class="params">()</span> <span class="params">(i <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">	i = <span class="number">9</span></span><br><span class="line">	<span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123; <span class="comment">//defer后可以跟一个func</span></span><br><span class="line">		fmt.Printf(<span class="string">"first i=%d\n"</span>, i) <span class="comment">//打印5，而非9。充分理解“defer在函数返回前执行”的含义，不是在“return语句前执行defer”</span></span><br><span class="line">	&#125;()</span><br><span class="line">	<span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">(i <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">		fmt.Printf(<span class="string">"second i=%d\n"</span>, i) <span class="comment">//打印9</span></span><br><span class="line">	&#125;(i)</span><br><span class="line">	<span class="keyword">defer</span> fmt.Printf(<span class="string">"third i=%d\n"</span>, i) <span class="comment">//defer后不是跟func，而直接跟一条执行语句，则相关变量在注册defer时被拷贝或计算</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">5</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><p>&#8195;&#8195;go语言没有try catch，它提倡返回error。  </p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">divide</span><span class="params">(a, b <span class="keyword">int</span>)</span> <span class="params">(<span class="keyword">int</span>, error)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> b == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>, errors.New(<span class="string">"divide by zero"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a / b, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> res, err := divide(<span class="number">3</span>, <span class="number">0</span>); err != <span class="literal">nil</span> &#123;<span class="comment">//函数调用方判断error是否为nil</span></span><br><span class="line">    fmt.Println(err.Error())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>&#8195;&#8195;Go语言定义了error这个接口，自定义的error要实现Error()方法。  </p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> PathError <span class="keyword">struct</span> &#123;    <span class="comment">//自定义error</span></span><br><span class="line">    path <span class="keyword">string</span></span><br><span class="line">    op <span class="keyword">string</span></span><br><span class="line">    createTime <span class="keyword">string</span></span><br><span class="line">    message <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(err PathError)</span> <span class="title">Error</span><span class="params">()</span> <span class="title">string</span></span> &#123;    <span class="comment">//error接口要求实现Error() string方法</span></span><br><span class="line">	<span class="keyword">return</span> err.createTime + <span class="string">": "</span> + err.op + <span class="string">" "</span> + err.path + <span class="string">" "</span> + err.message</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>何时会发生panic:  </p>
<ul>
<li>运行时错误会导致panic，比如数组越界、除0。</li>
<li>程序主动调用panic(error)。</li>
</ul>
<p>panic会执行什么：  </p>
<ol>
<li>逆序执行当前goroutine的defer链（recover从这里介入）。</li>
<li>打印错误信息和调用堆栈。</li>
<li>调用exit(2)结束整个进程。  </li>
</ol>
<p>&#8195;&#8195;recover会使程序从panic中恢复(即不会执行panic的第2步和第3步)，并返回panic value。recover所在的函数后续的代码不会执行，但函数可以正常返回。在未发生panic时调用recover，会返回nil。recover()必须在defer中才能生效。  </p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">soo</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(<span class="string">"enter soo"</span>)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123; <span class="comment">//去掉这个defer试试，看看panic的流程。把这个defer放到soo函数末尾试试。把这个defer移到main()里试试。</span></span><br><span class="line">		<span class="comment">//recover必须在defer中才能生效</span></span><br><span class="line">		<span class="keyword">if</span> panic_value := <span class="built_in">recover</span>(); panic_value != <span class="literal">nil</span> &#123;</span><br><span class="line">			fmt.Printf(<span class="string">"soo函数中发生了panic:%v\n"</span>, panic_value)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;()</span><br><span class="line">	fmt.Println(<span class="string">"regist recover"</span>)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">defer</span> fmt.Println(<span class="string">"hello"</span>)</span><br><span class="line">	<span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">		n := <span class="number">0</span></span><br><span class="line">		_ = <span class="number">3</span> / n <span class="comment">//除0异常，发生panic，下一行的defer没有注册成功</span></span><br><span class="line">		<span class="keyword">defer</span> fmt.Println(<span class="string">"how are you"</span>)</span><br><span class="line">	&#125;()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">B</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// defer func() &#123; //方式一，recover()在B()函数里，则在B()函数中panic后面的代码不会执行。不影响BBBBBBB的打印</span></span><br><span class="line">	<span class="comment">// 	if panicValue := recover(); panicValue != nil &#123;</span></span><br><span class="line">	<span class="comment">// 		fmt.Printf("panic info %v\n", panicValue)</span></span><br><span class="line">	<span class="comment">// 	&#125;</span></span><br><span class="line">	<span class="comment">// &#125;()</span></span><br><span class="line">	<span class="built_in">panic</span>(<span class="number">5</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123; <span class="comment">//方式二，recover()在main()函数里，则在main()函数中panic后面的代码不会执行。BBBBBBB不会打印出来</span></span><br><span class="line">		<span class="keyword">if</span> panicValue := <span class="built_in">recover</span>(); panicValue != <span class="literal">nil</span> &#123;</span><br><span class="line">			fmt.Printf(<span class="string">"panic info %v\n"</span>, panicValue)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;()</span><br><span class="line"></span><br><span class="line">	B()</span><br><span class="line">	fmt.Println(<span class="string">"BBBBBBB"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang基础</tag>
      </tags>
  </entry>
  <entry>
    <title>[Docker通关手册]</title>
    <url>/2021/01/21/Docker%E9%80%9A%E5%85%B3%E6%89%8B%E5%86%8C/</url>
    <content><![CDATA[<blockquote>
<p>个人建议把面试题看作是费曼学习法中的回顾、简化的环节，准备面试的时候，跟着题目先自己讲给自己听，看看自己会满意吗，不满意就继续学习这个点，如此反复，好的offer离你不远的，奥利给</p>
<p>…</p>
</blockquote>
<blockquote>
<p>成长手册，<strong>GitHub</strong> <a href="https://github.com/rogerXS80/roger" target="_blank" rel="noopener">Lupinus</a> ，N线互联网开发必备技能兵器谱</p>
</blockquote>
<h1 id="Docker通关手册"><a href="#Docker通关手册" class="headerlink" title="Docker通关手册"></a>Docker通关手册</h1><h2 id="Docker是什么？"><a href="#Docker是什么？" class="headerlink" title="Docker是什么？"></a>Docker是什么？</h2><p>最广泛的开源容器引擎</p>
<p>一种操作系统级的虚拟化技术</p>
<p>依赖于Linux内核特性：Namespace（<strong>资源隔离</strong>）和Cgroups（<strong>资源限制</strong>）</p>
<p>一个简单的应用程序打包工具</p>
<h2 id="Docker安装"><a href="#Docker安装" class="headerlink" title="Docker安装"></a>Docker安装</h2><p>如果已经安装了，运行：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sudo yum remove docker \</span><br><span class="line">                 docker-client \</span><br><span class="line">                 docker-client-latest \</span><br><span class="line">                 docker-common \</span><br><span class="line">                 docker-latest \</span><br><span class="line">                 docker-latest-logrotate \</span><br><span class="line">                 docker-logrotate \</span><br><span class="line">                 docker-engine</span><br></pre></td></tr></table></figure>

<p>安装docker工具</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装 Docker所需的依赖</span></span><br><span class="line">yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加软件源信息</span></span><br><span class="line">yum-config-manager --add-repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line">    </span><br><span class="line"><span class="comment"># Docker CE</span></span><br><span class="line">yum install docker-ce -y</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新加载 配置文件</span></span><br><span class="line">systemctl daemon-reload</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启 Docker服务</span></span><br><span class="line">systemctl restart docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将 Docker服务 加入开机自启</span></span><br><span class="line">systemctl enable --now docker.service</span><br><span class="line">Created symlink <span class="keyword">from</span> /etc/systemd/system/multi-user.target.wants/docker.service to /usr/lib/systemd/system/docker.service.</span><br><span class="line">        </span><br><span class="line"><span class="comment"># yum源工作目录</span></span><br><span class="line">/etc/yum.repos.d/docker-ce.repo</span><br></pre></td></tr></table></figure>

<h2 id="Docker基本组成"><a href="#Docker基本组成" class="headerlink" title="Docker基本组成"></a>Docker基本组成</h2><img src="https://gitee.com/wjxyzs/img/raw/master/img/docker%E7%BB%84%E6%88%90.png" style="zoom: 67%;" />

<h2 id="Docker核心组件"><a href="#Docker核心组件" class="headerlink" title="Docker核心组件"></a>Docker核心组件</h2><img src="https://gitee.com/wjxyzs/img/raw/master/img/docker%E6%A0%B8%E5%BF%83%E7%BB%84%E4%BB%B6.png" style="zoom:67%;" />

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Docker Daemon：Docker守护进程，负责与Docker Clinet交互，并管理镜像、</span><br><span class="line">容器。</span><br><span class="line">Containerd：是一个简单的守护进程，向上给Docker Daemon提供接口，向下</span><br><span class="line">通过containerd-shim结合runC管理容器。</span><br><span class="line">runC：一个命令行工具，它根据OCI标准来创建和运行容器。</span><br></pre></td></tr></table></figure>



<h2 id="镜像是什么？"><a href="#镜像是什么？" class="headerlink" title="镜像是什么？"></a>镜像是什么？</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">• 一个分层存储的文件，不是一个单一的文件 </span><br><span class="line">• 一个软件的环境 </span><br><span class="line">• 一个镜像可以创建N个容器 </span><br><span class="line">• 一种标准化的交付 </span><br><span class="line">• 一个不包含Linux内核而又精简的Linux操作系统</span><br></pre></td></tr></table></figure>

<h3 id="配置镜像加速器"><a href="#配置镜像加速器" class="headerlink" title="配置镜像加速器"></a>配置镜像加速器</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">vi /etc/docker/daemon.json </span><br><span class="line">&#123;</span><br><span class="line"><span class="string">"registry-mirrors"</span>: [<span class="string">"https://rxsa4cyh.mirror.aliyuncs.com]</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="镜像常用指令"><a href="#镜像常用指令" class="headerlink" title="镜像常用指令"></a>镜像常用指令</h3><table>
<thead>
<tr>
<th align="center">指令</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">images</td>
<td align="center">列出镜像</td>
</tr>
<tr>
<td align="center">build</td>
<td align="center">构建镜像来自Dockerfile</td>
</tr>
<tr>
<td align="center">history</td>
<td align="center">查看镜像历史</td>
</tr>
<tr>
<td align="center">inspect</td>
<td align="center">显示一个或多个镜像详细信息</td>
</tr>
<tr>
<td align="center">pull</td>
<td align="center">从镜像仓库拉取镜像</td>
</tr>
<tr>
<td align="center">push</td>
<td align="center">推送一个镜像到镜像仓库</td>
</tr>
<tr>
<td align="center">rmi</td>
<td align="center">移除一个或多个镜像</td>
</tr>
<tr>
<td align="center">prune</td>
<td align="center">移除没有被标记或者没有被任何容器引用的镜像</td>
</tr>
<tr>
<td align="center">tag</td>
<td align="center">创建一个引用源镜像标记目标镜像</td>
</tr>
</tbody></table>
<h2 id="镜像存储核心技术"><a href="#镜像存储核心技术" class="headerlink" title="镜像存储核心技术"></a>镜像存储核心技术</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">储存驱动: overlay2（性能好）</span><br></pre></td></tr></table></figure>

<h3 id="联合文件系统（UnionFS"><a href="#联合文件系统（UnionFS" class="headerlink" title="联合文件系统（UnionFS)"></a>联合文件系统（UnionFS)</h3><img src="https://gitee.com/wjxyzs/img/raw/master/img/%E9%95%9C%E5%83%8F%E4%B8%8E%E5%AE%B9%E5%99%A8.png" style="zoom:67%;" />

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">联合文件系统：将镜像多层文件联合挂载到容器文件系统</span><br></pre></td></tr></table></figure>

<h3 id="写时复制（COW）"><a href="#写时复制（COW）" class="headerlink" title="写时复制（COW）"></a>写时复制（COW）</h3><p><img src="https://gitee.com/wjxyzs/img/raw/master/img/docker%E5%AD%98%E5%82%A8%E6%9E%B6%E6%9E%84.png" alt=""></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">写时复制：需要修改文件操作时，会先从镜像里把要写的文件复制到自己的文件系统中进行修改</span><br></pre></td></tr></table></figure>

<h3 id="Docker读写优化"><a href="#Docker读写优化" class="headerlink" title="Docker读写优化"></a>Docker读写优化</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">SSD固态硬盘（工作目录：/var/lib/docker）</span><br><span class="line">使用卷作为频繁读写文件的工作目录，绕过储存驱动，减少抽象开销</span><br></pre></td></tr></table></figure>



<h2 id="容器管理"><a href="#容器管理" class="headerlink" title="容器管理"></a>容器管理</h2><h3 id="创建容器常用选项"><a href="#创建容器常用选项" class="headerlink" title="创建容器常用选项"></a>创建容器常用选项</h3><table>
<thead>
<tr>
<th align="center">指令</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">-i</td>
<td align="center">交互式</td>
</tr>
<tr>
<td align="center">-t</td>
<td align="center">分配一个伪终端</td>
</tr>
<tr>
<td align="center">-d</td>
<td align="center">运行容器到后台</td>
</tr>
<tr>
<td align="center">-e</td>
<td align="center">设置环境变量</td>
</tr>
<tr>
<td align="center">-p</td>
<td align="center">发布容器端口到主机</td>
</tr>
<tr>
<td align="center">–name</td>
<td align="center">指定容器名字</td>
</tr>
<tr>
<td align="center">-h</td>
<td align="center">指定容器主机名</td>
</tr>
<tr>
<td align="center">-ip</td>
<td align="center">指定容器IP，只能用于自定义网络</td>
</tr>
<tr>
<td align="center">-network</td>
<td align="center">连接容器到一个网络</td>
</tr>
<tr>
<td align="center">-m</td>
<td align="center">将文件系统附加到容器</td>
</tr>
<tr>
<td align="center">-v</td>
<td align="center">绑定挂载一个卷</td>
</tr>
<tr>
<td align="center">-restart</td>
<td align="center">容器退出时重启策略，默认no，可选值：[always|on-failure]</td>
</tr>
</tbody></table>
<p>挂载宿主机三个文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">hostname       --hostname</span><br><span class="line">hosts          --dns</span><br><span class="line">resolc.conf    --add-host</span><br></pre></td></tr></table></figure>

<h3 id="容器资源限制"><a href="#容器资源限制" class="headerlink" title="容器资源限制"></a>容器资源限制</h3><table>
<thead>
<tr>
<th align="center">指令</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">-m</td>
<td align="center">容器可以使用的最大内存量（）</td>
</tr>
<tr>
<td align="center">–memory-swap</td>
<td align="center">允许交换到磁盘的内存量</td>
</tr>
<tr>
<td align="center">–memory-swappiness=&lt;0-100&gt;</td>
<td align="center">容器使用SWAP分区交换的百分比（0-100，默认为-1）</td>
</tr>
<tr>
<td align="center">–oom-kill-disable</td>
<td align="center">禁用OOM Killer</td>
</tr>
<tr>
<td align="center">–cpus</td>
<td align="center">可以使用的CPU数量</td>
</tr>
<tr>
<td align="center">–cpuset-cpus</td>
<td align="center">限制容器使用特定的CPU核心，如(0-3, 0,1)</td>
</tr>
<tr>
<td align="center">–cpu-shares</td>
<td align="center">CPU共享（相对权重）</td>
</tr>
</tbody></table>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">默认创建的容器使用宿主机所有资源</span><br><span class="line">主要用于每个容器能够平均分配到宿主机资源</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 内存限额：</span></span><br><span class="line"><span class="comment"># 允许容器最多使用500M内存和100M的Swap，并禁用 OOM Killer：</span></span><br><span class="line">docker run -d --name nginx01 -m=<span class="string">"500m"</span> --memory-swap=<span class="string">"100m"</span> --oom-kill-disable nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># CPU限额：</span></span><br><span class="line"><span class="comment"># 允许容器最多使用一个半的CPU：</span></span><br><span class="line">docker run -d --name nginx02 --cpus=<span class="string">"1.5"</span> nginx</span><br><span class="line"><span class="comment"># 允许容器最多使用50%的CPU：</span></span><br><span class="line">docker run -d --name nginx03 --cpus=<span class="string">".5"</span> nginx</span><br></pre></td></tr></table></figure>

<h3 id="管理容器常用指令"><a href="#管理容器常用指令" class="headerlink" title="管理容器常用指令"></a>管理容器常用指令</h3><table>
<thead>
<tr>
<th align="center">指令</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">ls</td>
<td align="center">列出容器</td>
</tr>
<tr>
<td align="center">inspect</td>
<td align="center">查看一个或多个容器详细信息</td>
</tr>
<tr>
<td align="center">exec</td>
<td align="center">在运行容器中执行命令</td>
</tr>
<tr>
<td align="center">commit</td>
<td align="center">创建一个新镜像来自一个容器</td>
</tr>
<tr>
<td align="center">cp</td>
<td align="center">拷贝文件/文件夹到一个容器</td>
</tr>
<tr>
<td align="center">logs</td>
<td align="center">获取一个容器日志</td>
</tr>
<tr>
<td align="center">port</td>
<td align="center">列出或指定容器端口映射</td>
</tr>
<tr>
<td align="center">top</td>
<td align="center">显示一个容器运行的进程</td>
</tr>
<tr>
<td align="center">stats</td>
<td align="center">显示容器资源使用统计</td>
</tr>
<tr>
<td align="center">stop/start/restart</td>
<td align="center">停止/启动一个或多个容器</td>
</tr>
<tr>
<td align="center">rm</td>
<td align="center">删除一个或多个容器</td>
</tr>
<tr>
<td align="center">prune</td>
<td align="center">移除已停止的容器</td>
</tr>
</tbody></table>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看容器</span></span><br><span class="line">docker ps</span><br><span class="line">docker ps -a  // 查看所有的容器</span><br><span class="line">docker ps -q  // 查看所有的容器id</span><br><span class="line">docker ps -l  // 查看最新创建的容器</span><br><span class="line"></span><br><span class="line">docker top 容器名    // 查看容器中的进程</span><br><span class="line"></span><br><span class="line">docker stats 容器名  // 容器资源统计信息</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行基础镜像</span></span><br><span class="line">docker run -it centos</span><br><span class="line"><span class="comment"># 运行应用镜像</span></span><br><span class="line">docker run -d nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入容器</span></span><br><span class="line">docker <span class="keyword">exec</span> -it centos bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除容器</span></span><br><span class="line">docker rm centos</span><br><span class="line"><span class="comment"># 批量删除容器</span></span><br><span class="line">docker rm -f $(docker ps -aq)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拷贝文件</span></span><br><span class="line">docker cp nginx.tar 容器名:/opt</span><br><span class="line">docker cp 容器名:/opt/nginx ./</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 更新容器配置（部分可以修改）</span></span><br><span class="line">docker update --help</span><br></pre></td></tr></table></figure>



<h2 id="容器实现核心技术"><a href="#容器实现核心技术" class="headerlink" title="容器实现核心技术"></a>容器实现核心技术</h2><h3 id="命名空间（Namespace）"><a href="#命名空间（Namespace）" class="headerlink" title="命名空间（Namespace）"></a>命名空间（Namespace）</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">将特定的全局系统资源通过抽象方法使得Namespace中的进程看起来拥有自己隔离的资源</span><br><span class="line"></span><br><span class="line"><span class="comment"># 6种不同命名空间</span></span><br><span class="line">ll /proc/$$/ns</span><br><span class="line"><span class="number">1</span> IPC:：隔离进程间通信</span><br><span class="line"><span class="number">2</span> MOUNT：隔离文件系统挂载点</span><br><span class="line"><span class="number">3</span> NET：隔离网络协议栈</span><br><span class="line"><span class="number">4</span> PID：隔离进程号，进程命名空间是一个父子结构，子空间对父空间可见</span><br><span class="line"><span class="number">5</span> USER：隔离用户</span><br><span class="line"><span class="number">6</span> UTS：隔离主机名和域名</span><br></pre></td></tr></table></figure>

<h2 id="控制组（CGroups）"><a href="#控制组（CGroups）" class="headerlink" title="控制组（CGroups）"></a>控制组（CGroups）</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">如果某个容器属于CPU密集型任务，那么会影响其他容器使用CPU，导致多个容器相互影响并抢占资源</span><br><span class="line">CGroups：所有任务就是运行在系统中的一个进程，而CGroups以某种标准将一组进程为目标进行资源分配和控制，并且可以动态配置</span><br><span class="line"></span><br><span class="line"><span class="comment"># 主要功能</span></span><br><span class="line">-限制进程组使用的资源数量：可以为进程组设定资源使用上限，例如内存（***）</span><br><span class="line">-进程组优先控制：可以为进程组分配特定CPU,磁盘IO吞吐量</span><br><span class="line">-记录进程组使用的资源数量：例如使用记录某个进程组使用的CPU时间</span><br><span class="line">-可以将进程组挂起和恢复</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看cgroup可控制资源</span></span><br><span class="line">ls /sys/fs/cgroup/&lt;资源名&gt;/docker -l</span><br></pre></td></tr></table></figure>



<h3 id="工具镜像"><a href="#工具镜像" class="headerlink" title="工具镜像"></a>工具镜像</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">docker run -itd busy:<span class="number">1.28</span><span class="number">.4</span></span><br><span class="line">docker <span class="keyword">exec</span> -it 容器名 sh</span><br></pre></td></tr></table></figure>



<h2 id="容器数据持久化"><a href="#容器数据持久化" class="headerlink" title="容器数据持久化"></a>容器数据持久化</h2><p><img src="https://gitee.com/wjxyzs/img/raw/master/img/%E5%AE%B9%E5%99%A8%E6%8C%82%E8%BD%BD%E6%96%B9%E5%BC%8F.png" alt=""></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Docker提供两种方式将数据从宿主机挂载到容器中：</span><br><span class="line">• volumes：Docker管理宿主机文件系统的一部分（/var/lib/docker/volumes）。保存数据的最佳方式。</span><br><span class="line">• bind mounts：将宿主机上的任意位置的文件或者目录挂载到容器中。</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 工作目录</span></span><br><span class="line">/var/lib/docker/volumes</span><br><span class="line"></span><br><span class="line"><span class="comment">### volume </span></span><br><span class="line">docker volume --help</span><br><span class="line"></span><br><span class="line"><span class="comment"># 管理卷：</span></span><br><span class="line">docker volume create nginx-vol</span><br><span class="line">docker volume ls</span><br><span class="line">docker volume inspect nginx-vol</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用卷创建一个容器：</span></span><br><span class="line">docker run -d --name=nginx-test --mount src=nginx-vol,dst=/usr/share/nginx/html nginx</span><br><span class="line">docker run -d --name=nginx-test -v nginx-vol:/usr/share/nginx/html nginx</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 清理：</span></span><br><span class="line">docker stop nginx-test</span><br><span class="line">docker rm nginx-test </span><br><span class="line">docker volume rm nginx-vol</span><br><span class="line"></span><br><span class="line">注意：</span><br><span class="line"><span class="number">1.</span> 如果没有指定卷，自动创建。</span><br><span class="line"></span><br><span class="line"><span class="comment">### bind mount</span></span><br><span class="line"><span class="comment"># 用卷创建一个容器：</span></span><br><span class="line">docker run -d --name=nginx-test --mount type=bind,src=/app/wwwroot,dst=/usr/share/nginx/html nginx</span><br><span class="line">docker run -d --name=nginx-test -v /app/wwwroot:/usr/share/nginx/html nginx</span><br><span class="line"><span class="comment"># 验证绑定：</span></span><br><span class="line">docker inspect nginx-test</span><br><span class="line"><span class="comment"># 清理：</span></span><br><span class="line">docker stop nginx-test </span><br><span class="line">docker rm nginx-test </span><br><span class="line"></span><br><span class="line">注意：</span><br><span class="line"><span class="number">1.</span> 如果源文件/目录没有存在如果挂载目标在容器中非空目录，则该目录现有内容将被隐藏。</span><br></pre></td></tr></table></figure>



<h2 id="四种网络模式"><a href="#四种网络模式" class="headerlink" title="四种网络模式"></a>四种网络模式</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">-bridege：--net=bridge，Docker启动创建一个docker0网桥，默认创建的容器页是添加到这个网桥中。</span><br><span class="line">-host：--net=host，容器不会获得一个独立的network namespace，而是与宿主机公用一个。容器除了网络都是隔离的。</span><br><span class="line">-none：--net=none，获取独立的network namespace，但部位容器进行任何网络配置，需要手动配置。</span><br><span class="line"></span><br><span class="line"><span class="comment"># 应用场景</span></span><br><span class="line">host：希望使用宿主机网络</span><br><span class="line">none：手动配置容器网络，对接公司IPAM</span><br><span class="line">container：希望容器与另一个容器在一个网络命名空间</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建网桥</span></span><br><span class="line">docker network create test</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看网络</span></span><br><span class="line">docker network ls</span><br></pre></td></tr></table></figure>

<h3 id="网络模型"><a href="#网络模型" class="headerlink" title="网络模型"></a>网络模型</h3><p><img src="https://gitee.com/wjxyzs/img/raw/master/img/docker%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B.png" alt=""></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">veth pair：成对出现的一种虚拟网络设备，数据从一端进，从另一端出。用于解决网络命名空间之间隔离。</span><br><span class="line">docker：网桥是一个二层网络设备，通过网桥可以将Linux支持的不同端口连接起撸，并实现类似交换机那样的多对多的通信。</span><br></pre></td></tr></table></figure>

<h3 id="容器网络访问原理"><a href="#容器网络访问原理" class="headerlink" title="容器网络访问原理"></a>容器网络访问原理</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 实验</span></span><br><span class="line">docker run -d -p <span class="number">88</span>:<span class="number">80</span> ngxin</span><br><span class="line">docker logs 容器名 -f</span><br></pre></td></tr></table></figure>

<h3 id="容器网络实现核心技术（iptables）"><a href="#容器网络实现核心技术（iptables）" class="headerlink" title="容器网络实现核心技术（iptables）"></a>容器网络实现核心技术（iptables）</h3><table>
<thead>
<tr>
<th align="center">表</th>
<th align="center">链</th>
</tr>
</thead>
<tbody><tr>
<td align="center">filter（过滤）</td>
<td align="center">INPUT，OUTPUT，FORWORD</td>
</tr>
<tr>
<td align="center">nat（地址转发）</td>
<td align="center">PREROUTING，POSTROUTING，OUTPUT</td>
</tr>
<tr>
<td align="center">mangle（拆包，修改，封装）</td>
<td align="center">INPUT，OUTPUT，FORWARD，PREROUTING，POSTROUTING</td>
</tr>
<tr>
<td align="center">raw（数据包状态跟踪）</td>
<td align="center">PREROUTING，OUTPUT</td>
</tr>
</tbody></table>
<img src="https://gitee.com/wjxyzs/img/raw/master/img/iptables%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B.png" style="zoom:80%;" />

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">INPUT链：接收的数据包是本机（入站）时，应用此链中的规则</span><br><span class="line">OUTPUT链：本机向外发送数据包（出站）时，应用此链中的规则</span><br><span class="line">FORWARD链：需要通过防火墙中转发送给其他地址的数据包（转发）时，应用此链中的规则</span><br><span class="line">PREROUTING链：在对数据包做路由选择之前，应用此链中的规则（DNAT）</span><br><span class="line">POSTROUTING链：在对数据包做路由选择之后，应用此链中的规则（SNAT）</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 外部访问容器</span></span><br><span class="line"><span class="comment"># DNAT：目标地址转换，修改数据包目标IP</span></span><br><span class="line">iptables -t nat -vnL DOCKER</span><br><span class="line">Chain DOCKER (<span class="number">2</span> references)</span><br><span class="line">pkts bytes target prot opt <span class="keyword">in</span> out source destination </span><br><span class="line"><span class="number">0</span> <span class="number">0</span> RETURN all -- docker0 * <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">0</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">0</span> </span><br><span class="line"><span class="number">1</span> <span class="number">52</span> DNAT tcp -- !docker0 * <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">0</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">0</span> tcp dpt:<span class="number">8080</span> to:<span class="number">172.17</span><span class="number">.0</span><span class="number">.2</span>:<span class="number">80</span></span><br><span class="line">            </span><br><span class="line"><span class="comment"># 容器访问外部</span></span><br><span class="line"><span class="comment"># SNAT：修改源IP为宿主机IP向外发出</span></span><br><span class="line">iptables -t nat -vnL POSTROUTING</span><br><span class="line">Chain POSTROUTING (policy ACCEPT <span class="number">0</span> packets, <span class="number">0</span> bytes)</span><br><span class="line">pkts bytes target prot opt <span class="keyword">in</span> out source destination </span><br><span class="line"><span class="number">0</span> <span class="number">0</span> MASQUERADE all -- * !docker0 <span class="number">172.17</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">16</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">0</span></span><br></pre></td></tr></table></figure>

<h3 id="容器多主机通信"><a href="#容器多主机通信" class="headerlink" title="容器多主机通信"></a>容器多主机通信</h3><img src="https://gitee.com/wjxyzs/img/raw/master/img/docker%E5%A4%9A%E4%B8%BB%E6%9C%BA%E9%80%9A%E4%BF%A1.png" style="zoom:80%;" />

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Flannel是CoreOS维护的一个网络组件，在每个主机上运行守护进程负责维护本地路由准发，Flannel使用ETCD来存储容器网络与主机之前的关系。</span><br><span class="line"></span><br><span class="line"><span class="comment"># 遇到的问题</span></span><br><span class="line">两台主机容器进行通信，会走FORWORD链执行DROP</span><br><span class="line"><span class="comment"># 解决方案</span></span><br><span class="line">iptables -P FORWARD ACCEPT</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>CI/CD</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>[Django Rest Framework]</title>
    <url>/2020/04/22/Django%20Rest%20Framework%E6%A1%86%E6%9E%B6/</url>
    <content><![CDATA[<h1 id="DRF框架"><a href="#DRF框架" class="headerlink" title="DRF框架"></a>DRF框架</h1><p>Django Rest Framework 是一个强大且灵活的工具包，用以构建Web API</p>
<p>为什么要使用Rest Framework</p>
<p>Django REST Framework可以在Django的基础上迅速实现API，并且自身还带有WEB的测试页面，可以方便的测试自己的API</p>
<p><a href="https://rogerxs80.github.io/2020/04/22/API%E8%A7%84%E8%8C%83%E4%B8%8Edrf%E5%AE%89%E8%A3%85/" target="_blank" rel="noopener">1.restful API规范与DRF安装</a></p>
<p><a href="https://rogerxs80.github.io/2020/04/22/%E5%BA%8F%E5%88%97%E5%8C%96%E5%99%A8-Serializer/" target="_blank" rel="noopener">2.序列化器-Serializer</a></p>
<p><a href="https://rogerxs80.github.io/2020/04/22/http%E8%AF%B7%E6%B1%82%E5%A4%84%E7%90%86/" target="_blank" rel="noopener">3.HTTP请求处理</a></p>
<p><a href="https://rogerxs80.github.io/2020/04/22/%E8%A7%86%E5%9B%BEView%E4%B8%8E%E8%B7%AF%E7%94%B1Router/" target="_blank" rel="noopener">4.视图View与路由Router</a></p>
<p><a href="https://rogerxs80.github.io/2020/04/22/DRF%E6%A1%86%E6%9E%B6%E4%B8%AD%E5%B8%B8%E7%94%A8%E7%9A%84%E7%BB%84%E4%BB%B6/" target="_blank" rel="noopener">5.DRF框架中常用的组件</a></p>
<p><a href="https://www.notion.so/xadmin-2047b48498d2461e9f91191fe07a8738" target="_blank" rel="noopener">6.xadmin</a></p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>Django Rest_Framework</tag>
      </tags>
  </entry>
  <entry>
    <title>[Go数据类型]</title>
    <url>/2021/04/21/Go%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<h1 id="Go数据类型"><a href="#Go数据类型" class="headerlink" title="Go数据类型"></a>Go数据类型</h1><h2 id="数据类型概览"><a href="#数据类型概览" class="headerlink" title="数据类型概览"></a>数据类型概览</h2><p>基础数据类型</p>
<table>
<thead>
<tr>
<th align="center">类型</th>
<th align="center">长度(字节)</th>
<th align="center">默认值</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">bool</td>
<td align="center">1</td>
<td align="center">false</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">byte</td>
<td align="center">1</td>
<td align="center">0</td>
<td align="center">uint8，取值范围[0,255]</td>
</tr>
<tr>
<td align="center">rune</td>
<td align="center">4</td>
<td align="center">0</td>
<td align="center">Unicode Code Point, int32</td>
</tr>
<tr>
<td align="center">int, uint</td>
<td align="center">4或8</td>
<td align="center">0</td>
<td align="center">32 或 64 位，取决于操作系统</td>
</tr>
<tr>
<td align="center">int8, uint8</td>
<td align="center">1</td>
<td align="center">0</td>
<td align="center">-128 ~ 127, 0 ~ 255</td>
</tr>
<tr>
<td align="center">int16, uint16</td>
<td align="center">2</td>
<td align="center">0</td>
<td align="center">-32768 ~ 32767, 0 ~ 65535</td>
</tr>
<tr>
<td align="center">int32, uint32</td>
<td align="center">4</td>
<td align="center">0</td>
<td align="center">-21亿~ 21亿, 0 ~ 42亿，rune是int32 的别名</td>
</tr>
<tr>
<td align="center">int64, uint64</td>
<td align="center">8</td>
<td align="center">0</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">float32</td>
<td align="center">4</td>
<td align="center">0.0</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">float64</td>
<td align="center">8</td>
<td align="center">0.0</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">complex64</td>
<td align="center">8</td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">complex128</td>
<td align="center">16</td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">uintptr</td>
<td align="center">4或8</td>
<td align="center"></td>
<td align="center">以存储指针的 uint32 或 uint64 整数</td>
</tr>
</tbody></table>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">fmt.Printf(<span class="string">"os arch %s, int size %d\n"</span>, runtime.GOARCH, strconv.IntSize) <span class="comment">//int是4字节还是8字节，取决于操作系统是32位还是64位</span></span><br><span class="line"><span class="keyword">var</span> a <span class="keyword">int</span> = <span class="number">5</span></span><br><span class="line"><span class="keyword">var</span> b <span class="keyword">int8</span> = <span class="number">5</span></span><br><span class="line"><span class="keyword">var</span> c <span class="keyword">int16</span> = <span class="number">5</span></span><br><span class="line"><span class="keyword">var</span> d <span class="keyword">int32</span> = <span class="number">5</span></span><br><span class="line"><span class="keyword">var</span> e <span class="keyword">int64</span> = <span class="number">5</span></span><br><span class="line"><span class="keyword">var</span> f <span class="keyword">uint</span> = <span class="number">5</span></span><br><span class="line"><span class="keyword">var</span> g <span class="keyword">uint8</span> = <span class="number">5</span></span><br><span class="line"><span class="keyword">var</span> h <span class="keyword">uint16</span> = <span class="number">5</span></span><br><span class="line"><span class="keyword">var</span> i <span class="keyword">uint32</span> = <span class="number">5</span></span><br><span class="line"><span class="keyword">var</span> j <span class="keyword">uint64</span> = <span class="number">5</span></span><br><span class="line">fmt.Printf(<span class="string">"a=%d, b=%d, c=%d, d=%d, e=%d, f=%d, g=%d, h=%d, i=%d, j=%d\n"</span>, a, b, c, d, e, f, g, h, i, j)</span><br><span class="line"><span class="keyword">var</span> k <span class="keyword">float32</span> = <span class="number">5</span></span><br><span class="line"><span class="keyword">var</span> l <span class="keyword">float64</span> = <span class="number">5</span></span><br><span class="line">fmt.Printf(<span class="string">"k=%f, l=%.2f\n"</span>, k, l) <span class="comment">//%.2f保留2位小数</span></span><br><span class="line"><span class="keyword">var</span> m <span class="keyword">complex128</span> = <span class="built_in">complex</span>(<span class="number">4</span>, <span class="number">7</span>)</span><br><span class="line"><span class="keyword">var</span> n <span class="keyword">complex64</span> = <span class="built_in">complex</span>(<span class="number">4</span>, <span class="number">7</span>)</span><br><span class="line">fmt.Printf(<span class="string">"type of m is %T, type of n is %T\n"</span>, m, n) <span class="comment">//%T输出变量类型</span></span><br><span class="line">fmt.Printf(<span class="string">"m=%v, n=%v\n"</span>, m, n)                       <span class="comment">//按值的本来值输出</span></span><br><span class="line">fmt.Printf(<span class="string">"m=%+v, n=%+v\n"</span>, m, n)                     <span class="comment">//在 %v 基础上，对结构体字段名和值进行展开</span></span><br><span class="line">fmt.Printf(<span class="string">"m=%#v, n=%#v\n"</span>, m, n)                     <span class="comment">//输出 Go 语言语法格式的值</span></span><br><span class="line">fmt.Printf(<span class="string">"m的实部%f, m的虚部%f\n"</span>, <span class="built_in">real</span>(m), <span class="built_in">imag</span>(m))</span><br><span class="line">fmt.Printf(<span class="string">"m的实部%e, m的虚部%g\n"</span>, <span class="built_in">real</span>(m), <span class="built_in">imag</span>(m)) <span class="comment">//%e科学计数法，%g根据实际情况采用%e或%f格式（以获得更简洁、准确的输出）</span></span><br><span class="line">o := <span class="literal">true</span>                                        <span class="comment">//等价于var o bool = true</span></span><br><span class="line">fmt.Printf(<span class="string">"o=%t\n"</span>, o)                          <span class="comment">//%t布尔变量</span></span><br><span class="line"><span class="keyword">var</span> pointer unsafe.Pointer = unsafe.Pointer(&amp;a)</span><br><span class="line"><span class="keyword">var</span> p <span class="keyword">uintptr</span> = <span class="keyword">uintptr</span>(pointer)</span><br><span class="line"><span class="keyword">var</span> ptr *<span class="keyword">int</span> = &amp;a</span><br><span class="line">fmt.Printf(<span class="string">"p=%x pointer=%p ptr=%p\n"</span>, p, pointer, ptr) <span class="comment">//%p输出地址，%x十六进制</span></span><br><span class="line"><span class="keyword">var</span> q <span class="keyword">byte</span> = <span class="number">100</span>                                        <span class="comment">//byte是uint，取值范围[0,255]</span></span><br><span class="line">fmt.Printf(<span class="string">"q=%d, binary of q is %b\n"</span>, q, q)           <span class="comment">//%b输出二进制</span></span><br><span class="line"><span class="keyword">var</span> r <span class="keyword">rune</span> = <span class="string">'☻'</span>                                        <span class="comment">//rune实际上是int32，即可以表示2147483647种字符，包括所有汉字和各种特殊符号</span></span><br><span class="line">fmt.Printf(<span class="string">"r=%d, r=%U\n"</span>, r, r)                        <span class="comment">//%U Unicode 字符</span></span><br><span class="line"><span class="keyword">var</span> s <span class="keyword">string</span> = <span class="string">"I'm 张朝阳"</span></span><br><span class="line">fmt.Printf(<span class="string">"s=%s\n"</span>, s)</span><br><span class="line"><span class="keyword">var</span> t error = errors.New(<span class="string">"my error"</span>)</span><br><span class="line">fmt.Printf(<span class="string">"error is %v\n"</span>, t)</span><br><span class="line">fmt.Printf(<span class="string">"error is %+v\n"</span>, t) <span class="comment">//在 %v 基础上，对结构体字段名和值进行展开</span></span><br><span class="line">fmt.Printf(<span class="string">"error is %#v\n"</span>, t) <span class="comment">//输出 Go 语言语法格式的值</span></span><br></pre></td></tr></table></figure>

<p>数值型变量的默认值是0，字符串的默认值是空字符串，布尔型变量的默认值是false，引用类型、函数、指针、接口的默认值是nil。数组的默认值取每个元素对应类型的默认值，结构体的默认值取每个成员变量对应类型的默认值。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a <span class="keyword">int</span></span><br><span class="line"><span class="keyword">var</span> b <span class="keyword">byte</span></span><br><span class="line"><span class="keyword">var</span> f <span class="keyword">float32</span></span><br><span class="line"><span class="keyword">var</span> t <span class="keyword">bool</span></span><br><span class="line"><span class="keyword">var</span> s <span class="keyword">string</span></span><br><span class="line"><span class="keyword">var</span> r <span class="keyword">rune</span></span><br><span class="line"><span class="keyword">var</span> arr [<span class="number">3</span>]<span class="keyword">int</span></span><br><span class="line"><span class="keyword">var</span> slc []<span class="keyword">int</span></span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">"default value of int %d\n"</span>, a)</span><br><span class="line">fmt.Printf(<span class="string">"default value of byte %d\n"</span>, b)</span><br><span class="line">fmt.Printf(<span class="string">"default value of float %.2f\n"</span>, f)</span><br><span class="line">fmt.Printf(<span class="string">"default value of bool %t\n"</span>, t)</span><br><span class="line">fmt.Printf(<span class="string">"default value of string [%s]\n"</span>, s)</span><br><span class="line">fmt.Printf(<span class="string">"default value of rune %d, [%c]\n"</span>, r, r)</span><br><span class="line">fmt.Printf(<span class="string">"default int array is %v\n"</span>, arr) <span class="comment">//取每个元素对应类型的默认值</span></span><br><span class="line">fmt.Printf(<span class="string">"default slice is nil %t\n"</span>, slc == <span class="literal">nil</span>)</span><br></pre></td></tr></table></figure>

<p>复合数据类型</p>
<table>
<thead>
<tr>
<th align="center">类型</th>
<th align="center">默认值</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">array</td>
<td align="center">取每个元素对应类型的默认值</td>
<td align="center">值类型</td>
</tr>
<tr>
<td align="center">struct</td>
<td align="center">取每个成员变量对应类型的默认值</td>
<td align="center">值类型</td>
</tr>
<tr>
<td align="center">string</td>
<td align="center">“”</td>
<td align="center">UTF-8 字符串</td>
</tr>
<tr>
<td align="center">slice</td>
<td align="center">nil</td>
<td align="center">引用类型</td>
</tr>
<tr>
<td align="center">map</td>
<td align="center">nil</td>
<td align="center">引用类型</td>
</tr>
<tr>
<td align="center">channel</td>
<td align="center">nil</td>
<td align="center">引用类型</td>
</tr>
<tr>
<td align="center">interface</td>
<td align="center">nil</td>
<td align="center">接口</td>
</tr>
<tr>
<td align="center">function</td>
<td align="center">nil</td>
<td align="center">函数</td>
</tr>
</tbody></table>
<h2 id="自定义类型"><a href="#自定义类型" class="headerlink" title="自定义类型"></a>自定义类型</h2><p>类型别名</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="keyword">byte</span> = <span class="keyword">uint8</span></span><br><span class="line"><span class="keyword">type</span> <span class="keyword">rune</span> = <span class="keyword">int32</span></span><br><span class="line"><span class="keyword">type</span> semaphore = <span class="keyword">uint8</span></span><br></pre></td></tr></table></figure>

<p>自定义类型</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> user <span class="keyword">struct</span> &#123;name <span class="keyword">string</span>;age <span class="keyword">int</span>&#125;  <span class="comment">//用分号把多行代码隔开</span></span><br><span class="line"><span class="keyword">type</span> signal <span class="keyword">uint8</span></span><br><span class="line"><span class="keyword">type</span> ms <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span></span><br><span class="line"><span class="keyword">type</span> add <span class="function"><span class="keyword">func</span><span class="params">(a, b <span class="keyword">int</span>)</span> <span class="title">int</span></span></span><br></pre></td></tr></table></figure>

<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>数组是块连续的内存空间，在声明的时候必须指定长度，且长度不能改变。所以数组在声明的时候就可以把内存空间分配好，并赋上默认值，即完成了初始化。  </p>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/array.png" alt="avatar">  </p>
<p>一维数组初始化</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1 [<span class="number">5</span>]<span class="keyword">int</span> = [<span class="number">5</span>]<span class="keyword">int</span>&#123;&#125; <span class="comment">//数组必须指定长度和类型，且长度和类型指定后不可改变</span></span><br><span class="line"><span class="keyword">var</span> arr2 = [<span class="number">5</span>]<span class="keyword">int</span>&#123;&#125;</span><br><span class="line"><span class="keyword">var</span> arr3 = [<span class="number">5</span>]<span class="keyword">int</span>&#123;<span class="number">3</span>, <span class="number">2</span>&#125; <span class="comment">//给前2个元素赋值</span></span><br><span class="line"><span class="keyword">var</span> arr4 = [<span class="number">5</span>]<span class="keyword">int</span>&#123;<span class="number">2</span>: <span class="number">15</span>, <span class="number">4</span>: <span class="number">30</span>&#125; <span class="comment">//指定index赋值</span></span><br><span class="line"><span class="keyword">var</span> arr5 = [...]<span class="keyword">int</span>&#123;<span class="number">3</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>&#125;<span class="comment">//根据&#123;&#125;里元素的个数推断出数组的长度</span></span><br><span class="line"><span class="keyword">var</span> arr6 = [...]<span class="keyword">struct</span> &#123;</span><br><span class="line">    name <span class="keyword">string</span></span><br><span class="line">    age <span class="keyword">int</span></span><br><span class="line">&#125;&#123;&#123;<span class="string">"Tom"</span>, <span class="number">18</span>&#125;, &#123;<span class="string">"Jim"</span>, <span class="number">20</span>&#125;&#125; <span class="comment">//数组的元素类型由匿名结构体给定</span></span><br></pre></td></tr></table></figure>

<p>二维数组初始化</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//5行3列，只给前2行赋值，且前2行的所有列还没有赋满</span></span><br><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">5</span>][<span class="number">3</span>]<span class="keyword">int</span>&#123;&#123;<span class="number">1</span>&#125;, &#123;<span class="number">2</span>, <span class="number">3</span>&#125;&#125;</span><br><span class="line"><span class="comment">//第1维可以用...推测，第2维不能用...</span></span><br><span class="line"><span class="keyword">var</span> arr2 = [...][<span class="number">3</span>]<span class="keyword">int</span>&#123;&#123;<span class="number">1</span>&#125;, &#123;<span class="number">2</span>, <span class="number">3</span>&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>访问数组里的元素</p>
<ul>
<li>通过index访问<ul>
<li>首元素 arr[0]</li>
<li>末元素 arr[len(arr)-1]</li>
</ul>
</li>
<li>访问二维数组里的元素<ul>
<li>位于第三行第四列的元素 arr[2][3]</li>
</ul>
</li>
</ul>
<p>遍历数组</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//遍历数组里的元素</span></span><br><span class="line"><span class="keyword">for</span> i, ele := <span class="keyword">range</span> arr &#123;</span><br><span class="line">    fmt.Printf(<span class="string">"index=%d, element=%d\n"</span>, i, ele)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//或者这样遍历数组</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(arr); i++ &#123; <span class="comment">//len(arr)获取数组的长度</span></span><br><span class="line">    fmt.Printf(<span class="string">"index=%d, element=%d\n"</span>, i, arr[i])</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//遍历二维数组</span></span><br><span class="line"><span class="keyword">for</span> row, array := <span class="keyword">range</span> arr &#123; <span class="comment">//先取出某一行</span></span><br><span class="line">    <span class="keyword">for</span> col, ele := <span class="keyword">range</span> array &#123; <span class="comment">//再遍历这一行</span></span><br><span class="line">        fmt.Printf(<span class="string">"arr[%d][%d]=%d\n"</span>, row, col, ele)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>&#8195;&#8195;通过for range遍历数组时取得的是数组里每一个元素的拷贝。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">arr := [...]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line"><span class="keyword">for</span> i, ele := <span class="keyword">range</span> arr &#123; <span class="comment">//ele是arr中元素的拷贝</span></span><br><span class="line">    arr[i] += <span class="number">8</span> <span class="comment">//修改arr里的元素，不影响ele</span></span><br><span class="line">    fmt.Printf(<span class="string">"%d %d %d\n"</span>, i, arr[i], ele)</span><br><span class="line">    ele += <span class="number">1</span> <span class="comment">//修改ele不影响arr</span></span><br><span class="line">    fmt.Printf(<span class="string">"%d %d %d\n"</span>, i, arr[i], ele)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(arr); i++ &#123;</span><br><span class="line">    fmt.Printf(<span class="string">"%d %d\n"</span>, i, arr[i])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在数组上调用cap()函数表示capacity容量，即给数组分配的内存空间可以容纳多少个元素；len()函数代表length长度，即目前数组里有几个元素。由于数组初始化之后长度不会改变，不需要给它预留内存空间，所以len(arr)==cap(arr)。对于多维数组，其cap和len指第一维的长度。<br>数组的长度和类型都是数组类型的一部分，函数传递数组类型时这两部分都必须吻合。<strong>go语言没有按引用传参，全都是按值传参，即传递数组实际上传的是数组的拷贝，当数组的长度很大时，仅传参开销都很大。</strong>如果想修改函数外部的数组，就把它的指针（数组在内存里的地址）传进来。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//参数必须是长度为5的int型数组（注意长度必须是5）</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">update_array1</span><span class="params">(arr [5]<span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">	fmt.Printf(<span class="string">"array in function, address is %p\n"</span>, &amp;arr[<span class="number">0</span>])</span><br><span class="line">	arr[<span class="number">0</span>] = <span class="number">888</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">update_array2</span><span class="params">(arr *[5]<span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">	fmt.Printf(<span class="string">"array in function, address is %p\n"</span>, &amp;((*arr)[<span class="number">0</span>]))</span><br><span class="line">	arr[<span class="number">0</span>] = <span class="number">888</span> <span class="comment">//因为传的是数组指针，所以直接在原来的内存空间上进行修改</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h2><p>&#8195;&#8195;切片是一个结构体，包含三个成员变量，array指向一块连续的内存空间，cap表示这块内存的大小，len表示目前该内存里存储了多少元素。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> slice <span class="keyword">struct</span> &#123; </span><br><span class="line">    array unsafe.Pointer </span><br><span class="line">    <span class="built_in">len</span> <span class="keyword">int</span> </span><br><span class="line">    <span class="built_in">cap</span> <span class="keyword">int</span> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/slice.png" alt="avatar">   </p>
<p>切片的初始化</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> s []<span class="keyword">int</span> <span class="comment">//切片声明，len=cap=0</span></span><br><span class="line">s = []<span class="keyword">int</span>&#123;&#125; <span class="comment">//初始化，len=cap=0</span></span><br><span class="line">s = <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">3</span>) <span class="comment">//初始化，len=cap=3</span></span><br><span class="line">s = <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">3</span>, <span class="number">5</span>) <span class="comment">//初始化，len=3，cap=5</span></span><br><span class="line">s = []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125; <span class="comment">//初始化，len=cap=5</span></span><br><span class="line">s2d := [][]<span class="keyword">int</span>&#123;</span><br><span class="line">    &#123;<span class="number">1</span>&#125;,&#123;<span class="number">2</span>, <span class="number">3</span>&#125;, <span class="comment">//二维数组各行的列数相等，但二维切片各行的len可以不等</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>切片相对于数组最大的特点就是可以追加元素，可以自动扩容。追加的元素放到预留的内存空间里，同时len加1。如果预留空间已用完，则会重新申请一块更大的内存空间，capacity大约变成之前的2倍(cap&lt;1024)或1.25倍(cap&gt;1024)。把原内存空间的数据拷贝过来，在新内存空间上执行append操作。  </p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">s := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">3</span>, <span class="number">5</span>)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">3</span>; i++ &#123;</span><br><span class="line">    s[i] = i + <span class="number">1</span></span><br><span class="line">&#125; <span class="comment">//s=[1,2,3]</span></span><br><span class="line">fmt.Printf(<span class="string">"s[0] address %p, s=%v\n"</span>, &amp;s[<span class="number">0</span>], s)</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">capacity还够用，直接把追加的元素放到预留的内存空间上</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">s = <span class="built_in">append</span>(s, <span class="number">4</span>, <span class="number">5</span>) <span class="comment">//可以一次append多个元素</span></span><br><span class="line">fmt.Printf(<span class="string">"s[0] address %p, s=%v\n"</span>, &amp;s[<span class="number">0</span>], s)</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">capacity不够用了，得申请一片新的内存，把老数据先拷贝过来，在新内存上执行append操作</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">s = <span class="built_in">append</span>(s, <span class="number">6</span>)</span><br><span class="line">fmt.Printf(<span class="string">"s[0] address %p, s=%v\n"</span>, &amp;s[<span class="number">0</span>], s)</span><br></pre></td></tr></table></figure>

<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//探究capacity扩容规律</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">expansion</span><span class="params">()</span></span> &#123;</span><br><span class="line">	s := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">0</span>, <span class="number">3</span>)</span><br><span class="line">	prevCap := <span class="built_in">cap</span>(s)</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">100</span>; i++ &#123;</span><br><span class="line">		s = <span class="built_in">append</span>(s, i)</span><br><span class="line">		currCap := <span class="built_in">cap</span>(s)</span><br><span class="line">		<span class="keyword">if</span> currCap &gt; prevCap &#123;</span><br><span class="line">			<span class="comment">//每次扩容都是扩到原先的2倍</span></span><br><span class="line">			fmt.Printf(<span class="string">"capacity从%d变成%d\n"</span>, prevCap, currCap)</span><br><span class="line">			prevCap = currCap</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">arr := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">3</span>, <span class="number">5</span>)</span><br><span class="line">brr := <span class="built_in">append</span>(arr, <span class="number">8</span>) <span class="comment">//arr和brr共享底层数组，但它们的len不同</span></span><br></pre></td></tr></table></figure>

<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/append.png" alt="append"></p>
<p>&#8195;&#8195;通过指定起止下标，可以从大切片中截取一个子切片。  </p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">s := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">3</span>, <span class="number">5</span>)	<span class="comment">//len=3, cap=5</span></span><br><span class="line">sub_slice = s[<span class="number">1</span>:<span class="number">3</span>]		<span class="comment">//len=2, cap=4</span></span><br></pre></td></tr></table></figure>

<p>&#8195;&#8195;刚开始，子切片和母切片共享底层的内存空间，修改子切片会反映到母切片上，在子切片上执行append会把新元素放到母切片预留的内存空间上。当子切片不断执行append，耗完了母切片预留的内存空间，子切片跟母切片就会发生内存分离，此后两个切片没有任何关系。  </p>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/sub_slice.png" alt="avatar"> </p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sub_slice</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	截取一部分，创造子切片，此时子切片与母切片(或母数组)共享底层内存空间，母切片的capacity子切片可能直接用</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	s := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">3</span>, <span class="number">5</span>)</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">3</span>; i++ &#123;</span><br><span class="line">		s[i] = i + <span class="number">1</span></span><br><span class="line">	&#125; <span class="comment">//s=[1,2,3]</span></span><br><span class="line">	fmt.Printf(<span class="string">"s[1] address %p\n"</span>, &amp;s[<span class="number">1</span>])</span><br><span class="line">	sub_slice := s[<span class="number">1</span>:<span class="number">3</span>] <span class="comment">//从切片创造子切片，len=2，cap=4</span></span><br><span class="line">	fmt.Printf(<span class="string">"len %d cap %d\n"</span>, <span class="built_in">len</span>(sub_slice), <span class="built_in">cap</span>(sub_slice))</span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	母切片的capacity还允许子切片执行append操作</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	sub_slice = <span class="built_in">append</span>(sub_slice, <span class="number">6</span>, <span class="number">7</span>) <span class="comment">//可以一次append多个元素</span></span><br><span class="line">	sub_slice[<span class="number">0</span>] = <span class="number">8</span></span><br><span class="line">	fmt.Printf(<span class="string">"s=%v, sub_slice=%v, s[1] address %p, sub_slice[0] address %p\n"</span>, s, sub_slice, &amp;s[<span class="number">1</span>], &amp;sub_slice[<span class="number">0</span>])</span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	母切片的capacity用完了，子切片再执行append就得申请一片新的内存，把老数据先拷贝过来，在新内存上执行append操作。此时的append操作跟母切片没有任何关系</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	sub_slice = <span class="built_in">append</span>(sub_slice, <span class="number">8</span>)</span><br><span class="line">	sub_slice[<span class="number">0</span>] = <span class="number">9</span></span><br><span class="line">	fmt.Printf(<span class="string">"s=%v, sub_slice=%v, s[1] address %p, sub_slice[0] address %p\n"</span>, s, sub_slice, &amp;s[<span class="number">1</span>], &amp;sub_slice[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">	arr := [<span class="number">5</span>]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">	fmt.Printf(<span class="string">"arr[1] address %p\n"</span>, &amp;arr[<span class="number">1</span>])</span><br><span class="line">	sub_slice = arr[<span class="number">1</span>:<span class="number">3</span>] <span class="comment">//从数组创造子切片，len=cap=2</span></span><br><span class="line">	fmt.Printf(<span class="string">"len %d cap %d\n"</span>, <span class="built_in">len</span>(sub_slice), <span class="built_in">cap</span>(sub_slice))</span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	母数组的capacity还允许子切片执行append操作</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	sub_slice = <span class="built_in">append</span>(sub_slice, <span class="number">6</span>, <span class="number">7</span>) <span class="comment">//可以一次append多个元素</span></span><br><span class="line">	sub_slice[<span class="number">0</span>] = <span class="number">8</span></span><br><span class="line">	fmt.Printf(<span class="string">"arr=%v, sub_slice=%v, arr[1] address %p, sub_slice[0] address %p\n"</span>, arr, sub_slice, &amp;arr[<span class="number">1</span>], &amp;sub_slice[<span class="number">0</span>])</span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	母数组的capacity用完了，子切片再执行append就得申请一片新的内存，把老数据先拷贝过来，在新内存上执行append操作。此时的append操作跟母数组没有任何关系</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	sub_slice = <span class="built_in">append</span>(sub_slice, <span class="number">8</span>)</span><br><span class="line">	sub_slice[<span class="number">0</span>] = <span class="number">9</span></span><br><span class="line">	fmt.Printf(<span class="string">"arr=%v, sub_slice=%v, arr[1] address %p, sub_slice[0] address %p\n"</span>, arr, sub_slice, &amp;arr[<span class="number">1</span>], &amp;sub_slice[<span class="number">0</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>&#8195;&#8195;go语言函数传参，传的都是值，即传切片会把切片的{arrayPointer, len, cap}这3个字段拷贝一份传进来。由于传的是底层数组的指针，所以可以直接修改底层数组里的元素。  </p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">update_slice</span><span class="params">(s []<span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">	s[<span class="number">0</span>] = <span class="number">888</span></span><br><span class="line">&#125;</span><br><span class="line">s := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">update_slice(s)</span><br><span class="line">fmt.Printf(<span class="string">"s=%v\n"</span>, s)</span><br></pre></td></tr></table></figure>

<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">s := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">fmt.Printf(<span class="string">"address of slice %p, address of array %p %p\n"</span>, &amp;s, &amp;s[<span class="number">0</span>], s)</span><br><span class="line">s = <span class="built_in">append</span>(s, <span class="number">4</span>)</span><br><span class="line">fmt.Printf(<span class="string">"address of slice %p, address of array %p %p\n"</span>, &amp;s, &amp;s[<span class="number">0</span>], s)</span><br><span class="line">s = <span class="built_in">append</span>(s, <span class="number">4</span>)</span><br><span class="line">fmt.Printf(<span class="string">"address of slice %p, address of array %p %p\n"</span>, &amp;s, &amp;s[<span class="number">0</span>], s)</span><br></pre></td></tr></table></figure>

<p>获取切片的地址用&amp;s；获取切片底层数组的地址用&amp;s[0]，或直接把s当地址打印。  </p>
<h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>字符串里可以包含任意Unicode字符。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">s := <span class="string">" My name is 张朝阳☻"</span></span><br></pre></td></tr></table></figure>

<p>字符串里可以包含转义字符。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">s := <span class="string">"He say:\"I'm fine.\" \n\\Thank\tyou.\\"</span></span><br></pre></td></tr></table></figure>

<p>字符串也可以用反引号来定义，反引号里的转义字符无效。反引号里的内容原封不动地输出，包括空白符和换行符。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">s := <span class="string">`here is first line. </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  there is third line.</span></span><br><span class="line"><span class="string">`</span></span><br></pre></td></tr></table></figure>

<p>字符串常用操作</p>
<table>
<thead>
<tr>
<th align="center">方法</th>
<th align="center">介绍</th>
</tr>
</thead>
<tbody><tr>
<td align="center">len(str)</td>
<td align="center">求长度</td>
</tr>
<tr>
<td align="center">strings.Split</td>
<td align="center">分割</td>
</tr>
<tr>
<td align="center">strings.Contains</td>
<td align="center">判断是否包含</td>
</tr>
<tr>
<td align="center">strings.HasPrefix,strings.HasSuffix</td>
<td align="center">前缀/后缀判断</td>
</tr>
<tr>
<td align="center">strings.Index(),strings.LastIndex()</td>
<td align="center">子串出现的位置</td>
</tr>
</tbody></table>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">s := <span class="string">"born to win, born to die."</span></span><br><span class="line">fmt.Printf(<span class="string">"sentence length %d\n"</span>, <span class="built_in">len</span>(s))</span><br><span class="line">fmt.Printf(<span class="string">"\"s\" length %d\n"</span>, <span class="built_in">len</span>(<span class="string">"s"</span>))  <span class="comment">//英文字母的长度为1</span></span><br><span class="line">fmt.Printf(<span class="string">"\"中\"  length %d\n"</span>, <span class="built_in">len</span>(<span class="string">"中"</span>)) <span class="comment">//一个汉字占3个长度</span></span><br><span class="line">arr := strings.Split(s, <span class="string">" "</span>)</span><br><span class="line">fmt.Printf(<span class="string">"arr[3]=%s\n"</span>, arr[<span class="number">3</span>])</span><br><span class="line">fmt.Printf(<span class="string">"contain die %t\n"</span>, strings.Contains(s, <span class="string">"die"</span>))          <span class="comment">//包含子串</span></span><br><span class="line">fmt.Printf(<span class="string">"contain wine %t\n"</span>, strings.Contains(s, <span class="string">"wine"</span>))        <span class="comment">//包含子串</span></span><br><span class="line">fmt.Printf(<span class="string">"first index of born %d\n"</span>, strings.Index(s, <span class="string">"born"</span>))    <span class="comment">//寻找子串第一次出现的位置</span></span><br><span class="line">fmt.Printf(<span class="string">"last index of born %d\n"</span>, strings.LastIndex(s, <span class="string">"born"</span>)) <span class="comment">//寻找子串最后一次出现的位置</span></span><br><span class="line">fmt.Printf(<span class="string">"begin with born %t\n"</span>, strings.HasPrefix(s, <span class="string">"born"</span>))    <span class="comment">//以xxx开头</span></span><br><span class="line">fmt.Printf(<span class="string">"end with die. %t\n"</span>, strings.HasSuffix(s, <span class="string">"die."</span>))      <span class="comment">//以xxx结尾</span></span><br></pre></td></tr></table></figure>

<p>把多个字符串拼接成一个长的字符串有多种方式。</p>
<ol>
<li>加号连接。</li>
<li>func fmt.Sprintf(format string, a …interface{}) string</li>
<li>func strings.Join(elems []string, sep string) string</li>
<li>当有大量的string需要拼接时，用strings.Builder效率最高</li>
</ol>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">s1 := <span class="string">"Hello"</span></span><br><span class="line">s2 := <span class="string">"how"</span></span><br><span class="line">s3 := <span class="string">"are"</span></span><br><span class="line">s4 := <span class="string">"you"</span></span><br><span class="line">merged := s1 + <span class="string">" "</span> + s2 + <span class="string">" "</span> + s3 + <span class="string">" "</span> + s4</span><br><span class="line">fmt.Println(merged)</span><br><span class="line">merged = fmt.Sprintf(<span class="string">"%s %s %s %s"</span>, s1, s2, s3, s4)</span><br><span class="line">fmt.Println(merged)</span><br><span class="line">merged = strings.Join([]<span class="keyword">string</span>&#123;s1, s2, s3, s4&#125;, <span class="string">" "</span>)</span><br><span class="line">fmt.Println(merged)</span><br><span class="line"><span class="comment">//当有大量的string需要拼接时，用strings.Builder效率最高</span></span><br><span class="line">sb := strings.Builder&#123;&#125;</span><br><span class="line">sb.WriteString(s1)</span><br><span class="line">sb.WriteString(<span class="string">" "</span>)</span><br><span class="line">sb.WriteString(s2)</span><br><span class="line">sb.WriteString(<span class="string">" "</span>)</span><br><span class="line">sb.WriteString(s3)</span><br><span class="line">sb.WriteString(<span class="string">" "</span>)</span><br><span class="line">sb.WriteString(s4)</span><br><span class="line">sb.WriteString(<span class="string">" "</span>)</span><br><span class="line">merged = sb.String()</span><br><span class="line">fmt.Println(merged)</span><br></pre></td></tr></table></figure>

<p>string中每个元素叫“字符”，字符有两种：</p>
<ol>
<li>byte：1个字节， 代表ASCII码的一个字符。</li>
<li>rune：4个字节，代表一个UTF-8字符，一个汉字可用一个rune表示。</li>
</ol>
<p>string是常量，不能修改其中的字符。<br>string可以转换为[]byte或[]rune类型。<br>string底层是byte数组，string的长度就是该byte数组的长度， UTF-8编码下一个汉字占3个byte，即一个汉字占3个长度。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">s1 := <span class="string">"My name is 张朝阳"</span></span><br><span class="line">arr := []<span class="keyword">byte</span>(s1)</span><br><span class="line">brr := []<span class="keyword">rune</span>(s1)</span><br><span class="line">fmt.Printf(<span class="string">"last byte %d\n"</span>, arr[<span class="built_in">len</span>(arr)<span class="number">-1</span>]) <span class="comment">//string可以转换为[]byte或[]rune类型</span></span><br><span class="line">fmt.Printf(<span class="string">"last byte %c\n"</span>, arr[<span class="built_in">len</span>(arr)<span class="number">-1</span>]) <span class="comment">//byte或rune可以转为string</span></span><br><span class="line">fmt.Printf(<span class="string">"last rune %d\n"</span>, brr[<span class="built_in">len</span>(brr)<span class="number">-1</span>])</span><br><span class="line">fmt.Printf(<span class="string">"last rune %c\n"</span>, brr[<span class="built_in">len</span>(brr)<span class="number">-1</span>])</span><br><span class="line">L := <span class="built_in">len</span>(s1)</span><br><span class="line">fmt.Printf(<span class="string">"string len %d byte array len %d rune array len %d\n"</span>, L, <span class="built_in">len</span>(arr), <span class="built_in">len</span>(brr))</span><br><span class="line"><span class="keyword">for</span> _, ele := <span class="keyword">range</span> s1 &#123;</span><br><span class="line">    fmt.Printf(<span class="string">"%c "</span>, ele) <span class="comment">//string中的每个元素是字符</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println()</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; L; i++ &#123;</span><br><span class="line">    fmt.Printf(<span class="string">"%c "</span>, s1[i]) <span class="comment">//[i]前面应该出现数组或切片，这里自动把string转成了[]byte（而不是[]rune）</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h2><p>强制类型转换的基本方法就是把目标类型放在变量前面，把变量括起来。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> i <span class="keyword">int</span> = <span class="number">9</span></span><br><span class="line"><span class="keyword">var</span> by <span class="keyword">byte</span> = <span class="keyword">byte</span>(i)		<span class="comment">//int转为byte</span></span><br><span class="line">i = <span class="keyword">int</span>(by)		<span class="comment">//byte转为int</span></span><br></pre></td></tr></table></figure>

<ul>
<li>低精度向高精度转换没问题，高精度向低精度转换会丢失位数。</li>
<li>无符号向有符号转换，最高位是符号位。</li>
<li>byte和int可以互相转换。</li>
<li>float和int可以互相转换，小数位会丢失。</li>
<li>bool和int不能相互转换。</li>
<li>不同长度的int或float之间可以相互转换。</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//高精度向低精度转换，数字很小时这种转换没问题</span></span><br><span class="line"><span class="keyword">var</span> ua <span class="keyword">uint64</span> = <span class="number">1</span></span><br><span class="line">i8 := <span class="keyword">int8</span>(ua)</span><br><span class="line">fmt.Printf(<span class="string">"i8=%d\n"</span>, i8)</span><br><span class="line"></span><br><span class="line"><span class="comment">//最高位的1变成了符号位</span></span><br><span class="line">ua = <span class="keyword">uint64</span>(math.MaxUint64)</span><br><span class="line">i64 := <span class="keyword">int64</span>(ua)</span><br><span class="line">fmt.Printf(<span class="string">"i64=%d\n"</span>, i64)</span><br><span class="line"></span><br><span class="line"><span class="comment">//位数丢失</span></span><br><span class="line">ui32 := <span class="keyword">uint32</span>(ua)</span><br><span class="line">fmt.Printf(<span class="string">"ui32=%d\n"</span>, ui32)</span><br><span class="line"></span><br><span class="line"><span class="comment">//单个字符可以转为int</span></span><br><span class="line"><span class="keyword">var</span> i <span class="keyword">int</span> = <span class="keyword">int</span>(<span class="string">'a'</span>)</span><br><span class="line">fmt.Printf(<span class="string">"i=%d\n"</span>, i)</span><br><span class="line"></span><br><span class="line"><span class="comment">//bool和int不能相互转换</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//byte和int可以互相转换</span></span><br><span class="line"><span class="keyword">var</span> by <span class="keyword">byte</span> = <span class="keyword">byte</span>(i)</span><br><span class="line">i = <span class="keyword">int</span>(by)</span><br><span class="line">fmt.Printf(<span class="string">"i=%d\n"</span>, i)</span><br><span class="line"></span><br><span class="line"><span class="comment">//float和int可以互相转换，小数位会丢失</span></span><br><span class="line"><span class="keyword">var</span> ft <span class="keyword">float32</span> = <span class="keyword">float32</span>(i)</span><br><span class="line">i = <span class="keyword">int</span>(ft)</span><br><span class="line">fmt.Printf(<span class="string">"i=%d\n"</span>, i)</span><br></pre></td></tr></table></figure>

<p>string和其他数据类型互转。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> err error</span><br><span class="line"><span class="keyword">var</span> i <span class="keyword">int</span> = <span class="number">8</span></span><br><span class="line"><span class="keyword">var</span> i64 <span class="keyword">int64</span> = <span class="keyword">int64</span>(i)</span><br><span class="line"><span class="comment">//int转string</span></span><br><span class="line"><span class="keyword">var</span> s <span class="keyword">string</span> = strconv.Itoa(i) <span class="comment">//内部调用FormatInt</span></span><br><span class="line">s = strconv.FormatInt(i64, <span class="number">10</span>)</span><br><span class="line"><span class="comment">//string转int</span></span><br><span class="line">i, err = strconv.Atoi(s)</span><br><span class="line"><span class="comment">//string转int64</span></span><br><span class="line">i64, err = strconv.ParseInt(s, <span class="number">10</span>, <span class="number">64</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//float转string</span></span><br><span class="line"><span class="keyword">var</span> f <span class="keyword">float64</span> = <span class="number">8.123456789</span></span><br><span class="line">s = strconv.FormatFloat(f, <span class="string">'f'</span>, <span class="number">2</span>, <span class="number">64</span>) <span class="comment">//保留2位小数</span></span><br><span class="line">fmt.Println(s)</span><br><span class="line"><span class="comment">//string转float</span></span><br><span class="line">f, err = strconv.ParseFloat(s, <span class="number">64</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//string&lt;--&gt;[]byte</span></span><br><span class="line"><span class="keyword">var</span> arr []<span class="keyword">byte</span> = []<span class="keyword">byte</span>(s)</span><br><span class="line">s = <span class="keyword">string</span>(arr)</span><br><span class="line"></span><br><span class="line"><span class="comment">//string&lt;--&gt;[]rune</span></span><br><span class="line"><span class="keyword">var</span> brr []<span class="keyword">rune</span> = []<span class="keyword">rune</span>(s)</span><br><span class="line">s = <span class="keyword">string</span>(brr)</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">"err %v\n"</span>, err)</span><br></pre></td></tr></table></figure>

<h2 id="map"><a href="#map" class="headerlink" title="map"></a>map</h2><p>go map的底层实现是hash table，根据key查找value的时间复杂度是O(1)。  </p>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/map.png" alt="avatar">   </p>
<p>map的初始化</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> m <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span> <span class="comment">//声明map，指定key和value的数据类型</span></span><br><span class="line">m = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>) <span class="comment">//初始化，容量为0</span></span><br><span class="line">m = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>, <span class="number">200</span>) <span class="comment">//初始化，容量为200。强烈建议初始化时给一个合适的容量，减少扩容的概率</span></span><br><span class="line">m = <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>&#123;<span class="string">"语文"</span>: <span class="number">0</span>, <span class="string">"数学"</span>: <span class="number">39</span>&#125; <span class="comment">//初始化时直接赋值</span></span><br></pre></td></tr></table></figure>

<p>添加和删除key</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">m[<span class="string">"英语"</span>] = <span class="number">59</span> <span class="comment">//往map里添加key-value对</span></span><br><span class="line">m [<span class="string">"英语"</span>] = <span class="number">70</span> <span class="comment">//会覆盖之前的值</span></span><br><span class="line"><span class="built_in">delete</span>(m, <span class="string">"数学"</span>) <span class="comment">//从map里删除key-value对</span></span><br></pre></td></tr></table></figure>

<p>len(m)获取map的长度，go不支持对map上执行cap函数。<br>读取key对应的value时，如果key不存在，则返回value类型的默认值，所以强烈建议先判断key是否存在。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> value, exists := m[<span class="string">"语文"</span>]; exists &#123;</span><br><span class="line">    fmt.Println(value)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">"map里不存在[语文]这个key"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>遍历map</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//遍历map</span></span><br><span class="line"><span class="keyword">for</span> key, value := <span class="keyword">range</span> m &#123;</span><br><span class="line">    fmt.Printf(<span class="string">"%s=%d\n"</span>, key, value)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">"-----------"</span>)</span><br><span class="line"><span class="comment">//多次遍历map返回的顺序是不一样的，但相对顺序是一样的，因为每次随机选择一个开始位置，然后顺序遍历</span></span><br><span class="line"><span class="keyword">for</span> key, value := <span class="keyword">range</span> m &#123;</span><br><span class="line">    fmt.Printf(<span class="string">"%s=%d\n"</span>, key, value)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">"-----------"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//一边遍历一边修改</span></span><br><span class="line"><span class="keyword">for</span> key, value := <span class="keyword">range</span> m &#123;</span><br><span class="line">    m[key] = value + <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> key, value := <span class="keyword">range</span> m &#123;</span><br><span class="line">    fmt.Printf(<span class="string">"%s=%d\n"</span>, key, value)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">"-----------"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//for range取得的是值拷贝</span></span><br><span class="line"><span class="keyword">for</span> _, value := <span class="keyword">range</span> m &#123;</span><br><span class="line">    value = value + <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> key, value := <span class="keyword">range</span> m &#123;</span><br><span class="line">    fmt.Printf(<span class="string">"%s=%d\n"</span>, key, value)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>map中的key可以是任意能够用==操作符比较的类型，不能是函数、map、切片，以及包含上述3中类型成员变量的的struct。map的value可以是任意类型。  </p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> f <span class="function"><span class="keyword">func</span><span class="params">(<span class="keyword">int</span>)</span> <span class="title">bool</span></span></span><br><span class="line"><span class="keyword">type</span> m <span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">byte</span></span><br><span class="line"><span class="keyword">type</span> s []<span class="keyword">int</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> i <span class="keyword">int</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> m1 <span class="keyword">map</span>[i]f</span><br><span class="line">fmt.Println(m1)</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 函数、map、切片不能当key **/</span></span><br><span class="line"><span class="comment">// var m2 map[f]bool</span></span><br><span class="line"><span class="comment">// fmt.Println(m2)</span></span><br><span class="line"><span class="comment">// var m3 map[m]bool</span></span><br><span class="line"><span class="comment">// fmt.Println(m3)</span></span><br><span class="line"><span class="comment">// var m4 map[s]bool</span></span><br><span class="line"><span class="comment">// fmt.Println(m4)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> user <span class="keyword">struct</span> &#123;</span><br><span class="line">	scores <span class="keyword">float32</span> <span class="comment">//如果scores是slice，则user不能作为map的key</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">u := user&#123;&#125;</span><br><span class="line">m5 := <span class="built_in">make</span>(<span class="keyword">map</span>[user]<span class="keyword">interface</span>&#123;&#125;)</span><br><span class="line">m5[u] = <span class="number">5</span></span><br><span class="line">fmt.Println(m5)</span><br></pre></td></tr></table></figure>

<h2 id="channel"><a href="#channel" class="headerlink" title="channel"></a>channel</h2><p>&#8195;&#8195;channel(管道)底层是一个环形队列(先进先出)，send(插入)和recv(取走)从同一个位置沿同一个方向顺序执行。sendx表示最后一次插入元素的位置，recvx表示最后一次取走元素的位置。<br><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/channel.png" alt="avatar">  </p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> ch <span class="keyword">chan</span> <span class="keyword">int</span> <span class="comment">//管道的声明</span></span><br><span class="line">ch = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">8</span>) <span class="comment">//管道的初始化，环形队列里可容纳8个int</span></span><br><span class="line">ch &lt;- <span class="number">1</span>                <span class="comment">//往管道里写入(send)数据</span></span><br><span class="line">ch &lt;- <span class="number">2</span></span><br><span class="line">ch &lt;- <span class="number">3</span></span><br><span class="line">ch &lt;- <span class="number">4</span></span><br><span class="line">ch &lt;- <span class="number">5</span></span><br><span class="line">v := &lt;-ch <span class="comment">//从管道里取走(recv)数据</span></span><br><span class="line">fmt.Println(v)</span><br><span class="line">v = &lt;-ch</span><br><span class="line">fmt.Println(v)</span><br></pre></td></tr></table></figure>

<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">read_only := <span class="built_in">make</span> (&lt;-<span class="keyword">chan</span> <span class="keyword">int</span>)   <span class="comment">//定义只读的channel</span></span><br><span class="line">write_only := <span class="built_in">make</span> (<span class="keyword">chan</span>&lt;- <span class="keyword">int</span>)   <span class="comment">//定义只写的channel</span></span><br></pre></td></tr></table></figure>

<p>定义只读和只写的channel意义不大，一般用于在参数传递中。  </p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//只能向channel里写数据 </span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">send</span><span class="params">(c <span class="keyword">chan</span>&lt;- <span class="keyword">int</span>)</span></span> &#123; </span><br><span class="line">    c &lt;- <span class="number">1</span> </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">//只能取channel中的数据 </span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">recv</span><span class="params">(c &lt;-<span class="keyword">chan</span> <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">	_ = &lt;-c</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回一个只读channel</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Context)</span> <span class="title">Done</span><span class="params">()</span> &lt;-<span class="title">chan</span> <span class="title">struct</span></span>&#123;&#125; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以通过for range遍历并取走管道里的元素，当管道为空且被close后，for循环退出。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="built_in">close</span>(ch)</span><br><span class="line"><span class="comment">//遍历并取走（receive）管道里的元素。当管道里已无剩余元素且没有close管道时，receive操作会一直阻塞，最终报deadlock。当管道为空且被close后，for循环退出。</span></span><br><span class="line"><span class="keyword">for</span> ele := <span class="keyword">range</span> ch &#123;</span><br><span class="line">	fmt.Println(ele)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>slice、map和channel是go语言里的3种引用类型，都可以通过make函数来进行初始化（申请内存分配）。因为它们都包含一个指向底层数据结构的指针，所以称之为“引用”类型。引用类型未初始化时都是nil，可以对它们执行len()函数，返回0。</p>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang基础</tag>
      </tags>
  </entry>
  <entry>
    <title>[Go流程控制语句]</title>
    <url>/2021/04/22/Go%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5/</url>
    <content><![CDATA[<h1 id="流程控制语句"><a href="#流程控制语句" class="headerlink" title="流程控制语句"></a>流程控制语句</h1><h2 id="if"><a href="#if" class="headerlink" title="if"></a>if</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="number">5</span> &gt; <span class="number">9</span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">"5&gt;9"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>如果逻辑表达式成立，就会执行{}里的内容。</li>
<li>逻辑表达式不需要加()。</li>
<li>“{“必须紧跟在逻辑表达式后面，不能另起一行。</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> c, d, e := <span class="number">5</span>, <span class="number">9</span>, <span class="number">2</span>; c &lt; d &amp;&amp; (c &gt; e || c &gt; <span class="number">3</span>) &#123; <span class="comment">//初始化多个局部变量。复杂的逻辑表达式</span></span><br><span class="line">    fmt.Println(<span class="string">"fit"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>逻辑表达中可以含有变量或常量。</li>
<li>if句子中允许包含1个(仅1个)分号，在分号前初始化一些局部变量(即只在if块内可见)。  </li>
</ul>
<p>if-else的用法  </p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">color := <span class="string">"black"</span></span><br><span class="line"><span class="keyword">if</span> color == <span class="string">"red"</span> &#123; <span class="comment">//if只能有一个</span></span><br><span class="line">    fmt.Println(<span class="string">"stop"</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> color == <span class="string">"green"</span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">"go"</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> color == <span class="string">"yellow"</span> &#123; <span class="comment">//else if可以有0个、一个或者连续多个</span></span><br><span class="line">    fmt.Println(<span class="string">"stop"</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123; <span class="comment">//else有0个或1个</span></span><br><span class="line">    fmt.Printf(<span class="string">"invalid traffic signal: %s\n"</span>, strings.ToUpper(color))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>if表达式嵌套  </p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> xxx &#123;</span><br><span class="line">    <span class="keyword">if</span> xxx &#123;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> xxx&#123;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> xxx &#123;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>&#8195;&#8195;注意太深的嵌套不利于代码的维护，比如</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">color := <span class="string">"black"</span></span><br><span class="line"><span class="keyword">switch</span> color &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"green"</span> :	<span class="comment">//相当于  if color== "green"</span></span><br><span class="line">	fmt.Println(<span class="string">"go"</span>)</span><br><span class="line"><span class="keyword">case</span> <span class="string">"red"</span> :		<span class="comment">//相当于else if color== "red" </span></span><br><span class="line">	fmt.Println(<span class="string">"stop"</span>)</span><br><span class="line"><span class="keyword">default</span>:		 <span class="comment">//相当于else </span></span><br><span class="line">	fmt.Printf(<span class="string">"invalid traffic signal: %s\n"</span>, strings.ToUpper(color))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>switch-case-default可能模拟if-else if-else，但只能实现相等判断。</li>
<li>switch和case后面可以跟常量、变量或函数表达式，只要它们表示的数据类型相同就行。</li>
<li>case后面可以跟多个值，只要有一个值满足就行。</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(a <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> a + <span class="number">10</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">switch_expression</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> a <span class="keyword">int</span> = <span class="number">5</span></span><br><span class="line">	<span class="keyword">switch</span> add(a) &#123; <span class="comment">//switch后跟一个函数表达式</span></span><br><span class="line">	<span class="keyword">case</span> <span class="number">15</span>: <span class="comment">//case后跟一个常量</span></span><br><span class="line">		fmt.Println(<span class="string">"right"</span>)</span><br><span class="line">	<span class="keyword">default</span>:</span><br><span class="line">		fmt.Println(<span class="string">"wrong"</span>)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">const</span> B = <span class="number">15</span></span><br><span class="line">	<span class="keyword">switch</span> B &#123; <span class="comment">//switch后跟一个常量</span></span><br><span class="line">	<span class="keyword">case</span> add(a): <span class="comment">//case后跟一个函数表达式</span></span><br><span class="line">		fmt.Println(<span class="string">"right"</span>)</span><br><span class="line">	<span class="keyword">default</span>:</span><br><span class="line">		fmt.Println(<span class="string">"wrong"</span>)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>&#8195;&#8195;switch后带表达式时，switch-case只能模拟相等的情况；如果switch后不带表达式，case后就可以跟任意的条件表达式。  </p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">switch_condition</span><span class="params">()</span></span> &#123;</span><br><span class="line">	color := <span class="string">"yellow"</span></span><br><span class="line">	<span class="keyword">switch</span> color &#123;</span><br><span class="line">	<span class="keyword">case</span> <span class="string">"green"</span>:</span><br><span class="line">		fmt.Println(<span class="string">"go"</span>)</span><br><span class="line">	<span class="keyword">case</span> <span class="string">"red"</span>, <span class="string">"yellow"</span>: <span class="comment">//用逗号分隔多个condition，它们之间是“或”的关系，只需要有一个condition满足就行</span></span><br><span class="line">		fmt.Println(<span class="string">"stop"</span>)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//switch后带表达式时，switch-case只能模拟相等的情况；如果switch后不带表达式，case后就可以跟任意的条件表达式</span></span><br><span class="line">	<span class="keyword">switch</span> &#123;</span><br><span class="line">	<span class="keyword">case</span> add(<span class="number">5</span>) &gt; <span class="number">10</span>:</span><br><span class="line">		fmt.Println(<span class="string">"right"</span>)</span><br><span class="line">	<span class="keyword">default</span>:</span><br><span class="line">		fmt.Println(<span class="string">"wrong"</span>)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>switch Type</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">switch_type</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> num <span class="keyword">interface</span>&#123;&#125; = <span class="number">6.5</span></span><br><span class="line">	<span class="keyword">switch</span> num.(<span class="keyword">type</span>) &#123; <span class="comment">//获取interface的具体类型。.(type)只能用在switch后面</span></span><br><span class="line">	<span class="keyword">case</span> <span class="keyword">int</span>:</span><br><span class="line">		fmt.Println(<span class="string">"int"</span>)</span><br><span class="line">	<span class="keyword">case</span> <span class="keyword">float32</span>:</span><br><span class="line">		fmt.Println(<span class="string">"float32"</span>)</span><br><span class="line">	<span class="keyword">case</span> <span class="keyword">float64</span>:</span><br><span class="line">		fmt.Println(<span class="string">"float64"</span>)</span><br><span class="line">	<span class="keyword">case</span> <span class="keyword">byte</span>:</span><br><span class="line">		fmt.Println(<span class="string">"byte"</span>)</span><br><span class="line">	<span class="keyword">default</span>:</span><br><span class="line">		fmt.Println(<span class="string">"neither"</span>)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">switch</span> value := num.(<span class="keyword">type</span>) &#123; <span class="comment">//相当于在每个case内部申明了一个变量value</span></span><br><span class="line">	<span class="keyword">case</span> <span class="keyword">int</span>: <span class="comment">//value已被转换为int类型</span></span><br><span class="line">		fmt.Printf(<span class="string">"number is int %d\n"</span>, value)</span><br><span class="line">	<span class="keyword">case</span> <span class="keyword">float64</span>: <span class="comment">//value已被转换为float64类型</span></span><br><span class="line">		fmt.Printf(<span class="string">"number is float64 %f\n"</span>, value)</span><br><span class="line">	<span class="keyword">case</span> <span class="keyword">byte</span>, <span class="keyword">string</span>: <span class="comment">//如果case后有多个类型，则value还是interface&#123;&#125;类型</span></span><br><span class="line">		fmt.Printf(<span class="string">"number is inerface %v\n"</span>, value)</span><br><span class="line">	<span class="keyword">default</span>:</span><br><span class="line">		fmt.Println(<span class="string">"neither"</span>)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//等价形式</span></span><br><span class="line">	<span class="keyword">switch</span> num.(<span class="keyword">type</span>) &#123;</span><br><span class="line">	<span class="keyword">case</span> <span class="keyword">int</span>:</span><br><span class="line">		value := num.(<span class="keyword">int</span>)</span><br><span class="line">		fmt.Printf(<span class="string">"number is int %d\n"</span>, value)</span><br><span class="line">	<span class="keyword">case</span> <span class="keyword">float64</span>:</span><br><span class="line">		value := num.(<span class="keyword">float64</span>)</span><br><span class="line">		fmt.Printf(<span class="string">"number is float64 %f\n"</span>, value)</span><br><span class="line">	<span class="keyword">case</span> <span class="keyword">byte</span>:</span><br><span class="line">		value := num.(<span class="keyword">byte</span>)</span><br><span class="line">		fmt.Printf(<span class="string">"number is byte %d\n"</span>, value)</span><br><span class="line">	<span class="keyword">default</span>:</span><br><span class="line">		fmt.Println(<span class="string">"neither"</span>)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>fallthrough 强制执行下一个case（或default）</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fall_throth</span><span class="params">(age <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">	fmt.Printf(<span class="string">"您的年龄是%d, 您可以：\n"</span>, age)</span><br><span class="line">	<span class="keyword">switch</span> &#123;</span><br><span class="line">	<span class="keyword">case</span> age &gt; <span class="number">50</span>:</span><br><span class="line">		fmt.Println(<span class="string">"出任国家首脑"</span>)</span><br><span class="line">		<span class="keyword">fallthrough</span></span><br><span class="line">	<span class="keyword">case</span> age &gt; <span class="number">25</span>:</span><br><span class="line">		fmt.Println(<span class="string">"生育子女"</span>)</span><br><span class="line">		<span class="keyword">fallthrough</span></span><br><span class="line">	<span class="keyword">case</span> age &gt; <span class="number">22</span>:</span><br><span class="line">		fmt.Println(<span class="string">"结婚"</span>)</span><br><span class="line">		<span class="keyword">fallthrough</span></span><br><span class="line">	<span class="keyword">case</span> age &gt; <span class="number">18</span>:</span><br><span class="line">		fmt.Println(<span class="string">"开车"</span>)</span><br><span class="line">		<span class="keyword">fallthrough</span></span><br><span class="line">	<span class="keyword">case</span> age &gt; <span class="number">16</span>:</span><br><span class="line">		fmt.Println(<span class="string">"参加工作"</span>)</span><br><span class="line">	<span class="keyword">case</span> age &gt; <span class="number">15</span>:</span><br><span class="line">		fmt.Println(<span class="string">"上高中"</span>)</span><br><span class="line">		<span class="keyword">fallthrough</span></span><br><span class="line">	<span class="keyword">case</span> age &gt; <span class="number">3</span>:</span><br><span class="line">		fmt.Println(<span class="string">"上幼儿园"</span>)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="for"><a href="#for" class="headerlink" title="for"></a>for</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">arr := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(arr); i++ &#123; <span class="comment">//正序遍历切片</span></span><br><span class="line">	fmt.Printf(<span class="string">"%d: %d\n"</span>, i, arr[i])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>for 初始化局部变量;条件表达式;后续操作</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> sum, i := <span class="number">0</span>, <span class="number">0</span>; i &lt; <span class="built_in">len</span>(arr) &amp;&amp; sum &lt; <span class="number">100</span>; sum, i = sum*<span class="number">1</span>, i+<span class="number">1</span></span><br></pre></td></tr></table></figure>

<ul>
<li>局部变量指仅在for块内可见。</li>
<li>初始化变量可以放在for上面。</li>
<li>后续操作可以放在for块内部。</li>
<li>只有条件判断时，前后的分号可以不要。</li>
<li>for{}是一个无限循环。  </li>
</ul>
<p>for range  </p>
<ul>
<li>遍历数组或切片<ul>
<li>for i, ele := range arr </li>
</ul>
</li>
<li>遍历string<ul>
<li>for i, ele := range “我会唱ABC”    //ele是rune类型</li>
</ul>
</li>
<li>遍历map，go不保证遍历的顺序<ul>
<li>for key, value := range m</li>
</ul>
</li>
<li>遍历channel，遍历前一定要先close<ul>
<li>for ele := range ch</li>
<li>for range拿到的是数据的拷贝</li>
</ul>
</li>
</ul>
<p>for嵌套<br>&#8195;&#8195;矩阵乘法需要用到三层for循环嵌套。 </p>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/mat_mul.png" alt="avatar">   </p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">nest_for</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">const</span> SIZE = <span class="number">4</span></span><br><span class="line"></span><br><span class="line">	A := [SIZE][SIZE]<span class="keyword">float64</span>&#123;&#125;</span><br><span class="line">	<span class="comment">//初始化二维数组</span></span><br><span class="line">	<span class="comment">//两层for循环嵌套</span></span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; SIZE; i++ &#123;</span><br><span class="line">		<span class="keyword">for</span> j := <span class="number">0</span>; j &lt; SIZE; j++ &#123;</span><br><span class="line">			A[i][j] = rand.Float64() <span class="comment">//[0,1)上的随机数</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	B := [SIZE][SIZE]<span class="keyword">float64</span>&#123;&#125;</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; SIZE; i++ &#123;</span><br><span class="line">		<span class="keyword">for</span> j := <span class="number">0</span>; j &lt; SIZE; j++ &#123;</span><br><span class="line">			B[i][j] = rand.Float64() <span class="comment">//[0,1)上的随机数</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	rect := [SIZE][SIZE]<span class="keyword">float64</span>&#123;&#125;</span><br><span class="line">	<span class="comment">//三层for循环嵌套</span></span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; SIZE; i++ &#123;</span><br><span class="line">		<span class="keyword">for</span> j := <span class="number">0</span>; j &lt; SIZE; j++ &#123;</span><br><span class="line">			prod := <span class="number">0.0</span></span><br><span class="line">			<span class="keyword">for</span> k := <span class="number">0</span>; k &lt; SIZE; k++ &#123;</span><br><span class="line">				prod += A[i][k] * B[k][j]</span><br><span class="line">			&#125;</span><br><span class="line">			rect[i][j] = prod</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	i, j := <span class="number">2</span>, <span class="number">1</span></span><br><span class="line">	fmt.Println(A[i]) <span class="comment">//二维数组第i行</span></span><br><span class="line">	<span class="comment">//打印二维数组的第j列</span></span><br><span class="line">	<span class="comment">//注意：B[:][j]这不是二维数组第j列，这是二维数组第j行！</span></span><br><span class="line">	<span class="keyword">for</span> _, row := <span class="keyword">range</span> B &#123;</span><br><span class="line">		fmt.Printf(<span class="string">"%g "</span>, row[j])</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println()</span><br><span class="line">	fmt.Println(rect[i][j])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="break与continue"><a href="#break与continue" class="headerlink" title="break与continue"></a>break与continue</h2><ul>
<li>break与continue用于控制for循环的代码流程，并且只针对最靠近自己的外层for循环。</li>
<li>break:退出for循环，且本轮break下面的代码不再执行。</li>
<li>continue:本轮continue下面的代码不再执行，进入for循环的下一轮。</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//break和continue都是针对for循环的，不针对if或switch</span></span><br><span class="line"><span class="comment">//break和continue都是针对套在自己外面的最靠里的那层for循环，不针对更外层的for循环（除非使用Label）</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">complex_break_continue</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">const</span> SIZE = <span class="number">5</span></span><br><span class="line">	arr := [SIZE][SIZE]<span class="keyword">int</span>&#123;&#125;</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; SIZE; i++ &#123;</span><br><span class="line">		fmt.Printf(<span class="string">"开始检查第%d行\n"</span>, i)</span><br><span class="line">		<span class="keyword">if</span> i%<span class="number">2</span> == <span class="number">1</span> &#123;</span><br><span class="line">			<span class="keyword">for</span> j := <span class="number">0</span>; j &lt; SIZE; j++ &#123;</span><br><span class="line">				fmt.Printf(<span class="string">"开始检查第%d列\n"</span>, j)</span><br><span class="line">				<span class="keyword">if</span> arr[i][j]%<span class="number">2</span> == <span class="number">0</span> &#123;</span><br><span class="line">					<span class="keyword">continue</span> <span class="comment">//针对第二层for循环</span></span><br><span class="line">				&#125;</span><br><span class="line">				fmt.Printf(<span class="string">"将要检查第%d列\n"</span>, j+<span class="number">1</span>)</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">break</span> <span class="comment">//针对第一层for循环</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="goto与Label"><a href="#goto与Label" class="headerlink" title="goto与Label"></a>goto与Label</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> i <span class="keyword">int</span> = <span class="number">4</span></span><br><span class="line">MY_LABEL:</span><br><span class="line">	i += <span class="number">3</span></span><br><span class="line">	fmt.Println(i)</span><br><span class="line">	<span class="keyword">goto</span> MY_LABEL <span class="comment">//返回定义MY_LABEL的那一行，把代码再执行一遍（会进入一个无限循环）</span></span><br></pre></td></tr></table></figure>

<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> i%<span class="number">2</span> == <span class="number">0</span> &#123;</span><br><span class="line">	<span class="keyword">goto</span> L1 <span class="comment">//Label指示的是某一行代码，并没有圈定一个代码块，所以goto L1也会执行L2后的代码</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">	<span class="keyword">goto</span> L2<span class="comment">//先使用Label</span></span><br><span class="line">&#125;</span><br><span class="line">L1: </span><br><span class="line">	i += <span class="number">3</span></span><br><span class="line">L2: <span class="comment">//后定义Label。Label定义后必须在代码的某个地方被使用</span></span><br><span class="line">	i *= <span class="number">3</span></span><br></pre></td></tr></table></figure>

<p>&#8195;&#8195;goto与Label结合可以实现break的功能，甚至比break更强大。  </p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; SIZE; i++ &#123;</span><br><span class="line">L2:</span><br><span class="line"><span class="keyword">for</span> j := <span class="number">0</span>; j &lt; SIZE; j++ &#123;</span><br><span class="line">	<span class="keyword">goto</span> L1</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">L1:</span><br><span class="line">xxx</span><br></pre></td></tr></table></figure>

<ul>
<li>break、continue与Label结合使用可以跳转到更外层的for循环。</li>
<li>continue和break针对的Label必须写在for前面，而goto可以针对任意位置的Label。</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">break_label</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">const</span> SIZE = <span class="number">5</span></span><br><span class="line">	arr := [SIZE][SIZE]<span class="keyword">int</span>&#123;&#125;</span><br><span class="line">L1:</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; SIZE; i++ &#123;</span><br><span class="line">	L2:</span><br><span class="line">		fmt.Printf(<span class="string">"开始检查第%d行\n"</span>, i)</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> i%<span class="number">2</span> == <span class="number">1</span> &#123;</span><br><span class="line">		L3:</span><br><span class="line">			<span class="keyword">for</span> j := <span class="number">0</span>; j &lt; SIZE; j++ &#123;</span><br><span class="line">				fmt.Printf(<span class="string">"开始检查第%d列\n"</span>, j)</span><br><span class="line">				<span class="keyword">if</span> arr[i][j]%<span class="number">3</span> == <span class="number">0</span> &#123;</span><br><span class="line">					<span class="keyword">break</span> L1 <span class="comment">//直接退出最外层的fot循环</span></span><br><span class="line">				&#125; <span class="keyword">else</span> <span class="keyword">if</span> arr[i][j]%<span class="number">3</span> == <span class="number">1</span> &#123;</span><br><span class="line">					<span class="keyword">goto</span> L2 <span class="comment">//continue和break针对的Label必须写在for前面，而goto可以针对任意位置的Label</span></span><br><span class="line">				&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">					<span class="keyword">break</span> L3</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>练习</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">	<span class="keyword">var</span> num <span class="keyword">int</span></span><br><span class="line">L1:</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; &#123;</span><br><span class="line">		fmt.Println(<span class="string">"开始"</span>)</span><br><span class="line">		fmt.Printf(<span class="string">"i=%d\n"</span>, i)</span><br><span class="line">	L2:</span><br><span class="line">		fmt.Println(<span class="string">"开始2"</span>)</span><br><span class="line">		i += <span class="number">1</span></span><br><span class="line">		fmt.Printf(<span class="string">"i=%d\n"</span>, i)</span><br><span class="line">		fmt.Print(<span class="string">"请输入："</span>)</span><br><span class="line">		fmt.Scan(&amp;num)</span><br><span class="line">		<span class="keyword">switch</span> num &#123;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">			<span class="keyword">break</span> L1 <span class="comment">//直接跳出L1</span></span><br><span class="line">		<span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">			<span class="keyword">continue</span> L1 <span class="comment">// 会直接执行L1下面的语句,但变量仍保持，仍保持刚刚的进行</span></span><br><span class="line">		<span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">			<span class="keyword">goto</span> L2 <span class="comment">// 会直接执行L2下面的语句,但变量仍保持</span></span><br><span class="line">		<span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">			<span class="keyword">goto</span> L1 <span class="comment">// 会直接重新执行L1下面的语句</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(<span class="string">"结束"</span>)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang基础</tag>
      </tags>
  </entry>
  <entry>
    <title>[Golang基础]</title>
    <url>/2021/04/20/Go%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<p><a href="https://rogerxs80.github.io/2021/04/21/%E5%88%9D%E8%AF%86Go%E8%AF%AD%E8%A8%80/" target="_blank" rel="noopener">1.初识Go语言</a></p>
<p><a href="https://rogerxs80.github.io/2021/04/21/Go%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/" target="_blank" rel="noopener">2.Go基础语法</a></p>
<p><a href="https://rogerxs80.github.io/2021/04/21/Go%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/" target="_blank" rel="noopener">3.Go数据类型</a></p>
<p><a href="https://rogerxs80.github.io/2021/04/21/Go%E7%BB%93%E6%9E%84%E4%BD%93/" target="_blank" rel="noopener">4.Go结构体</a></p>
<p><a href="https://rogerxs80.github.io/2021/04/22/Go%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5/" target="_blank" rel="noopener">5.Go流程控制语句</a></p>
<p><a href="https://rogerxs80.github.io/2021/04/23/Go%E5%87%BD%E6%95%B0/" target="_blank" rel="noopener">6.Go函数</a></p>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang基础</tag>
      </tags>
  </entry>
  <entry>
    <title>[Go结构体]</title>
    <url>/2021/04/21/Go%E7%BB%93%E6%9E%84%E4%BD%93/</url>
    <content><![CDATA[<h1 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h1><h2 id="结构体创建、访问与修改"><a href="#结构体创建、访问与修改" class="headerlink" title="结构体创建、访问与修改"></a>结构体创建、访问与修改</h2><p>定义结构体</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> user <span class="keyword">struct</span> &#123;</span><br><span class="line">    id <span class="keyword">int</span></span><br><span class="line">    score <span class="keyword">float32</span></span><br><span class="line">    enrollment time.Time</span><br><span class="line">    name, addr <span class="keyword">string</span> <span class="comment">//多个字段类型相同时可以简写到一行里</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>声明和初始化结构体</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> u user <span class="comment">//声明，会用相应类型的默认值初始化struct里的每一个字段</span></span><br><span class="line">u = user&#123;&#125; <span class="comment">//用相应类型的默认值初始化struct里的每一个字段</span></span><br><span class="line">u = user&#123;id: <span class="number">3</span>, name: <span class="string">"zcy"</span>&#125; <span class="comment">//赋值初始化</span></span><br><span class="line">u = user&#123;<span class="number">4</span>, <span class="number">100.0</span>, time.Now(), <span class="string">"zcy"</span>, <span class="string">"beijing"</span>&#125; <span class="comment">//赋值初始化，可以不写字段名，但需要跟结构体定义里的字段顺序一致</span></span><br></pre></td></tr></table></figure>

<p>访问与修改结构体</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">u.enrollment = time.Now() <span class="comment">//给结构体的成员变量赋值</span></span><br><span class="line">fmt.Printf(<span class="string">"id=%d, enrollment=%v, name=%s\n"</span>, u.id, u.enrollment, u.name) <span class="comment">//访问结构体的成员变量</span></span><br></pre></td></tr></table></figure>

<p>成员方法</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//可以把user理解为hello函数的参数，即hello(u user, man string)</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u user)</span> <span class="title">hello</span><span class="params">(man <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">"hi "</span> + man + <span class="string">", my name is "</span> + u.name)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//函数里不需要访问user的成员，可以传匿名，甚至_也不传</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(_ user)</span> <span class="title">think</span><span class="params">(man <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">"hi "</span> + man + <span class="string">", do you know my name?"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>为自定义类型添加方法</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> UserMap <span class="keyword">map</span>[<span class="keyword">int</span>]User <span class="comment">//自定义类型</span></span><br><span class="line"><span class="comment">//可以给自定义类型添加任意方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(um UserMap)</span> <span class="title">GetUser</span><span class="params">(id <span class="keyword">int</span>)</span> <span class="title">User</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> um[id]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结构体的可见性：  </p>
<ul>
<li>go语言关于可见的统一规则：大写字母开头跨package也可以访问；否则只能本package内部访问。</li>
<li>结构体名称以大写开头时，package外部可见，在此前提下，结构体中以大写开头在成员变量或成员方法在package外部也可见。  </li>
</ul>
<p>匿名结构体</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> stu <span class="keyword">struct</span> &#123; <span class="comment">//声明stu是一个结构体，但这个结构体是匿名的</span></span><br><span class="line">	Name <span class="keyword">string</span></span><br><span class="line">	Addr <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line">stu.Name = <span class="string">"zcy"</span></span><br><span class="line">stu.Addr = <span class="string">"bj"</span></span><br></pre></td></tr></table></figure>

<p>&#8195;&#8195;匿名结构体通常用于只使用一次的情况。<br>结构体中含有匿名成员</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Student <span class="keyword">struct</span> &#123;</span><br><span class="line">	Id <span class="keyword">int</span></span><br><span class="line">	<span class="keyword">string</span> <span class="comment">//匿名字段</span></span><br><span class="line">	<span class="keyword">float32</span> <span class="comment">//直接使用数据类型作为字段名，所以匿名字段中不能出现重复的数据类型</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> stu = Student&#123;Id: <span class="number">1</span>, <span class="keyword">string</span>: <span class="string">"zcy"</span>, <span class="keyword">float32</span>: <span class="number">79.5</span>&#125;</span><br><span class="line">fmt.Printf(<span class="string">"anonymous_member string member=%s float member=%f\n"</span>, stu.<span class="keyword">string</span>, stu.<span class="keyword">float32</span>)  <span class="comment">//直接使用数据类型访问匿名成员</span></span><br></pre></td></tr></table></figure>

<h2 id="结构体指针"><a href="#结构体指针" class="headerlink" title="结构体指针"></a>结构体指针</h2><p>创建结构体指针</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> u User</span><br><span class="line">user := &amp;u <span class="comment">//通过取址符&amp;得到指针</span></span><br><span class="line">user = &amp;User&#123; <span class="comment">//直接创建结构体指针</span></span><br><span class="line">    Id: <span class="number">3</span>, Name: <span class="string">"zcy"</span>, addr: <span class="string">"beijing"</span>,</span><br><span class="line">&#125;</span><br><span class="line">user = <span class="built_in">new</span>(User) <span class="comment">//通过new()函数实体化一个结构体，并返回其指针</span></span><br></pre></td></tr></table></figure>

<p>构造函数</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//构造函数。返回指针是为了避免值拷贝</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewUser</span><span class="params">(id <span class="keyword">int</span>, name <span class="keyword">string</span>)</span> *<span class="title">User</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> &amp;User&#123;</span><br><span class="line">		Id: id,</span><br><span class="line">		Name: name,</span><br><span class="line">		addr: <span class="string">"China"</span>,</span><br><span class="line">		Score: <span class="number">59</span>,</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>方法接收指针</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//user传的是值，即传的是整个结构体的拷贝。在函数里修改结构体不会影响原来的结构体</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">hello</span><span class="params">(u user, man <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">    u.name = <span class="string">"杰克"</span></span><br><span class="line">    fmt.Println(<span class="string">"hi "</span> + man + <span class="string">", my name is "</span> + u.name)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//传的是user指针，在函数里修改user的成员会影响原来的结构体</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">hello2</span><span class="params">(u *user, man <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">    u.name = <span class="string">"杰克"</span></span><br><span class="line">    fmt.Println(<span class="string">"hi "</span> + man + <span class="string">", my name is "</span> + u.name)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//把user理解为hello()的参数，即hello(u user, man string)</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u user)</span> <span class="title">hello</span><span class="params">(man <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">    u.name = <span class="string">"杰克"</span></span><br><span class="line">    fmt.Println(<span class="string">"hi "</span> + man + <span class="string">", my name is "</span> + u.name)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//可以理解为hello2(u *user, man string)</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u *user)</span> <span class="title">hello2</span><span class="params">(man <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">    u.name = <span class="string">"杰克"</span></span><br><span class="line">    fmt.Println(<span class="string">"hi "</span> + man + <span class="string">", my name is "</span> + u.name)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="结构体嵌套"><a href="#结构体嵌套" class="headerlink" title="结构体嵌套"></a>结构体嵌套</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> user <span class="keyword">struct</span> &#123;</span><br><span class="line">    name <span class="keyword">string</span></span><br><span class="line">    sex <span class="keyword">byte</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> paper <span class="keyword">struct</span> &#123;</span><br><span class="line">    name <span class="keyword">string</span></span><br><span class="line">    auther user <span class="comment">//结构体嵌套</span></span><br><span class="line">&#125;</span><br><span class="line">p := <span class="built_in">new</span>(paper)</span><br><span class="line">p.name = <span class="string">"论文标题"</span></span><br><span class="line">p.auther.name = <span class="string">"作者姓名"</span></span><br><span class="line">p.auther.sex = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> vedio <span class="keyword">struct</span> &#123;</span><br><span class="line">    length <span class="keyword">int</span></span><br><span class="line">    name <span class="keyword">string</span></span><br><span class="line">    user<span class="comment">//匿名字段,可用数据类型当字段名</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结构体嵌套时字段名冲突的问题</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">v := <span class="built_in">new</span>(vedio)</span><br><span class="line">v.length = <span class="number">13</span></span><br><span class="line">v.name = <span class="string">"视频名称"</span></span><br><span class="line">v.user.sex = <span class="number">0</span> <span class="comment">//通过字段名逐级访问</span></span><br><span class="line">v.sex = <span class="number">0</span> <span class="comment">//对于匿名字段也可以跳过中间字段名，直接访问内部的字段名</span></span><br><span class="line">v.user.name = <span class="string">"作者姓名"</span> <span class="comment">//由于内部、外部结构体都有name这个字段，名字冲突了，所以需要指定中间字段名</span></span><br></pre></td></tr></table></figure>

<h2 id="深拷贝与浅拷贝"><a href="#深拷贝与浅拷贝" class="headerlink" title="深拷贝与浅拷贝"></a>深拷贝与浅拷贝</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">	Name <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> Vedio <span class="keyword">struct</span> &#123;</span><br><span class="line">	Length <span class="keyword">int</span></span><br><span class="line">	Author User</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>&#8195;&#8195;Go语言里的赋值都会发生值拷贝。  </p>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/deep_copy.png" alt="avatar">  </p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">	Name <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> Vedio <span class="keyword">struct</span> &#123;</span><br><span class="line">	Length <span class="keyword">int</span></span><br><span class="line">	Author *User</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/shallow_copy.png" alt="avatar">  </p>
<ul>
<li>深拷贝，拷贝的是值，比如Vedio.Length。</li>
<li>浅拷贝，拷贝的是指针，比如Vedio.Author。</li>
<li>深拷贝开辟了新的内存空间，修改操作不影响原先的内存。</li>
<li>浅拷贝指向的还是原来的内存空间，修改操作直接作用在原内存空间上。</li>
</ul>
<p>&#8195;&#8195;传slice，对sclice的3个字段进行了拷贝，拷贝的是底层数组的指针，所以修改底层数组的元素会反应到原数组上。  </p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">users := []User&#123;&#123;Name: <span class="string">"康熙"</span>&#125;&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">update_users</span><span class="params">(users []User)</span></span> &#123;</span><br><span class="line">    users[<span class="number">0</span>].Name = <span class="string">"光绪"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang基础</tag>
      </tags>
  </entry>
  <entry>
    <title>[初识Go语言]</title>
    <url>/2021/04/21/%E5%88%9D%E8%AF%86Go%E8%AF%AD%E8%A8%80/</url>
    <content><![CDATA[<h1 id="初识Go语言"><a href="#初识Go语言" class="headerlink" title="初识Go语言"></a>初识Go语言</h1><h2 id="Go语言发展历史"><a href="#Go语言发展历史" class="headerlink" title="Go语言发展历史"></a>Go语言发展历史</h2><h3 id="阵容豪华的创使人团队"><a href="#阵容豪华的创使人团队" class="headerlink" title="阵容豪华的创使人团队"></a>阵容豪华的创使人团队</h3><p><strong>Ken Thompson</strong></p>
<ul>
<li>1966年：加入了贝尔实验室，在参与 Multics （多路信息计算）开发期间，创造出了B语言，并用一个月的时间用B语言开发了全新的操作系统UNICS，后来改名为我们所熟悉的UNIX 操作系统。</li>
<li>1971年：和丹尼斯·利奇（Dennis Ritchie）一起共同发明了C语言。</li>
<li>1973年：和丹尼斯·利奇（Dennis Ritchie）使用C语言重写了UNIX，并安装于PDP-11的机器之上。</li>
<li>1983年：美国计算机协会将图灵奖授予汤普森。</li>
<li>2000年：离开贝尔实验室，已退休的汤普森成为了一名飞行员。</li>
<li>2006年：加入Google工作。</li>
<li>2007年：64岁的高龄，与Rob Pike和Robert Griesemer主导了Go语言的开发。</li>
</ul>
<p><strong>Rob Pike</strong></p>
<ul>
<li>Go语言项目总负责人。</li>
<li>贝尔实验室Unix团队成员，参与的项目包括Plan 9，Inferno操作系统和Limbo编程语言。</li>
<li>UTF-8字符集规范唯二的发明人之一（另一位是Ken Thompson）。</li>
<li>《UNIX环境编程》和《程序设计实践》这两本书的作者之一。</li>
<li>第22届莫斯科夏季奥运会射箭项目的银牌得主。</li>
<li>业余天文学家，设计的珈玛射线望远镜差点被 NASA 用在航天飞机上。</li>
<li>他的媳妇Renee French 就是 Go 语言吉祥物的设计人。</li>
</ul>
<p><strong>Robert Griesemer</strong></p>
<ul>
<li>参与V8 JavaScript引擎的开发。</li>
<li>参与Java HotSpot虚拟机的研发。</li>
</ul>
<h3 id="起源"><a href="#起源" class="headerlink" title="起源"></a>起源</h3><p>&#8195;&#8195;2007年，Google的几位大牛正在用C++开发一些比较繁琐但是核心的工作，主要是分布式集群，大牛觉得很闹心。此时C++委员会来他们公司做技术演讲，说C++将要添加35个新特性，大牛心里飘过一万个CNM，“C++特性还不够多吗”。于是Rob Pike说要不自己搞个简单一点的语言吧，首先名字得简单好记，大腿一拍就叫“go”。<br>&#8195;&#8195;把事情搞复杂很容易，把事情搞简单才更深刻。</p>
<h3 id="发展"><a href="#发展" class="headerlink" title="发展"></a>发展</h3><ul>
<li>2007年9月21日，开始雏形设计。</li>
<li>2009年10月30日，Rob Pike宣布了Go语言的存在。</li>
<li>2009年11月10日，以完全开源的方式公布了Linux和Mac OSX上的版本，11月22日公布了Windows版本。</li>
<li>2010年1月8日，当选2009年年度语言。</li>
<li>2010年5月，谷歌投入使用。</li>
<li>2011年4月，谷歌开始抽调员工全职开发Go语言，并于5月宣布Google APP Engine支持Go语言。</li>
</ul>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/tiobe_index_for_go.png" alt="tiobe_index_for_go"></p>
<p>参考网站<a href="https://www.test.tiobe.com/tiobe-index/go。" target="_blank" rel="noopener">https://www.test.tiobe.com/tiobe-index/go。</a> </p>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/git_hut_pull_request_for_go1.png" alt="avatar"><br><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/git_hut_pull_request_for_go2.png" alt="avatar">  </p>
<p>参考网站<a href="https://madnight.github.io/githut/#/pull_requests。" target="_blank" rel="noopener">https://madnight.github.io/githut/#/pull_requests。</a></p>
<h3 id="现状"><a href="#现状" class="headerlink" title="现状"></a>现状</h3><p>&#8195;&#8195;从世界范围看，Go语言在中国的发展势头最猛，且远超第二名。在很多互联网大厂Go已成为主要开发语言。  </p>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/chinese_company_use_go.png" alt="avatar"></p>
<p>&#8195;&#8195;不论大小公司，对Go人才需求紧迫，薪酬很高。  </p>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/go_position.png" alt="avatar"></p>
<h2 id="Go语言的优劣"><a href="#Go语言的优劣" class="headerlink" title="Go语言的优劣"></a>Go语言的优劣</h2><p><strong>优势</strong></p>
<ul>
<li>语法简单，易于学习。类C的语法，同时比C/C++简洁和干净。</li>
<li>自带GC，方便使用。</li>
<li>快速编译，高效执行。</li>
<li>简单的依赖管理。</li>
<li>并发编程，轻松驾驭。</li>
<li>静态类型，同时有一些动态语言的特征(var声明)。</li>
<li>标准类库，规范统一。<br><strong>劣势</strong></li>
<li>不支持动态加载代码。</li>
<li>发展时间短，生态不及Java、C++庞大，但是够用。 </li>
</ul>
<h2 id="Go语言的应用场景"><a href="#Go语言的应用场景" class="headerlink" title="Go语言的应用场景"></a>Go语言的应用场景</h2><h3 id="应用场景总览"><a href="#应用场景总览" class="headerlink" title="应用场景总览"></a>应用场景总览</h3><ul>
<li>巨型中央服务器领域。</li>
<li>高性能分布式领域。</li>
<li>游戏服务端开发。</li>
<li>复杂事件处理。</li>
<li>对实时性要求很高的软件开发。</li>
<li>可以在Intel和ARM处理器上运行，因此也可以在安卓上运行。</li>
</ul>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/application_of_go.png" alt="avatar"></p>
<h3 id="go微服务开发"><a href="#go微服务开发" class="headerlink" title="go微服务开发"></a>go微服务开发</h3><ul>
<li>零依赖，让我们可以最小化我们的镜像,节省存储与拉取镜像带宽。</li>
<li>Runtime使用更小的内存，对比Java的JVM。</li>
<li>更好的并行能力，当你真的需求更多CPU的时候。</li>
<li>更高的性能，对比解释性语言，在处理数据已经并发方面优势明显。</li>
<li>简单，学习成本低，内部人员可以转入Go阵营。</li>
<li>使用Go能更接近云原生生态，比如docker，k8s, habor都是用Go开发的。 </li>
</ul>
<h2 id="开发环境搭建"><a href="#开发环境搭建" class="headerlink" title="开发环境搭建"></a>开发环境搭建</h2><ol>
<li>下载。到<a href="https://studygolang.com/dl上下载最新的Go稳定版本。" target="_blank" rel="noopener">https://studygolang.com/dl上下载最新的Go稳定版本。</a></li>
<li>安装。对于Windows和macOS用户，直接双击即可安装，留意一下安装路径。对于Linux用户，直接解压安装包即可，比如你打算把go安装到/usr/local目录下，则使用命令<br>tar zxvf goxxx.tar.gz –C /usr/local。这样go标准库及相关的可执行文件就安装到了/usr/local/go目录下，在后续的步骤中会把/usr/local/go赋给GOROOT环境变量。  </li>
<li>准确GOPATH。在任意目录下创建一个空目录，将来用于存放go语言第三方库文件。比如你打算使用/data/go_path这个目录，则在Linux下使用命令mkdir -p /data/go_path。在GOPATH目录建3个子目录：src、bin、pkg。  </li>
<li>配置环境变量。把第2步和第3步生成的目录分别赋给GOROOT和GOPATH环境变量，对于Linux和Mac用户在~/.bashrc文件中追加以下几行</li>
<li>GOPROXY的设置参考：<a href="https://goproxy.io/zh/" target="_blank" rel="noopener">https://goproxy.io/zh/</a></li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export GOROOT=/usr/local/go</span><br><span class="line">export GOPATH=/Users/Amor/go_path</span><br><span class="line">export PATH=$PATH:$GOROOT/bin::$GOPATH/bin</span><br><span class="line"></span><br><span class="line">source ~/.bashrc </span><br><span class="line"></span><br><span class="line">注意：apple M1在~/.zshrc下写入</span><br></pre></td></tr></table></figure>

<p>PATH环境变量下的可执行文件在任意目录下都可以直接访问。<br>对于Windows用户，编辑用户环境变量，新增GOROOT和GOPATH，把GOROOT/bin和GOPATH/bin添加到Path里。如下图<br><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/%E8%AE%BE%E7%BD%AEgo%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F1.png" alt="avatar">  </p>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/%E8%AE%BE%E7%BD%AEgo%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F2.png" alt="avatar">   </p>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/%E8%AE%BE%E7%BD%AEgo%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F3.png" alt="avatar">  </p>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/%E8%AE%BE%E7%BD%AEgo%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F4.png" alt="avatar">  </p>
<p>在Windows下还可以通过go env -w来设置环境变量，比如设置GOPROXY用以下命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">go env -w GOPROXY=https://goproxy.cn,direct</span><br></pre></td></tr></table></figure>

<p>有很多网站支持在线编辑Go代码并查看运行结果，这里列举一些<br><a href="https://play.golang.wiki" target="_blank" rel="noopener">https://play.golang.wiki</a><br><a href="https://play.studygolang.com" target="_blank" rel="noopener">https://play.studygolang.com</a><br><a href="https://goplay.space" target="_blank" rel="noopener">https://goplay.space</a><br><a href="https://goplay.tools" target="_blank" rel="noopener">https://goplay.tools</a><br>集成开发环境推荐GoLand和VSCode，后者是免费的。VSCode需要额外安装支持Go语言的插件，如下图  </p>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/go_plugin_for_vscode.png" alt="avatar"></p>
<p>Debug工具安装</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">xcode-<span class="keyword">select</span> --install</span><br></pre></td></tr></table></figure>

<h2 id="第一个Go程序"><a href="#第一个Go程序" class="headerlink" title="第一个Go程序"></a>第一个Go程序</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(<span class="string">"Hello World"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>main()函数是Go程序的唯一入口，且main()函数必须位于package main中。fmt是Go标准库中的一个package，该package下有一个Println()函数用于输出字符串。Go语言会依次从以下3个目录里查找依赖包：</p>
<ol>
<li>当前工作目录</li>
<li>$GOPATH/pkg/mod</li>
<li>$GOROOT/src</li>
</ol>
<h2 id="Go命令介绍"><a href="#Go命令介绍" class="headerlink" title="Go命令介绍"></a>Go命令介绍</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">(base) zcymac:~ zcy$ go help</span><br><span class="line">Go is a tool for managing Go source code.</span><br><span class="line"></span><br><span class="line">Usage:</span><br><span class="line"></span><br><span class="line">	go &lt;command&gt; [arguments]</span><br><span class="line"></span><br><span class="line">The commands are:</span><br><span class="line"></span><br><span class="line">	bug         start a bug report</span><br><span class="line">	build       compile packages and dependencies</span><br><span class="line">	clean       remove object files and cached files</span><br><span class="line">	doc         show documentation for package or symbol</span><br><span class="line">	env         print Go environment information</span><br><span class="line">	fix         update packages to use new APIs</span><br><span class="line">	fmt         gofmt (reformat) package sources</span><br><span class="line">	generate    generate Go files by processing source</span><br><span class="line">	get         add dependencies to current module and install them</span><br><span class="line">	install     compile and install packages and dependencies</span><br><span class="line">	list        list packages or modules</span><br><span class="line">	mod         module maintenance</span><br><span class="line">	run         compile and run Go program</span><br><span class="line">	test        test packages</span><br><span class="line">	tool        run specified go tool</span><br><span class="line">	version     print Go version</span><br><span class="line">	vet         report likely mistakes in packages</span><br><span class="line"></span><br><span class="line">Use "go help &lt;command&gt;" for more information about a command.</span><br><span class="line"></span><br><span class="line">Additional help topics:</span><br><span class="line"></span><br><span class="line">	buildconstraint build constraints</span><br><span class="line">	buildmode       build modes</span><br><span class="line">	c               calling between Go and C</span><br><span class="line">	cache           build and test caching</span><br><span class="line">	environment     environment variables</span><br><span class="line">	filetype        file types</span><br><span class="line">	go.mod          the go.mod file</span><br><span class="line">	gopath          GOPATH environment variable</span><br><span class="line">	gopath-get      legacy GOPATH go get</span><br><span class="line">	goproxy         module proxy protocol</span><br><span class="line">	importpath      import path syntax</span><br><span class="line">	modules         modules, module versions, and more</span><br><span class="line">	module-get      module-aware go get</span><br><span class="line">	module-auth     module authentication using go.sum</span><br><span class="line">	packages        package lists and patterns</span><br><span class="line">	private         configuration for downloading non-public code</span><br><span class="line">	testflag        testing flags</span><br><span class="line">	testfunc        testing functions</span><br><span class="line">	vcs             controlling version control with GOVCS</span><br><span class="line"></span><br><span class="line">Use "go help &lt;topic&gt;" for more information about that topic.</span><br></pre></td></tr></table></figure>

<p>go help: 查看帮助文档。  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">go help build</span><br></pre></td></tr></table></figure>

<p>go build: 对源代码和依赖的文件进行打包，生成可执行文件。  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">go build -o my_first_go_exe entrance_class/demo.go</span><br></pre></td></tr></table></figure>

<p>go install: 编译并安装包或依赖，安装到$GOPATH/bin下。  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">go install entrance_class/demo.go</span><br></pre></td></tr></table></figure>

<p>go get: 把依赖库添加到当前module中，如果本机之前从未下载过则先下载。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">go get github.com/tinylib/msgp</span><br></pre></td></tr></table></figure>

<p>以上命令会在$GOPATH/pkg/mod目录下会生成github.com/tinylib/msgp目录。  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">go install github.com/tinylib/msgp@latest</span><br></pre></td></tr></table></figure>

<p>以上命令会在$GOPATH/bin下生成msgp可执行文件。<br>go mod init module_name<br>初始化一个Go项目。<br>go mod tidy通过扫描当前项目中的所有代码来添加未被记录的依赖至go.mod文件或从go.mod文件中删除不再被使用的依赖。<br>go run: 编译并运行程序。<br>go test: 执行测试代码。<br>go tool: 执行go自带的工具。go tool pprof对cpu、内存和协程进行监控；go tool trace跟踪协程的执行过程。<br>go vet: 检查代码中的静态错误。<br>go fmt: 对代码文件进行格式化，如果用了IDE这个命令就不需要了。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">go fmt entrance_class/demo.go</span><br></pre></td></tr></table></figure>

<p>go doc: 查看go标准库或第三方库的帮助文档。 </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">go doc fmt</span><br><span class="line">go doc gonum.org/v1/gonum/stat</span><br></pre></td></tr></table></figure>

<p>go version: 查看go版本号。<br>go env: 查看go环境信息。   </p>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang基础</tag>
      </tags>
  </entry>
  <entry>
    <title>[Go基础语法]</title>
    <url>/2021/04/21/Go%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<h1 id="Go基础语法"><a href="#Go基础语法" class="headerlink" title="Go基础语法"></a>Go基础语法</h1><h2 id="标识符与关键字"><a href="#标识符与关键字" class="headerlink" title="标识符与关键字"></a>标识符与关键字</h2><p>go变量、常量、自定义类型、包、函数的命名方式必须遵循以下规则：</p>
<ol>
<li>首字符可以是任意Unicode字符或下划线。</li>
<li>首字符之外的部分可以是Unicode字符、下划线或数字。</li>
<li>名字的长度无限制。</li>
</ol>
<blockquote>
<p>理论上名字里可以有汉字，甚至可以全是汉字，但实际中不要这么做。</p>
</blockquote>
<p>Go语言关键字</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">break  default  func  interface  select  case  defer  go  map  struct  chan  else  goto  package  switch  const  if  range  type  continue  for  import  return  fallthrough  var</span><br></pre></td></tr></table></figure>

<p>常量</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">true  false  iota  nil</span><br></pre></td></tr></table></figure>

<p>数据类型</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int  int8  int16  int32  int64  uint  uint8  uint16  uint32  uint64  uintptr  float32  float64  complex128  complex64  bool  byte  rune  string  error</span><br></pre></td></tr></table></figure>

<p>函数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">make  len  cap  new  append  copy  close  delete  complex  real  imag  panic  recover</span><br></pre></td></tr></table></figure>

<h2 id="操作符与表达式"><a href="#操作符与表达式" class="headerlink" title="操作符与表达式"></a>操作符与表达式</h2><p>算法术运算符</p>
<table>
<thead>
<tr>
<th align="center">运算符</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">+</td>
<td align="center">相加</td>
</tr>
<tr>
<td align="center">-</td>
<td align="center">相减</td>
</tr>
<tr>
<td align="center">*</td>
<td align="center">相乘</td>
</tr>
<tr>
<td align="center">/</td>
<td align="center">相除</td>
</tr>
<tr>
<td align="center">%</td>
<td align="center">求余</td>
</tr>
</tbody></table>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//arithmetic 算术运算</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">arithmetic</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> a <span class="keyword">float32</span> = <span class="number">8</span></span><br><span class="line">	<span class="keyword">var</span> b <span class="keyword">float32</span> = <span class="number">3</span></span><br><span class="line">	<span class="keyword">var</span> c <span class="keyword">float32</span> = a + b</span><br><span class="line">	<span class="keyword">var</span> d <span class="keyword">float32</span> = a - b</span><br><span class="line">	<span class="keyword">var</span> e <span class="keyword">float32</span> = a * b</span><br><span class="line">	<span class="keyword">var</span> f <span class="keyword">float32</span> = a / b</span><br><span class="line">	fmt.Printf(<span class="string">"a=%.3f, b=%.3f, c=%.3f, d=%.3f, e=%.3f, f=%.3f\n"</span>, a, b, c, d, e, f)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>关系运算符</p>
<table>
<thead>
<tr>
<th align="center">运算符</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">==</td>
<td align="left">检查两个值是否相等，如果相等返回 True 否则返回 False</td>
</tr>
<tr>
<td align="center">!=</td>
<td align="left">检查两个值是否不相等，如果不相等返回 True 否则返回 False</td>
</tr>
<tr>
<td align="center">&gt;</td>
<td align="left">检查左边值是否大于右边值，如果是返回 True 否则返回 False</td>
</tr>
<tr>
<td align="center">&gt;=</td>
<td align="left">检查左边值是否大于等于右边值，如果是返回 True 否则返回 False</td>
</tr>
<tr>
<td align="center">&lt;</td>
<td align="left">检查左边值是否小于右边值，如果是返回 True 否则返回 False</td>
</tr>
<tr>
<td align="center">&lt;=</td>
<td align="left">检查左边值是否小于等于右边值，如果是返回 True 否则返回 False</td>
</tr>
</tbody></table>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//relational 关系运算符</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">relational</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> a <span class="keyword">float32</span> = <span class="number">8</span></span><br><span class="line">	<span class="keyword">var</span> b <span class="keyword">float32</span> = <span class="number">3</span></span><br><span class="line">	<span class="keyword">var</span> c <span class="keyword">float32</span> = <span class="number">8</span></span><br><span class="line">	fmt.Printf(<span class="string">"a==b吗 %t\n"</span>, a == b)</span><br><span class="line">	fmt.Printf(<span class="string">"a!=b吗 %t\n"</span>, a != b)</span><br><span class="line">	fmt.Printf(<span class="string">"a&gt;b吗 %t\n"</span>, a &gt; b)</span><br><span class="line">	fmt.Printf(<span class="string">"a&gt;=b吗 %t\n"</span>, a &gt;= b)</span><br><span class="line">	fmt.Printf(<span class="string">"a&lt;c吗 %t\n"</span>, a &lt; b)</span><br><span class="line">	fmt.Printf(<span class="string">"a&lt;=c吗 %t\n"</span>, a &lt;= c)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>逻辑运算符  </p>
<table>
<thead>
<tr>
<th align="center">运算符</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">&amp;&amp;</td>
<td align="left">逻辑 AND 运算符。 如果两边的操作数都是 True，则为 True，否则为 False</td>
</tr>
<tr>
<td align="center">||</td>
<td align="left">逻辑 OR 运算符。 如果两边的操作数有一个 True，则为 True，否则为 False</td>
</tr>
<tr>
<td align="center">!</td>
<td align="left">逻辑 NOT 运算符。 如果条件为 True，则为 False，否则为 True</td>
</tr>
</tbody></table>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//logistic 逻辑运算符</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">logistic</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> a <span class="keyword">float32</span> = <span class="number">8</span></span><br><span class="line">	<span class="keyword">var</span> b <span class="keyword">float32</span> = <span class="number">3</span></span><br><span class="line">	<span class="keyword">var</span> c <span class="keyword">float32</span> = <span class="number">8</span></span><br><span class="line">	fmt.Printf(<span class="string">"a&gt;b &amp;&amp; b&gt;c吗 %t\n"</span>, a &gt; b &amp;&amp; b &gt; c)</span><br><span class="line">	fmt.Printf(<span class="string">"a&gt;b || b&gt;c吗 %t\n"</span>, a &gt; b || b &gt; c)</span><br><span class="line">	fmt.Printf(<span class="string">"a&gt;b不成立，对吗 %t\n"</span>, !(a &gt; b))</span><br><span class="line">	fmt.Printf(<span class="string">"b&gt;c不成立，对吗 %t\n"</span>, !(b &gt; c))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>位运算符</p>
<table>
<thead>
<tr>
<th align="center">运算符</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">&amp;</td>
<td align="left">参与运算的两数各对应的二进位相与（两位均为1才为1）</td>
</tr>
<tr>
<td align="center">|</td>
<td align="left">参与运算的两数各对应的二进位相或（两位有一个为1就为1）</td>
</tr>
<tr>
<td align="center">^</td>
<td align="left">参与运算的两数各对应的二进位相异或，当两对应的二进位相同时为0，不同时为1。作为一元运算符时表示按位取反，，符号位也跟着变</td>
</tr>
<tr>
<td align="center">&lt;&lt;</td>
<td align="left">左移n位就是乘以2的n次方。a&lt;&lt;b是把a的各二进位全部左移b位，高位丢弃，低位补0。通过左移，符号位可能会变</td>
</tr>
<tr>
<td align="center">&gt;&gt;</td>
<td align="left">右移n位就是除以2的n次方。a&gt;&gt;b是把a的各二进位全部右移b位，正数高位补0，负数高位补1</td>
</tr>
</tbody></table>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//bit_op 位运算</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">bit_op</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Printf(<span class="string">"os arch %s, int size %d\n"</span>, runtime.GOARCH, strconv.IntSize) <span class="comment">//int是4字节还是8字节，取决于操作系统是32位还是64位</span></span><br><span class="line">	<span class="keyword">var</span> a <span class="keyword">int32</span> = <span class="number">260</span></span><br><span class="line">	fmt.Printf(<span class="string">"260     %s\n"</span>, util.BinaryFormat(a))</span><br><span class="line">	fmt.Printf(<span class="string">"-260    %s\n"</span>, util.BinaryFormat(-a)) <span class="comment">//负数用补码表示。在对应正数二进制表示的基础上，按拉取反，再末位加1</span></span><br><span class="line">	fmt.Printf(<span class="string">"260&amp;4   %s\n"</span>, util.BinaryFormat(a&amp;<span class="number">4</span>))</span><br><span class="line">	fmt.Printf(<span class="string">"260|3   %s\n"</span>, util.BinaryFormat(a|<span class="number">3</span>))</span><br><span class="line">	fmt.Printf(<span class="string">"260^7   %s\n"</span>, util.BinaryFormat(a^<span class="number">7</span>))     <span class="comment">//^作为二元运算符时表示异或</span></span><br><span class="line">	fmt.Printf(<span class="string">"^-260   %s\n"</span>, util.BinaryFormat(^-a))     <span class="comment">//^作为一元运算符时表示按位取反，符号位也跟着变</span></span><br><span class="line">	fmt.Printf(<span class="string">"-260&gt;&gt;10 %s\n"</span>, util.BinaryFormat(-a&gt;&gt;<span class="number">10</span>)) <span class="comment">//正数高位补0，负数高位补1</span></span><br><span class="line">	fmt.Printf(<span class="string">"-260&lt;&lt;3 %s\n"</span>, util.BinaryFormat(-a&lt;&lt;<span class="number">3</span>))   <span class="comment">//负数左移，可能变成正数</span></span><br><span class="line">	<span class="comment">//go语言没有循环（无符号）左/右移符号   &gt;&gt;&gt;  &lt;&lt;&lt;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>位移运算</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">正数右移：高位补<span class="number">0</span></span><br><span class="line">负数右移：高位补<span class="number">1</span></span><br><span class="line">负数左移：低位补<span class="number">0</span></span><br></pre></td></tr></table></figure>

<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/%E6%88%AA%E5%B1%8F2022-12-13%2019.39.31.png" alt="截屏2022-12-13 19.39.31">   </p>
<p>位运算的应用场景：  </p>
<ul>
<li>逻辑控制（运算快，省CPU）</li>
<li>bitmap和bloom filter（省内存）</li>
</ul>
<p>总之，位运算适用于对性能要求高的场景。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">bit_application</span><span class="params">()</span></span> &#123;</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">var</span> gender <span class="keyword">string</span> = <span class="string">"男"</span></span><br><span class="line">		<span class="keyword">var</span> degree <span class="keyword">string</span> = <span class="string">"本科"</span></span><br><span class="line">		<span class="keyword">var</span> is985 <span class="keyword">bool</span> = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">		<span class="keyword">var</span> condition1 <span class="keyword">bool</span> = gender == <span class="string">"男"</span></span><br><span class="line">		<span class="keyword">var</span> condition2 <span class="keyword">bool</span> = gender == <span class="string">"男"</span> &amp;&amp; is985</span><br><span class="line">		<span class="keyword">var</span> condition3 <span class="keyword">bool</span> = gender == <span class="string">"男"</span> &amp;&amp; degree == <span class="string">"硕士"</span> &amp;&amp; is985</span><br><span class="line">		fmt.Printf(<span class="string">"满足条件1 %t\n"</span>, condition1)</span><br><span class="line">		fmt.Printf(<span class="string">"满足条件2 %t\n"</span>, condition2)</span><br><span class="line">		fmt.Printf(<span class="string">"满足条件3 %t\n"</span>, condition3)</span><br><span class="line">	&#125;</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">var</span> gender <span class="keyword">byte</span> = <span class="number">1</span>      <span class="comment">//末位，1：男，0：女</span></span><br><span class="line">		<span class="keyword">var</span> degree <span class="keyword">byte</span> = <span class="number">1</span> &lt;&lt; <span class="number">1</span> <span class="comment">//倒数第二位，1：硕士，0：本科</span></span><br><span class="line">		<span class="keyword">var</span> is985 <span class="keyword">byte</span> = <span class="number">1</span> &lt;&lt; <span class="number">2</span>  <span class="comment">//倒数第三位，1：是985，2：不是985</span></span><br><span class="line">		<span class="keyword">var</span> man <span class="keyword">byte</span> = gender | is985</span><br><span class="line"></span><br><span class="line">		<span class="keyword">var</span> condition1 <span class="keyword">byte</span> = gender</span><br><span class="line">		<span class="keyword">var</span> condition2 <span class="keyword">byte</span> = gender | is985</span><br><span class="line">		<span class="keyword">var</span> condition3 <span class="keyword">byte</span> = gender | is985 | degree</span><br><span class="line">		fmt.Printf(<span class="string">"满足条件1 %t\n"</span>, man&amp;condition1 == condition1)</span><br><span class="line">		fmt.Printf(<span class="string">"满足条件2 %t\n"</span>, man&amp;condition2 == condition2)</span><br><span class="line">		fmt.Printf(<span class="string">"满足条件3 %t\n"</span>, man&amp;condition3 == condition3)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>赋值运算符</p>
<table>
<thead>
<tr>
<th align="center">运算符</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">=</td>
<td align="left">简单的赋值运算符，将一个表达式的值赋给一个左值</td>
</tr>
<tr>
<td align="center">+=</td>
<td align="left">相加后再赋值</td>
</tr>
<tr>
<td align="center">-=</td>
<td align="left">相减后再赋值</td>
</tr>
<tr>
<td align="center">*=</td>
<td align="left">相乘后再赋值</td>
</tr>
<tr>
<td align="center">/=</td>
<td align="left">相除后再赋值</td>
</tr>
<tr>
<td align="center">%=</td>
<td align="left">求余后再赋值</td>
</tr>
<tr>
<td align="center">&lt;&lt;=</td>
<td align="left">左移后赋值</td>
</tr>
<tr>
<td align="center">&gt;&gt;=</td>
<td align="left">右移后赋值</td>
</tr>
<tr>
<td align="center">&amp;=</td>
<td align="left">按位与后赋值</td>
</tr>
<tr>
<td align="center">|=</td>
<td align="left">按位或后赋值</td>
</tr>
<tr>
<td align="center">^=</td>
<td align="left">按位异或后赋值</td>
</tr>
</tbody></table>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//assignment 赋值运算</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">assignment</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> a, b <span class="keyword">int</span> = <span class="number">8</span>, <span class="number">3</span></span><br><span class="line">	a += b</span><br><span class="line">	fmt.Printf(<span class="string">"a+=b %d\n"</span>, a)</span><br><span class="line">	a, b = <span class="number">8</span>, <span class="number">3</span></span><br><span class="line">	a -= b</span><br><span class="line">	fmt.Printf(<span class="string">"a-=b %d\n"</span>, a)</span><br><span class="line">	a, b = <span class="number">8</span>, <span class="number">3</span></span><br><span class="line">	a *= b</span><br><span class="line">	fmt.Printf(<span class="string">"a*=b %d\n"</span>, a)</span><br><span class="line">	a, b = <span class="number">8</span>, <span class="number">3</span></span><br><span class="line">	a /= b</span><br><span class="line">	fmt.Printf(<span class="string">"a/=b %d\n"</span>, a)</span><br><span class="line">	a, b = <span class="number">8</span>, <span class="number">3</span></span><br><span class="line">	a %= b</span><br><span class="line">	fmt.Printf(<span class="string">"a%%=b %d\n"</span>, a) <span class="comment">//%在fmt里有特殊含意，所以需要前面再加个%转义一下</span></span><br><span class="line">	a, b = <span class="number">8</span>, <span class="number">3</span></span><br><span class="line">	a &lt;&lt;= b</span><br><span class="line">	fmt.Printf(<span class="string">"a&lt;&lt;=b %d\n"</span>, a)</span><br><span class="line">	a, b = <span class="number">8</span>, <span class="number">3</span></span><br><span class="line">	a &gt;&gt;= b</span><br><span class="line">	fmt.Printf(<span class="string">"a&gt;&gt;=b %d\n"</span>, a)</span><br><span class="line">	a, b = <span class="number">8</span>, <span class="number">3</span></span><br><span class="line">	a &amp;= b</span><br><span class="line">	fmt.Printf(<span class="string">"a&amp;=b %d\n"</span>, a)</span><br><span class="line">	a, b = <span class="number">8</span>, <span class="number">3</span></span><br><span class="line">	a |= b</span><br><span class="line">	fmt.Printf(<span class="string">"a|=b %d\n"</span>, a)</span><br><span class="line">	a, b = <span class="number">8</span>, <span class="number">3</span></span><br><span class="line">	a ^= b</span><br><span class="line">	fmt.Printf(<span class="string">"a^=b %d\n"</span>, a)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>补码</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>按按取反</span><br><span class="line"><span class="number">2.</span>末位加<span class="number">1</span></span><br><span class="line"></span><br><span class="line">最高位为<span class="number">0</span>是正数</span><br><span class="line">最高位为<span class="number">1</span>是负数</span><br></pre></td></tr></table></figure>

<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/%E6%88%AA%E5%B1%8F2022-12-13%2019.27.14.png" alt="截屏2022-12-13 19.27.14"></p>
<h2 id="变量、常量、字面量"><a href="#变量、常量、字面量" class="headerlink" title="变量、常量、字面量"></a>变量、常量、字面量</h2><h3 id="变量类型"><a href="#变量类型" class="headerlink" title="变量类型"></a>变量类型</h3><table>
<thead>
<tr>
<th align="center">类型</th>
<th align="center">go变量类型</th>
<th align="center">fmt输出</th>
</tr>
</thead>
<tbody><tr>
<td align="center">整型</td>
<td align="center">int int8 int16 int32 int64 uint uint8 uint16 uint32 uint64</td>
<td align="center">%d %b %x</td>
</tr>
<tr>
<td align="center">浮点型</td>
<td align="center">float32 float64</td>
<td align="center">%f %e %g</td>
</tr>
<tr>
<td align="center">布尔型</td>
<td align="center">bool</td>
<td align="center">%t</td>
</tr>
<tr>
<td align="center">指针</td>
<td align="center">uintptr</td>
<td align="center">%p</td>
</tr>
<tr>
<td align="center">引用</td>
<td align="center">map slice channel</td>
<td align="center">%v</td>
</tr>
<tr>
<td align="center">字节</td>
<td align="center">byte</td>
<td align="center">%c</td>
</tr>
<tr>
<td align="center">任意字符</td>
<td align="center">rune</td>
<td align="center">%c</td>
</tr>
<tr>
<td align="center">字符串</td>
<td align="center">string</td>
<td align="center">%s</td>
</tr>
<tr>
<td align="center">错误</td>
<td align="center">error</td>
<td align="center">%v</td>
</tr>
</tbody></table>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> = <span class="keyword">int64</span></span><br><span class="line"><span class="keyword">uint</span>比<span class="keyword">int</span>的可用大小*<span class="number">2</span>（<span class="keyword">int</span>需要有<span class="number">1</span>位表示正负）</span><br></pre></td></tr></table></figure>

<h3 id="变量声明"><a href="#变量声明" class="headerlink" title="变量声明"></a>变量声明</h3><p>Go语言变量必须先声明再使用，所谓使用指读取或修改。<br>标题声明</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name <span class="keyword">string</span> </span><br><span class="line"><span class="keyword">var</span> age <span class="keyword">int</span> </span><br><span class="line"><span class="keyword">var</span> isOk <span class="keyword">bool</span></span><br></pre></td></tr></table></figure>

<p>批量声明</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> ( </span><br><span class="line">	name <span class="keyword">string</span> </span><br><span class="line">	age <span class="keyword">int</span> </span><br><span class="line">	isOk <span class="keyword">bool</span> </span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h3 id="变量初始化"><a href="#变量初始化" class="headerlink" title="变量初始化"></a>变量初始化</h3><p>如果声明后未显式初始化，数值型初始化0，字符串初始化为空字符串，布尔型初始化为false，引用类型、函数、指针、接口初始化为nil。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a <span class="keyword">string</span>=<span class="string">"china"</span>  <span class="comment">//初始化一个变量</span></span><br><span class="line"><span class="keyword">var</span> a=<span class="string">"china"</span>  <span class="comment">//类型推断为string</span></span><br><span class="line"><span class="keyword">var</span> a,b <span class="keyword">int</span>=<span class="number">3</span>,<span class="number">7</span>  <span class="comment">//初始化多个变量</span></span><br><span class="line"><span class="keyword">var</span> a,b=<span class="string">"china"</span>,<span class="number">7</span>  <span class="comment">//初始化多个变量，每个变量都单独地执行类型推断</span></span><br></pre></td></tr></table></figure>

<p>函数内部的变量(非全局变量)可以通过:=声明并初始化。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">a:=<span class="number">3</span></span><br></pre></td></tr></table></figure>

<p>下划线表示匿名变量。匿名变量不占命名空间，不会分配内存，因此可以重复使用。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">_=<span class="number">2</span>+<span class="number">4</span></span><br></pre></td></tr></table></figure>

<h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><p>常量在定义时必须赋值，且程序运行期间其值不能改变。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> PI <span class="keyword">float32</span>=<span class="number">3.14</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span>(</span><br><span class="line">    PI=<span class="number">3.14</span></span><br><span class="line">    E=<span class="number">2.71</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span>(</span><br><span class="line">    a=<span class="number">100</span></span><br><span class="line">    b	<span class="comment">//100，跟上一行的值相同</span></span><br><span class="line">    c	<span class="comment">//100，跟上一行的值相同</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>iota</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span>(</span><br><span class="line">    a=<span class="literal">iota</span>	<span class="comment">//0</span></span><br><span class="line">    b		<span class="comment">//1</span></span><br><span class="line">    c		<span class="comment">//2</span></span><br><span class="line">    d		<span class="comment">//3</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span>(</span><br><span class="line">    a=<span class="literal">iota</span> 	<span class="comment">//0</span></span><br><span class="line">    b		<span class="comment">//1</span></span><br><span class="line">    _		<span class="comment">//2</span></span><br><span class="line">    d		<span class="comment">//3</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span>(</span><br><span class="line">    a=<span class="literal">iota</span> 	<span class="comment">//0</span></span><br><span class="line">    b=<span class="number">30</span>    </span><br><span class="line">    c=<span class="literal">iota</span> 	<span class="comment">//2</span></span><br><span class="line">    d		<span class="comment">//3</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span>(</span><br><span class="line">    _=<span class="literal">iota</span>		<span class="comment">// iota =0</span></span><br><span class="line">    KB=<span class="number">1</span>&lt;&lt;(<span class="number">10</span>* <span class="literal">iota</span>) 	<span class="comment">// iota =1</span></span><br><span class="line">    MB=<span class="number">1</span>&lt;&lt;(<span class="number">10</span>* <span class="literal">iota</span>) 	<span class="comment">// iota =2</span></span><br><span class="line">    GB=<span class="number">1</span>&lt;&lt;(<span class="number">10</span>* <span class="literal">iota</span>) 	<span class="comment">// iota =3</span></span><br><span class="line">    TB=<span class="number">1</span>&lt;&lt;(<span class="number">10</span>* <span class="literal">iota</span>) 	<span class="comment">// iota =4</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span>(</span><br><span class="line">    a,b=<span class="literal">iota</span>+<span class="number">1</span>, <span class="literal">iota</span>+<span class="number">2</span>	<span class="comment">//1,2  iota =0</span></span><br><span class="line">     c,d			<span class="comment">//2,3  iota =1</span></span><br><span class="line">     e,f			<span class="comment">//3,4  iota =2</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h3 id="字面量"><a href="#字面量" class="headerlink" title="字面量"></a>字面量</h3><p>字面量–没有出现变量名，直接出现了值。基础类型的字面量相当于是常量。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">fmt.Printf(<span class="string">"%t\n"</span>, <span class="number">04</span> == <span class="number">4.00</span>) <span class="comment">//用到了整型字面量和浮点型字面量</span></span><br><span class="line">fmt.Printf(<span class="string">"%v\n"</span>, <span class="number">.4i</span>) <span class="comment">//虚数字面量 0.4i</span></span><br><span class="line">fmt.Printf(<span class="string">"%t\n"</span>, <span class="string">'\u4f17'</span> == <span class="string">'众'</span>) <span class="comment">//Unicode和rune字面量</span></span><br><span class="line">fmt.Printf(<span class="string">"Hello\nWorld\n!\n"</span>) <span class="comment">//字符串字面量</span></span><br></pre></td></tr></table></figure>

<h2 id="变量作用域"><a href="#变量作用域" class="headerlink" title="变量作用域"></a>变量作用域</h2><p>&#8195;&#8195;对于全局变量，如果以大写字母开头，所有地方都可以访问，跨package访问时需要带上package名称；如果以小写字母开头，则本package内都可以访问。<br>&#8195;&#8195;函数内部的局部变量，仅本函数内可以访问。{}可以固定一个作用域。内部声明的变量可以跟外部声明的变量有冲突，以内部的为准–就近原则。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> (</span><br><span class="line">    A=<span class="number">3</span>	<span class="comment">//所有地方都可以访问</span></span><br><span class="line">    b=<span class="number">4</span>	<span class="comment">//本package内可以访问</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">foo</span><span class="params">()</span></span>&#123;</span><br><span class="line">    b:=<span class="number">5</span>  <span class="comment">//本函数内可以访问</span></span><br><span class="line">    &#123;</span><br><span class="line">        b:=<span class="number">6</span>  <span class="comment">//本作用域内可以访问</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="注释与godoc"><a href="#注释与godoc" class="headerlink" title="注释与godoc"></a>注释与godoc</h2><h3 id="注释的形式"><a href="#注释的形式" class="headerlink" title="注释的形式"></a>注释的形式</h3><ul>
<li>单行注释，以//打头。</li>
<li>多行注释有2种形式：<ol>
<li>连续多行以//打头，注意多行注释之间不能出现空行。</li>
<li>在段前使用/*，段尾使用*/。</li>
</ol>
</li>
<li>注释行前加缩进即可写go代码。</li>
<li>注释中给定的关键词。NOTE: 引人注意，TODO: 将来需要优化，Deprecated: 变量或函数强烈建议不要再使用。</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Add 2个整数相加</span></span><br><span class="line"><span class="comment">//返回和。</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//<span class="doctag">NOTE:</span> 注释可以有多行，但中间不能出现空行（仅有//不算空行）。</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Add</span><span class="params">(a, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Sub 函数使用示例：</span></span><br><span class="line"><span class="comment">  for i:=0;i&lt;3;i++&#123;</span></span><br><span class="line"><span class="comment">	  Sub(i+1, i)</span></span><br><span class="line"><span class="comment">  &#125;</span></span><br><span class="line"><span class="comment">看到了吗？只需要行前缩进，注释里就可以写go代码，是不是很简单。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Sub</span><span class="params">(a, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> a - b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//<span class="doctag">TODO:</span> Prod 该函数不能并发调用，需要优化</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Prod</span><span class="params">(a, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> a * b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Deprecated: Div 不要再调用了</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Div</span><span class="params">(a, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> a / b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="注释的位置"><a href="#注释的位置" class="headerlink" title="注释的位置"></a>注释的位置</h3><p>针对行的注释在行上方或右侧。函数的上方在func xxx()上方。结构体的注释在type xxx struct上方。包注释在package xxx的上方。一个包只需要在一个地方写包注释，通常会专门写一个doc.go，里面只有一行package xxx和关于包的注释。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// FormatBool, FormatFloat, FormatInt, and FormatUint convert values to strings:</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//	s := strconv.FormatBool(true)</span></span><br><span class="line"><span class="comment">//	s := strconv.FormatFloat(3.1415, 'E', -1, 64)</span></span><br><span class="line"><span class="comment">//	s := strconv.FormatInt(-42, 16)</span></span><br><span class="line"><span class="comment">//	s := strconv.FormatUint(42, 16)</span></span><br><span class="line"><span class="keyword">package</span> fmt</span><br></pre></td></tr></table></figure>

<h3 id="go-doc"><a href="#go-doc" class="headerlink" title="go doc"></a>go doc</h3><p>go doc是go自带的命令。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">go doc entrance_class/util</span><br></pre></td></tr></table></figure>

<p>上述命令查看entrance_class/util包的注释。</p>
<h3 id="godoc"><a href="#godoc" class="headerlink" title="godoc"></a>godoc</h3><p>godoc是第三方工具，可以为项目代码导出网页版的注释文档。安装godoc命令如下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">go get -u golang.org/x/tools/cmd/godoc</span><br><span class="line">go install golang.org/x/tools/cmd/godoc@latest</span><br></pre></td></tr></table></figure>

<p>启动http服务：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">godoc -http=:6060</span><br></pre></td></tr></table></figure>

<p>用浏览器访问<a href="http://127.0.0.1:6060" target="_blank" rel="noopener">http://127.0.0.1:6060</a> ，可以查看go标准库的文档。 </p>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang基础</tag>
      </tags>
  </entry>
  <entry>
    <title>[「直击面试」MySQL三万字精华总结]</title>
    <url>/2020/06/22/MySQL%E4%B8%89%E4%B8%87%E5%AD%97%E7%B2%BE%E5%8D%8E%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<p><img src="https://gitee.com/wjxyzs/img/raw/master/img/mysql%E6%94%BB%E7%95%A5.png" alt=""></p>
<blockquote>
<p>写在之前：不建议那种上来就是各种面试题罗列，然后背书式的去记忆，对技术的提升帮助很小，对正经面试也没什么帮助，有点东西的面试官深挖下就懵逼了。</p>
<p>个人建议把面试题看作是费曼学习法中的回顾、简化的环节，准备面试的时候，跟着题目先自己讲给自己听，看看自己会满意吗，不满意就继续学习这个点，如此反复，好的offer离你不远的，奥利给</p>
<p>……</p>
</blockquote>
<blockquote>
<p>成长手册，<strong>GitHub</strong> <a href="https://github.com/rogerXS80/roger" target="_blank" rel="noopener">Lupinus</a> ，N线互联网开发必备技能兵器谱</p>
</blockquote>
<p><img src="https://gitee.com/wjxyzs/img/raw/master/img/1734bff308f75df1.jpg" alt=""></p>
<h2 id="一、MySQL架构"><a href="#一、MySQL架构" class="headerlink" title="一、MySQL架构"></a>一、MySQL架构</h2><p>和其它数据库相比，MySQL有点与众不同，它的架构可以在多种不同场景中应用并发挥良好作用。主要体现在存储引擎的架构上，<strong>插件式的存储引擎架构将查询处理和其它的系统任务以及数据的存储提取相分离</strong>。这种架构可以根据业务的需求和实际需要选择合适的存储引擎。</p>
<p><img src="https://gitee.com/wjxyzs/img/raw/master/img/1734bff308eb9e2d.jpg" alt=""></p>
<ul>
<li><strong>连接层</strong>：最上层是一些客户端和连接服务。<strong>主要完成一些类似于连接处理、授权认证、及相关的安全方案</strong>。在该层上引入了线程池的概念，为通过认证安全接入的客户端提供线程。同样在该层上可以实现基于SSL的安全链接。服务器也会为安全接入的每个客户端验证它所具有的操作权限。</li>
<li><strong>服务层</strong>：第二层服务层，主要完成大部分的核心服务功能， 包括查询解析、分析、优化、缓存、以及所有的内置函数，所有跨存储引擎的功能也都在这一层实现，包括触发器、存储过程、视图等</li>
<li><strong>引擎层</strong>：第三层存储引擎层，存储引擎真正的负责了MySQL中数据的存储和提取，服务器通过API与存储引擎进行通信。不同的存储引擎具有的功能不同，这样我们可以根据自己的实际需要进行选取</li>
<li><strong>存储层</strong>：第四层为数据存储层，主要是将数据存储在运行于该设备的文件系统之上，并完成与存储引擎的交互</li>
</ul>
<blockquote>
<p>画出 MySQL 架构图，这种变态问题都能问的出来MySQL 的查询流程具体是？or  一条SQL语句在MySQL中如何执行的？</p>
</blockquote>
<p>客户端请求 —&gt; 连接器（验证用户身份，给予权限） —&gt; 查询缓存（存在缓存则直接返回，不存在则执行后续操作） —&gt; 分析器（对SQL进行词法分析和语法分析操作） —&gt; 优化器（主要对执行的sql优化选择最优的执行方案方法） —&gt; 执行器（执行时会先看用户是否有执行权限，有才去使用这个引擎提供的接口） —&gt; 去引擎层获取数据返回（如果开启查询缓存则会缓存查询结果）</p>
<p><img src="https://gitee.com/wjxyzs/img/raw/master/img/1734bff309fc730f.jpg" alt=""></p>
<hr>
<blockquote>
<p>说说MySQL有哪些存储引擎？都有哪些区别？</p>
</blockquote>
<h2 id="二、存储引擎"><a href="#二、存储引擎" class="headerlink" title="二、存储引擎"></a>二、存储引擎</h2><p>存储引擎是MySQL的组件，用于处理不同表类型的SQL操作。不同的存储引擎提供不同的存储机制、索引技巧、锁定水平等功能，使用不同的存储引擎，还可以获得特定的功能。</p>
<p>使用哪一种引擎可以灵活选择，<strong>一个数据库中多个表可以使用不同引擎以满足各种性能和实际需求</strong>，使用合适的存储引擎，将会提高整个数据库的性能 。</p>
<p>MySQL服务器使用<strong>可插拔</strong>的存储引擎体系结构，可以从运行中的 MySQL 服务器加载或卸载存储引擎 。</p>
<h3 id="查看存储引擎"><a href="#查看存储引擎" class="headerlink" title="查看存储引擎"></a>查看存储引擎</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查看支持的存储引擎</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">ENGINES</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看默认存储引擎</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">VARIABLES</span> <span class="keyword">LIKE</span> <span class="string">'storage_engine'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--查看具体某一个表所使用的存储引擎，这个默认存储引擎被修改了！</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> tablename</span><br><span class="line"></span><br><span class="line"><span class="comment">--准确查看某个数据库中的某一表所使用的存储引擎</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">table</span> <span class="keyword">status</span> <span class="keyword">like</span> <span class="string">'tablename'</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">table</span> <span class="keyword">status</span> <span class="keyword">from</span> <span class="keyword">database</span> <span class="keyword">where</span> <span class="keyword">name</span>=<span class="string">"tablename"</span></span><br></pre></td></tr></table></figure>

<h3 id="设置存储引擎"><a href="#设置存储引擎" class="headerlink" title="设置存储引擎"></a>设置存储引擎</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 建表时指定存储引擎。默认的就是INNODB，不需要设置</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t1 (i <span class="built_in">INT</span>) <span class="keyword">ENGINE</span> = <span class="keyword">INNODB</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t2 (i <span class="built_in">INT</span>) <span class="keyword">ENGINE</span> = CSV;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t3 (i <span class="built_in">INT</span>) <span class="keyword">ENGINE</span> = <span class="keyword">MEMORY</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 修改存储引擎</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> t <span class="keyword">ENGINE</span> = <span class="keyword">InnoDB</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 修改默认存储引擎，也可以在配置文件my.cnf中修改默认引擎</span></span><br><span class="line"><span class="keyword">SET</span> default_storage_engine=NDBCLUSTER;</span><br></pre></td></tr></table></figure>

<p>默认情况下，每当 <code>CREATE TABLE</code> 或 <code>ALTER TABLE</code> 不能使用默认存储引擎时，都会生成一个警告。为了防止在所需的引擎不可用时出现令人困惑的意外行为，可以启用 <code>NO_ENGINE_SUBSTITUTION SQL</code> 模式。如果所需的引擎不可用，则此设置将产生错误而不是警告，并且不会创建或更改表</p>
<h3 id="存储引擎对比"><a href="#存储引擎对比" class="headerlink" title="存储引擎对比"></a>存储引擎对比</h3><p>常见的存储引擎就 InnoDB、MyISAM、Memory、NDB。</p>
<p>InnoDB 现在是 MySQL 默认的存储引擎，支持<strong>事务、行级锁定和外键</strong></p>
<h3 id="文件存储结构对比"><a href="#文件存储结构对比" class="headerlink" title="文件存储结构对比"></a>文件存储结构对比</h3><p>在 MySQL中建立任何一张数据表，在其数据目录对应的数据库目录下都有对应表的 <code>.frm</code> 文件，<code>.frm</code> 文件是用来保存每个数据表的元数据(meta)信息，包括表结构的定义等，与数据库存储引擎无关，也就是任何存储引擎的数据表都必须有<code>.frm</code>文件，命名方式为 数据表名.frm，如user.frm。</p>
<p>查看MySQL 数据保存在哪里：<code>show variables like &#39;data%&#39;</code></p>
<p>MyISAM 物理文件结构为：</p>
<ul>
<li><code>.frm</code>文件：与表相关的元数据信息都存放在frm文件，包括表结构的定义信息等</li>
<li><code>.MYD</code> (<code>MYData</code>) 文件：MyISAM 存储引擎专用，用于存储MyISAM 表的数据</li>
<li><code>.MYI</code> (<code>MYIndex</code>)文件：MyISAM 存储引擎专用，用于存储MyISAM 表的索引相关信息</li>
</ul>
<p>InnoDB 物理文件结构为：</p>
<ul>
<li><p><code>.frm</code> 文件：与表相关的元数据信息都存放在frm文件，包括表结构的定义信息等</p>
</li>
<li><p><code>.ibd</code> 文件或 <code>.ibdata</code> 文件： 这两种文件都是存放 InnoDB 数据的文件，之所以有两种文件形式存放 InnoDB 的数据，是因为 InnoDB 的数据存储方式能够通过配置来决定是使用<strong>共享表空间</strong>存放存储数据，还是用<strong>独享表空间</strong>存放存储数据。</p>
<p>独享表空间存储方式使用<code>.ibd</code>文件，并且每个表一个<code>.ibd</code>文件 共享表空间存储方式使用<code>.ibdata</code>文件，所有表共同使用一个<code>.ibdata</code>文件（或多个，可自己配置）</p>
</li>
</ul>
<h3 id="面试这么回答"><a href="#面试这么回答" class="headerlink" title="面试这么回答"></a>面试这么回答</h3><ol>
<li>InnoDB 支持事务，MyISAM 不支持事务。这是 MySQL 将默认存储引擎从 MyISAM 变成 InnoDB 的重要原因之一；</li>
<li>InnoDB 支持外键，而 MyISAM 不支持。对一个包含外键的 InnoDB 表转为 MYISAM 会失败；</li>
<li>InnoDB 是聚簇索引，MyISAM 是非聚簇索引。聚簇索引的文件存放在主键索引的叶子节点上，因此 InnoDB 必须要有主键，通过主键索引效率很高。但是辅助索引需要两次查询，先查询到主键，然后再通过主键查询到数据。因此，主键不应该过大，因为主键太大，其他索引也都会很大。而 MyISAM 是非聚集索引，数据文件是分离的，索引保存的是数据文件的指针。主键索引和辅助索引是独立的。</li>
<li>InnoDB 不保存表的具体行数，执行<code>select count(*) from table</code> 时需要全表扫描。而 MyISAM 用一个变量保存了整个表的行数，执行上述语句时只需要读出该变量即可，速度很快；</li>
<li>InnoDB 最小的锁粒度是行锁，MyISAM 最小的锁粒度是表锁。一个更新语句会锁住整张表，导致其他查询和更新都会被阻塞，因此并发访问受限。这也是 MySQL 将默认存储引擎从 MyISAM 变成 InnoDB 的重要原因之一；</li>
</ol>
<table>
<thead>
<tr>
<th align="center">对比项</th>
<th align="center">MyISAM</th>
<th align="center">InnoDB</th>
</tr>
</thead>
<tbody><tr>
<td align="center">主外键</td>
<td align="center">不支持</td>
<td align="center">支持</td>
</tr>
<tr>
<td align="center">单元格</td>
<td align="center">单元格</td>
<td align="center">单元格</td>
</tr>
<tr>
<td align="center">事务</td>
<td align="center">不支持</td>
<td align="center">支持</td>
</tr>
<tr>
<td align="center">行表锁</td>
<td align="center">表锁，即使操作一条记录也会锁住整个表，不适合高并发的操作</td>
<td align="center">行锁,操作时只锁某一行，不对其它行有影响，适合高并发的操作</td>
</tr>
<tr>
<td align="center">缓存</td>
<td align="center">只缓存索引，不缓存真实数据</td>
<td align="center">不仅缓存索引还要缓存真实数据，对内存要求较高，而且内存大小对性能有决定性的影响</td>
</tr>
<tr>
<td align="center">表空间</td>
<td align="center">小</td>
<td align="center">大</td>
</tr>
<tr>
<td align="center">关注点</td>
<td align="center">性能</td>
<td align="center">事务</td>
</tr>
<tr>
<td align="center">默认安装</td>
<td align="center">是</td>
<td align="center">是</td>
</tr>
</tbody></table>
<blockquote>
<p>一张表，里面有ID自增主键，当insert了17条记录之后，删除了第15,16,17条记录，再把Mysql重启，再insert一条记录，这条记录的ID是18还是15 ？</p>
</blockquote>
<p>如果表的类型是MyISAM，那么是18。因为MyISAM表会把自增主键的最大ID 记录到数据文件中，重启MySQL自增主键的最大ID也不会丢失；</p>
<p>如果表的类型是InnoDB，那么是15。因为InnoDB 表只是把自增主键的最大ID记录到内存中，所以重启数据库或对表进行OPTION操作，都会导致最大ID丢失。</p>
<blockquote>
<p>哪个存储引擎执行 select count(*) 更快，为什么?</p>
</blockquote>
<p>MyISAM更快，因为MyISAM内部维护了一个计数器，可以直接调取。</p>
<ul>
<li>在 MyISAM 存储引擎中，把表的总行数存储在磁盘上，当执行 select count(*) from t 时，直接返回总数据。</li>
<li>在 InnoDB 存储引擎中，跟 MyISAM 不一样，没有将总行数存储在磁盘上，当执行 select count(*) from t 时，会先把数据读出来，一行一行的累加，最后返回总数量。</li>
</ul>
<p>InnoDB 中 count(*) 语句是在执行的时候，全表扫描统计总数量，所以当数据越来越大时，语句就越来越耗时了，为什么 InnoDB 引擎不像 MyISAM 引擎一样，将总行数存储到磁盘上？这跟 InnoDB 的事务特性有关，由于多版本并发控制（MVCC）的原因，InnoDB 表“应该返回多少行”也是不确定的。</p>
<h2 id="三、数据类型"><a href="#三、数据类型" class="headerlink" title="三、数据类型"></a>三、数据类型</h2><p>主要包括以下五大类：</p>
<ul>
<li>整数类型：BIT、BOOL、TINY INT、SMALL INT、MEDIUM INT、 INT、 BIG INT</li>
<li>浮点数类型：FLOAT、DOUBLE、DECIMAL</li>
<li>字符串类型：CHAR、VARCHAR、TINY TEXT、TEXT、MEDIUM TEXT、LONGTEXT、TINY BLOB、BLOB、MEDIUM BLOB、LONG BLOB</li>
<li>日期类型：Date、DateTime、TimeStamp、Time、Year</li>
<li>其他数据类型：BINARY、VARBINARY、ENUM、SET、Geometry、Point、MultiPoint、LineString、MultiLineString、Polygon、GeometryCollection等</li>
</ul>
<p><img src="https://gitee.com/wjxyzs/img/raw/master/img/1734bff30a28cf0d.jpg" alt=""></p>
<p><img src="https://gitee.com/wjxyzs/img/raw/master/img/1734bff309f9eea0.jpg" alt=""></p>
<p><img src="https://gitee.com/wjxyzs/img/raw/master/img/1734bff30a5e00fe.jpg" alt=""></p>
<blockquote>
<p>CHAR 和 VARCHAR 的区别？</p>
</blockquote>
<p>char是固定长度，varchar长度可变：</p>
<p>char(n) 和 varchar(n) 中括号中 n 代表字符的个数，并不代表字节个数，比如 CHAR(30) 就可以存储 30 个字符。</p>
<p>存储时，前者不管实际存储数据的长度，直接按 char 规定的长度分配存储空间；而后者会根据实际存储的数据分配最终的存储空间</p>
<p>相同点：</p>
<ol>
<li>char(n)，varchar(n)中的n都代表字符的个数</li>
<li>超过char，varchar最大长度n的限制后，字符串会被截断。</li>
</ol>
<p>不同点：</p>
<ol>
<li>char不论实际存储的字符数都会占用n个字符的空间，而varchar只会占用实际字符应该占用的字节空间加1（实际长度length，0&lt;=length&lt;255）或加2（length&gt;255）。因为varchar保存数据时除了要保存字符串之外还会加一个字节来记录长度（如果列声明长度大于255则使用两个字节来保存长度）。</li>
<li>能存储的最大空间限制不一样：char的存储上限为255字节。</li>
<li>char在存储时会截断尾部的空格，而varchar不会。</li>
</ol>
<p>char是适合存储很短的、一般固定长度的字符串。例如，char非常适合存储密码的MD5值，因为这是一个定长的值。对于非常短的列，char比varchar在存储空间上也更有效率。</p>
<blockquote>
<p>列的字符串类型可以是什么？</p>
</blockquote>
<p>字符串类型是：SET、BLOB、ENUM、CHAR、TEXT、VARCHAR</p>
<blockquote>
<p>BLOB和TEXT有什么区别？</p>
</blockquote>
<p>BLOB是一个二进制对象，可以容纳可变数量的数据。有四种类型的BLOB：TINYBLOB、BLOB、MEDIUMBLO和 LONGBLOB</p>
<p>TEXT是一个不区分大小写的BLOB。四种TEXT类型：TINYTEXT、TEXT、MEDIUMTEXT 和 LONGTEXT。</p>
<p>BLOB 保存二进制数据，TEXT 保存字符数据。</p>
<hr>
<h2 id="四、索引"><a href="#四、索引" class="headerlink" title="四、索引"></a>四、索引</h2><blockquote>
<p>说说你对 MySQL 索引的理解？数据库索引的原理，为什么要用 B+树，为什么不用二叉树？聚集索引与非聚集索引的区别？InnoDB引擎中的索引策略，了解过吗？创建索引的方式有哪些？聚簇索引/非聚簇索引，mysql索引底层实现，为什么不用B-tree，为什么不用hash，叶子结点存放的是数据还是指向数据的内存地址，使用索引需要注意的几个地方？</p>
</blockquote>
<ul>
<li><p>MYSQL官方对索引的定义为：索引（Index）是帮助MySQL高效获取数据的数据结构，所以说<strong>索引的本质是：数据结构</strong></p>
</li>
<li><p>索引的目的在于提高查询效率，可以类比字典、 火车站的车次表、图书的目录等 。</p>
</li>
<li><p>可以简单的理解为“排好序的快速查找数据结构”，数据本身之外，<font color=red size=3><strong>数据库还维护者一个满足特定查找算法的数据结构</strong></font>，这些数据结构以某种方式引用（指向）数据，这样就可以在这些数据结构上实现高级查找算法。这种数据结构，就是索引。下图是一种可能的索引方式示例。</p>
<p><img src="https://gitee.com/wjxyzs/img/raw/master/img/1734bff356f9f2f0.jpg" alt=""></p>
<p>左边的数据表，一共有两列七条记录，最左边的是数据记录的物理地址</p>
<p>为了加快Col2的查找，可以维护一个右边所示的二叉查找树，每个节点分别包含索引键值，和一个指向对应数据记录物理地址的指针，这样就可以运用二叉查找在一定的复杂度内获取到对应的数据，从而快速检索出符合条件的记录。</p>
</li>
<li><p>索引本身也很大，不可能全部存储在内存中，<strong>一般以索引文件的形式存储在磁盘上</strong></p>
</li>
<li><p>平常说的索引，没有特别指明的话，就是B+树（多路搜索树，不一定是二叉树）结构组织的索引。其中聚集索引，次要索引，覆盖索引，复合索引，前缀索引，唯一索引默认都是使用B+树索引，统称索引。此外还有哈希索引等。</p>
</li>
</ul>
<h3 id="基本语法："><a href="#基本语法：" class="headerlink" title="基本语法："></a>基本语法：</h3><ul>
<li><p>创建：</p>
<ul>
<li><p>创建索引：<font color=red size=3><code>CREATE [UNIQUE] INDEX indexName ON mytable(username(length));</code></font></p>
<p>如果是CHAR，VARCHAR类型，length可以小于字段实际长度；如果是BLOB和TEXT类型，必须指定 length。</p>
</li>
<li><p>修改表结构(添加索引)：<font color=red size=3><code>ALTER table tableName ADD [UNIQUE] INDEX indexName(columnName)</code></font></p>
</li>
</ul>
</li>
<li><p>删除：<font color=red size=3><code>DROP INDEX [indexName] ON mytable;</code></font></p>
</li>
<li><p>查看：<font color=red size=3><code>SHOW INDEX FROM table_name\\G</code></font> –可以通过添加 \G 来格式化输出信息。</p>
</li>
<li><p>使用ALERT命令</p>
<ul>
<li><font color=red size=3><code>ALTER TABLE tbl_name ADD PRIMARY KEY (column_list):</code></font> 该语句添加一个主键，这意味着索引值必须是唯一的，且不能为NULL。</li>
<li><font color=red size=3><code>ALTER TABLE tbl_name ADD UNIQUE index_name (column_list</code></font> 这条语句创建索引的值必须是唯一的（除了NULL外，NULL可能会出现多次）。</li>
<li><font color=red size=3><code>ALTER TABLE tbl_name ADD INDEX index_name (column_list)</code></font> 添加普通索引，索引值可出现多次。</li>
<li><font color=red size=3><code>ALTER TABLE tbl_name ADD FULLTEXT index_name (column_list)</code></font>该语句指定了索引为 FULLTEXT ，用于全文索引。</li>
</ul>
</li>
</ul>
<h3 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h3><ul>
<li><strong>提高数据检索效率，降低数据库IO成本</strong></li>
<li><strong>降低数据排序的成本，降低CPU的消耗</strong></li>
</ul>
<h3 id="劣势"><a href="#劣势" class="headerlink" title="劣势"></a>劣势</h3><ul>
<li>索引也是一张表，保存了主键和索引字段，并指向实体表的记录，所以也需要占用内存</li>
<li>虽然索引大大提高了查询速度，同时却会降低更新表的速度，如对表进行INSERT、UPDATE和DELETE。 因为更新表时，MySQL不仅要保存数据，还要保存一下索引文件每次更新添加了索引列的字段， 都会调整因为更新所带来的键值变化后的索引信息</li>
</ul>
<h3 id="MySQL索引分类"><a href="#MySQL索引分类" class="headerlink" title="MySQL索引分类"></a>MySQL索引分类</h3><h3 id="数据结构角度"><a href="#数据结构角度" class="headerlink" title="数据结构角度"></a>数据结构角度</h3><ul>
<li>B+树索引</li>
<li>Hash索引</li>
<li>Full-Text全文索引</li>
<li>R-Tree索引</li>
</ul>
<h3 id="从物理存储角度"><a href="#从物理存储角度" class="headerlink" title="从物理存储角度"></a>从物理存储角度</h3><ul>
<li><p>聚集索引（clustered index）</p>
</li>
<li><p>非聚集索引（non-clustered index），也叫辅助索引（secondary index）</p>
<p>聚集索引和非聚集索引都是B+树结构</p>
</li>
</ul>
<h3 id="从逻辑角度"><a href="#从逻辑角度" class="headerlink" title="从逻辑角度"></a>从逻辑角度</h3><ul>
<li>主键索引：主键索引是一种特殊的唯一索引，不允许有空值</li>
<li>普通索引或者单列索引：每个索引只包含单个列，一个表可以有多个单列索引</li>
<li>多列索引（复合索引、联合索引）：复合索引指多个字段上创建的索引，只有在查询条件中使用了创建索引时的第一个字段，索引才会被使用。使用复合索引时遵循最左前缀集合</li>
<li>唯一索引或者非唯一索引</li>
<li>空间索引：空间索引是对空间数据类型的字段建立的索引，MYSQL中的空间数据类型有4种，分别是GEOMETRY、POINT、LINESTRING、POLYGON。 MYSQL使用SPATIAL关键字进行扩展，使得能够用于创建正规索引类型的语法创建空间索引。创建空间索引的列，必须将其声明为NOT NULL，空间索引只能在存储引擎为MYISAM的表中创建</li>
</ul>
<blockquote>
<p>为什么MySQL 索引中用B+tree，不用B-tree 或者其他树，为什么不用 Hash 索引聚簇索引/非聚簇索引，MySQL 索引底层实现，叶子结点存放的是数据还是指向数据的内存地址，使用索引需要注意的几个地方？使用索引查询一定能提高查询的性能吗？为什么?</p>
</blockquote>
<h3 id="MySQL索引结构"><a href="#MySQL索引结构" class="headerlink" title="MySQL索引结构"></a>MySQL索引结构</h3><p><strong>首先要明白索引（index）是在存储引擎（storage engine）层面实现的，而不是server层面</strong>。不是所有的存储引擎都支持所有的索引类型。即使多个存储引擎支持某一索引类型，它们的实现和行为也可能有所差别。</p>
<h3 id="B-Tree索引"><a href="#B-Tree索引" class="headerlink" title="B+Tree索引"></a>B+Tree索引</h3><p>MyISAM 和 InnoDB 存储引擎，都使用 B+Tree的数据结构，它相对与 B-Tree结构，所有的数据都存放在叶子节点上，且把叶子节点通过指针连接到一起，形成了一条数据链表，以加快相邻数据的检索效率。</p>
<p><strong>先了解下 B-Tree 和 B+Tree 的区别</strong></p>
<h3 id="B-Tree"><a href="#B-Tree" class="headerlink" title="B-Tree"></a>B-Tree</h3><p>B-Tree是为磁盘等外存储设备设计的一种平衡查找树。</p>
<p>系统从磁盘读取数据到内存时是以磁盘块（block）为基本单位的，位于同一个磁盘块中的数据会被一次性读取出来，而不是需要什么取什么。</p>
<p>InnoDB 存储引擎中有页（Page）的概念，页是其磁盘管理的最小单位。InnoDB 存储引擎中默认每个页的大小为16KB，可通过参数 <code>innodb_page_size</code> 将页的大小设置为 4K、8K、16K，在 MySQL 中可通过如下命令查看页的大小：<code>show variables like &#39;innodb_page_size&#39;;</code></p>
<p>而系统一个磁盘块的存储空间往往没有这么大，因此 InnoDB 每次申请磁盘空间时都会是若干地址连续磁盘块来达到页的大小 16KB。InnoDB 在把磁盘数据读入到磁盘时会以页为基本单位，在查询数据时如果一个页中的每条数据都能有助于定位数据记录的位置，这将会减少磁盘I/O次数，提高查询效率。</p>
<p>B-Tree 结构的数据可以让系统高效的找到数据所在的磁盘块。为了描述 B-Tree，首先定义一条记录为一个二元组[key, data] ，key为记录的键值，对应表中的主键值，data 为一行记录中除主键外的数据。对于不同的记录，key值互不相同。</p>
<p>一棵m阶的B-Tree有如下特性：</p>
<ol>
<li>每个节点最多有m个孩子</li>
<li>除了根节点和叶子节点外，其它每个节点至少有Ceil(m/2)个孩子。</li>
<li>若根节点不是叶子节点，则至少有2个孩子</li>
<li>所有叶子节点都在同一层，且不包含其它关键字信息</li>
<li>每个非终端节点包含n个关键字信息（P0,P1,…Pn, k1,…kn）</li>
<li>关键字的个数n满足：ceil(m/2)-1 &lt;= n &lt;= m-1</li>
<li>ki(i=1,…n)为关键字，且关键字升序排序</li>
<li>Pi(i=1,…n)为指向子树根节点的指针。P(i-1)指向的子树的所有节点关键字均小于ki，但都大于k(i-1)</li>
</ol>
<p>B-Tree 中的每个节点根据实际情况可以包含大量的关键字信息和分支，如下图所示为一个 3 阶的 B-Tree：</p>
<p><img src="https://gitee.com/wjxyzs/img/raw/master/img/1734bff356b40f0d.jpg" alt=""></p>
<p>每个节点占用一个盘块的磁盘空间，一个节点上有两个升序排序的关键字和三个指向子树根节点的指针，指针存储的是子节点所在磁盘块的地址。两个关键词划分成的三个范围域对应三个指针指向的子树的数据的范围域。以根节点为例，关键字为17和35，P1指针指向的子树的数据范围为小于17，P2指针指向的子树的数据范围为17~35，P3指针指向的子树的数据范围为大于35。</p>
<p>模拟查找关键字29的过程：</p>
<ol>
<li>根据根节点找到磁盘块1，读入内存。【磁盘I/O操作第1次】</li>
<li>比较关键字29在区间（17,35），找到磁盘块1的指针P2。</li>
<li>根据P2指针找到磁盘块3，读入内存。【磁盘I/O操作第2次】</li>
<li>比较关键字29在区间（26,30），找到磁盘块3的指针P2。</li>
<li>根据P2指针找到磁盘块8，读入内存。【磁盘I/O操作第3次】</li>
<li>在磁盘块8中的关键字列表中找到关键字29。</li>
</ol>
<p>分析上面过程，发现需要3次磁盘I/O操作，和3次内存查找操作。由于内存中的关键字是一个有序表结构，可以利用二分法查找提高效率。而3次磁盘I/O操作是影响整个B-Tree查找效率的决定因素。B-Tree相对于AVLTree缩减了节点个数，使每次磁盘I/O取到内存的数据都发挥了作用，从而提高了查询效率。</p>
<h3 id="B-Tree-1"><a href="#B-Tree-1" class="headerlink" title="B+Tree"></a>B+Tree</h3><p>B+Tree 是在 B-Tree 基础上的一种优化，使其更适合实现外存储索引结构，InnoDB 存储引擎就是用 B+Tree 实现其索引结构。</p>
<p>从上一节中的B-Tree结构图中可以看到每个节点中不仅包含数据的key值，还有data值。而每一个页的存储空间是有限的，如果data数据较大时将会导致每个节点（即一个页）能存储的key的数量很小，当存储的数据量很大时同样会导致B-Tree的深度较大，增大查询时的磁盘I/O次数，进而影响查询效率。在B+Tree中，<strong>所有数据记录节点都是按照键值大小顺序存放在同一层的叶子节点上</strong>，而非叶子节点上只存储key值信息，这样可以大大加大每个节点存储的key值数量，降低B+Tree的高度。</p>
<p>B+Tree相对于B-Tree有几点不同：</p>
<ol>
<li>非叶子节点只存储键值信息；</li>
<li>所有叶子节点之间都有一个链指针；</li>
<li>数据记录都存放在叶子节点中</li>
</ol>
<p>将上一节中的B-Tree优化，由于B+Tree的非叶子节点只存储键值信息，假设每个磁盘块能存储4个键值及指针信息，则变成B+Tree后其结构如下图所示：</p>
<p><img src="https://gitee.com/wjxyzs/img/raw/master/img/1734bff3498c6715.jpg" alt=""></p>
<p>通常在B+Tree上有两个头指针，一个指向根节点，另一个指向关键字最小的叶子节点，而且所有叶子节点（即数据节点）之间是一种链式环结构。因此可以对B+Tree进行两种查找运算：一种是对于主键的范围查找和分页查找，另一种是从根节点开始，进行随机查找。</p>
<p>可能上面例子中只有22条数据记录，看不出B+Tree的优点，下面做一个推算：</p>
<p>InnoDB存储引擎中页的大小为16KB，一般表的主键类型为INT（占用4个字节）或BIGINT（占用8个字节），指针类型也一般为4或8个字节，也就是说一个页（B+Tree中的一个节点）中大概存储16KB/(8B+8B)=1K个键值（因为是估值，为方便计算，这里的K取值为10^3）。也就是说一个深度为3的B+Tree索引可以维护10^3 * 10^3 * 10^3 = 10亿 条记录。</p>
<p>实际情况中每个节点可能不能填充满，因此在数据库中，B+Tree的高度一般都在2-4层。MySQL的InnoDB存储引擎在设计时是将根节点常驻内存的，也就是说查找某一键值的行记录时最多只需要1~3次磁盘I/O操作。</p>
<p>B+Tree性质</p>
<ol>
<li>通过上面的分析，我们知道IO次数取决于b+数的高度h，假设当前数据表的数据为N，每个磁盘块的数据项的数量是m，则有h=㏒(m+1)N，当数据量N一定的情况下，m越大，h越小；而m = 磁盘块的大小 / 数据项的大小，磁盘块的大小也就是一个数据页的大小，是固定的，如果数据项占的空间越小，数据项的数量越多，树的高度越低。这就是为什么每个数据项，即索引字段要尽量的小，比如int占4字节，要比bigint8字节少一半。这也是为什么b+树要求把真实的数据放到叶子节点而不是内层节点，一旦放到内层节点，磁盘块的数据项会大幅度下降，导致树增高。当数据项等于1时将会退化成线性表。</li>
<li>当b+树的数据项是复合的数据结构，比如(name,age,sex)的时候，b+数是按照从左到右的顺序来建立搜索树的，比如当(张三,20,F)这样的数据来检索的时候，b+树会优先比较name来确定下一步的所搜方向，如果name相同再依次比较age和sex，最后得到检索的数据；但当(20,F)这样的没有name的数据来的时候，b+树就不知道下一步该查哪个节点，因为建立搜索树的时候name就是第一个比较因子，必须要先根据name来搜索才能知道下一步去哪里查询。比如当(张三,F)这样的数据来检索时，b+树可以用name来指定搜索方向，但下一个字段age的缺失，所以只能把名字等于张三的数据都找到，然后再匹配性别是F的数据了， 这个是非常重要的性质，即<strong>索引的最左匹配特性</strong>。</li>
</ol>
<h3 id="MyISAM主键索引与辅助索引的结构"><a href="#MyISAM主键索引与辅助索引的结构" class="headerlink" title="MyISAM主键索引与辅助索引的结构"></a>MyISAM主键索引与辅助索引的结构</h3><p>MyISAM引擎的索引文件和数据文件是分离的。<strong>MyISAM引擎索引结构的叶子节点的数据域，存放的并不是实际的数据记录，而是数据记录的地址</strong>。索引文件与数据文件分离，这样的索引称为”<strong>非聚簇索引</strong>“。MyISAM的主索引与辅助索引区别并不大，只是主键索引不能有重复的关键字。</p>
<p><img src="https://gitee.com/wjxyzs/img/raw/master/img/1734bff35bbbf112.jpg" alt=""></p>
<p>在MyISAM中，索引（含叶子节点）存放在单独的.myi文件中，叶子节点存放的是数据的物理地址偏移量（通过偏移量访问就是随机访问，速度很快）。</p>
<p>主索引是指主键索引，键值不可能重复；辅助索引则是普通索引，键值可能重复。</p>
<p>通过索引查找数据的流程：先从索引文件中查找到索引节点，从中拿到数据的文件指针，再到数据文件中通过文件指针定位了具体的数据。辅助索引类似。</p>
<h3 id="InnoDB主键索引与辅助索引的结构"><a href="#InnoDB主键索引与辅助索引的结构" class="headerlink" title="InnoDB主键索引与辅助索引的结构"></a>InnoDB主键索引与辅助索引的结构</h3><p><strong>InnoDB引擎索引结构的叶子节点的数据域，存放的就是实际的数据记录</strong>（对于主索引，此处会存放表中所有的数据记录；对于辅助索引此处会引用主键，检索的时候通过主键到主键索引中找到对应数据行），或者说，<strong>InnoDB的数据文件本身就是主键索引文件</strong>，这样的索引被称为”“聚簇索引”，一个表只能有一个聚簇索引。</p>
<h3 id="主键索引："><a href="#主键索引：" class="headerlink" title="主键索引："></a>主键索引：</h3><p>我们知道InnoDB索引是聚集索引，它的索引和数据是存入同一个.idb文件中的，因此它的索引结构是在同一个树节点中同时存放索引和数据，如下图中最底层的叶子节点有三行数据，对应于数据表中的id、stu_id、name数据项。</p>
<p><img src="https://gitee.com/wjxyzs/img/raw/master/img/1734bff337681c17.jpg" alt=""></p>
<p>在Innodb中，索引分叶子节点和非叶子节点，非叶子节点就像新华字典的目录，单独存放在索引段中，叶子节点则是顺序排列的，在数据段中。Innodb的数据文件可以按照表来切分（只需要开启<font color=red size=3><code>innodb_file_per_table)</code></font>，切分后存放在<font color=red size=3><code>xxx.ibd</code></font>中，默认不切分，存放在<font color=red size=3><code>xxx.ibdata</code></font>中。</p>
<h3 id="辅助（非主键）索引："><a href="#辅助（非主键）索引：" class="headerlink" title="辅助（非主键）索引："></a>辅助（非主键）索引：</h3><p>这次我们以示例中学生表中的name列建立辅助索引，它的索引结构跟主键索引的结构有很大差别，在最底层的叶子结点有两行数据，第一行的字符串是辅助索引，按照ASCII码进行排序，第二行的整数是主键的值。</p>
<p>这就意味着，对name列进行条件搜索，需要两个步骤：</p>
<p>① 在辅助索引上检索name，到达其叶子节点获取对应的主键；</p>
<p>② 使用主键在主索引上再进行对应的检索操作</p>
<p>这也就是所谓的“<strong>回表查询</strong>”</p>
<p><img src="https://gitee.com/wjxyzs/img/raw/master/img/1734bff365f39d10.jpg" alt=""></p>
<p><strong>InnoDB 索引结构需要注意的点</strong></p>
<ol>
<li>数据文件本身就是索引文件</li>
<li>表数据文件本身就是按 B+Tree 组织的一个索引结构文件</li>
<li>聚集索引中叶节点包含了完整的数据记录</li>
<li>InnoDB 表必须要有主键，并且推荐使用整型自增主键</li>
</ol>
<p>正如我们上面介绍 InnoDB 存储结构，索引与数据是共同存储的，不管是主键索引还是辅助索引，在查找时都是通过先查找到索引节点才能拿到相对应的数据，如果我们在设计表结构时没有显式指定索引列的话，MySQL 会从表中选择数据不重复的列建立索引，如果没有符合的列，则 MySQL 自动为 InnoDB 表生成一个隐含字段作为主键，并且这个字段长度为6个字节，类型为整型。</p>
<blockquote>
<p>那为什么推荐使用整型自增主键而不是选择UUID？</p>
</blockquote>
<ul>
<li>UUID是字符串，比整型消耗更多的存储空间；</li>
<li>在B+树中进行查找时需要跟经过的节点值比较大小，整型数据的比较运算比字符串更快速；</li>
<li>自增的整型索引在磁盘中会连续存储，在读取一页数据时也是连续；UUID是随机产生的，读取的上下两行数据存储是分散的，不适合执行where id &gt; 5 &amp;&amp; id &lt; 20的条件查询语句。</li>
<li>在插入或删除数据时，整型自增主键会在叶子结点的末尾建立新的叶子节点，不会破坏左侧子树的结构；UUID主键很容易出现这样的情况，B+树为了维持自身的特性，有可能会进行结构的重构，消耗更多的时间。</li>
</ul>
<blockquote>
<p>为什么非主键索引结构叶子节点存储的是主键值？</p>
</blockquote>
<p>保证数据一致性和节省存储空间，可以这么理解：商城系统订单表会存储一个用户ID作为关联外键，而不推荐存储完整的用户信息，因为当我们用户表中的信息（真实名称、手机号、收货地址···）修改后，不需要再次维护订单表的用户数据，同时也节省了存储空间。</p>
<h3 id="Hash索引"><a href="#Hash索引" class="headerlink" title="Hash索引"></a>Hash索引</h3><ul>
<li><p>主要就是通过Hash算法（常见的Hash算法有直接定址法、平方取中法、折叠法、除数取余法、随机数法），将数据库字段数据转换成定长的Hash值，与这条数据的行指针一并存入Hash表的对应位置；如果发生Hash碰撞（两个不同关键字的Hash值相同），则在对应Hash键下以链表形式存储。</p>
<p>检索算法：在检索查询时，就再次对待查关键字再次执行相同的Hash算法，得到Hash值，到对应Hash表对应位置取出数据即可，如果发生Hash碰撞，则需要在取值时进行筛选。目前使用Hash索引的数据库并不多，主要有Memory等。</p>
<p>MySQL目前有Memory引擎和NDB引擎支持Hash索引。</p>
</li>
</ul>
<h3 id="full-text全文索引"><a href="#full-text全文索引" class="headerlink" title="full-text全文索引"></a>full-text全文索引</h3><ul>
<li>全文索引也是MyISAM的一种特殊索引类型，主要用于全文索引，InnoDB从MYSQL5.6版本提供对全文索引的支持。</li>
<li>它用于替代效率较低的LIKE模糊匹配操作，而且可以通过多字段组合的全文索引一次性全模糊匹配多个字段。</li>
<li>同样使用B-Tree存放索引数据，但使用的是特定的算法，将字段数据分割后再进行索引（一般每4个字节一次分割），索引文件存储的是分割前的索引字符串集合，与分割后的索引信息，对应Btree结构的节点存储的是分割后的词信息以及它在分割前的索引字符串集合中的位置。</li>
</ul>
<h3 id="R-Tree空间索引"><a href="#R-Tree空间索引" class="headerlink" title="R-Tree空间索引"></a>R-Tree空间索引</h3><p>空间索引是MyISAM的一种特殊索引类型，主要用于地理空间数据类型</p>
<blockquote>
<p>为什么Mysql索引要用B+树不是B树？</p>
</blockquote>
<p>用B+树不用B树考虑的是IO对性能的影响，B树的每个节点都存储数据，而B+树只有叶子节点才存储数据，所以查找相同数据量的情况下，B树的高度更高，IO更频繁。数据库索引是存储在磁盘上的，当数据量大时，就不能把整个索引全部加载到内存了，只能逐一加载每一个磁盘页（对应索引树的节点）。其中在MySQL底层对B+树进行进一步优化：在叶子节点中是双向链表，且在链表的头结点和尾节点也是循环指向的。</p>
<blockquote>
<p>面试官：为何不采用Hash方式？</p>
</blockquote>
<p>因为Hash索引底层是哈希表，哈希表是一种以key-value存储数据的结构，所以多个数据在存储关系上是完全没有任何顺序关系的，所以，对于区间查询是无法直接通过索引查询的，就需要全表扫描。所以，哈希索引只适用于等值查询的场景。而B+ Tree是一种多路平衡查询树，所以他的节点是天然有序的（左子节点小于父节点、父节点小于右子节点），所以对于范围查询的时候不需要做全表扫描。</p>
<p>哈希索引不支持多列联合索引的最左匹配规则，如果有大量重复键值得情况下，哈希索引的效率会很低，因为存在哈希碰撞问题。</p>
<h3 id="哪些情况需要创建索引"><a href="#哪些情况需要创建索引" class="headerlink" title="哪些情况需要创建索引"></a>哪些情况需要创建索引</h3><ol>
<li>主键自动建立唯一索引</li>
<li>频繁作为查询条件的字段</li>
<li>查询中与其他表关联的字段，外键关系建立索引</li>
<li>单键/组合索引的选择问题，高并发下倾向创建组合索引</li>
<li>查询中排序的字段，排序字段通过索引访问大幅提高排序速度</li>
<li>查询中统计或分组字段</li>
</ol>
<h3 id="哪些情况不要创建索引"><a href="#哪些情况不要创建索引" class="headerlink" title="哪些情况不要创建索引"></a>哪些情况不要创建索引</h3><ol>
<li>表记录太少</li>
<li>经常增删改的表</li>
<li>数据重复且分布均匀的表字段，只应该为最经常查询和最经常排序的数据列建立索引（如果某个数据类包含太多的重复数据，建立索引没有太大意义）</li>
<li>频繁更新的字段不适合创建索引（会加重IO负担）</li>
<li>where条件里用不到的字段不创建索引</li>
</ol>
<h3 id="MySQL高效索引"><a href="#MySQL高效索引" class="headerlink" title="MySQL高效索引"></a>MySQL高效索引</h3><p><strong>覆盖索引</strong>（Covering Index）,或者叫索引覆盖， 也就是平时所说的不需要回表操作</p>
<ul>
<li><p>就是select的数据列只用从索引中就能够取得，不必读取数据行，MySQL可以利用索引返回select列表中的字段，而不必根据索引再次读取数据文件，换句话说<strong>查询列要被所建的索引覆盖</strong>。</p>
</li>
<li><p>索引是高效找到行的一个方法，但是一般数据库也能使用索引找到一个列的数据，因此它不必读取整个行。毕竟索引叶子节点存储了它们索引的数据，当能通过读取索引就可以得到想要的数据，那就不需要读取行了。一个索引包含（覆盖）满足查询结果的数据就叫做覆盖索引。</p>
</li>
<li><p><strong>判断标准</strong></p>
<p>使用explain，可以通过输出的extra列来判断，对于一个索引覆盖查询，显示为<strong>using index</strong>，MySQL查询优化器在执行查询前会决定是否有索引覆盖查询</p>
</li>
</ul>
<h2 id="五、MySQL查询"><a href="#五、MySQL查询" class="headerlink" title="五、MySQL查询"></a>五、MySQL查询</h2><hr>
<blockquote>
<p>count(*) 和 count(1)和count(列名)区别   ps：这道题说法有点多</p>
</blockquote>
<p>执行效果上：</p>
<ul>
<li>count(*)包括了所有的列，相当于行数，在统计结果的时候，不会忽略列值为NULL</li>
<li>count(1)包括了所有列，用1代表代码行，在统计结果的时候，不会忽略列值为NULL</li>
<li>count(列名)只包括列名那一列，在统计结果的时候，会忽略列值为空（这里的空不是只空字符串或者0，而是表示null）的计数，即某个字段值为NULL时，不统计。</li>
</ul>
<p>执行效率上：</p>
<ul>
<li>列名为主键，count(列名)会比count(1)快</li>
<li>列名不为主键，count(1)会比count(列名)快</li>
<li>如果表多个列并且没有主键，则 count(1) 的执行效率优于 count(*)</li>
<li>如果有主键，则 select count（主键）的执行效率是最优的</li>
<li>如果表只有一个字段，则 select count(*) 最优。</li>
</ul>
<blockquote>
<p>MySQL中 in和 exists 的区别？</p>
</blockquote>
<ul>
<li>exists：exists对外表用loop逐条查询，每次查询都会查看exists的条件语句，当exists里的条件语句能够返回记录行时（无论记录行是的多少，只要能返回），条件就为真，返回当前loop到的这条记录；反之，如果exists里的条件语句不能返回记录行，则当前loop到的这条记录被丢弃，exists的条件就像一个bool条件，当能返回结果集则为true，不能返回结果集则为false</li>
<li>in：in查询相当于多个or条件的叠加</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> A <span class="keyword">WHERE</span> A.id <span class="keyword">IN</span> (<span class="keyword">SELECT</span> <span class="keyword">id</span> <span class="keyword">FROM</span> B);</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> A <span class="keyword">WHERE</span> <span class="keyword">EXISTS</span> (<span class="keyword">SELECT</span> * <span class="keyword">from</span> B <span class="keyword">WHERE</span> B.id = A.id);</span><br></pre></td></tr></table></figure>

<p><strong>如果查询的两个表大小相当，那么用in和exists差别不大</strong>。</p>
<p>如果两个表中一个较小，一个是大表，则子查询表大的用exists，子查询表小的用in：</p>
<blockquote>
<p>UNION和UNION ALL的区别?</p>
</blockquote>
<p>UNION和UNION ALL都是将两个结果集合并为一个，<strong>两个要联合的SQL语句 字段个数必须一样，而且字段类型要“相容”（一致）；</strong></p>
<ul>
<li>UNION在进行表连接后会筛选掉重复的数据记录（效率较低），而UNION ALL则不会去掉重复的数据记录；</li>
<li>UNION会按照字段的顺序进行排序，而UNION ALL只是简单的将两个结果合并就返回；</li>
</ul>
<h3 id="SQL执行顺序"><a href="#SQL执行顺序" class="headerlink" title="SQL执行顺序"></a>SQL执行顺序</h3><ul>
<li><p>手写</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> &lt;select_list&gt;</span><br><span class="line"><span class="keyword">FROM</span>  &lt;left_table&gt; &lt;join_type&gt;</span><br><span class="line"><span class="keyword">JOIN</span>  &lt;right_table&gt; <span class="keyword">ON</span> &lt;join_condition&gt;</span><br><span class="line"><span class="keyword">WHERE</span>  &lt;where_condition&gt;</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span>  &lt;group_by_list&gt;</span><br><span class="line"><span class="keyword">HAVING</span> &lt;having_condition&gt;</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> &lt;order_by_condition&gt;</span><br><span class="line"><span class="keyword">LIMIT</span> &lt;limit_number&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>机读</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">FROM  &lt;left_table&gt;</span><br><span class="line">ON &lt;join_condition&gt;</span><br><span class="line">&lt;join_type&gt; JOIN  &lt;right_table&gt; </span><br><span class="line">WHERE  &lt;where_condition&gt;</span><br><span class="line">GROUP BY  &lt;group_by_list&gt;</span><br><span class="line">HAVING &lt;having_condition&gt;</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">DISTINCT</span> &lt;select_list&gt;</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> &lt;order_by_condition&gt;</span><br><span class="line"><span class="keyword">LIMIT</span> &lt;limit_number&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>总结</p>
<p><img src="https://gitee.com/wjxyzs/img/raw/master/img/1734bff368752ece.jpg" alt=""></p>
</li>
</ul>
<blockquote>
<p>mysql 的内连接、左连接、右连接有什么区别？什么是内连接、外连接、交叉连接、笛卡尔积呢？</p>
</blockquote>
<h3 id="Join图"><a href="#Join图" class="headerlink" title="Join图"></a>Join图</h3><p><img src="https://gitee.com/wjxyzs/img/raw/master/img/1734bff37ac0e7f6.jpg" alt=""></p>
<hr>
<h2 id="六、MySQL-事务"><a href="#六、MySQL-事务" class="headerlink" title="六、MySQL 事务"></a>六、MySQL 事务</h2><hr>
<blockquote>
<p>事务的隔离级别有哪些？MySQL的默认隔离级别是什么？什么是幻读，脏读，不可重复读呢？MySQL事务的四大特性以及实现原理MVCC熟悉吗，它的底层原理？</p>
</blockquote>
<p>MySQL 事务主要用于处理操作量大，复杂度高的数据。比如说，在人员管理系统中，你删除一个人员，你即需要删除人员的基本资料，也要删除和该人员相关的信息，如信箱，文章等等，这样，这些数据库操作语句就构成一个事务！</p>
<h3 id="ACID-—-事务基本要素"><a href="#ACID-—-事务基本要素" class="headerlink" title="ACID — 事务基本要素"></a>ACID — 事务基本要素</h3><p><img src="https://gitee.com/wjxyzs/img/raw/master/img/1734bff377ece423.jpg" alt=""></p>
<p>事务是由一组SQL语句组成的逻辑处理单元，具有4个属性，通常简称为事务的ACID属性。</p>
<ul>
<li><strong>A (Atomicity) 原子性</strong>：整个事务中的所有操作，要么全部完成，要么全部不完成，不可能停滞在中间某个环节。事务在执行过程中发生错误，会被回滚（Rollback）到事务开始前的状态，就像这个事务从来没有执行过一样</li>
<li><strong>C (Consistency) 一致性</strong>：在事务开始之前和事务结束以后，数据库的完整性约束没有被破坏</li>
<li><strong>I (Isolation)隔离性</strong>：一个事务的执行不能其它事务干扰。即一个事务内部的操作及使用的数据对其它并发事务是隔离的，并发执行的各个事务之间不能互相干扰</li>
<li><strong>D (Durability) 持久性</strong>：在事务完成以后，该事务所对数据库所作的更改便持久的保存在数据库之中，并不会被回滚</li>
</ul>
<p><strong>并发事务处理带来的问题</strong></p>
<ul>
<li>更新丢失（Lost Update)： 事务A和事务B选择同一行，然后基于最初选定的值更新该行时，由于两个事务都不知道彼此的存在，就会发生丢失更新问题</li>
<li>脏读(Dirty Reads)：事务A读取了事务B更新的数据，然后B回滚操作，那么A读取到的数据是脏数据</li>
<li>不可重复读（Non-Repeatable Reads)：事务 A 多次读取同一数据，事务B在事务A多次读取的过程中，对数据作了更新并提交，导致事务A多次读取同一数据时，结果不一致。</li>
<li>幻读（Phantom Reads)：幻读与不可重复读类似。它发生在一个事务A读取了几行数据，接着另一个并发事务B插入了一些数据时。在随后的查询中，事务A就会发现多了一些原本不存在的记录，就好像发生了幻觉一样，所以称为幻读。</li>
</ul>
<p><strong>幻读和不可重复读的区别：</strong></p>
<ul>
<li><strong>不可重复读的重点是修改</strong>：在同一事务中，同样的条件，第一次读的数据和第二次读的数据不一样。（因为中间有其他事务提交了修改）</li>
<li><strong>幻读的重点在于新增或者删除</strong>：在同一事务中，同样的条件,，第一次和第二次读出来的记录数不一样。（因为中间有其他事务提交了插入/删除）</li>
</ul>
<p><strong>并发事务处理带来的问题的解决办法：</strong></p>
<ul>
<li>“更新丢失”通常是应该完全避免的。但防止更新丢失，并不能单靠数据库事务控制器来解决，需要应用程序对要更新的数据加必要的锁来解决，因此，防止更新丢失应该是应用的责任。</li>
<li>“脏读” 、 “不可重复读”和“幻读” ，其实都是数据库读一致性问题，必须由数据库提供一定的事务隔离机制来解决：<ul>
<li>一种是加锁：在读取数据前，对其加锁，阻止其他事务对数据进行修改。</li>
<li>另一种是数据多版本并发控制（MultiVersion Concurrency Control，简称 <strong>MVCC</strong> 或 MCC），也称为多版本数据库：不用加任何锁， 通过一定机制生成一个数据请求时间点的一致性数据快照 （Snapshot)， 并用这个快照来提供一定级别 （语句级或事务级） 的一致性读取。从用户的角度来看，好象是数据库可以提供同一数据的多个版本。</li>
</ul>
</li>
</ul>
<h3 id="事务隔离级别"><a href="#事务隔离级别" class="headerlink" title="事务隔离级别"></a>事务隔离级别</h3><p>数据库事务的隔离级别有4种，由低到高分别为</p>
<ul>
<li><strong>READ-UNCOMMITTED(读未提交)：</strong> 最低的隔离级别，允许读取尚未提交的数据变更，<strong>可能会导致脏读、幻读或不可重复读</strong>。</li>
<li><strong>READ-COMMITTED(读已提交)：</strong> 允许读取并发事务已经提交的数据，<strong>可以阻止脏读，但是幻读或不可重复读仍有可能发生</strong>。</li>
<li><strong>REPEATABLE-READ(可重复读)：</strong> 对同一字段的多次读取结果都是一致的，除非数据是被本身事务自己所修改，<strong>可以阻止脏读和不可重复读，但幻读仍有可能发生</strong>。</li>
<li><strong>SERIALIZABLE(可串行化)：</strong> 最高的隔离级别，完全服从ACID的隔离级别。所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，<strong>该级别可以防止脏读、不可重复读以及幻读</strong>。</li>
</ul>
<p>查看当前数据库的事务隔离级别：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">'tx_isolation'</span></span><br></pre></td></tr></table></figure>

<p>下面通过事例一一阐述在事务的并发操作中可能会出现脏读，不可重复读，幻读和事务隔离级别的联系。</p>
<p>数据库的事务隔离越严格，并发副作用越小，但付出的代价就越大，因为事务隔离实质上就是使事务在一定程度上“串行化”进行，这显然与“并发”是矛盾的。同时，不同的应用对读一致性和事务隔离程度的要求也是不同的，比如许多应用对“不可重复读”和“幻读”并不敏感，可能更关心数据并发访问的能力。</p>
<h3 id="Read-uncommitted"><a href="#Read-uncommitted" class="headerlink" title="Read uncommitted"></a>Read uncommitted</h3><p>读未提交，就是一个事务可以读取另一个未提交事务的数据。</p>
<p>事例：老板要给程序员发工资，程序员的工资是3.6万/月。但是发工资时老板不小心按错了数字，按成3.9万/月，该钱已经打到程序员的户口，但是事务还没有提交，就在这时，程序员去查看自己这个月的工资，发现比往常多了3千元，以为涨工资了非常高兴。但是老板及时发现了不对，马上回滚差点就提交了的事务，将数字改成3.6万再提交。</p>
<p>分析：实际程序员这个月的工资还是3.6万，但是程序员看到的是3.9万。他看到的是老板还没提交事务时的数据。这就是脏读。</p>
<p>那怎么解决脏读呢？Read committed！读提交，能解决脏读问题。</p>
<h3 id="Read-committed"><a href="#Read-committed" class="headerlink" title="Read committed"></a>Read committed</h3><p>读提交，顾名思义，就是一个事务要等另一个事务提交后才能读取数据。</p>
<p>事例：程序员拿着信用卡去享受生活（卡里当然是只有3.6万），当他埋单时（程序员事务开启），收费系统事先检测到他的卡里有3.6万，就在这个时候！！程序员的妻子要把钱全部转出充当家用，并提交。当收费系统准备扣款时，再检测卡里的金额，发现已经没钱了（第二次检测金额当然要等待妻子转出金额事务提交完）。程序员就会很郁闷，明明卡里是有钱的…</p>
<p>分析：这就是读提交，若有事务对数据进行更新（UPDATE）操作时，读操作事务要等待这个更新操作事务提交后才能读取数据，可以解决脏读问题。但在这个事例中，出现了一个事务范围内两个相同的查询却返回了不同数据，这就是<strong>不可重复读</strong>。</p>
<p>那怎么解决可能的不可重复读问题？Repeatable read ！</p>
<h3 id="Repeatable-read"><a href="#Repeatable-read" class="headerlink" title="Repeatable read"></a>Repeatable read</h3><p>重复读，就是在开始读取数据（事务开启）时，不再允许修改操作。 <strong>MySQL的默认事务隔离级别</strong></p>
<p>事例：程序员拿着信用卡去享受生活（卡里当然是只有3.6万），当他埋单时（事务开启，不允许其他事务的UPDATE修改操作），收费系统事先检测到他的卡里有3.6万。这个时候他的妻子不能转出金额了。接下来收费系统就可以扣款了。</p>
<p>分析：重复读可以解决不可重复读问题。写到这里，应该明白的一点就是，<strong>不可重复读对应的是修改，即UPDATE操作。但是可能还会有幻读问题。因为幻读问题对应的是插入INSERT操作，而不是UPDATE操作</strong>。</p>
<p><strong>什么时候会出现幻读？</strong></p>
<p>事例：程序员某一天去消费，花了2千元，然后他的妻子去查看他今天的消费记录（全表扫描FTS，妻子事务开启），看到确实是花了2千元，就在这个时候，程序员花了1万买了一部电脑，即新增INSERT了一条消费记录，并提交。当妻子打印程序员的消费记录清单时（妻子事务提交），发现花了1.2万元，似乎出现了幻觉，这就是幻读。</p>
<p>那怎么解决幻读问题？Serializable！</p>
<h3 id="Serializable-序列化"><a href="#Serializable-序列化" class="headerlink" title="Serializable 序列化"></a>Serializable 序列化</h3><p>Serializable 是最高的事务隔离级别，在该级别下，事务串行化顺序执行，可以避免脏读、不可重复读与幻读。简单来说，Serializable会在读取的每一行数据上都加锁，所以可能导致大量的超时和锁争用问题。这种事务隔离级别效率低下，比较耗数据库性能，一般不使用。</p>
<h3 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h3><table>
<thead>
<tr>
<th>事务隔离级别</th>
<th>读数据一致性</th>
<th>脏读</th>
<th>不可重复读</th>
<th>幻读</th>
</tr>
</thead>
<tbody><tr>
<td>读未提交（read-uncommitted）</td>
<td>最低级被，只能保证不读取物理上损坏的数据</td>
<td>是</td>
<td>是</td>
<td>是</td>
</tr>
<tr>
<td>读已提交（read-committed）</td>
<td>语句级</td>
<td>否</td>
<td>是</td>
<td>是</td>
</tr>
<tr>
<td>可重复读（repeatable-read）</td>
<td>事务级</td>
<td>否</td>
<td>否</td>
<td>是</td>
</tr>
<tr>
<td>串行化（serializable）</td>
<td>最高级别，事务级</td>
<td>否</td>
<td>否</td>
<td>否</td>
</tr>
</tbody></table>
<p>需要说明的是，事务隔离级别和数据访问的并发性是对立的，事务隔离级别越高并发性就越差。所以要根据具体的应用来确定合适的事务隔离级别，这个地方没有万能的原则。</p>
<p>MySQL InnoDB 存储引擎的默认支持的隔离级别是 <strong>REPEATABLE-READ（可重读）</strong>。我们可以通过<font color=red size=3><code>SELECT @@tx_isolation;</code></font>命令来查看，MySQL 8.0 该命令改为<font color=red size=3><code>SELECT @@transaction_isolation;</code></font></p>
<p>这里需要注意的是：与 SQL 标准不同的地方在于InnoDB 存储引擎在 <strong>REPEATABLE-READ（可重读）</strong>事务隔离级别下使用的是Next-Key Lock 算法，因此可以避免幻读的产生，这与其他数据库系统(如 SQL Server)是不同的。所以说InnoDB 存储引擎的默认支持的隔离级别是 REPEATABLE-READ（可重读）已经可以完全保证事务的隔离性要求，即达到了 SQL标准的 <strong>SERIALIZABLE(可串行化)</strong>隔离级别，而且保留了比较好的并发性能。</p>
<p>因为隔离级别越低，事务请求的锁越少，所以大部分数据库系统的隔离级别都是<strong>READ-COMMITTED(读已提交):</strong>，但是你要知道的是InnoDB 存储引擎默认使用 <strong>REPEATABLE-READ（可重读）</strong>并不会有任何性能损失。</p>
<h3 id="MVCC-多版本并发控制"><a href="#MVCC-多版本并发控制" class="headerlink" title="MVCC 多版本并发控制"></a>MVCC 多版本并发控制</h3><p>MySQL的大多数事务型存储引擎实现都不是简单的行级锁。基于提升并发性考虑，一般都同时实现了多版本并发控制（MVCC），包括Oracle、PostgreSQL。只是实现机制各不相同。</p>
<p>可以认为 MVCC 是行级锁的一个变种，但它在很多情况下避免了加锁操作，因此开销更低。虽然实现机制有所不同，但大都实现了非阻塞的读操作，写操作也只是锁定必要的行。</p>
<p>MVCC 的实现是通过保存数据在某个时间点的快照来实现的。也就是说不管需要执行多长时间，每个事物看到的数据都是一致的。</p>
<p>典型的MVCC实现方式，分为<strong>乐观（optimistic）并发控制和悲观（pressimistic）并发控制</strong>。下边通过 InnoDB的简化版行为来说明 MVCC 是如何工作的。</p>
<p>InnoDB 的 MVCC，是通过在每行记录后面保存两个隐藏的列来实现。这两个列，一个保存了行的创建时间，一个保存行的过期时间（删除时间）。当然存储的并不是真实的时间，而是系统版本号（system version number）。每开始一个新的事务，系统版本号都会自动递增。事务开始时刻的系统版本号会作为事务的版本号，用来和查询到的每行记录的版本号进行比较。</p>
<p><strong>REPEATABLE READ（可重读）隔离级别下MVCC如何工作：</strong></p>
<ul>
<li><p>SELECT</p>
<p>InnoDB会根据以下两个条件检查每行记录：</p>
<ul>
<li>InnoDB只查找版本早于当前事务版本的数据行，这样可以确保事务读取的行，要么是在开始事务之前已经存在要么是事务自身插入或者修改过的</li>
<li>行的删除版本号要么未定义，要么大于当前事务版本号，这样可以确保事务读取到的行在事务开始之前未被删除</li>
</ul>
<p>只有符合上述两个条件的才会被查询出来</p>
</li>
<li><p>INSERT：InnoDB为新插入的每一行保存当前系统版本号作为行版本号</p>
</li>
<li><p>DELETE：InnoDB为删除的每一行保存当前系统版本号作为行删除标识</p>
</li>
<li><p>UPDATE：InnoDB为插入的一行新纪录保存当前系统版本号作为行版本号，同时保存当前系统版本号到原来的行作为删除标识</p>
</li>
</ul>
<p>保存这两个额外系统版本号，使大多数操作都不用加锁。使数据操作简单，性能很好，并且也能保证只会读取到符合要求的行。不足之处是每行记录都需要额外的存储空间，需要做更多的行检查工作和一些额外的维护工作。</p>
<p>MVCC 只在 COMMITTED READ（读提交）和REPEATABLE READ（可重复读）两种隔离级别下工作。</p>
<h3 id="事务日志"><a href="#事务日志" class="headerlink" title="事务日志"></a>事务日志</h3><p>InnoDB 使用日志来减少提交事务时的开销。因为日志中已经记录了事务，就无须在每个事务提交时把缓冲池的脏块刷新(flush)到磁盘中。</p>
<p>事务修改的数据和索引通常会映射到表空间的随机位置，所以刷新这些变更到磁盘需要很多随机 IO。</p>
<p>InnoDB 假设使用常规磁盘，随机IO比顺序IO昂贵得多，因为一个IO请求需要时间把磁头移到正确的位置，然后等待磁盘上读出需要的部分，再转到开始位置。</p>
<p>InnoDB 用日志把随机IO变成顺序IO。一旦日志安全写到磁盘，事务就持久化了，即使断电了，InnoDB可以重放日志并且恢复已经提交的事务。</p>
<p>InnoDB 使用一个后台线程智能地刷新这些变更到数据文件。这个线程可以批量组合写入，使得数据写入更顺序，以提高效率。</p>
<p>事务日志可以帮助提高事务效率：</p>
<ul>
<li>使用事务日志，存储引擎在修改表的数据时只需要修改其内存拷贝，再把该修改行为记录到持久在硬盘上的事务日志中，而不用每次都将修改的数据本身持久到磁盘。</li>
<li>事务日志采用的是追加的方式，因此写日志的操作是磁盘上一小块区域内的顺序I/O，而不像随机I/O需要在磁盘的多个地方移动磁头，所以采用事务日志的方式相对来说要快得多。</li>
<li>事务日志持久以后，内存中被修改的数据在后台可以慢慢刷回到磁盘。</li>
<li>如果数据的修改已经记录到事务日志并持久化，但数据本身没有写回到磁盘，此时系统崩溃，存储引擎在重启时能够自动恢复这一部分修改的数据。</li>
</ul>
<p>目前来说，大多数存储引擎都是这样实现的，我们通常称之为<strong>预写式日志</strong>（Write-Ahead Logging），修改数据需要写两次磁盘。</p>
<h3 id="事务的实现"><a href="#事务的实现" class="headerlink" title="事务的实现"></a>事务的实现</h3><p>事务的实现是基于数据库的存储引擎。不同的存储引擎对事务的支持程度不一样。MySQL 中支持事务的存储引擎有 InnoDB 和 NDB。</p>
<p>事务的实现就是如何实现ACID特性。</p>
<p>事务的隔离性是通过锁实现，而事务的原子性、一致性和持久性则是通过事务日志实现 。</p>
<blockquote>
<p>事务是如何通过日志来实现的，说得越深入越好。</p>
</blockquote>
<p>事务日志包括：<strong>重做日志redo</strong>和<strong>回滚日志undo</strong></p>
<ul>
<li><p><strong>redo log（重做日志</strong>） 实现持久化和原子性</p>
<p>在innoDB的存储引擎中，事务日志通过重做(redo)日志和innoDB存储引擎的日志缓冲(InnoDB Log Buffer)实现。事务开启时，事务中的操作，都会先写入存储引擎的日志缓冲中，在事务提交之前，这些缓冲的日志都需要提前刷新到磁盘上持久化，这就是DBA们口中常说的“日志先行”(Write-Ahead Logging)。当事务提交之后，在Buffer Pool中映射的数据文件才会慢慢刷新到磁盘。此时如果数据库崩溃或者宕机，那么当系统重启进行恢复时，就可以根据redo log中记录的日志，把数据库恢复到崩溃前的一个状态。未完成的事务，可以继续提交，也可以选择回滚，这基于恢复的策略而定。</p>
<p>在系统启动的时候，就已经为redo log分配了一块连续的存储空间，以顺序追加的方式记录Redo Log，通过顺序IO来改善性能。所有的事务共享redo log的存储空间，它们的Redo Log按语句的执行顺序，依次交替的记录在一起。</p>
</li>
<li><p><strong>undo log（回滚日志）</strong> 实现一致性</p>
<p>undo log 主要为事务的回滚服务。在事务执行的过程中，除了记录redo log，还会记录一定量的undo log。undo log记录了数据在每个操作前的状态，如果事务执行过程中需要回滚，就可以根据undo log进行回滚操作。单个事务的回滚，只会回滚当前事务做的操作，并不会影响到其他的事务做的操作。</p>
<p>Undo记录的是已部分完成并且写入硬盘的未完成的事务，默认情况下回滚日志是记录下表空间中的（共享表空间或者独享表空间）</p>
</li>
</ul>
<p>二种日志均可以视为一种恢复操作，redo_log是恢复提交事务修改的页操作，而undo_log是回滚行记录到特定版本。二者记录的内容也不同，redo_log是物理日志，记录页的物理修改操作，而undo_log是逻辑日志，根据每行记录进行记录。</p>
<blockquote>
<p>又引出个问题：你知道MySQL 有多少种日志吗？</p>
</blockquote>
<ul>
<li><strong>错误日志</strong>：记录出错信息，也记录一些警告信息或者正确的信息。</li>
<li><strong>查询日志</strong>：记录所有对数据库请求的信息，不论这些请求是否得到了正确的执行。</li>
<li><strong>慢查询日志</strong>：设置一个阈值，将运行时间超过该值的所有SQL语句都记录到慢查询的日志文件中。</li>
<li><strong>二进制日志</strong>：记录对数据库执行更改的所有操作。</li>
<li><strong>中继日志</strong>：中继日志也是二进制日志，用来给slave 库恢复</li>
<li><strong>事务日志</strong>：重做日志redo和回滚日志undo</li>
</ul>
<blockquote>
<p>分布式事务相关问题，可能还会问到 2PC、3PC，，，</p>
</blockquote>
<h3 id="MySQL对分布式事务的支持"><a href="#MySQL对分布式事务的支持" class="headerlink" title="MySQL对分布式事务的支持"></a>MySQL对分布式事务的支持</h3><p>分布式事务的实现方式有很多，既可以采用 InnoDB 提供的原生的事务支持，也可以采用消息队列来实现分布式事务的最终一致性。这里我们主要聊一下 InnoDB 对分布式事务的支持。</p>
<p>MySQL 从 5.0.3 InnoDB 存储引擎开始支持XA协议的分布式事务。一个分布式事务会涉及多个行动，这些行动本身是事务性的。所有行动都必须一起成功完成，或者一起被回滚。</p>
<p>在MySQL中，使用分布式事务涉及一个或多个资源管理器和一个事务管理器。</p>
<p><img src="https://gitee.com/wjxyzs/img/raw/master/img/1734bff37e532a33.jpg" alt=""></p>
<p>如图，MySQL 的分布式事务模型。模型中分三块：应用程序（AP）、资源管理器（RM）、事务管理器（TM）:</p>
<ul>
<li>应用程序：定义了事务的边界，指定需要做哪些事务；</li>
<li>资源管理器：提供了访问事务的方法，通常一个数据库就是一个资源管理器；</li>
<li>事务管理器：协调参与了全局事务中的各个事务。</li>
</ul>
<p>分布式事务采用两段式提交（two-phase commit）的方式：</p>
<ul>
<li>第一阶段所有的事务节点开始准备，告诉事务管理器ready。</li>
<li>第二阶段事务管理器告诉每个节点是commit还是rollback。如果有一个节点失败，就需要全局的节点全部rollback，以此保障事务的原子性。</li>
</ul>
<h2 id="七、MySQL锁机制"><a href="#七、MySQL锁机制" class="headerlink" title="七、MySQL锁机制"></a>七、MySQL锁机制</h2><hr>
<blockquote>
<p>数据库的乐观锁和悲观锁？MySQL 中有哪几种锁，列举一下？MySQL中InnoDB引擎的行锁是怎么实现的？MySQL 间隙锁有没有了解，死锁有没有了解，写一段会造成死锁的 sql 语句，死锁发生了如何解决，MySQL 有没有提供什么机制去解决死锁</p>
</blockquote>
<p>锁是计算机协调多个进程或线程并发访问某一资源的机制。</p>
<p>在数据库中，除传统的计算资源（如CPU、RAM、I/O等）的争用以外，数据也是一种供许多用户共享的资源。数据库锁定机制简单来说，就是数据库为了保证数据的一致性，而使各种共享资源在被并发访问变得有序所设计的一种规则。</p>
<p>打个比方，我们到淘宝上买一件商品，商品只有一件库存，这个时候如果还有另一个人买，那么如何解决是你买到还是另一个人买到的问题？这里肯定要用到事物，我们先从库存表中取出物品数量，然后插入订单，付款后插入付款表信息，然后更新商品数量。在这个过程中，使用锁可以对有限的资源进行保护，解决隔离和并发的矛盾。</p>
<h3 id="锁的分类"><a href="#锁的分类" class="headerlink" title="锁的分类"></a>锁的分类</h3><p><strong>从对数据操作的类型分类</strong>：</p>
<ul>
<li><strong>读锁</strong>（共享锁）：针对同一份数据，多个读操作可以同时进行，不会互相影响</li>
<li><strong>写锁</strong>（排他锁）：当前写操作没有完成前，它会阻断其他写锁和读锁</li>
</ul>
<p><strong>从对数据操作的粒度分类</strong>：</p>
<p>为了尽可能提高数据库的并发度，每次锁定的数据范围越小越好，理论上每次只锁定当前操作的数据的方案会得到最大的并发度，但是管理锁是很耗资源的事情（涉及获取，检查，释放锁等动作），因此数据库系统需要在高并发响应和系统性能两方面进行平衡，这样就产生了“锁粒度（Lock granularity）”的概念。</p>
<ul>
<li><strong>表级锁</strong>：开销小，加锁快；不会出现死锁；锁定粒度大，发生锁冲突的概率最高，并发度最低（MyISAM 和 MEMORY 存储引擎采用的是表级锁）；</li>
<li><strong>行级锁</strong>：开销大，加锁慢；会出现死锁；锁定粒度最小，发生锁冲突的概率最低，并发度也最高（InnoDB 存储引擎既支持行级锁也支持表级锁，但默认情况下是采用行级锁）；</li>
<li><strong>页面锁</strong>：开销和加锁时间界于表锁和行锁之间；会出现死锁；锁定粒度界于表锁和行锁之间，并发度一般。</li>
</ul>
<p>适用：从锁的角度来说，表级锁更适合于以查询为主，只有少量按索引条件更新数据的应用，如Web应用；而行级锁则更适合于有大量按索引条件并发更新少量不同数据，同时又有并发查询的应用，如一些在线事务处理（OLTP）系统。</p>
<table>
<thead>
<tr>
<th>行锁</th>
<th>表锁</th>
<th>页锁</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>MyISAM</td>
<td></td>
<td>√</td>
<td></td>
</tr>
<tr>
<td>BDB</td>
<td></td>
<td>√</td>
<td>√</td>
</tr>
<tr>
<td>InnoDB</td>
<td>√</td>
<td>√</td>
<td></td>
</tr>
<tr>
<td>Memory</td>
<td></td>
<td>√</td>
<td></td>
</tr>
</tbody></table>
<h3 id="MyISAM-表锁"><a href="#MyISAM-表锁" class="headerlink" title="MyISAM 表锁"></a>MyISAM 表锁</h3><p>MyISAM 的表锁有两种模式：</p>
<ul>
<li>表共享读锁 （Table Read Lock）：不会阻塞其他用户对同一表的读请求，但会阻塞对同一表的写请求；</li>
<li>表独占写锁 （Table Write Lock）：会阻塞其他用户对同一表的读和写操作；</li>
</ul>
<p>MyISAM 表的读操作与写操作之间，以及写操作之间是串行的。当一个线程获得对一个表的写锁后， 只有持有锁的线程可以对表进行更新操作。 其他线程的读、 写操作都会等待，直到锁被释放为止。</p>
<p>默认情况下，写锁比读锁具有更高的优先级：当一个锁释放时，这个锁会优先给写锁队列中等候的获取锁请求，然后再给读锁队列中等候的获取锁请求。</p>
<h3 id="InnoDB-行锁"><a href="#InnoDB-行锁" class="headerlink" title="InnoDB 行锁"></a>InnoDB 行锁</h3><p>InnoDB 实现了以下两种类型的<strong>行锁</strong>：</p>
<ul>
<li>共享锁（S）：允许一个事务去读一行，阻止其他事务获得相同数据集的排他锁。</li>
<li>排他锁（X）：允许获得排他锁的事务更新数据，阻止其他事务取得相同数据集的共享读锁和排他写锁。</li>
</ul>
<p>为了允许行锁和表锁共存，实现多粒度锁机制，InnoDB 还有两种内部使用的意向锁（Intention Locks），这两种意向锁都是<strong>表锁</strong>：</p>
<ul>
<li>意向共享锁（IS）：事务打算给数据行加行共享锁，事务在给一个数据行加共享锁前必须先取得该表的 IS 锁。</li>
<li>意向排他锁（IX）：事务打算给数据行加行排他锁，事务在给一个数据行加排他锁前必须先取得该表的 IX 锁。</li>
</ul>
<p><strong>索引失效会导致行锁变表锁</strong>。比如 vchar 查询不写单引号的情况。</p>
<h3 id="加锁机制"><a href="#加锁机制" class="headerlink" title="加锁机制"></a>加锁机制</h3><p><strong>乐观锁与悲观锁是两种并发控制的思想，可用于解决丢失更新问题</strong></p>
<p>乐观锁会“乐观地”假定大概率不会发生并发更新冲突，访问、处理数据过程中不加锁，只在更新数据时再根据版本号或时间戳判断是否有冲突，有则处理，无则提交事务。用数据版本（Version）记录机制实现，这是乐观锁最常用的一种实现方式</p>
<p>悲观锁会“悲观地”假定大概率会发生并发更新冲突，访问、处理数据前就加排他锁，在整个数据处理过程中锁定数据，事务提交或回滚后才释放锁。另外与乐观锁相对应的，<strong>悲观锁是由数据库自己实现了的，要用的时候，我们直接调用数据库的相关语句就可以了。</strong></p>
<h3 id="锁模式-InnoDB有三种行锁的算法"><a href="#锁模式-InnoDB有三种行锁的算法" class="headerlink" title="锁模式(InnoDB有三种行锁的算法)"></a>锁模式(InnoDB有三种行锁的算法)</h3><ul>
<li><p><strong>记录锁(Record Locks)</strong>： 单个行记录上的锁。对索引项加锁，锁定符合条件的行。其他事务不能修改和删除加锁项；</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">table</span> <span class="keyword">WHERE</span> <span class="keyword">id</span> = <span class="number">1</span> <span class="keyword">FOR</span> <span class="keyword">UPDATE</span>;</span><br></pre></td></tr></table></figure>

<p>它会在 id=1 的记录上加上记录锁，以阻止其他事务插入，更新，删除 id=1 这一行</p>
<p>在通过 主键索引 与 唯一索引 对数据行进行 UPDATE 操作时，也会对该行数据加记录锁：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- id 列为主键列或唯一索引列</span></span><br><span class="line"><span class="keyword">UPDATE</span> <span class="keyword">SET</span> age = <span class="number">50</span> <span class="keyword">WHERE</span> <span class="keyword">id</span> = <span class="number">1</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>间隙锁（Gap Locks）</strong>： 当我们使用范围条件而不是相等条件检索数据，并请求共享或排他锁时，InnoDB会给符合条件的已有数据记录的索引项加锁。对于键值在条件范围内但并不存在的记录，叫做“间隙”。</p>
<p>InnoDB 也会对这个“间隙”加锁，这种锁机制就是所谓的间隙锁。</p>
<p>对索引项之间的“间隙”加锁，锁定记录的范围（对第一条记录前的间隙或最后一条将记录后的间隙加锁），不包含索引项本身。其他事务不能在锁范围内插入数据，这样就防止了别的事务新增幻影行。</p>
<p>间隙锁基于非唯一索引，它锁定一段范围内的索引记录。间隙锁基于下面将会提到的<font color=red size=3><code>Next-Key Locking</code></font> 算法，请务必牢记：<strong>使用间隙锁锁住的是一个区间，而不仅仅是这个区间中的每一条数据</strong>。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">table</span> <span class="keyword">WHERE</span> <span class="keyword">id</span> BETWEN <span class="number">1</span> <span class="keyword">AND</span> <span class="number">10</span> <span class="keyword">FOR</span> <span class="keyword">UPDATE</span>;</span><br></pre></td></tr></table></figure>

<p>即所有在<font color=red size=3><code>（1，10）</code></font>区间内的记录行都会被锁住，所有id 为 2、3、4、5、6、7、8、9 的数据行的插入会被阻塞，但是 1 和 10 两条记录行并不会被锁住。</p>
<p>GAP锁的目的，是为了防止同一事务的两次当前读，出现幻读的情况</p>
</li>
<li><p><strong>临键锁(Next-key Locks)</strong>： <strong>临键锁</strong>，是<strong>记录锁与间隙锁的组合</strong>，它的封锁范围，既包含索引记录，又包含索引区间。(临键锁的主要目的，也是为了避免<strong>幻读</strong>(Phantom Read)。如果把事务的隔离级别降级为RC，临键锁则也会失效。)</p>
<p>Next-Key 可以理解为一种特殊的<strong>间隙锁</strong>，也可以理解为一种特殊的<strong>算法</strong>。通过<strong>临建锁</strong>可以解决幻读的问题。 每个数据行上的非唯一索引列上都会存在一把临键锁，当某个事务持有该数据行的临键锁时，会锁住一段左开右闭区间的数据。需要强调的一点是，<code>InnoDB</code> 中行级锁是基于索引实现的，临键锁只与非唯一索引列有关，在唯一索引列（包括主键列）上不存在临键锁。</p>
<p>对于行的查询，都是采用该方法，主要目的是解决幻读的问题。</p>
</li>
</ul>
<blockquote>
<p>select for update有什么含义，会锁表还是锁行还是其他</p>
</blockquote>
<p>for update 仅适用于InnoDB，且必须在事务块(BEGIN/COMMIT)中才能生效。在进行事务操作时，通过“for update”语句，MySQL会对查询结果集中每行数据都添加排他锁，其他线程对该记录的更新与删除操作都会阻塞。排他锁包含行锁、表锁。</p>
<p>InnoDB这种行锁实现特点意味着：只有通过索引条件检索数据，InnoDB才使用行级锁，否则，InnoDB将使用表锁！ 假设有个表单 products ，里面有id跟name二个栏位，id是主键。</p>
<ul>
<li>明确指定主键，并且有此笔资料，row lock</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> products <span class="keyword">WHERE</span> <span class="keyword">id</span>=<span class="string">'3'</span> <span class="keyword">FOR</span> <span class="keyword">UPDATE</span>;</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> products <span class="keyword">WHERE</span> <span class="keyword">id</span>=<span class="string">'3'</span> <span class="keyword">and</span> <span class="keyword">type</span>=<span class="number">1</span> <span class="keyword">FOR</span> <span class="keyword">UPDATE</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>明确指定主键，若查无此笔资料，无lock</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> products <span class="keyword">WHERE</span> <span class="keyword">id</span>=<span class="string">'-1'</span> <span class="keyword">FOR</span> <span class="keyword">UPDATE</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>无主键，table lock</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> products <span class="keyword">WHERE</span> <span class="keyword">name</span>=<span class="string">'Mouse'</span> <span class="keyword">FOR</span> <span class="keyword">UPDATE</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>主键不明确，table lock</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> products <span class="keyword">WHERE</span> <span class="keyword">id</span>&lt;&gt;<span class="string">'3'</span> <span class="keyword">FOR</span> <span class="keyword">UPDATE</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>主键不明确，table lock</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> products <span class="keyword">WHERE</span> <span class="keyword">id</span> <span class="keyword">LIKE</span> <span class="string">'3'</span> <span class="keyword">FOR</span> <span class="keyword">UPDATE</span>;</span><br></pre></td></tr></table></figure>

<p><strong>注1</strong>: FOR UPDATE仅适用于InnoDB，且必须在交易区块(BEGIN/COMMIT)中才能生效。 <strong>注2</strong>: 要测试锁定的状况，可以利用MySQL的Command Mode ，开二个视窗来做测试。</p>
<blockquote>
<p>MySQL 遇到过死锁问题吗，你是如何解决的？</p>
</blockquote>
<h3 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h3><p><strong>死锁产生</strong>：</p>
<ul>
<li>死锁是指两个或多个事务在同一资源上相互占用，并请求锁定对方占用的资源，从而导致恶性循环</li>
<li>当事务试图以不同的顺序锁定资源时，就可能产生死锁。多个事务同时锁定同一个资源时也可能会产生死锁</li>
<li>锁的行为和顺序和存储引擎相关。以同样的顺序执行语句，有些存储引擎会产生死锁有些不会——死锁有双重原因：真正的数据冲突；存储引擎的实现方式。</li>
</ul>
<p><strong>检测死锁</strong>：数据库系统实现了各种死锁检测和死锁超时的机制。InnoDB存储引擎能检测到死锁的循环依赖并立即返回一个错误。</p>
<p><strong>死锁恢复</strong>：死锁发生以后，只有部分或完全回滚其中一个事务，才能打破死锁，InnoDB目前处理死锁的方法是，将持有最少行级排他锁的事务进行回滚。所以事务型应用程序在设计时必须考虑如何处理死锁，多数情况下只需要重新执行因死锁回滚的事务即可。</p>
<p><strong>外部锁的死锁检测</strong>：发生死锁后，InnoDB 一般都能自动检测到，并使一个事务释放锁并回退，另一个事务获得锁，继续完成事务。但在涉及外部锁，或涉及表锁的情况下，InnoDB 并不能完全自动检测到死锁， 这需要通过设置锁等待超时参数 innodb_lock_wait_timeout 来解决</p>
<p><strong>死锁影响性能</strong>：死锁会影响性能而不是会产生严重错误，因为InnoDB会自动检测死锁状况并回滚其中一个受影响的事务。在高并发系统上，当许多线程等待同一个锁时，死锁检测可能导致速度变慢。 有时当发生死锁时，禁用死锁检测（使用innodb_deadlock_detect配置选项）可能会更有效，这时可以依赖<code>innodb_lock_wait_timeout</code>设置进行事务回滚。</p>
<p><strong>MyISAM避免死锁</strong>：</p>
<ul>
<li>在自动加锁的情况下，MyISAM 总是一次获得 SQL 语句所需要的全部锁，所以 MyISAM 表不会出现死锁。</li>
</ul>
<p><strong>InnoDB避免死锁</strong>：</p>
<ul>
<li>为了在单个InnoDB表上执行多个并发写入操作时避免死锁，可以在事务开始时通过为预期要修改的每个元祖（行）使用<code>SELECT ... FOR UPDATE</code>语句来获取必要的锁，即使这些行的更改语句是在之后才执行的。</li>
<li>在事务中，如果要更新记录，应该直接申请足够级别的锁，即排他锁，而不应先申请共享锁、更新时再申请排他锁，因为这时候当用户再申请排他锁时，其他事务可能又已经获得了相同记录的共享锁，从而造成锁冲突，甚至死锁</li>
<li>如果事务需要修改或锁定多个表，则应在每个事务中以相同的顺序使用加锁语句。 在应用中，如果不同的程序会并发存取多个表，应尽量约定以相同的顺序来访问表，这样可以大大降低产生死锁的机会</li>
<li>通过<font color=red size=3><code>SELECT ... LOCK IN SHARE MODE</code></font>获取行的读锁后，如果当前事务再需要对该记录进行更新操作，则很有可能造成死锁。</li>
<li>改变事务隔离级别</li>
</ul>
<p>如果出现死锁，可以用 <font color=red size=3><code>show engine innodb status;</code></font>命令来确定最后一个死锁产生的原因。返回结果中包括死锁相关事务的详细信息，如引发死锁的 SQL 语句，事务已经获得的锁，正在等待什么锁，以及被回滚的事务等。据此可以分析死锁产生的原因和改进措施。</p>
<hr>
<h2 id="八、MySQL调优"><a href="#八、MySQL调优" class="headerlink" title="八、MySQL调优"></a>八、MySQL调优</h2><hr>
<blockquote>
<p>日常工作中你是怎么优化SQL的？SQL优化的一般步骤是什么，怎么看执行计划（explain），如何理解其中各个字段的含义？如何写sql能够有效的使用到复合索引？一条sql执行过长的时间，你如何优化，从哪些方面入手？什么是最左前缀原则？什么是最左匹配原则？</p>
</blockquote>
<h3 id="影响mysql的性能因素"><a href="#影响mysql的性能因素" class="headerlink" title="影响mysql的性能因素"></a>影响mysql的性能因素</h3><ul>
<li>业务需求对MySQL的影响(合适合度)</li>
<li>存储定位对MySQL的影响<ul>
<li>不适合放进MySQL的数据<ul>
<li>二进制多媒体数据</li>
<li>流水队列数据</li>
<li>超大文本数据</li>
</ul>
</li>
<li>需要放进缓存的数据<ul>
<li>系统各种配置及规则数据</li>
<li>活跃用户的基本信息数据</li>
<li>活跃用户的个性化定制信息数据</li>
<li>准实时的统计信息数据</li>
<li>其他一些访问频繁但变更较少的数据</li>
</ul>
</li>
</ul>
</li>
<li>Schema设计对系统的性能影响<ul>
<li>尽量减少对数据库访问的请求</li>
<li>尽量减少无用数据的查询请求</li>
</ul>
</li>
<li>硬件环境对系统性能的影响</li>
</ul>
<h3 id="性能分析"><a href="#性能分析" class="headerlink" title="性能分析"></a>性能分析</h3><h3 id="MySQL-Query-Optimizer"><a href="#MySQL-Query-Optimizer" class="headerlink" title="MySQL Query Optimizer"></a>MySQL Query Optimizer</h3><ol>
<li>MySQL 中有专门负责优化 SELECT 语句的优化器模块，主要功能：通过计算分析系统中收集到的统计信息，为客户端请求的 Query 提供他认为最优的执行计划（他认为最优的数据检索方式，但不见得是 DBA 认为是最优的，这部分最耗费时间）</li>
<li>当客户端向 MySQL 请求一条 Query，命令解析器模块完成请求分类，区别出是 SELECT 并转发给 MySQL Query Optimize r时，MySQL Query Optimizer 首先会对整条 Query 进行优化，处理掉一些常量表达式的预算，直接换算成常量值。并对 Query 中的查询条件进行简化和转换，如去掉一些无用或显而易见的条件、结构调整等。然后分析 Query 中的 Hint 信息（如果有），看显示 Hint 信息是否可以完全确定该 Query 的执行计划。如果没有 Hint 或 Hint 信息还不足以完全确定执行计划，则会读取所涉及对象的统计信息，根据 Query 进行写相应的计算分析，然后再得出最后的执行计划。</li>
</ol>
<h3 id="MySQL常见瓶颈"><a href="#MySQL常见瓶颈" class="headerlink" title="MySQL常见瓶颈"></a>MySQL常见瓶颈</h3><ul>
<li>CPU：CPU在饱和的时候一般发生在数据装入内存或从磁盘上读取数据时候</li>
<li>IO：磁盘I/O瓶颈发生在装入数据远大于内存容量的时候</li>
<li>服务器硬件的性能瓶颈：top，free，iostat 和 vmstat来查看系统的性能状态</li>
</ul>
<h3 id="性能下降SQL慢-执行时间长-等待时间长-原因分析"><a href="#性能下降SQL慢-执行时间长-等待时间长-原因分析" class="headerlink" title="性能下降SQL慢 执行时间长 等待时间长 原因分析"></a>性能下降SQL慢 执行时间长 等待时间长 原因分析</h3><ul>
<li>查询语句写的烂</li>
<li>索引失效（单值、复合）</li>
<li>关联查询太多join（设计缺陷或不得已的需求）</li>
<li>服务器调优及各个参数设置（缓冲、线程数等）</li>
</ul>
<h3 id="MySQL常见性能分析手段"><a href="#MySQL常见性能分析手段" class="headerlink" title="MySQL常见性能分析手段"></a>MySQL常见性能分析手段</h3><p>在优化MySQL时，通常需要对数据库进行分析，常见的分析手段有<strong>慢查询日志</strong>，<strong>EXPLAIN 分析查询</strong>，<strong>profiling分析</strong>以及<strong>show命令查询系统状态及系统变量</strong>，通过定位分析性能的瓶颈，才能更好的优化数据库系统的性能。</p>
<h3 id="性能瓶颈定位"><a href="#性能瓶颈定位" class="headerlink" title="性能瓶颈定位"></a>性能瓶颈定位</h3><p>我们可以通过 show 命令查看 MySQL 状态及变量，找到系统的瓶颈：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">Mysql&gt; show status ——显示状态信息（扩展show status like ‘XXX’）</span><br><span class="line"></span><br><span class="line">Mysql&gt; show variables ——显示系统变量（扩展show variables like ‘XXX’）</span><br><span class="line"></span><br><span class="line">Mysql&gt; show innodb status ——显示InnoDB存储引擎的状态</span><br><span class="line"></span><br><span class="line">Mysql&gt; show processlist ——查看当前SQL执行，包括执行状态、是否锁表等</span><br><span class="line"></span><br><span class="line">Shell&gt; mysqladmin variables -u username -p password——显示系统变量</span><br><span class="line"></span><br><span class="line">Shell&gt; mysqladmin extended-status -u username -p password——显示状态信息</span><br></pre></td></tr></table></figure>

<h3 id="Explain-执行计划"><a href="#Explain-执行计划" class="headerlink" title="Explain(执行计划)"></a>Explain(执行计划)</h3><p>是什么：使用 <strong>Explain</strong> 关键字可以模拟优化器执行SQL查询语句，从而知道 MySQL 是如何处理你的 SQL 语句的。分析你的查询语句或是表结构的性能瓶颈</p>
<p>能干吗：</p>
<ul>
<li>表的读取顺序</li>
<li>数据读取操作的操作类型</li>
<li>哪些索引可以使用</li>
<li>哪些索引被实际使用</li>
<li>表之间的引用</li>
<li>每张表有多少行被优化器查询</li>
</ul>
<p>怎么玩：</p>
<ul>
<li>Explain + SQL语句</li>
<li>执行计划包含的信息（如果有分区表的话还会有<strong>partitions</strong>）</li>
</ul>
<p><img src="https://gitee.com/wjxyzs/img/raw/master/img/1734bff38d5d8333.jpg" alt=""></p>
<p>各字段解释</p>
<ul>
<li><p><strong>id</strong>（select 查询的序列号，包含一组数字，表示查询中执行select子句或操作表的顺序）</p>
<ul>
<li>id相同，执行顺序从上往下</li>
<li>id全不同，如果是子查询，id的序号会递增，id值越大优先级越高，越先被执行</li>
<li>id部分相同，执行顺序是先按照数字大的先执行，然后数字相同的按照从上往下的顺序执行</li>
</ul>
</li>
<li><p><strong>select_type</strong>（查询类型，用于区别普通查询、联合查询、子查询等复杂查询）</p>
<ul>
<li><strong>SIMPLE</strong> ：简单的select查询，查询中不包含子查询或UNION</li>
<li><strong>PRIMARY</strong>：查询中若包含任何复杂的子部分，最外层查询被标记为PRIMARY</li>
<li><strong>SUBQUERY</strong>：在select或where列表中包含了子查询</li>
<li><strong>DERIVED</strong>：在from列表中包含的子查询被标记为DERIVED，MySQL会递归执行这些子查询，把结果放在临时表里</li>
<li><strong>UNION</strong>：若第二个select出现在UNION之后，则被标记为UNION，若UNION包含在from子句的子查询中，外层select将被标记为DERIVED</li>
<li><strong>UNION RESULT</strong>：从UNION表获取结果的select</li>
</ul>
</li>
<li><p><strong>table</strong>（显示这一行的数据是关于哪张表的）</p>
</li>
<li><p><strong>type</strong>（显示查询使用了那种类型，从最好到最差依次排列    <strong>system &gt; const &gt; eq_ref &gt; ref &gt; fulltext &gt; ref_or_null &gt; index_merge &gt; unique_subquery &gt; index_subquery &gt; range &gt; index &gt; ALL</strong> ）</p>
<ul>
<li>system：表只有一行记录（等于系统表），是 const 类型的特例，平时不会出现</li>
<li>const：表示通过索引一次就找到了，const 用于比较 primary key 或 unique 索引，因为只要匹配一行数据，所以很快，如将主键置于 where 列表中，mysql 就能将该查询转换为一个常量</li>
<li>eq_ref：唯一性索引扫描，对于每个索引键，表中只有一条记录与之匹配，常见于主键或唯一索引扫描</li>
<li>ref：非唯一性索引扫描，范围匹配某个单独值得所有行。本质上也是一种索引访问，他返回所有匹配某个单独值的行，然而，它可能也会找到多个符合条件的行，多以他应该属于查找和扫描的混合体</li>
<li>range：只检索给定范围的行，使用一个索引来选择行。key列显示使用了哪个索引，一般就是在你的where语句中出现了between、&lt;、&gt;、in等的查询，这种范围扫描索引比全表扫描要好，因为它只需开始于索引的某一点，而结束于另一点，不用扫描全部索引</li>
<li>index：Full Index Scan，index于ALL区别为index类型只遍历索引树。通常比ALL快，因为索引文件通常比数据文件小。（<strong>也就是说虽然all和index都是读全表，但index是从索引中读取的，而all是从硬盘中读的</strong>）</li>
<li>ALL：Full Table Scan，将遍历全表找到匹配的行</li>
</ul>
<p>tip: 一般来说，得保证查询至少达到range级别，最好到达ref</p>
</li>
<li><p><strong>possible_keys</strong>（显示可能应用在这张表中的索引，一个或多个，查询涉及到的字段若存在索引，则该索引将被列出，但不一定被查询实际使用）</p>
</li>
<li><p><strong>key</strong></p>
<ul>
<li>实际使用的索引，如果为NULL，则没有使用索引</li>
<li><strong>查询中若使用了覆盖索引，则该索引和查询的 select 字段重叠，仅出现在key列表中</strong></li>
</ul>
</li>
</ul>
<p><img src="https://gitee.com/wjxyzs/img/raw/master/img/1734bff38f6a6955.jpg" alt=""></p>
<ul>
<li><p>key_len</p>
<ul>
<li>表示索引中使用的字节数，可通过该列计算查询中使用的索引的长度。在不损失精确性的情况下，长度越短越好</li>
<li>key_len显示的值为索引字段的最大可能长度，并非实际使用长度，即key_len是根据表定义计算而得，不是通过表内检索出的</li>
</ul>
</li>
<li><p><strong>ref</strong> （显示索引的哪一列被使用了，如果可能的话，是一个常数。哪些列或常量被用于查找索引列上的值）</p>
</li>
<li><p><strong>rows</strong> （根据表统计信息及索引选用情况，大致估算找到所需的记录所需要读取的行数）</p>
</li>
<li><p>Extra</p>
<p>（包含不适合在其他列中显示但十分重要的额外信息）</p>
<ol>
<li>using filesort: 说明mysql会对数据使用一个外部的索引排序，不是按照表内的索引顺序进行读取。mysql中无法利用索引完成的排序操作称为“文件排序”。常见于order by和group by语句中</li>
<li>Using temporary：使用了临时表保存中间结果，mysql在对查询结果排序时使用临时表。常见于排序order by和分组查询group by。</li>
<li>using index：表示相应的select操作中使用了覆盖索引，避免访问了表的数据行，效率不错，如果同时出现using where，表明索引被用来执行索引键值的查找；否则索引被用来读取数据而非执行查找操作</li>
<li>using where：使用了where过滤</li>
<li>using join buffer：使用了连接缓存</li>
<li>impossible where：where子句的值总是false，不能用来获取任何元祖</li>
<li>select tables optimized away：在没有group by子句的情况下，基于索引优化操作或对于MyISAM存储引擎优化COUNT(*)操作，不必等到执行阶段再进行计算，查询执行计划生成的阶段即完成优化</li>
<li>distinct：优化distinct操作，在找到第一匹配的元祖后即停止找同样值的动作</li>
</ol>
</li>
</ul>
<p><strong>case</strong>:</p>
<p><img src="https://gitee.com/wjxyzs/img/raw/master/img/1734bff39882383d.jpg" alt=""></p>
<ol>
<li>第一行（执行顺序4）：id列为1，表示是union里的第一个select，select_type列的primary表示该查询为外层查询，table列被标记为，表示查询结果来自一个衍生表，其中derived3中3代表该查询衍生自第三个select查询，即id为3的select。【select <a href="http://d1.name" target="_blank" rel="noopener">d1.name</a>……】</li>
<li>第二行（执行顺序2）：id为3，是整个查询中第三个select的一部分。因查询包含在from中，所以为derived。【select id,name from t1 where other_column=’’】</li>
<li>第三行（执行顺序3）：select列表中的子查询select_type为subquery，为整个查询中的第二个select。【select id from t3】</li>
<li>第四行（执行顺序1）：select_type为union，说明第四个select是union里的第二个select，最先执行【select name,id from t2】</li>
<li>第五行（执行顺序5）：代表从union的临时表中读取行的阶段，table列的&lt;union1,4&gt;表示用第一个和第四个select的结果进行union操作。【两个结果union操作】</li>
</ol>
<h3 id="慢查询日志"><a href="#慢查询日志" class="headerlink" title="慢查询日志"></a>慢查询日志</h3><p>MySQL 的慢查询日志是 MySQL 提供的一种日志记录，它用来记录在 MySQL 中响应时间超过阈值的语句，具体指运行时间超过 <font color=red size=3><code>long_query_time</code></font> 值的 SQL，则会被记录到慢查询日志中。</p>
<ul>
<li><font color=red size=3><code>long_query_time</code></font>  的默认值为10，意思是运行10秒以上的语句</li>
<li>默认情况下，MySQL数据库没有开启慢查询日志，需要手动设置参数开启</li>
</ul>
<p><strong>查看开启状态</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">VARIABLES</span> <span class="keyword">LIKE</span> <span class="string">'%slow_query_log%'</span></span><br></pre></td></tr></table></figure>

<p><strong>开启慢查询日志</strong></p>
<ul>
<li>临时配置：</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; set global slow_query_log='ON';</span><br><span class="line">mysql&gt; set global slow_query_log_file='/var/lib/mysql/hostname-slow.log';</span><br><span class="line">mysql&gt; set global long_query_time=2;</span><br><span class="line">也可<span class="keyword">set</span>文件位置，系统会默认给一个缺省文件host_name-slow.log</span><br><span class="line"></span><br><span class="line">使用<span class="keyword">set</span>操作开启慢查询日志只对当前数据库生效，如果MySQL重启则会失效。</span><br></pre></td></tr></table></figure>

<ul>
<li><p>永久配置</p>
<p>修改配置文件my.cnf或my.ini，在[mysqld]一行下面加入两个配置参数</p>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">slow_query_log = ON</span><br><span class="line">slow_query_log_file = /var/lib/mysql/hostname-slow.log</span><br><span class="line">long_query_time = 3</span><br></pre></td></tr></table></figure>

<p>注：log-slow-queries 参数为慢查询日志存放的位置，一般这个目录要有 MySQL 的运行帐号的可写权限，一般都将这个目录设置为 MySQL 的数据存放目录；long_query_time=2 中的 2 表示查询超过两秒才记录；在my.cnf或者 my.ini 中添加 log-queries-not-using-indexes 参数，表示记录下没有使用索引的查询。</p>
<p>可以用 <font color=red size=3><code>select sleep(4)</code></font> 验证是否成功开启。</p>
<p>在生产环境中，如果手工分析日志，查找、分析SQL，还是比较费劲的，所以MySQL提供了日志分析工具<strong>mysqldumpslow</strong>。</p>
<p>通过 mysqldumpslow –help 查看操作帮助信息</p>
<ul>
<li><p>得到返回记录集最多的10个SQL</p>
<p><font color=red size=3><code>mysqldumpslow -s r -t 10 /var/lib/mysql/hostname-slow.log</code></font></p>
</li>
<li><p>得到访问次数最多的10个SQL</p>
<p><font color=red size=3><code>mysqldumpslow -s c -t 10 /var/lib/mysql/hostname-slow.log</code></font></p>
</li>
<li><p>得到按照时间排序的前10条里面含有左连接的查询语句</p>
<p><font color=red size=3><code>mysqldumpslow -s t -t 10 -g &quot;left join&quot; /var/lib/mysql/hostname-slow.log</code></font></p>
</li>
<li><p>也可以和管道配合使用</p>
<p><font color=red size=3><code>mysqldumpslow -s r -t 10 /var/lib/mysql/hostname-slow.log | more</code></font></p>
</li>
</ul>
<p><strong>也可使用 pt-query-digest 分析 RDS MySQL 慢查询日志</strong></p>
<h3 id="Show-Profile-分析查询"><a href="#Show-Profile-分析查询" class="headerlink" title="Show Profile 分析查询"></a>Show Profile 分析查询</h3><p>通过慢日志查询可以知道哪些 SQL 语句执行效率低下，通过 explain 我们可以得知 SQL 语句的具体执行情况，索引使用等，还可以结合<font color=red size=3><code>Show Profile</code></font>命令查看执行状态。</p>
<ul>
<li><p>Show Profile 是 MySQL 提供可以用来分析当前会话中语句执行的资源消耗情况。可以用于SQL的调优的测量</p>
</li>
<li><p>默认情况下，参数处于关闭状态，并保存最近15次的运行结果</p>
</li>
<li><p>分析步骤</p>
<ul>
<li><p>是否支持，看看当前的mysql版本是否支持</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt;Show  variables like &#39;profiling&#39;;  --默认是关闭，使用前需要开启</span><br></pre></td></tr></table></figure>
</li>
<li><p>开启功能，默认是关闭，使用前需要开启</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt;set profiling&#x3D;1;</span><br></pre></td></tr></table></figure>
</li>
<li><p>运行SQL</p>
</li>
<li><p>查看结果</p>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; show profiles;</span><br><span class="line">+<span class="comment">----------+------------+---------------------------------+</span></span><br><span class="line">| Query_ID | Duration | Query |</span><br><span class="line">+<span class="comment">----------+------------+---------------------------------+</span></span><br><span class="line">| 1 | 0.00385450 | <span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">"profiling"</span> |</span><br><span class="line">| <span class="number">2</span> | <span class="number">0.00170050</span> | <span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">"profiling"</span> |</span><br><span class="line">| <span class="number">3</span> | <span class="number">0.00038025</span> | <span class="keyword">select</span> * <span class="keyword">from</span> t_base_user |</span><br><span class="line">+<span class="comment">----------+------------+---------------------------------+</span></span><br></pre></td></tr></table></figure>

<ul>
<li>诊断SQL，show profile cpu,block io for query id(上一步前面的问题SQL数字号码)</li>
<li>日常开发需要注意的结论<ul>
<li>converting HEAP to MyISAM 查询结果太大，内存都不够用了往磁盘上搬了。</li>
<li>create tmp table 创建临时表，这个要注意</li>
<li>Copying to tmp table on disk 把内存临时表复制到磁盘</li>
<li>locked</li>
</ul>
</li>
</ul>
</li>
</ul>
<blockquote>
<p>查询中哪些情况不会使用索引？</p>
</blockquote>
<h3 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h3><h3 id="索引优化"><a href="#索引优化" class="headerlink" title="索引优化"></a>索引优化</h3><ol>
<li>全值匹配我最爱</li>
<li>最佳左前缀法则，比如建立了一个联合索引(a,b,c)，那么其实我们可利用的索引就有(a), (a,b), (a,b,c)</li>
<li>不在索引列上做任何操作（计算、函数、(自动or手动)类型转换），会导致索引失效而转向全表扫描</li>
<li>存储引擎不能使用索引中范围条件右边的列</li>
<li>尽量使用覆盖索引(只访问索引的查询(索引列和查询列一致))，减少select</li>
<li>is null ,is not null 也无法使用索引</li>
<li>like “xxxx%” 是可以用到索引的，like “%xxxx” 则不行(like “%xxx%” 同理)。like以通配符开头(‘%abc…’)索引失效会变成全表扫描的操作，</li>
<li>字符串不加单引号索引失效</li>
<li>少用or，用它来连接时会索引失效</li>
<li>&lt;，&lt;=，=，&gt;，&gt;=，BETWEEN，IN 可用到索引，&lt;&gt;，not in ，!= 则不行，会导致全表扫描</li>
</ol>
<p><strong>一般性建议</strong></p>
<ul>
<li>对于单键索引，尽量选择针对当前query过滤性更好的索引</li>
<li>在选择组合索引的时候，当前Query中过滤性最好的字段在索引字段顺序中，位置越靠前越好。</li>
<li>在选择组合索引的时候，尽量选择可以能够包含当前query中的where字句中更多字段的索引</li>
<li>尽可能通过分析统计信息和调整query的写法来达到选择合适索引的目的</li>
<li>少用Hint强制索引</li>
</ul>
<h3 id="查询优化"><a href="#查询优化" class="headerlink" title="查询优化"></a>查询优化</h3><p><strong>永远小标驱动大表（小的数据集驱动大的数据集）</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">slect * from A where id in (select id from B)`等价于</span><br><span class="line"><span class="comment">#等价于</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">id</span> <span class="keyword">from</span> B</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> A <span class="keyword">where</span> A.id=B.id</span><br></pre></td></tr></table></figure>

<p>当 B 表的数据集必须小于 A 表的数据集时，用 in 优于 exists</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> A <span class="keyword">where</span> <span class="keyword">exists</span> (<span class="keyword">select</span> <span class="number">1</span> <span class="keyword">from</span> B <span class="keyword">where</span> B.id=A.id)</span><br><span class="line"><span class="comment">#等价于</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> A</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> B <span class="keyword">where</span> B.id = A.id<span class="string">`</span></span><br></pre></td></tr></table></figure>

<p>当 A 表的数据集小于B表的数据集时，用 exists优于用 in</p>
<p>注意：A表与B表的ID字段应建立索引。</p>
<p><strong>order by关键字优化</strong></p>
<ul>
<li>order by子句，尽量使用 Index 方式排序，避免使用 FileSort 方式排序</li>
<li>MySQL 支持两种方式的排序，FileSort 和 Index，Index效率高，它指 MySQL 扫描索引本身完成排序，FileSort 效率较低；</li>
<li>ORDER BY 满足两种情况，会使用Index方式排序；①ORDER BY语句使用索引最左前列 ②使用where子句与ORDER BY子句条件列组合满足索引最左前列</li>
<li>尽可能在索引列上完成排序操作，遵照索引建的最佳最前缀</li>
<li>如果不在索引列上，filesort 有两种算法，mysql就要启动双路排序和单路排序<ul>
<li>双路排序：MySQL 4.1之前是使用双路排序,字面意思就是两次扫描磁盘，最终得到数据</li>
<li>单路排序：从磁盘读取查询需要的所有列，按照order by 列在 buffer对它们进行排序，然后扫描排序后的列表进行输出，效率高于双路排序</li>
</ul>
</li>
<li>优化策略<ul>
<li>增大sort_buffer_size参数的设置</li>
<li>增大max_lencth_for_sort_data参数的设置</li>
</ul>
</li>
</ul>
<p><strong>GROUP BY关键字优化</strong></p>
<ul>
<li>group by实质是先排序后进行分组，遵照索引建的最佳左前缀</li>
<li>当无法使用索引列，增大 <code>max_length_for_sort_data</code> 参数的设置，增大<code>sort_buffer_size</code>参数的设置</li>
<li>where高于having，能写在where限定的条件就不要去having限定了</li>
</ul>
<h3 id="数据类型优化"><a href="#数据类型优化" class="headerlink" title="数据类型优化"></a>数据类型优化</h3><p>MySQL 支持的数据类型非常多，选择正确的数据类型对于获取高性能至关重要。不管存储哪种类型的数据，下面几个简单的原则都有助于做出更好的选择。</p>
<ul>
<li><p>更小的通常更好：一般情况下，应该尽量使用可以正确存储数据的最小数据类型。</p>
<p>简单就好：简单的数据类型通常需要更少的CPU周期。例如，整数比字符操作代价更低，因为字符集和校对规则（排序规则）使字符比较比整型比较复杂。</p>
</li>
<li><p>尽量避免NULL：通常情况下最好指定列为NOT NULL</p>
</li>
</ul>
<hr>
<h2 id="九、分区、分表、分库"><a href="#九、分区、分表、分库" class="headerlink" title="九、分区、分表、分库"></a>九、分区、分表、分库</h2><hr>
<h3 id="MySQL分区"><a href="#MySQL分区" class="headerlink" title="MySQL分区"></a>MySQL分区</h3><p>一般情况下我们创建的表对应一组存储文件，使用<code>MyISAM</code>存储引擎时是一个<code>.MYI</code>和<code>.MYD</code>文件，使用<code>Innodb</code>存储引擎时是一个<code>.ibd</code>和<code>.frm</code>（表结构）文件。</p>
<p>当数据量较大时（一般千万条记录级别以上），MySQL的性能就会开始下降，这时我们就需要将数据分散到多组存储文件，保证其单个文件的执行效率</p>
<p><strong>能干嘛</strong></p>
<ul>
<li>逻辑数据分割</li>
<li>提高单一的写和读应用速度</li>
<li>提高分区范围读查询的速度</li>
<li>分割数据能够有多个不同的物理文件路径</li>
<li>高效的保存历史数据</li>
</ul>
<p><strong>怎么玩</strong></p>
<p>首先查看当前数据库是否支持分区</p>
<ul>
<li><p>MySQL5.6以及之前版本：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SHOW VARIABLES LIKE &#39;%partition%&#39;;</span><br></pre></td></tr></table></figure>
</li>
<li><p>MySQL5.6：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show plugins;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p><strong>分区类型及操作</strong></p>
<ul>
<li><p><strong>RANGE分区</strong>：基于属于一个给定连续区间的列值，把多行分配给分区。mysql将会根据指定的拆分策略，,把数据放在不同的表文件上。相当于在文件上,被拆成了小块.但是,对外给客户的感觉还是一张表，透明的。</p>
<p>按照 range 来分，就是每个库一段连续的数据，这个一般是按比如<strong>时间范围</strong>来的，比如交易表啊，销售表啊等，可以根据年月来存放数据。可能会产生热点问题，大量的流量都打在最新的数据上了。</p>
<p>range 来分，好处在于说，扩容的时候很简单。</p>
</li>
<li><p><strong>LIST分区</strong>：类似于按RANGE分区，每个分区必须明确定义。它们的主要区别在于，LIST分区中每个分区的定义和选择是基于某列的值从属于一个值列表集中的一个值，而RANGE分区是从属于一个连续区间值的集合。</p>
</li>
<li><p><strong>HASH分区</strong>：基于用户定义的表达式的返回值来进行选择的分区，该表达式使用将要插入到表中的这些行的列值进行计算。这个函数可以包含MySQL 中有效的、产生非负整数值的任何表达式。</p>
<p>hash 分发，好处在于说，可以平均分配每个库的数据量和请求压力；坏处在于说扩容起来比较麻烦，会有一个数据迁移的过程，之前的数据需要重新计算 hash 值重新分配到不同的库或表</p>
</li>
<li><p><strong>KEY分区</strong>：类似于按HASH分区，区别在于KEY分区只支持计算一列或多列，且MySQL服务器提供其自身的哈希函数。必须有一列或多列包含整数值。</p>
</li>
</ul>
<p><strong>看上去分区表很帅气，为什么大部分互联网还是更多的选择自己分库分表来水平扩展咧？</strong></p>
<ul>
<li>分区表，分区键设计不太灵活，如果不走分区键，很容易出现全表锁</li>
<li>一旦数据并发量上来，如果在分区表实施关联，就是一个灾难</li>
<li>自己分库分表，自己掌控业务场景与访问模式，可控。分区表，研发写了一个sql，都不确定mysql是怎么玩的，不太可控</li>
</ul>
<blockquote>
<p>随着业务的发展，业务越来越复杂，应用的模块越来越多，总的数据量很大，高并发读写操作均超过单个数据库服务器的处理能力怎么办？</p>
</blockquote>
<p>这个时候就出现了<strong>数据分片</strong>，数据分片指按照某个维度将存放在单一数据库中的数据分散地存放至多个数据库或表中。数据分片的有效手段就是对关系型数据库进行分库和分表。</p>
<p>区别于分区的是，分区一般都是放在单机里的，用的比较多的是时间范围分区，方便归档。只不过分库分表需要代码实现，分区则是mysql内部实现。分库分表和分区并不冲突，可以结合使用。</p>
<blockquote>
<p>说说分库与分表的设计</p>
</blockquote>
<h3 id="MySQL分表"><a href="#MySQL分表" class="headerlink" title="MySQL分表"></a>MySQL分表</h3><p>分表有两种分割方式，一种垂直拆分，另一种水平拆分。</p>
<ul>
<li><p><strong>垂直拆分</strong></p>
<p>垂直分表，通常是按照业务功能的使用频次，把主要的、热门的字段放在一起做为主要表。然后把不常用的，按照各自的业务属性进行聚集，拆分到不同的次要表中；主要表和次要表的关系一般都是一对一的。</p>
</li>
<li><p><strong>水平拆分(数据分片)</strong></p>
<p>单表的容量不超过500W，否则建议水平拆分。是把一个表复制成同样表结构的不同表，然后把数据按照一定的规则划分，分别存储到这些表中，从而保证单表的容量不会太大，提升性能；当然这些结构一样的表，可以放在一个或多个数据库中。</p>
<p>水平分割的几种方法：</p>
<ul>
<li>使用MD5哈希，做法是对UID进行md5加密，然后取前几位（我们这里取前两位），然后就可以将不同的UID哈希到不同的用户表（user_xx）中了。</li>
<li>还可根据时间放入不同的表，比如：article_201601，article_201602。</li>
<li>按热度拆分，高点击率的词条生成各自的一张表，低热度的词条都放在一张大表里，待低热度的词条达到一定的贴数后，再把低热度的表单独拆分成一张表。</li>
<li>根据ID的值放入对应的表，第一个表user_0000，第二个100万的用户数据放在第二 个表user_0001中，随用户增加，直接添加用户表就行了。</li>
</ul>
</li>
</ul>
<p><img src="https://gitee.com/wjxyzs/img/raw/master/img/1734bff39ffffdd1.jpg" alt=""></p>
<h3 id="MySQL分库"><a href="#MySQL分库" class="headerlink" title="MySQL分库"></a>MySQL分库</h3><blockquote>
<p>为什么要分库?</p>
</blockquote>
<p>数据库集群环境后都是多台 slave，基本满足了读取操作; 但是写入或者说大数据、频繁的写入操作对master性能影响就比较大，这个时候，单库并不能解决大规模并发写入的问题，所以就会考虑分库。</p>
<blockquote>
<p>分库是什么？</p>
</blockquote>
<p>一个库里表太多了，导致了海量数据，系统性能下降，把原本存储于一个库的表拆分存储到多个库上， 通常是将表按照功能模块、关系密切程度划分出来，部署到不同库上。</p>
<p>优点：</p>
<ul>
<li>减少增量数据写入时的锁对查询的影响</li>
<li>由于单表数量下降，常见的查询操作由于减少了需要扫描的记录，使得单表单次查询所需的检索行数变少，减少了磁盘IO，时延变短</li>
</ul>
<p>但是它无法解决单表数据量太大的问题</p>
<p><strong>分库分表后的难题</strong></p>
<p>分布式事务的问题，数据的完整性和一致性问题。</p>
<p>数据操作维度问题：用户、交易、订单各个不同的维度，用户查询维度、产品数据分析维度的不同对比分析角度。 跨库联合查询的问题，可能需要两次查询 跨节点的count、order by、group by以及聚合函数问题，可能需要分别在各个节点上得到结果后在应用程序端进行合并 额外的数据管理负担，如：访问数据表的导航定位 额外的数据运算压力，如：需要在多个节点执行，然后再合并计算程序编码开发难度提升，没有太好的框架解决，更多依赖业务看如何分，如何合，是个难题。</p>
<blockquote>
<p>配主从，正经公司的话，也不会让 Javaer 去搞的，但还是要知道</p>
</blockquote>
<h2 id="十、主从复制"><a href="#十、主从复制" class="headerlink" title="十、主从复制"></a>十、主从复制</h2><hr>
<h3 id="复制的基本原理"><a href="#复制的基本原理" class="headerlink" title="复制的基本原理"></a>复制的基本原理</h3><ul>
<li><p>slave 会从 master 读取 binlog 来进行数据同步</p>
</li>
<li><p>三个步骤</p>
<ol>
<li>master将改变记录到二进制日志（binary log）。这些记录过程叫做二进制日志事件，binary log events；</li>
<li>salve 将 master 的 binary log events 拷贝到它的中继日志（relay log）;</li>
<li>slave 重做中继日志中的事件，将改变应用到自己的数据库中。MySQL 复制是异步且是串行化的。</li>
</ol>
<p><img src="https://gitee.com/wjxyzs/img/raw/master/img/1734bff3c7c7b231.jpg" alt=""></p>
</li>
</ul>
<h3 id="复制的基本原则"><a href="#复制的基本原则" class="headerlink" title="复制的基本原则"></a>复制的基本原则</h3><ul>
<li>每个 slave只有一个 master</li>
<li>每个 salve只能有一个唯一的服务器 ID</li>
<li>每个master可以有多个salve</li>
</ul>
<h3 id="复制的最大问题"><a href="#复制的最大问题" class="headerlink" title="复制的最大问题"></a>复制的最大问题</h3><ul>
<li>延时</li>
</ul>
<hr>
<h2 id="十一、其他问题"><a href="#十一、其他问题" class="headerlink" title="十一、其他问题"></a>十一、其他问题</h2><hr>
<h3 id="说一说三个范式"><a href="#说一说三个范式" class="headerlink" title="说一说三个范式"></a>说一说三个范式</h3><ul>
<li>第一范式（1NF）：数据库表中的字段都是单一属性的，不可再分。这个单一属性由基本类型构成，包括整型、实数、字符型、逻辑型、日期型等。</li>
<li>第二范式（2NF）：数据库表中不存在非关键字段对任一候选关键字段的部分函数依赖（部分函数依赖指的是存在组合关键字中的某些字段决定非关键字段的情况），也即所有非关键字段都完全依赖于任意一组候选关键字。</li>
<li>第三范式（3NF）：在第二范式的基础上，数据表中如果不存在非关键字段对任一候选关键字段的传递函数依赖则符合第三范式。所谓传递函数依赖，指的是如 果存在”A → B → C”的决定关系，则C传递函数依赖于A。因此，满足第三范式的数据库表应该不存在如下依赖关系： 关键字段 → 非关键字段 x → 非关键字段y</li>
</ul>
<h3 id="百万级别或以上的数据如何删除"><a href="#百万级别或以上的数据如何删除" class="headerlink" title="百万级别或以上的数据如何删除"></a>百万级别或以上的数据如何删除</h3><p>关于索引：由于索引需要额外的维护成本，因为索引文件是单独存在的文件,所以当我们对数据的增加,修改,删除,都会产生额外的对索引文件的操作,这些操作需要消耗额外的IO,会降低增/改/删的执行效率。所以，在我们删除数据库百万级别数据的时候，查询MySQL官方手册得知删除数据的速度和创建的索引数量是成正比的。</p>
<ol>
<li>所以我们想要删除百万数据的时候可以先删除索引（此时大概耗时三分多钟）</li>
<li>然后删除其中无用数据（此过程需要不到两分钟）</li>
<li>删除完成后重新创建索引(此时数据较少了)创建索引也非常快，约十分钟左右。</li>
<li>与之前的直接删除绝对是要快速很多，更别说万一删除中断,一切删除会回滚。那更是坑了。</li>
</ol>
<h2 id="参考与感谢："><a href="#参考与感谢：" class="headerlink" title="参考与感谢："></a>参考与感谢：</h2><p><a href="https://zhuanlan.zhihu.com/p/29150809" target="_blank" rel="noopener">zhuanlan.zhihu.com/p/29150809</a></p>
<p><a href="https://juejin.im/post/5e3eb616f265da570d734dcb#heading-105" target="_blank" rel="noopener">juejin.im/post/5e3eb6…</a></p>
<p><a href="https://blog.csdn.net/yin767833376/article/details/81511377" target="_blank" rel="noopener">blog.csdn.net/yin76783337…</a></p>
]]></content>
      <categories>
        <category>直击面试</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
</search>
