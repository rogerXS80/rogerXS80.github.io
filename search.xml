<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>[人机交互接口]</title>
    <url>/2019/03/20/Bash%E5%88%9D%E8%AF%86/</url>
    <content><![CDATA[<h1 id="Bash-初识"><a href="#Bash-初识" class="headerlink" title="Bash 初识"></a>Bash 初识</h1><p><code>Bash Shell</code>是Linux的命令解释器，主要复杂用户程序与内核系统进行交互操作的一种接口，将用户输入的命令翻译给内核，由内核驱动硬件，最终将处理后的结果输出值<code>Bash Shell</code>屏幕中终端</p>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20220320213559585.png" alt="image-20220320213559585"></p>
<h2 id="Bash的作用"><a href="#Bash的作用" class="headerlink" title="Bash的作用"></a>Bash的作用</h2><p>1）文件管理 </p>
<p>2）权限管理 </p>
<p>3）用户管理 </p>
<p>4）磁盘管理 </p>
<p>5）网络管理 </p>
<p>6）软件管理 </p>
<p>7）应用管理</p>
<h2 id="如何使用bash"><a href="#如何使用bash" class="headerlink" title="如何使用bash"></a>如何使用bash</h2><ul>
<li>执行命令<ul>
<li>效率低，适合平时简单的工作</li>
</ul>
</li>
<li>执行脚本<ul>
<li>效率高，适合比较复杂繁琐的工作</li>
</ul>
</li>
</ul>
<p>创建100个用户，单纯输入命令需要100次，而使用shell脚本则可以轻松解决</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@web	~]<span class="comment">#	cat	useradd.sh</span></span><br><span class="line"><span class="meta">#!/usr/bin/bash</span></span><br><span class="line"><span class="comment">#批量创建脚本</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> &#123;1..100&#125;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">	useradd	alice-<span class="variable">$i</span></span><br><span class="line">	<span class="built_in">echo</span> <span class="string">"alice-<span class="variable">$i</span>"</span>	is	create	ok..</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>

<h2 id="命令提示符"><a href="#命令提示符" class="headerlink" title="命令提示符"></a>命令提示符</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@roger ~]<span class="comment"># </span></span><br><span class="line">[]：没有任何作用，只是为了分割 </span><br><span class="line">root：当前登录系统的用户 </span><br><span class="line">@：没有任何作用，为了分割用户和主机名 </span><br><span class="line">localhost：当前短格式的主机名 </span><br><span class="line">~：当前所在的工作目录 </span><br><span class="line">~特殊意义：任何系统的用户，都有自己的家目录，当前登录用户的家目录 </span><br><span class="line"></span><br><span class="line">超级管理员用户的家目录是：/root </span><br><span class="line">普通用户的家目录是：/home/用户名 </span><br><span class="line"><span class="comment">#：超级管理员的提示符</span></span><br><span class="line">$：普通用户的提示符</span><br></pre></td></tr></table></figure>

<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20220320213853972.png" alt="image-20220320213853972"></p>
<p>PS1的常用参数以及含义</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">\d ：代表日期，格式为weekday month date，例如：<span class="string">"Mon Aug 1"</span></span><br><span class="line">\H ：完整的主机名称</span><br><span class="line">\h ：仅取主机名中的第一个名字</span><br><span class="line">\t ：显示时间为24小时格式，如：HH：MM：SS</span><br><span class="line">\T ：显示时间为12小时格式</span><br><span class="line">\A ：显示时间为24小时格式：HH：MM</span><br><span class="line">\u ：当前用户的账号名称</span><br><span class="line">\v ：BASH的版本信息</span><br><span class="line">\w ：完整的工作目录名称</span><br><span class="line">\W ：利用basename取得工作目录名称，只显示最后一个目录名</span><br><span class="line">\<span class="comment"># ：下达的第几个命令</span></span><br><span class="line">\$ ：提示字符，如果是root用户，提示符为 <span class="comment"># ，普通用户则为 $</span></span><br><span class="line">　　</span><br><span class="line"><span class="comment">#颜色</span></span><br><span class="line">字体/背景</span><br><span class="line">30  40 黑色</span><br><span class="line">31  41 红色</span><br><span class="line">32  42 绿色</span><br><span class="line">33  43 黄色</span><br><span class="line">34  44 蓝色</span><br><span class="line">35  45 紫红色</span><br><span class="line">36  46 青蓝色</span><br><span class="line">37  47 白色</span><br><span class="line"></span><br><span class="line"><span class="comment">#修改配置文件.bashrc</span></span><br><span class="line">PS1=<span class="string">"\[\e[37;40m\][\[\e[32;40m\]\u\[\e[37;40m\]@\[\e[35;40m\]\h\[\e[0m\] \ [\e[36;40m\]\w\[\e[0m\]]\\$ "</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#修改主机名的命令 </span></span><br><span class="line">hostnamectl <span class="built_in">set</span>-hostname 主机名</span><br><span class="line"></span><br><span class="line">vim /etc/profiel.d/PS1.sh</span><br><span class="line"><span class="function"><span class="title">_set_prompt</span></span> () &#123;</span><br><span class="line">        _last_exit_code=$? <span class="comment"># Must come first!</span></span><br><span class="line">        C_EC=<span class="string">'\[\e[1;37m\]'</span>$(<span class="built_in">printf</span> <span class="string">'%3s'</span> <span class="variable">$&#123;_last_exit_code&#125;</span>)<span class="string">'\[\e[0m\]'</span></span><br><span class="line"> </span><br><span class="line">        <span class="comment">#todo: set encoding to UTF-8 !</span></span><br><span class="line">        FancyX=<span class="string">'\342\234\227'</span>      <span class="comment"># ✗ ✘</span></span><br><span class="line">        Checkmark=<span class="string">'\342\234\223'</span>   <span class="comment"># ✓ ✔</span></span><br><span class="line">        C_Fail=<span class="string">'\[\e[1;31m\]'</span><span class="variable">$&#123;FancyX&#125;</span><span class="string">'\[\e[0m\]'</span></span><br><span class="line">        C_Ok=<span class="string">'\[\e[32m\]'</span><span class="variable">$&#123;Checkmark&#125;</span><span class="string">'\[\e[0m\]'</span></span><br><span class="line">        C_Time=<span class="string">'\[\e[2;37m\]'</span><span class="string">'\t'</span><span class="string">'\[\e[0m\]'</span></span><br><span class="line"> </span><br><span class="line">        C_NormalUser=<span class="string">'\[\e[2;33m\]'</span><span class="string">'\u'</span><span class="string">'\[\e[0m\]'</span></span><br><span class="line">        C_RootUser=<span class="string">'\[\e[1;35m\]'</span><span class="string">'\u'</span><span class="string">'\[\e[0m\]'</span></span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span> [ $(uname -s) == <span class="string">"Darwin"</span> ]; <span class="keyword">then</span></span><br><span class="line">                _ip_addr=$(ipconfig getifaddr $(netstat -nr | awk <span class="string">'&#123; if ($1 ~/default/) &#123; print $6&#125; &#125;'</span>))</span><br><span class="line">        <span class="keyword">elif</span> [ $(uname -s) == <span class="string">"Linux"</span> ]; <span class="keyword">then</span></span><br><span class="line">                <span class="comment"># may print $(NF-2)</span></span><br><span class="line">                <span class="comment">#_ip_addr=$(ip route | awk '/ src / &#123;print $NF&#125;' | head -1 )</span></span><br><span class="line">                _ip_addr=$(ip route | grep -oP <span class="string">'(?&lt;=src )[0-9.]+'</span> | tail -1 )</span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line"> </span><br><span class="line">        C_Host=<span class="string">'\[\e[1;33m\]'</span>$(hostname -A | awk <span class="string">'&#123;print $1&#125;'</span>)<span class="string">'\[\e[0m\]'</span>,<span class="string">'\[\e[4;32m\]'</span><span class="variable">$&#123;_ip_addr:-\h&#125;</span><span class="string">'\[\e[0m\]'</span></span><br><span class="line">        C_Pwd=<span class="string">'\[\e[36m\]'</span><span class="string">'\w'</span><span class="string">'\[\e[0m\]'</span></span><br><span class="line">        C_Marker=<span class="string">'\[\e[1;37m\]'</span><span class="string">'\$'</span><span class="string">'\[\e[0m\]'</span></span><br><span class="line"> </span><br><span class="line">        git diff --<span class="built_in">exit</span>-code --quiet HEAD &gt;/dev/null 2&gt;&amp;1</span><br><span class="line">        _git_diff_exit_code=$?</span><br><span class="line">        <span class="keyword">if</span> [ <span class="variable">$&#123;_git_diff_exit_code&#125;</span> -eq 1 ]; <span class="keyword">then</span></span><br><span class="line">                C_Marker=<span class="string">'\[\e[101m\]'</span>*<span class="string">'\[\e[0m\]'</span><span class="string">" <span class="variable">$&#123;C_Marker&#125;</span>"</span></span><br><span class="line">        <span class="keyword">elif</span> [ <span class="variable">$&#123;_git_diff_exit_code&#125;</span> -eq 0 ]; <span class="keyword">then</span></span><br><span class="line">                C_Marker=<span class="string">'\[\e[102m\]'</span>=<span class="string">'\[\e[0m\]'</span><span class="string">" <span class="variable">$&#123;C_Marker&#125;</span>"</span></span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">        <span class="comment"># Add a bright white exit status for the last command</span></span><br><span class="line">        PS1=<span class="string">"<span class="variable">$C_EC</span> "</span></span><br><span class="line"> </span><br><span class="line">        <span class="comment"># If it was successful, print a green check mark.</span></span><br><span class="line">        <span class="comment"># Otherwise, print a red X.</span></span><br><span class="line">        <span class="keyword">if</span> [[ <span class="variable">$&#123;_last_exit_code&#125;</span> -eq 0 ]]; <span class="keyword">then</span></span><br><span class="line">                PS1+=<span class="string">"<span class="variable">$C_Ok</span> "</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">                PS1+=<span class="string">"<span class="variable">$C_Fail</span> "</span></span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line"> </span><br><span class="line">        <span class="comment"># print HH:ii:ss</span></span><br><span class="line">        PS1+=<span class="string">"<span class="variable">$C_Time</span> "</span></span><br><span class="line"> </span><br><span class="line">        <span class="comment"># If root, just print the host in red. Otherwise,</span></span><br><span class="line">        <span class="comment"># print the current user and host in green.</span></span><br><span class="line">        <span class="keyword">if</span> [[ <span class="variable">$EUID</span> -eq 0 ]]; <span class="keyword">then</span></span><br><span class="line">                PS1+=<span class="string">"<span class="variable">$&#123;C_RootUser&#125;</span>@<span class="variable">$&#123;C_Host&#125;</span>:"</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">                PS1+=<span class="string">"<span class="variable">$&#123;C_NormalUser&#125;</span>@<span class="variable">$&#123;C_Host&#125;</span>:"</span></span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line"> </span><br><span class="line">        <span class="comment"># Print the working directory and prompt marker</span></span><br><span class="line">        PS1+=<span class="string">"<span class="variable">$C_Pwd</span> <span class="variable">$C_Marker</span> "</span></span><br><span class="line">&#125;</span><br><span class="line">PROMPT_COMMAND=<span class="string">'_set_prompt'</span></span><br></pre></td></tr></table></figure>

<h1 id="Bash特性"><a href="#Bash特性" class="headerlink" title="Bash特性"></a>Bash特性</h1><h2 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h2><p>在语法中，中括号是可有可无的意思</p>
<table>
<thead>
<tr>
<th align="center">命令</th>
<th align="center">选项</th>
<th align="center">参数</th>
</tr>
</thead>
<tbody><tr>
<td align="center">command</td>
<td align="center">[options]</td>
<td align="center">[arguments]</td>
</tr>
</tbody></table>
<p>查看目录<code>ls</code></p>
<table>
<thead>
<tr>
<th align="center">选项</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">-l</td>
<td align="center">长格式显示详细信息</td>
</tr>
<tr>
<td align="center">-a</td>
<td align="center">显示所有文件，包括隐藏文件</td>
</tr>
<tr>
<td align="center">-d</td>
<td align="center">当遇到目录时列出目录本身而非目录内的文件</td>
</tr>
<tr>
<td align="center">-h</td>
<td align="center">显示文件大小，KB</td>
</tr>
<tr>
<td align="center">-i</td>
<td align="center">查看该文件的inode号</td>
</tr>
<tr>
<td align="center">-F</td>
<td align="center">在条目中追加指示符’/‘</td>
</tr>
</tbody></table>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#语法</span></span><br><span class="line">ls [options] [文件名]</span><br><span class="line"></span><br><span class="line"><span class="comment">#示例</span></span><br><span class="line">[root@web ~]<span class="comment"># ls               //命令</span></span><br><span class="line">[root@web ~]<span class="comment"># ls -l            //命令+选项</span></span><br><span class="line">[root@web ~]<span class="comment"># ls -l /home/     //命令+选项+参数</span></span><br><span class="line"><span class="comment">#命令：整条shell命令的主体</span></span><br><span class="line"><span class="comment">#选项：用于调节命令的具体功能</span></span><br><span class="line">	- 以<span class="string">'-'</span>引导段个事选项（单个字符），例如”-a“</span><br><span class="line">	- 以<span class="string">'--'</span>引导长格式选项（多个字符），例如”--all“</span><br><span class="line">	- 多个短格式选项可以卸载一起，只用一个”-“引导，例如”-la“</span><br><span class="line"><span class="comment">#参数：命令操作的对象，如文件、目录名等</span></span><br><span class="line"></span><br><span class="line">ps:命令必须开头，选项和参数位置可以发生变化</span><br><span class="line">   命令、选项、参数需要有空格隔开</span><br></pre></td></tr></table></figure>

<h2 id="命令补全"><a href="#命令补全" class="headerlink" title="命令补全"></a>命令补全</h2><p>当使用windows查找一个目录层级特别多的文件时，打开的效率会非常的慢，但如果使用linux查找一个目录层级特别多的文件时，可以通过tab键快速补全</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查看本机IP，忘记了具体命令</span></span><br><span class="line">[root@web ~]<span class="comment"># ifc</span></span><br><span class="line">ifcfg     ifconfig</span><br><span class="line"><span class="comment">#按下tab键会自动补全</span></span><br><span class="line">[root@web ~]<span class="comment"># ifconfig</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#按一下tab没有反应，那么需要按两下tab键，列出所有if开头的命令</span></span><br><span class="line">[root@db04 ~]<span class="comment"># if</span></span><br><span class="line"><span class="keyword">if</span>         ifcfg      ifconfig   ifdown     ifenslave  ifnames    ifrename   iftop     ifup</span><br><span class="line"> </span><br><span class="line"><span class="comment">#Linux目录比较深，经常会使用tab键进行补全，如果路径出错是没有办法补全的</span></span><br><span class="line">[root@web ~]<span class="comment"># ls /etc/sysconfig/network-scripts/ifcfg-eth0</span></span><br><span class="line">/etc/sysconfig/network-scripts/ifcfg-eth0</span><br></pre></td></tr></table></figure>

<p>如果无法补全选项，那么需要安装一个扩展包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@db04 ~]<span class="comment"># yum install -y bash-completion</span></span><br></pre></td></tr></table></figure>

<h2 id="帮助文档"><a href="#帮助文档" class="headerlink" title="帮助文档"></a>帮助文档</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#获取ls命令的帮助</span></span><br><span class="line">[root@web ~]<span class="comment"># ls --help</span></span><br><span class="line">用法：ls [选项]... [文件]...</span><br><span class="line"></span><br><span class="line">[root@db04 ~]<span class="comment"># man ls</span></span><br></pre></td></tr></table></figure>

<p><a href="http://linux.51yip.com/" target="_blank" rel="noopener"><strong>Linux命令手册</strong></a></p>
<h2 id="命令快捷键"><a href="#命令快捷键" class="headerlink" title="命令快捷键"></a>命令快捷键</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Ctrl + a    <span class="comment">#光标跳转至正在输入的命令行的首部</span></span><br><span class="line">Ctrl + e    <span class="comment">#光标跳转至正在输入的命令行的尾部</span></span><br><span class="line">Ctrl + w    <span class="comment">#按照空格来删除bash内容</span></span><br><span class="line">Ctrl + c    <span class="comment">#终止前台运行的程序</span></span><br><span class="line">Ctrl + d    <span class="comment">#在shell中，ctrl-d表示退出当前shell。（logout、exit）</span></span><br><span class="line">Ctrl + z    <span class="comment">#将任务暂停，挂至后台</span></span><br><span class="line">Ctrl + l    <span class="comment">#清屏，和clear命令等效。</span></span><br><span class="line">Ctrl + k    <span class="comment">#删除从光标到行末的所有字符</span></span><br><span class="line">Ctrl + u    <span class="comment">#删除从光标到行首的所有字符</span></span><br><span class="line">Ctrl + r    <span class="comment">#搜索历史命令, 利用关键字</span></span><br><span class="line">Ctrl + 左右  <span class="comment">#按照单词快速跳转光标（Xshell提供的）</span></span><br><span class="line">ESC  + .    <span class="comment">#获取最后的指令</span></span><br><span class="line"></span><br><span class="line">ps:在命令行前加面加 <span class="string">"#"</span> 则该命令不会被执行</span><br></pre></td></tr></table></figure>

<h2 id="历史命令"><a href="#历史命令" class="headerlink" title="历史命令"></a>历史命令</h2><p>历史命令的作用：追溯之前的发生情况，在企业中，十分重要，涉及到运维的责任，记录历史命令对于运维人员来说，也有一个专业名词：审计</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">history </span><br><span class="line">-c：clear 清除历史命令 </span><br><span class="line">-d：delete 删除指定编号的历史命令 </span><br><span class="line">-w：write 保存历史命令到一个文件中（将历史命令保存到家目录下的.bash_history 隐藏文件中）</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看最后10条历史记录</span></span><br><span class="line">[root@web ~]<span class="comment"># history 10</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#清空历史记录</span></span><br><span class="line">[root@db04 ~]<span class="comment"># history -c</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#指定一条历史记录删除</span></span><br><span class="line">[root@web ~]<span class="comment"># history -d 110</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#保存历史命令</span></span><br><span class="line">[root@web ~]<span class="comment"># history -w</span></span><br><span class="line">/root/.bash_history</span><br><span class="line"> </span><br><span class="line">!+命令的一部分：执行上一条，含有该命令一部分的命令内容 （常用） </span><br><span class="line">!!：执行上一条命令 </span><br><span class="line">!+数字：执行历史命令中编号所在命令内容</span><br><span class="line"></span><br><span class="line"><span class="comment">#执行上一条命令</span></span><br><span class="line">[root@web ~]<span class="comment"># !!</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#执行上一条ls相关命令</span></span><br><span class="line">[root@web ~]<span class="comment"># !ls</span></span><br><span class="line">ls /etc/sysconfig/network-scripts/ifcfg-eth0</span><br><span class="line">/etc/sysconfig/network-scripts/ifcfg-eth0</span><br><span class="line"> </span><br><span class="line"><span class="comment">#执行历史命令中的第74条命令</span></span><br><span class="line">[root@db04 ~]<span class="comment"># !74</span></span><br></pre></td></tr></table></figure>

<h2 id="命令的别名"><a href="#命令的别名" class="headerlink" title="命令的别名"></a>命令的别名</h2><p>命令别名将用户经常使用的复杂命令简单化，创建属于自己的命令别名</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#设置别名 </span></span><br><span class="line">alias 别名=<span class="string">"完整的命令"</span></span><br><span class="line">[root@web ~]<span class="comment"># alias wk='ifconfig'</span></span><br><span class="line">[root@web ~]<span class="comment"># wk</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#取消别名 </span></span><br><span class="line">unalias 别名</span><br><span class="line">[root@web ~]<span class="comment"># unalias ifconfig</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#永久生效 /root/.bashrc</span></span><br><span class="line">[root@web ~]<span class="comment"># echo "alias ifconfig='ifconfig eth0'" &gt;&gt; /root/.bashrc</span></span><br></pre></td></tr></table></figure>

<h2 id="‘-‘与”-“"><a href="#‘-‘与”-“" class="headerlink" title="‘ ‘与” “"></a>‘ ‘与” “</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="string">' '</span>：所见即所得</span><br><span class="line"><span class="string">" "</span>：涉及变量</span><br><span class="line"></span><br><span class="line">[root@client ~]<span class="comment"># name='roger'</span></span><br><span class="line">[root@client ~]<span class="comment"># echo '$name'</span></span><br><span class="line"><span class="variable">$name</span></span><br><span class="line">[root@client ~]<span class="comment"># echo "$name"</span></span><br><span class="line">roger</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>SRE</category>
      </categories>
      <tags>
        <tag>Linxu基础</tag>
      </tags>
  </entry>
  <entry>
    <title>[Linux基础]</title>
    <url>/2019/03/20/Linux%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<p><a href="https://rogerxs80.github.io/2019/02/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/" target="_blank" rel="noopener">1.计算机组成原理（Computer）</a></p>
<p><a href="https://rogerxs80.github.io/2019/02/20/%E8%99%9A%E6%8B%9F%E5%8C%96%E7%8E%AF%E5%A2%83/" target="_blank" rel="noopener">2.虚拟化环境（Vmware）</a></p>
<p><a href="https://rogerxs80.github.io/2019/03/20/Bash%E5%88%9D%E8%AF%86/" target="_blank" rel="noopener">3.人机交互接口（Bash Shell）</a></p>
<p><a href="https://rogerxs80.github.io/2019/03/20/%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/" target="_blank" rel="noopener">4.文件管理（File）</a></p>
<p><a href="https://rogerxs80.github.io/2019/03/20/vim%E7%BC%96%E8%BE%91%E5%99%A8/" target="_blank" rel="noopener">5.vim编辑器（Edit）</a></p>
<p><a href="https://rogerxs80.github.io/2019/03/20/%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86/" target="_blank" rel="noopener">6.用户管理（User）</a></p>
]]></content>
      <categories>
        <category>SRE</category>
      </categories>
      <tags>
        <tag>Linxu基础</tag>
      </tags>
  </entry>
  <entry>
    <title>[vim编辑器]</title>
    <url>/2019/03/20/vim%E7%BC%96%E8%BE%91%E5%99%A8/</url>
    <content><![CDATA[<h1 id="编辑工具vim"><a href="#编辑工具vim" class="headerlink" title="编辑工具vim"></a>编辑工具vim</h1><blockquote>
<p>Q：什么是vim</p>
<p>vi和vim是linux下的一个文本编辑工具。（可以理解为windows的记事本，或Notepad++）</p>
<p>Q：为什么需要vim</p>
<p>因为linxu一切皆为文件，而我们工作最多的就是蟹盖某个服务的配置。（其实就是修改文件内容）<br>也就是说如果没有vi或vim我们有很多工作都无法完成。所以vim是学习linux最重要的命令之一</p>
<p>Q：vi和vim的区别</p>
<p>vi和vim都是文本编辑器，只不过vim是vi的增强版，比vi多了语法高亮显示，其他编辑功能几乎无差，所以使用vi还是vim取决于个人习惯。<br>由于前期我们采用最小化安装操作系统所以没有vim命令，可以使用yum install vim进行安装</p>
<p>Q：如何使用vim</p>
<p>在使用vim之前，我们需要线介绍下vim的三种模式：普通模式、编辑模式、末行模式<br>每种模式分别支持多种不同的快捷键，要向高效率地操作文本，就必须先搞清这三种模式的操作区别以及模式之间的切换方法</p>
</blockquote>
<h2 id="vim三种模式介绍"><a href="#vim三种模式介绍" class="headerlink" title="vim三种模式介绍"></a>vim三种模式介绍</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1.普通模式：主要是控制光标移动，可对文本进行复制、粘贴、删除等工作。</span><br><span class="line">  -使用vim filename编辑一个文件时，已进入该文件就是普通模式</span><br><span class="line">  -在这个模式下，可以进行光标移动、复制、删除、粘贴操作</span><br><span class="line">2.编辑模式：主要进行文本内容编辑和修改</span><br><span class="line">  -从普通模式进入编辑模式，只需按一个键即可i,I,a,A,o,O</span><br><span class="line">  -当进入编辑模式时，会在屏幕的最下一行会出现INSERT标记</span><br><span class="line">  -从编辑模式回到普通模式会需要按键盘左上方的ESC键即可</span><br><span class="line">3.末行模式：主要用于保存或推出文本</span><br><span class="line">  -在普通模式下，输入<span class="string">":"</span>或者<span class="string">"/"</span>即可进入末行模式</span><br><span class="line">  -在命令模式下，可进行的操作有，显示行号、搜索、替换、保存、退出</span><br><span class="line">4.小结：vim编辑打开文件整体流程如下：</span><br><span class="line">  -默认打开文件处于普通模式</span><br><span class="line">  -从普通模式切换至编辑模式需要使用a、i、o</span><br><span class="line">  -编辑模式修改完毕后需要先使用ECS返回普通模式</span><br><span class="line">  -在普通模式输入<span class="string">":"</span>或<span class="string">"/"</span>进入末行模式，可实现文件的保存于退出</span><br><span class="line">注意：在vim中，无法直接从编辑模式切换到末行模式。</span><br></pre></td></tr></table></figure>



<h2 id="vim使用"><a href="#vim使用" class="headerlink" title="vim使用"></a>vim使用</h2><p>普通模式：主要用于光标移动，复制，粘贴，删除，替换</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1.命令光标跳转</span></span><br><span class="line">G		 <span class="comment">#光标跳转至末端</span></span><br><span class="line">gg	 <span class="comment">#光标跳转至顶端</span></span><br><span class="line">Ngg  <span class="comment">#光标跳转至当前文件内的N行</span></span><br><span class="line">$		 <span class="comment">#光标跳转至当前光标所在行的尾部</span></span><br><span class="line">^|0	 <span class="comment">#光标跳转至当前光标所在行的首部</span></span><br><span class="line">-------------------------------------------</span><br><span class="line"><span class="comment">#2.文件内容较多</span></span><br><span class="line">ctrl+f  <span class="comment">#往下翻页（行比较多）</span></span><br><span class="line">ctrl+b  <span class="comment">#往上翻页</span></span><br><span class="line">-------------------------------------------</span><br><span class="line"><span class="comment">#3复制</span></span><br><span class="line">yy   <span class="comment">#复制当前光标所在的行			</span></span><br><span class="line">5yy  <span class="comment">#复制当前光标以及光标向下4行</span></span><br><span class="line"></span><br><span class="line">p(小写)   <span class="comment">#粘贴至当前光标下一行</span></span><br><span class="line">P(大写)   <span class="comment">#粘贴至当前光标上一行</span></span><br><span class="line">-------------------------------------------</span><br><span class="line"><span class="comment">#4.删除、剪贴、撤销	</span></span><br><span class="line">dd			<span class="comment">#删除当前光标所在的行</span></span><br><span class="line">4dd			<span class="comment">#删除当前光标所在的行及往下的3行</span></span><br><span class="line">dG			<span class="comment">#删除当前光标以后的所有行</span></span><br><span class="line">D			  <span class="comment">#删除当前光标及光标以后的内容</span></span><br><span class="line">x			  <span class="comment">#删除当前光标标记往后的字符</span></span><br><span class="line">X			  <span class="comment">#删除当前光标标记往前的字符</span></span><br><span class="line">dd &amp; p  <span class="comment">#剪贴、先删除dd(number dd),后粘贴p</span></span><br><span class="line">u			  <span class="comment">#撤销上一次的操作</span></span><br><span class="line">-------------------------------------------</span><br><span class="line"><span class="comment">#5.替换</span></span><br><span class="line">r  <span class="comment">#๊替换当前光标标记的单个字符</span></span><br><span class="line">R	 <span class="comment">#进入Replace模式，连续替换，ESC结束</span></span><br></pre></td></tr></table></figure>

<p>编辑模式：主要用于编辑文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">i  <span class="comment">#进入编辑模式，光标不做任何操作</span></span><br><span class="line">a	 <span class="comment">#进入编辑模式，将当前光标往后一位</span></span><br><span class="line">o  <span class="comment">#进入编辑模式，并且当前光标下添加一行空白内容</span></span><br><span class="line">-------------------------------------------</span><br><span class="line">I		<span class="comment">#进入编辑模式，并且光标会跳转至本行的头部</span></span><br><span class="line">A		<span class="comment">#进入编辑模式，将光标移动至本行的末尾</span></span><br><span class="line">O		<span class="comment">#进入编辑模式，并在当前光标上添加一行空白内容</span></span><br></pre></td></tr></table></figure>

<p>末行模式：主要用于搜索，保存，退出文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1.文件保存于退出</span></span><br><span class="line">:w		     <span class="comment">#保存当前状态</span></span><br><span class="line">:w！	      <span class="comment">#强制保存当前状态</span></span><br><span class="line">:q		     <span class="comment">#退出当前文档（文档必须保存才能退出）</span></span><br><span class="line">:q！		    <span class="comment">#强制退出当前文档不会修改当前内容</span></span><br><span class="line">:wq		     <span class="comment">#先保存，再退出</span></span><br><span class="line">:wq！	    <span class="comment">#强制保存并退出</span></span><br><span class="line">:x		     <span class="comment">#先保存，在退出</span></span><br><span class="line">ZZ		     <span class="comment">#保存退出，shift+zz</span></span><br><span class="line">:number    <span class="comment">#跳转至对应行号</span></span><br><span class="line">-------------------------------------------</span><br><span class="line"><span class="comment">#2.文件内容查找</span></span><br><span class="line">/string		<span class="comment">#需要搜索的内容</span></span><br><span class="line">n		      <span class="comment">#按搜索到的内容依次往下进行查找</span></span><br><span class="line">N		      <span class="comment">#按搜索到的内容依次往上进行查找</span></span><br><span class="line">-------------------------------------------</span><br><span class="line"><span class="comment">#3.文件内容替换</span></span><br><span class="line">:1,5s<span class="comment">#sbin#test#g  #替换1-5行中包含sbin的内容为test</span></span><br><span class="line">:%s<span class="comment">#sbin#test#g		 #替换整个文本文件中包含sbin的替换为test</span></span><br><span class="line">:%s<span class="comment">#sbin#test#gc   #替换内容时提示是否需要替换</span></span><br><span class="line">-------------------------------------------</span><br><span class="line"><span class="comment">#4.文件内容另存</span></span><br><span class="line">:w /root/test.txt  <span class="comment">#将所有内容另存为/root/test.txt</span></span><br><span class="line">-------------------------------------------</span><br><span class="line"><span class="comment">#5.文件内容读入</span></span><br><span class="line">:r /etc/hosts		<span class="comment">#读入/etc/hosts文件至当前光标下面</span></span><br><span class="line">:5r /etc/hosts  <span class="comment">#指定插入/etc/hosts文件至当前文件的第五行下面</span></span><br><span class="line"><span class="comment">#6.跳转至Number行</span></span><br><span class="line">:number</span><br></pre></td></tr></table></figure>

<p>视图模式：主要进行批量操作</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ctrl+v 进入可视块模式，选中需要注释的行</span><br><span class="line">1.插入：按<span class="built_in">shift</span>+i进入编辑模式，输入<span class="comment">#，结束按ECS键</span></span><br><span class="line">2.删除：选中内容后，按x或者d键删除</span><br><span class="line">3.替换：选中需要替换的内容，按下r键，然后输入替换后的内容</span><br><span class="line">-------------------------------------------</span><br><span class="line"><span class="built_in">shift</span>+v 进入可视行模式，选中整行内容</span><br><span class="line">1.复制：选中行内容后按y键既可复制</span><br><span class="line">2.删除：选中行内容后按d键删除</span><br></pre></td></tr></table></figure>

<h2 id="vim扩展知识"><a href="#vim扩展知识" class="headerlink" title="vim扩展知识"></a>vim扩展知识</h2><p>vim环境变量</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#环境变量临时生效</span></span><br><span class="line">:<span class="built_in">set</span> nu				     <span class="comment">#显示行号</span></span><br><span class="line">:<span class="built_in">set</span> ic				     <span class="comment">#忽略大小写，在搜索的时候有用</span></span><br><span class="line">:<span class="built_in">set</span> ai				     <span class="comment">#自动缩进</span></span><br><span class="line">:<span class="built_in">set</span> list			     <span class="comment">#显示制表符（空行，tab键）</span></span><br><span class="line">:<span class="built_in">set</span> no[nu|ic|ai]	 <span class="comment">#取消临时设定的变量</span></span><br></pre></td></tr></table></figure>

<p>环境变量永久生效。<code>~/.vimrc</code> 个人环境变量（优先级高） <code>/etc/vimrc</code> 全局环境变量</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#vim ~/.vimrc  #当下次再打开文件自动显示行号并忽略大小写</span></span><br><span class="line"><span class="built_in">set</span> nu</span><br><span class="line"><span class="built_in">set</span> ic</span><br><span class="line"></span><br><span class="line"><span class="comment">#如果个人vim环境没有配置，则使用全局vim环境变量配置</span></span><br><span class="line"><span class="comment">#如果个人vim环境和全局环境变量产生冲突，优先使用个人vim环境变量</span></span><br></pre></td></tr></table></figure>

<p>vim分页</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim -O 文件1 文件2</span><br></pre></td></tr></table></figure>

<p>vimdiff文件比对</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#相同文件之间差异比对，通常用于对比修改前后差异</span></span><br><span class="line">diff		  <span class="comment">#文件比对</span></span><br><span class="line">vimdiff		<span class="comment">#以vim方式打开两个文件对比，高亮显示不同的内容</span></span><br></pre></td></tr></table></figure>

<p>vim异常退出处理</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#如果vim非正常退出（ctrl+z）挂起或强制退出终端没关闭vim后</span></span><br><span class="line">1.假设打开filename文件被意外关闭，需要删除同文件名的.swp文件即可解决</span><br><span class="line">2.rm -f .filename.swp</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>SRE</category>
      </categories>
      <tags>
        <tag>Linxu基础</tag>
      </tags>
  </entry>
  <entry>
    <title>[文件管理]</title>
    <url>/2019/03/20/%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<h1 id="文件管理"><a href="#文件管理" class="headerlink" title="文件管理"></a>文件管理</h1><p>在linux中，一切皆文件，文件没有后缀区分（所谓的后缀是给用户看的）</p>
<p>文件管理就是对一个文件进行创建、复制、移动、查看、编辑、压缩、查找、删除等</p>
<h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><p>几乎所有的计算机操作系统都使用目录结构组织文件，具体来说就是在一个目录中存放子目录和文件，而子目录中又会进一步存放子目录和文件，依此类推形成一个树状的文件结构，称为”目录树”</p>
<p>Windows：以多根的方式组织文件<code>C:\、D:\</code></p>
<p>Linux：以单根的方式组织文件<code>/</code></p>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20220320175307261.png" alt="image-20220320175307261"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#存放系统可执行程序（系统命令） </span></span><br><span class="line">bin -&gt; usr/bin  </span><br><span class="line"><span class="comment">#存放系统可执行程序（系统命令：只有超级管理员可执行命令 super超级） </span></span><br><span class="line">sbin -&gt; usr/sbin </span><br><span class="line"><span class="comment">#系统启动的加载程序文件 </span></span><br><span class="line">boot</span><br><span class="line"><span class="comment">#设备文件</span></span><br><span class="line">dev</span><br><span class="line"><span class="comment">#存放系统及应用的配置文件</span></span><br><span class="line">etc  </span><br><span class="line"><span class="comment">#普通用户的家目录 </span></span><br><span class="line">home</span><br><span class="line"><span class="comment">#存放开发人员的系统库文件 </span></span><br><span class="line">lib -&gt; usr/lib lib64 -&gt; usr/lib64  </span><br><span class="line"><span class="comment">#一般来说是挂载光驱的目录 </span></span><br><span class="line">media  </span><br><span class="line"><span class="comment">#可挂载目录 </span></span><br><span class="line">mnt  </span><br><span class="line"><span class="comment">#存放第三方应用程序目录 </span></span><br><span class="line">opt  </span><br><span class="line"><span class="comment">#存放系统进程相关的目录</span></span><br><span class="line">proc  </span><br><span class="line"><span class="comment">#超级管理员root用户的家目录 </span></span><br><span class="line">root </span><br><span class="line"><span class="comment">#执行后的程序，产生的启动文件存放目录 </span></span><br><span class="line">run  </span><br><span class="line"><span class="comment">#无实意，空目录</span></span><br><span class="line">srv</span><br><span class="line"><span class="comment">#系统文件存放目录</span></span><br><span class="line">sys</span><br><span class="line"><span class="comment">#回收站，存放临时文件或者没有用要删除的文件 </span></span><br><span class="line">tmp</span><br><span class="line"><span class="comment">#存放系统用户文件 </span></span><br><span class="line">usr</span><br><span class="line"><span class="comment">#存放系统日志文件</span></span><br><span class="line">var</span><br><span class="line"></span><br><span class="line">-&gt;：软链接方式</span><br><span class="line">绿色：可执行程序</span><br></pre></td></tr></table></figure>

<p>配置文件目录/etc</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#主机名配置文件</span></span><br><span class="line">/etc/hostname  </span><br><span class="line"><span class="comment">#本地域名解析配置文件（本地DNS） </span></span><br><span class="line">/etc/hosts </span><br><span class="line"><span class="comment">#网卡配置文件 </span></span><br><span class="line">/etc/sysconfig/network-scripts/ifcfg-ens33 </span><br><span class="line"><span class="comment">#DNS配置文件 </span></span><br><span class="line">/etc/resolv.conf </span><br><span class="line"><span class="comment">#开机登录欢迎界面配置文件 </span></span><br><span class="line">/etc/motd </span><br><span class="line"><span class="comment">#全局环境变量配置文件 </span></span><br><span class="line">/etc/profile </span><br><span class="line"><span class="comment">#存放用户默认的环境变量配置文件（用于误删除之后的恢复）</span></span><br><span class="line">/etc/skel </span><br><span class="line"><span class="comment">#存放用户信息配置文件 </span></span><br><span class="line">/etc/passwd </span><br><span class="line"><span class="comment">#存放用户密码信息的配置文件 </span></span><br><span class="line">/etc/shadow </span><br><span class="line"><span class="comment">#存放用户组信息的配置文件 </span></span><br><span class="line">/etc/group </span><br><span class="line"><span class="comment">#存放用户组密码信息的配置文件</span></span><br><span class="line">/etc/gshadow</span><br></pre></td></tr></table></figure>

<p>可变的目录/var</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#系统日志 </span></span><br><span class="line">/var/log/messages </span><br><span class="line"><span class="comment">#系统登录日志 </span></span><br><span class="line">/var/log/secure</span><br></pre></td></tr></table></figure>

<p>设备相关目录/dev</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#系统中的第一块磁盘</span></span><br><span class="line">/dev/sda </span><br><span class="line"><span class="comment">#系统中的第一块磁盘的第一个分区</span></span><br><span class="line">/dev/sda1 </span><br><span class="line"><span class="comment">#系统中第五块磁盘的第4个分区 </span></span><br><span class="line">/dev/sde4</span><br><span class="line"><span class="comment">#黑洞（用于无用的内容输出）</span></span><br><span class="line">/dev/null</span><br><span class="line"><span class="comment">#从该设备中可以源源不断的取出数据</span></span><br><span class="line">/dev/zero</span><br><span class="line"><span class="comment">#随机数设备</span></span><br><span class="line">/dev/random  </span><br><span class="line"><span class="comment">#终端设备文件</span></span><br><span class="line">/dev/pts/0 </span><br><span class="line">/dev/pts/1 </span><br><span class="line"><span class="comment">#光驱</span></span><br><span class="line">/dev/cdrom</span><br></pre></td></tr></table></figure>

<h2 id="路径的定位"><a href="#路径的定位" class="headerlink" title="路径的定位"></a>路径的定位</h2><ul>
<li><p>绝对路径：以’/‘开头的路径，就是绝对路径</p>
</li>
<li><p>相对路径：不以’/‘开头的路径，就是相对路径</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#cd 绝对路径</span></span><br><span class="line">cd /etc/hostname</span><br><span class="line"><span class="comment">#cd 相对路径</span></span><br><span class="line">cd	test/abc</span><br><span class="line"></span><br><span class="line">FQ：/abc/test和abc/test是一样吗</span><br><span class="line"></span><br><span class="line">pwd  <span class="comment">#查看当前所在的路径</span></span><br><span class="line">cd   <span class="comment">#切换目录</span></span><br><span class="line">[root@client ~]<span class="comment"># cd /etc/sysconfig/network-scripts/</span></span><br><span class="line">[root@client network-scripts]<span class="comment"># pwd</span></span><br><span class="line">/etc/sysconfig/network-scripts</span><br></pre></td></tr></table></figure>

<h2 id="特殊目录"><a href="#特殊目录" class="headerlink" title="特殊目录"></a>特殊目录</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">. ：代表当前目录 </span><br><span class="line">.. ：代表上一级目录</span><br><span class="line">-：返回上一次所在目录</span><br><span class="line">cd：返回当前用户家目录</span><br><span class="line"></span><br><span class="line">[root@client ~]<span class="comment"># cd ./etc</span></span><br><span class="line">[root@client ~]<span class="comment"># cd ../etc</span></span><br><span class="line">[root@client ~]<span class="comment"># cd ~/../etc</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#根目录是最顶级目录</span></span><br><span class="line">[root@client etc]<span class="comment"># cd /</span></span><br><span class="line">[root@client /]<span class="comment"># cd ..</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#-后不能加任何目录</span></span><br><span class="line">[root@client /]<span class="comment"># cd /usr/local/src/</span></span><br><span class="line">[root@client src]<span class="comment"># cd -/bin</span></span><br><span class="line">-bash: cd: -/: 无效选项</span><br><span class="line">cd: 用法:cd [-L|[-P [-e]]] [dir]</span><br><span class="line">        </span><br><span class="line">ps：所谓的.和..目录实际上属于相对路径的一种表示形式</span><br></pre></td></tr></table></figure>

<h1 id="文件操作类命令"><a href="#文件操作类命令" class="headerlink" title="文件操作类命令"></a>文件操作类命令</h1><h2 id="目录创建mkdir"><a href="#目录创建mkdir" class="headerlink" title="目录创建mkdir"></a>目录创建<code>mkdir</code></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#语法</span></span><br><span class="line">mkdir [OPTION] 目录名 </span><br><span class="line">创建目录 [选项可有可无，可以有多个] 目录名字，可以有多个</span><br><span class="line"><span class="comment">#选项</span></span><br><span class="line">-p：递归创建目录，如果目录已存在，则不创建，并且不报错</span><br><span class="line">-v：打印目录的创建过程</span><br><span class="line"><span class="comment">#示例</span></span><br><span class="line">[root@client ~]<span class="comment"># mkdir dir1</span></span><br><span class="line">[root@client ~]<span class="comment"># mkdir /home/ob/dir1 /home/ob/dir2</span></span><br><span class="line">[root@client ~]<span class="comment"># mkdir -v /home/ob/&#123;dir3,dir4&#125;	</span></span><br><span class="line">[root@client ~]<span class="comment"># mkdir -pv /home/ob/dir5/dir6</span></span><br><span class="line">[root@client ~]<span class="comment"># mkdir -pv /home/&#123;ob/&#123;diu,but&#125;,boy&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#报错1</span></span><br><span class="line">没有这样的文件或目录，不能创建/d/wyk/dsb/250</span><br><span class="line">[root@client ~]<span class="comment"># mkdir /d/wyk/dsb/250</span></span><br><span class="line">mkdir: cannot create directory ‘/d/wyk/dsb/250’: No such file or directory</span><br><span class="line"><span class="comment">#报错2</span></span><br><span class="line">目录不能创建，zls文件已存在 </span><br><span class="line">[root@client ~]<span class="comment"># mkdir zls </span></span><br><span class="line">mkdir: cannot create directory ‘zls’: File exists</span><br><span class="line"></span><br><span class="line">ps：使用mkdir创建目录，它的上一级目录必须存在，才能创建</span><br><span class="line"></span><br><span class="line"><span class="comment">#练习：一条命令创建出以下目录</span></span><br><span class="line">/home/zls</span><br><span class="line">/home/zls/test1</span><br><span class="line">/home/zls/test2</span><br><span class="line">/home/oldboy</span><br><span class="line">/home/oldboy/test1</span><br><span class="line">/tmp/oldboy</span><br><span class="line">/tmp/oldgirl</span><br><span class="line">/root/<span class="built_in">test</span>/test1</span><br><span class="line">/root/<span class="built_in">test</span>/test2</span><br><span class="line">/root/abc</span><br><span class="line">/backup</span><br><span class="line"></span><br><span class="line">[root@client ~]<span class="comment"># mkdir -pv /&#123;home/&#123;zls/&#123;test1,test2&#125;,oldboy/test1&#125;,tmp/&#123;oldboy,oldgirl&#125;,root/&#123;test/&#123;test1,test2&#125;,abc&#125;,bachup&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="文件创建touch"><a href="#文件创建touch" class="headerlink" title="文件创建touch"></a>文件创建<code>touch</code></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#语法</span></span><br><span class="line">touch [OPTION] 文件名</span><br><span class="line">touch命令 [选项] 文件名，可以有多个</span><br><span class="line"></span><br><span class="line">[root@client ~]<span class="comment"># touch file  //文件已存在修改时间戳</span></span><br><span class="line">[root@client ~]<span class="comment"># touch file2 file3</span></span><br><span class="line">[root@client ~]<span class="comment"># touch /home/od/file4 file5</span></span><br><span class="line">[root@client ~]<span class="comment"># touch file&#123;a,b,c&#125;  //&#123;&#125;集合，等价touch a b c</span></span><br><span class="line">[root@client ~]<span class="comment"># touch file&#123;1..10&#125;</span></span><br><span class="line">[root@client ~]<span class="comment"># touch file&#123;a..z&#125;</span></span><br><span class="line"></span><br><span class="line">ps1：touch想要创建文件，该文件的上级目录必须存在</span><br><span class="line">ps2：&#123;a..z&#125;根据ASCII表进行创建</span><br></pre></td></tr></table></figure>

<h2 id="文件移动mv"><a href="#文件移动mv" class="headerlink" title="文件移动mv"></a>文件移动<code>mv</code></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@client ~]<span class="comment"># mv file1 file2    //原地移动相当于改名</span></span><br><span class="line">[root@client ~]<span class="comment"># mv file1 /tmp/    //移动文件至tmp目录</span></span><br><span class="line">[root@client ~]<span class="comment"># mv /tmp/file1 ./  //移动tmp目录的文件至当前目录</span></span><br><span class="line">[root@client ~]<span class="comment"># mv dir/ /tmp/     //移动目录至/tmp目录下</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#移动多个文件至同一个目录</span></span><br><span class="line">touch file&#123;1..3&#125;</span><br><span class="line">mv file1 file2 file3 /opt/</span><br><span class="line"></span><br><span class="line"><span class="comment">#移动多个目录至同一个目录</span></span><br><span class="line">mkdir dir&#123;1..3&#125;</span><br><span class="line">mv dir1/ dir2/ dir3/ /opt</span><br></pre></td></tr></table></figure>

<h2 id="显示目录结构tree"><a href="#显示目录结构tree" class="headerlink" title="显示目录结构tree"></a>显示目录结构<code>tree</code></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#修改yum源</span></span><br><span class="line">rm -fr /etc/yum.repos.d/*</span><br><span class="line">curl -o /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-7.repo</span><br><span class="line">curl -o /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-7.repo</span><br><span class="line"><span class="comment">#安装tree命令</span></span><br><span class="line">yum install -y tree</span><br><span class="line"></span><br><span class="line"><span class="comment">#选项</span></span><br><span class="line">-L：显示目录树的层级</span><br><span class="line">-d：只查看目录</span><br><span class="line">[root@client ~]<span class="comment"># tree /home/ob/  //显示当前目录下的结构</span></span><br><span class="line">/home/ob/</span><br><span class="line">├──	dir1</span><br><span class="line">├──	dir2</span><br><span class="line">├──	dir3</span><br><span class="line">├──	dir4</span><br><span class="line">├──	dir5</span><br><span class="line">│    └──dir6</span><br><span class="line">└──	dir7</span><br></pre></td></tr></table></figure>

<h2 id="文件复制cp"><a href="#文件复制cp" class="headerlink" title="文件复制cp"></a>文件复制<code>cp</code></h2><table>
<thead>
<tr>
<th align="center">选项</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">-p</td>
<td align="center">保持文件属性</td>
</tr>
<tr>
<td align="center">-r</td>
<td align="center">递归复制，复制目录及目录下的所有文件</td>
</tr>
<tr>
<td align="center">-a</td>
<td align="center">相当于-rp，既可以拷贝目录，又可以保持文件属性</td>
</tr>
<tr>
<td align="center">-i</td>
<td align="center">提示是否覆盖（cp命令默认使用”cp -i”）</td>
</tr>
<tr>
<td align="center">-v</td>
<td align="center">显示拷贝的过程</td>
</tr>
</tbody></table>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#语法 </span></span><br><span class="line">cp [option] 源文件 目标文件</span><br><span class="line"></span><br><span class="line">ps：默认只能拷贝文件</span><br><span class="line"></span><br><span class="line"><span class="comment">#示例</span></span><br><span class="line">[root@localhost ~]<span class="comment"># cp file /tmp/file_copy</span></span><br><span class="line"><span class="comment">#不修改名称</span></span><br><span class="line">[root@localhost ~]<span class="comment"># cp name /tmp/name</span></span><br><span class="line">[root@localhost ~]<span class="comment"># cp file /tmp/</span></span><br><span class="line"><span class="comment">#-p保持原文件属性</span></span><br><span class="line">[root@localhost ~]<span class="comment"># cp -p /abc/oldboy.txt .</span></span><br><span class="line">[root@localhost ~]<span class="comment"># cp -p file /tmp/file_p</span></span><br><span class="line"><span class="comment">#-r复制目录使用，递归复制</span></span><br><span class="line">[root@localhost ~]<span class="comment"># cp -r /etc/ /tmp/</span></span><br><span class="line">[root@localhost ~]<span class="comment"># cp -r /tmp /root/</span></span><br><span class="line"><span class="comment">#拷贝多个文件至一个目录</span></span><br><span class="line">[root@localhost ~]<span class="comment"># cp -rv /etc/hosts /etc/hostname /tmp</span></span><br><span class="line">[root@localhost ~]<span class="comment"># cp -rv /etc/&#123;hosts,hosts.bak&#125; /tmp</span></span><br><span class="line"><span class="comment">#-a拷贝目录，保持目录属性 </span></span><br><span class="line">[root@localhost ~]<span class="comment"># cp -a /abc /root/</span></span><br><span class="line"><span class="comment">#-i提示是否覆盖</span></span><br><span class="line">[root@localhost ~]<span class="comment"># cp -i /abc/oldboy.txt /tmp/zhujiao </span></span><br><span class="line">cp: overwrite ‘/tmp/zhujiao’?</span><br><span class="line"><span class="comment">#-v显示拷贝过程</span></span><br><span class="line">[root@localhost ~]<span class="comment"># cp -av /etc /tmp/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#避免提示的两种方式</span></span><br><span class="line">1.使用转义符：让转义符后面的内容还原成原始状态</span><br><span class="line">[root@localhost ~]<span class="comment"># \cp -a /etc /tmp/ </span></span><br><span class="line">2.使用命令的绝对路径 </span><br><span class="line">[root@localhost ~]<span class="comment"># /bin/cp -a /etc /tmp/</span></span><br><span class="line"><span class="comment">#查看命令所在位置</span></span><br><span class="line">[root@localhost ~]<span class="comment"># which cp</span></span><br><span class="line"></span><br><span class="line">ps：当拷贝文件有多个源文件的情况下，最后一个必须是目录，不能是普通文件，也不能不存在</span><br></pre></td></tr></table></figure>

<h2 id="删除命令rm"><a href="#删除命令rm" class="headerlink" title="删除命令rm"></a>删除命令<code>rm</code></h2><table>
<thead>
<tr>
<th align="center">选项</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">-i</td>
<td align="center">提示是否删除（rm命令默认使用”rm -i”）</td>
</tr>
<tr>
<td align="center">-r</td>
<td align="center">递归删除</td>
</tr>
<tr>
<td align="center">-f</td>
<td align="center">强制删除force</td>
</tr>
<tr>
<td align="center">-d</td>
<td align="center">只能删除空目录</td>
</tr>
</tbody></table>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#语法 </span></span><br><span class="line">rm [OPTION] 文件名</span><br><span class="line"></span><br><span class="line">ps：默认只能删除普通文件</span><br><span class="line"></span><br><span class="line"><span class="comment">#示例</span></span><br><span class="line">[root@localhost ~]<span class="comment"># rm /tmp/ooo </span></span><br><span class="line">rm: remove regular empty file ‘/tmp/ooo’?</span><br><span class="line"><span class="comment">#-f删除文件不提示</span></span><br><span class="line">[root@localhost ~]<span class="comment"># rm -f file.txt</span></span><br><span class="line">[root@localhost ~]<span class="comment"># rm -fr ./*</span></span><br><span class="line"><span class="comment">#-f删除不包括隐藏文件</span></span><br><span class="line">[root@localhost ~]<span class="comment"># mkdir /home/dir10</span></span><br><span class="line">[root@localhost ~]<span class="comment"># touch /home/dir10/&#123;file2,file3,.file4&#125;</span></span><br><span class="line">[root@localhost ~]<span class="comment"># rm -f /home/dir10/*</span></span><br><span class="line">[root@localhost ~]<span class="comment"># ls /home/dir10/ -a</span></span><br><span class="line">...	.file4</span><br><span class="line"><span class="comment">#-r递归删除</span></span><br><span class="line">[root@localhost ~]<span class="comment"># rm -r /root/abc/ </span></span><br><span class="line">rm: descend into directory ‘/root/abc/’? y </span><br><span class="line">rm: remove regular file ‘/root/abc/oldboy.txt’? y </span><br><span class="line">rm: remove directory ‘/root/abc/’? y</span><br><span class="line"><span class="comment">#-rf递归删除不提示（慎用）</span></span><br><span class="line">[root@localhost ~]<span class="comment"># rm -rf dir/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#报错</span></span><br><span class="line">[root@localhost ~]<span class="comment"># rm /root/abc/ </span></span><br><span class="line">rm: cannot remove ‘/root/abc/’: Is a directory </span><br><span class="line">/root/abc是一个目录，rm不能直接删除目录</span><br></pre></td></tr></table></figure>

<h1 id="文件查看类命令"><a href="#文件查看类命令" class="headerlink" title="文件查看类命令"></a>文件查看类命令</h1><h2 id="cat命令"><a href="#cat命令" class="headerlink" title="cat命令"></a>cat命令</h2><table>
<thead>
<tr>
<th align="center">选项</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">-n</td>
<td align="center">number 打印行号，显示行号</td>
</tr>
<tr>
<td align="center">-E</td>
<td align="center">end ，查看文件每一行的结尾，以$符表示</td>
</tr>
<tr>
<td align="center">-T</td>
<td align="center">Tab，查看文件中每一行内容是否含有制表符。以^I表示一个制表符</td>
</tr>
<tr>
<td align="center">-A</td>
<td align="center">既显示制表符，又显示文件的结尾</td>
</tr>
</tbody></table>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#语法</span></span><br><span class="line">cat [OPTION] 文件名</span><br><span class="line"></span><br><span class="line">ps：cat只能查看文件内容</span><br><span class="line"></span><br><span class="line"><span class="comment">#示例</span></span><br><span class="line">[root@localhost ~]<span class="comment"># echo 1 &gt; 1.txt </span></span><br><span class="line">[root@localhost ~]<span class="comment"># echo 2 &gt; 2.txt </span></span><br><span class="line">[root@localhost ~]<span class="comment"># echo 3 &gt; 3.txt</span></span><br><span class="line">[root@localhost ~]<span class="comment"># cat &#123;1..3&#125;.txt </span></span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line"></span><br><span class="line"><span class="comment">#报错 </span></span><br><span class="line">[root@localhost ~]<span class="comment"># cat /tmp </span></span><br><span class="line">cat: /tmp: Is a directory </span><br><span class="line">原因：/tmp是一个目录</span><br><span class="line"></span><br><span class="line"><span class="comment">#打印行号 -n</span></span><br><span class="line">[root@localhost ~]<span class="comment"># cat -n /etc/passwd</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#查看文件结尾 -E</span></span><br><span class="line">[root@localhost ~]<span class="comment"># cat -E 1.txt</span></span><br><span class="line">1 $ </span><br><span class="line">2 $</span><br><span class="line">3 $ </span><br><span class="line">4 7 $ </span><br><span class="line">5 2 0$ </span><br><span class="line">6 9$ </span><br><span class="line">7$</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看文件中的制表符 -T</span></span><br><span class="line">[root@localhost ~]<span class="comment"># cat -T 1.txt</span></span><br><span class="line">1^I^I </span><br><span class="line">2^I3 </span><br><span class="line">4^I^I7 </span><br><span class="line">5^I2^I^I^I0 </span><br><span class="line">6    9 </span><br><span class="line">7</span><br><span class="line"></span><br><span class="line"><span class="comment">#既查看制表符，又查看文件结尾 -A</span></span><br><span class="line">[root@localhost ~]<span class="comment"># cat -A 1.txt</span></span><br><span class="line">1^I^I $ </span><br><span class="line">2 $ </span><br><span class="line">^I3 $ </span><br><span class="line">4^I^I7 $ </span><br><span class="line">5^I2^I^I^I0$ </span><br><span class="line">6 9$ </span><br><span class="line">7$</span><br><span class="line"></span><br><span class="line"><span class="comment">#倒序查看文件</span></span><br><span class="line">[root@localhost ~]<span class="comment"># tac	1.txt</span></span><br></pre></td></tr></table></figure>

<h2 id="more-less命令"><a href="#more-less命令" class="headerlink" title="more-less命令"></a>more-less命令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#more语法</span></span><br><span class="line">more 文件名 </span><br><span class="line"></span><br><span class="line"><span class="comment">#操作</span></span><br><span class="line">按回车，一行一行向下显示 </span><br><span class="line">按空格，一页一页向下显示 </span><br><span class="line">Ctrl + b：向上查看 </span><br><span class="line">Ctrl + f：向下查看</span><br><span class="line"></span><br><span class="line"><span class="comment">#less语法</span></span><br><span class="line">less 文件名 </span><br><span class="line"></span><br><span class="line"><span class="comment">#操作</span></span><br><span class="line">按回车，一行一行向下显示 </span><br><span class="line">按空格，一页一页向下显示</span><br><span class="line">Ctrl + b：向上查看 </span><br><span class="line">Ctrl + f：向下查看 </span><br><span class="line"></span><br><span class="line">输入/关键字，高亮显示，所有匹配到的内容 </span><br><span class="line">按n，查找下一个关键字</span><br><span class="line">Shift + n 查找上一个关键字</span><br></pre></td></tr></table></figure>

<h2 id="head命令"><a href="#head命令" class="headerlink" title="head命令"></a>head命令</h2><table>
<thead>
<tr>
<th align="center">选项</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">-n</td>
<td align="center">指定查看文件开头的前n行，n可以省略</td>
</tr>
</tbody></table>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#语法</span></span><br><span class="line">head 文件名</span><br><span class="line">默认显示一个文件的前10行内容</span><br><span class="line"></span><br><span class="line"><span class="comment">#示例</span></span><br><span class="line">[root@localhost ~]<span class="comment"># head /etc/services</span></span><br><span class="line">[root@localhost ~]<span class="comment"># head -n 3 /etc/services</span></span><br><span class="line">[root@localhost ~]<span class="comment"># head -5 /etc/services</span></span><br></pre></td></tr></table></figure>

<h2 id="tail命令"><a href="#tail命令" class="headerlink" title="tail命令"></a>tail命令</h2><table>
<thead>
<tr>
<th align="center">选项</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">-n</td>
<td align="center">指定查看文件末尾的后n行，n可以省略</td>
</tr>
<tr>
<td align="center">-f</td>
<td align="center">follow，跟踪，动态跟踪一个文件的末尾</td>
</tr>
</tbody></table>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#语法</span></span><br><span class="line">tail 文件名 </span><br><span class="line">默认显示一个文件的后10行内容</span><br><span class="line"></span><br><span class="line"><span class="comment">#示例</span></span><br><span class="line">[root@localhost ~]<span class="comment"># tail /etc/services</span></span><br><span class="line">[root@localhost ~]<span class="comment"># tail -n 3 /etc/services</span></span><br><span class="line">[root@localhost ~]<span class="comment"># tail -3 /etc/services</span></span><br><span class="line"><span class="comment">#-f动态跟踪</span></span><br><span class="line">[root@localhost ~]<span class="comment"># tail -f /var/log/messages</span></span><br><span class="line">Mar 23 21:24:38 client systemd: Created slice User Slice of root.</span><br><span class="line">Mar 23 21:24:38 client systemd: Starting User Slice of root.</span><br><span class="line">Mar 23 21:24:38 client systemd: Started Session 1 of user root.</span><br><span class="line">Mar 23 21:24:38 client systemd-logind: New session 1 of user root.</span><br><span class="line">Mar 23 21:24:38 client systemd: Starting Session 1 of user root.</span><br><span class="line">Mar 23 21:24:46 client systemd: Started Session 2 of user root.</span><br><span class="line">Mar 23 21:24:46 client systemd-logind: New session 2 of user root.</span><br><span class="line">Mar 23 21:24:46 client systemd: Starting Session 2 of user root.</span><br><span class="line">Mar 23 21:38:29 client systemd: Starting Cleanup of Temporary Directories...</span><br><span class="line">Mar 23 21:38:29 client systemd: Started Cleanup of Temporary Directories.</span><br></pre></td></tr></table></figure>

<h1 id="文件过滤类命令"><a href="#文件过滤类命令" class="headerlink" title="文件过滤类命令"></a>文件过滤类命令</h1><h2 id="过滤grep"><a href="#过滤grep" class="headerlink" title="过滤grep"></a>过滤<code>grep</code></h2><table>
<thead>
<tr>
<th align="center">选项</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">-n</td>
<td align="center">打印行号 number</td>
</tr>
<tr>
<td align="center">-A</td>
<td align="center">after 查看过滤内容的后N行</td>
</tr>
<tr>
<td align="center">-B</td>
<td align="center">before 查看过滤内容的前N行</td>
</tr>
<tr>
<td align="center">-C</td>
<td align="center">center 查看过滤内容的前、后N行</td>
</tr>
<tr>
<td align="center">-v</td>
<td align="center">取反</td>
</tr>
<tr>
<td align="center">-E</td>
<td align="center">可以过滤多个结果</td>
</tr>
<tr>
<td align="center">-o</td>
<td align="center">只打印出过滤内容</td>
</tr>
<tr>
<td align="center">-i</td>
<td align="center">不区分大小写</td>
</tr>
</tbody></table>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">|：管道符</span><br><span class="line">作用：将管道符左边命令的标准输出，交给管道符右边命令的标准输入来处理</span><br><span class="line"></span><br><span class="line"><span class="comment">#特殊含义符</span></span><br><span class="line">^：以...开头 </span><br><span class="line">$：以...结尾 </span><br><span class="line">*：匹配*前面的内容至少0次或多次 </span><br><span class="line">.：匹配任意字符</span><br><span class="line"></span><br><span class="line">[root@localhost ~]<span class="comment"># cat &gt;&gt; zls.txt &lt;&lt; EOF</span></span><br><span class="line">卧槽</span><br><span class="line">作者：曾老湿</span><br><span class="line">江山风景美如画，</span><br><span class="line">本想吟诗赠天下。</span><br><span class="line">奈何自己没文化，</span><br><span class="line">一句卧槽风好大。</span><br><span class="line">就这么地吧。</span><br><span class="line">谢谢大家。</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment">#语法</span></span><br><span class="line">grep [option] 参数 条件 文件名</span><br><span class="line"></span><br><span class="line"><span class="comment">#示例</span></span><br><span class="line"><span class="comment">#匹配以root开头的行</span></span><br><span class="line">[root@localhost ~]<span class="comment"># grep "^root" /etc/passwd</span></span><br><span class="line"><span class="comment">#匹配以bash结尾的行</span></span><br><span class="line">[root@localhost ~]<span class="comment"># grep "bash$" /etc/passwd</span></span><br><span class="line"><span class="comment">#匹配除了包含ftp的内容，其他全部打印</span></span><br><span class="line">[root@localhost ~]<span class="comment"># grep -v "ftp" /etc/passwd</span></span><br><span class="line"><span class="comment">#忽略大小写</span></span><br><span class="line">[root@localhost ~]<span class="comment"># grep -i "ftp" /etc/passwd</span></span><br><span class="line"><span class="comment">#匹配/var/log/secure文件中Failed字符串，并打印它的下2行</span></span><br><span class="line">[root@localhost ~]<span class="comment"># grep -n -A 2 "Failed" /var/log/secure</span></span><br><span class="line"><span class="comment">#匹配/var/log/secure文件中Failed字符串，并打印它的上2行</span></span><br><span class="line">[root@localhost ~]<span class="comment"># grep -n -B 2 "Failed" /var/log/secure</span></span><br><span class="line"><span class="comment">#匹配/var/log/secure文件中Failed字符串，并打印它的上下2行</span></span><br><span class="line">[root@localhost ~]<span class="comment"># grep -n -C 2 "Failed" /var/log/secure</span></span><br><span class="line"><span class="comment">#匹配/var/log/secure文件中Failed字符串，并打印它的上5行下2行</span></span><br><span class="line">[root@localhost ~]<span class="comment"># grep -A 5 -B 2 'Failed' /var/log/secure</span></span><br><span class="line"><span class="comment">#匹配特殊字符</span></span><br><span class="line">[root@localhost ~]<span class="comment"># grep "\$" /etc/passwd</span></span><br><span class="line"><span class="comment">#匹配字符0次或多次</span></span><br><span class="line">[root@localhost ~]<span class="comment"># grep "a*" /etc/passwd</span></span><br><span class="line"><span class="comment">#匹配任意字符</span></span><br><span class="line">[root@localhost ~]<span class="comment"># grep "a." /etc/passwd</span></span><br><span class="line"><span class="comment">#只打印出过滤内容</span></span><br><span class="line">[root@localhost ~]<span class="comment"># grep -o "ftp" /etc/passwd</span></span><br><span class="line"><span class="comment">#过滤区间</span></span><br><span class="line">[root@localhost ~]<span class="comment"># grep "[a-z]" /etc/passwd</span></span><br><span class="line">[root@localhost ~]<span class="comment"># grep "[A-Z]" /etc/passwd</span></span><br><span class="line">[root@localhost ~]<span class="comment"># grep "[a-zA-Z]" /etc/passwd</span></span><br><span class="line"><span class="comment">#过滤有效段落</span></span><br><span class="line">[root@<span class="built_in">test</span> ~]<span class="comment"># grep -Ev '^#|^$' /etc/login.defs </span></span><br><span class="line"></span><br><span class="line">ps：[]表示区间</span><br><span class="line"></span><br><span class="line"><span class="comment">#按位与、或、非运算符</span></span><br><span class="line">|：或</span><br><span class="line">&amp;：与</span><br><span class="line">！：非</span><br><span class="line"><span class="comment">#匹配文件中包含sync结尾或ftp字符串</span></span><br><span class="line">[root@localhost ~]<span class="comment"># grep -Ei "sync$|ftp" /etc/passwd</span></span><br></pre></td></tr></table></figure>

<h1 id="字符处理类命令"><a href="#字符处理类命令" class="headerlink" title="字符处理类命令"></a>字符处理类命令</h1><h2 id="字符处理命令-排序sort"><a href="#字符处理命令-排序sort" class="headerlink" title="字符处理命令-排序sort"></a>字符处理命令-排序<code>sort</code></h2><table>
<thead>
<tr>
<th align="center">选项</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">-t</td>
<td align="center">指定分隔符</td>
</tr>
<tr>
<td align="center">-k</td>
<td align="center">指定按照某一列，进行排序</td>
</tr>
<tr>
<td align="center">-n</td>
<td align="center">按照阿拉伯数字排序</td>
</tr>
<tr>
<td align="center">-r</td>
<td align="center">reverse 倒叙排序</td>
</tr>
</tbody></table>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#语法</span></span><br><span class="line">sort [option] 文件名</span><br><span class="line"></span><br><span class="line"><span class="comment">#示例</span></span><br><span class="line"><span class="comment">#1.创建一个文件，写入一些无序的内容</span></span><br><span class="line">[root@www ~]<span class="comment"># cat &gt;&gt; file.txt &lt;&lt;EOF</span></span><br><span class="line">b:3</span><br><span class="line">c:2</span><br><span class="line">a:4</span><br><span class="line">e:5</span><br><span class="line">d:1</span><br><span class="line">f:11</span><br><span class="line">EOF</span><br><span class="line"><span class="comment">#2.使用sort对下面输出的内容进行排序</span></span><br><span class="line">[root@www ~]<span class="comment"># sort file.txt</span></span><br><span class="line">a:4</span><br><span class="line">b:3</span><br><span class="line">c:2</span><br><span class="line">d:1</span><br><span class="line">e:5</span><br><span class="line">f:11</span><br><span class="line"></span><br><span class="line">ps：默认按照每一行的第一个字符进行排序,如果字符相同就往后推，字母按照a-z的顺序排序，排序不修改源文件内容</span><br><span class="line"></span><br><span class="line"><span class="comment">#-t指定分隔符</span></span><br><span class="line">[root@www ~]<span class="comment"># sort -t ':' file.txt</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#-k指定按照某一列，进行排序</span></span><br><span class="line">[root@www ~]<span class="comment"># sort -t ":" -k 2 file.txt</span></span><br><span class="line">d:1</span><br><span class="line">f:11 <span class="comment">#第二行为什么是11？</span></span><br><span class="line">c:2</span><br><span class="line">b:3</span><br><span class="line">a:4</span><br><span class="line">e:5</span><br><span class="line"></span><br><span class="line">ps：按照排序的方式，只会看到第一个字符，11的第一个字符是1，按照字符来排序确实比2小</span><br><span class="line"></span><br><span class="line"><span class="comment">#-n按照阿拉伯数字排序</span></span><br><span class="line">[root@www ~]<span class="comment"># sort -t ":" -n -k 2 file.txt</span></span><br><span class="line">d:1</span><br><span class="line">c:2</span><br><span class="line">b:3</span><br><span class="line">a:4</span><br><span class="line">e:5</span><br><span class="line">f:11</span><br><span class="line"></span><br><span class="line"><span class="comment">#-r倒叙排序</span></span><br><span class="line">[root@www ~]<span class="comment"># sort -t ':' -k 2 -rn file.txt</span></span><br><span class="line">f:11 </span><br><span class="line">e:5 </span><br><span class="line">a:4 </span><br><span class="line">b:3 </span><br><span class="line">c:2 </span><br><span class="line">d:1</span><br><span class="line"></span><br><span class="line"><span class="comment">#练习</span></span><br><span class="line">cat &gt;&gt; paixuti.txt &lt;&lt;EOF </span><br><span class="line">192.168.3.1 00:0F:AF:81:19:1F </span><br><span class="line">192.168.3.2 00:0F:AF:85:6C:25 </span><br><span class="line">192.168.3.3 00:0F:AF:85:70:42 </span><br><span class="line">192.168.2.20 00:0F:AF:85:55:DE </span><br><span class="line">192.168.2.21 00:0F:AF:85:6C:09 </span><br><span class="line">192.168.2.22 00:0F:AF:85:5C:41 </span><br><span class="line">192.168.0.151 00:0F:AF:85:6C:F6 </span><br><span class="line">192.168.0.152 00:0F:AF:83:1F:65 </span><br><span class="line">192.168.0.153 00:0F:AF:85:70:03 </span><br><span class="line">192.168.1.10 00:30:15:A2:3B:B6 </span><br><span class="line">192.168.1.11 00:30:15:A3:23:B7 </span><br><span class="line">192.168.1.12 00:30:15:A2:3A:A1 </span><br><span class="line">192.168.1.1 00:0F:AF:81:19:1F </span><br><span class="line">192.168.2.2 00:0F:AF:85:6C:25 </span><br><span class="line">192.168.3.3 00:0F:AF:85:70:42 </span><br><span class="line">192.168.2.20 00:0F:AF:85:55:DE </span><br><span class="line">192.168.1.21 00:0F:AF:85:6C:09 </span><br><span class="line">192.168.2.22 00:0F:AF:85:5C:41 </span><br><span class="line">192.168.0.151 00:0F:AF:85:6C:F6 </span><br><span class="line">192.168.1.152 00:0F:AF:83:1F:65 </span><br><span class="line">192.168.0.153 00:0F:AF:85:70:03 </span><br><span class="line">192.168.3.10 00:30:15:A2:3B:B6 </span><br><span class="line">192.168.1.11 00:30:15:A3:23:B7 </span><br><span class="line">192.168.3.12 00:30:15:A2:3A:A1 </span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment">#根据第三点后的内容排序</span></span><br><span class="line">[root@localhost ~]<span class="comment"># sort -t '.' -k 4 -n paixuti.txt</span></span><br></pre></td></tr></table></figure>

<h2 id="去重命令uniq"><a href="#去重命令uniq" class="headerlink" title="去重命令uniq"></a>去重命令uniq</h2><p>如果文件中有多行完全相同的内容，希望能删除重复的行，同时还可以统计出完全相同的行出现的总次数，那么就可以使用uniq命令解决这个问题，<strong>必须配合sort使用</strong></p>
<table>
<thead>
<tr>
<th align="center">选项</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">-c</td>
<td align="center">计算重复的行</td>
</tr>
</tbody></table>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#语法</span></span><br><span class="line">uniq [option]</span><br><span class="line"></span><br><span class="line"><span class="comment">#示例</span></span><br><span class="line"><span class="comment">#1.创建一个file.txt文件</span></span><br><span class="line">[root@www ~]<span class="comment"># cat file.txt</span></span><br><span class="line">abc</span><br><span class="line">123</span><br><span class="line">abc</span><br><span class="line">123</span><br><span class="line"><span class="comment">#2.先排序</span></span><br><span class="line">[root@www ~]<span class="comment"># sort file.txt</span></span><br><span class="line">123</span><br><span class="line">123</span><br><span class="line">abc</span><br><span class="line">abc</span><br><span class="line"><span class="comment">#3.去除相邻重复的行</span></span><br><span class="line">[root@www ~]<span class="comment"># sort file.txt | uniq</span></span><br><span class="line">123</span><br><span class="line">abc</span><br><span class="line"><span class="comment">#4.-c统计出文件中每行内容重复的次数</span></span><br><span class="line">[root@www ~]<span class="comment"># sort file.txt | uniq -c</span></span><br><span class="line">    2 123</span><br><span class="line">    2 abc</span><br></pre></td></tr></table></figure>

<h2 id="文件内容截取命令cut"><a href="#文件内容截取命令cut" class="headerlink" title="文件内容截取命令cut"></a>文件内容截取命令cut</h2><table>
<thead>
<tr>
<th align="center">选项</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">-d</td>
<td align="center">指定分隔符</td>
</tr>
<tr>
<td align="center">-f</td>
<td align="center">取列，选择要打印的列内容</td>
</tr>
<tr>
<td align="center">-c</td>
<td align="center">按照字符来取内容</td>
</tr>
</tbody></table>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#语法 </span></span><br><span class="line">cut [option] 文件名</span><br><span class="line"></span><br><span class="line">ps：cut默认没有分隔符</span><br><span class="line"></span><br><span class="line"><span class="comment">#示例1</span></span><br><span class="line">cat &gt;&gt; info.txt &lt;&lt;EOF </span><br><span class="line">I<span class="string">'m zls,18 years old QQ 133411023 </span></span><br><span class="line"><span class="string">I'</span>m wyk,73 years old QQ 383838384 </span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment">#取QQ号</span></span><br><span class="line">[root@localhost ~]<span class="comment"># cut -d " " -f6 info.txt</span></span><br><span class="line"><span class="comment">#取年龄</span></span><br><span class="line">[root@localhost ~]<span class="comment"># cut -d " " -f2 info.txt | cut -d "," -f2</span></span><br><span class="line"><span class="comment">#按字符取QQ号</span></span><br><span class="line">[root@localhost ~]<span class="comment"># cut -c 25-33 info.txt</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#示例2</span></span><br><span class="line">cat &gt;&gt; info.txt &lt;&lt;EOF </span><br><span class="line">I<span class="string">'m zls,18'</span>years old QQ 133411023 </span><br><span class="line">I<span class="string">'m wyk,73'</span>years old QQ 383838384 </span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment">#取年龄</span></span><br><span class="line">[root@localhost ~]<span class="comment"># cut -d  "'" -f2 info.txt | cut -d "," -f1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#请统计分析课件中访问频次前10的IP</span></span><br><span class="line">cut -d <span class="string">" "</span> -f 1 blog.driverzeng.com_access.log | sort -n | uniq -c | sort -rn | head</span><br><span class="line">    8 101.69.218.44</span><br><span class="line">    7 58.215.115.67</span><br><span class="line">    6 58.215.115.30</span><br><span class="line">    5 58.215.115.35</span><br><span class="line">    4 58.215.115.62</span><br><span class="line">    4 36.156.89.176</span><br><span class="line">    4 36.156.89.148</span><br><span class="line">    4 183.162.236.187</span><br><span class="line">    4 183.162.236.172</span><br><span class="line">    3 58.215.115.75</span><br><span class="line">    </span><br><span class="line"><span class="comment">#请统计分析课件中访问频次第1的网址</span></span><br><span class="line">[root@localhost ~]<span class="comment"># cut -d ' ' -f 7 blog.driverzeng.com_access.log |sort |uniq -c|sort -nr|head -1 </span></span><br><span class="line">	32 /xmlrpc.php</span><br></pre></td></tr></table></figure>

<h2 id="文件统计命令wc"><a href="#文件统计命令wc" class="headerlink" title="文件统计命令wc"></a>文件统计命令wc</h2><table>
<thead>
<tr>
<th align="center">选项</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">-l</td>
<td align="center">line 行，统计行数</td>
</tr>
<tr>
<td align="center">-w</td>
<td align="center">word 单词，统计单词数</td>
</tr>
<tr>
<td align="center">-c</td>
<td align="center">char 字符，统计字符数</td>
</tr>
</tbody></table>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wc：统计文件的行数，统计文件的单词数量，统计文件的字符数量</span><br><span class="line"></span><br><span class="line"><span class="comment">#语法</span></span><br><span class="line">wc [option] 文件名</span><br><span class="line"></span><br><span class="line"><span class="comment">#示例</span></span><br><span class="line">[root@localhost ~]<span class="comment"># wc /etc/services </span></span><br><span class="line">11176	61033	670293 /etc/services </span><br><span class="line">文件行数 单词数量 字符数量</span><br><span class="line"></span><br><span class="line">[root@localhost ~]<span class="comment"># cat info.txt </span></span><br><span class="line">I<span class="string">'m zzgx,"18'</span>years old QQ 133411023 </span><br><span class="line">I<span class="string">'m wyk,"103'</span>years old QQ 383838384</span><br><span class="line"><span class="comment">#统计文件行数</span></span><br><span class="line">[root@localhost ~]<span class="comment"># wc -l info.txt </span></span><br><span class="line">2 info.txt </span><br><span class="line"><span class="comment">#统计单词数量</span></span><br><span class="line">[root@localhost ~]<span class="comment"># wc -w info.txt </span></span><br><span class="line">10 info.txt </span><br><span class="line"><span class="comment">#统计字符数量</span></span><br><span class="line">[root@localhost ~]<span class="comment"># wc -c info.txt </span></span><br><span class="line">72 info.txt</span><br></pre></td></tr></table></figure>

<h1 id="文件上传与下载"><a href="#文件上传与下载" class="headerlink" title="文件上传与下载"></a>文件上传与下载</h1><h2 id="上传下载"><a href="#上传下载" class="headerlink" title="上传下载"></a>上传下载</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#安装lrzsz </span></span><br><span class="line">[root@localhost ~]<span class="comment"># yum install -y lrzsz </span></span><br><span class="line"><span class="comment">#如何把windows的文件上传到虚拟机里 </span></span><br><span class="line">rz</span><br><span class="line"></span><br><span class="line"><span class="comment">#如何把虚拟机的文件下载到windows里 </span></span><br><span class="line">sz 文件名</span><br><span class="line"></span><br><span class="line">[root@localhost ~]<span class="comment"># sz /tmp/ooo </span></span><br><span class="line"></span><br><span class="line">ps：只能虚拟机和物理机之间上传下载</span><br></pre></td></tr></table></figure>

<h2 id="wget命令"><a href="#wget命令" class="headerlink" title="wget命令"></a>wget命令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#安装wget命令 </span></span><br><span class="line">[root@localhost ~]<span class="comment"># yum install -y wget </span></span><br><span class="line">wget 下载地址 </span><br><span class="line">-O：指定下载的位置和文件的名字 </span><br><span class="line"></span><br><span class="line"><span class="comment">#将阿里云的centos-7.repo下载到/etc/yum.repos.d/并改名为CentOS-Base.repo</span></span><br><span class="line">wget http://mirrors.aliyun.com/repo/Centos-7.repo</span><br><span class="line">wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span><br></pre></td></tr></table></figure>

<h1 id="文件属性及类型"><a href="#文件属性及类型" class="headerlink" title="文件属性及类型"></a>文件属性及类型</h1><h2 id="文件属性"><a href="#文件属性" class="headerlink" title="文件属性"></a>文件属性</h2><p>当我们使用<code>ls -l</code> 列目录下所有文件时，通常会以长格式的方式显示，其实长格式显示就是我们<code>windows</code>下看到的文件详细信息，我们将其称为文件属性，那整个文件的属性分为十列</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># ll ks.cfg</span></span><br><span class="line">-rw-rwx--- 1 root root 4434 May 30 13:58 ks.cfg</span><br><span class="line"></span><br><span class="line">-rw-------.	①:第一个字符是文件类型，其他则是权限</span><br><span class="line">1			②:硬链接次数</span><br><span class="line">root		③:文件属于哪个用户</span><br><span class="line">root		④:文件属于哪个组</span><br><span class="line">4434		⑤:文件大小</span><br><span class="line">May30	13:58	⑥⑦⑧:最新修改的时间与日期</span><br><span class="line">ks.cfg		⑨:文件或目录名称</span><br><span class="line"></span><br><span class="line"><span class="comment">#以空格为分隔符第二列： </span></span><br><span class="line">文件的权限：Permission denied（权限被拒绝） </span><br><span class="line">rw- r-- r-- </span><br><span class="line">rwx rwx rwx </span><br><span class="line">r：<span class="built_in">read</span> 读 </span><br><span class="line">w：write 写 </span><br><span class="line">x：<span class="built_in">exec</span> 执行 </span><br><span class="line">-：该权限位上没有权限</span><br></pre></td></tr></table></figure>

<h2 id="文件类型"><a href="#文件类型" class="headerlink" title="文件类型"></a>文件类型</h2><p>通常我们使用颜色或者后缀名称来区分文件类型，但很多时候不是很准确，所以我们可以通过<code>ls -l</code>以长格式显示一个文件的属性，通过第一列的第一个字符来进一步的判断文件具体的类型</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># ll </span></span><br><span class="line">-rw-r--r-- 1 root root 56479 Mar 25 10:11 blog.driverzeng.com_access.log </span><br><span class="line">drwxr-xr-x 2 root root 6 Mar 29 08:39 zls</span><br><span class="line"></span><br><span class="line">-：普通文件 touch </span><br><span class="line">d：directory 目录 mkdir </span><br><span class="line">l：link 软链接文件（windows快捷方式） ln </span><br><span class="line">-----------------------------------------------------------</span><br><span class="line">c：设备文件（char字符设备文件）和字符相关的设备，举例：打印机，终端 </span><br><span class="line">b：设备文件（block块设备文件）和存储相关的设备，举例：硬盘，U盘，磁盘分区 </span><br><span class="line">s：socket安全套接字文件，网络编程 </span><br><span class="line">p：pipe管道文件，父进程与子进程之间的通信文件</span><br></pre></td></tr></table></figure>

<p>但有些情况下，我们无法通过<code>ls -l</code>查看文件的类型，比如：一个文件，它可能时普通文件、也可能时压缩文件、或者时命令文件等，那么此时就需要使用<code>file</code>来更加精确的判断这个文件的类型</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#语法</span></span><br><span class="line">file [options] 文件名</span><br><span class="line"></span><br><span class="line">[root@localhost ~]<span class="comment"># file /etc/hosts</span></span><br><span class="line">/etc/hosts: ASCII text</span><br><span class="line">    </span><br><span class="line">[root@localhost ~]<span class="comment"># file /bin/ls</span></span><br><span class="line">/bin/ls: ELF 64-bit LSB	executable,	x86-64,	version	1 (SYSV), dynamically linked (uses	shared libs), <span class="keyword">for</span> GNU/Linux 2.6.32, BuildID[sha1]=aa7ff68f13de25936a098016243ce57c3c982e06, stripped</span><br><span class="line"></span><br><span class="line">[root@localhost ~]<span class="comment"># file /dev/sda</span></span><br><span class="line">/dev/sda: block	special</span><br><span class="line">    </span><br><span class="line">[root@localhost ~]<span class="comment"># file /dev/tty1</span></span><br><span class="line">/dev/tty1: character special</span><br><span class="line">    </span><br><span class="line">[root@localhost ~]<span class="comment"># file /etc/grub2.cfg</span></span><br><span class="line">/etc/grub2.cfg:	broken	symbolic link to ../boot/grub2/grub.cfg</span><br><span class="line">    </span><br><span class="line">[root@localhost ~]<span class="comment"># file /home</span></span><br><span class="line">/home: directory</span><br><span class="line"></span><br><span class="line">ps:Linux文件扩展名不代表任何含义，仅为了我们能更好的识别该文件时说明类型</span><br></pre></td></tr></table></figure>

<h1 id="系统链接文件"><a href="#系统链接文件" class="headerlink" title="系统链接文件"></a>系统链接文件</h1><p>一个文件在Linux中，会被分为两部分：</p>
<ul>
<li><p><strong>真实数据</strong>：文件中的真实内容</p>
</li>
<li><p><strong>元数据</strong>：用来形容一个文件数据</p>
</li>
</ul>
<p>一个文件在Linux中，存储也会被分为两部分：</p>
<ul>
<li><p><strong>inode</strong>：用来存储，文件的元数据</p>
</li>
<li><p><strong>block</strong>：用来存储，文件的真实数据，一个block是<code>4kB</code></p>
</li>
</ul>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20220329142227873.png" alt="image-20220329142227873"></p>
<p>查看磁盘空间 <code>df</code></p>
<table>
<thead>
<tr>
<th align="center">选项</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">-h</td>
<td align="center"><code>human</code> 人类可读</td>
</tr>
<tr>
<td align="center">-i</td>
<td align="center">查看 <code>inode</code> 空间</td>
</tr>
</tbody></table>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#语法</span></span><br><span class="line">df [options]</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看磁盘的block </span></span><br><span class="line">[root@localhost ~]<span class="comment"># df -h </span></span><br><span class="line">Filesystem Size Used Avail Use% Mounted on </span><br><span class="line">/dev/sda3 19G 1.7G 17G 9% / </span><br><span class="line">devtmpfs 476M 0 476M 0% /dev </span><br><span class="line">tmpfs 487M 0 487M 0% /dev/shm tmpfs 487M 39M 449M 8% /run </span><br><span class="line">tmpfs 487M 0 487M 0% /sys/fs/cgroup </span><br><span class="line">/dev/sda1 497M 120M 378M 25% /boot </span><br><span class="line">tmpfs 98M 0 98M 0% /run/user/0 </span><br><span class="line"></span><br><span class="line"><span class="comment">#查看磁盘的inode </span></span><br><span class="line">[root@localhost ~]<span class="comment"># df -hi </span></span><br><span class="line">Filesystem Inodes IUsed IFree IUse% Mounted on </span><br><span class="line">/dev/sda3 9.3M 35K 9.3M 1% / </span><br><span class="line">devtmpfs 119K 377 119K 1% /dev </span><br><span class="line">tmpfs 122K 1 122K 1% /dev/shm </span><br><span class="line">tmpfs 122K 750 121K 1% /run </span><br><span class="line">tmpfs 122K 16 122K 1% /sys/fs/cgroup </span><br><span class="line">/dev/sda1 250K 326 250K 1% /boot </span><br><span class="line">tmpfs 122K 1 122K 1% /run/user/0</span><br><span class="line"></span><br><span class="line"><span class="comment">#stat查看文件详细信息</span></span><br><span class="line">[root@localhost ~]<span class="comment"># stat nginx-1.20.2-1.x86_64.rpm </span></span><br><span class="line">  File: ‘nginx-1.20.2-1.x86_64.rpm’</span><br><span class="line">  Size: 2802126   	Blocks: 5480       IO Block: 4096   regular file</span><br><span class="line">Device: fd00h/64768d	Inode: 33575397    Links: 1</span><br><span class="line">Access: (0644/-rw-r--r--)  Uid: (    0/    root)   Gid: (    0/    root)</span><br><span class="line">Context: unconfined_u:object_r:admin_home_t:s0</span><br><span class="line">Access: 2022-04-30 14:10:58.648933728 +0800</span><br><span class="line">Modify: 2022-04-30 14:10:58.709933724 +0800</span><br><span class="line">Change: 2022-04-30 14:10:58.709933724 +0800</span><br><span class="line"> Birth: -</span><br></pre></td></tr></table></figure>

<p>执行cat的过程</p>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/360%E6%88%AA%E5%9B%BE17100810463447.png" alt="360截图17100810463447"></p>
<h2 id="链接文件的种类"><a href="#链接文件的种类" class="headerlink" title="链接文件的种类"></a>链接文件的种类</h2><ul>
<li><strong>软链接文件</strong><ul>
<li>软链接相当于windows的快捷方式，软链接文件会将<strong>inode</strong>指向源文件的<strong>block</strong></li>
</ul>
</li>
</ul>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/360%E6%88%AA%E5%9B%BE1710081010910195.png" alt="360截图1710081010910195"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#创建软链接的命令 </span></span><br><span class="line">ln：link 链接，创建链接文件 </span><br><span class="line">-s：soft 软，创建软链接文件 </span><br><span class="line"></span><br><span class="line"><span class="comment">#语法</span></span><br><span class="line">ln -s 源文件 链接文件的位置</span><br><span class="line"></span><br><span class="line"><span class="comment">#示例</span></span><br><span class="line"><span class="comment">##不指定文件，产生同名链接</span></span><br><span class="line">[root@localhost ~]<span class="comment"># ln -s /root/1.txt /tmp/ </span></span><br><span class="line">[root@localhost ~]<span class="comment"># ll /tmp/</span></span><br><span class="line">total 196 </span><br><span class="line">lrwxrwxrwx 1 root root 11 Mar 29 10:54 1.txt -&gt; /root/1.txt</span><br><span class="line"><span class="comment">##指定文件</span></span><br><span class="line">[root@localhost ~]<span class="comment"># ln -s /root/1.txt /tmp/2.txt </span></span><br><span class="line">[root@localhost ~]<span class="comment"># ll /tmp/ </span></span><br><span class="line">total 196 </span><br><span class="line">lrwxrwxrwx 1 root root 11 Mar 29 10:54 1.txt -&gt; /root/1.txt </span><br><span class="line">lrwxrwxrwx 1 root root 11 Mar 29 10:55 2.txt -&gt; /root/1.txt</span><br><span class="line"></span><br><span class="line">ps:多个软链接指向同一个block，不占多余空间</span><br><span class="line">   软链接文件，会受到源文件的影响，如果源文件删除，软链接文件也无法使用</span><br><span class="line">   </span><br><span class="line"><span class="comment">#软链接的应用场景</span></span><br><span class="line">1.软件升级</span><br><span class="line">2.代码发布</span><br><span class="line">3.不方便移动的目录</span><br><span class="line">4.数据回滚</span><br><span class="line">5.程序读取</span><br></pre></td></tr></table></figure>

<p><strong>硬链接文件</strong></p>
<ul>
<li>若一个<strong>inode</strong>对应多个文件名，则称这些文件为硬链接。换句话说，硬链接就是同一个文件使用了多个别名</li>
</ul>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/360%E6%88%AA%E5%9B%BE175711199510386.png" alt="360截图175711199510386"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#语法</span></span><br><span class="line">ln 源文件 链接文件的位置</span><br><span class="line"></span><br><span class="line"><span class="comment">#示例</span></span><br><span class="line">[root@localhost ~]<span class="comment"># ln /root/info.txt /opt/ </span></span><br><span class="line">[root@localhost ~]<span class="comment"># ln /root/info.txt /opt/info_1.txt</span></span><br><span class="line"><span class="comment">#查看文件属性</span></span><br><span class="line">[root@localhost ~]<span class="comment"># ls -li /root/info.txt </span></span><br><span class="line">33575833 -rw-r--r-- 3 root root 72 Mar 25 11:09 /root/info.txt </span><br><span class="line">[root@localhost ~]<span class="comment"># ls -li /opt/info.txt </span></span><br><span class="line">33575833 -rw-r--r-- 3 root root 72 Mar 25 11:09 /opt/info.txt </span><br><span class="line">[root@localhost ~]<span class="comment"># ls -li /opt/info_1.txt </span></span><br><span class="line">33575833 -rw-r--r-- 3 root root 72 Mar 25 11:09 /opt/info1.txt</span><br><span class="line"><span class="comment">#查看文件内容 </span></span><br><span class="line">[root@localhost ~]<span class="comment"># cat /root/info.txt </span></span><br><span class="line">I<span class="string">'m zzgx,"18'</span>years old QQ 133411023 </span><br><span class="line">I<span class="string">'m wyk,"103'</span>years old QQ 383838384 </span><br><span class="line">[root@localhost ~]<span class="comment"># cat /opt/info.txt </span></span><br><span class="line">I<span class="string">'m zzgx,"18'</span>years old QQ 133411023 </span><br><span class="line">I<span class="string">'m wyk,"103'</span>years old QQ 383838384 </span><br><span class="line">[root@localhost ~]<span class="comment"># cat /opt/info_1.txt </span></span><br><span class="line">I<span class="string">'m zzgx,"18'</span>years old QQ 133411023 </span><br><span class="line">I<span class="string">'m wyk,"103'</span>years old QQ 383838384</span><br><span class="line"></span><br><span class="line"><span class="comment">#特性 </span></span><br><span class="line">1.硬链接文件，不会受到原文件的影响 </span><br><span class="line">2.所有硬链接文件的inode号与源文件相同 </span><br><span class="line">3.修改一个文件，其他文件都会改变 </span><br><span class="line">4.不允许给目录创建硬链接 </span><br><span class="line">5.默认情况下，新创建的目录，有两个硬链接，一个是目录本身，一个是该目录下的.目录</span><br><span class="line"></span><br><span class="line">[root@localhost ~]<span class="comment"># ls -lai /root/test -d </span></span><br><span class="line">33575836 drwxr-xr-x 2 root root 6 Mar 29 11:52 /root/<span class="built_in">test</span> </span><br><span class="line">[root@localhost ~]<span class="comment"># ls -lai /root/test </span></span><br><span class="line">total 4 </span><br><span class="line">33575836 drwxr-xr-x 2 root root 6 Mar 29 11:52 . </span><br><span class="line"></span><br><span class="line"><span class="comment">#报错 </span></span><br><span class="line">[root@localhost opt]<span class="comment"># ln /root/wyk /tmp/wyk </span></span><br><span class="line">ln: ‘/root/wyk’: hard link not allowed <span class="keyword">for</span> directory</span><br></pre></td></tr></table></figure>

<h2 id="软链接使用场景实践"><a href="#软链接使用场景实践" class="headerlink" title="软链接使用场景实践"></a>软链接使用场景实践</h2><blockquote>
<p>Q：软链接使用场景</p>
<ul>
<li>软件升级</li>
<li>代码发布</li>
</ul>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1.准备网站1.1版本代码</span></span><br><span class="line">[root@www ~]<span class="comment"># mkdir	/data/rainbow-v1.1 -p</span></span><br><span class="line">[root@www ~]<span class="comment"># echo "123" &gt; /data/rainbow-v1.1/index.html</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#2.创建软链接</span></span><br><span class="line">[root@www ~]<span class="comment"># ln -s /data/rainbow-v1.1/ /data/rainbow</span></span><br><span class="line">[root@www ~]<span class="comment"># ll /data/</span></span><br><span class="line">drwxr-xr-x.	2 root root 6 3์ 5 12:23 dir</span><br><span class="line">lrwxrwxrwx.	1 root root	19 3์ 10 12:09 rainbow -&gt; /data/rainbow-v1.1/</span><br><span class="line">drwxr-xr-x.	2 root root	24 3์ 10 12:09 rainbow-v1.1</span><br><span class="line"></span><br><span class="line"><span class="comment">#3.检查网站程序</span></span><br><span class="line">[root@www ~]<span class="comment"># cat /data/rainbow/index.html</span></span><br><span class="line">123</span><br><span class="line"></span><br><span class="line"><span class="comment">#4.新更新一个网站的程序代码</span></span><br><span class="line">[root@www ~]<span class="comment"># mkdir /data/rainbow-v1.2</span></span><br><span class="line">[root@www ~]<span class="comment"># echo "456" &gt; /data/rainbow-v1.2/index.html</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#5.升级</span></span><br><span class="line">[root@www ~]<span class="comment"># rm -f	/data/rainbow &amp;&amp; ln	-s /data/rainbow-v1.2/ /data/rainbow</span></span><br><span class="line">[root@www ~]<span class="comment"># cat /data/rainbow/index.html</span></span><br><span class="line">456</span><br><span class="line"></span><br><span class="line"><span class="comment">#6.回退</span></span><br><span class="line">[root@www ~]<span class="comment"># rm -f /data/rainbow &amp;&amp; ln -s /data/rainbow-v1.1/ /data/rainbow</span></span><br><span class="line">[root@www ~]<span class="comment"># cat /data/rainbow/index.html</span></span><br><span class="line">123</span><br></pre></td></tr></table></figure>

<h2 id="硬链接与软链接的区别"><a href="#硬链接与软链接的区别" class="headerlink" title="硬链接与软链接的区别"></a>硬链接与软链接的区别</h2><table>
<thead>
<tr>
<th align="center">区别</th>
<th align="center">硬链接</th>
<th align="center">软链接</th>
</tr>
</thead>
<tbody><tr>
<td align="center">创建命令</td>
<td align="center">ln</td>
<td align="center">ln -s</td>
</tr>
<tr>
<td align="center">对象</td>
<td align="center">只能对普通文件创建</td>
<td align="center">普通文件和目录</td>
</tr>
<tr>
<td align="center">是否收到源文件影响</td>
<td align="center">否</td>
<td align="center">是</td>
</tr>
<tr>
<td align="center">inode号</td>
<td align="center">相同</td>
<td align="center">不同</td>
</tr>
<tr>
<td align="center">跨分区创建</td>
<td align="center">不可以</td>
<td align="center">可以</td>
</tr>
</tbody></table>
<h2 id="企业面试题"><a href="#企业面试题" class="headerlink" title="企业面试题"></a>企业面试题</h2><p>当前磁盘空间还剩余500G，但是就无法往里面写入数据，报错，磁盘空间满了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1.首先磁盘存储被划分为两块 inode：存储文件的元数据 block：存储文件的真实数据 </span></span><br><span class="line"><span class="comment">#2.在问题当中剩余500G，这500G指的是block </span></span><br><span class="line"><span class="comment">#3.应该是inode被占满了 </span></span><br><span class="line"><span class="comment">#4.这种情况，一般是系统中，小文件太多导致的</span></span><br><span class="line"><span class="comment">#5.使用find命令找到系统中的小文件（没用的），并删除</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#示例</span></span><br><span class="line"><span class="comment">#从/dev/zero中取出1024k数据，保存到/opt/disk文件中</span></span><br><span class="line">[root@www ~]<span class="comment"># dd if=/dev/zero of=/opt/bigdata bs=1K count=1024</span></span><br><span class="line"><span class="comment">#格式化，指定inode</span></span><br><span class="line">[root@www ~]<span class="comment"># mkfs.ext4 -i 1024 /opt/bigdata</span></span><br><span class="line"><span class="comment">#在/下创建一个目录inode</span></span><br><span class="line">[root@www ~]<span class="comment"># mkdir /inode</span></span><br><span class="line"><span class="comment">#把刚才的分区，挂载到/data1下</span></span><br><span class="line">[root@www ~]<span class="comment"># mount -t ext4 -o loop /opt/bigdata /inode</span></span><br><span class="line"><span class="comment">#查看新分区inode大小</span></span><br><span class="line">[root@www ~]<span class="comment"># df -ih</span></span><br><span class="line"><span class="comment">#演示inode被沾满</span></span><br><span class="line">[root@www data1]<span class="comment"># touch &#123;1001..1014&#125;</span></span><br><span class="line">[root@www data1]<span class="comment"># touch www</span></span><br><span class="line">touch: cannot touch ‘zls’: No space left on device</span><br></pre></td></tr></table></figure>

<h1 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h1><h2 id="文件输入-gt"><a href="#文件输入-gt" class="headerlink" title="文件输入 &gt;"></a>文件输入 &gt;</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1.直接vi一个不存在的文件 </span></span><br><span class="line">[root@localhost ~]<span class="comment"># vi 4.txt</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#2.echo内容重定向到一个文件中 </span></span><br><span class="line">[root@localhost ~]<span class="comment"># echo 5 &gt; 5.txt </span></span><br><span class="line">[root@localhost ~]<span class="comment"># cat 5.txt</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.使用cat创建文件并写入内容 </span></span><br><span class="line">[root@localhost ~]<span class="comment"># cat &gt;&gt; 6.txt &lt;&lt;EOF </span></span><br><span class="line">&gt; <span class="number">6</span> </span><br><span class="line">&gt; EOF</span><br><span class="line">EOF：End Of 以....结尾，不是固定用法，规范用法</span><br><span class="line"></span><br><span class="line">ps：cat查看文件时，会将文件所有内容全部加载到内存里</span><br></pre></td></tr></table></figure>

<h2 id="命令查找which"><a href="#命令查找which" class="headerlink" title="命令查找which"></a>命令查找<code>which</code></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查找命令位置which </span></span><br><span class="line"><span class="built_in">which</span> 只能查找命令 </span><br><span class="line"></span><br><span class="line"><span class="comment">#示例</span></span><br><span class="line">[root@localhost ~]<span class="comment"># which grep </span></span><br><span class="line"><span class="built_in">alias</span> grep=<span class="string">'grep --color=auto'</span> </span><br><span class="line">/usr/bin/grep </span><br><span class="line">[root@localhost ~]<span class="comment"># which mkdir </span></span><br><span class="line">/usr/bin/mkdir </span><br><span class="line">[root@localhost ~]<span class="comment"># which cp </span></span><br><span class="line"><span class="built_in">alias</span> cp=<span class="string">'cp -i'</span> </span><br><span class="line">/usr/bin/cp </span><br><span class="line">[root@localhost ~]<span class="comment"># which mv </span></span><br><span class="line"><span class="built_in">alias</span> mv=<span class="string">'mv -i'</span> </span><br><span class="line">/usr/bin/mv </span><br><span class="line">[root@localhost ~]<span class="comment"># which rm </span></span><br><span class="line"><span class="built_in">alias</span> rm=<span class="string">'rm -i'</span> </span><br><span class="line">/usr/bin/rm</span><br></pre></td></tr></table></figure>

<h2 id="awk"><a href="#awk" class="headerlink" title="awk"></a>awk</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">过滤列</span><br><span class="line">awk + [选项] + <span class="string">'NR==数字&#123;print $n&#125;'</span> n代表第几列</span><br><span class="line">-F 指定分割符号 (默认是以空格为分割符) NR==数字 取行</span><br></pre></td></tr></table></figure>

<h2 id="selinux"><a href="#selinux" class="headerlink" title="selinux"></a>selinux</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">selinux：美国安全局NASH设置的最高安全权限</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>SRE</category>
      </categories>
      <tags>
        <tag>Linxu基础</tag>
      </tags>
  </entry>
  <entry>
    <title>[用户管理]</title>
    <url>/2019/03/20/%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<h1 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h1><h2 id="Linux中用户的概述"><a href="#Linux中用户的概述" class="headerlink" title="Linux中用户的概述"></a>Linux中用户的概述</h2><p>用户指的是能够正常登录Linux或windows系统</p>
<p>与windows用户的区别：</p>
<ul>
<li><p>支持同一个用户多个设备同时登录</p>
</li>
<li><p>支持不同的用户多个设备同时登录</p>
</li>
</ul>
<p>用户的作用</p>
<p>1）系统上的每一个进程(运行的程序)都需要特定的用户运行</p>
<p>2）每一个文件都有特定的用户拥有，所以访问一个文件或目录受到用户的限制</p>
<p>3）进程能够以何种方式访问某一个文件或目录, 与进程所关联的用户有关</p>
<h2 id="查看系统中用户的命令"><a href="#查看系统中用户的命令" class="headerlink" title="查看系统中用户的命令"></a>查看系统中用户的命令</h2><table>
<thead>
<tr>
<th align="center">选项</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">-u</td>
<td align="center">查看当前登录用户的uid</td>
</tr>
<tr>
<td align="center">-g</td>
<td align="center">查看当前登录用户的gid</td>
</tr>
<tr>
<td align="center">-n</td>
<td align="center">配合-u或者-g一起使用<br/>配合-u：查看当前登录用户uid对应的名字<br>配合-g：查看当前登录用户gid对应的名字</td>
</tr>
</tbody></table>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查看指定用户的信息 </span></span><br><span class="line">id：默认情况不加用户名则查看当前登录用户的信息 </span><br><span class="line"></span><br><span class="line"><span class="comment">#语法</span></span><br><span class="line">id [用户名]</span><br><span class="line"></span><br><span class="line">[root@localhost ~]<span class="comment"># id python</span></span><br><span class="line">uid=1000(python) gid=1000(python) groups=1000(python)</span><br><span class="line">uid=1000(roger)     <span class="comment">#UserID:用户id号 </span></span><br><span class="line">gid=1000(roger)     <span class="comment">#GroupID：用户组id号 </span></span><br><span class="line">groups=1000(roger)  <span class="comment">#该用户的所有组信息</span></span><br><span class="line"></span><br><span class="line">ps:id不加任何参数查看的是当前登录用户</span><br></pre></td></tr></table></figure>

<p>后台进程查看</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># ps -ef | less</span></span><br><span class="line">UID         PID   PPID  C STIME TTY          TIME CMD</span><br><span class="line">root          1      0  0 Apr01 ?        00:00:02 /usr/lib/systemd/systemd --switched-root --system --deserialize 22</span><br><span class="line">root          2      0  0 Apr01 ?        00:00:00 [kthreadd]</span><br><span class="line">root          3      2  0 Apr01 ?        00:00:00 [ksoftirqd/0]</span><br><span class="line">root          5      2  0 Apr01 ?        00:00:00 [kworker/0:0H]</span><br></pre></td></tr></table></figure>

<h2 id="系统用户相关的配置文件"><a href="#系统用户相关的配置文件" class="headerlink" title="系统用户相关的配置文件"></a>系统用户相关的配置文件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/etc/passwd   <span class="comment">#用户信息配置文件 </span></span><br><span class="line">/etc/shadow   <span class="comment">#用户密码存储文件 </span></span><br><span class="line">/etc/group    <span class="comment">#用户组信息配置文件 </span></span><br><span class="line">/etc/gshadow  <span class="comment">#用户组密码存储文件</span></span><br></pre></td></tr></table></figure>

<p>/etc/passwd</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># cat /etc/passwd</span></span><br><span class="line"><span class="comment">#文件内容 </span></span><br><span class="line">root:x:0:0:root:/root:/bin/bash </span><br><span class="line">dbus:x:81:81:System message bus:/:/sbin/nologin</span><br><span class="line"></span><br><span class="line">/bin/bash：交由bash执行</span><br><span class="line">/sbin/nologin：不允许用户登录</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="center"></th>
<th align="center">第一列</th>
<th align="center">第二列</th>
<th align="center">第三列</th>
<th align="center">第四列</th>
<th align="center">第五列</th>
<th align="center">第六列</th>
<th align="center">第七列</th>
</tr>
</thead>
<tbody><tr>
<td align="center">内容</td>
<td align="center">dbus</td>
<td align="center">x</td>
<td align="center">81</td>
<td align="center">81</td>
<td align="center">System message bus</td>
<td align="center">/</td>
<td align="center">/sbin/nologin</td>
</tr>
<tr>
<td align="center">作用</td>
<td align="center">用户名</td>
<td align="center">密码占位符</td>
<td align="center">UID</td>
<td align="center">GID</td>
<td align="center">用户描述信息</td>
<td align="center">用户家目录</td>
<td align="center">用户登录的shell</td>
</tr>
</tbody></table>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20220402071657752.png" alt="image-20220402071657752"></p>
<p>/etc/shadow</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># cat /etc/shadow</span></span><br><span class="line"><span class="comment">#文件内容</span></span><br><span class="line">root:<span class="variable">$6</span><span class="variable">$YOE1El8va0a</span>/N13b<span class="variable">$E5HM</span>/7RVJu4rY.Kbfp9iC2msOras3rWKzOzWZqmjnVBsFswaZXhz.TCrlbffyavK8nG61.19xOLJBoVrnb7Zb0::0:99999:7:::</span><br><span class="line">bin:*:17834:0:99999:7:::</span><br><span class="line">daemon:*:17834:0:99999:7:::</span><br><span class="line">adm:*:17834:0:99999:7:::</span><br><span class="line"></span><br><span class="line">*、!!：表示没有密码</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="center"></th>
<th align="center">第一列</th>
<th align="center">第二列</th>
<th align="center">第三列</th>
<th align="center">第四列</th>
<th align="center">第五列</th>
<th align="center">第六列</th>
<th align="center">第七列</th>
<th align="center">第八列</th>
<th align="center">第九列</th>
</tr>
</thead>
<tbody><tr>
<td align="center">内容</td>
<td align="center">bin</td>
<td align="center">*</td>
<td align="center">17834</td>
<td align="center">0</td>
<td align="center">99999</td>
<td align="center">7</td>
<td align="center">2</td>
<td align="center">6627567</td>
<td align="center">空</td>
</tr>
<tr>
<td align="center">作用</td>
<td align="center">用户名</td>
<td align="center">密码（加密）</td>
<td align="center">上一次修改密码从1970年到现在过了多少天</td>
<td align="center">密码最少使用多少天，0代表没有限制</td>
<td align="center">密码最多使用多少天</td>
<td align="center">密码快过期前7天，提示修改密码</td>
<td align="center">密码过期后2两天强制修改密码</td>
<td align="center">账户失效时间</td>
<td align="center">保留</td>
</tr>
</tbody></table>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20220402071741563.png" alt="image-20220402071741563"></p>
<h2 id="用户分类（约定、规范CentOS7）"><a href="#用户分类（约定、规范CentOS7）" class="headerlink" title="用户分类（约定、规范CentOS7）"></a>用户分类（约定、规范CentOS7）</h2><table>
<thead>
<tr>
<th align="center">用户UID</th>
<th align="center">系统中含义</th>
</tr>
</thead>
<tbody><tr>
<td align="center">0</td>
<td align="center">超级管理员用户</td>
</tr>
<tr>
<td align="center">1-200</td>
<td align="center">系统用户（系统自己创建的）</td>
</tr>
<tr>
<td align="center">201-999</td>
<td align="center">系统用户（可以手动创建）</td>
</tr>
<tr>
<td align="center">1000+</td>
<td align="center">普通用户</td>
</tr>
</tbody></table>
<h2 id="chage命令修改用户信息（了解）"><a href="#chage命令修改用户信息（了解）" class="headerlink" title="chage命令修改用户信息（了解）"></a>chage命令修改用户信息（了解）</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-d  <span class="comment">#设置最近一次更改密码时间, 0下次登陆系统强制修改密码 </span></span><br><span class="line">-m  <span class="comment">#设置用户两次改变密码之间使用"最小天数"</span></span><br><span class="line">-M  <span class="comment">#设置用户两次改变密码之间使用"最大天数" </span></span><br><span class="line">-W  <span class="comment">#设置密码更改警告时间 将过期警告天数设为“警告天数” </span></span><br><span class="line">-I  <span class="comment">#设置密码过期天数后, 密码为失效状态 </span></span><br><span class="line">-E  <span class="comment">#设置用户过期时间, 账户失效后无法登陆 </span></span><br><span class="line">-l  <span class="comment">#显示用户信息</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#修改时间为2014年08月31日,和图中时间匹配,方便后续验证 </span></span><br><span class="line">[root@roger ~]<span class="comment"># date -s '20140831' </span></span><br><span class="line">Sun Aug 31 00:00:00 CST 2014 </span><br><span class="line">[root@roger ~]<span class="comment"># date </span></span><br><span class="line">Sun Aug 31 00:00:01 CST 2014 </span><br><span class="line">[root@roger ~]<span class="comment"># useradd roger1 </span></span><br><span class="line">[root@roger ~]<span class="comment"># echo "123" |passwd --stdin roger1 </span></span><br><span class="line">[root@roger ~]<span class="comment"># tail -1 /etc/shadow </span></span><br><span class="line">roger1:!!:16312:0:99999:7::: </span><br><span class="line"></span><br><span class="line"><span class="comment">#设置最近一次修改密码时间 </span></span><br><span class="line">[root@roger ~]<span class="comment"># chage -d "2014-09-01" roger1 </span></span><br><span class="line">[root@roger ~]<span class="comment"># tail -n1 /etc/shadow </span></span><br><span class="line">roger1:!!:16314:0:99999:7::: </span><br><span class="line"></span><br><span class="line"><span class="comment">#设置最短使用密码时间 </span></span><br><span class="line">[root@roger ~]<span class="comment"># chage -m 2 roger1 </span></span><br><span class="line">[root@roger ~]<span class="comment"># tail -n1 /etc/shadow </span></span><br><span class="line">roger1:!!:16314:2:99999:7::: </span><br><span class="line"></span><br><span class="line"><span class="comment">#设置密码最长使用时间 </span></span><br><span class="line">[root@roger ~]<span class="comment"># chage -M 15 roger1 </span></span><br><span class="line">[root@roger ~]<span class="comment"># tail -n1 /etc/shadow </span></span><br><span class="line">roger1:!!:16314:2:15:7::: </span><br><span class="line"></span><br><span class="line"><span class="comment">#设置密码警告时间 </span></span><br><span class="line">[root@roger ~]<span class="comment"># chage -W 6 roger1 </span></span><br><span class="line">[root@roger ~]<span class="comment"># tail -n1 /etc/shadow</span></span><br><span class="line">roger1:!!:16314:2:15:6::: </span><br><span class="line">[root@roger ~]<span class="comment"># chage -W 7 roger1 </span></span><br><span class="line">[root@roger ~]<span class="comment"># tail -n1 /etc/shadow roger1:!!:16314:2:15:7::: </span></span><br><span class="line"></span><br><span class="line"><span class="comment">#设置密码过期时间 </span></span><br><span class="line">[root@roger ~]<span class="comment"># chage -I 5 roger1 </span></span><br><span class="line">[root@roger ~]<span class="comment"># tail -n1 /etc/shadow </span></span><br><span class="line">roger1:!!:16314:2:15:6:5:: </span><br><span class="line"></span><br><span class="line"><span class="comment">#设置用户过期时间 </span></span><br><span class="line">[root@roger ~]<span class="comment"># chage -E "20115-08-31" roger1 </span></span><br><span class="line">[root@roger ~]<span class="comment"># tail -n1 /etc/shadow </span></span><br><span class="line">roger1:!!:16314:2:15:6:5:6627567: </span><br><span class="line">[root@roger ~]<span class="comment"># chage -l roger1 e</span></span><br><span class="line">Last password change : Sep 01, 2014  <span class="comment">#最近一次更改密码时间</span></span><br><span class="line">Password expires : Sep 16, 2014  <span class="comment">#密码过期时间 </span></span><br><span class="line">Password inactive : Sep 21, 2014  <span class="comment">#密码失效时间 </span></span><br><span class="line">Account expires : Aug 31, 2015  <span class="comment">#用户失效时间 </span></span><br><span class="line">Minimum number of days between password change : 2  <span class="comment">#密码最短使用时间 </span></span><br><span class="line">Maximum number of days between password change : 15  <span class="comment">#密码最长使用时间 </span></span><br><span class="line">Number of days of warning before password expires : 7  <span class="comment">#密码过期前警告天数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#如何验证,只调整时间为如下进行验证: </span></span><br><span class="line">1.验证普通用户是否能修改密码, 不需要调整时间。 </span><br><span class="line">2.普通用户登陆系统后, 会提示警告密码还剩多少天过期 </span><br><span class="line">[root@roger ~]<span class="comment"># date -s "2014-09-12" </span></span><br><span class="line">3.普通用户登陆系统后, 强制要求修改密码 </span><br><span class="line">[root@roger ~]<span class="comment"># date -s "2014-09-18" </span></span><br><span class="line">4.普通用户登陆系统后, 提示账户已过期 </span><br><span class="line">[root@roger ~]<span class="comment"># date -s "2014-09-23"</span></span><br></pre></td></tr></table></figure>

<h2 id="用户操作命令"><a href="#用户操作命令" class="headerlink" title="用户操作命令"></a>用户操作命令</h2><p><strong>用户创建</strong></p>
<table>
<thead>
<tr>
<th align="center">选项</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">-u</td>
<td align="center">创建用户时指定用户的uid</td>
</tr>
<tr>
<td align="center">-g</td>
<td align="center">创建用户时指定用户的gid 指定用户组名（该组必须存在）</td>
</tr>
<tr>
<td align="center">-G</td>
<td align="center">创建用户时指定用户的附加组（该组必须存在）</td>
</tr>
<tr>
<td align="center">-c</td>
<td align="center">创建用户时指定用户的描述信息</td>
</tr>
<tr>
<td align="center">-d</td>
<td align="center">创建用户时指定用户的家目录（该目录可以不存在，会自动创建）</td>
</tr>
<tr>
<td align="center">-M</td>
<td align="center">创建用户时不创建用户的家目录</td>
</tr>
<tr>
<td align="center">-s</td>
<td align="center">创建用户时指定用户登录的shell（默认是/bin/bash）</td>
</tr>
<tr>
<td align="center">-r</td>
<td align="center">创建用户时指定用户为系统用户</td>
</tr>
</tbody></table>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">useradd</span><br><span class="line">注意：创建用户在默认不指定组的情况下，会同时出跟该用户名相同的组，跟uid相同的gid，除非-g指定组，则 不会创建同名组</span><br><span class="line"></span><br><span class="line"><span class="comment">#语法</span></span><br><span class="line">useradd [options] 用户名</span><br><span class="line"></span><br><span class="line"><span class="comment">#示例</span></span><br><span class="line">[root@root ~]<span class="comment"># useradd user01 </span></span><br><span class="line">[root@root ~]<span class="comment"># useradd user02 -u 503              #创建用户usr02，指定uid </span></span><br><span class="line">[root@root ~]<span class="comment"># useradd user03 -d /aaa             #创建用户user03 指定家目录</span></span><br><span class="line">[root@root ~]<span class="comment"># useradd user04 -M                  #创建用户user04，不创建家目录 </span></span><br><span class="line">[root@root ~]<span class="comment"># useradd user05 -s /sbin/nologin    #创建用户并指定shell </span></span><br><span class="line">[root@root ~]<span class="comment"># useradd user06 -g hr               #创建用户，指定主组 </span></span><br><span class="line">[root@root ~]<span class="comment"># useradd user07 -G sale             #创建用户，指定附加组 </span></span><br><span class="line">[root@root ~]<span class="comment"># useradd user08 -e 2014-04-01       #指定过期时间 </span></span><br><span class="line">[root@root ~]<span class="comment"># useradd xxx -M -s /sbin/nologin    #创建普通用户，但是没有家目录，不能登录系统 </span></span><br><span class="line">[root@root ~]<span class="comment"># useradd -r yyy -s /sbin/nologin    #yyy属于系统用户，uid处于系统用户 uid范围内</span></span><br><span class="line"></span><br><span class="line">-M</span><br><span class="line">启动程序不需要家目录，容易被黑客攻击</span><br><span class="line"></span><br><span class="line"><span class="comment">#报错1 </span></span><br><span class="line">[root@localhost ~]<span class="comment"># useradd roger1 -u 666 -g 666 </span></span><br><span class="line">useradd: group <span class="string">'666'</span> does not exist </span><br><span class="line"></span><br><span class="line">原因：666这个组不存在，前提，-g必须加入到一个已存在的组</span><br><span class="line"></span><br><span class="line"><span class="comment">#报错2 </span></span><br><span class="line">[root@localhost ~]<span class="comment"># mkdir /dsb </span></span><br><span class="line">[root@localhost ~]<span class="comment"># useradd hl1 -d /dsb/ </span></span><br><span class="line">useradd: warning: the home directory already exists. Not copying any file from skel directory into it. </span><br><span class="line"></span><br><span class="line">原因：使用-d指定用户的家目录时，家目录不能提前创建</span><br></pre></td></tr></table></figure>

<p><strong>修改用户</strong></p>
<table>
<thead>
<tr>
<th align="center">选项</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">-u</td>
<td align="center">修改用户时指定用户的uid</td>
</tr>
<tr>
<td align="center">-g</td>
<td align="center">修改用户时指定用户的gid 指定用户组名（该组必须存在）</td>
</tr>
<tr>
<td align="center">-G</td>
<td align="center">修改用户时指定用户的附加组，会覆盖原来的附加组（该组必须存在）</td>
</tr>
<tr>
<td align="center">-a</td>
<td align="center">修改用户附加组的时候，配合-a追加使用</td>
</tr>
<tr>
<td align="center">-c</td>
<td align="center">修改用户时指定用户的描述信息</td>
</tr>
<tr>
<td align="center">-d</td>
<td align="center">修改用户时指定用户的家目录（该目录可以不存在，会自动创建）</td>
</tr>
<tr>
<td align="center">-m</td>
<td align="center">修改用户时迁移用户的家目录，必须配合-d使用</td>
</tr>
<tr>
<td align="center">-s</td>
<td align="center">修改用户时指定用户登录的shell（默认是/bin/bash）</td>
</tr>
<tr>
<td align="center">-l</td>
<td align="center">更改用户登录名</td>
</tr>
<tr>
<td align="center">-L</td>
<td align="center">锁定用户</td>
</tr>
<tr>
<td align="center">-U</td>
<td align="center">解锁用户</td>
</tr>
</tbody></table>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">usermod</span><br><span class="line"></span><br><span class="line"><span class="comment">#语法 </span></span><br><span class="line">usermod [options] 用户名</span><br><span class="line"></span><br><span class="line"><span class="comment">#示例</span></span><br><span class="line">[root@root ~]<span class="comment"># usermod -e 2013-02-11 user1000  #修改过期时间 </span></span><br><span class="line">[root@root ~]<span class="comment"># usermod -g group1 jj            #修改主组 </span></span><br><span class="line">[root@root ~]<span class="comment"># usermod -a -G group2 jj         #修改附加组，-a添加，不加-a代表覆盖</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#报错 [root@localhost ~]# usermod hl3 -l hl38 </span></span><br><span class="line">usermod: user hl3 is currently used by process 70107 </span><br><span class="line"></span><br><span class="line">原因：hl3用户当前正在被PID为70107进程占用，所以无法修改</span><br></pre></td></tr></table></figure>

<p><strong>删除用户</strong></p>
<table>
<thead>
<tr>
<th align="center">选项</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">-r</td>
<td align="center">递归删除，用户所有相关文件</td>
</tr>
</tbody></table>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">userdel</span><br><span class="line">注意：删除用户，默认情况下，只删除用户本身，其他相关目录文件不会删除</span><br><span class="line"></span><br><span class="line"><span class="comment">#语法 </span></span><br><span class="line">userdel [options] 用户名</span><br><span class="line"></span><br><span class="line"><span class="comment">#示例</span></span><br><span class="line">[root@root ~]<span class="comment"># userdel -r python</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#警告 </span></span><br><span class="line">[root@localhost ~]<span class="comment"># useradd test </span></span><br><span class="line">useradd: warning: the home directory already exists. Not copying any file from skel directory into it. Creating mailbox file: File exists </span><br><span class="line"></span><br><span class="line">原因：创建用户时，该用户以前创建过，但是在删除时没有加-r选项，没有删干净（用户同样可以创建出来）</span><br></pre></td></tr></table></figure>

<h2 id="查看用户其他命令"><a href="#查看用户其他命令" class="headerlink" title="查看用户其他命令"></a>查看用户其他命令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查看当前系统登录了哪些用户 </span></span><br><span class="line">[root@localhost ~]<span class="comment"># who</span></span><br><span class="line">当前登录用户    终端      登录时间      从哪个IP登录 </span><br><span class="line">   root      pts/0	  2022-04-01  11:00 (10.0.0.1)</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看当前系统登录了哪些用户 </span></span><br><span class="line">[root@localhost ~]<span class="comment"># w</span></span><br><span class="line">当前系统时间  服务器总共运行时间  登录用户数  系统的平均负载 </span><br><span class="line">08:52:18 up 15 days, 2:03, 4 users, load average: 0.00, 0.01, 0.05 </span><br><span class="line">USER TTY FROM LOGIN@ IDLE JCPU PCPU WHAT </span><br><span class="line">root pts/0 10.0.0.1 Fri11 2.00s 1.59s 0.00s w </span><br><span class="line">root pts/1 10.0.0.1 23Mar22 3days 0.54s 0.54s -bash </span><br><span class="line">root pts/2 10.0.0.1 21Mar22 12days 0.04s 0.04s -bash </span><br><span class="line">root pts/3 10.0.0.1 23Mar22 12days 0.06s 0.06s -bash</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看当前登录的用户 </span></span><br><span class="line">[root@localhost ~]<span class="comment"># whoami</span></span><br><span class="line">root</span><br></pre></td></tr></table></figure>

<h2 id="创建用户流程"><a href="#创建用户流程" class="headerlink" title="创建用户流程"></a>创建用户流程</h2><p>/etc/login.defs</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># grep -Ev '^#|^$' /etc/login.defs</span></span><br><span class="line">[root@localhost ~]<span class="comment"># grep -i '^[a-z]' /etc/login.defs </span></span><br><span class="line"><span class="comment">#指定创建用户时，默认邮件文件位置 </span></span><br><span class="line">MAIL_DIR /var/spool/mail </span><br><span class="line"></span><br><span class="line"><span class="comment">#创建用户默认密码最大使用天数 </span></span><br><span class="line">PASS_MAX_DAYS <span class="number">99999</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">#创建用户默认密码最小使用天数（0代表无限） </span></span><br><span class="line">PASS_MIN_DAYS <span class="number">0</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">#密码最短位数 </span></span><br><span class="line">PASS_MIN_LEN <span class="number">5</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">#密码过期警告 </span></span><br><span class="line">PASS_WARN_AGE <span class="number">7</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">#普通用户，最小UID是1000 </span></span><br><span class="line">UID_MIN <span class="number">1000</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">#普通用户，最大UID是60000 </span></span><br><span class="line">UID_MAX <span class="number">60000</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">#系统用户，最小UID是201 </span></span><br><span class="line">SYS_UID_MIN <span class="number">201</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">#系统用户，最大UID是999 </span></span><br><span class="line">SYS_UID_MAX <span class="number">999</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">#普通用户组，最小GID是1000</span></span><br><span class="line">GID_MIN <span class="number">1000</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#普通用户组，最大GID是60000 </span></span><br><span class="line">GID_MAX <span class="number">60000</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">#系统用户组，最小GID是201 </span></span><br><span class="line">SYS_GID_MIN <span class="number">201</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">#系统用户组，最大GID是999 </span></span><br><span class="line">SYS_GID_MAX <span class="number">999</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">#默认创建用户的家目录 </span></span><br><span class="line">CREATE_HOME yes </span><br><span class="line"></span><br><span class="line"><span class="comment">#UMASK 077 指定用户创建家目录的默认权限 </span></span><br><span class="line">UMASK <span class="number">077</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">#创建用户时，如果不用-g指定组，那么会默认创建出该用户的同名组 </span></span><br><span class="line">USERGROUPS_ENAB yes </span><br><span class="line"></span><br><span class="line"><span class="comment">#用户密码的加密方式 </span></span><br><span class="line">SHA512 ENCRYPT_METHOD SHA512</span><br></pre></td></tr></table></figure>

<p>权限了解</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">r：读权限 4 </span><br><span class="line">w：写权限 2 </span><br><span class="line">x：执行权限 1 </span><br><span class="line">-：没有权限 0 </span><br><span class="line">目录创建默认权限：0777 - <span class="built_in">umask</span> </span><br><span class="line">文件创建默认权限：0666 - <span class="built_in">umask</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#如果当前用户的UID&gt;199并且UID=GID,权限是umask 002否则权限是umask 022</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$UID</span> -gt 199 ] &amp;&amp; [ <span class="string">"`/usr/bin/id -gn`"</span> = <span class="string">"`/usr/bin/id -un`"</span> ]; <span class="keyword">then</span> </span><br><span class="line">	<span class="built_in">umask</span> 002 </span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">	<span class="built_in">umask</span> 022 </span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>

<p>/etc/default/useradd</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># cat /etc/default/useradd </span></span><br><span class="line"></span><br><span class="line"><span class="comment">#如果创建用户不创建同名组，默认会将该用户加入GID为100的系统组中（users） </span></span><br><span class="line">GROUP=100</span><br><span class="line"></span><br><span class="line">ps:如果login.defs文件中的USERGROUPS_ENAB yes是no，该行配置才会生效</span><br><span class="line"></span><br><span class="line"><span class="comment">#指定用户默认创建家目录的位置 </span></span><br><span class="line">HOME=/home </span><br><span class="line"></span><br><span class="line"><span class="comment">#用户账户停权 -1永远不过期</span></span><br><span class="line">INACTIVE=-1 </span><br><span class="line"></span><br><span class="line"><span class="comment">#账号终止时间的设置，不设置不终止</span></span><br><span class="line">EXPIRE= </span><br><span class="line"></span><br><span class="line"><span class="comment">#用户默认创建登录shell </span></span><br><span class="line">SHELL=/bin/bash </span><br><span class="line"></span><br><span class="line"><span class="comment">#该目录下存放的是，用户的环境变量初始配置文件 </span></span><br><span class="line">SKEL=/etc/skel </span><br><span class="line"></span><br><span class="line"><span class="comment">#创建用户的同时，创建该用户的邮箱文件 </span></span><br><span class="line">CREATE_MAIL_SPOOL=yes</span><br></pre></td></tr></table></figure>

<p>用户创建的流程</p>
<ul>
<li><p>1.执行<code>useradd</code> 命令 + 用户名 </p>
</li>
<li><p>2.查看执行命令是否有选项 </p>
</li>
<li><p>3.读取<code>/etc/login.defs</code>文件 </p>
</li>
<li><p>4.读取<code>/etc/default/useradd</code>文件 </p>
</li>
<li><p>5.如果没有-M则创建家目录 </p>
</li>
<li><p>6.根据配置文件中的 <code>SKEL=/etc/skel</code> 将<code>skel</code>下面的环境变量文件拷贝到家目录下 </p>
</li>
<li><p>7.用户信息记录到<code>/etc/passwd</code>文件中 </p>
</li>
<li><p>8.用户密码信息记录到<code>/etc/shadow</code>文件中 </p>
</li>
<li><p>9.用户组信息记录到<code>/etc/group</code>文件中 </p>
</li>
<li><p>10.用户组密码信息记录到<code>/etc/gshadow</code>文件中</p>
</li>
</ul>
<h2 id="用户的密码管理"><a href="#用户的密码管理" class="headerlink" title="用户的密码管理"></a>用户的密码管理</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">passwd：给用户设置密码 </span><br><span class="line"></span><br><span class="line"><span class="comment">#语法：</span></span><br><span class="line">passwd [用户名] </span><br><span class="line"></span><br><span class="line">ps:如果不加用户名，则修改当前登录用户的密码，只有root用户能在passwd命令后加用户名</span><br><span class="line"></span><br><span class="line"><span class="comment">#修改其他用户密码 </span></span><br><span class="line">[root@localhost ~]<span class="comment"># passwd python </span></span><br><span class="line"></span><br><span class="line"><span class="comment">#修改zls用户的密码 </span></span><br><span class="line">Changing password <span class="keyword">for</span> user python. </span><br><span class="line"></span><br><span class="line"><span class="comment">#新密码 </span></span><br><span class="line">New password: </span><br><span class="line">BAD PASSWORD: The password is a palindrome </span><br><span class="line"></span><br><span class="line"><span class="comment">#重复新密码 </span></span><br><span class="line">Retype new password: </span><br><span class="line"></span><br><span class="line"><span class="comment">#所有认证令牌更新成功 </span></span><br><span class="line">passwd: all authentication tokens updated successfully.</span><br></pre></td></tr></table></figure>

<p>免交互方式</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">stdin：标准输入 </span><br><span class="line">stdout：标准输出 </span><br><span class="line">stderr：错误输出</span><br><span class="line"></span><br><span class="line">[root@localhost ~]<span class="comment"># echo 'python' | passwd --stdin python</span></span><br><span class="line">Changing password <span class="keyword">for</span> user python.</span><br><span class="line">passwd: all authentication tokens updated successfully.</span><br><span class="line"></span><br><span class="line"><span class="comment">#脚本创建100个用户</span></span><br><span class="line">vim creat_user</span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> `seq -w 10`;<span class="keyword">do</span></span><br><span class="line">  useradd roger<span class="variable">$i</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">'123'</span> | passwd --stdin roger<span class="variable">$i</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>

<p>随机密码生成</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tee：管道命令 </span><br><span class="line">-a：append 追加 </span><br><span class="line"></span><br><span class="line">[root@localhost ~]<span class="comment"># echo $RANDOM | tee -a /tmp/pass.txt | passwd --stdin roger001</span></span><br></pre></td></tr></table></figure>

<h1 id="用户组管理"><a href="#用户组管理" class="headerlink" title="用户组管理"></a>用户组管理</h1><h2 id="随机密码生成"><a href="#随机密码生成" class="headerlink" title="随机密码生成"></a>随机密码生成</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"> <span class="comment">#md5加密算法</span></span><br><span class="line">[root@localhost ~]<span class="comment"># echo 123 | md5sum</span></span><br><span class="line">[root@localhost ~]<span class="comment"># vim test.txt</span></span><br><span class="line">[root@localhost ~]<span class="comment"># md5sum test.txt &gt; /tmp/md5.txt</span></span><br><span class="line">[root@localhost ~]<span class="comment"># md5sum -c /tmp/md5.txt</span></span><br><span class="line">test.txt: OK</span><br><span class="line"></span><br><span class="line">ps:只要文件篡改就检验失败</span><br><span class="line"></span><br><span class="line">date：查看当前系统时间</span><br><span class="line">date +%F-%T：2022-04-09-14:25:13</span><br><span class="line">date +%F<span class="string">" "</span>%T：2022-04-09 14:25:30</span><br><span class="line">date +%F-%T | md5sum</span><br><span class="line"><span class="comment">#修改当前系统时间格式</span></span><br><span class="line">date -s <span class="string">"2022/4/9 14:34:00"</span></span><br><span class="line"><span class="comment">#格式化时间</span></span><br><span class="line">date +%Y-%m-%d</span><br><span class="line">%Y：年</span><br><span class="line">%m：月</span><br><span class="line">%d：日</span><br><span class="line">%H：时</span><br><span class="line">%M：分</span><br><span class="line">%S：秒</span><br><span class="line">%F：年月日</span><br><span class="line">%T：时分秒</span><br><span class="line"></span><br><span class="line"><span class="comment">#随机密码mkpasswd</span></span><br><span class="line">-l：长度</span><br><span class="line">-d：数字</span><br><span class="line">-c：小写字母</span><br><span class="line">-C：大写字母</span><br><span class="line">-s：特殊符号</span><br><span class="line"></span><br><span class="line">[root@<span class="built_in">test</span> ~]<span class="comment"># mkpasswd -l 13 -d 2 -c 2 -C 4 -s 2</span></span><br><span class="line">uzC4nJ<span class="variable">$UWh2</span>&#123;k</span><br></pre></td></tr></table></figure>

<h2 id="用户组管理-1"><a href="#用户组管理-1" class="headerlink" title="用户组管理"></a>用户组管理</h2><p>/etc/group</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># cat /etc/group </span></span><br><span class="line">root:x:0: </span><br><span class="line"></span><br><span class="line">1.组名字 </span><br><span class="line">2.组密码占位符 </span><br><span class="line">3.GID </span><br><span class="line">4.显示该组的附加成员</span><br></pre></td></tr></table></figure>

<p>/etc/gshadow</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># cat /etc/gshadow</span></span><br><span class="line">root:::roger01</span><br><span class="line"></span><br><span class="line">1.组名字 </span><br><span class="line">2.组密码（空和!是没有密码） </span><br><span class="line">3.组管理员 </span><br><span class="line">4.显示该组的附加成员</span><br></pre></td></tr></table></figure>

<p>创建组<code>groupadd</code></p>
<table>
<thead>
<tr>
<th align="center">选项</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">-g</td>
<td align="center">指定组的gid</td>
</tr>
<tr>
<td align="center">-r</td>
<td align="center">指定gid范围201-999之间的系统组</td>
</tr>
</tbody></table>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">groupadd</span><br><span class="line"></span><br><span class="line"><span class="comment">#语法</span></span><br><span class="line">groupadd [options] 组名</span><br><span class="line"></span><br><span class="line"><span class="comment">#示例</span></span><br><span class="line">[root@localhost ~]<span class="comment"># groupadd workpress01</span></span><br><span class="line">[root@localhost ~]<span class="comment"># groupadd workpress02 -g 10000  </span></span><br><span class="line">[root@localhost ~]<span class="comment"># tail -1 /etc/group</span></span><br><span class="line">workpress02:x:10000:</span><br><span class="line">[root@localhost ~]<span class="comment"># groupadd workpress03 -r</span></span><br><span class="line">[root@localhost ~]<span class="comment"># tail -1 /etc/group</span></span><br><span class="line">workpress03:x:996:</span><br></pre></td></tr></table></figure>

<p>删除组<code>groupdel</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">groupdel</span><br><span class="line"></span><br><span class="line"><span class="comment">#语法</span></span><br><span class="line">groupdel 组名</span><br><span class="line"></span><br><span class="line"><span class="comment">#示例</span></span><br><span class="line">[root@localhost ~]<span class="comment"># groupdel workpress01</span></span><br></pre></td></tr></table></figure>

<p>修改组<code>groupmod</code></p>
<table>
<thead>
<tr>
<th align="center">选项</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">-g</td>
<td align="center">修改组的gid</td>
</tr>
<tr>
<td align="center">-n</td>
<td align="center">修改组名字</td>
</tr>
</tbody></table>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">groupmod</span><br><span class="line"></span><br><span class="line"><span class="comment">#语法</span></span><br><span class="line">groupmod [options] 组名</span><br><span class="line"></span><br><span class="line"><span class="comment">#示例</span></span><br><span class="line">[root@localhost ~]<span class="comment"># groupmod -g 10002 workpress02</span></span><br><span class="line">[root@localhost ~]<span class="comment"># tail -1 /etc/group</span></span><br><span class="line">workpress02:x:10002:</span><br><span class="line">[root@localhost ~]<span class="comment"># groupmod workpress02 -n workpress03</span></span><br><span class="line">[root@localhost ~]<span class="comment"># tail -1 /etc/group</span></span><br><span class="line">workpress03:x:10002:</span><br></pre></td></tr></table></figure>

<p>修改组密码（了解）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@zls ~]<span class="comment"># groupadd devops</span></span><br><span class="line">[root@zls ~]<span class="comment"># gpasswd devops</span></span><br><span class="line">Changing the password <span class="keyword">for</span> group devops</span><br><span class="line">New Password:</span><br><span class="line">Re-enter new password:</span><br></pre></td></tr></table></figure>

<p>切换基本组身份（了解）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#检查账户信息</span></span><br><span class="line">[root@docker ~]<span class="comment"># useradd zls</span></span><br><span class="line">[root@docker ~]<span class="comment"># id zls</span></span><br><span class="line">uid=1069(zls) gid=5005(zls) groups=5005(zls)</span><br><span class="line"> </span><br><span class="line"><span class="comment">#切换普通用户</span></span><br><span class="line">[root@docker ~]<span class="comment"># su - zls</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#创建新文件,并验证权限</span></span><br><span class="line">[zls@docker ~]$ touch file_roots</span><br><span class="line">[zls@docker ~]$ ll</span><br><span class="line">-rw-rw-r-- 1 zls zls 0 Jun 13 10:06 file_roots</span><br><span class="line"> </span><br><span class="line"><span class="comment">#切换组信息</span></span><br><span class="line">[zls@docker ~]$ newgrp devops</span><br><span class="line">Password:</span><br><span class="line"> </span><br><span class="line"><span class="comment">#建立文件,检查权限</span></span><br><span class="line">[zls@docker ~]$ touch file_test</span><br><span class="line">[zls@docker ~]$ ll</span><br><span class="line">total 0</span><br><span class="line">-rw-rw-r-- 1 zls zls 0 Jun 13 10:06 file_roots</span><br><span class="line">-rw-r--r-- 1 zls devops     0 Jun 13 10:08 file_test</span><br></pre></td></tr></table></figure>

<h2 id="用户身份切换"><a href="#用户身份切换" class="headerlink" title="用户身份切换"></a>用户身份切换</h2><p>Linux系统中，有时候普通用户有些事情是没办法操作，除非是root管理员用户才能做到。这时就需要临时切换到root管理员身份来做事了。那么在学习如何切换用户之前,我们先来了解下用户工作环境</p>
<blockquote>
<p>如何在普通用户的情况下，完成日常工作？</p>
<p>su 切换用户，使用普通用户登录，然后使用su命令切换到root</p>
<ul>
<li><p>优点：简单，方便</p>
</li>
<li><p>缺点：需要知道root密码,不安全，切换到root没有日志审计功能</p>
</li>
</ul>
<p>sudo 提权，当需要使用root权限时，进行提权，而无需切换至root用户</p>
<ul>
<li>优点：安全，方便</li>
<li>缺点：复杂</li>
</ul>
</blockquote>
<p>切换用户<code>su</code></p>
<table>
<thead>
<tr>
<th align="center">选项</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">-c</td>
<td align="center">不切换用户，以该用户身份执行</td>
</tr>
</tbody></table>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">su</span><br><span class="line"></span><br><span class="line"><span class="comment">#语法</span></span><br><span class="line">su - 用户名</span><br><span class="line"></span><br><span class="line"><span class="comment">#示例</span></span><br><span class="line"><span class="comment">#不加用户名默认切换root用户</span></span><br><span class="line">[root@localhost ~]<span class="comment"># su - </span></span><br><span class="line">[root@localhost ~]<span class="comment"># su - root -c "mkdir /root/python"</span></span><br><span class="line">[root@localhost ~]<span class="comment"># su - root -c "ls -l /root/python"</span></span><br></pre></td></tr></table></figure>

<p><strong>shell的种类</strong></p>
<ul>
<li>交互式shell<ul>
<li>等待用户输入执行的命令(终端操作,需要不断提示)：passwd</li>
</ul>
</li>
<li>非交互式shell<ul>
<li>执行shell脚本, 脚本执行结束后shell自动退出：su - 用户</li>
</ul>
</li>
<li>登录式shell<ul>
<li>需要输入用户名和密码，才可以登录</li>
</ul>
</li>
<li>非登录式shell<ul>
<li>不需要输入用户名和密码，就可以登录</li>
<li>只加载~/.bashrc、/etc/bashrc 、/etc/profile.d/*.sh </li>
</ul>
</li>
</ul>
<p><strong>系统环境变量文件</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#局部环境变量</span></span><br><span class="line">~/.bashrc</span><br><span class="line">~/.bash_profile</span><br><span class="line"></span><br><span class="line"><span class="comment">#全局环境变量</span></span><br><span class="line">/etc/profile：不能轻易修改</span><br><span class="line">/etc/profile.d/*.sh：推荐在这里增加配置文件，更安全</span><br><span class="line">/etc/bashrc：</span><br></pre></td></tr></table></figure>

<p><strong>环境变量加载顺序</strong></p>
<ul>
<li>/etc/profile </li>
<li>/etc/profile.d/*.sh </li>
<li>~/.bash_profile </li>
<li>~/.bashrc </li>
<li>/etc/bashrc </li>
</ul>
<h1 id="sudo提权"><a href="#sudo提权" class="headerlink" title="sudo提权"></a>sudo提权</h1><blockquote>
<p>什么是<code>sudo</code>？</p>
<ul>
<li><code>sudo</code>就是普通用户可以提权，执行root用户可以执行的命令</li>
</ul>
<p>为什么要用到<code>sudo</code>？</p>
<ul>
<li>如果在公司中，入职后，领导给运维的用户时普通用户，但是有些命令只能root执行</li>
</ul>
</blockquote>
<h2 id="sudo如何使用"><a href="#sudo如何使用" class="headerlink" title="sudo如何使用"></a><code>sudo</code>如何使用</h2><ul>
<li><p>1.系统的超级管理员（root）需要做<code>sudo</code>的配置（发一个兵符给指定的普通用户） </p>
</li>
<li><p>2.普通用户只需要在，执行的命令之前，加上<code>sudo</code>即可</p>
</li>
</ul>
<p>配置文件<code>/etc/sudoers</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"> 99 <span class="comment">## Allow root to run any commands anywhere </span></span><br><span class="line">100 root	ALL=(ALL)	ALL</span><br><span class="line"></span><br><span class="line">1.用户名</span><br><span class="line">2.主机名</span><br><span class="line">3.角色名</span><br><span class="line">4.命令名</span><br></pre></td></tr></table></figure>

<p>编辑权限<code>visudo</code></p>
<table>
<thead>
<tr>
<th align="center">选项</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">-c</td>
<td align="center">检查语法</td>
</tr>
</tbody></table>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#python用户提权</span></span><br><span class="line">python	ALL=(ALL)	ALL</span><br><span class="line">[root@localhost ~]<span class="comment"># sudo passwd roger1</span></span><br><span class="line">[sudo] password <span class="keyword">for</span> python:</span><br><span class="line"><span class="comment">#普通用户无需输入密码</span></span><br><span class="line">python	ALL=(ALL)	NOPASSWD:ALL</span><br><span class="line"></span><br><span class="line"><span class="comment">#主机别名</span></span><br><span class="line">Host_Alias    FILESERVERS = fs1, fs2</span><br><span class="line">python	FILESERVERS=(ALL)	NOPASSWD:ALL</span><br><span class="line"></span><br><span class="line"><span class="comment">#角色别名</span></span><br><span class="line">Cmnd_Alias SOFTWARE = /bin/rpm, /usr/bin/up2date, /usr/bin/yum</span><br><span class="line">python	FILESERVERS=(ALL)	NOPASSWD:Cmnd_Alias SOFTWARE</span><br><span class="line"></span><br><span class="line">Cmnd_Alias SOFTWARE = ！/bin/rpm, !/usr/bin/up2date</span><br><span class="line">python	FILESERVERS=(ALL)	NOPASSWD:Cmnd_Alias SOFTWARE</span><br><span class="line"></span><br><span class="line"><span class="comment">#用户组提权</span></span><br><span class="line">%wheel	ALL=(ALL)	ALL</span><br><span class="line">%wheel	ALL=(ALL)	NOPASSWD:ALL</span><br><span class="line"></span><br><span class="line"><span class="comment">#主要用usermod给用户提权，把用户加到有权限的组里</span></span><br><span class="line">usermod 用户名 -G 提权组</span><br><span class="line"></span><br><span class="line"><span class="comment">#报错 </span></span><br><span class="line">[root@localhost ~]<span class="comment"># sudo ll </span></span><br><span class="line">sudo: ll: <span class="built_in">command</span> not found </span><br><span class="line">原因：ll是别名，不是系统命令，sudo不走别名，只认识系统命令</span><br></pre></td></tr></table></figure>

<p>/var/db/sudo</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#密码过期文件</span></span><br><span class="line">/var/db/sudo/lectured</span><br><span class="line"></span><br><span class="line">通过Atime检验是否过期</span><br></pre></td></tr></table></figure>

<p><code>sudo</code>执行流程</p>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_devops/15613875305374.jpg" alt="15613875305374"></p>
<p>总结</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1.会修改visudo，添加用户提权 </span><br><span class="line">2.给用户免密执行sudo的权限 </span><br><span class="line">3.自定义用户的可执行命令，和不可执行命令 </span><br><span class="line">4.给组分配提权的权限 </span><br><span class="line">5.提权不用修改visudo，只需要加入wheel组，即可</span><br><span class="line"></span><br><span class="line">注意：除非企业中有要求，哪些命令需要用，哪些不能使用</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>SRE</category>
      </categories>
      <tags>
        <tag>Linxu基础</tag>
      </tags>
  </entry>
  <entry>
    <title>[计算机组成原理]</title>
    <url>/2019/03/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<h1 id="计算机组成原理"><a href="#计算机组成原理" class="headerlink" title="计算机组成原理"></a>计算机组成原理</h1><h2 id="什么是计算机"><a href="#什么是计算机" class="headerlink" title="什么是计算机"></a>什么是计算机</h2><ul>
<li>计算机也称为”电脑”<ul>
<li>电脑二字蕴含了人类对计算机的终极期望</li>
<li>希望它能像人脑一样工作，取代人力并解放人力</li>
</ul>
</li>
</ul>
<h2 id="为什么有计算机"><a href="#为什么有计算机" class="headerlink" title="为什么有计算机"></a>为什么有计算机</h2><ul>
<li>为什么要有计算机，或者人类为什么要造计算机<ul>
<li>为了执行人类的程序，从而将人力解放</li>
<li>所以在造计算机的时候把它的每一部分都设计的像人类一样</li>
</ul>
</li>
</ul>
<h2 id="计算机五大组成部分"><a href="#计算机五大组成部分" class="headerlink" title="计算机五大组成部分"></a>计算机五大组成部分</h2><p>计算机有五大组件组成，可以八计算机的五大组件比喻成人类器官</p>
<ul>
<li>控制器</li>
<li>运算器</li>
<li>存储器</li>
<li>输入设备</li>
<li>输出设备</li>
</ul>
<h3 id="CPU"><a href="#CPU" class="headerlink" title="CPU"></a>CPU</h3><ul>
<li>控制器<ul>
<li>作用：计算机的指挥系统，主要负责控制计算机其他所有组件如何工作</li>
<li>例如：控制行为、动作</li>
<li>类比：人类大脑</li>
</ul>
</li>
<li>运算器<ul>
<li>作用：主要包含数学运算、逻辑运算</li>
<li>例如：1+1=逻辑运算</li>
<li>类比：人类大脑</li>
</ul>
</li>
</ul>
<h3 id="内存-硬盘"><a href="#内存-硬盘" class="headerlink" title="内存/硬盘"></a>内存/硬盘</h3><ul>
<li>存储器I/O<ul>
<li>作用：负责程序数据的存取</li>
<li>分类<ul>
<li>内存：内存基于电工作，通电就可以存储数据<ul>
<li>优点：存取数据快</li>
<li>缺点：断电数据会丢失，仅能临时存储数据</li>
</ul>
</li>
<li>外存：外置硬盘，基于磁工作<ul>
<li>优点：断电数据不会丢失，永久保存数据</li>
<li>缺点：存取速度慢</li>
</ul>
</li>
</ul>
</li>
<li>类比：<ul>
<li>内存：大脑的记忆功能（快、短期记忆）</li>
<li>硬盘：随身携带的记事本（慢、长期记忆）</li>
</ul>
</li>
<li>如果程序的数据要快存快取<ul>
<li>第一步：将应用程序存储至硬盘中，如果不用则存储下来即可</li>
<li>第二步：如果需要使用改程序，一定需要将硬盘的数据加载到内存中</li>
<li>第三步：最后CPU读取内存中的指令，进行分析和处理；从而保证程序的执行速度</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="输入设备"><a href="#输入设备" class="headerlink" title="输入设备"></a>输入设备</h3><ul>
<li>输入设备Input<ul>
<li>作用：往计算机里输入内容</li>
<li>例如：看到的、听到的</li>
<li>类比：人类眼睛、耳朵</li>
</ul>
</li>
</ul>
<h3 id="输出设备"><a href="#输出设备" class="headerlink" title="输出设备"></a>输出设备</h3><ul>
<li>输出设备Output<ul>
<li>作用：计算机向外输出数据的工具</li>
<li>例如：说的话、发布的文章</li>
<li>类比：人类嘴巴、写字</li>
</ul>
</li>
</ul>
<h2 id="计算机三大核心硬件"><a href="#计算机三大核心硬件" class="headerlink" title="计算机三大核心硬件"></a>计算机三大核心硬件</h2><p>将五搭组成进步提炼出其中的三大核心硬件（CPU、内存、磁盘），一个程序的运行与三大核心有着密切关系</p>
<ul>
<li>控制指令<ul>
<li>计算机所有组件都受CPU控制</li>
</ul>
</li>
<li>任务反复运行<ul>
<li>内存只能短暂记忆数据，断电后数据消失</li>
<li>编写好的程序或软件必须存储在硬盘上</li>
</ul>
</li>
<li>运行速度<ul>
<li>CPU速度远高于硬盘，每次都从硬盘中读取一条数据处理会浪费大量世界</li>
<li>我们会将数据存储在硬盘，将数据加载到内存中，再由CPU从内存中读取指令运行</li>
</ul>
</li>
</ul>
<h2 id="操作系统基本概念"><a href="#操作系统基本概念" class="headerlink" title="操作系统基本概念"></a>操作系统基本概念</h2><h3 id="操作系统的由来"><a href="#操作系统的由来" class="headerlink" title="操作系统的由来"></a>操作系统的由来</h3><ul>
<li>需求<ul>
<li>开发一个编辑工具，该软件的一个核心业务就是文本编辑，编辑内容就牵扯到要操作计算机硬件</li>
</ul>
</li>
<li>问题<ul>
<li>我们编写软件，最终目的是为了控制硬件</li>
<li>计算机不可能自行运行，所有的硬件运行都需要软件进行支配</li>
</ul>
</li>
<li>实现<ul>
<li>必须先开发一个”控制系统”来控制计算机的硬件基本运行</li>
<li>然后再开发编辑工具的业务功能，但凡设计到操作硬件，则调用控制系统</li>
<li>最后由控制系统来控制计算机硬件进行运行</li>
</ul>
</li>
</ul>
<h3 id="什么是操作系统"><a href="#什么是操作系统" class="headerlink" title="什么是操作系统"></a>什么是操作系统</h3><p>操作系统<code>Operation System，简称OS</code></p>
<ul>
<li>操作系统是”应用软件”与”硬件”之间的桥梁</li>
<li>同时也协调、管理”控制计算机硬件资源”、”应用软件资源”的一个控制程序</li>
</ul>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20220318171442000.png" alt="image-20220318171442000"></p>
<h3 id="为什么需要操作系统"><a href="#为什么需要操作系统" class="headerlink" title="为什么需要操作系统"></a>为什么需要操作系统</h3><ul>
<li>控制计算机的基本运行</li>
<li>将硬件的复杂操作简单化，供上层应用程序使用</li>
<li>为用户与计算机硬件之间提供”图形/命令行”工具</li>
</ul>
]]></content>
      <categories>
        <category>SRE</category>
      </categories>
      <tags>
        <tag>Linxu基础</tag>
      </tags>
  </entry>
  <entry>
    <title>[Linux架构]</title>
    <url>/2019/04/20/Linux%E6%9E%B6%E6%9E%84/</url>
    <content><![CDATA[<p><a href="https://rogerxs80.github.io/2019/02/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/" target="_blank" rel="noopener">1.环境准备</a></p>
<p><a href="https://rogerxs80.github.io/2019/02/20/%E8%99%9A%E6%8B%9F%E5%8C%96%E7%8E%AF%E5%A2%83/" target="_blank" rel="noopener">2.rsync数据备份</a></p>
<p><a href="https://rogerxs80.github.io/2019/02/20/Bash%E5%88%9D%E8%AF%86/" target="_blank" rel="noopener">3.NFS共享存储</a></p>
<p><a href="https://rogerxs80.github.io/2019/02/21/%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/" target="_blank" rel="noopener">4.ssh连接</a></p>
<p><a href="https://rogerxs80.github.io/2019/02/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/" target="_blank" rel="noopener">5.http协议</a></p>
<p><a href="https://rogerxs80.github.io/2019/02/20/%E8%99%9A%E6%8B%9F%E5%8C%96%E7%8E%AF%E5%A2%83/" target="_blank" rel="noopener">6.Nginx服务</a></p>
<p><a href="https://rogerxs80.github.io/2019/02/20/Bash%E5%88%9D%E8%AF%86/" target="_blank" rel="noopener">7.Ansibe自动化</a></p>
<p><a href="https://rogerxs80.github.io/2019/02/21/%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/" target="_blank" rel="noopener">8.防火墙firewailld</a></p>
]]></content>
      <categories>
        <category>SRE</category>
      </categories>
      <tags>
        <tag>Linxu架构</tag>
      </tags>
  </entry>
  <entry>
    <title>[环境准备]</title>
    <url>/2019/04/20/%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87/</url>
    <content><![CDATA[<h1 id="架构介绍"><a href="#架构介绍" class="headerlink" title="架构介绍"></a>架构介绍</h1><h2 id="架构相关名词"><a href="#架构相关名词" class="headerlink" title="架构相关名词"></a>架构相关名词</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">项目：独立的一个网站，或者独立的一个app应用 </span><br><span class="line">架构：用来维护或者运行一个项目的一组服务器 </span><br><span class="line">集群：为解决某个特定问题将多台计算机组合起来形成的单个系统（避免单点故障）</span><br><span class="line">高可用：当一台服务器不可用，另一台服务器自动接管，保证业务不down机 </span><br><span class="line">负载均衡：将用户的请求，分摊到多个操作单元上执行,为了解决服务器压力不均衡的问题</span><br></pre></td></tr></table></figure>

<h2 id="架构演变"><a href="#架构演变" class="headerlink" title="架构演变"></a>架构演变</h2><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_devops/image-20220512193446428.png" alt="image-20220512193446428"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#用户请求，针对用户设计的架构 </span></span><br><span class="line">在浏览器中输入：https://blog.driverzeng.com </span><br><span class="line">1.DNS域名解析服务器 ==》将blog.driverzeng.com解析成IP地址：114.80.187.8 </span><br><span class="line">2.浏览器和该IP地址（114.80.187.8）的服务器(https:// 443)端（http:// 80）口建立连接 </span><br><span class="line">3.请求要经过114.80.187.8服务器的防火墙，如果允许你的IP（101.229.206.48）访问服务器的443端口 </span><br><span class="line">	- 防火墙：过滤用户请求，防止恶意请求，针对IP和端口进行限制 </span><br><span class="line">	- 关闭防火墙，关闭Selinux </span><br><span class="line">	- CentOS6之前：iptables </span><br><span class="line">	- CentOS7开始：firewalld，也可以使用iptables </span><br><span class="line">	- 硬件防火墙 </span><br><span class="line">4.请求通过防火墙后，访问到负载均衡服务器 </span><br><span class="line">	- Nginx </span><br><span class="line">	- HAproxy </span><br><span class="line">	- LVS </span><br><span class="line">	- F5（硬件） </span><br><span class="line">5.请求通过负载均衡后会被下发到后面的web服务器 </span><br><span class="line">	- Nginx </span><br><span class="line">	- Apache </span><br><span class="line">	- Tomcat（Java） </span><br><span class="line">	- PHP（PHP代码容器） </span><br><span class="line">6.前端代码会请求后端的代码，后端代码请求数据库 </span><br><span class="line">	- MySQL </span><br><span class="line">	- Oracle </span><br><span class="line">	- SQLServer </span><br><span class="line">	- MariaDB </span><br><span class="line">7.数据库之前会有缓存服务器，如果缓存中有请求的数据，则直接通过缓存返回给用户 </span><br><span class="line">	- Redis </span><br><span class="line">	- MangoDB </span><br><span class="line">	- Memcache </span><br><span class="line">8.文件服务器（共享存储服务器）专门用来存储图片，视频，二进制类型的数据 </span><br><span class="line">	- NFS </span><br><span class="line">	- GFS </span><br><span class="line">	- FastDFS </span><br><span class="line">	- ceph</span><br><span class="line"></span><br><span class="line"><span class="comment">#运维自动化工具 </span></span><br><span class="line">所有服务器，至少要有两块网卡（有两个IP地址） </span><br><span class="line">外网IP地址：针对用户访问，给用户提供服务 </span><br><span class="line">内网IP地址：服务器之间互相可以访问 </span><br><span class="line">跳板机，VPN：访问内网服务器 </span><br><span class="line">	- openvpn </span><br><span class="line">	- pptpvpn </span><br><span class="line">	- jumpserver </span><br><span class="line">监控：检测服务器上的应用状态，硬件状态，网络状态，系统状态，业务状态 </span><br><span class="line">	- zabbix </span><br><span class="line">	- nagios </span><br><span class="line">	- open-falcon </span><br><span class="line">	- promethues </span><br><span class="line">	- cacti</span><br><span class="line">数据备份服务器：用来备份所有重要数据 </span><br><span class="line">	- rsync 批量管理服务器 </span><br><span class="line">	- ansible </span><br><span class="line">	- saltstack </span><br><span class="line">日志服务器 </span><br><span class="line">	- ELK </span><br><span class="line">	- flume </span><br><span class="line">代码发布服务器 </span><br><span class="line">	- Jenkins </span><br><span class="line">代码存储服务器 </span><br><span class="line">	- Gitlab</span><br></pre></td></tr></table></figure>

<h2 id="架构模板机准备"><a href="#架构模板机准备" class="headerlink" title="架构模板机准备"></a>架构模板机准备</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#编辑网卡名</span></span><br><span class="line">按Tab键</span><br><span class="line">quiet net.ifnames=0 biosdevname=0</span><br><span class="line"></span><br><span class="line"><span class="comment">#配置网卡</span></span><br><span class="line"><span class="comment">##编辑第一块网卡 </span></span><br><span class="line">vi /etc/sysconfig/network-scripts/ifcfg-eth0 </span><br><span class="line">删除UUID  <span class="comment">#mac地址</span></span><br><span class="line">BOOTPROTO=dhcp =&gt; BOOTPROTO=static 或者 BOOTPROTO=none </span><br><span class="line">ONBOOT=no =&gt; ONBOOT=yes </span><br><span class="line">IPADDR=10.0.0.100 </span><br><span class="line">NETMASK=255.255.255.0 </span><br><span class="line">GATEWAY=10.0.0.2 </span><br><span class="line">DNS1=223.5.5.5 </span><br><span class="line"><span class="comment">##编辑第二块网卡 </span></span><br><span class="line">vi /etc/sysconfig/network-scripts/ifcfg-eth1 </span><br><span class="line">删除UUID </span><br><span class="line">BOOTPROTO=dhcp =&gt; BOOTPROTO=static 或者 BOOTPROTO=none </span><br><span class="line">ONBOOT=no =&gt; ONBOOT=yes </span><br><span class="line">IPADDR=172.16.1.100 </span><br><span class="line">NETMASK=255.255.255.0 </span><br><span class="line"><span class="comment">##重启网卡 </span></span><br><span class="line">systemctl restart network</span><br><span class="line"></span><br><span class="line"><span class="comment">#系统优化</span></span><br><span class="line"><span class="comment">#1.更改yum源 </span></span><br><span class="line"><span class="comment">##删除所有系统内置yum源</span></span><br><span class="line">[root@localhost ~]<span class="comment"># gzip /etc/yum.repos.d/*.repo</span></span><br><span class="line">[root@localhost ~]<span class="comment"># rm -fr /etc/yum.repos.d/* </span></span><br><span class="line"><span class="comment">##Base源 </span></span><br><span class="line">curl -o /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-7.repo </span><br><span class="line"><span class="comment">##Epel源 </span></span><br><span class="line">curl -o /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-7.repo</span><br><span class="line"><span class="comment">##优化阿里云的源（删除多余的baseurl） </span></span><br><span class="line">[root@localhost ~]<span class="comment"># vi /etc/yum.repos.d/CentOS-Base.repo</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#安装基础命令和环境 </span></span><br><span class="line">yum install net-tools vim tree htop iftop gcc gcc-c++ glibc iotop lrzsz sl wget unzip telnet nmap nc psmisc dos2unix bash-completion bash-completion-extra sysstat rsync nfs- utils httpd-tools -y</span><br><span class="line"></span><br><span class="line"><span class="comment">#关闭防火墙 </span></span><br><span class="line"><span class="comment">##关闭防火墙服务 </span></span><br><span class="line">[root@localhost ~]<span class="comment"># systemctl stop firewalld </span></span><br><span class="line"><span class="comment">##取消防火墙开机自启 </span></span><br><span class="line">[root@localhost ~]<span class="comment"># systemctl disable firewalld</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#关闭selinux </span></span><br><span class="line"><span class="comment">##查看selinux </span></span><br><span class="line">[root@localhost ~]<span class="comment"># getenforce Enforcing </span></span><br><span class="line"><span class="comment">##开启状态 </span></span><br><span class="line"><span class="comment">##临时关闭 </span></span><br><span class="line">[root@localhost ~]<span class="comment"># setenforce 0 </span></span><br><span class="line"><span class="comment">##永久关闭 </span></span><br><span class="line">[root@localhost ~]<span class="comment"># vim /etc/sysconfig/selinux SELINUX=enfocing =&gt; SELINUX=disabled</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#优化文件描述符 </span></span><br><span class="line"><span class="comment">##查看文件描述 </span></span><br><span class="line">[root@lb01 ~]<span class="comment"># ulimit -n 65535 </span></span><br><span class="line">[root@lb01 ~]<span class="comment"># ulimit -a </span></span><br><span class="line"><span class="comment">##设置文件描述符为65535 </span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'* - nofile 65535'</span> &gt;&gt; /etc/security/limits.conf</span><br><span class="line"></span><br><span class="line"><span class="comment">#修改主机脚本</span></span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">read</span> -p <span class="string">"Please input HOSTNAME："</span> h</span><br><span class="line"><span class="built_in">read</span> -p <span class="string">"Please input IP："</span> IP</span><br><span class="line"></span><br><span class="line">hostnamectl <span class="built_in">set</span>-hostname <span class="variable">$h</span></span><br><span class="line">sed -i <span class="string">"s#100#<span class="variable">$IP</span>#g"</span> /etc/sysconfig/network-scripts/ifcfg-eth&#123;0,1&#125;</span><br></pre></td></tr></table></figure>

<h2 id="机器准备"><a href="#机器准备" class="headerlink" title="机器准备"></a>机器准备</h2><table>
<thead>
<tr>
<th align="center">外网IP</th>
<th align="center">内网IP</th>
<th align="center">主机名</th>
</tr>
</thead>
<tbody><tr>
<td align="center">10.0.0.5</td>
<td align="center">172.16.1.5</td>
<td align="center">lb01</td>
</tr>
<tr>
<td align="center">10.0.0.6</td>
<td align="center">172.16.1.6</td>
<td align="center">lb02</td>
</tr>
<tr>
<td align="center">10.0.0.7</td>
<td align="center">172.16.1.7</td>
<td align="center">web01</td>
</tr>
<tr>
<td align="center">10.0.0.8</td>
<td align="center">172.16.1.8</td>
<td align="center">web02</td>
</tr>
<tr>
<td align="center">10.0.0.9</td>
<td align="center">172.16.1.9</td>
<td align="center">web03</td>
</tr>
<tr>
<td align="center">10.0.0.31</td>
<td align="center">172.16.1.31</td>
<td align="center">nfs</td>
</tr>
<tr>
<td align="center">10.0.0.41</td>
<td align="center">172.16.1.41</td>
<td align="center">backup</td>
</tr>
<tr>
<td align="center">10.0.0.51</td>
<td align="center">172.16.1.51</td>
<td align="center">db01</td>
</tr>
<tr>
<td align="center">10.0.0.61</td>
<td align="center">172.16.1.61</td>
<td align="center">m01</td>
</tr>
<tr>
<td align="center">10.0.0.71</td>
<td align="center">172.16.1.71</td>
<td align="center">zabbix</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>SRE</category>
      </categories>
      <tags>
        <tag>Linxu基础</tag>
      </tags>
  </entry>
  <entry>
    <title>[Linux持续集成]</title>
    <url>/2019/05/20/Linux%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/</url>
    <content><![CDATA[<p>1.Shell脚本</p>
<p>2.MySQL数据库</p>
<p>3.Zabbix监控</p>
<p>4.CICD持续集成</p>
<p>5.Redis数据库</p>
<p>6.ELK监控</p>
]]></content>
      <categories>
        <category>SRE</category>
      </categories>
      <tags>
        <tag>Linxu持续集成</tag>
      </tags>
  </entry>
  <entry>
    <title>[API的使用]</title>
    <url>/2020/06/21/API%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="一-通用命令"><a href="#一-通用命令" class="headerlink" title="一 通用命令"></a>一 通用命令</h2><h3 id="1-1-通用命令"><a href="#1-1-通用命令" class="headerlink" title="1.1 通用命令"></a>1.1 通用命令</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">####1-keys </span></span><br><span class="line"><span class="comment">#打印出所有key</span></span><br><span class="line">keys * </span><br><span class="line"><span class="comment">#打印出所有以he开头的key</span></span><br><span class="line">keys he*</span><br><span class="line"><span class="comment">#打印出所有以he开头，第三个字母是h到l的范围</span></span><br><span class="line">keys he[h-l]</span><br><span class="line"><span class="comment">#三位长度，以he开头，？表示任意一位</span></span><br><span class="line">keys he？</span><br><span class="line"><span class="comment">#keys命令一般不在生产环境中使用，生产环境key很多，时间复杂度为o(n),用scan命令</span></span><br><span class="line"></span><br><span class="line"><span class="comment">####2-dbsize   计算key的总数</span></span><br><span class="line">dbsize <span class="comment">#redis内置了计数器，插入删除值该计数器会更改，所以可以在生产环境使用，时间复杂度是o(1)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">###3-exists key 时间复杂度o(1)</span></span><br><span class="line"><span class="comment">#设置a</span></span><br><span class="line">set a b</span><br><span class="line"><span class="comment">#查看a是否存在</span></span><br><span class="line">exists a</span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"><span class="comment">#存在返回1 不存在返回0</span></span><br><span class="line"><span class="comment">###4-del key  时间复杂度o(1)</span></span><br><span class="line">删除成功返回<span class="number">1</span>，key不存在返回<span class="number">0</span></span><br><span class="line"><span class="comment">###5-expire key seconds  时间复杂度o(1)</span></span><br><span class="line">expire name <span class="number">3</span> <span class="comment">#3s 过期</span></span><br><span class="line">ttl name  <span class="comment">#查看name还有多长时间过期</span></span><br><span class="line">persist name <span class="comment">#去掉name的过期时间</span></span><br><span class="line"><span class="comment">###6-type key  时间复杂度o(1)</span></span><br><span class="line">type name <span class="comment">#查看name类型，返回string</span></span><br></pre></td></tr></table></figure>

<h3 id="1-2-数据结构和内部编码"><a href="#1-2-数据结构和内部编码" class="headerlink" title="1.2 数据结构和内部编码"></a>1.2 数据结构和内部编码</h3><p><img src="https://tva1.sinaimg.cn/large/006tNbRwgy1ga7mt5tzjnj30q20pgn5n.jpg" alt="image-20191224110401405"></p>
<h3 id="1-3-单线程架构"><a href="#1-3-单线程架构" class="headerlink" title="1.3 单线程架构"></a>1.3 单线程架构</h3><h4 id="1-3-1-单线程架构，"><a href="#1-3-1-单线程架构，" class="headerlink" title="1.3.1 单线程架构，"></a>1.3.1 单线程架构，</h4><p>一个瞬间只会执行一条命令</p>
<p><img src="https://tva1.sinaimg.cn/large/006tNbRwgy1ga7mzj7rpoj30wu0egq5t.jpg" alt="image-20191224111010657"></p>
<h4 id="1-3-2-单线程为什么这么快"><a href="#1-3-2-单线程为什么这么快" class="headerlink" title="1.3.2 单线程为什么这么快"></a>1.3.2 单线程为什么这么快</h4><p>1 纯内存</p>
<p>2 非阻塞IO （epoll），自身实现了事件处理，不在网络io上浪费过多时间</p>
<p>3 避免线程间切换和竞态消耗</p>
<h4 id="1-3-3-注意"><a href="#1-3-3-注意" class="headerlink" title="1.3.3 注意"></a>1.3.3 注意</h4><p>1 一次只运行一条命令</p>
<p>2 拒绝长慢命令</p>
<p>​    -keys，flushall,flushdb,慢的lua脚本，mutil/exec，operate，big value</p>
<p>3 其实不是单线程（在做持久化是另外的线程）</p>
<p>​    -fysnc file descriptor</p>
<p>​    -close file descriptor</p>
<h2 id="二-字符串类型"><a href="#二-字符串类型" class="headerlink" title="二 字符串类型"></a>二 字符串类型</h2><h3 id="2-1-字符串键值结构"><a href="#2-1-字符串键值结构" class="headerlink" title="2.1 字符串键值结构"></a>2.1 字符串键值结构</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">key          value</span><br><span class="line">hello        world      可以很复杂，如json格式字符串</span><br><span class="line">counter      <span class="number">1</span>          数字类型</span><br><span class="line">bits         <span class="number">10101010</span>   二进制（位图）</span><br><span class="line"><span class="comment">#字符串value不能大于512m，一般建议100k以内</span></span><br><span class="line"><span class="comment">#用于缓存，计数器，分布式锁...</span></span><br></pre></td></tr></table></figure>

<h3 id="2-2-常用命令"><a href="#2-2-常用命令" class="headerlink" title="2.2 常用命令"></a>2.2 常用命令</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">###1---基本使用get，set，del</span></span><br><span class="line">get name       <span class="comment">#时间复杂度 o(1)</span></span><br><span class="line">set name lqz   <span class="comment">#时间复杂度 o(1)</span></span><br><span class="line"><span class="keyword">del</span> name       <span class="comment">#时间复杂度 o(1)</span></span><br><span class="line"><span class="comment">###2---其他使用incr,decr,incrby,decrby</span></span><br><span class="line">incr age  <span class="comment">#对age这个key的value值自增1</span></span><br><span class="line">decr age  <span class="comment">#对age这个key的value值自减1</span></span><br><span class="line">incrby age <span class="number">10</span>  <span class="comment">#对age这个key的value值增加10</span></span><br><span class="line">decrby age <span class="number">10</span>  <span class="comment">#对age这个key的value值减10</span></span><br><span class="line"><span class="comment">#统计网站访问量（单线程无竞争，天然适合做计数器）</span></span><br><span class="line"><span class="comment">#缓存mysql的信息（json格式）</span></span><br><span class="line"><span class="comment">#分布式id生成（多个机器同时并发着生成，不会重复）</span></span><br><span class="line"><span class="comment">###3---set，setnx，setxx</span></span><br><span class="line">set name lqz  <span class="comment">#不管key是否存在，都设置 </span></span><br><span class="line">setnx name lqz <span class="comment">#key不存在时才设置（新增操作）</span></span><br><span class="line">set name lqz nx <span class="comment">#同上</span></span><br><span class="line">set name lqz xx <span class="comment">#key存在，才设置（更新操作）</span></span><br><span class="line"><span class="comment">###4---mget mset</span></span><br><span class="line">mget key1 key2 key3     <span class="comment">#批量获取key1，key2.。。时间复杂度o(n)</span></span><br><span class="line">mset key1 value1 key2 value2 key3 value3    <span class="comment">#批量设置时间复杂度o(n)</span></span><br><span class="line"><span class="comment">#n次get和mget的区别</span></span><br><span class="line"><span class="comment">#n次get时间=n次命令时间+n次网络时间</span></span><br><span class="line"><span class="comment">#mget时间=1次网络时间+n次命令时间</span></span><br><span class="line"><span class="comment">###5---其他：getset，append，strlen</span></span><br><span class="line">getset name lqznb <span class="comment">#设置新值并返回旧值 时间复杂度o(1)</span></span><br><span class="line">append name <span class="number">666</span> <span class="comment">#将value追加到旧的value 时间复杂度o(1)</span></span><br><span class="line">strlen name  <span class="comment">#计算字符串长度(注意中文)  时间复杂度o(1)</span></span><br><span class="line"><span class="comment">###6---其他：incrybyfloat,getrange,setrange</span></span><br><span class="line">increbyfloat age <span class="number">3.5</span>  <span class="comment">#为age自增3.5，传负值表示自减 时间复杂度o(1)</span></span><br><span class="line">getrange key start end <span class="comment">#获取字符串制定下标所有的值  时间复杂度o(1)</span></span><br><span class="line">setrange key index value <span class="comment">#从指定index开始设置value值  时间复杂度o(1)</span></span><br></pre></td></tr></table></figure>



<h2 id="三-哈希类型"><a href="#三-哈希类型" class="headerlink" title="三 哈希类型"></a>三 哈希类型</h2><p>###3.1 哈希值结构</p>
<p><img src="https://tva1.sinaimg.cn/large/006tNbRwgy1ga7otagi3lj30p00f2q8l.jpg" alt="image-20191224121323414"></p>
<h3 id="3-2-重要api"><a href="#3-2-重要api" class="headerlink" title="3.2 重要api"></a>3.2 重要api</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">###1---hget,hset,hdel</span></span><br><span class="line">hget key field  <span class="comment">#获取hash key对应的field的value 时间复杂度为 o(1)</span></span><br><span class="line">hset key field value <span class="comment">#设置hash key对应的field的value值 时间复杂度为 o(1)</span></span><br><span class="line">hdel key field <span class="comment">#删除hash key对应的field的值 时间复杂度为 o(1)</span></span><br><span class="line"><span class="comment">#测试</span></span><br><span class="line">hset user:<span class="number">1</span>:info age <span class="number">23</span></span><br><span class="line">hget user:<span class="number">1</span>:info ag</span><br><span class="line">hset user:<span class="number">1</span>:info name lqz</span><br><span class="line">hgetall user:<span class="number">1</span>:info</span><br><span class="line">hdel user:<span class="number">1</span>:info age</span><br><span class="line"><span class="comment">###2---hexists,hlen</span></span><br><span class="line">hexists key field  <span class="comment">#判断hash key 是否存在field 时间复杂度为 o(1)</span></span><br><span class="line">hlen key   <span class="comment">#获取hash key field的数量  时间复杂度为 o(1)</span></span><br><span class="line">hexists user:<span class="number">1</span>:info name</span><br><span class="line">hlen user:<span class="number">1</span>:info  <span class="comment">#返回数量</span></span><br><span class="line">        </span><br><span class="line"><span class="comment">###3---hmget，hmset</span></span><br><span class="line">hmget key field1 field2 ...fieldN  <span class="comment">#批量获取hash key 的一批field对应的值  时间复杂度是o(n)</span></span><br><span class="line">hmset key field1 value1 field2 value2  <span class="comment">#批量设置hash key的一批field value 时间复杂度是o(n)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">###4--hgetall,hvals，hkeys</span></span><br><span class="line">hgetall key  <span class="comment">#返回hash key 对应的所有field和value  时间复杂度是o(n)</span></span><br><span class="line">hvals key   <span class="comment">#返回hash key 对应的所有field的value  时间复杂度是o(n)</span></span><br><span class="line">hkeys key   <span class="comment">#返回hash key对应的所有field  时间复杂度是o(n)</span></span><br><span class="line"><span class="comment">###小心使用hgetall</span></span><br><span class="line"><span class="comment">##1 计算网站每个用户主页的访问量</span></span><br><span class="line">hincrby user:<span class="number">1</span>:info pageview count</span><br><span class="line"><span class="comment">##2 缓存mysql的信息，直接设置hash格式</span></span><br></pre></td></tr></table></figure>



<h3 id="3-3-hash-vs-string"><a href="#3-3-hash-vs-string" class="headerlink" title="3.3 hash vs string"></a>3.3 hash vs string</h3><h4 id="3-3-1相似的api"><a href="#3-3-1相似的api" class="headerlink" title="3.3.1相似的api"></a>3.3.1相似的api</h4><table>
<thead>
<tr>
<th>get</th>
<th>hget</th>
</tr>
</thead>
<tbody><tr>
<td>set /sentnx</td>
<td>hset  hsetnx</td>
</tr>
<tr>
<td>del</td>
<td>hdel</td>
</tr>
<tr>
<td>incr incrby dear decrby</td>
<td>hincrby</td>
</tr>
<tr>
<td>mset</td>
<td>hmset</td>
</tr>
<tr>
<td>mget</td>
<td>hmget</td>
</tr>
</tbody></table>
<h4 id="3-3-2-缓存三种方案"><a href="#3-3-2-缓存三种方案" class="headerlink" title="3.3.2 缓存三种方案"></a>3.3.2 缓存三种方案</h4><p>直接json格式字符串</p>
<p>每个字段一个key</p>
<p>使用hash操作</p>
<h3 id="3-4-其他操作"><a href="#3-4-其他操作" class="headerlink" title="3.4 其他操作"></a>3.4 其他操作</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">##其他操作 hsetnx，hincrby，hincrbyfloat</span></span><br><span class="line">hsetnx key field value <span class="comment">#设置hash key对应field的value（如果field已存在，则失败），时间复杂度o(1)</span></span><br><span class="line">hincrby key field intCounter <span class="comment">#hash key 对英的field的value自增intCounter 时间复杂度o(1)</span></span><br><span class="line">hincrbyfloat key field floatCounter <span class="comment">#hincrby 浮点数 时间复杂度o(1)</span></span><br></pre></td></tr></table></figure>

<h2 id="四-列表类型"><a href="#四-列表类型" class="headerlink" title="四 列表类型"></a>四 列表类型</h2><h3 id="4-1-列表特点"><a href="#4-1-列表特点" class="headerlink" title="4.1 列表特点"></a>4.1 列表特点</h3><p>有序队列，可以从左侧添加，右侧添加，可以重复，可以从左右两边弹出</p>
<h4 id="4-2-API操作"><a href="#4-2-API操作" class="headerlink" title="4.2 API操作"></a>4.2 API操作</h4><h5 id="4-2-1-插入操作"><a href="#4-2-1-插入操作" class="headerlink" title="4.2.1 插入操作"></a>4.2.1 插入操作</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#rpush 从右侧插入</span></span><br><span class="line">rpush key value1 value2 ...valueN  <span class="comment">#时间复杂度为o(1~n)</span></span><br><span class="line"><span class="comment">#lpush 从左侧插入</span></span><br><span class="line"><span class="comment">#linsert</span></span><br><span class="line">linsert key before|after value newValue   <span class="comment">#从元素value的前或后插入newValue 时间复杂度o(n) ，需要遍历列表</span></span><br><span class="line">linsert listkey before b java</span><br><span class="line">linsert listkey after b php</span><br></pre></td></tr></table></figure>

<h5 id="4-2-2-删除操作"><a href="#4-2-2-删除操作" class="headerlink" title="4.2.2 删除操作"></a>4.2.2 删除操作</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">lpop key <span class="comment">#从列表左侧弹出一个item 时间复杂度o(1)</span></span><br><span class="line"></span><br><span class="line">rpop key <span class="comment">#从列表右侧弹出一个item 时间复杂度o(1)</span></span><br><span class="line"></span><br><span class="line">lrem key count value</span><br><span class="line"><span class="comment">#根据count值，从列表中删除所有value相同的项 时间复杂度o(n)</span></span><br><span class="line"><span class="number">1</span> count&gt;<span class="number">0</span> 从左到右，删除最多count个value相等的项</span><br><span class="line"><span class="number">2</span> count&lt;<span class="number">0</span> 从右向左，删除最多 Math.abs(count)个value相等的项</span><br><span class="line"><span class="number">3</span> count=<span class="number">0</span> 删除所有value相等的项</span><br><span class="line">lrem listkey <span class="number">0</span> a <span class="comment">#删除列表中所有值a</span></span><br><span class="line">lrem listkey <span class="number">-1</span> c <span class="comment">#从右侧删除1个c</span></span><br><span class="line"></span><br><span class="line">ltrim key start end <span class="comment">#按照索引范围修剪列表 o(n)</span></span><br><span class="line">ltrim listkey <span class="number">1</span> <span class="number">4</span> <span class="comment">#只保留下表1--4的元素</span></span><br></pre></td></tr></table></figure>

<h4 id="4-2-3-查询操作"><a href="#4-2-3-查询操作" class="headerlink" title="4.2.3 查询操作"></a>4.2.3 查询操作</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">lrange key start end <span class="comment">#包含end获取列表指定索引范围所有item  o(n)</span></span><br><span class="line">lrange listkey <span class="number">0</span> <span class="number">2</span></span><br><span class="line">lrange listkey <span class="number">1</span> <span class="number">-1</span> <span class="comment">#获取第一个位置到倒数第一个位置的元素</span></span><br><span class="line"></span><br><span class="line">lindex key index <span class="comment">#获取列表指定索引的item  o(n)</span></span><br><span class="line">lindex listkey <span class="number">0</span></span><br><span class="line">lindex listkey <span class="number">-1</span></span><br><span class="line"></span><br><span class="line">llen key <span class="comment">#获取列表长度</span></span><br></pre></td></tr></table></figure>

<h4 id="4-2-3-修改操作"><a href="#4-2-3-修改操作" class="headerlink" title="4.2.3 修改操作"></a>4.2.3 修改操作</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">lset key index newValue <span class="comment">#设置列表指定索引值为newValue o(n)</span></span><br><span class="line">lset listkey <span class="number">2</span> ppp <span class="comment">#把第二个位置设为ppp</span></span><br></pre></td></tr></table></figure>



<h3 id="4-3-实战"><a href="#4-3-实战" class="headerlink" title="4.3 实战"></a>4.3 实战</h3><p>实现timeLine功能，时间轴，微博关注的人，按时间轴排列，在列表中放入关注人的微博的即可</p>
<h3 id="4-4-其他操作"><a href="#4-4-其他操作" class="headerlink" title="4.4 其他操作"></a>4.4 其他操作</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">blpop key timeout <span class="comment">#lpop的阻塞版，timeout是阻塞超时时间，timeout=0为拥有不阻塞 o(1)</span></span><br><span class="line">brpop key timeout <span class="comment">#rpop的阻塞版，timeout是阻塞超时时间，timeout=0为拥有不阻塞 o(1)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#要实现栈的功能</span></span><br><span class="line">lpush+lpop</span><br><span class="line"><span class="comment">#实现队列功能</span></span><br><span class="line">lpush+rpop</span><br><span class="line"><span class="comment">#固定大小的列表</span></span><br><span class="line">lpush+ltrim</span><br><span class="line"><span class="comment">#消息队列</span></span><br><span class="line">lpush+brpop</span><br></pre></td></tr></table></figure>

<h2 id="五-集合类型"><a href="#五-集合类型" class="headerlink" title="五 集合类型"></a>五 集合类型</h2><h3 id="5-1-特点"><a href="#5-1-特点" class="headerlink" title="5.1 特点"></a>5.1 特点</h3><p>无序，无重复，集合间操作（交叉并补） </p>
<h3 id="5-2-API操作"><a href="#5-2-API操作" class="headerlink" title="5.2 API操作"></a>5.2 API操作</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sadd key element <span class="comment">#向集合key添加element（如果element存在，添加失败） o(1)</span></span><br><span class="line"></span><br><span class="line">srem key element <span class="comment">#从集合中的element移除掉 o(1)</span></span><br><span class="line"></span><br><span class="line">scard key <span class="comment">#计算集合大小</span></span><br><span class="line"></span><br><span class="line">sismember key element <span class="comment">#判断element是否在集合中</span></span><br><span class="line"></span><br><span class="line">srandmember key count <span class="comment">#从集合中随机取出count个元素，不会破坏集合中的元素</span></span><br><span class="line"></span><br><span class="line">spop key <span class="comment">#从集合中随机弹出一个元素</span></span><br><span class="line"></span><br><span class="line">smembers key <span class="comment">#获取集合中所有元素 ，无序，小心使用，会阻塞住 </span></span><br><span class="line"></span><br><span class="line">sdiff user:<span class="number">1</span>:follow user:<span class="number">2</span>:follow  <span class="comment">#计算user:1:follow和user:2:follow的差集</span></span><br><span class="line"></span><br><span class="line">sinter user:<span class="number">1</span>:follow user:<span class="number">2</span>:follow  <span class="comment">#计算user:1:follow和user:2:follow的交集</span></span><br><span class="line">          </span><br><span class="line">sunion user:<span class="number">1</span>:follow user:<span class="number">2</span>:follow  <span class="comment">#计算user:1:follow和user:2:follow的并集</span></span><br><span class="line">                </span><br><span class="line">sdiff|sinter|suion + store destkey... <span class="comment">#将差集，交集，并集结果保存在destkey集合中</span></span><br></pre></td></tr></table></figure>

<h3 id="5-3-实战"><a href="#5-3-实战" class="headerlink" title="5.3 实战"></a>5.3 实战</h3><p>抽奖系统 ：通过spop来弹出用户的id，活动取消，直接删除</p>
<p>点赞，点踩，喜欢等，用户如果点了赞，就把用户id放到该条记录的集合中</p>
<p>标签：给用户/文章等添加标签，sadd user:1:tags 标签1 标签2 标签3</p>
<p>给标签添加用户，关注该标签的人有哪些</p>
<p>共同好友：集合间的操作</p>
<h4 id="5-4-总结"><a href="#5-4-总结" class="headerlink" title="5.4 总结"></a>5.4 总结</h4><p>sadd:可以做标签相关</p>
<p>spop/srandmember:可以做随机数相关</p>
<p>sadd/sinter：社交相关</p>
<h2 id="六-有序集合类型"><a href="#六-有序集合类型" class="headerlink" title="六 有序集合类型"></a>六 有序集合类型</h2><h3 id="6-1-特点"><a href="#6-1-特点" class="headerlink" title="6.1 特点"></a>6.1 特点</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#有一个分值字段，来保证顺序</span></span><br><span class="line">key                  score                value</span><br><span class="line">user:ranking           <span class="number">1</span>                   lqz</span><br><span class="line">user:ranking           <span class="number">99</span>                  lqz2</span><br><span class="line">user:ranking           <span class="number">88</span>                  lqz3</span><br><span class="line"><span class="comment">#集合有序集合</span></span><br><span class="line">集合：无重复元素，无序，element</span><br><span class="line">有序集合：无重复元素，有序，element+score</span><br><span class="line"><span class="comment">#列表和有序集合</span></span><br><span class="line">列表：可以重复，有序，element</span><br><span class="line">有序集合：无重复元素，有序，element+score</span><br></pre></td></tr></table></figure>

<h3 id="6-2-API使用"><a href="#6-2-API使用" class="headerlink" title="6.2 API使用"></a>6.2 API使用</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">zadd key score element <span class="comment">#score可以重复，可以多个同时添加，element不能重复 o(logN) </span></span><br><span class="line"></span><br><span class="line">zrem key element <span class="comment">#删除元素，可以多个同时删除 o(1)</span></span><br><span class="line"></span><br><span class="line">zscore key element <span class="comment">#获取元素的分数 o(1)</span></span><br><span class="line"></span><br><span class="line">zincrby key increScore element <span class="comment">#增加或减少元素的分数  o(1)</span></span><br><span class="line"></span><br><span class="line">zcard key <span class="comment">#返回元素总个数 o(1)</span></span><br><span class="line"></span><br><span class="line">zrank key element <span class="comment">#返回element元素的排名（从小到大排）</span></span><br><span class="line"></span><br><span class="line">zrange key <span class="number">0</span> <span class="number">-1</span> <span class="comment">#返回排名，不带分数  o(log(n)+m) n是元素个数，m是要获取的值</span></span><br><span class="line">zrange player:rank <span class="number">0</span> <span class="number">-1</span> withscores <span class="comment">#返回排名，带分数</span></span><br><span class="line"></span><br><span class="line">zrangebyscore key minScore maxScore <span class="comment">#返回指定分数范围内的升序元素 o(log(n)+m) n是元素个数，m是要获取的值</span></span><br><span class="line">zrangebyscore user:<span class="number">1</span>:ranking <span class="number">90</span> <span class="number">210</span> withscores <span class="comment">#获取90分到210分的元素</span></span><br><span class="line"></span><br><span class="line">zcount key minScore maxScore <span class="comment">#返回有序集合内在指定分数范围内的个数 o(log(n)+m)</span></span><br><span class="line"></span><br><span class="line">zremrangebyrank key start end <span class="comment">#删除指定排名内的升序元素 o(log(n)+m)</span></span><br><span class="line">zremrangebyrank user:<span class="number">1</span>:rangking <span class="number">1</span> <span class="number">2</span> <span class="comment">#删除升序排名中1到2的元素</span></span><br><span class="line">        </span><br><span class="line">zremrangebyscore key minScore maxScore <span class="comment">#删除指定分数内的升序元素 o(log(n)+m)</span></span><br><span class="line">zremrangebyscore user:<span class="number">1</span>:ranking <span class="number">90</span> <span class="number">210</span> <span class="comment">#删除分数90到210之间的元素</span></span><br></pre></td></tr></table></figure>

<h3 id="6-3-实战"><a href="#6-3-实战" class="headerlink" title="6.3 实战"></a>6.3 实战</h3><p>排行榜：音乐排行榜，销售榜，关注榜，游戏排行榜</p>
<h3 id="6-4-其他操作"><a href="#6-4-其他操作" class="headerlink" title="6.4 其他操作"></a>6.4 其他操作</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">zrevrank <span class="comment">#从高到低排序</span></span><br><span class="line">zrevrange <span class="comment">#从高到低排序取一定范围</span></span><br><span class="line">zrevrangebyscore <span class="comment">#返回指定分数范围内的降序元素</span></span><br><span class="line">zinterstore <span class="comment">#对两个有序集合交集</span></span><br><span class="line">zunionstore <span class="comment">#对两个有序集合求并集</span></span><br></pre></td></tr></table></figure>

<h3 id="6-5-总结"><a href="#6-5-总结" class="headerlink" title="6.5 总结"></a>6.5 总结</h3><table>
<thead>
<tr>
<th>操作类型</th>
<th>命令</th>
</tr>
</thead>
<tbody><tr>
<td>基本操作</td>
<td>zadd/  zrem/  zcard/  zincrby/  zscore</td>
</tr>
<tr>
<td>范围操作</td>
<td>zrange/  zrangebyscore/  zcount/  zremrangebyrank</td>
</tr>
<tr>
<td>集合操作</td>
<td>zunionstore/  zinterstore</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>[Ajax操作]</title>
    <url>/2020/02/15/Ajax%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h3 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">异步提交</span></span><br><span class="line"><span class="string">局部刷新</span></span><br><span class="line"><span class="string">例子:github注册</span></span><br><span class="line"><span class="string">	动态获取用户名实时的跟后端确认并实时展示的前端(局部刷新)</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">朝发送请求的方式</span></span><br><span class="line"><span class="string">	1.浏览器地址栏直接输入url回车					 GET请求</span></span><br><span class="line"><span class="string">	2.a标签href属性									GET请求</span></span><br><span class="line"><span class="string">	3.form表单										GET请求/POST请求</span></span><br><span class="line"><span class="string">	4.ajax											GET请求/POST请求	</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">AJAX 不是新的编程语言，而是一种使用现有标准的新方法(比较装饰器)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">AJAX 最大的优点是在不重新加载整个页面的情况下，可以与服务器交换数据并更新部分网页内容。（这一特点给用户的感受是在不知不觉中完成请求和响应过程）</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Ajax我们只学习jQuery封装之后的版本(不学原生的 原生的复杂并且在实际项目中也一般不用)</span></span><br><span class="line"><span class="string">所以我们在前端页面使用ajax的时候需要确保导入了jQuery</span></span><br><span class="line"><span class="string">ps:并不只有jQuery能够实现ajax，其他的框架也可以 但是换汤不换药 原理是一样的</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<h3 id="小例子"><a href="#小例子" class="headerlink" title="小例子"></a>小例子</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">页面上有三个input框</span></span><br><span class="line"><span class="string">	在前两个框中输入数字 点击按钮 朝后端发送ajax请求</span></span><br><span class="line"><span class="string">	后端计算出结果 再返回给前端动态展示的到第三个input框中</span></span><br><span class="line"><span class="string">	(整个过程页面不准有刷新,也不能在前端计算)</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">$(<span class="string">'#btn'</span>).click(function () &#123;</span><br><span class="line">        // 朝后端发送ajax请求</span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            // <span class="number">1.</span>指定朝哪个后端发送ajax请求</span><br><span class="line">            url:<span class="string">''</span>, // 不写就是朝当前地址提交</span><br><span class="line">            // <span class="number">2.</span>请求方式</span><br><span class="line">            type:<span class="string">'post'</span>,  // 不指定默认就是get 都是小写</span><br><span class="line">            // <span class="number">3.</span>数据</span><br><span class="line">            &#123;<span class="comment">#data:&#123;'username':'jason','password':123&#125;,#&#125;</span></span><br><span class="line">            data:&#123;<span class="string">'i1'</span>:$(<span class="string">'#d1'</span>).val(),<span class="string">'i2'</span>:$(<span class="string">'#d2'</span>).val()&#125;,</span><br><span class="line">            // <span class="number">4.</span>回调函数:当后端给你返回结果的时候会自动触发 args接受后端的返回结果</span><br><span class="line">            success:function (args) &#123;</span><br><span class="line">                &#123;<span class="comment">#alert(args)  // 通过DOM操作动态渲染到第三个input里面#&#125;</span></span><br><span class="line">                &#123;<span class="comment">#$('#d3').val(args)#&#125;</span></span><br><span class="line">                console.log(typeof args)</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">              </span><br><span class="line">              </span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">针对后端如果是用HttpResponse返回的数据 回调函数不会自动帮你反序列化</span></span><br><span class="line"><span class="string">如果后端直接用的是JsonResponse返回的数据 回调函数会自动帮你反序列化</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">HttpResponse解决方式</span></span><br><span class="line"><span class="string">	1.自己在前端利用JSON.parse()</span></span><br><span class="line"><span class="string">	2.在ajax里面配置一个参数</span></span><br><span class="line"><span class="string">			(后面再讲)</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<h3 id="前后端传输数据的编码格式-contentType"><a href="#前后端传输数据的编码格式-contentType" class="headerlink" title="前后端传输数据的编码格式(contentType)"></a>前后端传输数据的编码格式(contentType)</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 我们主要研究post请求数据的编码格式</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">get请求数据就是直接放在url后面的</span></span><br><span class="line"><span class="string">url?username=jason&amp;password=123</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以朝后端发送post请求的方式</span></span><br><span class="line">	<span class="string">"""</span></span><br><span class="line"><span class="string">	1.form表单</span></span><br><span class="line"><span class="string">	2.ajax请求</span></span><br><span class="line"><span class="string">	"""</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">前后端传输数据的编码格式</span></span><br><span class="line"><span class="string">	urlencoded</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">	formdata</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">	json</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment"># 研究form表单</span></span><br><span class="line">	默认的数据编码格式是urlencoded</span><br><span class="line">    数据格式:username=jason&amp;password=<span class="number">123</span></span><br><span class="line">    django后端针对符合urlencoded编码格式的数据都会自动帮你解析封装到request.POST中</span><br><span class="line">  	username=jason&amp;password=<span class="number">123</span>	&gt;&gt;&gt; request.POST</span><br><span class="line">  </span><br><span class="line">    如果你把编码格式改成formdata，那么针对普通的键值对还是解析到request.POST中而将文件解析到request.FILES中</span><br><span class="line">  </span><br><span class="line">  form表单是没有办法发送json格式数据的</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="comment"># 研究ajax</span></span><br><span class="line">	默认的编码格式也是urlencoded</span><br><span class="line">  数据格式:username=jason&amp;age=<span class="number">20</span></span><br><span class="line">	django后端针对符合urlencoded编码格式的数据都会自动帮你解析封装到request.POST中</span><br><span class="line">  	username=jason&amp;age=<span class="number">20</span>	&gt;&gt;&gt; request.POST</span><br></pre></td></tr></table></figure>

<h3 id="ajax发送json格式数据"><a href="#ajax发送json格式数据" class="headerlink" title="ajax发送json格式数据"></a>ajax发送json格式数据</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">前后端传输数据的时候一定要确保编码格式跟数据真正的格式是一致的</span></span><br><span class="line"><span class="string">不要骗人家!!!</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#123;"username":"jason","age":25&#125;  </span></span><br><span class="line"><span class="string">	在request.POST里面肯定找不到</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">	django针对json格式的数据 不会做任何的处理 </span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">request对象方法补充</span></span><br><span class="line"><span class="string">	request.is_ajax()</span></span><br><span class="line"><span class="string">		判断当前请求是否是ajax请求 返回布尔值</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    $(<span class="string">'#d1'</span>).click(function () &#123;</span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            url:<span class="string">''</span>,</span><br><span class="line">            type:<span class="string">'post'</span>,</span><br><span class="line">            data:JSON.stringify(&#123;<span class="string">'username'</span>:<span class="string">'jason'</span>,<span class="string">'age'</span>:<span class="number">25</span>&#125;),</span><br><span class="line">            contentType:<span class="string">'application/json'</span>,  // 指定编码格式</span><br><span class="line">            success:function () &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">        json_bytes = request.body</span><br><span class="line">        json_str = json_bytes.decode(<span class="string">'utf-8'</span>)</span><br><span class="line">        json_dict = json.loads(json_str)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># json.loads括号内如果传入了一个二进制格式的数据那么内部自动解码再反序列化</span></span><br><span class="line">        json_dict = json.loads(json_bytes)</span><br><span class="line">        </span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">ajax发送json格式数据需要注意点</span></span><br><span class="line"><span class="string">	1.contentType参数指定成:application/json</span></span><br><span class="line"><span class="string">	2.数据是真正的json格式数据</span></span><br><span class="line"><span class="string">	3.django后端不会帮你处理json格式数据需要你自己去request.body获取并处理</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<h3 id="ajax发送文件"><a href="#ajax发送文件" class="headerlink" title="ajax发送文件"></a>ajax发送文件</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">ajax发送文件需要借助于js内置对象FormData</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    // 点击按钮朝后端发送普通键值对和文件数据</span><br><span class="line">    $(<span class="string">'#d4'</span>).on(<span class="string">'click'</span>,function () &#123;</span><br><span class="line">        // <span class="number">1</span> 需要先利用FormData内置对象</span><br><span class="line">        let formDateObj = new FormData();</span><br><span class="line">        // <span class="number">2</span> 添加普通的键值对</span><br><span class="line">        formDateObj.append(<span class="string">'username'</span>,$(<span class="string">'#d1'</span>).val());</span><br><span class="line">        formDateObj.append(<span class="string">'password'</span>,$(<span class="string">'#d2'</span>).val());</span><br><span class="line">        // <span class="number">3</span> 添加文件对象</span><br><span class="line">        formDateObj.append(<span class="string">'myfile'</span>,$(<span class="string">'#d3'</span>)[<span class="number">0</span>].files[<span class="number">0</span>])</span><br><span class="line">        // <span class="number">4</span> 将对象基于ajax发送给后端</span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            url:<span class="string">''</span>,</span><br><span class="line">            type:<span class="string">'post'</span>,</span><br><span class="line">            data:formDateObj,  // 直接将对象放在data后面即可</span><br><span class="line"></span><br><span class="line">            // ajax发送文件必须要指定的两个参数</span><br><span class="line">            contentType:false,  // 不需使用任何编码 django后端能够自动识别formdata对象</span><br><span class="line">            processData:false,  // 告诉你的浏览器不要对你的数据进行任何处理</span><br><span class="line"></span><br><span class="line">            success:function (args) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ab_file</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> request.is_ajax():</span><br><span class="line">        <span class="keyword">if</span> request.method == <span class="string">'POST'</span>:</span><br><span class="line">            print(request.POST)</span><br><span class="line">            print(request.FILES)</span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">'ab_file.html'</span>)</span><br><span class="line">  </span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">总结:</span></span><br><span class="line"><span class="string">	1.需要利用内置对象FormData</span></span><br><span class="line"><span class="string">				// 2 添加普通的键值对</span></span><br><span class="line"><span class="string">        formDateObj.append('username',$('#d1').val());</span></span><br><span class="line"><span class="string">        formDateObj.append('password',$('#d2').val());</span></span><br><span class="line"><span class="string">        // 3 添加文件对象</span></span><br><span class="line"><span class="string">        formDateObj.append('myfile',$('#d3')[0].files[0])</span></span><br><span class="line"><span class="string">	2.需要指定两个关键性的参数</span></span><br><span class="line"><span class="string">				contentType:false,  // 不需使用任何编码 django后端能够自动识别formdata对象</span></span><br><span class="line"><span class="string">        processData:false,  // 告诉你的浏览器不要对你的数据进行任何处理</span></span><br><span class="line"><span class="string">	3.django后端能够直接识别到formdata对象并且能够将内部的普通键值自动解析并封装到request.POST中 文件数据自动解析并封装到request.FILES中</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<h3 id="django自带的序列化组件-drf做铺垫"><a href="#django自带的序列化组件-drf做铺垫" class="headerlink" title="django自带的序列化组件(drf做铺垫)"></a>django自带的序列化组件(drf做铺垫)</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">如果发现你可以直接使用MySQL但是无法使用sqlite3</span></span><br><span class="line"><span class="string">不要慌张不要恐惧 你只需要按照之前MySQL的操作将sqlite3的驱动装一下即可</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment"># 需求:在前端给我获取到后端用户表里面所有的数据 并且要是列表套字典</span></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> JsonResponse</span><br><span class="line"><span class="keyword">from</span> django.core <span class="keyword">import</span> serializers</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ab_ser</span><span class="params">(request)</span>:</span></span><br><span class="line">    user_queryset = models.User.objects.all()</span><br><span class="line">    <span class="comment"># [&#123;&#125;,&#123;&#125;,&#123;&#125;,&#123;&#125;,&#123;&#125;]</span></span><br><span class="line">    <span class="comment"># user_list = []</span></span><br><span class="line">    <span class="comment"># for user_obj in user_queryset:</span></span><br><span class="line">    <span class="comment">#     tmp = &#123;</span></span><br><span class="line">    <span class="comment">#         'pk':user_obj.pk,</span></span><br><span class="line">    <span class="comment">#         'username':user_obj.username,</span></span><br><span class="line">    <span class="comment">#         'age':user_obj.age,</span></span><br><span class="line">    <span class="comment">#         'gender':user_obj.get_gender_display()</span></span><br><span class="line">    <span class="comment">#     &#125;</span></span><br><span class="line">    <span class="comment">#     user_list.append(tmp)</span></span><br><span class="line">    <span class="comment"># return JsonResponse(user_list,safe=False)</span></span><br><span class="line">    <span class="comment"># return render(request,'ab_ser.html',locals())</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 序列化</span></span><br><span class="line">    res = serializers.serialize(<span class="string">'json'</span>,user_queryset)</span><br><span class="line">    <span class="string">"""会自动帮你将数据变成json格式的字符串 并且内部非常的全面"""</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(res)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">[</span></span><br><span class="line"><span class="string"> &#123;"pk": 1, "username": "jason", "age": 25, "gender": "male"&#125;, </span></span><br><span class="line"><span class="string"> &#123;"pk": 2, "username": "egon", "age": 31, "gender": "female"&#125;,</span></span><br><span class="line"><span class="string"> &#123;"pk": 3, "username": "kevin", "age": 32, "gender": "others"&#125;, </span></span><br><span class="line"><span class="string"> &#123;"pk": 4, "username": "tank", "age": 40, "gender": 4&#125;</span></span><br><span class="line"><span class="string"> ]</span></span><br><span class="line"><span class="string">前后端分离的项目</span></span><br><span class="line"><span class="string">    作为后端开发的你只需要写代码将数据处理好</span></span><br><span class="line"><span class="string">    能够序列化返回给前端即可 </span></span><br><span class="line"><span class="string">        再写一个接口文档 告诉前端每个字段代表的意思即可</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">[</span></span><br><span class="line"><span class="string">&#123;   "model": "app01.user", </span></span><br><span class="line"><span class="string">    "pk": 1, </span></span><br><span class="line"><span class="string">    "fields": &#123;"username": "jason", "age": 25, "gender": 1&#125;&#125;, </span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">&#123;   "model": "app01.user", </span></span><br><span class="line"><span class="string">    "pk": 2, </span></span><br><span class="line"><span class="string">    "fields": &#123;"username": "egon", "age": 31, "gender": 2&#125;&#125;, </span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">&#123;   "model": "app01.user", </span></span><br><span class="line"><span class="string">    "pk": 3, </span></span><br><span class="line"><span class="string">    "fields": &#123;"username": "kevin", "age": 32, "gender": 3&#125;&#125;,</span></span><br><span class="line"><span class="string">     </span></span><br><span class="line"><span class="string">&#123;   "model": "app01.user", </span></span><br><span class="line"><span class="string">    "pk": 4, </span></span><br><span class="line"><span class="string">    "fields": &#123;"username": "tank", "age": 40, "gender": 4&#125;&#125;</span></span><br><span class="line"><span class="string">]</span></span><br><span class="line"><span class="string">写接口就是利用序列化组件渲染数据然后写一个接口文档 该交代交代一下就完事</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<h3 id="ajax结合sweetalert"><a href="#ajax结合sweetalert" class="headerlink" title="ajax结合sweetalert"></a>ajax结合sweetalert</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">自己要学会如何拷贝</span></span><br><span class="line"><span class="string">学会基于别人的基础之上做修改</span></span><br><span class="line"><span class="string">研究各个参数表示的意思 然后找葫芦画瓢</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    $(<span class="string">'.del'</span>).on(<span class="string">'click'</span>,function () &#123;</span><br><span class="line">        // 先将当前标签对象存储起来</span><br><span class="line">        let currentBtn = $(this);</span><br><span class="line">        // 二次确认弹框</span><br><span class="line">        swal(&#123;</span><br><span class="line">          title: <span class="string">"你确定要删吗?"</span>,</span><br><span class="line">          text: <span class="string">"你可要考虑清除哦，可能需要拎包跑路哦!"</span>,</span><br><span class="line">          type: <span class="string">"warning"</span>,</span><br><span class="line">          showCancelButton: true,</span><br><span class="line">          confirmButtonClass: <span class="string">"btn-danger"</span>,</span><br><span class="line">          confirmButtonText: <span class="string">"是的，老子就要删!"</span>,</span><br><span class="line">          cancelButtonText: <span class="string">"算了,算了!"</span>,</span><br><span class="line">          closeOnConfirm: false,</span><br><span class="line">          closeOnCancel: false,</span><br><span class="line">          showLoaderOnConfirm: true</span><br><span class="line">        &#125;,</span><br><span class="line">        function(isConfirm) &#123;</span><br><span class="line">          <span class="keyword">if</span> (isConfirm) &#123;</span><br><span class="line">                // 朝后端发送ajax请求删除数据之后 再弹下面的提示框</span><br><span class="line">                $.ajax(&#123;</span><br><span class="line">                    &#123;<span class="comment">#url:'/delete/user/' + currentBtn.attr('delete_id'),  // 1 传递主键值方式1#&#125;</span></span><br><span class="line">                    url:<span class="string">'/delete/user/'</span>,  // <span class="number">2</span> 放在请求体里面</span><br><span class="line">                    type:<span class="string">'post'</span>,</span><br><span class="line">                    data:&#123;<span class="string">'delete_id'</span>:currentBtn.attr(<span class="string">'delete_id'</span>)&#125;,</span><br><span class="line">                    success:function (args) &#123;  // args = &#123;<span class="string">'code'</span>:<span class="string">''</span>,<span class="string">'msg'</span>:<span class="string">''</span>&#125;</span><br><span class="line">                        // 判断响应状态码 然后做不同的处理</span><br><span class="line">                        <span class="keyword">if</span>(args.code === <span class="number">1000</span>)&#123;</span><br><span class="line">                            swal(<span class="string">"删了!"</span>, args.msg, <span class="string">"success"</span>);</span><br><span class="line">                            // <span class="number">1.l</span>owb版本 直接刷新当前页面</span><br><span class="line">                            &#123;<span class="comment">#window.location.reload()#&#125;</span></span><br><span class="line">                            // <span class="number">2.</span>利用DOM操作 动态刷新</span><br><span class="line">                            currentBtn.parent().parent().remove()</span><br><span class="line">                        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                            swal(<span class="string">'完了'</span>,<span class="string">'出现了位置的错误'</span>,<span class="string">'info'</span>)</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125;)</span><br><span class="line"></span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            swal(<span class="string">"怂逼"</span>, <span class="string">"不要说我认识你"</span>, <span class="string">"error"</span>);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>django框架</tag>
      </tags>
  </entry>
  <entry>
    <title>[Bootstrap框架]</title>
    <url>/2019/07/13/Bootstrap%E6%A1%86%E6%9E%B6/</url>
    <content><![CDATA[<h1 id="前端框架Bootstrap"><a href="#前端框架Bootstrap" class="headerlink" title="前端框架Bootstrap"></a>前端框架Bootstrap</h1><p>该框架已经帮你写好了很多页面样式，你如果需要使用，只需要下载它对应文件，之后直接cv拷贝即可</p>
<p>在使用Bootstrap的时候所有的页面样式都只需要你通过class来调节即可</p>
<p>版本选择建议使用v3版本：<a href="https://v3.bootcss.com/" target="_blank" rel="noopener">https://v3.bootcss.com/</a></p>
<h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p><strong>bootstrap的js代码是依赖于jQuery的，也就意味着你在使用Bootstrap动态效果的时候，一定要导入jQuery</strong></p>
<h3 id="布局容器"><a href="#布局容器" class="headerlink" title="布局容器"></a>布局容器</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    	左右两侧有留白</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container-fluid"</span>&gt;</span></span><br><span class="line">			左右两侧没有留白</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"># 后续在使用bootstrap做页面的时候 上来先写一个div class=container,之后在div内部书写页面</span><br></pre></td></tr></table></figure>

<h3 id="栅格系统"><a href="#栅格系统" class="headerlink" title="栅格系统"></a>栅格系统</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">写一个row就是将所在的区域划分成12份</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-6 "</span>&gt;</span>  获取你所要的份数</span><br><span class="line"># 在使用bootstrap的时候 脑子里面一定要做12的加减法</span><br></pre></td></tr></table></figure>

<h3 id="栅格参数"><a href="#栅格参数" class="headerlink" title="栅格参数"></a>栅格参数</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">.col-xs-	.col-sm-	.col-md-	.col-lg-</span><br><span class="line"># 针对不同的显示器 bootstrap会自动选择对应的参数</span><br><span class="line"># 如果你想要兼容所有的显示器 你就全部加上即可</span><br><span class="line"></span><br><span class="line"># 在一行如何移动位置</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-8 c1 col-md-offset-2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="排版"><a href="#排版" class="headerlink" title="排版"></a>排版</h3><p>bootstrap将所有原生的HTML标签的文本字体统一设置成了肉眼可以接受的样式</p>
<p>效果一样，但是标签表达的意思不一样（语义）</p>
<h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"table table-hover table-striped table-bordered"</span>&gt;</span></span><br><span class="line">		</span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">class</span>=<span class="string">"success"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">td</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">td</span>&gt;</span>jason<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">td</span>&gt;</span>123<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">td</span>&gt;</span>study<span class="tag">&lt;/<span class="name">t</span></span></span><br><span class="line">&lt;/tr&gt;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">class</span>=<span class="string">"active"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">class</span>=<span class="string">"success"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">class</span>=<span class="string">"warning"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">class</span>=<span class="string">"danger"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">class</span>=<span class="string">"info"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-8 col-md-offset-2"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">"text-center"</span>&gt;</span>登陆页面<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>username:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>password:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"form-control"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span>111<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span>222<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span>333<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">cols</span>=<span class="string">"30"</span> <span class="attr">rows</span>=<span class="string">"10"</span> <span class="attr">class</span>=<span class="string">"form-control"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"># 针对表单标签 加样式就用form-control</span><br><span class="line">	class="form-control"</span><br><span class="line">"""</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span>&gt;</span>222</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span>&gt;</span>333</span><br><span class="line">checkbox和radio我们一般不会给它加form-control，直接使用原生的即可</span><br><span class="line">"""</span><br><span class="line"></span><br><span class="line"># 针对报错信息 可以加has-error（input的父标签加）</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"has-error"</span>&gt;</span></span><br><span class="line">	username:</span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="按钮"><a href="#按钮" class="headerlink" title="按钮"></a>按钮</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://www.mzitu.com/"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-danger"</span>&gt;</span>按我<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span>&gt;</span>按我<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-success"</span>&gt;</span>按我<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-info"</span>&gt;</span>按我<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-warning"</span>&gt;</span>按我<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-warning btn-lg"</span>&gt;</span>按我<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-warning btn-sm"</span>&gt;</span>按我<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-warning btn-xs"</span>&gt;</span>按我<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary btn-block"</span>&gt;</span>  </span><br><span class="line">通过给按钮添加 .btn-block 类可以将其拉伸至父元素100%的宽度，而且按钮也变为了块级（block）元素。</span><br></pre></td></tr></table></figure>

<h3 id="图表"><a href="#图表" class="headerlink" title="图表"></a>图表</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">"text-center"</span>&gt;</span>登陆页面 <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"glyphicon glyphicon-user"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        span &#123;</span><br><span class="line">            color: greenyellow;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"># 扩展</span><br></pre></td></tr></table></figure>

<h3 id="导航条"><a href="#导航条" class="headerlink" title="导航条"></a>导航条</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">"navbar navbar-inverse"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">"navbar navbar-default"</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="分页器"><a href="#分页器" class="headerlink" title="分页器"></a>分页器</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">nav</span> <span class="attr">aria-label</span>=<span class="string">"Page navigation"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"pagination"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">aria-label</span>=<span class="string">"Previous"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span><span class="symbol">&amp;laquo;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"active"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>3<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>4<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>5<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">aria-label</span>=<span class="string">"Next"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span><span class="symbol">&amp;raquo;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="弹框"><a href="#弹框" class="headerlink" title="弹框"></a>弹框</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">https:<span class="comment">//lipis.github.io/bootstrap-sweetalert/</span></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">swal(<span class="string">'你还好吗?'</span>)</span><br><span class="line"><span class="literal">undefined</span></span><br><span class="line">swal(<span class="string">'你还好吗?'</span>)</span><br><span class="line"><span class="literal">undefined</span></span><br><span class="line">swal(<span class="string">'你还好吗?'</span>,<span class="string">'我不好，想你了!'</span>)</span><br><span class="line"><span class="literal">undefined</span></span><br><span class="line">swal(<span class="string">'你还好吗?'</span>,<span class="string">'我不好，想你了!'</span>,<span class="string">'success'</span>)</span><br><span class="line"><span class="literal">undefined</span></span><br><span class="line">swal(<span class="string">'你还好吗?'</span>,<span class="string">'我不好，想你了!'</span>,<span class="string">'warning'</span>)</span><br><span class="line"><span class="literal">undefined</span></span><br><span class="line">swal(<span class="string">'你还好吗?'</span>,<span class="string">'我不好，想你了!'</span>,<span class="string">'error'</span>)</span><br><span class="line"><span class="literal">undefined</span></span><br><span class="line">swal(<span class="string">'你还好吗?'</span>,<span class="string">'我不好，想你了!'</span>,<span class="string">'info'</span>)</span><br><span class="line"><span class="literal">undefined</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端开发</category>
      </categories>
      <tags>
        <tag>前端入门</tag>
      </tags>
  </entry>
  <entry>
    <title>[CSS选择器与属性]</title>
    <url>/2019/07/12/CSS%E9%80%89%E6%8B%A9%E5%99%A8%E4%B8%8E%E5%B1%9E%E6%80%A7/</url>
    <content><![CDATA[<h1 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h1><p>层贴样式表:就是给HTML标签添加样式的，让它变的更加的好看</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"># 注释</span><br><span class="line"><span class="comment">/*单行注释*/</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">多行注释1</span></span><br><span class="line"><span class="comment">多行注释2</span></span><br><span class="line"><span class="comment">多行注释3</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">通常我们在写<span class="selector-tag">css</span>样式的时候也会用注释来划定样式区域(因为<span class="selector-tag">HTML</span>代码多所以对呀的<span class="selector-tag">css</span>代码也会很多)</span><br><span class="line"><span class="comment">/*这是博客园首页的css样式文件*/</span></span><br><span class="line"><span class="comment">/*顶部导航条样式*/</span></span><br><span class="line">...</span><br><span class="line"><span class="comment">/*左侧菜单栏样式*/</span></span><br><span class="line">...</span><br><span class="line"><span class="comment">/*右侧菜单栏样式*/</span></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># <span class="selector-tag">css</span>的语法结构</span><br><span class="line">选择器 &#123;</span><br><span class="line">  属性1:值1;</span><br><span class="line">  属性2:值2;</span><br><span class="line">  属性3:值3;</span><br><span class="line">  属性4:值4;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># <span class="selector-tag">css</span>的三种引入方式</span><br><span class="line">    1<span class="selector-class">.style</span>标签内部直接书写(为了教学演示方便我们用第一种)</span><br><span class="line">    &lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line">        <span class="selector-tag">h1</span>  &#123;</span><br><span class="line">            <span class="attribute">color</span>: burlywood;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">    2<span class="selector-class">.link</span>标签引入外部<span class="selector-tag">css</span>文件(最正规的方式 解耦合)</span><br><span class="line">        &lt;link rel="stylesheet" href="mycss.css"&gt;</span><br><span class="line">    3.行内式(一般不用)</span><br><span class="line">        &lt;h1 style="color: green"&gt;老板好 要上课吗?&lt;/h1&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;&quot;&quot;</span><br><span class="line">css的学习流程</span><br><span class="line">	1.先学如何查找标签</span><br><span class="line">		css查找标签的方式你一定要学会</span><br><span class="line">		因为后面所有的框架封装的查找语句都是基于css来的</span><br><span class="line">		css选择器很简单很好学不要有压力!!!</span><br><span class="line">	</span><br><span class="line">	2.之后再学如何添加样式</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>

<h1 id="CSS选择器"><a href="#CSS选择器" class="headerlink" title="CSS选择器"></a>CSS选择器</h1><h3 id="基本选择器"><a href="#基本选择器" class="headerlink" title="基本选择器"></a>基本选择器</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line"># <span class="selector-tag">id</span>选择器</span><br><span class="line"></span><br><span class="line"># 类选择器</span><br><span class="line"></span><br><span class="line"># 元素/标签选择器</span><br><span class="line"></span><br><span class="line"># 通用选择器</span><br><span class="line">&lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line">    <span class="comment">/*id选择器*/</span></span><br><span class="line">    <span class="comment">/*#d1 &#123;  !*找到id是d1的标签 将文本颜色变成绿黄色*!*/</span></span><br><span class="line">    <span class="comment">/*    color: greenyellow;*/</span></span><br><span class="line">    <span class="comment">/*&#125;*/</span></span><br><span class="line">    <span class="comment">/*类选择器*/</span></span><br><span class="line">    <span class="comment">/*.c1 &#123;  !*找到class值里面包含c1的标签*!*/</span></span><br><span class="line">    <span class="comment">/*    color: red;*/</span></span><br><span class="line">    <span class="comment">/*&#125;*/</span></span><br><span class="line">    <span class="comment">/*元素(标签)选择器*/</span></span><br><span class="line">    <span class="comment">/*span &#123;  !*找到所有的span标签*!*/</span></span><br><span class="line">    <span class="comment">/*    color: red;*/</span></span><br><span class="line">    <span class="comment">/*&#125;*/</span></span><br><span class="line">    <span class="comment">/*通用选择器*/</span></span><br><span class="line">    <span class="comment">/** &#123;  !*将html页面上所有的标签全部找到*!*/</span></span><br><span class="line">    <span class="comment">/*    color: green;*/</span></span><br><span class="line">    <span class="comment">/*&#125;*/</span></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<h3 id="组合选择器"><a href="#组合选择器" class="headerlink" title="组合选择器"></a>组合选择器</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">"""</span><br><span class="line">在前端 我们将标签的嵌套用亲戚关系来表述层级</span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span>&gt;</span>div</span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>div p<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>div p</span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>div p span<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>span<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>span<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  div里面的p span都是div的后代</span><br><span class="line">  p是div的儿子</span><br><span class="line">  p里面的span是p的儿子 是div的孙子</span><br><span class="line">  div是p的父亲</span><br><span class="line">  ...</span><br><span class="line">"""</span><br><span class="line"></span><br><span class="line"># 后代选择器</span><br><span class="line"># 儿子选择器</span><br><span class="line"># 毗邻选择器</span><br><span class="line"># 弟弟选择器</span><br><span class="line"></span><br><span class="line">		/*后代选择器*/</span><br><span class="line">        /*div span &#123;*/</span><br><span class="line">        /*    color: red;*/</span><br><span class="line">        /*&#125;*/</span><br><span class="line"></span><br><span class="line">        /*儿子选择器*/</span><br><span class="line">        /*div&gt;span &#123;*/</span><br><span class="line">        /*    color: red;*/</span><br><span class="line">        /*&#125;*/</span><br><span class="line"></span><br><span class="line">        /*毗邻选择器*/</span><br><span class="line">        /*div+span &#123;  !*同级别紧挨着的下面的第一个*!*/</span><br><span class="line">        /*    color: aqua;*/</span><br><span class="line">        /*&#125;*/</span><br><span class="line"></span><br><span class="line">        /*弟弟选择器*/</span><br><span class="line">        div~span &#123;  /*同级别下面所有的span*/</span><br><span class="line">            color: red;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<h3 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">"""</span><br><span class="line">1 含有某个属性</span><br><span class="line">2 含有某个属性并且有某个值</span><br><span class="line">3 含有某个属性并且有某个值的某个标签</span><br><span class="line">"""</span><br><span class="line"># 属性选择器是以<span class="selector-attr">[]</span>作为标志的</span><br><span class="line"></span><br><span class="line"><span class="comment">/*[username] &#123;  !*将所有含有属性名是username的标签背景色改为红色*!*/</span></span><br><span class="line">    <span class="comment">/*    background-color: red;*/</span></span><br><span class="line">    <span class="comment">/*&#125;*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*[username='jason'] &#123;  !*找到所有属性名是username并且属性值是jason的标签*!*/</span></span><br><span class="line">    <span class="comment">/*    background-color: orange;*/</span></span><br><span class="line">    <span class="comment">/*&#125;*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*input[username='jason'] &#123;  !*找到所有属性名是username并且属性值是jason的input标签*!*/</span></span><br><span class="line">    <span class="comment">/*    background-color: wheat;*/</span></span><br><span class="line">    <span class="comment">/*&#125;*/</span></span><br></pre></td></tr></table></figure>

<h3 id="分组与嵌套"><a href="#分组与嵌套" class="headerlink" title="分组与嵌套"></a>分组与嵌套</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span>,<span class="selector-tag">p</span>,<span class="selector-tag">span</span> &#123;  <span class="comment">/*逗号表示并列关系*/</span></span><br><span class="line">            <span class="attribute">color</span>: yellow;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="selector-id">#d1</span>,<span class="selector-class">.c1</span>,<span class="selector-tag">span</span>  &#123;</span><br><span class="line">            <span class="attribute">color</span>: orange;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<h3 id="伪类选择器"><a href="#伪类选择器" class="headerlink" title="伪类选择器"></a>伪类选择器</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;!<span class="selector-tag">DOCTYPE</span> <span class="selector-tag">html</span>&gt;</span><br><span class="line">&lt;html lang="en"&gt;</span><br><span class="line">&lt;<span class="selector-tag">head</span>&gt;</span><br><span class="line">    &lt;meta charset="UTF-8"&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">    &lt;meta name="viewport" content="width=device-width, initial-scale=1"&gt;</span><br><span class="line">    &lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line">        <span class="selector-tag">body</span> &#123;</span><br><span class="line">            <span class="attribute">background-color</span>: black;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-tag">a</span><span class="selector-pseudo">:link</span> &#123;  <span class="comment">/*访问之前的状态*/</span></span><br><span class="line">            <span class="attribute">color</span>: red;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;  <span class="comment">/*需要记住*/</span></span><br><span class="line">            <span class="attribute">color</span>: aqua;  <span class="comment">/*鼠标悬浮态*/</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-tag">a</span><span class="selector-pseudo">:active</span> &#123;</span><br><span class="line">            <span class="attribute">color</span>: black;  <span class="comment">/*鼠标点击不松开的状态  激活态*/</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-tag">a</span><span class="selector-pseudo">:visited</span> &#123;</span><br><span class="line">            <span class="attribute">color</span>: darkgray;  <span class="comment">/*访问之后的状态*/</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-tag">p</span> &#123;</span><br><span class="line">            <span class="attribute">color</span>: darkgray;</span><br><span class="line">            <span class="attribute">font-size</span>: <span class="number">48px</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-tag">p</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">            <span class="attribute">color</span>: white;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="selector-tag">input</span><span class="selector-pseudo">:focus</span> &#123;  <span class="comment">/*input框获取焦点(鼠标点了input框)*/</span></span><br><span class="line">            <span class="attribute">background-color</span>: red;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line">&lt;a href="https://www.jd.com/"&gt;小轩在不在?&lt;/a&gt;</span><br><span class="line">&lt;p&gt;点我有你好看哦&lt;/p&gt;</span><br><span class="line">&lt;input type="text"&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<h3 id="伪元素选择器"><a href="#伪元素选择器" class="headerlink" title="伪元素选择器"></a>伪元素选择器</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">:first-letter</span> &#123;</span><br><span class="line">            <span class="attribute">font-size</span>: <span class="number">48px</span>;</span><br><span class="line">            <span class="attribute">color</span>: orange;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">:before</span> &#123;  <span class="comment">/*在文本开头 同css添加内容*/</span></span><br><span class="line">            <span class="attribute">content</span>: <span class="string">'你说的对'</span>;</span><br><span class="line">            <span class="attribute">color</span>: blue;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">            <span class="attribute">content</span>: <span class="string">'雨露均沾'</span>;</span><br><span class="line">            <span class="attribute">color</span>: orange;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="selector-tag">ps</span><span class="selector-pseudo">:before</span>和<span class="selector-tag">after</span>通常都是用来清除浮动带来的影响:父标签塌陷的问题(后面马上讲)</span><br></pre></td></tr></table></figure>

<h3 id="选择器优先级"><a href="#选择器优先级" class="headerlink" title="选择器优先级"></a>选择器优先级</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">"""</span><br><span class="line">id选择器</span><br><span class="line">类选择器</span><br><span class="line">标签选择器</span><br><span class="line">行内式</span><br><span class="line">	</span><br><span class="line">"""</span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        /*</span><br><span class="line">            1.选择器相同 书写顺序不同</span><br><span class="line">                就近原则:谁离标签更近就听谁的</span><br><span class="line">            2.选择器不同 ...</span><br><span class="line">                行内 &gt; id选择器  &gt; 类选择器 &gt; 标签选择器</span><br><span class="line">                精确度越高越有效</span><br><span class="line">        */</span><br><span class="line"><span class="css">        <span class="selector-id">#d1</span> &#123;</span></span><br><span class="line">            color: aqua;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="comment">/*.c1 &#123;*/</span></span></span><br><span class="line"><span class="css">        <span class="comment">/*    color: orange;*/</span></span></span><br><span class="line"><span class="css">        <span class="comment">/*&#125;*/</span></span></span><br><span class="line"><span class="css">        <span class="comment">/*p &#123;*/</span></span></span><br><span class="line"><span class="css">        <span class="comment">/*    color: red;*/</span></span></span><br><span class="line"><span class="css">        <span class="comment">/*&#125;*/</span></span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;link rel="stylesheet" href="mycss1.css"&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"d1"</span> <span class="attr">class</span>=<span class="string">"c1"</span> <span class="attr">style</span>=<span class="string">"color: blue"</span>&gt;</span>贤妻果然很识趣，有前途~<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="css属性相关"><a href="#css属性相关" class="headerlink" title="css属性相关"></a>css属性相关</h1><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line">    <span class="selector-tag">p</span> &#123;</span><br><span class="line">        <span class="attribute">background-color</span>: red;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-tag">span</span> &#123;</span><br><span class="line">        <span class="attribute">background-color</span>: green;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">        <span class="comment">/*行内标签无法设置长宽 就算你写了 也不会生效*/</span></span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<h3 id="字体属性"><a href="#字体属性" class="headerlink" title="字体属性"></a>字体属性</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="comment">/*font-family: "Arial Black","微软雅黑","...";  !*第一个不生效就用后面的 写多个备用*!*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*font-size: 24px;  !*字体大小*!*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*font-weight: inherit;  !*bolder lighter 100~900 inherit继承父元素的粗细值*!*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*color: red;  !*直接写颜色英文*!*/</span></span><br><span class="line">    <span class="comment">/*color: #ee762e;  !*颜色编号*!*/</span></span><br><span class="line">    <span class="comment">/*color: rgb(128,23,45);  !*三基色 数字  范围0-255*!*/</span></span><br><span class="line">    <span class="comment">/*color: rgba(23, 128, 91, 0.9);  !*第四个参数是颜色的透明度 范围是0-1*!*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*当你想要一些颜色的时候 可以利用现成的工具</span></span><br><span class="line"><span class="comment">        1 pycharm提供的取色器</span></span><br><span class="line"><span class="comment">        2 qq或者微信截图功能</span></span><br><span class="line"><span class="comment">                    也可以多软件结合使用 </span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="文字属性"><a href="#文字属性" class="headerlink" title="文字属性"></a>文字属性</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="comment">/*text-align: center;  !*居中*!*/</span></span><br><span class="line">    <span class="comment">/*text-align: right;*/</span></span><br><span class="line">    <span class="comment">/*text-align: left;*/</span></span><br><span class="line">    <span class="comment">/*text-align: justify;  !*两端对齐*!*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*text-decoration: underline;*/</span></span><br><span class="line">    <span class="comment">/*text-decoration: overline;*/</span></span><br><span class="line">    <span class="comment">/*text-decoration: line-through;*/</span></span><br><span class="line">    <span class="comment">/*text-decoration: none;*/</span></span><br><span class="line">    <span class="comment">/*在html中 有很多标签渲染出来的样式效果是一样的*/</span></span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">    <span class="attribute">text-indent</span>: <span class="number">32px</span>;   <span class="comment">/*缩进32px*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">text-decoration</span>: none;  <span class="comment">/*主要用于给a标签去掉自带的下划线  需要掌握*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="背景图片"><a href="#背景图片" class="headerlink" title="背景图片"></a>背景图片</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-id">#d1</span> &#123;</span></span><br><span class="line">            height: 500px;</span><br><span class="line">            background-color: red;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#d2</span> &#123;</span></span><br><span class="line">            height: 500px;</span><br><span class="line">            background-color: green;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#d3</span> &#123;</span></span><br><span class="line">            height: 500px;</span><br><span class="line"><span class="css">            <span class="selector-tag">background-image</span>: <span class="selector-tag">url</span>("222<span class="selector-class">.png</span>");</span></span><br><span class="line">            background-attachment: fixed;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#d4</span> &#123;</span></span><br><span class="line">            height: 500px;</span><br><span class="line">            background-color: aqua;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"d1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"d2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"d3"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"d4"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="边框"><a href="#边框" class="headerlink" title="边框"></a>边框</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        p &#123;</span><br><span class="line">            background-color: red;</span><br><span class="line"></span><br><span class="line">            border-width: 5px;</span><br><span class="line">            border-style: solid;</span><br><span class="line">            border-color: green;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        div &#123;</span><br><span class="line"><span class="css">            <span class="comment">/*border-left-width: 5px;*/</span></span></span><br><span class="line"><span class="css">            <span class="comment">/*border-left-color: red;*/</span></span></span><br><span class="line"><span class="css">            <span class="comment">/*border-left-style: dotted;*/</span></span></span><br><span class="line"></span><br><span class="line"><span class="css">            <span class="comment">/*border-right-width: 10px;*/</span></span></span><br><span class="line"><span class="css">            <span class="comment">/*border-right-color: greenyellow;*/</span></span></span><br><span class="line"><span class="css">            <span class="comment">/*border-right-style: solid;*/</span></span></span><br><span class="line"></span><br><span class="line"><span class="css">            <span class="comment">/*border-top-width: 15px;*/</span></span></span><br><span class="line"><span class="css">            <span class="comment">/*border-top-color: deeppink;*/</span></span></span><br><span class="line"><span class="css">            <span class="comment">/*border-top-style: dashed;*/</span></span></span><br><span class="line"></span><br><span class="line"><span class="css">            <span class="comment">/*border-bottom-width: 10px;*/</span></span></span><br><span class="line"><span class="css">            <span class="comment">/*border-bottom-color: tomato;*/</span></span></span><br><span class="line"><span class="css">            <span class="comment">/*border-bottom-style: solid;*/</span></span></span><br><span class="line"><span class="css">            <span class="selector-tag">border</span>: 3<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-tag">red</span>;  <span class="comment">/*三者位置可以随意写*/</span></span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#d1</span> &#123;</span></span><br><span class="line">            background-color: greenyellow;</span><br><span class="line">            height: 400px;</span><br><span class="line">            width: 400px;</span><br><span class="line"><span class="css">            <span class="selector-tag">border-radius</span>: 50%;  <span class="comment">/*直接写50%即可 长宽一样就是圆 不一样就是椭圆*/</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>穷人  被diss到了  哭泣.png<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>妈拉个巴子,妈拉个巴子,妈拉个巴子,妈拉个巴子<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"d1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="display属性"><a href="#display属性" class="headerlink" title="display属性"></a>display属性</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="comment">/*#d1 &#123;*/</span></span></span><br><span class="line"><span class="css">        <span class="comment">/*    !*display: none;  !*隐藏标签不展示到前端页面并且原来的位置也不再占有了 但是还存在于文档上*!*!*/</span></span></span><br><span class="line"><span class="css">        <span class="comment">/*    display: inline;  !*将标签设置为行内标签的特点*!*/</span></span></span><br><span class="line"><span class="css">        <span class="comment">/*&#125;*/</span></span></span><br><span class="line"><span class="css">        <span class="comment">/*#d2 &#123;*/</span></span></span><br><span class="line"><span class="css">        <span class="comment">/*    display: inline;*/</span></span></span><br><span class="line"><span class="css">        <span class="comment">/*&#125;*/</span></span></span><br><span class="line"><span class="css">        <span class="comment">/*#d1 &#123;*/</span></span></span><br><span class="line"><span class="css">        <span class="comment">/*    display: block;  !*将标签设置成块儿级标签的特点*!*/</span></span></span><br><span class="line"><span class="css">        <span class="comment">/*&#125;*/</span></span></span><br><span class="line"><span class="css">        <span class="comment">/*#d2 &#123;*/</span></span></span><br><span class="line"><span class="css">        <span class="comment">/*    display: block;*/</span></span></span><br><span class="line"><span class="css">        <span class="comment">/*&#125;*/</span></span></span><br><span class="line"><span class="css">        <span class="comment">/*#d1 &#123;*/</span></span></span><br><span class="line"><span class="css">        <span class="comment">/*    display: inline-block;*/</span></span></span><br><span class="line"><span class="css">        <span class="comment">/*&#125;*/</span></span></span><br><span class="line"><span class="css">        <span class="comment">/*#d2 &#123;*/</span></span></span><br><span class="line"><span class="css">        <span class="comment">/*    display: inline-block;  !*标签即可以在一行显示又可以设置长宽*!*/</span></span></span><br><span class="line"><span class="css">        <span class="comment">/*&#125;*/</span></span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"display: none"</span>&gt;</span>div1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>div2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"visibility: hidden"</span>&gt;</span>单纯的隐藏 位置还在<span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>div4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;div id="d1" style="height: 100px;width: 100px;background-color: red"&gt;01&lt;/div&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;div id="d2" style="height: 100px;width: 100px;background-color: greenyellow"&gt;02&lt;/div&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;span id="d1" style="height: 100px;width: 100px;background-color: red"&gt;span&lt;/span&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;span id="d2" style="height: 100px;width: 100px;background-color: greenyellow"&gt;span&lt;/span&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--&lt;div id="d1" style="height: 100px;width: 100px;background-color: red"&gt;01&lt;/div&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;div id="d2" style="height: 100px;width: 100px;background-color: greenyellow"&gt;02&lt;/div&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">"""</span><br><span class="line">盒子模型</span><br><span class="line">	就以快递盒为例</span><br><span class="line">		快递盒与快递盒之间的距离(标签与标签之间的距离 <span class="selector-tag">margin</span>外边距)</span><br><span class="line">		盒子的厚度(标签的边框 <span class="selector-tag">border</span>)</span><br><span class="line">		盒子里面的物体到盒子的距离(内容到边框的距离  <span class="selector-tag">padding</span>内边距)</span><br><span class="line">		物体的大小(内容 <span class="selector-tag">content</span>)</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	如果你想要调整标签与标签之间的距离 你就可以调整<span class="selector-tag">margin</span></span><br><span class="line">	</span><br><span class="line">	浏览器会自带8<span class="selector-tag">px</span>的<span class="selector-tag">margin</span>，一般情况下我们在写页面的时候，上来就会先将<span class="selector-tag">body</span>的<span class="selector-tag">margin</span>去除</span><br><span class="line">	</span><br><span class="line">"""</span><br><span class="line">&lt;!<span class="selector-tag">DOCTYPE</span> <span class="selector-tag">html</span>&gt;</span><br><span class="line">&lt;html lang="en"&gt;</span><br><span class="line">&lt;<span class="selector-tag">head</span>&gt;</span><br><span class="line">    &lt;meta charset="UTF-8"&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">    &lt;meta name="viewport" content="width=device-width, initial-scale=1"&gt;</span><br><span class="line">    &lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line">        <span class="selector-tag">body</span> &#123;</span><br><span class="line">            <span class="attribute">margin</span>: <span class="number">0</span>;  <span class="comment">/*上下左右全是0</span></span><br><span class="line"><span class="comment">            /*margin: 10px 20px;  !* 第一个上下 第二个左右*!*/</span></span><br><span class="line">            <span class="comment">/*margin: 10px 20px 30px;  !*第一个上  第二个左右  第三个下*!*/</span></span><br><span class="line">            <span class="comment">/*margin: 10px 20px 30px 40px;  !*上 右 下 左*!*/</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*p &#123;*/</span></span><br><span class="line">        <span class="comment">/*    margin-left: 0;*/</span></span><br><span class="line">        <span class="comment">/*    margin-top: 0;*/</span></span><br><span class="line">        <span class="comment">/*    margin-right: 0;*/</span></span><br><span class="line">        <span class="comment">/*    margin-bottom: 0;*/</span></span><br><span class="line">        <span class="comment">/*&#125;*/</span></span><br><span class="line"></span><br><span class="line">        <span class="selector-id">#d1</span> &#123;</span><br><span class="line">            <span class="attribute">margin-bottom</span>: <span class="number">50px</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="selector-id">#d2</span> &#123;</span><br><span class="line">            <span class="attribute">margin-top</span>: <span class="number">20px</span>;  <span class="comment">/*不叠加 只取大的*/</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="selector-id">#dd</span> &#123;</span><br><span class="line">            <span class="attribute">margin</span>: <span class="number">0</span> auto;  <span class="comment">/*只能做到标签的水平居中*/</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-tag">p</span> &#123;</span><br><span class="line">            <span class="attribute">border</span>: <span class="number">3px</span> solid red;</span><br><span class="line">            <span class="comment">/*padding-left: 10px;*/</span></span><br><span class="line">            <span class="comment">/*padding-top: 20px;*/</span></span><br><span class="line">            <span class="comment">/*padding-right: 20px;*/</span></span><br><span class="line">            <span class="comment">/*padding-bottom: 50px;*/</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">/*padding: 10px;*/</span></span><br><span class="line">            <span class="comment">/*padding: 10px 20px;*/</span></span><br><span class="line">            <span class="comment">/*padding: 10px 20px 30px;*/</span></span><br><span class="line">            <span class="comment">/*padding: 10px 20px 30px 40px;*/</span>  <span class="comment">/*规律和margin一模一样*/</span></span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line">&lt;!--    &lt;p style="border: 1px solid red;" id="d1"&gt;ppp&lt;/p&gt;--&gt;</span><br><span class="line">&lt;!--    &lt;p style="border: 1px solid orange;" id="d2"&gt;ppp&lt;/p&gt;--&gt;</span><br><span class="line">&lt;!--&lt;div style="border: 3px solid red;height: 400px;width: 400px"&gt;--&gt;</span><br><span class="line">&lt;!--    &lt;div id='dd' style="border: 1px solid orange;height: 50px;width: 50px;background-color: blue;"&gt;&lt;/div&gt;--&gt;</span><br><span class="line">&lt;!--&lt;/div&gt;--&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;ppp&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<h3 id="浮动"><a href="#浮动" class="headerlink" title="浮动"></a>浮动</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">"""浮动的元素 没有块儿级一说 本身多大浮起来之后就只能占多大"""</span><br><span class="line">只要是设计到页面的布局一般都是用浮动来提前规划好</span><br><span class="line">&lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line">    <span class="selector-tag">body</span> &#123;</span><br><span class="line">        <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-id">#d1</span> &#123;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">        <span class="attribute">background-color</span>: red;</span><br><span class="line">        <span class="attribute">float</span>: left;  <span class="comment">/*浮动  浮到空中往左飘*/</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-id">#d2</span> &#123;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">        <span class="attribute">background-color</span>: greenyellow;</span><br><span class="line">        <span class="attribute">float</span>: right;   <span class="comment">/*浮动 浮到空中往右飘*/</span></span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>
<h3 id="解决浮动带来的影响"><a href="#解决浮动带来的影响" class="headerlink" title="解决浮动带来的影响"></a>解决浮动带来的影响</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"># 浮动带来的影响</span><br><span class="line">会造成父标签塌陷的问题</span><br><span class="line"></span><br><span class="line">"""</span><br><span class="line">解决浮动带来的影响 推导步骤</span><br><span class="line">    1.自己加一个<span class="selector-tag">div</span>设置高度</span><br><span class="line">    2.利用<span class="selector-tag">clear</span>属性</span><br><span class="line">        <span class="selector-id">#d4</span> &#123;</span><br><span class="line">            <span class="attribute">clear</span>: left;  <span class="comment">/*该标签的左边(地面和空中)不能有浮动的元素*/</span></span><br><span class="line">        &#125;</span><br><span class="line">    3.通用的解决浮动带来的影响方法</span><br><span class="line">        在写<span class="selector-tag">html</span>页面之前 先提前写好处理浮动带来的影响的 <span class="selector-tag">css</span>代码</span><br><span class="line">        <span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">                <span class="attribute">content</span>: <span class="string">''</span>;</span><br><span class="line">                <span class="attribute">display</span>: block;</span><br><span class="line">                <span class="attribute">clear</span>:both;</span><br><span class="line">            &#125;</span><br><span class="line">    之后只要标签出现了塌陷的问题就给该塌陷的标签加一个<span class="selector-tag">clearfix</span>属性即可</span><br><span class="line">    上述的解决方式是通用的 到哪都一样 并且名字就叫<span class="selector-tag">clearfix</span></span><br><span class="line">"""</span><br></pre></td></tr></table></figure>

<h3 id="溢出属性"><a href="#溢出属性" class="headerlink" title="溢出属性"></a>溢出属性</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">3px</span> solid red;</span><br><span class="line">    <span class="comment">/*overflow: visible;  !*默认就是可见 溢出还是展示*!*/</span></span><br><span class="line">    <span class="comment">/*overflow: hidden;  !*溢出部分直接隐藏*!*/</span></span><br><span class="line">    <span class="comment">/*overflow: scroll;  !*设置成上下滚动条的形式*!*/</span></span><br><span class="line">    <span class="comment">/*overflow: auto;*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h3><ul>
<li><p>静态</p>
<p>所有的标签默认都是静态的static，无法改变位置</p>
</li>
<li><p>相对定位(了解)</p>
<p>相对于标签原来的位置做移动relative</p>
</li>
<li><p>绝对定位(常用)</p>
<p>相对于已经定位过的父标签做移动(如果没有父标签那么就以body为参照)</p>
<p>eg:小米网站购物车</p>
<p>当你不知道页面其他标签的位置和参数，只给了你一个父标签的参数，让你基于该标签左定位</p>
</li>
<li><p>固定定位(常用)</p>
<p>相对于浏览器窗口固定在某个位置</p>
<p>eg:右侧小广告</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        body &#123;</span><br><span class="line">            margin: 0;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#d1</span> &#123;</span></span><br><span class="line">            height: 100px;</span><br><span class="line">            width: 100px;</span><br><span class="line">            background-color: red;</span><br><span class="line"><span class="css">            <span class="selector-tag">left</span>: 50<span class="selector-tag">px</span>;  <span class="comment">/*从左往右   如果是负数 方向则相反*/</span></span></span><br><span class="line"><span class="css">            <span class="selector-tag">top</span>: 50<span class="selector-tag">px</span>;  <span class="comment">/*从上往下    如果是负数 方向则相反*/</span></span></span><br><span class="line"><span class="css">            <span class="comment">/*position: static;  !*默认是static无法修改位置*!*/</span></span></span><br><span class="line">            position: relative;</span><br><span class="line">            /*相对定位</span><br><span class="line">            标签由static变为relative它的性质就从原来没有定位的标签变成了已经定位过的标签</span><br><span class="line">            虽然你哪怕没有动 但是你的性质也已经改变了</span><br><span class="line">            */</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-id">#d2</span> &#123;</span></span><br><span class="line">            height: 100px;</span><br><span class="line">            width: 200px;</span><br><span class="line">            background-color: red;</span><br><span class="line"><span class="css">            <span class="selector-tag">position</span>: <span class="selector-tag">relative</span>;  <span class="comment">/*已经定位过了*/</span></span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#d3</span> &#123;</span></span><br><span class="line">            height: 200px;</span><br><span class="line">            width: 400px;</span><br><span class="line">            background-color: yellowgreen;</span><br><span class="line">            position: absolute;</span><br><span class="line">            left: 200px;</span><br><span class="line">            top: 100px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-id">#d4</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">position</span>: <span class="selector-tag">fixed</span>;  <span class="comment">/*写了fixed之后 定位就是依据浏览器窗口*/</span></span></span><br><span class="line">            bottom: 10px;</span><br><span class="line">            right: 20px;</span><br><span class="line"></span><br><span class="line">            height: 50px;</span><br><span class="line">            width: 100px;</span><br><span class="line">            background-color: white;</span><br><span class="line">            border: 3px solid black;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;div id="d1"&gt;&lt;/div&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--&lt;div id="d2"&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;div id="d3"&gt;&lt;/div&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;/div&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"height: 500px;background-color: red"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"height: 500px;background-color: greenyellow"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"height: 500px;background-color: blue"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"d4"</span>&gt;</span>回到顶部<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>ps:</strong>浏览器是优先展示文本内容的</p>
<h3 id="验证浮动和定位是否脱离文档流-原来的位置是否还保留"><a href="#验证浮动和定位是否脱离文档流-原来的位置是否还保留" class="headerlink" title="验证浮动和定位是否脱离文档流(原来的位置是否还保留)"></a>验证浮动和定位是否脱离文档流(原来的位置是否还保留)</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">"""</span><br><span class="line">浮动</span><br><span class="line">相对定位</span><br><span class="line">绝对定位</span><br><span class="line">固定定位</span><br><span class="line">"""</span><br><span class="line"># 不脱离文档流</span><br><span class="line">	1.相对定位</span><br><span class="line"># 脱离文档流</span><br><span class="line">	1.浮动</span><br><span class="line">    2.绝对定位</span><br><span class="line">    3.固定定位</span><br><span class="line">  </span><br><span class="line"><span class="comment">&lt;!--&lt;div style="height: 100px;width: 200px;background-color: red;position: relative;left: 500px"&gt;&lt;/div&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;div style="height: 100px;width: 200px;background-color: greenyellow"&gt;&lt;/div&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--&lt;div style="height: 100px;width: 200px;background-color: red;"&gt;&lt;/div&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;div style="height: 100px;width: 200px;background-color: greenyellow;position: absolute;left: 500px"&gt;&lt;/div&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--当没有父标签做到位 就参照与body--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;div style="height: 100px;width: 200px;background-color: blue;"&gt;&lt;/div&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"height: 100px;width: 200px;background-color: red;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"height: 100px;width: 200px;background-color: greenyellow;position: fixed;bottom: 10px;right: 20px"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"height: 100px;width: 200px;background-color: blue;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="z-index模态框"><a href="#z-index模态框" class="headerlink" title="z-index模态框"></a>z-index模态框</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">eg:百度登陆页面 其实是三层结构</span><br><span class="line">  1.最底部是正常内容(z=0)  最远的</span><br><span class="line">  2.黑色的透明区(z=99)  		中间层</span><br><span class="line">  3.白色的注册区域(z=100)  离用户最近</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        body &#123;</span><br><span class="line">            margin: 0;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.cover</span> &#123;</span></span><br><span class="line">            position: fixed;</span><br><span class="line">            left: 0;</span><br><span class="line">            top: 0;</span><br><span class="line">            right: 0;</span><br><span class="line">            bottom: 0;</span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-tag">rgba</span>(0,0,0,0<span class="selector-class">.5</span>);</span></span><br><span class="line">            z-index: 99;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.modal</span> &#123;</span></span><br><span class="line">            background-color: white;</span><br><span class="line">            height: 200px;</span><br><span class="line">            width: 400px;</span><br><span class="line">            position: fixed;</span><br><span class="line">            left: 50%;</span><br><span class="line">            top: 50%;</span><br><span class="line">            z-index: 100;</span><br><span class="line">            margin-left: -200px;</span><br><span class="line">            margin-top: -100px;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>这是最底层的页面内容<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"cover"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>登陆页面<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>username:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>password:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>点我点我~<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="透明度opacity"><a href="#透明度opacity" class="headerlink" title="透明度opacity"></a>透明度opacity</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 它不单单可以修改颜色的透明度还同时修改字体的透明度</span></span><br><span class="line">rgba只能影响颜色 </span><br><span class="line">而opacity可以修改颜色和字体</span><br><span class="line"></span><br><span class="line">opacity: <span class="number">0.5</span>;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端开发</category>
      </categories>
      <tags>
        <tag>前端入门</tag>
      </tags>
  </entry>
  <entry>
    <title>[restful API规范与DRF安装]</title>
    <url>/2020/04/22/API%E8%A7%84%E8%8C%83%E4%B8%8Edrf%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<p>程序的客户端有很多：硬件设备，游戏，APP，软件，其他的外部服务端。</p>
<h1 id="1-Web应用模式"><a href="#1-Web应用模式" class="headerlink" title="1. Web应用模式"></a>1. Web应用模式</h1><p>在开发Web应用中，有两种应用模式：</p>
<ol>
<li><p>前后端不分离[客户端看到的内容和所有界面效果都是由服务端提供出来的。]</p>
<p>这种情况下，前端页面中会出现很多涉及到服务端的模板语法。</p>
</li>
</ol>
<p><img src="/images/depended_frontend_backend.png" alt=""></p>
<p>前后端不分离</p>
<ol>
<li><p>前后端分离【把前端的界面效果(html，css，js分离到另一个项目中，python服务端只需要返回数据即可)】</p>
<p>前端形成一个独立的网站，服务端构成一个独立的网站</p>
</li>
</ol>
<p><img src="/images/indepent_frontend_backend.png" alt=""></p>
<p>前后端分离</p>
<p>django，一般都是做web网站，如果可以利用django实现前后端分离，则django就可以完成地铁站的运营调度系统，路由的终端系统，pos机的服务端系统，游戏的服务端后台，软件的服务端后台。</p>
<h1 id="2-api接口"><a href="#2-api接口" class="headerlink" title="2. api接口"></a>2. api接口</h1><p>为了在团队内部形成共识、防止个人习惯差异引起的混乱，我们需要找到一种大家都觉得很好的接口实现规范，而且这种规范能够让后端写的接口，用途一目了然，减少双方之间的合作成本。</p>
<p>目前市面上大部分公司开发人员使用的接口服务架构主要有：restful、rpc，soap。</p>
<p>rpc: 翻译成中文:远程过程调用[远程服务调用].</p>
<p>服务端提供单一的请求数据的api地址：<a href="http://api.renran.cn/" target="_blank" rel="noopener">http://api.renran.cn/</a></p>
<p>post请求</p>
<p>action=get_all_student&amp;class=301&amp;sex=1</p>
<p>优势：</p>
<ol>
<li>不需要管当前操作是什么http请求，也不需要操作url地址的编写，对接简单</li>
</ol>
<p>缺点：</p>
<ol>
<li>接口多了,对应函数名和参数就多了,前端在请求api接口时,就会比较难找.容易出现重复的接口</li>
</ol>
<p>restful: 翻译成中文: 资源状态转换.</p>
<p>把后端所有的数据/文件都看成资源.</p>
<p>那么接口请求数据,本质上来说就是对资源的操作了.</p>
<p>web项目中操作资源,无非就是增删查改.所以要求在地址栏中声明要操作的资源是什么,然后通过http请求动词来说明对资源进行哪一种操作.</p>
<p>POST <a href="http://www.renran.cn/api/students/" target="_blank" rel="noopener">http://www.renran.cn/api/students/</a> 添加学生数据</p>
<p>GET <a href="http://www.renran.cn/api/students/" target="_blank" rel="noopener">http://www.renran.cn/api/students/</a> 获取所有学生</p>
<p>DELETE <a href="http://www.renran.cn/api/students//" target="_blank" rel="noopener">http://www.renran.cn/api/students//</a> 删除id=pk的一个学生</p>
<p>PUT <a href="http://www.renran.cn/api/students//" target="_blank" rel="noopener">http://www.renran.cn/api/students//</a> 修改一个学生的全部信息 [id,name,sex,age,]</p>
<p>PATCH <a href="http://www.renran.cn/api/students//" target="_blank" rel="noopener">http://www.renran.cn/api/students//</a> 修改一个学生的部分信息[age]</p>
<p>优点：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 维护开发简单，可以保证后期的开发不会出现太多重复接口</span><br></pre></td></tr></table></figure>

<p>缺点：</p>
<ol>
<li>有部分接口不会有明确的增删查改这种区分的，所以会出现一些不伦不类的接口。会因为这些语义不明，不伦不类的接口导致后期的维护成本上升。</li>
<li>因为restful把对于资源的操作都理解成了增删查改，建议使用http，所以restful接口天生局限于web开发。</li>
</ol>
<h1 id="3-RESTful-API规范"><a href="#3-RESTful-API规范" class="headerlink" title="3. RESTful API规范"></a>3. RESTful API规范</h1><p><img src="/images/restful.gif" alt=""></p>
<p>REST全称是Representational State Transfer，中文意思是表述（编者注：通常译为表征）性状态转移。 它首次出现在2000年Roy Fielding的博士论文中。</p>
<p>RESTful是一种定义Web API接口的设计风格，尤其适用于前后端分离的应用模式中。</p>
<p>这种风格的理念认为后端开发任务就是提供数据的，对外提供的是数据资源的访问接口，所以在定义接口时，客户端访问的URL路径就表示这种要操作的数据资源。</p>
<p>而对于数据资源分别使用POST、DELETE、GET、UPDATE等请求动作来表达对数据的增删查改。</p>
<p><a href="/images/d114eb0f25d14d698081068cdb57094a"></a></p>
<p>事实上，我们可以使用任何一个框架都可以实现符合restful规范的API接口。</p>
<p>参考文档：<a href="http://www.runoob.com/w3cnote/restful-architecture.html" target="_blank" rel="noopener">http://www.runoob.com/w3cnote/restful-architecture.html</a></p>
<p>接口实施过程中，会存在幂等性。所谓幂等性是指代客户端发起多次请求是否对于服务端里面的资源产生不同结果。如果多次请求，服务端结果还是一样，则属于幂等接口，如果多次请求，服务端产生结果是不一样的，则属于非幂等接口。在http请求，get/put/patch/delete都属于幂等性接口，post属于非幂等接口。</p>
<p>为什么要考虑幂等性？主要就是接口操作的安全性问题。</p>
<p>delete /api/students/1</p>
<p>get /api/students/</p>
<p>post /api/students/</p>
<h1 id="4-序列化"><a href="#4-序列化" class="headerlink" title="4. 序列化"></a>4. 序列化</h1><p>api接口开发，最核心最常见的一个过程就是序列化，所谓序列化就是把<strong>数据转换格式</strong>，序列化可以分两个阶段：</p>
<p><strong>序列化</strong>： 把我们识别的数据转换成指定的格式提供给别人。</p>
<p>例如：我们在django中获取到的数据默认是模型对象，但是模型对象数据无法直接提供给前端或别的平台使用，所以我们需要把数据进行序列化，变成字符串或者json数据，提供给前端或者其他平台。</p>
<p><strong>反序列化</strong>：把别人提供的数据转换/还原成我们需要的格式。</p>
<p>例如：前端js提供过来的json数据，对于python而言就是字符串，我们需要进行反序列化换成模型类对象，这样我们才能把数据保存到数据库中。</p>
<h1 id="5-Django-Rest-Framework"><a href="#5-Django-Rest-Framework" class="headerlink" title="5. Django Rest_Framework"></a>5. Django Rest_Framework</h1><p>核心思想: 缩减编写api接口的代码</p>
<p>Django REST framework是一个建立在Django基础之上的Web 应用开发框架,本质上就是一个内置在django里面的子应用，可以快速的开发REST API接口应用。</p>
<p>在REST framework中，提供了序列化器对象Serialzier的定义，可以帮助我们简化序列化与反序列化的过程，不仅如此，还提供丰富的类视图、扩展类、视图集来简化视图的编写工作。REST framework还提供了认证、权限、限流、过滤、分页、接口文档等功能支持。REST framework提供了一个用于测试API接口 的可视化Web界面【可以浏览器直接访问接口，drf的api接口测试页面非常美观】。</p>
<p><img src="/images/drf_logo.png" alt=""></p>
<p>中文文档：<a href="https://q1mi.github.io/Django-REST-framework-documentation/#django-rest-framework" target="_blank" rel="noopener">https://q1mi.github.io/Django-REST-framework-documentation/#django-rest-framework</a></p>
<p>github: <a href="https://github.com/encode/django-rest-framework/tree/master" target="_blank" rel="noopener">https://github.com/encode/django-rest-framework/tree/master</a></p>
<h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul>
<li>提供了定义序列化器Serializer的方法，可以快速根据 Django ORM 或者其它库自动序列化/反序列化；</li>
<li>提供了丰富的类视图、Mixin扩展类，简化视图的编写；</li>
<li>丰富的定制层级：函数视图、类视图、视图集合到自动生成 API，满足各种需要；</li>
<li>多种身份认证和权限认证方式的支持；[jwt Json web token]</li>
<li>内置了限流系统；</li>
<li>直观的 API web 界面；【方便我们调试开发api接口】</li>
<li>可扩展性，插件丰富</li>
</ul>
<h1 id="6-环境安装与配置"><a href="#6-环境安装与配置" class="headerlink" title="6. 环境安装与配置"></a>6. 环境安装与配置</h1><p>DRF需要以下依赖：</p>
<ul>
<li>Python (2.7, 3.2以上)</li>
<li>Django (1.10, 1.11, 2.0以上)</li>
</ul>
<p><strong>DRF是以Django扩展应用的方式提供的，所以我们可以直接利用已有的Django环境而无需从新创建。（若没有Django环境，需要先创建环境安装Django）</strong></p>
<h2 id="6-1-安装DRF"><a href="#6-1-安装DRF" class="headerlink" title="6.1 安装DRF"></a>6.1 安装DRF</h2><p>前提是已经安装了django，建议安装在虚拟环境</p>
<p>windows的复制粘贴在linux终端是无效的，在ubuntu终端下粘贴的快捷键是 shift+insert</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># mkvirtualenv drfdemo -p python3</span></span><br><span class="line"><span class="comment"># pip install django==2.2.0  -i https://pypi.douban.com/simple</span></span><br><span class="line"></span><br><span class="line">pip install djangorestframework -i https://pypi.douban.com/simple</span><br><span class="line"></span><br><span class="line"><span class="comment"># 因为我们需要接下来，需要开发api接口肯定要操作数据，所以安装pymysql</span></span><br><span class="line">pip install pymysql -i https://pypi.douban.com/simple</span><br></pre></td></tr></table></figure>

<p>linux的终端下 粘贴内容 快捷键： shift+insert</p>
<h3 id="6-1-1-创建django项目"><a href="#6-1-1-创建django项目" class="headerlink" title="6.1.1 创建django项目"></a>6.1.1 创建django项目</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/Desktop</span><br><span class="line">django-admin startproject drfdemo</span><br></pre></td></tr></table></figure>

<p><img src="/images/1557022536078.png" alt=""></p>
<p>使用pycharm打开项目，设置虚拟环境的解析器，并修改manage.py中的后缀参数。</p>
<p><img src="d/images/1592883758431.png" alt=""></p>
<h2 id="6-2-添加rest-framework应用"><a href="#6-2-添加rest-framework应用" class="headerlink" title="6.2 添加rest_framework应用"></a>6.2 添加rest_framework应用</h2><p>在<strong>settings.py</strong>的<strong>INSTALLED_APPS</strong>中添加’rest_framework’。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">INSTALLED_APPS = [    ...    <span class="string">'rest_framework'</span>,]</span><br></pre></td></tr></table></figure>

<p>接下来就可以使用DRF提供的功能进行api接口开发了。在项目中如果使用rest_framework框架实现API接口，主要有以下三个步骤：</p>
<ul>
<li>将请求的数据（如JSON格式）转换为模型类对象</li>
<li>通过模型类对象进行数据库操作，完成客户端请求的增删查改</li>
<li>将模型类对象转换为响应的数据（如JSON格式）</li>
</ul>
<p>接下来，我们快速体验下四天后我们学习完成drf以后的开发代码。接下来代码不需要理解，看步骤。</p>
<h2 id="6-3-体验drf完全简写代码的过程"><a href="#6-3-体验drf完全简写代码的过程" class="headerlink" title="6.3 体验drf完全简写代码的过程"></a>6.3 体验drf完全简写代码的过程</h2><h3 id="6-3-0-创建子应用"><a href="#6-3-0-创建子应用" class="headerlink" title="6.3.0 创建子应用"></a>6.3.0 创建子应用</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 项目根目录下创建子应用，用于展示当前例子。</span></span><br><span class="line"></span><br><span class="line">python manage.py startapp students</span><br></pre></td></tr></table></figure>

<h3 id="6-3-1-创建模型操作类"><a href="#6-3-1-创建模型操作类" class="headerlink" title="6.3.1. 创建模型操作类"></a>6.3.1. 创建模型操作类</h3><p>子应用的models.py文件中创建模型对象。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your models here.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="comment"># 表字段声明</span></span><br><span class="line">    <span class="comment"># 字段名=models.数据类型(字段约束)</span></span><br><span class="line">    name = models.CharField(null=<span class="literal">False</span>, max_length=<span class="number">32</span>, verbose_name=<span class="string">"姓名"</span>)</span><br><span class="line">    sex  = models.BooleanField(default=<span class="literal">True</span>, verbose_name=<span class="string">"性别"</span>)</span><br><span class="line">    age  = models.IntegerField(verbose_name=<span class="string">"年龄"</span>)</span><br><span class="line">    class_num = models.CharField(max_length=<span class="number">5</span>, verbose_name=<span class="string">"班级编号"</span>)</span><br><span class="line">    description = models.TextField(max_length=<span class="number">1000</span>, verbose_name=<span class="string">"个性签名"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 表信息</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        <span class="comment"># 设置表名</span></span><br><span class="line">        db_table=<span class="string">"tb_students"</span></span><br><span class="line">        verbose_name=<span class="string">"学生"</span></span><br><span class="line">        verbose_name_plural=verbose_name</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 模型的操作方法</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br></pre></td></tr></table></figure>

<p>为了方便测试，所以我们可以先创建一个数据库。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">create database students charset=utf8;</span><br></pre></td></tr></table></figure>

<p><img src="/images/1557023744365.png" alt=""></p>
<h3 id="6-3-1-1-执行数据迁移"><a href="#6-3-1-1-执行数据迁移" class="headerlink" title="6.3.1.1 执行数据迁移"></a>6.3.1.1 执行数据迁移</h3><p>把students子应用添加到INSTALL_APPS中</p>
<p><img src="/images/1557023819604.png" alt=""></p>
<p>初始化数据库连接</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">安装pymysql</span><br><span class="line">pip install pymysql</span><br></pre></td></tr></table></figure>

<p>主引用中<code>__init__.py</code>设置使用pymysql作为数据库驱动</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysqlpymysql.install_as_MySQLdb()</span><br></pre></td></tr></table></figure>

<p>settings.py配置文件中设置mysql的账号密码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">DATABASES = &#123;</span><br><span class="line">    <span class="comment"># 'default': &#123;</span></span><br><span class="line">    <span class="comment">#     'ENGINE': 'django.db.backends.sqlite3',</span></span><br><span class="line">    <span class="comment">#     'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),</span></span><br><span class="line">    <span class="comment"># &#125;,</span></span><br><span class="line">    <span class="string">'default'</span>: &#123;</span><br><span class="line">        <span class="string">'ENGINE'</span>: <span class="string">'django.db.backends.mysql'</span>,</span><br><span class="line">        <span class="string">'NAME'</span>: <span class="string">"students"</span>,</span><br><span class="line">        <span class="string">"HOST"</span>: <span class="string">"127.0.0.1"</span>,</span><br><span class="line">        <span class="string">"PORT"</span>: <span class="number">3306</span>,</span><br><span class="line">        <span class="string">"USER"</span>: <span class="string">"root"</span>,</span><br><span class="line">        <span class="string">"PASSWORD"</span>:<span class="string">"123"</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>终端下，执行数据迁移。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python manage.py makemigrations</span><br><span class="line">python manage.py migrate</span><br></pre></td></tr></table></figure>

<p>错误列表</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 执行数据迁移 python manage.py makemigrations 报错如下：</span><br></pre></td></tr></table></figure>

<p><img src="/images/1557024349366.png" alt=""></p>
<p>解决方案：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">注释掉 backends&#x2F;mysql&#x2F;base.py中的35和36行代码。</span><br></pre></td></tr></table></figure>

<p><img src="/images/1557025991751.png" alt=""></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 执行数据迁移发生以下错误：</span><br></pre></td></tr></table></figure>

<p><img src="/images/1557026113769.png" alt=""></p>
<p>解决方法：</p>
<p>backends/mysql/operations.py146行里面把decode换成encode：</p>
<p><img src="/images/1592885187223.png" alt=""></p>
<h3 id="6-3-2-创建序列化器"><a href="#6-3-2-创建序列化器" class="headerlink" title="6.3.2. 创建序列化器"></a>6.3.2. 创建序列化器</h3><p>在students应用目录中新建serializers.py用于保存该应用的序列化器。</p>
<p>创建一个StudentModelSerializer用于序列化与反序列化。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建序列化器类，回头会在试图中被调用</span></span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Student</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentModelSerializer</span><span class="params">(serializers.ModelSerializer)</span>:</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = Student</span><br><span class="line">        fields = <span class="string">"__all__"</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>model</strong> 指明该序列化器处理的数据字段从模型类BookInfo参考生成</li>
<li><strong>fields</strong> 指明该序列化器包含模型类中的哪些字段，’<strong>all</strong>’指明包含所有字段</li>
</ul>
<h3 id="6-3-3-编写视图"><a href="#6-3-3-编写视图" class="headerlink" title="6.3.3. 编写视图"></a>6.3.3. 编写视图</h3><p>在students应用的views.py中创建视图StudentViewSet，这是一个视图集合。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.viewsets <span class="keyword">import</span> ModelViewSet</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Student</span><br><span class="line"><span class="keyword">from</span> .serializers <span class="keyword">import</span> StudentModelSerializer</span><br><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentViewSet</span><span class="params">(ModelViewSet)</span>:</span></span><br><span class="line">    queryset = Student.objects.all()</span><br><span class="line">    serializer_class = StudentModelSerializer</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>queryset</strong> 指明该视图集在查询数据时使用的查询集</li>
<li><strong>serializer_class</strong> 指明该视图在进行序列化或反序列化时使用的序列化器</li>
</ul>
<h3 id="6-3-4-定义路由"><a href="#6-3-4-定义路由" class="headerlink" title="6.3.4. 定义路由"></a>6.3.4. 定义路由</h3><p>在students应用的urls.py中定义路由信息。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line"><span class="keyword">from</span> rest_framework.routers <span class="keyword">import</span> DefaultRouter</span><br><span class="line"></span><br><span class="line"><span class="comment"># 路由列表</span></span><br><span class="line">urlpatterns = []</span><br><span class="line"></span><br><span class="line">router = DefaultRouter()  <span class="comment"># 可以处理视图的路由器</span></span><br><span class="line">router.register(<span class="string">'students'</span>, views.StudentViewSet)  <span class="comment"># 向路由器中注册视图集</span></span><br><span class="line"></span><br><span class="line">urlpatterns += router.urls  <span class="comment"># 将路由器中的所以路由信息追到到django的路由列表中</span></span><br></pre></td></tr></table></figure>

<p>最后把students子应用中的路由文件加载到总路由文件中.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path,include</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'admin/'</span>, admin.site.urls),</span><br><span class="line">    path(<span class="string">"student/"</span>,include(<span class="string">"students.urls"</span>)),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h3 id="6-3-5-运行测试"><a href="#6-3-5-运行测试" class="headerlink" title="6.3.5. 运行测试"></a>6.3.5. 运行测试</h3><p>运行当前程序（与运行Django一样）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python manage.py runserver</span><br></pre></td></tr></table></figure>

<p>在浏览器中输入网址127.0.0.1:8000，可以看到DRF提供的API Web浏览页面：</p>
<p><img src="/images/1557027948031.png" alt=""></p>
<p>1）点击链接127.0.0.1:8000/stu/students 可以访问<strong>获取所有数据的接口</strong>，呈现如下页面：</p>
<p><img src="/images/1557027878963.png" alt=""></p>
<p>2）在页面底下表单部分填写学生信息，可以访问<strong>添加新学生的接口</strong>，保存学生信息：</p>
<p><img src="/images/1557027999506.png" alt=""></p>
<p>点击POST后，返回如下页面信息：</p>
<p><img src="/images/1557028072470.png" alt=""></p>
<p>3）在浏览器中输入网址127.0.0.1:8000/stu/students/5/，可以访问<strong>获取单一学生信息的接口</strong>（id为5的学生），呈现如下页面：</p>
<p><img src="/images/1557028115925.png" alt=""></p>
<p>4）在页面底部表单中填写学生信息，可以访问<strong>修改学生的接口</strong>：</p>
<p><img src="/images/1557028168350.png" alt=""></p>
<p>点击PUT，返回如下页面信息：</p>
<p><img src="/images/1557028208243.png" alt=""></p>
<p>5）点击DELETE按钮，可以访问<strong>删除学生的接口</strong>：</p>
<p><img src="/images/1557028242637.png" alt=""></p>
<p>返回，如下页面：</p>
<p><img src="/images/1557028266190.png" alt=""></p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>Django Rest_Framework</tag>
      </tags>
  </entry>
  <entry>
    <title>[Cookie与Session]</title>
    <url>/2020/02/16/Cookie%E4%B8%8ESession/</url>
    <content><![CDATA[<h3 id="cookie与session"><a href="#cookie与session" class="headerlink" title="cookie与session"></a>cookie与session</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">发展史</span></span><br><span class="line"><span class="string">	1.网站都没有保存用户功能的需求 所有用户访问返回的结果都是一样的</span></span><br><span class="line"><span class="string">		eg:新闻、博客、文章...</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">	2.出现了一些需要保存用户信息的网站</span></span><br><span class="line"><span class="string">		eg:淘宝、支付宝、京东...</span></span><br><span class="line"><span class="string">		</span></span><br><span class="line"><span class="string">		以登陆功能为例:如果不保存用户登陆状态 也就意味着用户每次访问网站都需要重复的输入用户名和密码(你觉得这样的网站你还想用吗？)</span></span><br><span class="line"><span class="string">		当用户第一次登陆成功之后 将用户的用户名密码返回给用户浏览器 让用户浏览器保存在本地，之后访问网站的时候浏览器自动将保存在浏览器上的用户名和密码发送给服务端，服务端获取之后自动验证</span></span><br><span class="line"><span class="string">		早起这种方式具有非常大的安全隐患</span></span><br><span class="line"><span class="string">		</span></span><br><span class="line"><span class="string">		</span></span><br><span class="line"><span class="string">		优化:</span></span><br><span class="line"><span class="string">			当用户登陆成功之后，服务端产生一个随机字符串(在服务端保存数据,用kv键值对的形式)，交由客户端浏览器保存</span></span><br><span class="line"><span class="string">			随机字符串1:用户1相关信息</span></span><br><span class="line"><span class="string">			随机字符串2:用户2相关信息</span></span><br><span class="line"><span class="string">			随机字符串3:用户3相关信息</span></span><br><span class="line"><span class="string">			之后访问服务端的时候，都带着该随机字符串，服务端去数据库中比对是否有对应的随机字符串从而获取到对应的用户信息</span></span><br><span class="line"><span class="string">			</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">但是如果你拿到了截获到了该随机字符串，那么你就可以冒充当前用户 其实还是有安全隐患的</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">你要知道在web领域没有绝对的安全也没有绝对的不安全</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">cookie</span><br><span class="line">	服务端保存在客户端浏览器上的信息都可以称之为cookie</span><br><span class="line">  它的表现形式一般都是k:v键值对(可以有多个)</span><br><span class="line">session</span><br><span class="line">	数据是保存在服务端的并且它的表现形式一般也是k:v键值对(可以有多个)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">下述内容暂时了解即可 先给我搞明白最简单的cookie与session使用再说话！</span><br><span class="line">token</span><br><span class="line">	session虽然数据是保存在服务端的 但是禁不住数据量大</span><br><span class="line">  服务端不再保存数据</span><br><span class="line">  	登陆成功之后 将一段用户信息进行加密处理(加密算法只有你公司开发知道)</span><br><span class="line">    将加密之后的结果拼接在信息后面 整体返回给浏览器保存 </span><br><span class="line">    浏览器下次访问的时候带着该信息 服务端自动切去前面一段信息再次使用自己的加密算法</span><br><span class="line">    跟浏览器尾部的密文进行比对</span><br><span class="line">jwt认证</span><br><span class="line">	三段信息</span><br><span class="line">  (后期会讲 结合django一起使用) </span><br><span class="line">	</span><br><span class="line">总结:</span><br><span class="line">  	<span class="number">1.</span>cookie就是保存在客户端浏览器上的信息</span><br><span class="line">    <span class="number">2.</span>session就是保存在服务端上的信息</span><br><span class="line">    <span class="number">3.</span>session是基于cookie工作的(其实大部分的保存用户状态的操作都需要使用到cookie)</span><br></pre></td></tr></table></figure>

<h3 id="Cookie操作"><a href="#Cookie操作" class="headerlink" title="Cookie操作"></a>Cookie操作</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 虽然cookie是服务端告诉客户端浏览器需要保存内容</span></span><br><span class="line"><span class="comment"># 但是客户端浏览器可以选择拒绝保存 如果禁止了 那么 只要是需要记录用户状态的网站登陆功能都无法使用了</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 视图函数的返回值</span></span><br><span class="line"><span class="keyword">return</span> HttpResponse()</span><br><span class="line"><span class="keyword">return</span> render()</span><br><span class="line"><span class="keyword">return</span> redirect()</span><br><span class="line"></span><br><span class="line">obj1 = HttpResponse()</span><br><span class="line"><span class="comment"># 操作cookie</span></span><br><span class="line"><span class="keyword">return</span> obj1</span><br><span class="line"></span><br><span class="line">obj2 = render()</span><br><span class="line"><span class="comment"># 操作cookie</span></span><br><span class="line"><span class="keyword">return</span> obj2</span><br><span class="line"></span><br><span class="line">obj3 = redirect()</span><br><span class="line"><span class="comment"># 操作cookie</span></span><br><span class="line"><span class="keyword">return</span> obj3</span><br><span class="line"><span class="comment"># 如果你想要操作cookie，你就不得不利用obj对象</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">设置cookie</span></span><br><span class="line"><span class="string">	obj.set_cookie(key,value)</span></span><br><span class="line"><span class="string">获取cookie</span></span><br><span class="line"><span class="string">	request.COOKIES.get(key)</span></span><br><span class="line"><span class="string">在设置cookie的时候可以添加一个超时时间</span></span><br><span class="line"><span class="string">	obj.set_cookie('username', 'jason666',max_age=3,expires=3)</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">	max_age</span></span><br><span class="line"><span class="string">	expires</span></span><br><span class="line"><span class="string">		两者都是设置超时时间的 并且都是以秒为单位</span></span><br><span class="line"><span class="string">		需要注意的是 针对IE浏览器需要使用expires</span></span><br><span class="line"><span class="string">主动删除cookie(注销功能)</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment"># 我们完成一个真正的登陆功能</span></span><br><span class="line"><span class="comment"># 校验用户是否登陆的装饰器</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">用户如果在没有登陆的情况下想访问一个需要登陆的页面</span></span><br><span class="line"><span class="string">那么先跳转到登陆页面 当用户输入正确的用户名和密码之后</span></span><br><span class="line"><span class="string">应该跳转到用户之前想要访问的页面去 而不是直接写死</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login_auth</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">(request,*args,**kwargs)</span>:</span></span><br><span class="line">        <span class="comment"># print(request.path_info)</span></span><br><span class="line">        <span class="comment"># print(request.get_full_path())  # 能够获取到用户上一次想要访问的url</span></span><br><span class="line">        target_url = request.get_full_path()</span><br><span class="line">        <span class="keyword">if</span> request.COOKIES.get(<span class="string">'username'</span>):</span><br><span class="line">            <span class="keyword">return</span> func(request,*args,**kwargs)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> redirect(<span class="string">'/login/?next=%s'</span>%target_url)</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'POST'</span>:</span><br><span class="line">        username = request.POST.get(<span class="string">'username'</span>)</span><br><span class="line">        password = request.POST.get(<span class="string">'password'</span>)</span><br><span class="line">        <span class="keyword">if</span> username == <span class="string">'jason'</span> <span class="keyword">and</span> password == <span class="string">'123'</span>:</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 获取用户上一次想要访问的url</span></span><br><span class="line">            target_url = request.GET.get(<span class="string">'next'</span>)  <span class="comment"># 这个结果可能是None</span></span><br><span class="line">            <span class="keyword">if</span> target_url:</span><br><span class="line">                obj = redirect(target_url)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># 保存用户登陆状态</span></span><br><span class="line">                obj = redirect(<span class="string">'/home/'</span>)</span><br><span class="line">            <span class="comment"># 让浏览器记录cookie数据</span></span><br><span class="line">            obj.set_cookie(<span class="string">'username'</span>, <span class="string">'jason666'</span>)</span><br><span class="line">            <span class="string">"""</span></span><br><span class="line"><span class="string">            浏览器不单单会帮你存</span></span><br><span class="line"><span class="string">            而且后面每次访问你的时候还会带着它过来</span></span><br><span class="line"><span class="string">            """</span></span><br><span class="line">            <span class="comment"># 跳转到一个需要用户登陆之后才能看的页面</span></span><br><span class="line">            <span class="keyword">return</span> obj</span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">'login.html'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@login_auth</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">home</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="comment"># 获取cookie信息 判断你有没有</span></span><br><span class="line">    <span class="comment"># if request.COOKIES.get('username') == 'jason666':</span></span><br><span class="line">    <span class="comment">#     return HttpResponse("我是home页面，只有登陆的用户才能进来哟~")</span></span><br><span class="line">    <span class="comment"># # 没有登陆应该跳转到登陆页面</span></span><br><span class="line">    <span class="comment"># return redirect('/login/')</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">"我是home页面，只有登陆的用户才能进来哟~"</span>)</span><br></pre></td></tr></table></figure>

<h3 id="session操作"><a href="#session操作" class="headerlink" title="session操作"></a>session操作</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">session数据是保存在服务端的(存？)，给客户端返回的是一个随机字符串</span></span><br><span class="line"><span class="string">	sessionid:随机字符串</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">1.在默认情况下操作session的时候需要django默认的一张django_session表</span></span><br><span class="line"><span class="string">	数据库迁移命令</span></span><br><span class="line"><span class="string">		django会自己创建很多表	django_session就是其中的一张</span></span><br><span class="line"><span class="string">		</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">django默认session的过期时间是14天</span></span><br><span class="line"><span class="string">	但是你也可以人为的修改它</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">设置session	</span></span><br><span class="line"><span class="string">request.session['key'] = value</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">获取session</span></span><br><span class="line"><span class="string">request.session.get('key')</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">设置过期时间</span></span><br><span class="line"><span class="string">request.session.set_expiry()</span></span><br><span class="line"><span class="string">	括号内可以放四种类型的参数</span></span><br><span class="line"><span class="string">		1.整数			   多少秒</span></span><br><span class="line"><span class="string">		2.日期对象			  到指定日期就失效</span></span><br><span class="line"><span class="string">		3.0					一旦当前浏览器窗口关闭立刻失效</span></span><br><span class="line"><span class="string">		4.不写			   失效时间就取决于django内部全局session默认的失效时间</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">清除session	</span></span><br><span class="line"><span class="string">	request.session.delete()  # 只删服务端的 客户端的不删</span></span><br><span class="line"><span class="string">	request.session.flush()  # 浏览器和服务端都清空(推荐使用)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">session是保存在服务端的 但是session的保存位置可以有多种选择</span></span><br><span class="line"><span class="string">	1.MySQL</span></span><br><span class="line"><span class="string">	2.文件</span></span><br><span class="line"><span class="string">	3.redis</span></span><br><span class="line"><span class="string">	4.memcache</span></span><br><span class="line"><span class="string">	...</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">django_session表中的数据条数是取决于浏览器的</span></span><br><span class="line"><span class="string">	同一个计算机上(IP地址)同一个浏览器只会有一条数据生效</span></span><br><span class="line"><span class="string">	(当session过期的时候可能会出现多条数据对应一个浏览器，但是该现象不会持续很久，内部会自动识别过期的数据清除 你也可以通过代码清除)</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">	主要是为了节省服务端数据库资源</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">request.session[<span class="string">'hobby'</span>] = <span class="string">'girl'</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    内部发送了那些事</span></span><br><span class="line"><span class="string">        1.django内部会自动帮你生成一个随机字符串</span></span><br><span class="line"><span class="string">        2.django内部自动将随机字符串和对应的数据存储到django_session表中</span></span><br><span class="line"><span class="string">            2.1先在内存中产生操作数据的缓存</span></span><br><span class="line"><span class="string">            2.2在响应结果django中间件的时候才真正的操作数据库</span></span><br><span class="line"><span class="string">        3.将产生的随机字符串返回给客户端浏览器保存</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">request.session.get(<span class="string">'hobby'</span>)</span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    内部发送了那些事</span></span><br><span class="line"><span class="string">        1.自动从浏览器请求中获取sessionid对应的随机字符串</span></span><br><span class="line"><span class="string">        2.拿着该随机字符串去django_session表中查找对应的数据</span></span><br><span class="line"><span class="string">        3.</span></span><br><span class="line"><span class="string">            如果比对上了 则将对应的数据取出并以字典的形式封装到request.session中</span></span><br><span class="line"><span class="string">            如果比对不上 则request.session.get()返回的是None</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 利用session实现登陆验证</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>django框架</tag>
      </tags>
  </entry>
  <entry>
    <title>[虚拟化环境]</title>
    <url>/2019/03/20/%E8%99%9A%E6%8B%9F%E5%8C%96%E7%8E%AF%E5%A2%83/</url>
    <content><![CDATA[<h1 id="虚拟机的创建"><a href="#虚拟机的创建" class="headerlink" title="虚拟机的创建"></a>虚拟机的创建</h1><p>新建虚拟机</p>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20220327234018941.png" alt="image-20220327234018941"></p>
<ul>
<li><p>典型（推荐）</p>
</li>
<li><p>自定义</p>
</li>
</ul>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20220318231302176.png" alt="image-20220318231302176"></p>
<ul>
<li><p>安装程序光盘</p>
</li>
<li><p>安装程序光盘映像文件</p>
</li>
<li><p>稍后安装操作系统（推荐）</p>
</li>
</ul>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20220318231421915.png" alt="image-20220318231421915"></p>
<ul>
<li><p>Linux</p>
</li>
<li><p>CentOS 7 64位（CentOS 64位）</p>
</li>
</ul>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20220318231701504.png" alt="image-20220318231701504"></p>
<ul>
<li><p>命名虚拟机</p>
</li>
<li><p>保存虚拟机位置</p>
</li>
</ul>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20220318231838942.png" alt="image-20220318231838942"></p>
<ul>
<li>磁盘容量：20G</li>
</ul>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20220318231920872.png" alt="image-20220318231920872"></p>
<ul>
<li>完成</li>
</ul>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20220318232005796.png" alt="image-20220318232005796"></p>
<h1 id="CentOS安装"><a href="#CentOS安装" class="headerlink" title="CentOS安装"></a>CentOS安装</h1><p>打开CD/DVD光驱 -&gt; 使用ISO映像文件 -&gt; 浏览（找到iso文件位置）-&gt; 勾选”启动时连接”</p>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20220318232308150.png" alt="image-20220318232308150"></p>
<p>开启虚拟机</p>
<p>呼出鼠标：Ctrl + Alt</p>
<ul>
<li><p><font color="red">Install CentOS 7 安装CentOS7系统 (推荐)</font></p>
</li>
<li><p>Test this media &amp; install CentOS 7 先测试镜像，然后再安装CentOS7</p>
</li>
<li><p>救援模式（修复系统，忘记密码，修改密码）</p>
</li>
</ul>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20220318232455160.png" alt="image-20220318232455160"></p>
<p>选择英文-&gt; continue</p>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20220318232552218.png" alt="image-20220318232552218"></p>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20220318232702066.png" alt="image-20220318232702066"></p>
<p>设置时区 DATE &amp; TIME：Asia Shanghai</p>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20220318232643123.png" alt="image-20220318232643123"></p>
<p>关闭KDUMP功能</p>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20220318232737541.png" alt="image-20220318232737541"></p>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20220318232751920.png" alt="image-20220318232751920"></p>
<p>磁盘分区</p>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20220318232813349.png" alt="image-20220318232813349"></p>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20220318232949907.png" alt="image-20220318232949907"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/：根分区 </span><br><span class="line">/boot：系统启动文件存放分区 500M </span><br><span class="line">swap：虚拟内存分区 1024M 真实内存的1~2倍 最高8G</span><br></pre></td></tr></table></figure>

<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20220318233029577.png" alt="image-20220318233029577"></p>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20220318233052284.png" alt="image-20220318233052284"></p>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20220318233115380.png" alt="image-20220318233115380"></p>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20220318233129826.png" alt="image-20220318233129826"></p>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20220318233146258.png" alt="image-20220318233146258"></p>
<p>网络配置</p>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20220318233203911.png" alt="image-20220318233203911"></p>
<ul>
<li><p>DHCP：动态获取IP地址，地址有租期，租期到了，会更改IP</p>
</li>
<li><p>Address：IP地址（计算机之间进行通信的手机号）</p>
</li>
<li><p>NetMask：子网掩码，划分网段，区分网段，决定计算机之间的网络是否可以正常通信</p>
</li>
<li><p>DNS：域名解析服务器</p>
</li>
</ul>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20220318233247528.png" alt="image-20220318233247528"></p>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20220318233444931.png" alt="image-20220318233444931"></p>
<p>设置密码</p>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20220318233512767.png" alt="image-20220318233512767"></p>
<h1 id="虚拟机网络"><a href="#虚拟机网络" class="headerlink" title="虚拟机网络"></a>虚拟机网络</h1><h2 id="网卡配置"><a href="#网卡配置" class="headerlink" title="网卡配置"></a>网卡配置</h2><p>静态<code>IP</code>，不使用<code>DHCP</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">静态IP，不使用DHCP</span><br><span class="line"><span class="comment">#IP地址</span></span><br><span class="line">Address：10.0.0.100</span><br><span class="line"><span class="comment">#子网掩码</span></span><br><span class="line">Netmask：255.255.255.0（24位）</span><br><span class="line"><span class="comment">#网关</span></span><br><span class="line">Gateway：10.0.0.2</span><br></pre></td></tr></table></figure>

<h2 id="虚拟机网络模式"><a href="#虚拟机网络模式" class="headerlink" title="虚拟机网络模式"></a>虚拟机网络模式</h2><ul>
<li><p>桥接模式</p>
<ul>
<li>物理机网络与虚拟机网络共享</li>
<li>物理机与虚拟机需要在同一个网段</li>
<li>可用地址0-255（除0、1、2：网关、255）</li>
<li>耗费IP（IP不能冲突）</li>
</ul>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20220320211342799.png" alt="image-20220320211342799"></p>
</li>
<li><p>NAT模式</p>
<ul>
<li>路由器将一个公有地址转换为多个私有地址（NAT动态网络地址转换）</li>
<li><code>DHCP</code>：动态获取<code>IP</code>地址</li>
</ul>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20220320211622639.png" alt="image-20220320211622639"></p>
</li>
<li><p>仅主机模式</p>
<ul>
<li>虚拟机之间相互通信，无法上外网（局域网）</li>
</ul>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20220320211651398.png" alt="image-20220320211651398"></p>
</li>
</ul>
<p>虚拟机配置NAT上网</p>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20220320204811328.png" alt="image-20220320204811328"></p>
<p>打开虚拟网络编辑器</p>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20220320204841949.png" alt="image-20220320204841949"></p>
<p>检测服务器与外网是否可以正常通信</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ping 命令（打电话） </span><br><span class="line">ping www.baidu.com</span><br></pre></td></tr></table></figure>

<h1 id="Xshell的使用"><a href="#Xshell的使用" class="headerlink" title="Xshell的使用"></a>Xshell的使用</h1><ul>
<li>新建会话</li>
</ul>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20220320212813333.png" alt="image-20220320212813333"></p>
<ul>
<li>设置会话属性</li>
</ul>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20220320212929548.png" alt="image-20220320212929548"></p>
<ul>
<li>用户身份验证</li>
</ul>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20220320213002275.png" alt="image-20220320213002275"></p>
<ul>
<li>连接虚拟机</li>
</ul>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20220320213027809.png" alt="image-20220320213027809"></p>
<p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20220320213043806.png" alt="image-20220320213043806"></p>
<h2 id="Xshell连接虚拟机排错方案"><a href="#Xshell连接虚拟机排错方案" class="headerlink" title="Xshell连接虚拟机排错方案"></a>Xshell连接虚拟机排错方案</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1.搞清楚，谁连接谁 </span></span><br><span class="line"></span><br><span class="line">检测物理机跟虚拟机之间是否能通信 </span><br><span class="line">windows + r </span><br><span class="line">ping <span class="number">10.0</span><span class="number">.0</span><span class="number">.100</span>（虚拟机的IP） </span><br><span class="line"></span><br><span class="line"><span class="comment">#2.如何查看自己本机的IP地址 </span></span><br><span class="line">Linux：ip a </span><br><span class="line">windows：ipconfig</span><br></pre></td></tr></table></figure>

<h1 id="虚拟机的快照"><a href="#虚拟机的快照" class="headerlink" title="虚拟机的快照"></a>虚拟机的快照</h1><p>记录虚拟机某时刻的状态，随时可以还原到记录的状态（存档，读档）</p>
<p>注意：快照尽量在关机状态下拍摄</p>
<h1 id="虚拟机的克隆"><a href="#虚拟机的克隆" class="headerlink" title="虚拟机的克隆"></a>虚拟机的克隆</h1><p>克隆的前提条件：必须在虚拟机关机状态下，才能克隆</p>
<h3 id="克隆的两种方式"><a href="#克隆的两种方式" class="headerlink" title="克隆的两种方式"></a>克隆的两种方式</h3><ul>
<li><p>克隆当前虚拟机状态</p>
</li>
<li><p>从快 照状态克隆</p>
</li>
</ul>
<h3 id="克隆类型"><a href="#克隆类型" class="headerlink" title="克隆类型"></a>克隆类型</h3><p>创建链接克隆</p>
<ul>
<li><p>优点：</p>
<ul>
<li>克隆速度快</li>
<li>占用资源少</li>
</ul>
</li>
<li><p>缺点：</p>
<ul>
<li>受到母体的影响（如果源主机被删除，则克隆主机无法使用）</li>
</ul>
</li>
</ul>
<p>创建完整克隆</p>
<ul>
<li><p>优点：</p>
<ul>
<li>不受到母体的影响（源主机被删除，克隆机可以继续使用）</li>
</ul>
</li>
<li><p>缺点：</p>
<ul>
<li>克隆速度慢</li>
<li>占用资源多</li>
</ul>
</li>
</ul>
<p><strong>注意：</strong>克隆出来的虚拟机和源主机，配置一模一样，要修改<code>IP</code>，并且，只能一台一台启动</p>
<h1 id="GUI图形化"><a href="#GUI图形化" class="headerlink" title="GUI图形化"></a>GUI图形化</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#修改网卡配置文件 </span></span><br><span class="line">nmtui</span><br><span class="line"></span><br><span class="line"><span class="comment">#重启网卡 </span></span><br><span class="line">systemctl restart network</span><br><span class="line"></span><br><span class="line">ps：改完IP需重启Xshell</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>SRE</category>
      </categories>
      <tags>
        <tag>Linxu基础</tag>
      </tags>
  </entry>
  <entry>
    <title>[Django Rest Framework]</title>
    <url>/2020/04/22/Django%20Rest%20Framework%E6%A1%86%E6%9E%B6/</url>
    <content><![CDATA[<h1 id="DRF框架"><a href="#DRF框架" class="headerlink" title="DRF框架"></a>DRF框架</h1><p>Django Rest Framework 是一个强大且灵活的工具包，用以构建Web API</p>
<p>为什么要使用Rest Framework</p>
<p>Django REST Framework可以在Django的基础上迅速实现API，并且自身还带有WEB的测试页面，可以方便的测试自己的API</p>
<p><a href="https://rogerxs80.github.io/2020/04/22/API%E8%A7%84%E8%8C%83%E4%B8%8Edrf%E5%AE%89%E8%A3%85/" target="_blank" rel="noopener">1.restful API规范与DRF安装</a></p>
<p><a href="https://rogerxs80.github.io/2020/04/22/%E5%BA%8F%E5%88%97%E5%8C%96%E5%99%A8-Serializer/" target="_blank" rel="noopener">2.序列化器-Serializer</a></p>
<p><a href="https://rogerxs80.github.io/2020/04/22/http%E8%AF%B7%E6%B1%82%E5%A4%84%E7%90%86/" target="_blank" rel="noopener">3.HTTP请求处理</a></p>
<p><a href="https://rogerxs80.github.io/2020/04/22/%E8%A7%86%E5%9B%BEView%E4%B8%8E%E8%B7%AF%E7%94%B1Router/" target="_blank" rel="noopener">4.视图View与路由Router</a></p>
<p><a href="https://rogerxs80.github.io/2020/04/22/DRF%E6%A1%86%E6%9E%B6%E4%B8%AD%E5%B8%B8%E7%94%A8%E7%9A%84%E7%BB%84%E4%BB%B6/" target="_blank" rel="noopener">5.DRF框架中常用的组件</a></p>
<p><a href="https://www.notion.so/xadmin-2047b48498d2461e9f91191fe07a8738" target="_blank" rel="noopener">6.xadmin</a></p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>Django Rest_Framework</tag>
      </tags>
  </entry>
  <entry>
    <title>[Django中间件与csrf跨站请求伪造]</title>
    <url>/2020/02/17/Django%E4%B8%AD%E9%97%B4%E4%BB%B6%E4%B8%8Ecsrf%E8%B7%A8%E7%AB%99%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0/</url>
    <content><![CDATA[<h3 id="django中间件"><a href="#django中间件" class="headerlink" title="django中间件"></a>django中间件</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">django中间件是django的门户</span></span><br><span class="line"><span class="string">1.请求来的时候需要先经过中间件才能到达真正的django后端</span></span><br><span class="line"><span class="string">2.响应走的时候最后也需要经过中间件才能发送出去</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">django自带七个中间件</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">django请求生命周期流程图</span><br><span class="line"></span><br><span class="line">研究django中间件代码规律</span><br><span class="line">MIDDLEWARE = [</span><br><span class="line">    <span class="string">'django.middleware.security.SecurityMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.contrib.sessions.middleware.SessionMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.middleware.common.CommonMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.middleware.csrf.CsrfViewMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.contrib.auth.middleware.AuthenticationMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.contrib.messages.middleware.MessageMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.middleware.clickjacking.XFrameOptionsMiddleware'</span>,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SessionMiddleware</span><span class="params">(MiddlewareMixin)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_request</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        session_key = request.COOKIES.get(settings.SESSION_COOKIE_NAME)</span><br><span class="line">        request.session = self.SessionStore(session_key)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_response</span><span class="params">(self, request, response)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> response</span><br><span class="line">      </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CsrfViewMiddleware</span><span class="params">(MiddlewareMixin)</span>:</span></span><br><span class="line">  	<span class="function"><span class="keyword">def</span> <span class="title">process_request</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        csrf_token = self._get_token(request)</span><br><span class="line">        <span class="keyword">if</span> csrf_token <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="comment"># Use same token next time.</span></span><br><span class="line">            request.META[<span class="string">'CSRF_COOKIE'</span>] = csrf_token</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_view</span><span class="params">(self, request, callback, callback_args, callback_kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self._accept(request)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_response</span><span class="params">(self, request, response)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> response</span><br><span class="line">      </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AuthenticationMiddleware</span><span class="params">(MiddlewareMixin)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_request</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        request.user = SimpleLazyObject(<span class="keyword">lambda</span>: get_user(request))</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">django支持程序员自定义中间件并且暴露给程序员五个可以自定义的方法</span></span><br><span class="line"><span class="string">	1.必须掌握</span></span><br><span class="line"><span class="string">		process_request</span></span><br><span class="line"><span class="string">		</span></span><br><span class="line"><span class="string">		process_response</span></span><br><span class="line"><span class="string">	2.了解即可</span></span><br><span class="line"><span class="string">		process_view</span></span><br><span class="line"><span class="string">			</span></span><br><span class="line"><span class="string">		process_template_response</span></span><br><span class="line"><span class="string">		</span></span><br><span class="line"><span class="string">		process_exception</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<h3 id="如何自定义中间件"><a href="#如何自定义中间件" class="headerlink" title="如何自定义中间件"></a>如何自定义中间件</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">1.在项目名或者应用名下创建一个任意名称的文件夹</span></span><br><span class="line"><span class="string">2.在该文件夹内创建一个任意名称的py文件</span></span><br><span class="line"><span class="string">3.在该py文件内需要书写类(这个类必须继承MiddlewareMixin)</span></span><br><span class="line"><span class="string">	然后在这个类里面就可以自定义五个方法了</span></span><br><span class="line"><span class="string">	(这五个方法并不是全部都需要书写，用几个写几个)</span></span><br><span class="line"><span class="string">4.需要将类的路径以字符串的形式注册到配置文件中才能生效</span></span><br><span class="line"><span class="string">MIDDLEWARE = [</span></span><br><span class="line"><span class="string">    'django.middleware.security.SecurityMiddleware',</span></span><br><span class="line"><span class="string">    'django.contrib.sessions.middleware.SessionMiddleware',</span></span><br><span class="line"><span class="string">    'django.middleware.common.CommonMiddleware',</span></span><br><span class="line"><span class="string">    'django.middleware.csrf.CsrfViewMiddleware',</span></span><br><span class="line"><span class="string">    'django.contrib.auth.middleware.AuthenticationMiddleware',</span></span><br><span class="line"><span class="string">    'django.contrib.messages.middleware.MessageMiddleware',</span></span><br><span class="line"><span class="string">    'django.middleware.clickjacking.XFrameOptionsMiddleware',</span></span><br><span class="line"><span class="string">    '你自己写的中间件的路径1',</span></span><br><span class="line"><span class="string">    '你自己写的中间件的路径2',</span></span><br><span class="line"><span class="string">    '你自己写的中间件的路径3',</span></span><br><span class="line"><span class="string">]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">1.必须掌握</span></span><br><span class="line"><span class="string">		process_request </span></span><br><span class="line"><span class="string">			1.请求来的时候需要经过每一个中间件里面的process_request方法</span></span><br><span class="line"><span class="string">			结果的顺序是按照配置文件中注册的中间件从上往下的顺序依次执行</span></span><br><span class="line"><span class="string">			2.如果中间件里面没有定义该方法，那么直接跳过执行下一个中间件</span></span><br><span class="line"><span class="string">			3.如果该方法返回了HttpResponse对象，那么请求将不再继续往后执行</span></span><br><span class="line"><span class="string">			而是直接原路返回(校验失败不允许访问...)</span></span><br><span class="line"><span class="string">			process_request方法就是用来做全局相关的所有限制功能</span></span><br><span class="line"><span class="string">			</span></span><br><span class="line"><span class="string">		process_response</span></span><br><span class="line"><span class="string">			1.响应走的时候需要结果每一个中间件里面的process_response方法</span></span><br><span class="line"><span class="string">			该方法有两个额外的参数request,response</span></span><br><span class="line"><span class="string">			2.该方法必须返回一个HttpResponse对象</span></span><br><span class="line"><span class="string">				1.默认返回的就是形参response</span></span><br><span class="line"><span class="string">				2.你也可以自己返回自己的</span></span><br><span class="line"><span class="string">			3.顺序是按照配置文件中注册了的中间件从下往上依次经过</span></span><br><span class="line"><span class="string">				如果你没有定义的话 直接跳过执行下一个</span></span><br><span class="line"><span class="string">		</span></span><br><span class="line"><span class="string">		研究如果在第一个process_request方法就已经返回了HttpResponse对象，那么响应走的时候是经过所有的中间件里面的process_response还是有其他情况</span></span><br><span class="line"><span class="string">		是其他情况</span></span><br><span class="line"><span class="string">			就是会直接走同级别的process_reponse返回</span></span><br><span class="line"><span class="string">		</span></span><br><span class="line"><span class="string">		flask框架也有一个中间件但是它的规律</span></span><br><span class="line"><span class="string">			只要返回数据了就必须经过所有中间件里面的类似于process_reponse方法</span></span><br><span class="line"><span class="string">			</span></span><br><span class="line"><span class="string">			</span></span><br><span class="line"><span class="string">2.了解即可</span></span><br><span class="line"><span class="string">		process_view</span></span><br><span class="line"><span class="string">			路由匹配成功之后执行视图函数之前，会自动执行中间件里面的该放法</span></span><br><span class="line"><span class="string">			顺序是按照配置文件中注册的中间件从上往下的顺序依次执行</span></span><br><span class="line"><span class="string">			</span></span><br><span class="line"><span class="string">		process_template_response</span></span><br><span class="line"><span class="string">			返回的HttpResponse对象有render属性的时候才会触发</span></span><br><span class="line"><span class="string">			顺序是按照配置文件中注册了的中间件从下往上依次经过</span></span><br><span class="line"><span class="string">			</span></span><br><span class="line"><span class="string">		process_exception</span></span><br><span class="line"><span class="string">			当视图函数中出现异常的情况下触发</span></span><br><span class="line"><span class="string">			顺序是按照配置文件中注册了的中间件从下往上依次经过</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<h3 id="csrf跨站请求伪造"><a href="#csrf跨站请求伪造" class="headerlink" title="csrf跨站请求伪造"></a>csrf跨站请求伪造</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">钓鱼网站</span></span><br><span class="line"><span class="string">	我搭建一个跟正规网站一模一样的界面(中国银行)</span></span><br><span class="line"><span class="string">	用户不小心进入到了我们的网站，用户给某个人打钱</span></span><br><span class="line"><span class="string">	打钱的操作确确实实是提交给了中国银行的系统，用户的钱也确确实实减少了</span></span><br><span class="line"><span class="string">	但是唯一不同的时候打钱的账户不是用户想要打的账户变成了一个莫名其妙的账户</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">大学英语四六级</span></span><br><span class="line"><span class="string">	考之前需要学生自己网站登陆缴费</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">内部本质</span></span><br><span class="line"><span class="string">	我们在钓鱼网站的页面 针对对方账户 只给用户提供一个没有name属性的普通input框</span></span><br><span class="line"><span class="string">	然后我们在内部隐藏一个已经写好name和value的input框</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">如何规避上述问题</span></span><br><span class="line"><span class="string">	csrf跨站请求伪造校验</span></span><br><span class="line"><span class="string">		网站在给用户返回一个具有提交数据功能页面的时候会给这个页面加一个唯一标识</span></span><br><span class="line"><span class="string">		当这个页面朝后端发送post请求的时候 我的后端会先校验唯一标识，如果唯一标识不对直接拒绝(403 forbbiden)如果成功则正常执行	</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<h3 id="如何符合校验"><a href="#如何符合校验" class="headerlink" title="如何符合校验"></a>如何符合校验</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># form表单如何符合校验</span></span><br><span class="line">&lt;form action=<span class="string">""</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">    &#123;% csrf_token %&#125;</span><br><span class="line">    &lt;p&gt;username:&lt;input type="text" name="username"&gt;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;target_user:&lt;input type="text" name="target_user"&gt;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;money:&lt;input type="text" name="money"&gt;&lt;/p&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># ajax如何符合校验</span></span><br><span class="line">// 第一种 利用标签查找获取页面上的随机字符串</span><br><span class="line">&#123;<span class="comment">#data:&#123;"username":'jason','csrfmiddlewaretoken':$('[name=csrfmiddlewaretoken]').val()&#125;,#&#125;</span></span><br><span class="line">// 第二种 利用模版语法提供的快捷书写</span><br><span class="line">&#123;<span class="comment">#data:&#123;"username":'jason','csrfmiddlewaretoken':'&#123;&#123; csrf_token &#125;&#125;'&#125;,#&#125;</span></span><br><span class="line">// 第三种 通用方式直接拷贝js代码并应用到自己的html页面上即可</span><br><span class="line">data:&#123;<span class="string">"username"</span>:<span class="string">'jason'</span>&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">function getCookie(name) &#123;</span><br><span class="line">    var cookieValue = null;</span><br><span class="line">    <span class="keyword">if</span> (document.cookie &amp;&amp; document.cookie !== <span class="string">''</span>) &#123;</span><br><span class="line">        var cookies = document.cookie.split(<span class="string">';'</span>);</span><br><span class="line">        <span class="keyword">for</span> (var i = <span class="number">0</span>; i &lt; cookies.length; i++) &#123;</span><br><span class="line">            var cookie = jQuery.trim(cookies[i]);</span><br><span class="line">            // Does this cookie string begin with the name we want?</span><br><span class="line">            <span class="keyword">if</span> (cookie.substring(<span class="number">0</span>, name.length + <span class="number">1</span>) === (name + <span class="string">'='</span>)) &#123;</span><br><span class="line">                cookieValue = decodeURIComponent(cookie.substring(name.length + <span class="number">1</span>));</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cookieValue;</span><br><span class="line">&#125;</span><br><span class="line">var csrftoken = getCookie(<span class="string">'csrftoken'</span>);</span><br><span class="line"></span><br><span class="line">function csrfSafeMethod(method) &#123;</span><br><span class="line">  // these HTTP methods do <span class="keyword">not</span> require CSRF protection</span><br><span class="line">  <span class="keyword">return</span> (/^(GET|HEAD|OPTIONS|TRACE)$/.test(method));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$.ajaxSetup(&#123;</span><br><span class="line">  beforeSend: function (xhr, settings) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!csrfSafeMethod(settings.type) &amp;&amp; !this.crossDomain) &#123;</span><br><span class="line">      xhr.setRequestHeader(<span class="string">"X-CSRFToken"</span>, csrftoken);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="csrf相关装饰器"><a href="#csrf相关装饰器" class="headerlink" title="csrf相关装饰器"></a>csrf相关装饰器</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">1.网站整体都不校验csrf，就单单几个视图函数需要校验</span></span><br><span class="line"><span class="string">2.网站整体都校验csrf，就单单几个视图函数不校验</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">from</span> django.views.decorators.csrf <span class="keyword">import</span> csrf_protect,csrf_exempt</span><br><span class="line"><span class="keyword">from</span> django.utils.decorators <span class="keyword">import</span> method_decorator</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">csrf_protect  需要校验</span></span><br><span class="line"><span class="string">    针对csrf_protect符合我们之前所学的装饰器的三种玩法</span></span><br><span class="line"><span class="string">csrf_exempt   忽视校验</span></span><br><span class="line"><span class="string">    针对csrf_exempt只能给dispatch方法加才有效</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment"># @csrf_exempt</span></span><br><span class="line"><span class="comment"># @csrf_protect</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">transfer</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'POST'</span>:</span><br><span class="line">        username = request.POST.get(<span class="string">'username'</span>)</span><br><span class="line">        target_user = request.POST.get(<span class="string">'target_user'</span>)</span><br><span class="line">        money = request.POST.get(<span class="string">'money'</span>)</span><br><span class="line">        print(<span class="string">'%s给%s转了%s元'</span>%(username,target_user,money))</span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">'transfer.html'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.views <span class="keyword">import</span> View</span><br><span class="line"></span><br><span class="line"><span class="comment"># @method_decorator(csrf_protect,name='post')  # 针对csrf_protect 第二种方式可以</span></span><br><span class="line"><span class="comment"># @method_decorator(csrf_exempt,name='post')  # 针对csrf_exempt 第二种方式不可以</span></span><br><span class="line"><span class="meta">@method_decorator(csrf_exempt,name='dispatch')</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyCsrfToken</span><span class="params">(View)</span>:</span></span><br><span class="line">    <span class="comment"># @method_decorator(csrf_protect)  # 针对csrf_protect 第三种方式可以</span></span><br><span class="line">    <span class="comment"># @method_decorator(csrf_exempt)  # 针对csrf_exempt 第三种方式可以</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dispatch</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> super(MyCsrfToken, self).dispatch(request,*args,**kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self,request)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">'get'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># @method_decorator(csrf_protect)  # 针对csrf_protect 第一种方式可以</span></span><br><span class="line">    <span class="comment"># @method_decorator(csrf_exempt)  # 针对csrf_exempt 第一种方式不可以</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self,request)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">'post'</span>)</span><br></pre></td></tr></table></figure>

<h3 id="补充知识点"><a href="#补充知识点" class="headerlink" title="补充知识点"></a>补充知识点</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 模块:importlib</span></span><br><span class="line"><span class="keyword">import</span> importlib</span><br><span class="line">res = <span class="string">'myfile.b'</span></span><br><span class="line">ret = importlib.import_module(res)  <span class="comment"># from myfile import b</span></span><br><span class="line"><span class="comment"># 该方法最小只能到py文件名</span></span><br><span class="line">print(ret)</span><br></pre></td></tr></table></figure>

<h3 id="重要思想"><a href="#重要思想" class="headerlink" title="重要思想"></a>重要思想</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> settings</span><br><span class="line"><span class="keyword">import</span> importlib</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_all</span><span class="params">(content)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> path_str <span class="keyword">in</span> settings.NOTIFY_LIST:  <span class="comment">#'notify.email.Email'</span></span><br><span class="line">        module_path,class_name = path_str.rsplit(<span class="string">'.'</span>,maxsplit=<span class="number">1</span>)</span><br><span class="line">        <span class="comment"># module_path = 'notify.email'  class_name = 'Email'</span></span><br><span class="line">        <span class="comment"># 1 利用字符串导入模块</span></span><br><span class="line">        module = importlib.import_module(module_path)  <span class="comment"># from notify import email</span></span><br><span class="line">        <span class="comment"># 2 利用反射获取类名</span></span><br><span class="line">        cls = getattr(module,class_name)  <span class="comment"># Email、QQ、Wechat</span></span><br><span class="line">        <span class="comment"># 3 生成类的对象</span></span><br><span class="line">        obj = cls()</span><br><span class="line">        <span class="comment"># 4 利用鸭子类型直接调用send方法</span></span><br><span class="line">        obj.send(content)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>django框架</tag>
      </tags>
  </entry>
  <entry>
    <title>[Django框架]</title>
    <url>/2020/02/10/Django%E6%A1%86%E6%9E%B6/</url>
    <content><![CDATA[<h2 id="Django框架"><a href="#Django框架" class="headerlink" title="Django框架"></a>Django框架</h2><p>Django 是用Python开发的一个免费开源的Web框架，可以用于快速搭建高性能，优雅的网站！采用了MVC的框架模式，即模型M，视图V和控制器C，也可以称为MVT模式，模型M，视图V，模板T</p>
<p><a href="https://rogerxs80.github.io/2020/02/10/%E5%88%9D%E8%AF%86django%E6%A1%86%E6%9E%B6/" target="_blank" rel="noopener">1.初识django框架</a></p>
<p><a href="https://rogerxs80.github.io/2020/02/10/%E9%9D%99%E6%80%81%E6%96%87%E4%BB%B6%E3%80%81request%E5%AF%B9%E8%B1%A1%E4%B8%8E%E9%93%BE%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93/" target="_blank" rel="noopener">2.静态文件、request对象与链接数据库</a></p>
<p><a href="https://rogerxs80.github.io/2020/02/11/%E6%95%B0%E6%8D%AE%E7%BC%96%E8%BE%91%E3%80%81orm%E8%A1%A8%E5%85%B3%E7%B3%BB%E5%92%8C%E8%B7%AF%E7%94%B1%E5%B1%82/" target="_blank" rel="noopener">3.数据编辑、orm表关系和路由层</a></p>
<p><a href="https://rogerxs80.github.io/2020/02/12/%E8%A7%86%E5%9B%BE%E5%B1%82/" target="_blank" rel="noopener">4.视图层</a></p>
<p><a href="https://rogerxs80.github.io/2020/02/12/%E6%A8%A1%E6%9D%BF%E5%B1%82/" target="_blank" rel="noopener">5.模板层</a></p>
<p><a href="https://rogerxs80.github.io/2020/02/12/%E6%A8%A1%E5%9E%8B%E5%B1%82/" target="_blank" rel="noopener">6.模型层</a></p>
<p><a href="https://rogerxs80.github.io/2020/02/15/Ajax%E6%93%8D%E4%BD%9C/" target="_blank" rel="noopener">7.Ajax操作</a></p>
<p><a href="https://rogerxs80.github.io/2020/02/15/Forms%E7%BB%84%E4%BB%B6/" target="_blank" rel="noopener">8.Forms组件</a></p>
<p><a href="https://rogerxs80.github.io/2020/02/16/Cookie%E4%B8%8ESession/" target="_blank" rel="noopener">9.Cookie与Session</a></p>
<p><a href="https://rogerxs80.github.io/2020/02/17/django%E4%B8%AD%E9%97%B4%E4%BB%B6%E4%B8%8Ecsrf%E8%B7%A8%E7%AB%99%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0/" target="_blank" rel="noopener">10.django中间件与csrf跨站请求伪造</a></p>
<p><a href="https://rogerxs80.github.io/2020/02/17/MTV%E5%92%8CMVC%E6%A8%A1%E5%9E%8B%E4%B8%8EAuth%E6%A8%A1%E5%9D%97/" target="_blank" rel="noopener">11.MTV和MVC模型与Auth模块</a></p>
<p><a href="https://rogerxs80.github.io/2020/02/15/%E6%89%B9%E9%87%8F%E6%8F%92%E5%85%A5%E4%B8%8E%E5%88%86%E9%A1%B5%E5%99%A8/" target="_blank" rel="noopener">12.批量插入与分页器</a></p>
<p><a href="https://rogerxs80.github.io/2020/02/19/%E4%BA%86%E8%A7%A3%E7%9F%A5%E8%AF%86/" target="_blank" rel="noopener">13.了解知识</a></p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>django框架</tag>
      </tags>
  </entry>
  <entry>
    <title>[Forms组件]</title>
    <url>/2020/02/15/Forms%E7%BB%84%E4%BB%B6/</url>
    <content><![CDATA[<h3 id="前戏"><a href="#前戏" class="headerlink" title="前戏"></a>前戏</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">写一个注册功能</span></span><br><span class="line"><span class="string">	获取用户名和密码 利用form表单提交数据</span></span><br><span class="line"><span class="string">	在后端判断用户名和密码是否符合一定的条件</span></span><br><span class="line"><span class="string">		用户名中不能含有金瓶梅</span></span><br><span class="line"><span class="string">		密码不能少于三位</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">	如何符合条件需要你将提示信息展示到前端页面</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ab_form</span><span class="params">(request)</span>:</span></span><br><span class="line">    back_dic = &#123;<span class="string">'username'</span>:<span class="string">''</span>,<span class="string">'password'</span>:<span class="string">''</span>&#125;</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'POST'</span>:</span><br><span class="line">        username = request.POST.get(<span class="string">'username'</span>)</span><br><span class="line">        password = request.POST.get(<span class="string">'password'</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">'金瓶梅'</span> <span class="keyword">in</span> username:</span><br><span class="line">            back_dic[<span class="string">'username'</span>] = <span class="string">'不符合社会主义核心价值观'</span></span><br><span class="line">        <span class="keyword">if</span> len(password) &lt; <span class="number">3</span>:</span><br><span class="line">            back_dic[<span class="string">'password'</span>] = <span class="string">'不能太短 不好!'</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    无论是post请求还是get请求</span></span><br><span class="line"><span class="string">    页面都能够获取到字典 只不过get请求来的时候 字典值都是空的</span></span><br><span class="line"><span class="string">    而post请求来之后 字典可能有值</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">'ab_form.html'</span>,locals())</span><br><span class="line"></span><br><span class="line">&lt;form action=<span class="string">""</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">    &lt;p&gt;username:</span><br><span class="line">        &lt;input type=<span class="string">"text"</span> name=<span class="string">"username"</span>&gt;</span><br><span class="line">        &lt;span style="color: red"&gt;&#123;&#123; back_dic.username &#125;&#125;&lt;/span&gt;</span><br><span class="line">    &lt;/p&gt;</span><br><span class="line">    &lt;p&gt;password:</span><br><span class="line">        &lt;input type=<span class="string">"text"</span> name=<span class="string">"password"</span>&gt;</span><br><span class="line">        &lt;span style="color: red"&gt;&#123;&#123; back_dic.password &#125;&#125;&lt;/span&gt;</span><br><span class="line">    &lt;/p&gt;</span><br><span class="line">    &lt;input type="submit" class="btn btn-info"&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">1.手动书写前端获取用户数据的html代码						渲染html代码</span></span><br><span class="line"><span class="string">2.后端对用户数据进行校验											 校验数据</span></span><br><span class="line"><span class="string">3.对不符合要求的数据进行前端提示								展示提示信息</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">forms组件</span></span><br><span class="line"><span class="string">	能够完成的事情</span></span><br><span class="line"><span class="string">			1.渲染html代码</span></span><br><span class="line"><span class="string">			2.校验数据</span></span><br><span class="line"><span class="string">			3.展示提示信息</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">为什么数据校验非要去后端 不能在前端利用js直接完成呢？</span></span><br><span class="line"><span class="string">	数据校验前端可有可无</span></span><br><span class="line"><span class="string">	但是后端必须要有!!!</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">	因为前端的校验是弱不禁风的 你可以直接修改</span></span><br><span class="line"><span class="string">	或者利用爬虫程序绕过前端页面直接朝后端提交数据</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">	购物网站	</span></span><br><span class="line"><span class="string">		选取了货物之后 会计算一个价格发送给后端 如果后端不做价格的校验</span></span><br><span class="line"><span class="string">		</span></span><br><span class="line"><span class="string">		实际是获取到用户选择的所有商品的主键值</span></span><br><span class="line"><span class="string">		然后在后端查询出所有商品的价格 再次计算一遍</span></span><br><span class="line"><span class="string">		如果跟前端一致 那么完成支付如果不一致直接拒绝</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django <span class="keyword">import</span> forms</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyForm</span><span class="params">(forms.Form)</span>:</span></span><br><span class="line">    <span class="comment"># username字符串类型最小3位最大8位</span></span><br><span class="line">    username = forms.CharField(min_length=<span class="number">3</span>,max_length=<span class="number">8</span>)</span><br><span class="line">    <span class="comment"># password字符串类型最小3位最大8位</span></span><br><span class="line">    password = forms.CharField(min_length=<span class="number">3</span>,max_length=<span class="number">8</span>)</span><br><span class="line">    <span class="comment"># email字段必须符合邮箱格式  xxx@xx.com</span></span><br><span class="line">    email = forms.EmailField()</span><br></pre></td></tr></table></figure>

<h3 id="校验数据"><a href="#校验数据" class="headerlink" title="校验数据"></a>校验数据</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">1.测试环境的准备 可以自己拷贝代码准备</span></span><br><span class="line"><span class="string">2.其实在pycharm里面已经帮你准备一个测试环境</span></span><br><span class="line"><span class="string">	python console</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">from</span> app01 <span class="keyword">import</span> views</span><br><span class="line"><span class="comment"># 1 将带校验的数据组织成字典的形式传入即可</span></span><br><span class="line">form_obj = views.MyForm(&#123;<span class="string">'username'</span>:<span class="string">'jason'</span>,<span class="string">'password'</span>:<span class="string">'123'</span>,<span class="string">'email'</span>:<span class="string">'123'</span>&#125;)</span><br><span class="line"><span class="comment"># 2 判断数据是否合法		注意该方法只有在所有的数据全部合法的情况下才会返回True</span></span><br><span class="line">form_obj.is_valid()</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="comment"># 3 查看所有校验通过的数据</span></span><br><span class="line">form_obj.cleaned_data</span><br><span class="line">&#123;<span class="string">'username'</span>: <span class="string">'jason'</span>, <span class="string">'password'</span>: <span class="string">'123'</span>&#125;</span><br><span class="line"><span class="comment"># 4 查看所有不符合校验规则以及不符合的原因</span></span><br><span class="line">form_obj.errors</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">'email'</span>: [<span class="string">'Enter a valid email address.'</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 5 校验数据只校验类中出现的字段 多传不影响 多传的字段直接忽略</span></span><br><span class="line">form_obj = views.MyForm(&#123;<span class="string">'username'</span>:<span class="string">'jason'</span>,<span class="string">'password'</span>:<span class="string">'123'</span>,<span class="string">'email'</span>:<span class="string">'123@qq.com'</span>,<span class="string">'hobby'</span>:<span class="string">'study'</span>&#125;)</span><br><span class="line">form_obj.is_valid()</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="comment"># 6 校验数据 默认情况下 类里面所有的字段都必须传值</span></span><br><span class="line">form_obj = views.MyForm(&#123;<span class="string">'username'</span>:<span class="string">'jason'</span>,<span class="string">'password'</span>:<span class="string">'123'</span>&#125;)</span><br><span class="line">form_obj.is_valid()</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">也就意味着校验数据的时候 默认情况下数据可以多传但是绝不可能少传</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<h3 id="渲染标签"><a href="#渲染标签" class="headerlink" title="渲染标签"></a>渲染标签</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">forms组件只会自动帮你渲染获取用户输入的标签(input select radio checkbox)</span></span><br><span class="line"><span class="string">不能帮你渲染提交按钮</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="comment"># 1 先产生一个空对象</span></span><br><span class="line">    form_obj = MyForm()</span><br><span class="line">    <span class="comment"># 2 直接将该空对象传递给html页面</span></span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">'index.html'</span>,locals())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 前端利用空对象做操作</span></span><br><span class="line">    &lt;p&gt;第一种渲染方式:代码书写极少，封装程度太高 不便于后续的扩展 一般情况下只在本地测试使用&lt;/p&gt;</span><br><span class="line">    &#123;&#123; form_obj.as_p &#125;&#125;</span><br><span class="line">    &#123;&#123; form_obj.as_ul &#125;&#125;</span><br><span class="line">    &#123;&#123; form_obj.as_table &#125;&#125;</span><br><span class="line">    &lt;p&gt;第二种渲染方式:可扩展性很强 但是需要书写的代码太多  一般情况下不用&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123; form_obj.username.label &#125;&#125;:&#123;&#123; form_obj.username &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123; form_obj.password.label &#125;&#125;:&#123;&#123; form_obj.password &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123; form_obj.email.label &#125;&#125;:&#123;&#123; form_obj.email &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;第三种渲染方式(推荐使用):代码书写简单 并且扩展性也高&lt;/p&gt;</span><br><span class="line">    &#123;% <span class="keyword">for</span> form <span class="keyword">in</span> form_obj %&#125;</span><br><span class="line">        &lt;p&gt;&#123;&#123; form.label &#125;&#125;:&#123;&#123; form &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line"> </span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">label属性默认展示的是类中定义的字段首字母大写的形式</span></span><br><span class="line"><span class="string">也可以自己修改 直接给字段对象加label属性即可</span></span><br><span class="line"><span class="string">	 username = forms.CharField(min_length=3,max_length=8,label='用户名')</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<h3 id="展示提示信息"><a href="#展示提示信息" class="headerlink" title="展示提示信息"></a>展示提示信息</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">浏览器会自动帮你校验数据 但是前端的校验弱不禁风</span></span><br><span class="line"><span class="string">如何让浏览器不做校验</span></span><br><span class="line"><span class="string">	&lt;form action="" method="post" novalidate&gt;</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="comment"># 1 先产生一个空对象</span></span><br><span class="line">    form_obj = MyForm()</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'POST'</span>:</span><br><span class="line">        <span class="comment"># 获取用户数据并且校验</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        1.数据获取繁琐</span></span><br><span class="line"><span class="string">        2.校验数据需要构造成字典的格式传入才行</span></span><br><span class="line"><span class="string">        ps:但是request.POST可以看成就是一个字典</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment"># 3.校验数据</span></span><br><span class="line">        form_obj = MyForm(request.POST)</span><br><span class="line">        <span class="comment"># 4.判断数据是否合法</span></span><br><span class="line">        <span class="keyword">if</span> form_obj.is_valid():</span><br><span class="line">            <span class="comment"># 5.如果合法 操作数据库存储数据</span></span><br><span class="line">            <span class="keyword">return</span> HttpResponse(<span class="string">'OK'</span>)</span><br><span class="line">        <span class="comment"># 5.不合法 有错误</span></span><br><span class="line">    <span class="comment"># 2 直接将该空对象传递给html页面</span></span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">'index.html'</span>,locals())</span><br><span class="line"></span><br><span class="line">&#123;% <span class="keyword">for</span> form <span class="keyword">in</span> form_obj %&#125;</span><br><span class="line">        &lt;p&gt;</span><br><span class="line">            &#123;&#123; form.label &#125;&#125;:&#123;&#123; form &#125;&#125;</span><br><span class="line">            &lt;span style="color: red"&gt;&#123;&#123; form.errors.0 &#125;&#125;&lt;/span&gt;</span><br><span class="line">        &lt;/p&gt;</span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">1.必备的条件 get请求和post传给html页面对象变量名必须一样</span></span><br><span class="line"><span class="string">2.forms组件当你的数据不合法的情况下 会保存你上次的数据 让你基于之前的结果进行修改</span></span><br><span class="line"><span class="string">更加的人性化</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment"># 针对错误的提示信息还可以自己自定制</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyForm</span><span class="params">(forms.Form)</span>:</span></span><br><span class="line">    <span class="comment"># username字符串类型最小3位最大8位</span></span><br><span class="line">    username = forms.CharField(min_length=<span class="number">3</span>,max_length=<span class="number">8</span>,label=<span class="string">'用户名'</span>,</span><br><span class="line">                               error_messages=&#123;</span><br><span class="line">                                   <span class="string">'min_length'</span>:<span class="string">'用户名最少3位'</span>,</span><br><span class="line">                                   <span class="string">'max_length'</span>:<span class="string">'用户名最大8位'</span>,</span><br><span class="line">                                   <span class="string">'required'</span>:<span class="string">"用户名不能为空"</span></span><br><span class="line">                               &#125;</span><br><span class="line">                               )</span><br><span class="line">    <span class="comment"># password字符串类型最小3位最大8位</span></span><br><span class="line">    password = forms.CharField(min_length=<span class="number">3</span>,max_length=<span class="number">8</span>,label=<span class="string">'密码'</span>,</span><br><span class="line">                               error_messages=&#123;</span><br><span class="line">                                   <span class="string">'min_length'</span>: <span class="string">'密码最少3位'</span>,</span><br><span class="line">                                   <span class="string">'max_length'</span>: <span class="string">'密码最大8位'</span>,</span><br><span class="line">                                   <span class="string">'required'</span>: <span class="string">"密码不能为空"</span></span><br><span class="line">                               &#125;</span><br><span class="line">                               )</span><br><span class="line">    <span class="comment"># email字段必须符合邮箱格式  xxx@xx.com</span></span><br><span class="line">    email = forms.EmailField(label=<span class="string">'邮箱'</span>,</span><br><span class="line">                             error_messages=&#123;</span><br><span class="line">                                 <span class="string">'invalid'</span>:<span class="string">'邮箱格式不正确'</span>,</span><br><span class="line">                                 <span class="string">'required'</span>: <span class="string">"邮箱不能为空"</span></span><br><span class="line">                             &#125;</span><br><span class="line">                             )</span><br></pre></td></tr></table></figure>

<h3 id="钩子函数-HOOK"><a href="#钩子函数-HOOK" class="headerlink" title="钩子函数(HOOK)"></a>钩子函数(HOOK)</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">在特定的节点自动触发完成响应操作</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">钩子函数在forms组件中就类似于第二道关卡，能够让我们自定义校验规则</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">在forms组件中有两类钩子</span></span><br><span class="line"><span class="string">	1.局部钩子</span></span><br><span class="line"><span class="string">		当你需要给单个字段增加校验规则的时候可以使用</span></span><br><span class="line"><span class="string">	2.全局钩子</span></span><br><span class="line"><span class="string">  	当你需要给多个字段增加校验规则的时候可以使用</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment"># 实际案例</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.校验用户名中不能含有666				只是校验username字段  局部钩子</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.校验密码和确认密码是否一致			password confirm两个字段	全局钩子</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 钩子函数  在类里面书写方法即可</span></span><br><span class="line">    <span class="comment"># 局部钩子</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">clean_username</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 获取到用户名</span></span><br><span class="line">        username = self.cleaned_data.get(<span class="string">'username'</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">'666'</span> <span class="keyword">in</span> username:</span><br><span class="line">            <span class="comment"># 提示前端展示错误信息</span></span><br><span class="line">            self.add_error(<span class="string">'username'</span>,<span class="string">'光喊666是不行滴～'</span>)</span><br><span class="line">        <span class="comment"># 将钩子函数钩去出来数据再放回去</span></span><br><span class="line">        <span class="keyword">return</span> username</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 全局钩子</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">clean</span><span class="params">(self)</span>:</span></span><br><span class="line">        password = self.cleaned_data.get(<span class="string">'password'</span>)</span><br><span class="line">        confirm_password = self.cleaned_data.get(<span class="string">'confirm_password'</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> confirm_password == password:</span><br><span class="line">            self.add_error(<span class="string">'confirm_password'</span>,<span class="string">'两次密码不一致'</span>)</span><br><span class="line">        <span class="comment"># 将钩子函数钩出来数据再放回去</span></span><br><span class="line">        <span class="keyword">return</span> self.cleaned_data</span><br></pre></td></tr></table></figure>

<h3 id="forms组件其他参数及补充知识点"><a href="#forms组件其他参数及补充知识点" class="headerlink" title="forms组件其他参数及补充知识点"></a>forms组件其他参数及补充知识点</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">label		字段名</span><br><span class="line">error_messages  自定义报错信息</span><br><span class="line">initial  默认值</span><br><span class="line">required  控制字段是否必填</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">1.字段没有样式</span></span><br><span class="line"><span class="string">2.针对不同类型的input如何修改</span></span><br><span class="line"><span class="string">	text</span></span><br><span class="line"><span class="string">	password</span></span><br><span class="line"><span class="string">	date</span></span><br><span class="line"><span class="string">	radio</span></span><br><span class="line"><span class="string">	checkbox</span></span><br><span class="line"><span class="string">	...</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">widget=forms.widgets.PasswordInput(attrs=&#123;<span class="string">'class'</span>:<span class="string">'form-control c1 c2'</span>&#125;)</span><br><span class="line"><span class="comment"># 多个属性值的话 直接空格隔开即可</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第一道关卡里面还支持正则校验</span></span><br><span class="line"><span class="keyword">from</span> django.core.validators <span class="keyword">import</span> RegexValidator</span><br><span class="line">validators=[</span><br><span class="line">            RegexValidator(<span class="string">r'^[0-9]+$'</span>, <span class="string">'请输入数字'</span>),</span><br><span class="line">            RegexValidator(<span class="string">r'^159[0-9]+$'</span>, <span class="string">'数字必须以159开头'</span>)</span><br><span class="line">        ]</span><br></pre></td></tr></table></figure>

<p>其他类型渲染</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># radio</span></span><br><span class="line">    gender = forms.ChoiceField(</span><br><span class="line">        choices=((<span class="number">1</span>, <span class="string">"男"</span>), (<span class="number">2</span>, <span class="string">"女"</span>), (<span class="number">3</span>, <span class="string">"保密"</span>)),</span><br><span class="line">        label=<span class="string">"性别"</span>,</span><br><span class="line">        initial=<span class="number">3</span>,</span><br><span class="line">        widget=forms.widgets.RadioSelect()</span><br><span class="line">    )</span><br><span class="line">    <span class="comment"># select</span></span><br><span class="line">    hobby = forms.ChoiceField(</span><br><span class="line">        choices=((<span class="number">1</span>, <span class="string">"篮球"</span>), (<span class="number">2</span>, <span class="string">"足球"</span>), (<span class="number">3</span>, <span class="string">"双色球"</span>),),</span><br><span class="line">        label=<span class="string">"爱好"</span>,</span><br><span class="line">        initial=<span class="number">3</span>,</span><br><span class="line">        widget=forms.widgets.Select()</span><br><span class="line">    )</span><br><span class="line">    <span class="comment"># 多选</span></span><br><span class="line">    hobby1 = forms.MultipleChoiceField(</span><br><span class="line">        choices=((<span class="number">1</span>, <span class="string">"篮球"</span>), (<span class="number">2</span>, <span class="string">"足球"</span>), (<span class="number">3</span>, <span class="string">"双色球"</span>),),</span><br><span class="line">        label=<span class="string">"爱好"</span>,</span><br><span class="line">        initial=[<span class="number">1</span>, <span class="number">3</span>],</span><br><span class="line">        widget=forms.widgets.SelectMultiple()</span><br><span class="line">    )</span><br><span class="line">    <span class="comment"># 单选checkbox</span></span><br><span class="line">    keep = forms.ChoiceField(</span><br><span class="line">        label=<span class="string">"是否记住密码"</span>,</span><br><span class="line">        initial=<span class="string">"checked"</span>,</span><br><span class="line">        widget=forms.widgets.CheckboxInput()</span><br><span class="line">    )</span><br><span class="line">    <span class="comment"># 多选checkbox</span></span><br><span class="line">    hobby2 = forms.MultipleChoiceField(</span><br><span class="line">        choices=((<span class="number">1</span>, <span class="string">"篮球"</span>), (<span class="number">2</span>, <span class="string">"足球"</span>), (<span class="number">3</span>, <span class="string">"双色球"</span>),),</span><br><span class="line">        label=<span class="string">"爱好"</span>,</span><br><span class="line">        initial=[<span class="number">1</span>, <span class="number">3</span>],</span><br><span class="line">        widget=forms.widgets.CheckboxSelectMultiple()</span><br><span class="line">    )</span><br></pre></td></tr></table></figure>

<h3 id="forms组件源码"><a href="#forms组件源码" class="headerlink" title="forms组件源码"></a>forms组件源码</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">切入点:</span></span><br><span class="line"><span class="string">	form_obj.is_valid()</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_valid</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Returns True if the form has no errors. Otherwise, False. If errors are</span></span><br><span class="line"><span class="string">        being ignored, returns False.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">   <span class="keyword">return</span> self.is_bound <span class="keyword">and</span> <span class="keyword">not</span> self.errors</span><br><span class="line">   <span class="comment"># 如果is_valid要返回True的话 那么self.is_bound要为True self.errors要为Flase</span></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">self.is_bound = data <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">or</span> files <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>  <span class="comment"># 只要你传值了肯定为True</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@property</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">errors</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"Returns an ErrorDict for the data provided for the form"</span></span><br><span class="line">        <span class="keyword">if</span> self._errors <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            self.full_clean()</span><br><span class="line">        <span class="keyword">return</span> self._errors</span><br><span class="line"></span><br><span class="line"><span class="comment"># forms组件所有的功能基本都出自于该方法</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">full_clean</span><span class="params">(self)</span>:</span></span><br><span class="line">  	self._clean_fields()  <span class="comment"># 校验字段 + 局部钩子</span></span><br><span class="line">    self._clean_form()  <span class="comment"># 全局钩子</span></span><br><span class="line">    self._post_clean()</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>django框架</tag>
      </tags>
  </entry>
  <entry>
    <title>[DRF框架中常用的组件]</title>
    <url>/2020/04/22/DRF%E6%A1%86%E6%9E%B6%E4%B8%AD%E5%B8%B8%E7%94%A8%E7%9A%84%E7%BB%84%E4%BB%B6/</url>
    <content><![CDATA[<h1 id="DRF框架中常用的组件"><a href="#DRF框架中常用的组件" class="headerlink" title="DRF框架中常用的组件"></a>DRF框架中常用的组件</h1><p>为了方便接下来的学习，我们创建一个新的子应用 opt</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python manage.py startapp opt</span><br></pre></td></tr></table></figure>

<p>提前在总路由和配置文件中注册子应用和配置总路由。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># settings.py中注册子应用：</span></span><br><span class="line">INSTALLED_APPS = [</span><br><span class="line">	<span class="comment"># ....</span></span><br><span class="line">	<span class="string">'opt'</span>,        <span class="comment"># drf的常用组件</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 总路由中加上：</span></span><br><span class="line">	path(<span class="string">"opt/"</span>,include(<span class="string">"opt.urls"</span>)),</span><br></pre></td></tr></table></figure>

<p>因为接下来的功能中需要使用到登陆功能，所以我们使用django内置admin站点并创建一个管理员.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python manage.py createsuperuser</span><br></pre></td></tr></table></figure>

<p><img src="D:%5CDevops_Tools%5Cmyblog%5Csettings%5Csource%5Cimages%5C1557276390641.png" alt=""></p>
<p>创建管理员以后，访问admin站点，先修改站点的语言配置</p>
<p>settings.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">LANGUAGE_CODE = <span class="string">'zh-hans'</span></span><br><span class="line"></span><br><span class="line">TIME_ZONE = <span class="string">'Asia/Shanghai'</span></span><br></pre></td></tr></table></figure>

<p><img src="/images/1553043081445.png" alt=""></p>
<p>访问admin 站点效果：</p>
<p><img src="/images/1553043054133.png" alt=""></p>
<h1 id="1-认证Authentication"><a href="#1-认证Authentication" class="headerlink" title="1. 认证Authentication"></a>1. 认证Authentication</h1><p>可以在配置文件中配置全局默认的认证方案</p>
<p>/home/moluo/.virtualenvs/drfdemo/lib/python3.6/site-packages/rest_framework/settings.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 可以在项目的主应用的settings.py配置文件中加入以下配置覆盖全局默认的配置方案。</span></span><br><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="string">'DEFAULT_AUTHENTICATION_CLASSES'</span>: (</span><br><span class="line">        <span class="string">'rest_framework.authentication.SessionAuthentication'</span>,  <span class="comment"># session认证</span></span><br><span class="line">        <span class="string">'rest_framework.authentication.BasicAuthentication'</span>,    <span class="comment"># 基本认证</span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>也可以在每个视图中通过设置authentication_classess类属性来设置</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.authentication <span class="keyword">import</span> SessionAuthentication, BasicAuthentication</span><br><span class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> APIView</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExampleView</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    <span class="comment"># 类属性</span></span><br><span class="line">    authentication_classes = [SessionAuthentication, BasicAuthentication]</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self,request)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<p>认证失败会有两种可能的返回值，这个需要我们配合权限组件来使用：</p>
<ul>
<li>401 Unauthorized 未认证</li>
<li>403 Permission Denied 权限被禁止</li>
</ul>
<h1 id="2-权限Permissions"><a href="#2-权限Permissions" class="headerlink" title="2. 权限Permissions"></a>2. 权限Permissions</h1><p>权限控制可以限制用户对于视图的访问和对于具体数据对象的访问。</p>
<ul>
<li>在执行视图的as_view()方法的dispatch()方法前，会先进行视图访问权限的判断</li>
<li>在通过get_object()获取具体模型对象时，会进行模型对象访问权限的判断</li>
</ul>
<h3 id="提供的权限"><a href="#提供的权限" class="headerlink" title="提供的权限"></a>提供的权限</h3><ul>
<li>AllowAny 允许所有用户</li>
<li>IsAuthenticated 仅通过登录认证的用户</li>
<li>IsAdminUser 仅管理员用户</li>
<li>IsAuthenticatedOrReadOnly 已经登陆认证的用户可以对数据进行增删改操作，没有登陆认证的只能查看数据。</li>
</ul>
<h3 id="配置使用"><a href="#配置使用" class="headerlink" title="配置使用"></a>配置使用</h3><p>chorme浏览器进入无痕模式的快捷键，Ctrl+Shift+N</p>
<p>可以在配置文件settings.py中全局设置默认的权限管理类，如</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># drf的配置信息，需要卸载django的配置文件，而且必须写在REST_FRAMEWORK的字典中，才能被drf识别</span></span><br><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    ....</span><br><span class="line">    <span class="comment">#  权限[全局配置，所有的视图都会被影响到]</span></span><br><span class="line">    <span class="string">'DEFAULT_PERMISSION_CLASSES'</span>: (</span><br><span class="line">        <span class="string">'rest_framework.permissions.IsAuthenticated'</span>, <span class="comment"># 已经登录认证的用户才能访问</span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果未指明，则采用如下默认配置</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">'DEFAULT_PERMISSION_CLASSES'</span>: (</span><br><span class="line">   <span class="string">'rest_framework.permissions.AllowAny'</span>,</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>也可以在具体的视图中通过permission_classes属性来设置，如</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.permissions <span class="keyword">import</span> IsAuthenticated</span><br><span class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> APIView</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExampleView</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    permission_classes = (IsAuthenticated,)</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure>

<h3 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.authentication <span class="keyword">import</span> SessionAuthentication</span><br><span class="line"><span class="keyword">from</span> rest_framework.permissions <span class="keyword">import</span> IsAuthenticated</span><br><span class="line"><span class="keyword">from</span> rest_framework.generics <span class="keyword">import</span> RetrieveAPIView</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentAPIView</span><span class="params">(RetrieveAPIView)</span>:</span></span><br><span class="line">    queryset = Student.objects.all()</span><br><span class="line">    serializer_class = StudentSerializer</span><br><span class="line">    authentication_classes = [SessionAuthentication]</span><br><span class="line">    permission_classes = [IsAuthenticated]</span><br></pre></td></tr></table></figure>

<h3 id="自定义权限"><a href="#自定义权限" class="headerlink" title="自定义权限"></a>自定义权限</h3><p>如需自定义权限，需继承rest_framework.permissions.BasePermission父类，并实现以下两个任何一个方法或全部</p>
<ul>
<li><p><code>.has_permission(self, request, view)</code></p>
<p>是否可以访问视图， view表示当前视图对象</p>
</li>
<li><p><code>.has_object_permission(self, request, view, obj)</code></p>
<p>是否可以访问数据对象， view表示当前视图， obj为模型数据对象</p>
</li>
</ul>
<p>例如：</p>
<p>在当前子应用下，创建一个权限文件permissions.py中声明自定义权限类:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.permissions <span class="keyword">import</span> BasePermission</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IsXiaoMingPermission</span><span class="params">(BasePermission)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">has_permission</span><span class="params">(self, request, view)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> request.user <span class="keyword">and</span> request.user.username == <span class="string">"xiaoming"</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> .permissions <span class="keyword">import</span> IsXiaoMingPermission</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentViewSet</span><span class="params">(ModelViewSet)</span>:</span></span><br><span class="line">    queryset = Student.objects.all()</span><br><span class="line">    serializer_class = StudentSerializer</span><br><span class="line">    permission_classes = [IsXiaoMingPermission]</span><br></pre></td></tr></table></figure>

<h1 id="3-限流Throttling"><a href="#3-限流Throttling" class="headerlink" title="3. 限流Throttling"></a>3. 限流Throttling</h1><p>可以对接口访问的频次进行限制，以减轻服务器压力，或者实现特定的业务。</p>
<p>一般用于付费购买次数,投票等场景使用.</p>
<h2 id="可选限流类"><a href="#可选限流类" class="headerlink" title="可选限流类"></a>可选限流类</h2><p>1） AnonRateThrottle</p>
<p>限制所有匿名未认证用户，使用IP区分用户。</p>
<p>使用<code>DEFAULT_THROTTLE_RATES[&#39;anon&#39;]</code> 来设置频次</p>
<p>2）UserRateThrottle</p>
<p>限制认证用户，使用User id 来区分。</p>
<p>使用<code>DEFAULT_THROTTLE_RATES[&#39;user&#39;]</code> 来设置频次</p>
<p>3）ScopedRateThrottle</p>
<p>限制用户对于每个视图的访问频次，使用ip或user id。</p>
<p>例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ContactListView</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    throttle_scope = <span class="string">'contacts'</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ContactDetailView</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    throttle_scope = <span class="string">'contacts'</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UploadView</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    throttle_scope = <span class="string">'uploads'</span></span><br><span class="line">    ...</span><br><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="string">'DEFAULT_THROTTLE_CLASSES'</span>: (</span><br><span class="line">        <span class="string">'rest_framework.throttling.ScopedRateThrottle'</span>,</span><br><span class="line">    ),</span><br><span class="line">    <span class="string">'DEFAULT_THROTTLE_RATES'</span>: &#123;</span><br><span class="line">        <span class="string">'contacts'</span>: <span class="string">'1000/day'</span>,</span><br><span class="line">        <span class="string">'uploads'</span>: <span class="string">'20/day'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>可以在配置文件中，使用<code>DEFAULT_THROTTLE_CLASSES</code> 和 <code>DEFAULT_THROTTLE_RATES</code>进行全局配置，</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="string">'DEFAULT_THROTTLE_CLASSES'</span>: ( <span class="comment"># 启用的限制类</span></span><br><span class="line">        <span class="string">'rest_framework.throttling.AnonRateThrottle'</span>,</span><br><span class="line">        <span class="string">'rest_framework.throttling.UserRateThrottle'</span></span><br><span class="line">    ),</span><br><span class="line">    <span class="string">'DEFAULT_THROTTLE_RATES'</span>: &#123;   <span class="comment"># 限制频率</span></span><br><span class="line">        <span class="string">'anon'</span>: <span class="string">'100/day'</span>,</span><br><span class="line">        <span class="string">'user'</span>: <span class="string">'1000/day'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>DEFAULT_THROTTLE_RATES</code> 可以使用 <code>second</code>, <code>minute</code>, <code>hour</code> 或<code>day</code>来指明周期。</p>
<p>也可以在具体视图中通过throttle_classess属性来配置，如</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.throttling <span class="keyword">import</span> UserRateThrottle</span><br><span class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> APIView</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExampleView</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    throttle_classes = (UserRateThrottle,)</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure>

<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>全局配置中设置访问频率，settings.py代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="comment"># 权限[全局配置，会被局部配置覆盖]</span></span><br><span class="line">    <span class="comment"># 'DEFAULT_PERMISSION_CLASSES': (</span></span><br><span class="line">    <span class="comment">#     'rest_framework.permissions.IsAuthenticated',</span></span><br><span class="line">    <span class="comment"># ),</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 限流</span></span><br><span class="line">    <span class="comment"># 'DEFAULT_THROTTLE_CLASSES': (  # 全局启用的限制类</span></span><br><span class="line">    <span class="comment">#     'rest_framework.throttling.AnonRateThrottle', # 匿名用户,游客</span></span><br><span class="line">    <span class="comment">#     'rest_framework.throttling.UserRateThrottle'  # 登录用户</span></span><br><span class="line">    <span class="comment"># ),</span></span><br><span class="line">    <span class="string">'DEFAULT_THROTTLE_RATES'</span>: &#123;  <span class="comment"># 限制频率</span></span><br><span class="line">        <span class="string">'anon'</span>: <span class="string">'3/minute'</span>,</span><br><span class="line">        <span class="string">'user'</span>: <span class="string">'10/minute'</span>,</span><br><span class="line">        <span class="string">'access'</span>: <span class="string">'5/minute'</span>, <span class="comment"># 这个是自定义限流的频率配置</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>视图代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> students.models <span class="keyword">import</span> Student</span><br><span class="line"><span class="keyword">from</span> students.serializers <span class="keyword">import</span> StudentModelSerializer</span><br><span class="line"><span class="keyword">from</span> rest_framework.viewsets <span class="keyword">import</span> ModelViewSet</span><br><span class="line"><span class="keyword">from</span> rest_framework.permissions <span class="keyword">import</span> AllowAny,IsAuthenticated,IsAuthenticatedOrReadOnly,IsAdminUser</span><br><span class="line"><span class="keyword">from</span> .permission <span class="keyword">import</span> ISMingGe</span><br><span class="line"><span class="keyword">from</span> rest_framework.throttling <span class="keyword">import</span> UserRateThrottle,AnonRateThrottle,ScopedRateThrottle</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Students8APIView</span><span class="params">(ModelViewSet)</span>:</span></span><br><span class="line">    serializer_class = StudentModelSerializer</span><br><span class="line">    queryset = Student.objects.all()</span><br><span class="line">    <span class="comment"># 权限配置</span></span><br><span class="line">    permission_classes = [AllowAny]</span><br><span class="line">    <span class="comment"># 限流配置</span></span><br><span class="line">    <span class="comment"># throttle_classes = [AnonRateThrottle,UserRateThrottle]</span></span><br><span class="line">    <span class="comment"># 自定义限流配置</span></span><br><span class="line">    throttle_classes = [ScopedRateThrottle]</span><br><span class="line">    throttle_scope = <span class="string">'access'</span></span><br></pre></td></tr></table></figure>

<h1 id="4-过滤Filtering"><a href="#4-过滤Filtering" class="headerlink" title="4. 过滤Filtering"></a>4. 过滤Filtering</h1><p>对于列表数据可能需要根据字段进行过滤，我们可以通过添加django-fitlter扩展来增强支持。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip install django-filter</span><br></pre></td></tr></table></figure>

<p>在配置文件settings.py中增加过滤组件的设置：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    ...</span><br><span class="line">    <span class="string">'django_filters'</span>,  <span class="comment"># 需要注册应用，</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment"># 全局配置，也可以使用局部配置</span></span><br><span class="line">    <span class="string">'DEFAULT_FILTER_BACKENDS'</span>: (<span class="string">'django_filters.rest_framework.DjangoFilterBackend'</span>,)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在视图类中添加类属性filter_fields，指定可以过滤的字段</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentListView</span><span class="params">(ListAPIView)</span>:</span></span><br><span class="line">    queryset = Student.objects.all()</span><br><span class="line">    serializer_class = StudentSerializer</span><br><span class="line">    filter_fields = (<span class="string">'age'</span>, <span class="string">'sex'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 127.0.0.1:8000/opt/students/?sex=true  #单个过滤条件</span></span><br><span class="line"><span class="comment"># http://127.0.0.1:8000/opt/students/?sex=false&amp;age=27 # 多个并列的过滤条件</span></span><br></pre></td></tr></table></figure>

<h1 id="5-排序"><a href="#5-排序" class="headerlink" title="5. 排序"></a>5. 排序</h1><p>对于列表数据，REST framework提供了<strong>OrderingFilter</strong>过滤器来帮助我们快速指明数据按照指定字段进行排序。</p>
<p>使用方法：</p>
<p>在类视图中设置filter_backends，使用<code>rest_framework.filters.OrderingFilter</code>过滤器，REST framework会在请求的查询字符串参数中检查是否包含了ordering参数，如果包含了ordering参数，则按照ordering参数指明的排序字段对数据集进行排序。</p>
<p>前端可以传递的ordering参数的可选字段值需要在ordering_fields中指明。</p>
<p>示例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentListView</span><span class="params">(ListAPIView)</span>:</span></span><br><span class="line">    queryset = Student.objects.all()</span><br><span class="line">    serializer_class = StudentModelSerializer</span><br><span class="line">    filter_backends = [OrderingFilter]</span><br><span class="line">    ordering_fields = (<span class="string">'id'</span>, <span class="string">'age'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 127.0.0.1:8000/books/?ordering=-age</span></span><br><span class="line"><span class="comment"># -id 表示针对id字段进行倒序排序</span></span><br><span class="line"><span class="comment"># id  表示针对id字段进行升序排序</span></span><br></pre></td></tr></table></figure>

<p>如果需要在过滤以后再次进行排序，则需要两者同步。要么一起写在全局配置中，要么一起写在视图类中。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.generics <span class="keyword">import</span> ListAPIView</span><br><span class="line"><span class="keyword">from</span> students.models <span class="keyword">import</span> Student</span><br><span class="line"><span class="keyword">from</span> .serializers <span class="keyword">import</span> StudentModelSerializer</span><br><span class="line"><span class="keyword">from</span> django_filters.rest_framework <span class="keyword">import</span> DjangoFilterBackend</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student3ListView</span><span class="params">(ListAPIView)</span>:</span></span><br><span class="line">    queryset = Student.objects.all()</span><br><span class="line">    serializer_class = StudentModelSerializer</span><br><span class="line">    filter_fields = (<span class="string">'age'</span>, <span class="string">'sex'</span>)</span><br><span class="line">    <span class="comment"># 因为排序配置和过滤配置使用同一个类属性，所以当视图中需要使用排序和过滤时，</span></span><br><span class="line">    <span class="comment"># 要么大家一起在视图类中局部配置，要么大家一起在全局中配置，否则会出现过滤组件使用无效的情况</span></span><br><span class="line">    <span class="comment"># filter_backends = [DjangoFilterBackend,OrderingFilter]</span></span><br><span class="line">    ordering_fields = (<span class="string">'id'</span>, <span class="string">'age'</span>)</span><br></pre></td></tr></table></figure>

<p>配置文件：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 过滤组件[全局引入]</span></span><br><span class="line">    <span class="comment"># 'DEFAULT_FILTER_BACKENDS': ('django_filters.rest_framework.DjangoFilterBackend','rest_framework.filters.OrderingFilter')</span></span><br></pre></td></tr></table></figure>

<h1 id="6-分页Pagination"><a href="#6-分页Pagination" class="headerlink" title="6. 分页Pagination"></a>6. 分页Pagination</h1><p>REST framework提供了分页的支持。</p>
<p>我们可以在配置文件中设置全局的分页方式，如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="string">'DEFAULT_PAGINATION_CLASS'</span>:  <span class="string">'rest_framework.pagination.PageNumberPagination'</span>,</span><br><span class="line">    <span class="string">'PAGE_SIZE'</span>: <span class="number">100</span>  <span class="comment"># 每页数目</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">如果在配置settings.py文件中， 设置了全局分页，那么在drf中凡是调用了ListModelMixin的list()，</span><br><span class="line">都会自动分页。如果项目中出现大量需要分页的数据，只有少数部分的分页，则可以在少部分的视图类中关闭分页功能。</span><br><span class="line"><span class="class"><span class="keyword">class</span> 视图类<span class="params">(ListAPIView)</span>:</span></span><br><span class="line">	pagination_class = <span class="literal">None</span></span><br></pre></td></tr></table></figure>

<p>也可通过自定义Pagination类，来为视图添加不同分页行为。在视图中通过<code>pagination_clas</code>属性来指明。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LargeResultsSetPagination</span><span class="params">(PageNumberPagination)</span>:</span></span><br><span class="line">    page_size = <span class="number">1000</span></span><br><span class="line">    page_size_query_param = <span class="string">'page_size'</span></span><br><span class="line">    max_page_size = <span class="number">10000</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookDetailView</span><span class="params">(RetrieveAPIView)</span>:</span></span><br><span class="line">    queryset = BookInfo.objects.all()</span><br><span class="line">    serializer_class = BookInfoSerializer</span><br><span class="line">    pagination_class = LargeResultsSetPagination</span><br></pre></td></tr></table></figure>

<h2 id="可选分页器"><a href="#可选分页器" class="headerlink" title="可选分页器"></a>可选分页器</h2><p>1） <strong>PageNumberPagination</strong></p>
<p>前端访问网址形式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET  http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;students&#x2F;?page&#x3D;4</span><br></pre></td></tr></table></figure>

<p>可以在子类中定义的属性：</p>
<ul>
<li>page_size 每页数目</li>
<li>page_query_param 前端发送的页数关键字名，默认为“page”</li>
<li>page_size_query_param 前端发送的每页数目关键字名，默认为None</li>
<li>max_page_size 前端最多能设置的每页数量</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 声明分页的配置类</span></span><br><span class="line"><span class="keyword">from</span> rest_framework.pagination <span class="keyword">import</span> PageNumberPagination</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StandardPageNumberPagination</span><span class="params">(PageNumberPagination)</span>:</span></span><br><span class="line">    <span class="comment"># 默认每一页显示的数据量</span></span><br><span class="line">    page_size = <span class="number">2</span></span><br><span class="line">    <span class="comment"># 允许客户端通过get参数来控制每一页的数据量</span></span><br><span class="line">    page_size_query_param = <span class="string">"size"</span></span><br><span class="line">    max_page_size = <span class="number">10</span></span><br><span class="line">    <span class="comment"># 自定义页码的参数名</span></span><br><span class="line">    page_query_param = <span class="string">"p"</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentAPIView</span><span class="params">(ListAPIView)</span>:</span></span><br><span class="line">    queryset = Student.objects.all()</span><br><span class="line">    serializer_class = StudentModelSerializer</span><br><span class="line">    pagination_class = StandardPageNumberPagination</span><br><span class="line"></span><br><span class="line"><span class="comment"># 127.0.0.1/four/students/?p=1&amp;size=5</span></span><br></pre></td></tr></table></figure>

<p>2）<strong>LimitOffsetPagination</strong></p>
<p>前端访问网址形式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET http:&#x2F;&#x2F;127.0.0.1&#x2F;four&#x2F;students&#x2F;?limit&#x3D;100&amp;offset&#x3D;100</span><br></pre></td></tr></table></figure>

<p>可以在子类中定义的属性：</p>
<ul>
<li>default_limit 默认限制，默认值与<code>PAGE_SIZE</code>设置一直</li>
<li>limit_query_param limit参数名，默认’limit’</li>
<li>offset_query_param offset参数名，默认’offset’</li>
<li>max_limit 最大limit限制，默认None</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.pagination <span class="keyword">import</span> LimitOffsetPagination</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StandardLimitOffsetPagination</span><span class="params">(LimitOffsetPagination)</span>:</span></span><br><span class="line">    <span class="comment"># 默认每一页查询的数据量,类似上面的page_size</span></span><br><span class="line">    default_limit = <span class="number">2</span></span><br><span class="line">    limit_query_param = <span class="string">"size"</span></span><br><span class="line">    offset_query_param = <span class="string">"start"</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentAPIView</span><span class="params">(ListAPIView)</span>:</span></span><br><span class="line">    queryset = Student.objects.all()</span><br><span class="line">    serializer_class = StudentModelSerializer</span><br><span class="line">    <span class="comment"># 调用页码分页类</span></span><br><span class="line">    <span class="comment"># pagination_class = StandardPageNumberPagination</span></span><br><span class="line">    <span class="comment"># 调用查询偏移分页类</span></span><br><span class="line">    pagination_class = StandardLimitOffsetPagination</span><br></pre></td></tr></table></figure>

<h1 id="7-异常处理-Exceptions"><a href="#7-异常处理-Exceptions" class="headerlink" title="7. 异常处理 Exceptions"></a>7. 异常处理 Exceptions</h1><p>REST framework提供了自定义异常处理，我们可以自定义的方式来编写异常处理函数。例如我们想在要创建一个自定义异常函数，</p>
<p>这个函数，我们保存到当前主应用中[注意在实际工作中，我们可以设置一个单独的独立的公共目录来保存这种公共的函数/工具/类库]。</p>
<p>drfdemo/exceptions.py，代码；</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> exception_handler <span class="keyword">as</span> drf_exception_handler</span><br><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> DatabaseError</span><br><span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> status</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">custom_exception_handler</span><span class="params">(exc, context)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    自定义异常处理函数</span></span><br><span class="line"><span class="string">    :param exc: 异常对象，本次发生的异常对象</span></span><br><span class="line"><span class="string">    :param context: 字典，异常出现时的执行上下文环境</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="comment"># 先让drf进行异常判断</span></span><br><span class="line">    response = drf_exception_handler(exc, context)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 判断response对象是否为None</span></span><br><span class="line">    <span class="keyword">if</span> response <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="string">"""出现drf不能处理的异常"""</span></span><br><span class="line">        <span class="keyword">if</span> isinstance(exc, DatabaseError):</span><br><span class="line">            view = context.get(<span class="string">"view"</span>)</span><br><span class="line">            print(<span class="string">'数据库报错，[%s]: %s'</span> % (view, exc))</span><br><span class="line">            <span class="keyword">return</span> Response(&#123;<span class="string">"detail"</span>:<span class="string">"服务器内部错误!"</span>&#125;, status=status.HTTP_507_INSUFFICIENT_STORAGE)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> isinstance(exc, ZeroDivisionError):</span><br><span class="line">            view = context.get(<span class="string">"view"</span>)</span><br><span class="line">            print(<span class="string">"0不能作为除数! [%s]: %s"</span> % (view, exc) )</span><br><span class="line">            <span class="keyword">return</span> Response(&#123;<span class="string">"detail"</span>:<span class="string">"服务器内部错误!"</span>&#125;, status=status.HTTP_500_INTERNAL_SERVER_ERROR)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure>

<p>在主应用的配置文件settings.py中声明自定义的异常处理</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="comment"># 异常处理</span></span><br><span class="line">    <span class="string">'EXCEPTION_HANDLER'</span>: <span class="string">'drfdemo.exceptions.custom_exception_handler'</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果未声明，会采用默认的方式，如下</p>
<p>rest_frame/settings.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="string">'EXCEPTION_HANDLER'</span>: <span class="string">'rest_framework.views.exception_handler'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="REST-framework定义的异常"><a href="#REST-framework定义的异常" class="headerlink" title="REST framework定义的异常"></a>REST framework定义的异常</h3><ul>
<li>APIException drf中所有异常的父类</li>
<li>ParseError 解析错误</li>
<li>AuthenticationFailed 认证失败</li>
<li>NotAuthenticated 尚未认证</li>
<li>PermissionDenied 权限受限</li>
<li>NotFound 未找到</li>
<li>MethodNotAllowed 请求方式不支持</li>
<li>NotAcceptable 要获取的数据格式不支持</li>
<li>Throttled 超过限流次数</li>
<li>ValidationError 校验失败</li>
</ul>
<p>也就是说，很多的没有在上面列出来的异常，就需要我们在自定义异常中自己处理了。</p>
<h1 id="8-自动生成接口文档"><a href="#8-自动生成接口文档" class="headerlink" title="8. 自动生成接口文档"></a>8. 自动生成接口文档</h1><p>官方文档：<a href="http://core-api.github.io/python-client/" target="_blank" rel="noopener">http://core-api.github.io/python-client/</a></p>
<p>REST framework可以自动帮助我们生成接口文档。</p>
<p>接口文档以网页的方式呈现。</p>
<p>自动接口文档能生成的是继承自<code>APIView</code>及其子类的视图。</p>
<h2 id="8-1-安装依赖"><a href="#8-1-安装依赖" class="headerlink" title="8.1. 安装依赖"></a>8.1. 安装依赖</h2><p>REST framewrok生成接口文档需要<code>coreapi</code>库的支持。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install coreapi</span><br></pre></td></tr></table></figure>

<h2 id="8-2-设置接口文档访问路径"><a href="#8-2-设置接口文档访问路径" class="headerlink" title="8.2. 设置接口文档访问路径"></a>8.2. 设置接口文档访问路径</h2><p>在settings.py中配置接口文档。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="comment"># 。。。 其他选项</span></span><br><span class="line">    <span class="comment"># 接口文档</span></span><br><span class="line">    <span class="string">'DEFAULT_SCHEMA_CLASS'</span>: <span class="string">'rest_framework.schemas.AutoSchema'</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在总路由中添加接口文档路径。</p>
<p>文档路由对应的视图配置为<code>rest_framework.documentation.include_docs_urls</code>，</p>
<p>参数<code>title</code>为接口文档网站的标题。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.documentation <span class="keyword">import</span> include_docs_urls</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    ...</span><br><span class="line">    path(<span class="string">'docs/'</span>, include_docs_urls(title=<span class="string">'站点页面标题'</span>))</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h2 id="8-3-文档描述说明的定义位置"><a href="#8-3-文档描述说明的定义位置" class="headerlink" title="8.3. 文档描述说明的定义位置"></a>8.3. 文档描述说明的定义位置</h2><p>1） 单一方法的视图，可直接使用类视图的文档字符串，如</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookListView</span><span class="params">(generics.ListAPIView)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    返回所有图书信息.</span></span><br><span class="line"><span class="string">    """</span></span><br></pre></td></tr></table></figure>

<p>2）包含多个方法的视图，在类视图的文档字符串中，分开方法定义，如</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookListCreateView</span><span class="params">(generics.ListCreateAPIView)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    get:</span></span><br><span class="line"><span class="string">    返回所有图书信息.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    post:</span></span><br><span class="line"><span class="string">    新建图书.</span></span><br><span class="line"><span class="string">    """</span></span><br></pre></td></tr></table></figure>

<p>3）对于视图集ViewSet，仍在类视图的文档字符串中封开定义，但是应使用action名称区分，如</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookInfoViewSet</span><span class="params">(mixins.ListModelMixin, mixins.RetrieveModelMixin, GenericViewSet)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    list:</span></span><br><span class="line"><span class="string">    返回图书列表数据</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    retrieve:</span></span><br><span class="line"><span class="string">    返回图书详情数据</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    latest:</span></span><br><span class="line"><span class="string">    返回最新的图书数据</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    read:</span></span><br><span class="line"><span class="string">    修改图书的阅读量</span></span><br><span class="line"><span class="string">    """</span></span><br></pre></td></tr></table></figure>

<h2 id="8-4-访问接口文档网页"><a href="#8-4-访问接口文档网页" class="headerlink" title="8.4. 访问接口文档网页"></a>8.4. 访问接口文档网页</h2><p>浏览器访问 127.0.0.1:8000/docs/，即可看到自动生成的接口文档。</p>
<p><img src="/images/drf%205%2089be22d379b34dacb463a31e54a46e7f.png" alt=""></p>
<h3 id="两点说明："><a href="#两点说明：" class="headerlink" title="两点说明："></a>两点说明：</h3><p>1） 视图集ViewSet中的retrieve名称，在接口文档网站中叫做read</p>
<p>2）参数的Description需要在模型类或序列化器类的字段中以help_text选项定义，如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    ...</span><br><span class="line">    age = models.IntegerField(default=<span class="number">0</span>, verbose_name=<span class="string">'年龄'</span>, help_text=<span class="string">'年龄'</span>)</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure>

<p>或</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentSerializer</span><span class="params">(serializers.ModelSerializer)</span>:</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = Student</span><br><span class="line">        fields = <span class="string">"__all__"</span></span><br><span class="line">        extra_kwargs = &#123;</span><br><span class="line">            <span class="string">'age'</span>: &#123;</span><br><span class="line">                <span class="string">'required'</span>: <span class="literal">True</span>,</span><br><span class="line">                <span class="string">'help_text'</span>: <span class="string">'年龄'</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>Django Rest_Framework</tag>
      </tags>
  </entry>
  <entry>
    <title>[Git命令大全]</title>
    <url>/2020/05/21/Git%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8/</url>
    <content><![CDATA[<h2 id="git-config"><a href="#git-config" class="headerlink" title="git config"></a>git config</h2><p>配置 Git 的相关参数。</p>
<p>Git 一共有3个配置文件：</p>
<p>\1. 仓库级的配置文件：在仓库的 <code>.git/.gitconfig</code>，该配置文件只对所在的仓库有效。 \2. 全局配置文件：Mac 系统在 <code>~/.gitconfig</code>，Windows 系统在 <code>C:\Users\&lt;用户名&gt;\.gitconfig</code>。 \3. 系统级的配置文件：在 Git 的安装目录下（Mac 系统下安装目录在 <code>/usr/local/git</code>）的 <code>etc</code> 文件夹中的 <code>gitconfig</code>。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看配置信息</span></span><br><span class="line"><span class="comment"># --local：仓库级，--global：全局级，--system：系统级</span></span><br><span class="line">$ git config &lt;--<span class="built_in">local</span> | --global | --system&gt; -l</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看当前生效的配置信息</span></span><br><span class="line">$ git config -l</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编辑配置文件</span></span><br><span class="line"><span class="comment"># --local：仓库级，--global：全局级，--system：系统级</span></span><br><span class="line">$ git config &lt;--<span class="built_in">local</span> | --global | --system&gt; -e</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加配置项</span></span><br><span class="line"><span class="comment"># --local：仓库级，--global：全局级，--system：系统级</span></span><br><span class="line">$ git config &lt;--<span class="built_in">local</span> | --global | --system&gt; --add &lt;name&gt; &lt;value&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取配置项</span></span><br><span class="line">$ git config &lt;--<span class="built_in">local</span> | --global | --system&gt; --get &lt;name&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除配置项</span></span><br><span class="line">$ git config &lt;--<span class="built_in">local</span> | --global | --system&gt; --<span class="built_in">unset</span> &lt;name&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置提交记录中的用户信息</span></span><br><span class="line">$ git config --global user.name &lt;用户名&gt;</span><br><span class="line">$ git config --global user.email &lt;邮箱地址&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更改Git缓存区的大小</span></span><br><span class="line"><span class="comment"># 如果提交的内容较大，默认缓存较小，提交会失败</span></span><br><span class="line"><span class="comment"># 缓存大小单位：B，例如：524288000（500MB）</span></span><br><span class="line">$ git config --global http.postBuffer &lt;缓存大小&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用 git status/git diff 命令时以高亮或彩色方式显示改动状态</span></span><br><span class="line">$ git config --global color.ui <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置可以缓存密码，默认缓存时间15分钟</span></span><br><span class="line">$ git config --global credential.helper cache</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置密码的缓存时间</span></span><br><span class="line"><span class="comment"># 缓存时间单位：秒</span></span><br><span class="line">$ git config --global credential.helper <span class="string">'cache --timeout=&lt;缓存时间&gt;'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置长期存储密码</span></span><br><span class="line">$ git config --global credential.helper store</span><br></pre></td></tr></table></figure>

<h2 id="git-clone"><a href="#git-clone" class="headerlink" title="git clone"></a>git clone</h2><p>从远程仓库克隆一个版本库到本地。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 默认在当前目录下创建和版本库名相同的文件夹并下载版本到该文件夹下</span></span><br><span class="line">$ git <span class="built_in">clone</span> &lt;远程仓库的网址&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定本地仓库的目录</span></span><br><span class="line">$ git <span class="built_in">clone</span> &lt;远程仓库的网址&gt; &lt;本地目录&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># -b 指定要克隆的分支，默认是master分支</span></span><br><span class="line">$ git <span class="built_in">clone</span> &lt;远程仓库的网址&gt; -b &lt;分支名称&gt; &lt;本地目录&gt;</span><br></pre></td></tr></table></figure>

<h2 id="git-init"><a href="#git-init" class="headerlink" title="git init"></a>git init</h2><p>初始化项目所在目录，初始化后会在当前目录下出现一个名为 .git 的目录。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 初始化本地仓库，在当前目录下生成 .git 文件夹</span></span><br><span class="line">$ git init</span><br></pre></td></tr></table></figure>

<h2 id="git-status"><a href="#git-status" class="headerlink" title="git status"></a>git status</h2><p>查看本地仓库的状态。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看本地仓库的状态</span></span><br><span class="line">$ git status</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以简短模式查看本地仓库的状态</span></span><br><span class="line"><span class="comment"># 会显示两列，第一列是文件的状态，第二列是对应的文件</span></span><br><span class="line"><span class="comment"># 文件状态：A 新增，M 修改，D 删除，?? 未添加到Git中</span></span><br><span class="line">$ git status -s</span><br></pre></td></tr></table></figure>

<h2 id="git-remote"><a href="#git-remote" class="headerlink" title="git remote"></a>git remote</h2><p>操作远程库。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 列出已经存在的远程仓库</span></span><br><span class="line">$ git remote</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出远程仓库的详细信息，在别名后面列出URL地址</span></span><br><span class="line">$ git remote -v</span><br><span class="line">$ git remote --verbose</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加远程仓库</span></span><br><span class="line">$ git remote add &lt;远程仓库的别名&gt; &lt;远程仓库的URL地址&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改远程仓库的别名</span></span><br><span class="line">$ git remote rename &lt;原远程仓库的别名&gt; &lt;新的别名&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除指定名称的远程仓库</span></span><br><span class="line">$ git remote remove &lt;远程仓库的别名&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改远程仓库的 URL 地址</span></span><br><span class="line">$ git remote <span class="built_in">set</span>-url &lt;远程仓库的别名&gt; &lt;新的远程仓库URL地址&gt;</span><br></pre></td></tr></table></figure>

<h2 id="git-branch"><a href="#git-branch" class="headerlink" title="git branch"></a>git branch</h2><p>操作 Git 的分支命令。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 列出本地的所有分支，当前所在分支以 "*" 标出</span></span><br><span class="line">$ git branch</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出本地的所有分支并显示最后一次提交，当前所在分支以 "*" 标出</span></span><br><span class="line">$ git branch -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建新分支，新的分支基于上一次提交建立</span></span><br><span class="line">$ git branch &lt;分支名&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改分支名称</span></span><br><span class="line"><span class="comment"># 如果不指定原分支名称则为当前所在分支</span></span><br><span class="line">$ git branch -m [&lt;原分支名称&gt;] &lt;新的分支名称&gt;</span><br><span class="line"><span class="comment"># 强制修改分支名称</span></span><br><span class="line">$ git branch -M [&lt;原分支名称&gt;] &lt;新的分支名称&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除指定的本地分支</span></span><br><span class="line">$ git branch -d &lt;分支名称&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 强制删除指定的本地分支</span></span><br><span class="line">$ git branch -D &lt;分支名称&gt;</span><br></pre></td></tr></table></figure>

<h2 id="git-checkout"><a href="#git-checkout" class="headerlink" title="git checkout"></a>git checkout</h2><p>检出命令，用于创建、切换分支等。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 切换到已存在的指定分支</span></span><br><span class="line">$ git checkout &lt;分支名称&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建并切换到指定的分支，保留所有的提交记录</span></span><br><span class="line"><span class="comment"># 等同于 "git branch" 和 "git checkout" 两个命令合并</span></span><br><span class="line">$ git checkout -b &lt;分支名称&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建并切换到指定的分支，删除所有的提交记录</span></span><br><span class="line">$ git checkout --orphan &lt;分支名称&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 替换掉本地的改动，新增的文件和已经添加到暂存区的内容不受影响</span></span><br><span class="line">$ git checkout &lt;文件路径&gt;</span><br></pre></td></tr></table></figure>

<h2 id="git-cherry-pick"><a href="#git-cherry-pick" class="headerlink" title="git cherry-pick"></a>git cherry-pick</h2><p>把已经提交的记录合并到当前分支。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 把已经提交的记录合并到当前分支</span></span><br><span class="line">$ git cherry-pick &lt;commit ID&gt;</span><br></pre></td></tr></table></figure>

<h2 id="git-add"><a href="#git-add" class="headerlink" title="git add"></a>git add</h2><p>把要提交的文件的信息添加到暂存区中。当使用 git commit 时，将依据暂存区中的内容来进行文件的提交。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 把指定的文件添加到暂存区中</span></span><br><span class="line">$ git add &lt;文件路径&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加所有修改、已删除的文件到暂存区中</span></span><br><span class="line">$ git add -u [&lt;文件路径&gt;]</span><br><span class="line">$ git add --update [&lt;文件路径&gt;]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加所有修改、已删除、新增的文件到暂存区中，省略 &lt;文件路径&gt; 即为当前目录</span></span><br><span class="line">$ git add -A [&lt;文件路径&gt;]</span><br><span class="line">$ git add --all [&lt;文件路径&gt;]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看所有修改、已删除但没有提交的文件，进入一个子命令系统</span></span><br><span class="line">$ git add -i [&lt;文件路径&gt;]</span><br><span class="line">$ git add --interactive [&lt;文件路径&gt;]</span><br></pre></td></tr></table></figure>

<h2 id="git-commit"><a href="#git-commit" class="headerlink" title="git commit"></a>git commit</h2><p>将暂存区中的文件提交到本地仓库中。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 把暂存区中的文件提交到本地仓库，调用文本编辑器输入该次提交的描述信息</span></span><br><span class="line">$ git commit</span><br><span class="line"></span><br><span class="line"><span class="comment"># 把暂存区中的文件提交到本地仓库中并添加描述信息</span></span><br><span class="line">$ git commit -m <span class="string">"&lt;提交的描述信息&gt;"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 把所有修改、已删除的文件提交到本地仓库中</span></span><br><span class="line"><span class="comment"># 不包括未被版本库跟踪的文件，等同于先调用了 "git add -u"</span></span><br><span class="line">$ git commit -a -m <span class="string">"&lt;提交的描述信息&gt;"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改上次提交的描述信息</span></span><br><span class="line">$ git commit --amend</span><br></pre></td></tr></table></figure>

<h2 id="git-fetch"><a href="#git-fetch" class="headerlink" title="git fetch"></a>git fetch</h2><p>从远程仓库获取最新的版本到本地的 tmp 分支上。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将远程仓库所有分支的最新版本全部取回到本地</span></span><br><span class="line">$ git fetch &lt;远程仓库的别名&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将远程仓库指定分支的最新版本取回到本地</span></span><br><span class="line">$ git fetch &lt;远程主机名&gt; &lt;分支名&gt;</span><br></pre></td></tr></table></figure>

<h2 id="git-merge"><a href="#git-merge" class="headerlink" title="git merge"></a>git merge</h2><p>合并分支。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 把指定的分支合并到当前所在的分支下</span></span><br><span class="line">$ git merge &lt;分支名称&gt;</span><br></pre></td></tr></table></figure>

<h2 id="git-diff"><a href="#git-diff" class="headerlink" title="git diff"></a>git diff</h2><p>比较版本之间的差异。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 比较当前文件和暂存区中文件的差异，显示没有暂存起来的更改</span></span><br><span class="line">$ git diff</span><br><span class="line"></span><br><span class="line"><span class="comment"># 比较暂存区中的文件和上次提交时的差异</span></span><br><span class="line">$ git diff --cached</span><br><span class="line">$ git diff --staged</span><br><span class="line"></span><br><span class="line"><span class="comment"># 比较当前文件和上次提交时的差异</span></span><br><span class="line">$ git diff HEAD</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看从指定的版本之后改动的内容</span></span><br><span class="line">$ git diff &lt;commit ID&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 比较两个分支之间的差异</span></span><br><span class="line">$ git diff &lt;分支名称&gt; &lt;分支名称&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看两个分支分开后各自的改动内容</span></span><br><span class="line">$ git diff &lt;分支名称&gt;...&lt;分支名称&gt;</span><br></pre></td></tr></table></figure>

<h2 id="git-pull"><a href="#git-pull" class="headerlink" title="git pull"></a>git pull</h2><p>从远程仓库获取最新版本并合并到本地。 首先会执行 <code>git fetch</code>，然后执行 <code>git merge</code>，把获取的分支的 HEAD 合并到当前分支。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 从远程仓库获取最新版本。</span></span><br><span class="line">$ git pull</span><br></pre></td></tr></table></figure>

<h2 id="git-push"><a href="#git-push" class="headerlink" title="git push"></a>git push</h2><p>把本地仓库的提交推送到远程仓库。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 把本地仓库的分支推送到远程仓库的指定分支</span></span><br><span class="line">$ git push &lt;远程仓库的别名&gt; &lt;本地分支名&gt;:&lt;远程分支名&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除指定的远程仓库的分支</span></span><br><span class="line">$ git push &lt;远程仓库的别名&gt; :&lt;远程分支名&gt;</span><br><span class="line">$ git push &lt;远程仓库的别名&gt; --delete &lt;远程分支名&gt;</span><br></pre></td></tr></table></figure>

<h2 id="git-log"><a href="#git-log" class="headerlink" title="git log"></a>git log</h2><p>显示提交的记录。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 打印所有的提交记录</span></span><br><span class="line">$ git <span class="built_in">log</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印从第一次提交到指定的提交的记录</span></span><br><span class="line">$ git <span class="built_in">log</span> &lt;commit ID&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印指定数量的最新提交的记录</span></span><br><span class="line">$ git <span class="built_in">log</span> -&lt;指定的数量&gt;</span><br></pre></td></tr></table></figure>

<h2 id="git-reset"><a href="#git-reset" class="headerlink" title="git reset"></a>git reset</h2><p>还原提交记录。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 重置暂存区，但文件不受影响</span></span><br><span class="line"><span class="comment"># 相当于将用 "git add" 命令更新到暂存区的内容撤出暂存区，可以指定文件</span></span><br><span class="line"><span class="comment"># 没有指定 commit ID 则默认为当前 HEAD</span></span><br><span class="line">$ git reset [&lt;文件路径&gt;]</span><br><span class="line">$ git reset --mixed [&lt;文件路径&gt;]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将 HEAD 的指向改变，撤销到指定的提交记录，文件未修改</span></span><br><span class="line">$ git reset &lt;commit ID&gt;</span><br><span class="line">$ git reset --mixed &lt;commit ID&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将 HEAD 的指向改变，撤销到指定的提交记录，文件未修改</span></span><br><span class="line"><span class="comment"># 相当于调用 "git reset --mixed" 命令后又做了一次 "git add"</span></span><br><span class="line">$ git reset --soft &lt;commit ID&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将 HEAD 的指向改变，撤销到指定的提交记录，文件也修改了</span></span><br><span class="line">$ git reset --hard &lt;commit ID&gt;</span><br></pre></td></tr></table></figure>

<h2 id="git-revert"><a href="#git-revert" class="headerlink" title="git revert"></a>git revert</h2><p>生成一个新的提交来撤销某次提交，此次提交之前的所有提交都会被保留。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 生成一个新的提交来撤销某次提交</span></span><br><span class="line">$ git revert &lt;commit ID&gt;</span><br></pre></td></tr></table></figure>

<h2 id="git-tag"><a href="#git-tag" class="headerlink" title="git tag"></a>git tag</h2><p>操作标签的命令。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 打印所有的标签</span></span><br><span class="line">$ git tag</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加轻量标签，指向提交对象的引用，可以指定之前的提交记录</span></span><br><span class="line">$ git tag &lt;标签名称&gt; [&lt;commit ID&gt;]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加带有描述信息的附注标签，可以指定之前的提交记录</span></span><br><span class="line">$ git tag -a &lt;标签名称&gt; -m &lt;标签描述信息&gt; [&lt;commit ID&gt;]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换到指定的标签</span></span><br><span class="line">$ git checkout &lt;标签名称&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看标签的信息</span></span><br><span class="line">$ git show &lt;标签名称&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除指定的标签</span></span><br><span class="line">$ git tag -d &lt;标签名称&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将指定的标签提交到远程仓库</span></span><br><span class="line">$ git push &lt;远程仓库的别名&gt; &lt;标签名称&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将本地所有的标签全部提交到远程仓库</span></span><br><span class="line">$ git push &lt;远程仓库的别名&gt; –tags</span><br></pre></td></tr></table></figure>

<h2 id="git-mv"><a href="#git-mv" class="headerlink" title="git mv"></a>git mv</h2><p>重命名文件或者文件夹。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 重命名指定的文件或者文件夹</span></span><br><span class="line">$ git mv &lt;源文件/文件夹&gt; &lt;目标文件/文件夹&gt;</span><br></pre></td></tr></table></figure>

<h2 id="git-rm"><a href="#git-rm" class="headerlink" title="git rm"></a>git rm</h2><p>删除文件或者文件夹。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 移除跟踪指定的文件，并从本地仓库的文件夹中删除</span></span><br><span class="line">$ git rm &lt;文件路径&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 移除跟踪指定的文件夹，并从本地仓库的文件夹中删除</span></span><br><span class="line">$ git rm -r &lt;文件夹路径&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 移除跟踪指定的文件，在本地仓库的文件夹中保留该文件</span></span><br><span class="line">$ git rm --cached</span><br></pre></td></tr></table></figure>

<h2 id="Git操作场景示例"><a href="#Git操作场景示例" class="headerlink" title="Git操作场景示例"></a>Git操作场景示例</h2><h3 id="1-删除掉本地不存在的远程分支"><a href="#1-删除掉本地不存在的远程分支" class="headerlink" title="1. 删除掉本地不存在的远程分支"></a>1. 删除掉本地不存在的远程分支</h3><p>多人合作开发时，如果远程的分支被其他开发删除掉，在本地执行 <code>git branch --all</code> 依然会显示该远程分支，可使用下列的命令进行删除：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用 pull 命令，添加 -p 参数</span></span><br><span class="line">$ git pull -p</span><br><span class="line"></span><br><span class="line"><span class="comment"># 等同于下面的命令</span></span><br><span class="line">$ git fetch -p</span><br><span class="line">$ git fetch --prune origin</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>IT兵器谱</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>[IDEA总结]</title>
    <url>/2020/07/27/IDEA%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<blockquote>
<p>成长手册，<strong>GitHub</strong> <a href="https://github.com/rogerXS80/roger" target="_blank" rel="noopener">Lupinus</a> ，N线互联网开发必备技能兵器谱</p>
</blockquote>
<p>工欲善其事，必先利其器 ，当下有数不清的 Java 程序员将石器时代的 Eclipse 替换成了现代化的智能开发工具 InteliJ IDEA ，写代码的小日子过得不亦乐乎。</p>
<h2 id="InteliJ-IDEA-介绍"><a href="#InteliJ-IDEA-介绍" class="headerlink" title="InteliJ IDEA 介绍"></a>InteliJ IDEA 介绍</h2><p>IDEA，全称 IntelliJ IDEA，是 Java 语言的集成开发环境，IDEA 在业界被公认为是最好的 java 开发工具之一，尤其在智能代码助手、代码自动提示、重构、J2EE 支持、Ant、JUnit、CVS 整合、代码审查、创新的 GUI 设计等方面的功能可以说是超常的。</p>
<p>IDEA是 JetBrains 公司的产品，公司旗下还有其它产品，比如： WebStorm、DataGrip、GoLand…</p>
<h2 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h2><ul>
<li>强大的整合能力。比如：Git、Maven、Spring 等</li>
<li>提示功能的快速、便捷</li>
<li>提示功能的范围广</li>
<li>好用的快捷键和代码模板 private static final psf</li>
<li>精准搜索（ IDEA 会将您的源代码编入索引 ）</li>
<li>不需要频繁的Ctrl+S（自动保存）</li>
<li>自带反编译器，方便查看源码</li>
</ul>
<p>在 Eclipse 中我们有 Workspace（工作空间）和 Project（工程）的概念，在 IDEA 中只有 Project（工程）和 Module（模块）的概念 。Eclipse 中 workspace 相当于 IDEA 中的 Project ，Eclipse 中 Project 相当于 IDEA 中的 Module</p>
<p>IDEA 和 Eclipse 的术语对比</p>
<table>
<thead>
<tr>
<th>Eclipse</th>
<th>IntelliJ IDEA</th>
</tr>
</thead>
<tbody><tr>
<td>Workspace</td>
<td>Project</td>
</tr>
<tr>
<td>Project</td>
<td>Module</td>
</tr>
<tr>
<td>Facet</td>
<td>Facet</td>
</tr>
<tr>
<td>Library</td>
<td>Library</td>
</tr>
<tr>
<td>JRE</td>
<td>SDK</td>
</tr>
<tr>
<td>Classpath variable</td>
<td>Path variable</td>
</tr>
</tbody></table>
<h2 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h2><p>实时代码模板 (Live Templates)</p>
<p><img src="https://gitee.com/wjxyzs/img/raw/master/img/%E5%AE%9E%E6%97%B6%E4%BB%A3%E7%A0%81%E6%A8%A1%E6%9D%BF.gif" alt=""></p>
<p>它的原理就是配置一些常用代码字母缩写，在输入简写时可以出现你预定义的固 定模式的代码，使得开发效率大大提高，同时也可以增加个性化。最简单的例子 就是在 Java 中输入 sout 会出现 System.out.println();</p>
<p><strong>Editor – General – Postfix Completion</strong>  查看已经存在的模板（不可修改）</p>
<p><img src="https://gitee.com/wjxyzs/img/raw/master/img/1.jpg" alt=""></p>
<p><strong>Editor — Live Templates</strong> 查看或自定义模板（可以添加方式注释、类注释）</p>
<p><img src="https://gitee.com/wjxyzs/img/raw/master/img/16fc5d998044c7a7.jpg" alt=""></p>
<p><img src="https://gitee.com/wjxyzs/img/raw/master/img/16fc5d998038a98f.jpg" alt=""></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @description:</span></span><br><span class="line"><span class="comment"> * @param $param$</span></span><br><span class="line"><span class="comment"> * @return $return$</span></span><br><span class="line"><span class="comment"> * @date $time$ $date$</span></span><br><span class="line"><span class="comment"> **/</span></span><br></pre></td></tr></table></figure>

<p>类注释一般通过 <strong>File — Setting — Editor — Live Templates — File and Code Templates</strong> 设置</p>
<p><img src="https://gitee.com/wjxyzs/img/raw/master/img/16fc5d9980eb46b1.jpg" alt=""></p>
<h2 id="断点调试"><a href="#断点调试" class="headerlink" title="断点调试"></a>断点调试</h2><p>程序猿么，每天都在写bug，所以这个功能一定得用的溜</p>
<p>配置通用调试属性和行为 ： <strong>Settings/Preferences | Build, Execution, Deployment | Debugger</strong></p>
<h4 id="1-断点类型"><a href="#1-断点类型" class="headerlink" title="1. 断点类型"></a>1. 断点类型</h4><p>断点有四种类型：</p>
<ol>
<li>行断点（Line Breakpoints）：最经常用的方式， 可以设置在任何可执行的代码行上</li>
<li>方法断点（Method Breakpoints）： 在进入或退出指定的方法或其实现之一时挂起程序，允许您检查方法的进入/退出条件</li>
<li>字段断点（Field Watchpoints）： 当指定的字段被读取或写入时，挂起程序。需要注意的是，默认只有写才会停下，想要让读取时也停下，需要右击断点，在<strong>Watch</strong>的<strong>Field access</strong>上打勾才行</li>
<li>异常断点（Exception Breakpoints）： 当抛出Throwable或其子类时挂起程序 。可以在 *<em>Run — View Breakpoints *</em>中的 Java Exception Breakpoints 里添加异常的具体类型。这样的话，程序中一旦发生了这种异常马上就会停下来</li>
</ol>
<h4 id="2-设置断点"><a href="#2-设置断点" class="headerlink" title="2. 设置断点"></a>2. 设置断点</h4><p>左键点击行号栏（快捷键： <code>Ctrl+F8</code> ）</p>
<p><img src="https://gitee.com/wjxyzs/img/raw/master/img/16fc5d99ab8cc421.jpg" alt=""></p>
<h5 id="置异常断点"><a href="#置异常断点" class="headerlink" title="置异常断点"></a>置异常断点</h5><p>点击<strong>Debug</strong>工具窗口左侧的的 <strong>View Breakpoints</strong> <img src="https://gitee.com/wjxyzs/img/raw/master/img/small-1.jpg" alt=""> 或者快捷键 <code>Ctrl+Shift+F8</code> ，可以新建异常检测，或者检测所有异常（<strong>Any Exception</strong>） 情况，这样只要程序有相应异常，就会挂起</p>
<p><img src="https://gitee.com/wjxyzs/img/raw/master/img/16fc5d99a91e3296.jpg" alt=""></p>
<h5 id="条件断点"><a href="#条件断点" class="headerlink" title="条件断点"></a>条件断点</h5><p>有时候我们在循环处理数据时候，可能只关心某个条件的数据，就可以在断点位置右键，设置<strong>断点条件</strong>，（下图，在i==6 的时候挂起程序）</p>
<p><img src="https://gitee.com/wjxyzs/img/raw/master/img/16fc5d99aceda1e2.jpg" alt=""></p>
<h5 id="多线程断点"><a href="#多线程断点" class="headerlink" title="多线程断点"></a>多线程断点</h5><p>在调试多线程代码时候，只能串行调试，因为IDEA在Debug时默认阻塞级别是ALL，会阻塞其它线程，只有在当前调试线程走完时才会走其它线程。如果像下图一样是lambda表达式的行，可以选择断点类型。</p>
<p><img src="https://gitee.com/wjxyzs/img/raw/master/img/16fc5d99a9b956a4.jpg" alt=""></p>
<p>可以在 View Breakpoints 里选择 Thread （右键断点），这样就可以Frames 切换线程debug了。</p>
<p><img src="https://gitee.com/wjxyzs/img/raw/master/img/16fc5d99adc603f0.jpg" alt=""></p>
<h4 id="3-逐步执行程序"><a href="#3-逐步执行程序" class="headerlink" title="3. 逐步执行程序"></a>3. 逐步执行程序</h4><p><img src="https://gitee.com/wjxyzs/img/raw/master/img/small-2.jpg" alt=""></p>
<ul>
<li><img src="https://gitee.com/wjxyzs/img/raw/master/img/small-3.jpg" alt=""> <strong>step over</strong> —— 步过，如果当前行断点是一个方法，则不进入当前方法体内</li>
<li><img src="https://gitee.com/wjxyzs/img/raw/master/img/small-4.jpg" alt=""> <strong>step into</strong> —— 步入，如果当前行断点是一个方法，则进入当前方法体内，一般用于进入自定义方法内，不会进入官方类库的方法</li>
<li><img src="https://gitee.com/wjxyzs/img/raw/master/img/small-5.jpg" alt=""> <strong>force step into</strong> <code>Shift+Alt+F7</code> ——  强制步入，能进入任何方法，查看底层源码的时候可以用这个进入官方类库的方法</li>
<li><img src="https://gitee.com/wjxyzs/img/raw/master/img/small-6.jpg" alt=""> <strong>step out</strong>  <code>Shift+F8</code> —— 步出， 从步入的方法内退出到方法调用处</li>
<li><img src="https://gitee.com/wjxyzs/img/raw/master/img/small-7.jpg" alt=""> <strong>Drop frame</strong> —— 回退到上一步</li>
<li><img src="https://gitee.com/wjxyzs/img/raw/master/img/small-8.jpg" alt=""> <strong>Run to cursor</strong>  <code>Alt+F9</code>  ——  运行到光标处，可以将光标定位到你需要查看的那一行，然后使用这个功能，代码会运行至光标行，而不需要打断点</li>
</ul>
<p>断点这块有好多功能，可以分析JVM中堆对象、Java8的Stream操作，留个传送门。。。TODO</p>
<p>某大佬总结的： <strong><a href="https://www.cnblogs.com/chiangchou/p/idea-debug.html" target="_blank" rel="noopener">在Intellij IDEA中使用Debug</a></strong></p>
<p>官方教程： <strong><a href="https://www.jetbrains.com/help/idea/debugging-code.html" target="_blank" rel="noopener">www.jetbrains.com/help/idea/d…</a></strong></p>
<h2 id="配置Tomcat远程调试"><a href="#配置Tomcat远程调试" class="headerlink" title="配置Tomcat远程调试"></a>配置Tomcat远程调试</h2><p>有时候会有一些服务器差异问题导致的问题，不好排查，这个时候就想远程调试下服务器上的代码。</p>
<p>① 配置tomcat， 在tomcat/bin下的 catalina.sh 上边添加下边的一段设置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">-Xdebug -Xnoagent -Djava.compiler=NONE </span><br><span class="line">-Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=<span class="number">9527</span></span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/wjxyzs/img/raw/master/img/16fc5d99ee95d81b.jpg" alt=""></p>
<p>② IDEA设置</p>
<p><img src="https://gitee.com/wjxyzs/img/raw/master/img/16fc5d99f2f33fe3.jpg" alt=""></p>
<p>③ 在IDEA上启动远程 tomcat后，就能debug了</p>
<p>还有一种复制Startup/Connection 中的内容到 JAVA_OPTS 中，没有尝试</p>
<p><img src="https://gitee.com/wjxyzs/img/raw/master/img/16fc5d99f4b668a5.jpg" alt=""></p>
<h2 id="书签"><a href="#书签" class="headerlink" title="书签"></a>书签</h2><p>书签在翻看源码或者大佬代码的时候，可以方便记录代码的调用链路。</p>
<p>书签有匿名书签（可以有无数个）和标记书签（有数字或者字母助记符的书签）两种</p>
<p>操作书签：<strong>Navigate | Bookmarks</strong> 可以创建匿名书签 Toggle Bookmark。创建标技书签 Toggle Bookmark With Mnemonic，查看标签 Show Bookmarks</p>
<p><img src="https://gitee.com/wjxyzs/img/raw/master/img/16fc5d99f588d675.jpg" alt=""></p>
<h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><ul>
<li><p><strong>Lombok</strong> —— 开发神器，可以简化你的实体类</p>
</li>
<li><p><strong>Maven Helper</strong> ——  方便显示maven的依赖树，处理冲突的好帮手</p>
</li>
<li><p>.<strong>ignore</strong> —— 忽略不需要提交的文件</p>
</li>
<li><p><strong>FindBugs-IDEA</strong> ——  代码审查</p>
</li>
<li><p><strong>Alibaba Java Coding Guidelines</strong> ——  阿里的开发设计规范</p>
</li>
<li><p><strong>Alibaba Cloud Toolkit</strong> ——  帮助开发者更高效地开发、测试、诊断并部署应用。通过插件，可以将本地应用一键部署到任意服务器或云端；并且还内置了 Arthas 诊断、Dubbo工具、Terminal 终端、文件上传、函数计算和 MySQL 执行器等工具</p>
</li>
<li><p><strong>Easy Code</strong> ——  支持自定义模板的代码生成插件</p>
</li>
<li><p><strong>RestfulToolkit</strong> ——  RESTful 服务开发辅助工具集（安利，可以直接在右侧的RestServices查看，所有项目的restful接口，还可以通过 <code>Ctrl \</code> 全局搜索 ）</p>
<p><img src="https://gitee.com/wjxyzs/img/raw/master/img/16fc5d99f6f87218.jpg" alt=""></p>
</li>
</ul>
<p>IDEA 主题和插件排行榜： <strong><a href="https://plugins.jetbrains.com/search?orderBy=downloads&products=idea" target="_blank" rel="noopener">plugins.jetbrains.com/search?orde…</a></strong></p>
<h2 id="激活"><a href="#激活" class="headerlink" title="激活"></a>激活</h2><p>仅供个人学习使用~~</p>
<ol>
<li><p>下载补丁文件 <strong><code>jetbrains-agent.jar</code></strong> 并将它放置到 Idea安装目录的bin目录下，<a href="https://pan.baidu.com/s/1Zy-vQGOdKoqDdB8sWIcQOg" target="_blank" rel="noopener"><strong>pan.baidu.com/s/1Zy-vQGOd…</strong></a></p>
</li>
<li><p>免费试用，进入IDEA, 点击最上面的菜单栏中的 *<em>Help - Edit Custom VM Options *</em>，在<code>idea.exw.vmoptionos</code>文件中加入<code>-javaagent:D:\Program Files\JetBrains\IntelliJ IDEA 2019.2.4\bin\jetbrains-agent.jar</code>(换成你的jar包目录)，重启</p>
</li>
<li><p>重启IDEA 后，打开*<em>Help — Register *</em>，在License Server 填上， <a href="http://jetbrains-license-server/" target="_blank" rel="noopener">http://jetbrains-license-server</a> ，失败的话就输入下边的注册码</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">520E5894</span>E2-eyJsaWNlbnNlSWQiOiI1MjBFNTg5NEUyIiwibGljZW5zZWVOYW1lIjoicGlnNiIsImFzc2lnbmVlTmFtZSI6IiIsImFzc2lnbmVlRW1haWwiOiIiLCJsaWNlbnNlUmVzdHJpY3Rpb24iOiJVbmxpbWl0ZWQgbGljZW5zZSB0aWxsIGVuZCBvZiB0aGUgY2VudHVyeS4iLCJjaGVja0NvbmN1cnJlbnRVc2UiOmZhbHNlLCJwcm9kdWN0cyI6W3siY29kZSI6IklJIiwicGFpZFVwVG8iOiIyMDg5LTA3LTA3In0seyJjb2RlIjoiUlMwIiwicGFpZFVwVG8iOiIyMDg5LTA3LTA3In0seyJjb2RlIjoiV1MiLCJwYWlkVXBUbyI6IjIwODktMDctMDcifSx7ImNvZGUiOiJSRCIsInBhaWRVcFRvIjoiMjA4OS0wNy0wNyJ9LHsiY29kZSI6IlJDIiwicGFpZFVwVG8iOiIyMDg5LTA3LTA3In0seyJjb2RlIjoiREMiLCJwYWlkVXBUbyI6IjIwODktMDctMDcifSx7ImNvZGUiOiJEQiIsInBhaWRVcFRvIjoiMjA4OS0wNy0wNyJ9LHsiY29kZSI6IlJNIiwicGFpZFVwVG8iOiIyMDg5LTA3LTA3In0seyJjb2RlIjoiRE0iLCJwYWlkVXBUbyI6IjIwODktMDctMDcifSx7ImNvZGUiOiJBQyIsInBhaWRVcFRvIjoiMjA4OS0wNy0wNyJ9LHsiY29kZSI6IkRQTiIsInBhaWRVcFRvIjoiMjA4OS0wNy0wNyJ9LHsiY29kZSI6IkdPIiwicGFpZFVwVG8iOiIyMDg5LTA3LTA3In0seyJjb2RlIjoiUFMiLCJwYWlkVXBUbyI6IjIwODktMDctMDcifSx7ImNvZGUiOiJDTCIsInBhaWRVcFRvIjoiMjA4OS0wNy0wNyJ9LHsiY29kZSI6IlBDIiwicGFpZFVwVG8iOiIyMDg5LTA3LTA3In0seyJjb2RlIjoiUlNVIiwicGFpZFVwVG8iOiIyMDg5LTA3LTA3In1dLCJoYXNoIjoiODkwNzA3MC8wIiwiZ3JhY2VQZXJpb2REYXlzIjowLCJhdXRvUHJvbG9uZ2F0ZWQiOmZhbHNlLCJpc0F1dG9Qcm9sb25nYXRlZCI6ZmFsc2V9-DZ/oNHBfyho0XrrCJJvAOKg5Q1tLBgOdbCmzCKwkuM+Yryce0RoOi3OOmH6Ba/uTcCh/L37meyD0FJdJIprv59y4+n+k2kIeF/XKrKqg0dEsDUQRw0lUqqMt99ohqa+zmbJ44Yufdwwx/F1CtoRGvEQ2Mn0QjuqRoZJZ3wiT5Am22JiJW8MaNUl3wg9YPj+OPGARKKJUdUJ0NGUDQBcBAv5ds8LhbSbJSbPkbkwH/a1QMz4nEdn6lRDKI1aFIn43QhBSCFqvUq6TPJlbIJ0ZjE+PyZjHFBKCgkry0DHPXU2BbtIZPsksQnN3fx240a9K6sN7peZnLpEoMoq23FEz4g==-MIIElTCCAn2gAwIBAgIBCTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTE4MTEwMTEyMjk0NloXDTIwMTEwMjEyMjk0NlowaDELMAkGA1UEBhMCQ1oxDjAMBgNVBAgMBU51c2xlMQ8wDQYDVQQHDAZQcmFndWUxGTAXBgNVBAoMEEpldEJyYWlucyBzLnIuby4xHTAbBgNVBAMMFHByb2QzeS1mcm9tLTIwMTgxMTAxMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA5ndaik1GD0nyTdqkZgURQZGW+RGxCdBITPXIwpjhhaD0SXGa4XSZBEBoiPdY6XV6pOfUJeyfi9dXsY4MmT0D+sKoST3rSw96xaf9FXPvOjn4prMTdj3Ji3CyQrGWeQU2nzYqFrp1QYNLAbaViHRKuJrYHI6GCvqCbJe0LQ8qqUiVMA9wG/PQwScpNmTF9Kp2Iej+Z5OUxF33zzm+vg/nYV31HLF7fJUAplI/<span class="number">1</span>nM+ZG8K+AXWgYKChtknl3sW9PCQa3a3imPL9GVToUNxc0wcuTil8mqveWcSQCHYxsIaUajWLpFzoO2AhK4mfYBSStAqEjoXRTuj17mo8Q6M2SHOcwIDAQABo4GZMIGWMAkGA1UdEwQCMAAwHQYDVR0OBBYEFGEpG9oZGcfLMGNBkY7SgHiMGgTcMEgGA1UdIwRBMD+AFKOetkhnQhI2Qb1t4Lm0oFKLl/GzoRykGjAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBggkA0myxg7KDeeEwEwYDVR0lBAwwCgYIKwYBBQUHAwEwCwYDVR0PBAQDAgWgMA0GCSqGSIb3DQEBCwUAA4ICAQBonMu8oa3vmNAa4RQP8gPGlX3SQaA3WCRUAj6Zrlk8AesKV1YSkh5D2l+yUk6njysgzfr1bIR5xF8eup5xXc4/G7NtVYRSMvrd6rfQcHOyK5UFJLm+<span class="number">8</span>utmyMIDrZOzLQuTsT8NxFpbCVCfV5wNRu4rChrCuArYVGaKbmp9ymkw1PU6+HoO5i2wU3ikTmRv8IRjrlSStyNzXpnPTwt7bja19ousk56r40SmlmC04GdDHErr0ei2UbjUua5kw71Qn9g02tL9fERI2sSRjQrvPbn9INwRWl5+k05mlKekbtbu2ev2woJFZK4WEXAd/GaAdeZZdumv8T2idDFL7cAirJwcrbfpawPeXr52oKTPnXfi0l5+g9Gnt/wfiXCrPElX6ycTR6iL3GC2VR4jTz6YatT4Ntz59/THOT7NJQhr6AyLkhhJCdkzE2cob/KouVp4ivV7Q3Fc6HX7eepHAAF/DpxwgOrg9smX6coXLgfp0b1RU2u/tUNID04rpNxTMueTtrT8WSskqvaJd3RH8r7cnRj6Y2hltkja82HlpDURDxDTRvv+krbwMr26SB/<span class="number">40</span>BjpMUrDRCeKuiBahC0DCoU/<span class="number">4</span>+ze1l94wVUhdkCfL0GpJrMSCDEK+XEurU18Hb7WT+ThXbkdl6VpFdHsRvqAnhR2g4b+Qzgidmuky5NUZVfEaZqV/g==</span><br></pre></td></tr></table></figure>

<ol start="4">
<li><strong>Help — About</strong>，搞定</li>
</ol>
<p><img src="https://gitee.com/wjxyzs/img/raw/master/img/16fc5d9a19720b1f.jpg" alt=""></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>IntelliJ IDEA 2019.3官方指南 <strong><a href="https://www.jetbrains.com/help/idea/installation-guide.html" target="_blank" rel="noopener">www.jetbrains.com/help/idea/i…</a></strong></p>
<p>idea2019激活 <strong><a href="https://segmentfault.com/a/1190000021488264" target="_blank" rel="noopener">segmentfault.com/a/119000002…</a></strong></p>
]]></content>
      <categories>
        <category>技能get</category>
      </categories>
      <tags>
        <tag>IDEA</tag>
      </tags>
  </entry>
  <entry>
    <title>[JQuery入门]</title>
    <url>/2019/07/12/JQuery%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h1 id="jQuery"><a href="#jQuery" class="headerlink" title="jQuery"></a>jQuery</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;&quot;&quot;</span><br><span class="line">jQuery内部封装了原生的js代码(还额外添加了很多的功能)</span><br><span class="line">能够让你通过书写更少的代码 完成js操作 </span><br><span class="line">类似于python里面的模块  在前端模块不叫模块  叫 “类库”</span><br><span class="line"></span><br><span class="line">兼容多个浏览器的 你在使用jQuery的时候就不需要考虑浏览器兼容问题</span><br><span class="line"></span><br><span class="line">jQuery的宗旨</span><br><span class="line">	write less do more</span><br><span class="line">	让你用更少的代码完成更多的事情</span><br><span class="line"></span><br><span class="line">复习</span><br><span class="line">	python导入模块发生了哪些事？</span><br><span class="line">		导入模块其实需要消耗资源</span><br><span class="line">	jQuery在使用的时候也需要导入</span><br><span class="line">		但是它的文件非常的小(几十KB) 基本不影响网络速度</span><br><span class="line"></span><br><span class="line">选择器</span><br><span class="line">筛选器</span><br><span class="line">样式操作</span><br><span class="line">文本操作</span><br><span class="line">属性操作</span><br><span class="line">文档处理</span><br><span class="line">事件</span><br><span class="line">动画效果</span><br><span class="line">插件</span><br><span class="line">each、data、Ajax(重点 django部分学)</span><br><span class="line"></span><br><span class="line">版本介绍</span><br><span class="line"></span><br><span class="line">jQuery文件下载</span><br><span class="line">	压缩  		容量更小</span><br><span class="line">	未压缩</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"># jQuery在使用之前 一定要确保已经导入了</span><br></pre></td></tr></table></figure>

<h3 id="针对导入问题"><a href="#针对导入问题" class="headerlink" title="针对导入问题"></a>针对导入问题</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"># 1 文件下载到了本地 如何解决多个文件反复书写引入语句的代码</span><br><span class="line">	可以借助于pycharm自动初始化代码功能完成自动添加</span><br><span class="line">  	配置</span><br><span class="line">    	编辑</span><br><span class="line">      	file and code template</span><br><span class="line">  <span class="string">""</span><span class="string">"我不想下载jQuery文件 能不能使用呢？"</span><span class="string">""</span></span><br><span class="line">  </span><br><span class="line"># 2 直接引入jQuery提供的CDN服务(基于网络直接请求加载)</span><br><span class="line">	CDN:内容分发网络</span><br><span class="line">  	CDN有免费的也有收费的</span><br><span class="line">    前端免费的cdn网站:</span><br><span class="line">      	bootcdn</span><br><span class="line">    &lt;script src=<span class="string">"https://cdn.bootcdn.net/ajax/libs/jquery/3.4.1/jquery.min.js"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">  """你的计算机必须要有网络"""</span></span><br><span class="line"><span class="regexp">  </span></span><br><span class="line"><span class="regexp">  </span></span><br><span class="line"><span class="regexp"># jQuery基本语法</span></span><br><span class="line"><span class="regexp">	jQuery(选择器).action()</span></span><br><span class="line"><span class="regexp">  秉持着jQuery的宗旨 jQuery简写	$</span></span><br><span class="line"><span class="regexp">  jQuery()  === $()</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp"># jQuery与js代码对比</span></span><br><span class="line"><span class="regexp">	eg:将p标签内部的文本颜色改为红色</span></span><br><span class="line"><span class="regexp">   	/</span><span class="regexp">/ 原生js代码操作标签</span></span><br><span class="line"><span class="regexp">		let pEle = document.getElementById('d1')</span></span><br><span class="line"><span class="regexp">		pEle.style.color = 'red'</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">		/</span><span class="regexp">/ jQuery操作标签</span></span><br><span class="line"><span class="regexp">		$('p').css('color','blue')</span></span><br></pre></td></tr></table></figure>

<h1 id="先学如何查找标签"><a href="#先学如何查找标签" class="headerlink" title="先学如何查找标签"></a>先学如何查找标签</h1><h3 id="基本选择器"><a href="#基本选择器" class="headerlink" title="基本选择器"></a>基本选择器</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="comment">// id选择器</span></span><br><span class="line">$(<span class="string">'#d1'</span>)</span><br><span class="line">w.fn.init [div#d1]0: div#d1length: 1__proto__: Object(0)</span><br><span class="line"><span class="comment">// class选择器</span></span><br><span class="line">$(<span class="string">'.c1'</span>)</span><br><span class="line">w.fn.init [p.c1, <span class="attr">prevObject</span>: w.fn.init(<span class="number">1</span>)]<span class="number">0</span>: p.c1length: <span class="number">1</span>prevObject: w.fn.init [<span class="built_in">document</span>]__proto__: <span class="built_in">Object</span>(<span class="number">0</span>)</span><br><span class="line"><span class="comment">// 标签选择器</span></span><br><span class="line">$(<span class="string">'span'</span>)</span><br><span class="line">w.fn.init(<span class="number">3</span>) [span, span, span, <span class="attr">prevObject</span>: w.fn.init(<span class="number">1</span>)]</span><br><span class="line"></span><br><span class="line"><span class="string">""</span><span class="string">"一定要区分开(重点)"</span><span class="string">""</span></span><br><span class="line"><span class="comment">// jQuery对象如何变成标签对象</span></span><br><span class="line"><span class="literal">undefined</span></span><br><span class="line">$(<span class="string">'#d1'</span>)[<span class="number">0</span>]</span><br><span class="line">&lt;div id=​<span class="string">"d1"</span>&gt;​…​&lt;<span class="regexp">/div&gt;​</span></span><br><span class="line"><span class="regexp">document.getElementById('d1')</span></span><br><span class="line"><span class="regexp">&lt;div id=​"d1"&gt;​…​&lt;/</span>div&gt;​</span><br><span class="line"><span class="comment">// 标签对象如何转jQuery对象</span></span><br><span class="line"><span class="literal">undefined</span></span><br><span class="line">$(<span class="built_in">document</span>.getElementById(<span class="string">'d1'</span>))</span><br><span class="line">w.fn.init [div#d1]</span><br></pre></td></tr></table></figure>

<h3 id="组合选择器-分组与嵌套"><a href="#组合选择器-分组与嵌套" class="headerlink" title="组合选择器/分组与嵌套"></a>组合选择器/分组与嵌套</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">$(<span class="string">'div'</span>)</span><br><span class="line">w.fn.init(2) [div#d1, div.c1, prevObject: w.fn.init(1)]</span><br><span class="line">$(<span class="string">'div.c1'</span>)</span><br><span class="line">w.fn.init [div.c1, <span class="attr">prevObject</span>: w.fn.init(<span class="number">1</span>)]<span class="number">0</span>: div.c1length: <span class="number">1</span>prevObject: w.fn.init [<span class="built_in">document</span>]__proto__: <span class="built_in">Object</span>(<span class="number">0</span>)</span><br><span class="line">$(<span class="string">'div#d1'</span>)</span><br><span class="line">w.fn.init [div#d1, prevObject: w.fn.init(1)]</span><br><span class="line">$(<span class="string">'*'</span>)</span><br><span class="line">w.fn.init(19) [html, head, meta, title, meta, link, script, script, body, span, span, div#d1, span, p#d2, span, span, div.c1, span, span, prevObject: w.fn.init(1)]</span><br><span class="line">               </span><br><span class="line">$('#d1,.c1,p')  # 并列+混用</span><br><span class="line">w.fn.init(3) [div#d1, p#d2, div.c1, prevObject: w.fn.init(1)]</span><br><span class="line">              </span><br><span class="line">$('div span')  # 后代</span><br><span class="line">w.fn.init(<span class="number">3</span>) [span, span, span, <span class="attr">prevObject</span>: w.fn.init(<span class="number">1</span>)]</span><br><span class="line">$('div&gt;span')  # 儿子</span><br><span class="line">w.fn.init(<span class="number">2</span>) [span, span, <span class="attr">prevObject</span>: w.fn.init(<span class="number">1</span>)]</span><br><span class="line">$('div+span')  # 毗邻</span><br><span class="line">w.fn.init [span, <span class="attr">prevObject</span>: w.fn.init(<span class="number">1</span>)]</span><br><span class="line">$('div~span')  # 弟弟</span><br><span class="line">w.fn.init(<span class="number">2</span>) [span, span, <span class="attr">prevObject</span>: w.fn.init(<span class="number">1</span>)]</span><br></pre></td></tr></table></figure>

<h3 id="基本筛选器"><a href="#基本筛选器" class="headerlink" title="基本筛选器"></a>基本筛选器</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">$(<span class="string">'ul li'</span>)</span><br><span class="line">w.fn.init(10) [li, li, li, li, li, li, li.c1, li, li#d1, li, prevObject: w.fn.init(1)]</span><br><span class="line">               </span><br><span class="line">$('ul li:first')  # 大儿子 </span><br><span class="line">w.fn.init [li, <span class="attr">prevObject</span>: w.fn.init(<span class="number">1</span>)]<span class="number">0</span>: lilength: <span class="number">1</span>prevObject: w.fn.init [<span class="built_in">document</span>]__proto__: <span class="built_in">Object</span>(<span class="number">0</span>)</span><br><span class="line">               </span><br><span class="line">$('ul li:last')  # 小儿子</span><br><span class="line">w.fn.init [li, <span class="attr">prevObject</span>: w.fn.init(<span class="number">1</span>)]<span class="number">0</span>: lilength: <span class="number">1</span>prevObject: w.fn.init [<span class="built_in">document</span>]__proto__: <span class="built_in">Object</span>(<span class="number">0</span>)</span><br><span class="line">               </span><br><span class="line">$('ul li:eq(2)')		# 放索引</span><br><span class="line">w.fn.init [li, <span class="attr">prevObject</span>: w.fn.init(<span class="number">1</span>)]<span class="number">0</span>: lilength: <span class="number">1</span>prevObject: w.fn.init [<span class="built_in">document</span>]__proto__: <span class="built_in">Object</span>(<span class="number">0</span>)</span><br><span class="line">               </span><br><span class="line">$('ul li:even')  # 偶数索引 0包含在内</span><br><span class="line">w.fn.init(5) [li, li, li, li.c1, li#d1, prevObject: w.fn.init(1)]0: li1: li2: li3: li.c14: li#d1length: 5prevObject: w.fn.init [document]__proto__: Object(0)</span><br><span class="line">              </span><br><span class="line">$('ul li:odd')  # 奇数索引</span><br><span class="line">w.fn.init(<span class="number">5</span>) [li, li, li, li, li, <span class="attr">prevObject</span>: w.fn.init(<span class="number">1</span>)]<span class="number">0</span>: li1: li2: li3: li4: lilength: <span class="number">5</span>prevObject: w.fn.init [<span class="built_in">document</span>]__proto__: <span class="built_in">Object</span>(<span class="number">0</span>)</span><br><span class="line">              </span><br><span class="line">$('ul li:gt(2)')  # 大于索引</span><br><span class="line">w.fn.init(7) [li, li, li, li.c1, li, li#d1, li, prevObject: w.fn.init(1)]0: li1: li2: li3: li.c14: li5: li#d16: lilength: 7prevObject: w.fn.init [document]__proto__: Object(0)</span><br><span class="line">              </span><br><span class="line">$('ul li:lt(2)')  # 小于索引</span><br><span class="line">w.fn.init(<span class="number">2</span>) [li, li, <span class="attr">prevObject</span>: w.fn.init(<span class="number">1</span>)]<span class="number">0</span>: li1: lilength: <span class="number">2</span>prevObject: w.fn.init [<span class="built_in">document</span>]__proto__: <span class="built_in">Object</span>(<span class="number">0</span>)</span><br><span class="line">              </span><br><span class="line">$('ul li:not("#d1")')  # 移除满足条件的标签</span><br><span class="line">w.fn.init(<span class="number">9</span>) [li, li, li, li, li, li, li.c1, li, li, <span class="attr">prevObject</span>: w.fn.init(<span class="number">1</span>)]</span><br><span class="line">         </span><br><span class="line">$(<span class="string">'div'</span>)</span><br><span class="line">w.fn.init(<span class="number">2</span>) [div, div, <span class="attr">prevObject</span>: w.fn.init(<span class="number">1</span>)]</span><br><span class="line">$('div:has("p")')  # 选取出包含一个或多个标签在内的标签</span><br><span class="line">w.fn.init [div, <span class="attr">prevObject</span>: w.fn.init(<span class="number">1</span>)]</span><br></pre></td></tr></table></figure>

<h3 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">$(<span class="string">'[username]'</span>)</span><br><span class="line">w.fn.init(<span class="number">3</span>) [input, input, p, <span class="attr">prevObject</span>: w.fn.init(<span class="number">1</span>)]</span><br><span class="line">$(<span class="string">'[username="jason"]'</span>)</span><br><span class="line">w.fn.init [input, <span class="attr">prevObject</span>: w.fn.init(<span class="number">1</span>)]</span><br><span class="line">$(<span class="string">'p[username="egon"]'</span>)</span><br><span class="line">w.fn.init [p, <span class="attr">prevObject</span>: w.fn.init(<span class="number">1</span>)]</span><br><span class="line"></span><br><span class="line">$(<span class="string">'[type]'</span>)</span><br><span class="line">w.fn.init(<span class="number">2</span>) [input, input, <span class="attr">prevObject</span>: w.fn.init(<span class="number">1</span>)]</span><br><span class="line">$(<span class="string">'[type="text"]'</span>)</span><br><span class="line">w.fn.init(<span class="number">2</span>) [input, input, <span class="attr">prevObject</span>: w.fn.init(<span class="number">1</span>)]</span><br></pre></td></tr></table></figure>

<h3 id="表单筛选器"><a href="#表单筛选器" class="headerlink" title="表单筛选器"></a>表单筛选器</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">$(<span class="string">'input[type="text"]'</span>)</span><br><span class="line">w.fn.init [input, <span class="attr">prevObject</span>: w.fn.init(<span class="number">1</span>)]<span class="number">0</span>: inputlength: <span class="number">1</span>prevObject: w.fn.init [<span class="built_in">document</span>]__proto__: <span class="built_in">Object</span>(<span class="number">0</span>)</span><br><span class="line">$(<span class="string">'input[type="password"]'</span>)</span><br><span class="line">w.fn.init [input, <span class="attr">prevObject</span>: w.fn.init(<span class="number">1</span>)]</span><br><span class="line"></span><br><span class="line">$(':text')  # 等价于上面第一个</span><br><span class="line">w.fn.init [input, <span class="attr">prevObject</span>: w.fn.init(<span class="number">1</span>)]<span class="number">0</span>: inputlength: <span class="number">1</span>prevObject: w.fn.init [<span class="built_in">document</span>]__proto__: <span class="built_in">Object</span>(<span class="number">0</span>)</span><br><span class="line">$(':password')  # 等价于上面第二个</span><br><span class="line">w.fn.init [input, <span class="attr">prevObject</span>: w.fn.init(<span class="number">1</span>)]</span><br><span class="line"></span><br><span class="line">:text</span><br><span class="line">:password</span><br><span class="line">:file</span><br><span class="line">:radio</span><br><span class="line">:checkbox</span><br><span class="line">:submit</span><br><span class="line">:reset</span><br><span class="line">:button</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">表单对象属性</span><br><span class="line">:enabled</span><br><span class="line">:disabled</span><br><span class="line">:checked</span><br><span class="line">:selected</span><br><span class="line"><span class="string">""</span><span class="string">"特殊情况"</span><span class="string">""</span></span><br><span class="line">$(':checked')  # 它会将checked和selected都拿到</span><br><span class="line">w.fn.init(<span class="number">2</span>) [input, option, <span class="attr">prevObject</span>: w.fn.init(<span class="number">1</span>)]<span class="number">0</span>: input1: optionlength: <span class="number">2</span>prevObject: w.fn.init [<span class="built_in">document</span>]__proto__: <span class="built_in">Object</span>(<span class="number">0</span>)</span><br><span class="line">$(':selected')  # 它不会 只拿selected</span><br><span class="line">w.fn.init [option, <span class="attr">prevObject</span>: w.fn.init(<span class="number">1</span>)]</span><br><span class="line">$('input:checked')  # 自己加一个限制条件</span><br><span class="line">w.fn.init [input, <span class="attr">prevObject</span>: w.fn.init(<span class="number">1</span>)]</span><br></pre></td></tr></table></figure>

<h3 id="筛选器方法"><a href="#筛选器方法" class="headerlink" title="筛选器方法"></a>筛选器方法</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">$('#d1').next()  # 同级别下一个</span><br><span class="line">w.fn.init [span, prevObject: w.fn.init(1)]0: spanlength: 1prevObject: w.fn.init [span#d1]__proto__: Object(0)</span><br><span class="line">$(<span class="string">'#d1'</span>).nextAll()</span><br><span class="line">w.fn.init(5) [span, div#d2, span, span, span.c1, prevObject: w.fn.init(1)]0: span1: div#d22: span3: span4: span.c1length: 5prevObject: w.fn.init [span#d1]__proto__: Object(0)</span><br><span class="line">$('#d1').nextUntil('.c1')  # 不包括最后一个</span><br><span class="line">w.fn.init(4) [span, div#d2, span, span, prevObject: w.fn.init(1)]0: span1: div#d22: span3: spanlength: 4prevObject: w.fn.init [span#d1]__proto__: Object(0)</span><br><span class="line">              </span><br><span class="line">              </span><br><span class="line">$('.c1').prev()  # 上一个</span><br><span class="line">w.fn.init [span, <span class="attr">prevObject</span>: w.fn.init(<span class="number">1</span>)]<span class="number">0</span>: spanlength: <span class="number">1</span>prevObject: w.fn.init [span.c1, <span class="attr">prevObject</span>: w.fn.init(<span class="number">1</span>)]__proto__: <span class="built_in">Object</span>(<span class="number">0</span>)</span><br><span class="line">$(<span class="string">'.c1'</span>).prevAll()</span><br><span class="line">w.fn.init(5) [span, span, div#d2, span, span#d1, prevObject: w.fn.init(1)]</span><br><span class="line">$(<span class="string">'.c1'</span>).prevUntil(<span class="string">'#d2'</span>)</span><br><span class="line">w.fn.init(<span class="number">2</span>) [span, span, <span class="attr">prevObject</span>: w.fn.init(<span class="number">1</span>)]</span><br><span class="line">              </span><br><span class="line">$('#d3').parent()  # 第一级父标签</span><br><span class="line">w.fn.init [p, prevObject: w.fn.init(1)]0: plength: 1prevObject: w.fn.init [span#d3]__proto__: Object(0)</span><br><span class="line">$(<span class="string">'#d3'</span>).parent().parent()</span><br><span class="line">w.fn.init [div#d2, prevObject: w.fn.init(1)]</span><br><span class="line">$(<span class="string">'#d3'</span>).parent().parent().parent()</span><br><span class="line">w.fn.init [body, <span class="attr">prevObject</span>: w.fn.init(<span class="number">1</span>)]</span><br><span class="line">$(<span class="string">'#d3'</span>).parent().parent().parent().parent()</span><br><span class="line">w.fn.init [html, <span class="attr">prevObject</span>: w.fn.init(<span class="number">1</span>)]</span><br><span class="line">$(<span class="string">'#d3'</span>).parent().parent().parent().parent().parent()</span><br><span class="line">w.fn.init [<span class="built_in">document</span>, <span class="attr">prevObject</span>: w.fn.init(<span class="number">1</span>)]</span><br><span class="line">$(<span class="string">'#d3'</span>).parent().parent().parent().parent().parent().parent()</span><br><span class="line">w.fn.init [prevObject: w.fn.init(<span class="number">1</span>)]</span><br><span class="line">$(<span class="string">'#d3'</span>).parents()</span><br><span class="line">w.fn.init(4) [p, div#d2, body, html, prevObject: w.fn.init(1)]</span><br><span class="line">$(<span class="string">'#d3'</span>).parentsUntil(<span class="string">'body'</span>)</span><br><span class="line">w.fn.init(2) [p, div#d2, prevObject: w.fn.init(1)]</span><br><span class="line">              </span><br><span class="line">              </span><br><span class="line">$('#d2').children()  # 儿子</span><br><span class="line">              </span><br><span class="line">$('#d2').siblings()  # 同级别上下所有</span><br><span class="line">              </span><br><span class="line">              </span><br><span class="line">              </span><br><span class="line">$(<span class="string">'div p'</span>)</span><br><span class="line"># 等价           </span><br><span class="line">$('div').find('p')  # find从某个区域内筛选出想要的标签 </span><br><span class="line">              </span><br><span class="line">              </span><br><span class="line"><span class="string">""</span><span class="string">"下述两两等价"</span><span class="string">""</span></span><br><span class="line">$(<span class="string">'div span:first'</span>)</span><br><span class="line">w.fn.init [span, <span class="attr">prevObject</span>: w.fn.init(<span class="number">1</span>)]</span><br><span class="line">$(<span class="string">'div span'</span>).first()</span><br><span class="line">w.fn.init [span, prevObject: w.fn.init(3)]0: spanlength: 1prevObject: w.fn.init(3) [span, span#d3, span, prevObject: w.fn.init(1)]__proto__: Object(0)</span><br><span class="line">                                                                                    </span><br><span class="line">$(<span class="string">'div span:last'</span>)</span><br><span class="line">w.fn.init [span, <span class="attr">prevObject</span>: w.fn.init(<span class="number">1</span>)]</span><br><span class="line">$(<span class="string">'div span'</span>).last()</span><br><span class="line">                                                                                    </span><br><span class="line">w.fn.init [span, <span class="attr">prevObject</span>: w.fn.init(<span class="number">3</span>)]</span><br><span class="line">$(<span class="string">'div span:not("#d3")'</span>)</span><br><span class="line">w.fn.init(<span class="number">2</span>) [span, span, <span class="attr">prevObject</span>: w.fn.init(<span class="number">1</span>)]</span><br><span class="line">$(<span class="string">'div span'</span>).not(<span class="string">'#d3'</span>)</span><br><span class="line">w.fn.init(<span class="number">2</span>) [span, span, <span class="attr">prevObject</span>: w.fn.init(<span class="number">3</span>)]</span><br></pre></td></tr></table></figure>

<ul>
<li><p>jQuery练习题</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">$(<span class="string">'#i1'</span>)</span><br><span class="line">r.fn.init [div#i1.container]</span><br><span class="line">           </span><br><span class="line">$(<span class="string">'h2'</span>)</span><br><span class="line">r.fn.init [h2, <span class="attr">prevObject</span>: r.fn.init(<span class="number">1</span>)]</span><br><span class="line"></span><br><span class="line">$(<span class="string">'input'</span>)</span><br><span class="line">r.fn.init(9) [input#exampleInputEmail1.form-control, input#exampleInputPassword1.form-control, input#exampleInputFile, input, input, input, input, input#optionsRadios1, input#optionsRadios2, prevObject: r.fn.init(1)]</span><br><span class="line">              </span><br><span class="line">$(<span class="string">'.c1'</span>)</span><br><span class="line">r.fn.init(<span class="number">2</span>) [h1.c1, h1.c1, <span class="attr">prevObject</span>: r.fn.init(<span class="number">1</span>)]</span><br><span class="line"></span><br><span class="line">$(<span class="string">'.btn-default'</span>)</span><br><span class="line">r.fn.init [button#btnSubmit.btn.btn-default, prevObject: r.fn.init(1)]</span><br><span class="line">           </span><br><span class="line">$(<span class="string">'.c1,h2'</span>)</span><br><span class="line">r.fn.init(<span class="number">3</span>) [h1.c1, h1.c1, h2, <span class="attr">prevObject</span>: r.fn.init(<span class="number">1</span>)]</span><br><span class="line"></span><br><span class="line">$(<span class="string">'.c1,#p3'</span>)</span><br><span class="line">r.fn.init(3) [h1.c1, h1.c1, p#p3.divider, prevObject: r.fn.init(1)]</span><br><span class="line">              </span><br><span class="line">$(<span class="string">'.c1,.btn'</span>)</span><br><span class="line">r.fn.init(11) [h1.c1, h1.c1, a.btn.btn-primary.btn-lg, button.btn.btn-warning, button.btn.btn-danger, button.btn.btn-warning, button.btn.btn-danger, button.btn.btn-warning, button.btn.btn-danger, button#btnSubmit.btn.btn-default, a.btn.btn-success, prevObject: r.fn.init(1)]</span><br><span class="line">               </span><br><span class="line">$(<span class="string">'form'</span>).find(<span class="string">'input'</span>)</span><br><span class="line">r.fn.init(3) [input#exampleInputEmail1.form-control, input#exampleInputPassword1.form-control, input#exampleInputFile, prevObject: r.fn.init(1)]</span><br><span class="line">              </span><br><span class="line">$(<span class="string">'label input'</span>)</span><br><span class="line">r.fn.init(6) [input, input, input, input, input#optionsRadios1, input#optionsRadios2, prevObject: r.fn.init(1)]</span><br><span class="line">              </span><br><span class="line">$(<span class="string">'label+input'</span>)</span><br><span class="line">r.fn.init(3) [input#exampleInputEmail1.form-control, input#exampleInputPassword1.form-control, input#exampleInputFile, prevObject: r.fn.init(1)]</span><br><span class="line">              </span><br><span class="line">$(<span class="string">'#p2~li'</span>)</span><br><span class="line">r.fn.init(<span class="number">8</span>) [li, li, li, li, li, li, li, li, <span class="attr">prevObject</span>: r.fn.init(<span class="number">1</span>)]</span><br><span class="line"></span><br><span class="line">$(<span class="string">'#f1 input:first'</span>)</span><br><span class="line">r.fn.init [input#exampleInputEmail1.form-control, prevObject: r.fn.init(1)]</span><br><span class="line">           </span><br><span class="line">$(<span class="string">'#my-checkbox input:last'</span>)</span><br><span class="line">r.fn.init [input, <span class="attr">prevObject</span>: r.fn.init(<span class="number">1</span>)]</span><br><span class="line"></span><br><span class="line">$(<span class="string">'#my-checkbox input[checked!="checked"]'</span>)</span><br><span class="line">r.fn.init(<span class="number">3</span>) [input, input, input, <span class="attr">prevObject</span>: r.fn.init(<span class="number">1</span>)]<span class="number">0</span>: input1: input2: inputlength: <span class="number">3</span>prevObject: r.fn.init [<span class="built_in">document</span>]__proto__: <span class="built_in">Object</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">$(<span class="string">'label:has("input")'</span>)</span><br><span class="line">r.fn.init(<span class="number">6</span>) [label, label, label, label, label, label, <span class="attr">prevObject</span>: r.fn.init(<span class="number">1</span>)]</span><br></pre></td></tr></table></figure>
</li>
<li><p>操作标签</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"># 操作类</span><br><span class="line"><span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string">js版本														jQuery版本</span></span><br><span class="line"><span class="string">classList.add()										addClass()</span></span><br><span class="line"><span class="string">classList.remove()								removeClass()</span></span><br><span class="line"><span class="string">classList.contains()							hasClass()</span></span><br><span class="line"><span class="string">classList.toggle()								toggleClass()</span></span><br><span class="line"><span class="string">"</span><span class="string">""</span></span><br><span class="line"></span><br><span class="line"># css操作</span><br><span class="line">&lt;p&gt;<span class="number">111</span>&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">&lt;p&gt;222&lt;/</span>p&gt;</span><br><span class="line"><span class="string">""</span><span class="string">"一行代码将第一个p标签变成红色第二个p标签变成绿色"</span><span class="string">""</span></span><br><span class="line">$(<span class="string">'p'</span>).first().css(<span class="string">'color'</span>,<span class="string">'red'</span>).next().css(<span class="string">'color'</span>,<span class="string">'green'</span>)</span><br><span class="line"># jQuery的链式操作 使用jQuery可以做到一行代码操作很多标签</span><br><span class="line"># jQuery对象调用jQuery方法之后返回的还是当前jQuery对象 也就可以继续调用其他方法</span><br><span class="line">class MyClass(object):</span><br><span class="line">    def func1(self):</span><br><span class="line">        print(<span class="string">'func1'</span>)</span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line"></span><br><span class="line">    def func2(self):</span><br><span class="line">        print(<span class="string">'func2'</span>)</span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line">obj = MyClass()</span><br><span class="line">obj.func1().func2()</span><br><span class="line"></span><br><span class="line"># 位置操作</span><br><span class="line">offset()  # 相对于浏览器窗口</span><br><span class="line">position()  # 相对于父标签</span><br><span class="line"></span><br><span class="line">scrollTop()		# 需要了解</span><br><span class="line">	$(<span class="built_in">window</span>).scrollTop()</span><br><span class="line">  <span class="number">0</span></span><br><span class="line">  $(<span class="built_in">window</span>).scrollTop()</span><br><span class="line">  <span class="number">969</span></span><br><span class="line">  $(window).scrollTop()  # 括号内不加参数就是获取</span><br><span class="line">  <span class="number">1733</span></span><br><span class="line">  $(window).scrollTop(0)  # 加了参数就是设置</span><br><span class="line">  n.fn.init [Window]</span><br><span class="line">  $(<span class="built_in">window</span>).scrollTop(<span class="number">500</span>)</span><br><span class="line">  n.fn.init [Window]</span><br><span class="line">scrollLeft()</span><br><span class="line"></span><br><span class="line"># 尺寸</span><br><span class="line">$('p').height()  # 文本</span><br><span class="line"><span class="number">20</span></span><br><span class="line">$(<span class="string">'p'</span>).width()</span><br><span class="line"><span class="number">1670</span></span><br><span class="line">$('p').innerHeight()  # 文本+padding</span><br><span class="line"><span class="number">26</span></span><br><span class="line">$(<span class="string">'p'</span>).innerWidth()</span><br><span class="line"><span class="number">1674</span></span><br><span class="line">$('p').outerHeight()  # 文本+padding+border</span><br><span class="line"><span class="number">26</span></span><br><span class="line">$(<span class="string">'p'</span>).outerWidth()</span><br><span class="line"><span class="number">1674</span></span><br><span class="line"></span><br><span class="line"># 文本操作</span><br><span class="line"><span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string">操作标签内部文本</span></span><br><span class="line"><span class="string">js											jQuery</span></span><br><span class="line"><span class="string">innerText								text()  括号内不加参数就是获取加了就是设置</span></span><br><span class="line"><span class="string">innerHTML								html()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">$('div').text()</span></span><br><span class="line"><span class="string">"</span></span><br><span class="line">    </span><br><span class="line">        有些话听听就过去了，不要在意，都是成年人!</span><br><span class="line">    </span><br><span class="line"><span class="string">"</span></span><br><span class="line"><span class="string">$('div').html()</span></span><br><span class="line"><span class="string">"</span></span><br><span class="line">    &lt;p&gt;</span><br><span class="line">        有些话听听就过去了，不要在意，都是成年人!</span><br><span class="line">    &lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">"</span></span><br><span class="line"><span class="regexp">$('div').text('你们都是我的大宝贝')</span></span><br><span class="line"><span class="regexp">w.fn.init [div, prevObject: w.fn.init(1)]</span></span><br><span class="line"><span class="regexp">$('div').html('你个臭妹妹')</span></span><br><span class="line"><span class="regexp">w.fn.init [div, prevObject: w.fn.init(1)]</span></span><br><span class="line"><span class="regexp">$('div').text('&lt;h1&gt;你们都是我的大宝贝&lt;/</span>h1&gt;<span class="string">')</span></span><br><span class="line"><span class="string">w.fn.init [div, prevObject: w.fn.init(1)]</span></span><br><span class="line"><span class="string">$('</span>div<span class="string">').html('</span>&lt;h1&gt;你个臭妹妹&lt;<span class="regexp">/h1&gt;')</span></span><br><span class="line"><span class="regexp">w.fn.init [div, prevObject: w.fn.init(1)]</span></span><br><span class="line"><span class="regexp">"""</span></span><br><span class="line"><span class="regexp"># 获取值操作</span></span><br><span class="line"><span class="regexp">"""</span></span><br><span class="line"><span class="regexp">js													jQuery</span></span><br><span class="line"><span class="regexp">.value											.val()</span></span><br><span class="line"><span class="regexp">"""</span></span><br><span class="line"><span class="regexp">$('#d1').val()</span></span><br><span class="line"><span class="regexp">"sasdasdsadsadad"</span></span><br><span class="line"><span class="regexp">$('#d1').val('520快乐')  # 括号内不加参数就是获取加了就是设置</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">w.fn.init [input#d1]</span></span><br><span class="line"><span class="regexp">$('#d2').val()</span></span><br><span class="line"><span class="regexp">"C:\fakepath\01_测试路由.png"</span></span><br><span class="line"><span class="regexp">$('#d2')[0].files[0]  # 牢记两个对象之间的转换</span></span><br><span class="line"><span class="regexp">File &#123;name: "01_测试路由.png", lastModified: 1557043083000, lastModifiedDate: Sun May 05 2019 15:58:03 GMT+0800 (中国标准时间), webkitRelativePath: "", size: 28733, …&#125;</span></span><br><span class="line"><span class="regexp">           </span></span><br><span class="line"><span class="regexp">           </span></span><br><span class="line"><span class="regexp"># 属性操作</span></span><br><span class="line"><span class="regexp">"""</span></span><br><span class="line"><span class="regexp">js中																jQuery</span></span><br><span class="line"><span class="regexp">setAttribute()											attr(name,value)</span></span><br><span class="line"><span class="regexp">getAttribute()											attr(name)</span></span><br><span class="line"><span class="regexp">removeAttribute()										removeAttr(name)</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">在用变量存储对象的时候 js中推荐使用	</span></span><br><span class="line"><span class="regexp">	XXXEle			标签对象</span></span><br><span class="line"><span class="regexp">jQuery中推荐使用</span></span><br><span class="line"><span class="regexp">	$XXXEle			jQuery对象</span></span><br><span class="line"><span class="regexp">"""</span></span><br><span class="line"><span class="regexp">let $pEle = $('p')</span></span><br><span class="line"><span class="regexp">undefined</span></span><br><span class="line"><span class="regexp">$pEle.attr('id')</span></span><br><span class="line"><span class="regexp">"d1"</span></span><br><span class="line"><span class="regexp">$pEle.attr('class')</span></span><br><span class="line"><span class="regexp">undefined</span></span><br><span class="line"><span class="regexp">$pEle.attr('class','c1')</span></span><br><span class="line"><span class="regexp">w.fn.init [p#d1.c1, prevObject: w.fn.init(1)]</span></span><br><span class="line"><span class="regexp">$pEle.attr('id','id666')</span></span><br><span class="line"><span class="regexp">w.fn.init [p#id666.c1, prevObject: w.fn.init(1)]</span></span><br><span class="line"><span class="regexp">$pEle.attr('password','jason123')</span></span><br><span class="line"><span class="regexp">w.fn.init [p#id666.c1, prevObject: w.fn.init(1)]</span></span><br><span class="line"><span class="regexp">$pEle.removeAttr('password')</span></span><br><span class="line"><span class="regexp">w.fn.init [p#id666.c1, prevObject: w.fn.init(1)]       </span></span><br><span class="line"><span class="regexp">      </span></span><br><span class="line"><span class="regexp">           </span></span><br><span class="line"><span class="regexp">"""</span></span><br><span class="line"><span class="regexp">对于标签上有的能够看到的属性和自定义属性用attr</span></span><br><span class="line"><span class="regexp">对于返回布尔值比如checkbox radio option是否被选中用prop</span></span><br><span class="line"><span class="regexp">"""</span></span><br><span class="line"><span class="regexp">           </span></span><br><span class="line"><span class="regexp">$('#d3').attr('checked')</span></span><br><span class="line"><span class="regexp">"checked"</span></span><br><span class="line"><span class="regexp">$('#d2').attr('checked')</span></span><br><span class="line"><span class="regexp">undefined</span></span><br><span class="line"><span class="regexp">$('#d2').attr('checked')</span></span><br><span class="line"><span class="regexp">undefined</span></span><br><span class="line"><span class="regexp">$('#d4').attr('checked')</span></span><br><span class="line"><span class="regexp">undefined</span></span><br><span class="line"><span class="regexp">$('#d3').attr('checked')</span></span><br><span class="line"><span class="regexp">"checked"</span></span><br><span class="line"><span class="regexp">$('#d3').attr('checked','checked')  # 无效</span></span><br><span class="line"><span class="regexp">w.fn.init [input#d3]</span></span><br><span class="line"><span class="regexp">           </span></span><br><span class="line"><span class="regexp">           </span></span><br><span class="line"><span class="regexp">$('#d2').prop('checked')</span></span><br><span class="line"><span class="regexp">false</span></span><br><span class="line"><span class="regexp">$('#d2').prop('checked')</span></span><br><span class="line"><span class="regexp">true</span></span><br><span class="line"><span class="regexp">$('#d3').prop('checked',true)</span></span><br><span class="line"><span class="regexp">w.fn.init [input#d3]</span></span><br><span class="line"><span class="regexp">$('#d3').prop('checked',false)</span></span><br><span class="line"><span class="regexp">w.fn.init [input#d3]</span></span><br><span class="line"><span class="regexp">           </span></span><br><span class="line"><span class="regexp">           </span></span><br><span class="line"><span class="regexp"># 文档处理</span></span><br><span class="line"><span class="regexp">"""</span></span><br><span class="line"><span class="regexp">js																		jQuery</span></span><br><span class="line"><span class="regexp">createElement('p')										$('&lt;p&gt;')</span></span><br><span class="line"><span class="regexp">appendChild()													append()</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">"""</span></span><br><span class="line"><span class="regexp">let $pEle = $('&lt;p&gt;')</span></span><br><span class="line"><span class="regexp">$pEle.text('你好啊 草莓要不要来几个?')</span></span><br><span class="line"><span class="regexp">$pEle.attr('id','d1')          </span></span><br><span class="line"><span class="regexp">$('#d1').append($pEle)  # 内部尾部追加</span></span><br><span class="line"><span class="regexp">$pEle.appendTo($('#d1')) </span></span><br><span class="line"><span class="regexp">           </span></span><br><span class="line"><span class="regexp">$('#d1').prepend($pEle)  # 内部头部追加</span></span><br><span class="line"><span class="regexp">w.fn.init [div#d1]</span></span><br><span class="line"><span class="regexp">$pEle.prependTo($('#d1'))</span></span><br><span class="line"><span class="regexp">w.fn.init [p#d1, prevObject: w.fn.init(1)]</span></span><br><span class="line"><span class="regexp">         </span></span><br><span class="line"><span class="regexp">$('#d2').after($pEle)  # 放在某个标签后面</span></span><br><span class="line"><span class="regexp">w.fn.init [p#d2]</span></span><br><span class="line"><span class="regexp">$pEle.insertAfter($('#d1'))</span></span><br><span class="line"><span class="regexp">        </span></span><br><span class="line"><span class="regexp">$('#d1').before($pEle)</span></span><br><span class="line"><span class="regexp">w.fn.init [div#d1]</span></span><br><span class="line"><span class="regexp">$pEle.insertBefore($('#d2'))</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">$('#d1').remove()  # 将标签从DOM树中删除</span></span><br><span class="line"><span class="regexp">w.fn.init [div#d1]</span></span><br><span class="line"><span class="regexp">           </span></span><br><span class="line"><span class="regexp">$('#d1').empty()  # 清空标签内部所有的内容</span></span><br><span class="line"><span class="regexp">w.fn.init [div#d1]</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 第一种</span></span><br><span class="line">  $(<span class="string">'#d1'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">          alert(<span class="string">'别说话 吻我'</span>)</span><br><span class="line">  &#125;);</span><br><span class="line">  </span><br><span class="line"><span class="comment">// 第二种(功能更加强大 还支持事件委托)</span></span><br><span class="line">  $(<span class="string">'#d2'</span>).on(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">          alert(<span class="string">'借我钱买草莓 后面还你'</span>)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>

<ul>
<li><p>克隆事件</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;button id=<span class="string">"d1"</span>&gt;屠龙宝刀，点击就送&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">  $('#d1').on('click',function () &#123;</span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/ console.log(this)  /</span><span class="regexp">/ this指代是当前被操作的标签对象</span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/ $(this).clone().insertAfter($('body'))  /</span><span class="regexp">/ clone默认情况下只克隆html和css 不克隆事件</span></span><br><span class="line"><span class="regexp">    $(this).clone(true).insertAfter($('body'))  /</span><span class="regexp">/ 括号内加true即可克隆事件</span></span><br><span class="line"><span class="regexp">  &#125;)</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>自定义模态框</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;&quot;&quot;</span><br><span class="line">模态框内部本质就是给标签移除或者添加上hide属性</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>
</li>
<li><p>左侧菜单</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    $(<span class="string">'.title'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 先给所有的items加hide</span></span><br><span class="line">      $(<span class="string">'.items'</span>).addClass(<span class="string">'hide'</span>)</span><br><span class="line">      <span class="comment">// 然后将被点击标签内部的hide移除</span></span><br><span class="line">      $(<span class="keyword">this</span>).children().removeClass(<span class="string">'hide'</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;!--尝试用一行代码搞定上面的操作--&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>返回顶部</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    $(<span class="built_in">window</span>).scroll(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">	      <span class="keyword">if</span>($(<span class="built_in">window</span>).scrollTop() &gt; <span class="number">300</span>)&#123;</span><br><span class="line">	          $(<span class="string">'#d1'</span>).removeClass(<span class="string">'hide'</span>)</span><br><span class="line">	      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">	          $(<span class="string">'#d1'</span>).addClass(<span class="string">'hide'</span>)</span><br><span class="line">	      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>自定义登陆校验</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"># 在获取用户的用户名和密码的时候 用户如果没有填写 应该给用户展示提示信息</span><br><span class="line">&lt;p&gt;username:</span><br><span class="line">    &lt;input type=<span class="string">"text"</span> id=<span class="string">"username"</span>&gt;</span><br><span class="line">    &lt;span style=<span class="string">"color: red"</span>&gt;&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>p&gt;</span><br><span class="line">&lt;p&gt;password:</span><br><span class="line">    &lt;input type=<span class="string">"text"</span> id=<span class="string">"password"</span>&gt;</span><br><span class="line">    &lt;span style=<span class="string">"color: red"</span>&gt;&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>p&gt;</span><br><span class="line">&lt;button id=<span class="string">"d1"</span>&gt;提交&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">    let $userName = $('#username')</span></span><br><span class="line"><span class="regexp">    let $passWord = $('#password')</span></span><br><span class="line"><span class="regexp">    $('#d1').click(function () &#123;</span></span><br><span class="line"><span class="regexp">        /</span><span class="regexp">/ 获取用户输入的用户名和密码 做校验</span></span><br><span class="line"><span class="regexp">        let userName = $userName.val()</span></span><br><span class="line"><span class="regexp">        let passWord = $passWord.val()</span></span><br><span class="line"><span class="regexp">        if (!userName)&#123;</span></span><br><span class="line"><span class="regexp">            $userName.next().text("用户名不能为空")</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">        if (!passWord)&#123;</span></span><br><span class="line"><span class="regexp">            $passWord.next().text('密码不能为空')</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">    &#125;)</span></span><br><span class="line"><span class="regexp">    $('input').focus(function () &#123;</span></span><br><span class="line"><span class="regexp">        $(this).next().text('')</span></span><br><span class="line"><span class="regexp">    &#125;)</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>input实时监控</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;input type=<span class="string">"text"</span> id=<span class="string">"d1"</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    $(<span class="string">'#d1'</span>).on(<span class="string">'input'</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.value)  </span><br><span class="line">    &#125;)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>hover事件</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// $("#d1").hover(function () &#123;  // 鼠标悬浮 + 鼠标移开</span></span><br><span class="line">    <span class="comment">//     alert(123)</span></span><br><span class="line">    <span class="comment">// &#125;)</span></span><br><span class="line"></span><br><span class="line">    $(<span class="string">'#d1'</span>).hover(</span><br><span class="line">        <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            alert(<span class="string">'我来了'</span>)  <span class="comment">// 悬浮</span></span><br><span class="line">    &#125;,</span><br><span class="line">        <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            alert(<span class="string">'我溜了'</span>)  <span class="comment">// 移开</span></span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>键盘按键按下事件</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    $(<span class="built_in">window</span>).keydown(<span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(event.keyCode)</span><br><span class="line">        <span class="keyword">if</span> (event.keyCode === <span class="number">16</span>)&#123;</span><br><span class="line">            alert(<span class="string">'你按了shift键'</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="阻止后续事件执行"><a href="#阻止后续事件执行" class="headerlink" title="阻止后续事件执行"></a>阻止后续事件执行</h3></li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">	  $(<span class="string">'#d2'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">	      $(<span class="string">'#d1'</span>).text(<span class="string">'宝贝 你能看到我吗?'</span>)</span><br><span class="line">	      <span class="comment">// 阻止标签后续事件的执行 方式1</span></span><br><span class="line">	      <span class="comment">// return false</span></span><br><span class="line">	      <span class="comment">// 阻止标签后续事件的执行 方式2</span></span><br><span class="line">	      <span class="comment">// e.preventDefault()</span></span><br><span class="line">	  &#125;)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="阻止事件冒泡"><a href="#阻止事件冒泡" class="headerlink" title="阻止事件冒泡"></a>阻止事件冒泡</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    $(<span class="string">'#d1'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        alert(<span class="string">'div'</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    $(<span class="string">'#d2'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        alert(<span class="string">'p'</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    $(<span class="string">'#d3'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">        alert(<span class="string">'span'</span>)</span><br><span class="line">        <span class="comment">// 阻止事件冒泡的方式1</span></span><br><span class="line">        <span class="comment">// return false</span></span><br><span class="line">        <span class="comment">// 阻止事件冒泡的方式2</span></span><br><span class="line">        <span class="comment">// e.stopPropagation()</span></span><br><span class="line">    &#125;)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="事件委托"><a href="#事件委托" class="headerlink" title="事件委托"></a>事件委托</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;button&gt;是兄弟，就来砍我!!!&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/ 给页面上所有的button标签绑定点击事件</span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/ $('button').click(function () &#123;  /</span><span class="regexp">/ 无法影响到动态创建的标签</span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/     alert(123)</span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/ &#125;)</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/ 事件委托     </span></span><br><span class="line"><span class="regexp">    $('body').on('click','button',function () &#123;</span></span><br><span class="line"><span class="regexp">        alert(123)  /</span><span class="regexp">/ 在指定的范围内 将事件委托给某个标签 无论该标签是事先写好的还是后面动态创建的</span></span><br><span class="line"><span class="regexp">    &#125;)</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="页面加载"><a href="#页面加载" class="headerlink" title="页面加载"></a>页面加载</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"># 等待页面加载完毕再执行代码</span><br><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">// js代码</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="string">""</span><span class="string">"jQuery中等待页面加载完毕"</span><span class="string">""</span></span><br><span class="line"># 第一种</span><br><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">// js代码</span></span><br><span class="line">&#125;)</span><br><span class="line"># 第二种</span><br><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">// js代码</span></span><br><span class="line">&#125;)</span><br><span class="line"># 第三种</span><br><span class="line"><span class="string">""</span><span class="string">"直接写在body内部最下方"</span><span class="string">""</span></span><br></pre></td></tr></table></figure>

<h3 id="动画效果"><a href="#动画效果" class="headerlink" title="动画效果"></a>动画效果</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">$(<span class="string">'#d1'</span>).hide(<span class="number">5000</span>)</span><br><span class="line">w.fn.init [div#d1]</span><br><span class="line">$(<span class="string">'#d1'</span>).show(<span class="number">5000</span>)</span><br><span class="line">w.fn.init [div#d1]</span><br><span class="line">$(<span class="string">'#d1'</span>).slideUp(<span class="number">5000</span>)</span><br><span class="line">w.fn.init [div#d1]</span><br><span class="line">$(<span class="string">'#d1'</span>).slideDown(<span class="number">5000</span>)</span><br><span class="line">w.fn.init [div#d1]</span><br><span class="line">$(<span class="string">'#d1'</span>).fadeOut(<span class="number">5000</span>)</span><br><span class="line">w.fn.init [div#d1]</span><br><span class="line">$(<span class="string">'#d1'</span>).fadeIn(<span class="number">5000</span>)</span><br><span class="line">w.fn.init [div#d1]</span><br><span class="line">$(<span class="string">'#d1'</span>).fadeTo(<span class="number">5000</span>,<span class="number">0.4</span>)</span><br><span class="line">w.fn.init [div#d1]</span><br></pre></td></tr></table></figure>

<h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"># each()</span><br><span class="line"># 第一种方式</span><br><span class="line">$(<span class="string">'div'</span>)</span><br><span class="line">w.fn.init(<span class="number">10</span>) [div, div, div, div, div, div, div, div, div, div, <span class="attr">prevObject</span>: w.fn.init(<span class="number">1</span>)]</span><br><span class="line">$(<span class="string">'div'</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params">index</span>)</span>&#123;<span class="built_in">console</span>.log(index)&#125;)</span><br><span class="line">VM181:<span class="number">1</span> <span class="number">0</span></span><br><span class="line">VM181:<span class="number">1</span> <span class="number">1</span></span><br><span class="line">VM181:<span class="number">1</span> <span class="number">2</span></span><br><span class="line">VM181:<span class="number">1</span> <span class="number">3</span></span><br><span class="line">VM181:<span class="number">1</span> <span class="number">4</span></span><br><span class="line">VM181:<span class="number">1</span> <span class="number">5</span></span><br><span class="line">VM181:<span class="number">1</span> <span class="number">6</span></span><br><span class="line">VM181:<span class="number">1</span> <span class="number">7</span></span><br><span class="line">VM181:<span class="number">1</span> <span class="number">8</span></span><br><span class="line">VM181:<span class="number">1</span> <span class="number">9</span></span><br><span class="line"></span><br><span class="line">$(<span class="string">'div'</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params">index,obj</span>)</span>&#123;<span class="built_in">console</span>.log(index,obj)&#125;)</span><br><span class="line">VM243:<span class="number">1</span> <span class="number">0</span> &lt;div&gt;​<span class="number">1</span>​&lt;<span class="regexp">/div&gt;​</span></span><br><span class="line"><span class="regexp">VM243:1 1 &lt;div&gt;​2​&lt;/</span>div&gt;​</span><br><span class="line">VM243:<span class="number">1</span> <span class="number">2</span> &lt;div&gt;​<span class="number">3</span>​&lt;<span class="regexp">/div&gt;​</span></span><br><span class="line"><span class="regexp">VM243:1 3 &lt;div&gt;​4​&lt;/</span>div&gt;​</span><br><span class="line">VM243:<span class="number">1</span> <span class="number">4</span> &lt;div&gt;​<span class="number">5</span>​&lt;<span class="regexp">/div&gt;​</span></span><br><span class="line"><span class="regexp">VM243:1 5 &lt;div&gt;​6​&lt;/</span>div&gt;​</span><br><span class="line">VM243:<span class="number">1</span> <span class="number">6</span> &lt;div&gt;​<span class="number">7</span>​&lt;<span class="regexp">/div&gt;​</span></span><br><span class="line"><span class="regexp">VM243:1 7 &lt;div&gt;​8​&lt;/</span>div&gt;​</span><br><span class="line">VM243:<span class="number">1</span> <span class="number">8</span> &lt;div&gt;​<span class="number">9</span>​&lt;<span class="regexp">/div&gt;​</span></span><br><span class="line"><span class="regexp">VM243:1 9 &lt;div&gt;​10​&lt;/</span>div&gt;​</span><br><span class="line"></span><br><span class="line"># 第二种方式</span><br><span class="line">$.each([<span class="number">111</span>,<span class="number">222</span>,<span class="number">333</span>],<span class="function"><span class="keyword">function</span>(<span class="params">index,obj</span>)</span>&#123;<span class="built_in">console</span>.log(index,obj)&#125;)</span><br><span class="line">VM484:<span class="number">1</span> <span class="number">0</span> <span class="number">111</span></span><br><span class="line">VM484:<span class="number">1</span> <span class="number">1</span> <span class="number">222</span></span><br><span class="line">VM484:<span class="number">1</span> <span class="number">2</span> <span class="number">333</span></span><br><span class="line">(<span class="number">3</span>) [<span class="number">111</span>, <span class="number">222</span>, <span class="number">333</span>]</span><br><span class="line"><span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string">有了each之后 就无需自己写for循环了 用它更加的方便</span></span><br><span class="line"><span class="string">"</span><span class="string">""</span></span><br><span class="line"># data()</span><br><span class="line"><span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string">能够让标签帮我们存储数据 并且用户肉眼看不见</span></span><br><span class="line"><span class="string">"</span><span class="string">""</span></span><br><span class="line">$(<span class="string">'div'</span>).data(<span class="string">'info'</span>,<span class="string">'回来吧，我原谅你了!'</span>)</span><br><span class="line">w.fn.init(10) [div#d1, div, div, div, div, div, div, div, div, div, prevObject: w.fn.init(1)]</span><br><span class="line">               </span><br><span class="line">$(<span class="string">'div'</span>).first().data(<span class="string">'info'</span>)</span><br><span class="line"><span class="string">"回来吧，我原谅你了!"</span></span><br><span class="line">$(<span class="string">'div'</span>).last().data(<span class="string">'info'</span>)</span><br><span class="line"><span class="string">"回来吧，我原谅你了!"</span></span><br><span class="line">               </span><br><span class="line">$(<span class="string">'div'</span>).first().data(<span class="string">'xxx'</span>)</span><br><span class="line"><span class="literal">undefined</span></span><br><span class="line">$(<span class="string">'div'</span>).first().removeData(<span class="string">'info'</span>)</span><br><span class="line">w.fn.init [div#d1, prevObject: w.fn.init(10)]</span><br><span class="line">           </span><br><span class="line">$(<span class="string">'div'</span>).first().data(<span class="string">'info'</span>)</span><br><span class="line"><span class="literal">undefined</span></span><br><span class="line">$(<span class="string">'div'</span>).last().data(<span class="string">'info'</span>)</span><br><span class="line"><span class="string">"回来吧，我原谅你了!"</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端开发</category>
      </categories>
      <tags>
        <tag>前端入门</tag>
      </tags>
  </entry>
  <entry>
    <title>[MTV和MVC模型与Auth模块]</title>
    <url>/2020/02/17/MTV%E5%92%8CMVC%E6%A8%A1%E5%9E%8B%E4%B8%8EAuth%E6%A8%A1%E5%9D%97/</url>
    <content><![CDATA[<h3 id="MTV与MVC模型"><a href="#MTV与MVC模型" class="headerlink" title="MTV与MVC模型"></a>MTV与MVC模型</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># MTV:Django号称是MTV模型</span></span><br><span class="line">M:models</span><br><span class="line">T:templates</span><br><span class="line">V:views</span><br><span class="line"><span class="comment"># MVC:其实django本质也是MVC</span></span><br><span class="line">M:models</span><br><span class="line">V:views</span><br><span class="line">C:controller</span><br><span class="line">  </span><br><span class="line"><span class="comment"># vue框架:MVVM模型</span></span><br></pre></td></tr></table></figure>

<h3 id="Auth模块"><a href="#Auth模块" class="headerlink" title="Auth模块"></a>Auth模块</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">其实我们在创建好一个django项目之后直接执行数据库迁移命令会自动生成很多表</span></span><br><span class="line"><span class="string">	django_session</span></span><br><span class="line"><span class="string">	auth_user</span></span><br><span class="line"><span class="string">django在启动之后就可以直接访问admin路由，需要输入用户名和密码，数据参考的就是auth_user表,并且还必须是管理员用户才能进入</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">创建超级用户(管理员)</span></span><br><span class="line"><span class="string">	python3 manage.py createsuperuser</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">依赖于auth_user表完成用户相关的所有功能</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<h3 id="方法总结"><a href="#方法总结" class="headerlink" title="方法总结"></a>方法总结</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1.比对用户名和密码是否正确</span></span><br><span class="line">user_obj = auth.authenticate(request,username=username,password=password)</span><br><span class="line"><span class="comment"># 括号内必须同时传入用户名和密码</span></span><br><span class="line">print(user_obj)  <span class="comment"># 用户对象  jason   数据不符合则返回None</span></span><br><span class="line">print(user_obj.username)  <span class="comment"># jason</span></span><br><span class="line">print(user_obj.password)  <span class="comment"># 密文</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.保存用户状态</span></span><br><span class="line">auth.login(request,user_obj)  <span class="comment"># 类似于request.session[key] = user_obj</span></span><br><span class="line"><span class="comment"># 主要执行了该方法 你就可以在任何地方通过request.user获取到当前登陆的用户对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.判断当前用户是否登陆</span></span><br><span class="line">request.user.is_authenticated()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.获取当前登陆用户</span></span><br><span class="line">request.user</span><br><span class="line">用户不存在返回AnonmousUser匿名用户</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5.校验用户是否登陆装饰器</span></span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.decorators <span class="keyword">import</span> login_required</span><br><span class="line"><span class="comment"># 局部配置</span></span><br><span class="line"><span class="meta">@login_required(login_url='/login/') </span></span><br><span class="line"><span class="comment"># 全局配置</span></span><br><span class="line">LOGIN_URL = <span class="string">'/login/'</span></span><br><span class="line">	1.如果局部和全局都有 该听谁的?</span><br><span class="line">    局部 &gt; 全局</span><br><span class="line">	2.局部和全局哪个好呢?</span><br><span class="line">    全局的好处在于无需重复写代码 但是跳转的页面却很单一</span><br><span class="line">    局部的好处在于不同的视图函数在用户没有登陆的情况下可以跳转到不同的页面</span><br><span class="line"></span><br><span class="line"><span class="comment"># 6.比对原密码</span></span><br><span class="line">request.user.check_password(old_password)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 7.修改密码</span></span><br><span class="line">request.user.set_password(new_password)  <span class="comment"># 仅仅是在修改对象的属性</span></span><br><span class="line">request.user.save()  <span class="comment"># 这一步才是真正的操作数据库</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 8.注销</span></span><br><span class="line">auth.logout(request) </span><br><span class="line"></span><br><span class="line"><span class="comment"># 9.注册</span></span><br><span class="line"><span class="comment"># 操作auth_user表写入数据</span></span><br><span class="line">User.objects.create(username=username,password=password)  <span class="comment"># 写入数据  不能用create 密码没有加密处理</span></span><br><span class="line"><span class="comment"># 创建普通用户</span></span><br><span class="line">User.objects.create_user(username=username,password=password)</span><br><span class="line"><span class="comment"># 创建超级用户(了解):使用代码创建超级用户 邮箱是必填的 而用命令创建则可以不填</span></span><br><span class="line">User.objects.create_superuser(username=username,email=<span class="string">'123@qq.com'</span>,password=password)</span><br></pre></td></tr></table></figure>

<h3 id="如何扩展auth-user表"><a href="#如何扩展auth-user表" class="headerlink" title="如何扩展auth_user表"></a>如何扩展auth_user表</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> User,AbstractUser</span><br><span class="line"><span class="comment"># Create your models here.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第一种:一对一关系  不推荐</span></span><br><span class="line"><span class="comment"># class UserDetail(models.Model):</span></span><br><span class="line"><span class="comment">#     phone = models.BigIntegerField()</span></span><br><span class="line"><span class="comment">#     user = models.OneToOneField(to='User')</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二种:面向对象的继承</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserInfo</span><span class="params">(AbstractUser)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    如果继承了AbstractUser</span></span><br><span class="line"><span class="string">    那么在执行数据库迁移命令的时候auth_user表就不会再创建出来了</span></span><br><span class="line"><span class="string">    而UserInfo表中会出现auth_user所有的字段外加自己扩展的字段</span></span><br><span class="line"><span class="string">    这么做的好处在于你能够直接点击你自己的表更加快速的完成操作及扩展</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    前提:</span></span><br><span class="line"><span class="string">        1.在继承之前没有执行过数据库迁移命令</span></span><br><span class="line"><span class="string">            auth_user没有被创建，如果当前库已经创建了那么你就重新换一个库</span></span><br><span class="line"><span class="string">        2.继承的类里面不要覆盖AbstractUser里面的字段名</span></span><br><span class="line"><span class="string">            表里面有的字段都不要动，只扩展额外字段即可</span></span><br><span class="line"><span class="string">        3.需要在配置文件中告诉django你要用UserInfo替代auth_user(******)</span></span><br><span class="line"><span class="string">            AUTH_USER_MODEL = 'app01.UserInfo'</span></span><br><span class="line"><span class="string">                                '应用名.表名'</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    phone = models.BigIntegerField()</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">你如果自己写表替代了auth_user那么</span></span><br><span class="line"><span class="string">auth模块的功能还是照常使用，参考的表页由原来的auth_user变成了UserInfo</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>django框架</tag>
      </tags>
  </entry>
  <entry>
    <title>[Markdown语法]</title>
    <url>/2020/05/28/Markdown%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<h1 id="一：概述"><a href="#一：概述" class="headerlink" title="一：概述"></a>一：概述</h1><h2 id="1-设计理念"><a href="#1-设计理念" class="headerlink" title="1.设计理念"></a>1.设计理念</h2><p>Markdown 易于阅读，方便创作web文档，利于各平台无缝分发。</p>
<p>Markdown 语法灵感最大的来源还是纯文本 email 的格式，完全由标点符号标签组成的纯文本。</p>
<p>Markdown 文件应该以纯文本形式原样发布，不应该包含标记标签和格式化指令。</p>
<h2 id="2-内联-HTML-语法"><a href="#2-内联-HTML-语法" class="headerlink" title="2.内联 HTML 语法"></a>2.内联 HTML 语法</h2><p>HTML 是一种<strong>发布格式</strong>，Markdown 是一种<strong>创作格式</strong>。</p>
<p>Markdown语法集合比较小，只是HTML标签的一小部分。</p>
<p>对于 Markdown 中未包含的标签, 可以直接使用 HTML标签，例如用 HTML <code>&lt;a&gt;</code> 标签替代 Markdown 的链接语法。</p>
<h2 id="3-特殊字符自动转义"><a href="#3-特殊字符自动转义" class="headerlink" title="3.特殊字符自动转义"></a>3.特殊字符自动转义</h2><p>在 HTML 中, 有两个字符需要特殊对待: &lt; 和 &amp;，左尖括号用于起始标签。如果你想将它们用作字面量, 你必须将它们转义为字符实体, 例如<code>&lt;</code> 和 <code>&amp;</code>。</p>
<h1 id="二：标题"><a href="#二：标题" class="headerlink" title="二：标题"></a>二：标题</h1><h2 id="1-标题等级1-6（快捷键：Ctrl-1-6）"><a href="#1-标题等级1-6（快捷键：Ctrl-1-6）" class="headerlink" title="1.标题等级1-6（快捷键：Ctrl+1~6）"></a>1.标题等级1-6（快捷键：Ctrl+1~6）</h2><h3 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 一级标题（我最大）</span><br><span class="line">## 二级标题</span><br><span class="line">### 三级标题</span><br><span class="line">#### 四级标题</span><br><span class="line">##### 五级标题</span><br><span class="line">###### 六级标题（我最小）</span><br></pre></td></tr></table></figure>

<h3 id="效果展示："><a href="#效果展示：" class="headerlink" title="效果展示："></a>效果展示：</h3><h1 id="一级标题（我最大）"><a href="#一级标题（我最大）" class="headerlink" title="一级标题（我最大）"></a>一级标题（我最大）</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题（我最小）"><a href="#六级标题（我最小）" class="headerlink" title="六级标题（我最小）"></a>六级标题（我最小）</h6><h1 id="三：字体"><a href="#三：字体" class="headerlink" title="三：字体"></a>三：字体</h1><h2 id="1-加粗（Ctrl-B）"><a href="#1-加粗（Ctrl-B）" class="headerlink" title="1.加粗（Ctrl+B）"></a>1.加粗（Ctrl+B）</h2><h3 id="代码：-1"><a href="#代码：-1" class="headerlink" title="代码："></a>代码：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">我的正常状态下的字体</span><br><span class="line"></span><br><span class="line">**我是加粗后的字体**</span><br></pre></td></tr></table></figure>

<h3 id="效果："><a href="#效果：" class="headerlink" title="效果："></a>效果：</h3><p>我的正常状态下的字体</p>
<p><strong>我是加粗后的字体</strong></p>
<h2 id="2-斜体（Ctrl-I）"><a href="#2-斜体（Ctrl-I）" class="headerlink" title="2.斜体（Ctrl+I）"></a>2.斜体（Ctrl+I）</h2><h3 id="代码：-2"><a href="#代码：-2" class="headerlink" title="代码："></a>代码：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">我的正常状态下的字体</span><br><span class="line"></span><br><span class="line">*我是斜体的字体*</span><br></pre></td></tr></table></figure>

<h3 id="效果：-1"><a href="#效果：-1" class="headerlink" title="效果："></a>效果：</h3><p>我的正常状态下的字体</p>
<p><em>我是斜体的字体</em></p>
<h2 id="3-下划线（Ctrl-U）"><a href="#3-下划线（Ctrl-U）" class="headerlink" title="3.下划线（Ctrl+U）"></a>3.下划线（Ctrl+U）</h2><h3 id="代码：-3"><a href="#代码：-3" class="headerlink" title="代码："></a>代码：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">我的正常状态下的字体</span><br><span class="line"></span><br><span class="line">&lt;u&gt;我是加了下划线的字体&lt;&#x2F;u&gt;</span><br></pre></td></tr></table></figure>

<h3 id="效果：-2"><a href="#效果：-2" class="headerlink" title="效果："></a>效果：</h3><p>我的正常状态下的字体</p>
<p>我是加了下划线的字体</p>
<h2 id="4-删除线（Alt-Shift-5）"><a href="#4-删除线（Alt-Shift-5）" class="headerlink" title="4.删除线（Alt+Shift+5）"></a>4.删除线（Alt+Shift+5）</h2><h3 id="代码：-4"><a href="#代码：-4" class="headerlink" title="代码："></a>代码：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">我的正常状态下的字体</span><br><span class="line"></span><br><span class="line">~~我是加了删除线的字体~~</span><br></pre></td></tr></table></figure>

<h3 id="效果：-3"><a href="#效果：-3" class="headerlink" title="效果："></a>效果：</h3><p>我的正常状态下的字体</p>
<p>我是加了删除线的字体</p>
<h2 id="5-混合使用"><a href="#5-混合使用" class="headerlink" title="5.混合使用"></a>5.混合使用</h2><h3 id="代码：-5"><a href="#代码：-5" class="headerlink" title="代码："></a>代码：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">我的正常状态下的字体</span><br><span class="line"></span><br><span class="line">**我是加粗后的字体**</span><br><span class="line">*我是斜体的字体*</span><br><span class="line">&lt;u&gt;我是加了下划线的字体&lt;&#x2F;u&gt;</span><br><span class="line">~~我是加了删除线的字体~~</span><br><span class="line"></span><br><span class="line">***我是加粗加斜体的字体***</span><br><span class="line">&lt;u&gt;**我是加粗加下划线的字体**&lt;&#x2F;u&gt;</span><br><span class="line"></span><br><span class="line">~~**我是加粗加删除线的字体**~~</span><br><span class="line"></span><br><span class="line">*&lt;u&gt;我是加斜体加下划线的字体&lt;&#x2F;u&gt;*</span><br><span class="line">~~*我是加斜体加删除线的字体*~~</span><br><span class="line"></span><br><span class="line">&lt;u&gt;~~我是加下划线加删除线的字体~~&lt;&#x2F;u&gt;</span><br><span class="line">&lt;u&gt;***我是加粗加斜体加下划线的字体***&lt;&#x2F;u&gt;</span><br><span class="line">~~***我是加粗加斜体加删除线的字体***~~</span><br><span class="line"></span><br><span class="line">~~&lt;u&gt;*我是加斜体加下划线加删除线的字体*&lt;&#x2F;u&gt;~~</span><br><span class="line"></span><br><span class="line">~~*&lt;u&gt;**我是加粗加斜体加下划线加删除线的字体**&lt;&#x2F;u&gt;*~~</span><br></pre></td></tr></table></figure>

<h3 id="效果：-4"><a href="#效果：-4" class="headerlink" title="效果："></a>效果：</h3><p>我的正常状态下的字体</p>
<p><strong>我是加粗后的字体</strong><br><em>我是斜体的字体</em><br>我是加了下划线的字体<br>我是加了删除线的字体</p>
<p><strong><em>我是加粗加斜体的字体</em></strong><br><strong>我是加粗加下划线的字体</strong></p>
<p><strong>我是加粗加删除线的字体</strong></p>
<p><em>我是加斜体加下划线的字体</em><br><em>我是加斜体加删除线的字体</em></p>
<p>我是加下划线加删除线的字体<br><strong><em>我是加粗加斜体加下划线的字体</em></strong><br><strong><em>我是加粗加斜体加删除线的字体</em></strong></p>
<p><em>我是加斜体加下划线加删除线的字体</em></p>
<p><strong><em>我是加粗加斜体加下划线加删除线的字体</em></strong></p>
<h1 id="四：引用与标记"><a href="#四：引用与标记" class="headerlink" title="四：引用与标记"></a>四：引用与标记</h1><h2 id="1-引用（Ctrl-Shift-Q）"><a href="#1-引用（Ctrl-Shift-Q）" class="headerlink" title="1.引用（Ctrl+Shift+Q）"></a>1.引用（Ctrl+Shift+Q）</h2><h3 id="代码：-6"><a href="#代码：-6" class="headerlink" title="代码："></a>代码：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">这是普通内容</span><br><span class="line"></span><br><span class="line">&gt; 这是引用的内容</span><br><span class="line">&gt;&gt; 这也是引用的内容</span><br><span class="line">&gt;&gt;&gt; 这也是引用的内容</span><br><span class="line">&gt;&gt;&gt;&gt; 这也是引用的内容</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 我叫腰间盘</span><br></pre></td></tr></table></figure>

<h3 id="效果：-5"><a href="#效果：-5" class="headerlink" title="效果："></a>效果：</h3><p>这是普通内容</p>
<blockquote>
<p>这是引用的内容</p>
<blockquote>
<p>这也是引用的内容</p>
<blockquote>
<p>这也是引用的内容</p>
<blockquote>
<p>这也是引用的内容</p>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<p>我叫腰间盘</p>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
<h2 id="2-高亮"><a href="#2-高亮" class="headerlink" title="2.高亮"></a>2.高亮</h2><h3 id="代码：-7"><a href="#代码：-7" class="headerlink" title="代码："></a>代码：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">这是普通文本</span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;这是高亮文本&#x3D;&#x3D;</span><br></pre></td></tr></table></figure>

<h3 id="效果：-6"><a href="#效果：-6" class="headerlink" title="效果："></a>效果：</h3><p>这是普通文本</p>
<p>这是高亮文本</p>
<h2 id="3-分割线"><a href="#3-分割线" class="headerlink" title="3.分割线"></a>3.分割线</h2><h3 id="代码：-8"><a href="#代码：-8" class="headerlink" title="代码："></a>代码：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">我下面是分割线</span><br><span class="line"></span><br><span class="line">------</span><br><span class="line"></span><br><span class="line">我上面是分割线</span><br></pre></td></tr></table></figure>

<h3 id="效果：-7"><a href="#效果：-7" class="headerlink" title="效果："></a>效果：</h3><p>我下面是分割线</p>
<hr>
<p>我上面是分割线</p>
<h2 id="4-行内代码引用"><a href="#4-行内代码引用" class="headerlink" title="4.行内代码引用"></a>4.行内代码引用</h2><h3 id="代码：-9"><a href="#代码：-9" class="headerlink" title="代码："></a>代码：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">执行了&#96;print&#96;方法</span><br></pre></td></tr></table></figure>

<h3 id="效果：-8"><a href="#效果：-8" class="headerlink" title="效果："></a>效果：</h3><p>执行了<code>print</code>方法</p>
<h2 id="5-代码块引用"><a href="#5-代码块引用" class="headerlink" title="5.代码块引用"></a>5.代码块引用</h2><h3 id="代码：-10"><a href="#代码：-10" class="headerlink" title="代码："></a>代码：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">​</span><br></pre></td></tr></table></figure>
<p>str1 = ‘I am’<br>str2 = ‘ a String’<br>str_all = str1 + str2<br>print(str_all)<br>​```</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">### 效果：</span><br></pre></td></tr></table></figure>
<p>str1 = ‘I am’<br>str2 = ‘ a String’<br>str_all = str1 + str2<br>print(str_all)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"># 五：插入</span><br><span class="line"></span><br><span class="line">## 1.插入链接</span><br><span class="line"></span><br><span class="line">### 代码：</span><br></pre></td></tr></table></figure>
<p><a href="https://www.cnblogs.com/xuexianqi/" target="_blank" rel="noopener">https://www.cnblogs.com/xuexianqi/</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">### 效果：</span><br><span class="line"></span><br><span class="line">https:&#x2F;&#x2F;www.cnblogs.com&#x2F;xuexianqi&#x2F;</span><br><span class="line"></span><br><span class="line">## 2.插入链接（只显示标题，不显示链接本体）</span><br><span class="line"></span><br><span class="line">### 代码：</span><br></pre></td></tr></table></figure>
<p><a href="https://www.cnblogs.com/xuexianqi/" target="_blank" rel="noopener">这是我的个人博客</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">### 效果：</span><br><span class="line"></span><br><span class="line">[这是我的个人博客](https:&#x2F;&#x2F;www.cnblogs.com&#x2F;xuexianqi&#x2F;)</span><br><span class="line"></span><br><span class="line">## 3.插入图片</span><br><span class="line"></span><br><span class="line">### 代码：</span><br></pre></td></tr></table></figure>
<p><img src="https://images.cnblogs.com/cnblogs_com/xuexianqi/1652079/o_200221125314%E5%98%9A%E7%91%9F.gif" alt="img"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">### 效果：</span><br><span class="line"></span><br><span class="line">[![img](https:&#x2F;&#x2F;images.cnblogs.com&#x2F;cnblogs_com&#x2F;xuexianqi&#x2F;1652079&#x2F;o_200221125314%E5%98%9A%E7%91%9F.gif)](https:&#x2F;&#x2F;images.cnblogs.com&#x2F;cnblogs_com&#x2F;xuexianqi&#x2F;1652079&#x2F;o_200221125314嘚瑟.gif)</span><br><span class="line"></span><br><span class="line"># 六：列表与表格</span><br><span class="line"></span><br><span class="line">## 1.有序列表</span><br><span class="line"></span><br><span class="line">### 代码：</span><br></pre></td></tr></table></figure>
<ol>
<li>有序列表1</li>
<li>有序列表2</li>
<li>有序列表3</li>
<li>有序列表4<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">### 效果：</span><br><span class="line"></span><br><span class="line">1. List1</span><br><span class="line">2. List2</span><br><span class="line">3. List3</span><br><span class="line">4. List4</span><br><span class="line"></span><br><span class="line">## 2.无序列表</span><br><span class="line"></span><br><span class="line">### 代码：</span><br></pre></td></tr></table></figure></li>
</ol>
<ul>
<li>无序列表1</li>
<li>无序列表2</li>
<li>无序列表3</li>
<li>无序列表4<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">### 效果：</span><br><span class="line"></span><br><span class="line">- 无序列表1</span><br><span class="line">- 无序列表2</span><br><span class="line">- 无序列表3</span><br><span class="line">- 无序列表4</span><br><span class="line"></span><br><span class="line">## 3.表格</span><br><span class="line"></span><br><span class="line">### 第二行必须得有，并且第二行的冒号代表对齐格式，分别为：左对齐、居中、右对齐）</span><br><span class="line"></span><br><span class="line">### 代码：</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th align="left">name</th>
<th align="center">age</th>
<th align="right">sex</th>
</tr>
</thead>
<tbody><tr>
<td align="left">马冬梅</td>
<td align="center">20</td>
<td align="right">女</td>
</tr>
<tr>
<td align="left">李雷</td>
<td align="center">16</td>
<td align="right">男</td>
</tr>
<tr>
<td align="left">韩梅梅</td>
<td align="center">15</td>
<td align="right">女</td>
</tr>
<tr>
<td align="left">张三</td>
<td align="center">30</td>
<td align="right">男</td>
</tr>
<tr>
<td align="left"><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">### 效果：</span><br><span class="line"></span><br><span class="line">| name   | age  |  sex |</span><br><span class="line">| :----- | :--: | ---: |</span><br><span class="line">| 马冬梅 |  20  |   女 |</span><br><span class="line">| 李雷   |  16  |   男 |</span><br><span class="line">| 韩梅梅 |  15  |   女 |</span><br><span class="line">| 张三   |  30  |   男 |</span><br><span class="line"></span><br><span class="line"># 七：特殊字符</span><br><span class="line"></span><br><span class="line">| 特殊字符 |     描述      | 字符的代码 |</span><br><span class="line">| :------: | :-----------: | :--------: |</span><br><span class="line">|          |    空格符     |    &#96; &#96;     |</span><br><span class="line">|    &lt;     |    小于号     |    &#96;&lt;&#96;     |</span><br><span class="line">|    &gt;     |    大于号     |    &#96;&gt;&#96;     |</span><br><span class="line">|    &amp;     |     和号      |    &#96;&amp;&#96;     |</span><br><span class="line">|    ￥    |    人民币     |    &#96;¥&#96;     |</span><br><span class="line">|    ©     |     版权      |    &#96;©&#96;     |</span><br><span class="line">|    ®     |   注册商标    |    &#96;®&#96;     |</span><br><span class="line">|    °C    |    摄氏度     |   &#96;°°C&#96;    |</span><br><span class="line">|    ±     |    正负号     |    &#96;±&#96;     |</span><br><span class="line">|    ×     |     乘号      |    &#96;×&#96;     |</span><br><span class="line">|    ÷     |     除号      | &#96;&amp;devide;&#96; |</span><br><span class="line">|    ²     | 平方（上标²） |    &#96;²&#96;     |</span><br><span class="line">|    ³     | 立方（上标³） |    &#96;³&#96;     |</span><br><span class="line"></span><br><span class="line"># 八：流程图</span><br><span class="line"></span><br><span class="line">### 代码：</span><br></pre></td></tr></table></figure></td>
<td align="center"></td>
<td align="right"></td>
</tr>
<tr>
<td align="left">​```flow</td>
<td align="center"></td>
<td align="right"></td>
</tr>
<tr>
<td align="left">st=&gt;start: 开始</td>
<td align="center"></td>
<td align="right"></td>
</tr>
<tr>
<td align="left">op=&gt;operation: My Operation</td>
<td align="center"></td>
<td align="right"></td>
</tr>
<tr>
<td align="left">cond=&gt;condition: Yes or No?</td>
<td align="center"></td>
<td align="right"></td>
</tr>
<tr>
<td align="left">e=&gt;end</td>
<td align="center"></td>
<td align="right"></td>
</tr>
<tr>
<td align="left">st-&gt;op-&gt;cond</td>
<td align="center"></td>
<td align="right"></td>
</tr>
<tr>
<td align="left">cond(yes)-&gt;e</td>
<td align="center"></td>
<td align="right"></td>
</tr>
<tr>
<td align="left">cond(no)-&gt;op</td>
<td align="center"></td>
<td align="right"></td>
</tr>
<tr>
<td align="left">&amp;```</td>
<td align="center"></td>
<td align="right"></td>
</tr>
<tr>
<td align="left"><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">### 效果图：</span><br><span class="line"></span><br><span class="line">![](https:&#x2F;&#x2F;gitee.com&#x2F;wjxyzs&#x2F;img&#x2F;raw&#x2F;master&#x2F;img&#x2F;20200707161534.png)</span><br><span class="line"></span><br><span class="line">&gt; ### 字体颜色</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;javascript</span><br><span class="line">&lt;font face&#x3D;&quot;黑体&quot;&gt;我是黑体字&lt;&#x2F;font&gt;</span><br><span class="line">&lt;font face&#x3D;&quot;微软雅黑&quot;&gt;我是微软雅黑&lt;&#x2F;font&gt;</span><br><span class="line">&lt;font face&#x3D;&quot;STCAIYUN&quot;&gt;我是华文彩云&lt;&#x2F;font&gt;</span><br><span class="line">&lt;font color&#x3D;#0099ff size&#x3D;7 face&#x3D;&quot;黑体&quot;&gt;color&#x3D;#0099ff size&#x3D;72 face&#x3D;&quot;黑体&quot;&lt;&#x2F;font&gt;</span><br><span class="line">&lt;font color&#x3D;#00ffff size&#x3D;72&gt;color&#x3D;#00ffff&lt;&#x2F;font&gt;</span><br><span class="line">&lt;font color&#x3D;gray size&#x3D;72&gt;color&#x3D;gray&lt;&#x2F;font&gt;</span><br><span class="line"></span><br><span class="line">Size：规定文本的尺寸大小。可能的值：从 1 到 7 的数字。浏览器默认值是 3</span><br></pre></td></tr></table></figure></td>
<td align="center"></td>
<td align="right"></td>
</tr>
</tbody></table>
</li>
</ul>
<blockquote>
<h3 id="背景颜色"><a href="#背景颜色" class="headerlink" title="背景颜色"></a>背景颜色</h3></blockquote>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="comment">#D1EEEE #FBE4E4 #E9E5E3 #EAE4F2 #D3EBF1</span></span><br><span class="line"></span><br><span class="line">&lt;table&gt;&lt;tr&gt;&lt;td bgcolor=<span class="comment">#D1EEEE align=center&gt;**下载**&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;center&gt;居中&lt;/center&gt;</span><br></pre></td></tr></table></figure>

<p>☆☆☆☆☆</p>
]]></content>
      <categories>
        <category>技能get</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>[HTTP请求处理]</title>
    <url>/2020/04/22/HTTP%E8%AF%B7%E6%B1%82%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<h1 id="1-http请求处理"><a href="#1-http请求处理" class="headerlink" title="1. http请求处理"></a>1. http请求处理</h1><p>drf除了在数据序列化部分简写代码以外，还在视图中提供了简写操作。所以在django原有的django.views.View类基础上，drf封装了多个视图子类出来提供给我们使用。</p>
<p>Django REST framwork 提供的视图的主要作用：</p>
<ul>
<li>控制序列化器的执行（检验、保存、转换数据）</li>
<li>控制数据库查询的执行</li>
<li>调用请求类和响应类[这两个类也是由drf帮我们再次扩展了一些功能类。]</li>
</ul>
<p>为了方便我们学习，所以先创建一个子应用req</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python manage.py startapp req</span><br></pre></td></tr></table></figure>

<p>注册子引用：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">'django.contrib.admin'</span>,</span><br><span class="line">    <span class="string">'django.contrib.auth'</span>,</span><br><span class="line">    <span class="string">'django.contrib.contenttypes'</span>,</span><br><span class="line">    <span class="string">'django.contrib.sessions'</span>,</span><br><span class="line">    <span class="string">'django.contrib.messages'</span>,</span><br><span class="line">    <span class="string">'django.contrib.staticfiles'</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 注册 rest_framework　的子应用</span></span><br><span class="line">    <span class="string">'rest_framework'</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">'students'</span>,</span><br><span class="line">    <span class="string">'sers'</span>,</span><br><span class="line">    <span class="string">'unsers'</span>,</span><br><span class="line">    <span class="string">'homework'</span>,</span><br><span class="line">    <span class="string">'req'</span>,     <span class="comment"># 请求与响应</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>注册路由</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 子应用路由</span></span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line">urlpatterns = [</span><br><span class="line"></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 总路由</span></span><br><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path,include</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'admin/'</span>, admin.site.urls),</span><br><span class="line">    path(<span class="string">'students/'</span>, include(<span class="string">"students.urls"</span>)),</span><br><span class="line">    path(<span class="string">'sers/'</span>, include(<span class="string">"sers.urls"</span>)),</span><br><span class="line">    path(<span class="string">'unsers/'</span>, include(<span class="string">"unsers.urls"</span>)),</span><br><span class="line">    path(<span class="string">'req/'</span>, include(<span class="string">"req.urls"</span>)),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h2 id="1-1-请求与响应"><a href="#1-1-请求与响应" class="headerlink" title="1.1. 请求与响应"></a>1.1. 请求与响应</h2><h3 id="1-1-1-Request"><a href="#1-1-1-Request" class="headerlink" title="1.1.1 Request"></a>1.1.1 Request</h3><p>REST framework 传入视图的request对象不再是Django默认的HttpRequest对象，而是REST framework提供的扩展了HttpRequest类的<strong>Request</strong>类的对象。</p>
<p>REST framework 提供了<strong>Parser</strong>解析器，在接收到请求后会自动根据Content-Type指明的请求数据类型（如JSON、表单等）将请求数据进行parse解析，解析为类字典[QueryDict]对象保存到<strong>Request</strong>对象中。</p>
<p><strong>Request对象的数据是自动根据前端发送数据的格式进行解析之后的结果。</strong></p>
<p>无论前端发送的哪种格式的数据，我们都可以以统一的方式读取数据。</p>
<h3 id="1-1-1-1-常用属性"><a href="#1-1-1-1-常用属性" class="headerlink" title="1.1.1.1 常用属性"></a>1.1.1.1 常用属性</h3><h3 id="1）-data"><a href="#1）-data" class="headerlink" title="1）.data"></a>1）.data</h3><p><code>request.data</code> 返回解析之后的请求体数据。类似于Django中标准的<code>request.POST</code>和 <code>request.FILES</code>属性，但提供如下特性：</p>
<ul>
<li>包含了解析之后的文件和非文件数据</li>
<li>包含了对POST、PUT、PATCH请求方式解析后的数据</li>
<li>利用了REST framework的parsers解析器，不仅支持表单类型数据，也支持JSON数据</li>
</ul>
<h3 id="2）-query-params"><a href="#2）-query-params" class="headerlink" title="2）.query_params"></a>2）.query_params</h3><p><code>request.query_params</code>返回解析之后的查询字符串数据</p>
<p><code>request.query_params</code>与Django标准的<code>request.GET</code>相同，只是更换了更正确的名称而已。</p>
<h3 id="1-1-2-Response"><a href="#1-1-2-Response" class="headerlink" title="1.1.2 Response"></a>1.1.2 Response</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">rest_framework.response.Response</span><br></pre></td></tr></table></figure>

<p>REST framework提供了一个响应类<code>Response</code>，使用该类构造响应对象时，响应的具体数据内容会被转换（render渲染器）成符合前端需求的类型。</p>
<p>REST framework提供了<code>Renderer</code> 渲染器，用来根据请求头中的<code>Accept</code>（接收数据类型声明）来自动转换响应数据到对应格式。如果前端请求中未进行Accept声明，则会采用默认方式处理响应数据，我们可以通过配置来修改默认响应格式。【简而言之，就是Renderer能通过请求找的Accept查询出客户端支持和希望的数据类型，把视图的结果以客户端能识别的格式返回】</p>
<p>可以在<strong>rest_framework.settings.py</strong>查找所有的drf默认配置项</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="string">'DEFAULT_RENDERER_CLASSES'</span>: (  <span class="comment"># 默认响应渲染类</span></span><br><span class="line">        <span class="string">'rest_framework.renderers.JSONRenderer'</span>,  <span class="comment"># json渲染器</span></span><br><span class="line">        <span class="string">'rest_framework.renderers.BrowsableAPIRenderer'</span>,  <span class="comment"># 浏览器API渲染器</span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-1-2-1-构造方式"><a href="#1-1-2-1-构造方式" class="headerlink" title="1.1.2.1 构造方式"></a>1.1.2.1 构造方式</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Response(data, status=<span class="literal">None</span>, template_name=<span class="literal">None</span>, headers=<span class="literal">None</span>, content_type=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure>

<p><code>data</code>数据不要是render处理之后的数据，只需传递python的内建类型数据即可，REST framework会使用<code>renderer</code>渲染器处理<code>data</code>。</p>
<p><code>data</code>不能是复杂结构的数据，如Django的模型类对象，对于这样的数据我们可以使用<code>Serializer</code>序列化器序列化处理后（转为了Python字典类型）再传递给<code>data</code>参数。</p>
<p>参数说明：</p>
<ul>
<li><code>data</code>: 为响应准备的序列化处理后的数据；</li>
<li><code>status</code>: 状态码，默认200；</li>
<li><code>template_name</code>: 模板名称，如果使用<code>HTMLRenderer</code> 时需指明；</li>
<li><code>headers</code>: 用于存放响应头信息的字典；</li>
<li><code>content_type</code>: 响应数据的Content-Type，通常此参数无需传递，REST framework会根据前端所需类型数据来设置该参数。</li>
</ul>
<h3 id="1-1-2-2-常用属性"><a href="#1-1-2-2-常用属性" class="headerlink" title="1.1.2.2 常用属性"></a>1.1.2.2 常用属性</h3><h3 id="1）-data-1"><a href="#1）-data-1" class="headerlink" title="1）.data"></a>1）.data</h3><p>传给response对象的序列化后，但尚未render处理的数据</p>
<h3 id="2）-status-code"><a href="#2）-status-code" class="headerlink" title="2）.status_code"></a>2）.status_code</h3><p>状态码的数字</p>
<h3 id="3）-content"><a href="#3）-content" class="headerlink" title="3）.content"></a>3）.content</h3><p>经过render处理后的响应数据</p>
<h3 id="1-1-2-3-状态码"><a href="#1-1-2-3-状态码" class="headerlink" title="1.1.2.3 状态码"></a>1.1.2.3 状态码</h3><p>为了方便设置状态码，REST framewrok在<code>rest_framework.status</code>模块中提供了常用状态码常量。</p>
<h3 id="1）信息告知-1xx"><a href="#1）信息告知-1xx" class="headerlink" title="1）信息告知 - 1xx"></a>1）信息告知 - 1xx</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">HTTP_100_CONTINUE</span><br><span class="line">HTTP_101_SWITCHING_PROTOCOLS</span><br></pre></td></tr></table></figure>

<h3 id="2）成功-2xx"><a href="#2）成功-2xx" class="headerlink" title="2）成功 - 2xx"></a>2）成功 - 2xx</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">HTTP_200_OK</span><br><span class="line">HTTP_201_CREATED</span><br><span class="line">HTTP_202_ACCEPTED</span><br><span class="line">HTTP_203_NON_AUTHORITATIVE_INFORMATION</span><br><span class="line">HTTP_204_NO_CONTENT</span><br><span class="line">HTTP_205_RESET_CONTENT</span><br><span class="line">HTTP_206_PARTIAL_CONTENT</span><br><span class="line">HTTP_207_MULTI_STATUS</span><br></pre></td></tr></table></figure>

<h3 id="3）重定向-3xx"><a href="#3）重定向-3xx" class="headerlink" title="3）重定向 - 3xx"></a>3）重定向 - 3xx</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">HTTP_300_MULTIPLE_CHOICES</span><br><span class="line">HTTP_301_MOVED_PERMANENTLY</span><br><span class="line">HTTP_302_FOUND</span><br><span class="line">HTTP_303_SEE_OTHER</span><br><span class="line">HTTP_304_NOT_MODIFIED</span><br><span class="line">HTTP_305_USE_PROXY</span><br><span class="line">HTTP_306_RESERVED</span><br><span class="line">HTTP_307_TEMPORARY_REDIRECT</span><br></pre></td></tr></table></figure>

<h3 id="4）客户端错误-4xx"><a href="#4）客户端错误-4xx" class="headerlink" title="4）客户端错误 - 4xx"></a>4）客户端错误 - 4xx</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">HTTP_400_BAD_REQUEST</span><br><span class="line">HTTP_401_UNAUTHORIZED</span><br><span class="line">HTTP_402_PAYMENT_REQUIRED</span><br><span class="line">HTTP_403_FORBIDDEN</span><br><span class="line">HTTP_404_NOT_FOUND</span><br><span class="line">HTTP_405_METHOD_NOT_ALLOWED</span><br><span class="line">HTTP_406_NOT_ACCEPTABLE</span><br><span class="line">HTTP_407_PROXY_AUTHENTICATION_REQUIRED</span><br><span class="line">HTTP_408_REQUEST_TIMEOUT</span><br><span class="line">HTTP_409_CONFLICT</span><br><span class="line">HTTP_410_GONE</span><br><span class="line">HTTP_411_LENGTH_REQUIRED</span><br><span class="line">HTTP_412_PRECONDITION_FAILED</span><br><span class="line">HTTP_413_REQUEST_ENTITY_TOO_LARGE</span><br><span class="line">HTTP_414_REQUEST_URI_TOO_LONG</span><br><span class="line">HTTP_415_UNSUPPORTED_MEDIA_TYPE</span><br><span class="line">HTTP_416_REQUESTED_RANGE_NOT_SATISFIABLE</span><br><span class="line">HTTP_417_EXPECTATION_FAILED</span><br><span class="line">HTTP_422_UNPROCESSABLE_ENTITY</span><br><span class="line">HTTP_423_LOCKED</span><br><span class="line">HTTP_424_FAILED_DEPENDENCY</span><br><span class="line">HTTP_428_PRECONDITION_REQUIRED</span><br><span class="line">HTTP_429_TOO_MANY_REQUESTS</span><br><span class="line">HTTP_431_REQUEST_HEADER_FIELDS_TOO_LARGE</span><br><span class="line">HTTP_451_UNAVAILABLE_FOR_LEGAL_REASONS</span><br></pre></td></tr></table></figure>

<h3 id="5）服务器错误-5xx"><a href="#5）服务器错误-5xx" class="headerlink" title="5）服务器错误 - 5xx"></a>5）服务器错误 - 5xx</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">HTTP_500_INTERNAL_SERVER_ERROR</span><br><span class="line">HTTP_501_NOT_IMPLEMENTED</span><br><span class="line">HTTP_502_BAD_GATEWAY</span><br><span class="line">HTTP_503_SERVICE_UNAVAILABLE</span><br><span class="line">HTTP_504_GATEWAY_TIMEOUT</span><br><span class="line">HTTP_505_HTTP_VERSION_NOT_SUPPORTED</span><br><span class="line">HTTP_507_INSUFFICIENT_STORAGE</span><br><span class="line">HTTP_511_NETWORK_AUTHENTICATION_REQUIRED</span><br></pre></td></tr></table></figure>

<p>为了方便演示，所以视图里面的内容知识，我们另外创建一个子应用来展示</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python manage.py startapp demo</span><br></pre></td></tr></table></figure>

<p>注册子应用</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">'django.contrib.admin'</span>,</span><br><span class="line">    <span class="string">'django.contrib.auth'</span>,</span><br><span class="line">    <span class="string">'django.contrib.contenttypes'</span>,</span><br><span class="line">    <span class="string">'django.contrib.sessions'</span>,</span><br><span class="line">    <span class="string">'django.contrib.messages'</span>,</span><br><span class="line">    <span class="string">'django.contrib.staticfiles'</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 注册 rest_framework　的子应用</span></span><br><span class="line">    <span class="string">'rest_framework'</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">'students'</span>,</span><br><span class="line">    <span class="string">'sers'</span>,</span><br><span class="line">    <span class="string">'unsers'</span>,</span><br><span class="line">    <span class="string">'homework'</span>,</span><br><span class="line">    <span class="string">'req'</span>,     <span class="comment"># 请求与响应</span></span><br><span class="line">    <span class="string">'demo'</span>,     <span class="comment"># 视图类的学习</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>注册路由，</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path,include</span><br><span class="line"><span class="comment"># 新版的django把url拆分成了2个路由函数</span></span><br><span class="line"><span class="comment"># django.urls.path 专门编写字符串路由</span></span><br><span class="line"><span class="comment"># django.urls.re_path 专门编写正则路由</span></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'admin/'</span>, admin.site.urls),</span><br><span class="line">    path(<span class="string">'students/'</span>, include(<span class="string">"students.urls"</span>)),</span><br><span class="line">    path(<span class="string">'sers/'</span>, include(<span class="string">"sers.urls"</span>)),</span><br><span class="line">    path(<span class="string">'unsers/'</span>, include(<span class="string">"unsers.urls"</span>)),</span><br><span class="line">    path(<span class="string">'req/'</span>, include(<span class="string">"req.urls"</span>)),</span><br><span class="line">    path(<span class="string">"demo/"</span>,include(<span class="string">"demo.urls"</span>)),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>Django Rest_Framework</tag>
      </tags>
  </entry>
  <entry>
    <title>[MySOL数据库]</title>
    <url>/2020/03/08/MySOL%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
    <content><![CDATA[<h2 id="MySQL数据库"><a href="#MySQL数据库" class="headerlink" title="MySQL数据库"></a>MySQL数据库</h2><p>MySQL是一种开放源代码的关系型数据库管理系统（RDBMS），使用最常用的数据库管理语言–结构化查询语言（SQL）进行数据库管理。 MySQL是开放源代码的，因此任何人都可以在General Public License的许可下下载并根据个性化的需要对其进行修改。 MySQL因为其速度、可靠性和适应性而备受关注。</p>
<p><a href="https://rogerxs80.github.io/2020/03/09/%E5%88%9D%E8%AF%86%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%8Emysql%E5%AE%89%E8%A3%85/" target="_blank" rel="noopener">1.mysql安装</a></p>
<p><a href="https://rogerxs80.github.io/2020/03/09/%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/" target="_blank" rel="noopener">2.存储引擎与数据类型</a></p>
<p><a href="https://rogerxs80.github.io/2020/03/10/%E7%BA%A6%E6%9D%9F%E6%9D%A1%E4%BB%B6%E4%B8%8E%E8%A1%A8%E5%85%B3%E7%B3%BB/" target="_blank" rel="noopener">3.约束条件与表关系</a></p>
<p><a href="https://rogerxs80.github.io/2020/03/11/%E8%81%9A%E5%90%88%E5%87%BD%E6%95%B0/" target="_blank" rel="noopener">4.聚合函数</a></p>
<p><a href="https://rogerxs80.github.io/2020/03/12/navicat%E5%AE%89%E8%A3%85%E4%B8%8Epymysql%E6%A8%A1%E5%9D%97/" target="_blank" rel="noopener">5.navicat安装与pymysql模块</a></p>
<p><a href="https://rogerxs80.github.io/2020/03/13/%E4%BA%8B%E5%8A%A1%E4%B8%8E%E5%85%B6%E4%BB%96%E4%BB%8B%E7%BB%8D/" target="_blank" rel="noopener">6.事务与开发模型</a></p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>[JavaScript入门]</title>
    <url>/2019/07/12/JavaScript%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h3 id="Js简介"><a href="#Js简介" class="headerlink" title="Js简介"></a>Js简介</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>js也是一门编程语言 它也是可以写后端代码的</span><br><span class="line">	用js一统天下 前后端都可以写</span><br><span class="line">  	nodejs 支持js代码跑在后端服务器上</span><br><span class="line">    然而并不能 想的太天真了!!!</span><br><span class="line"><span class="number">2.</span>js跟java一毛钱关系都没有，纯粹是为了蹭当时java的热度</span><br><span class="line"></span><br><span class="line">ECMAScript和JavaScript的关系</span><br><span class="line">因此ECMAScript和JavaScript的关系是，前者是后者的规格，后者是前者的一种实现。</span><br><span class="line"></span><br><span class="line">JS版本</span><br><span class="line">	主要还是用的<span class="number">5.1</span>和<span class="number">6.0</span></span><br><span class="line"></span><br><span class="line">JavaScript 是脚本语言</span><br><span class="line">JavaScript 是一种轻量级的编程语言。</span><br><span class="line">JavaScript 是可插入 HTML 页面的编程代码。</span><br><span class="line">JavaScript 插入 HTML 页面后，可由所有的现代浏览器执行。</span><br><span class="line">JavaScript 很容易学习</span><br><span class="line"></span><br><span class="line"># js的注释</span><br><span class="line"><span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string">// 单行注释</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">/*</span></span><br><span class="line"><span class="string">多行注释1</span></span><br><span class="line"><span class="string">多行注释2</span></span><br><span class="line"><span class="string">多行注释3</span></span><br><span class="line"><span class="string">*/</span></span><br><span class="line"><span class="string">"</span><span class="string">""</span></span><br><span class="line"></span><br><span class="line"># 两种引入方式</span><br><span class="line">    <span class="number">1.</span>script标签内部直接书写js代码</span><br><span class="line">    <span class="number">2.</span>script标签src属性引入外部js代码</span><br><span class="line"></span><br><span class="line"># js语法结构</span><br><span class="line">	js是以分号作为语句的结束</span><br><span class="line">  但是如果你不写分号，问题也不大 也能够正常执行 但是它就相当于没有结束符</span><br></pre></td></tr></table></figure>

<h3 id="js学习流程"><a href="#js学习流程" class="headerlink" title="js学习流程"></a>js学习流程</h3><ul>
<li>变量</li>
<li>数据类型</li>
<li>流程控制</li>
<li>函数</li>
<li>对象</li>
<li>内置方法/模块</li>
</ul>
<h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string">在js中 首次定义一个变量名的时候需要用关键字声明</span></span><br><span class="line"><span class="string">	1.关键字var</span></span><br><span class="line"><span class="string">		var name='jason'</span></span><br><span class="line"><span class="string">	2.es6推出的新语法</span></span><br><span class="line"><span class="string">		let name='jason'</span></span><br><span class="line"><span class="string">		如果你的编辑器支持的版本是5.1那么无法使用let</span></span><br><span class="line"><span class="string">		如果是6.0则向下兼容 var let</span></span><br><span class="line"><span class="string">"</span><span class="string">""</span></span><br><span class="line"># var与let的区别</span><br><span class="line">n = <span class="number">10</span></span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">  print(n)</span><br><span class="line">print(n)  </span><br><span class="line"># var 5		let 10</span><br><span class="line"></span><br><span class="line"><span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string">var在for循环里面定义也会影响到全局</span></span><br><span class="line"><span class="string">let在局部定义只会在局部生效</span></span><br><span class="line"><span class="string">"</span><span class="string">""</span></span><br></pre></td></tr></table></figure>

<h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"># python中没有真正意义上的常量 默认全大写就是表示常量</span><br><span class="line"># js中是有真正意义上的常量的</span><br><span class="line"><span class="keyword">const</span> pi = <span class="number">3.14</span></span><br></pre></td></tr></table></figure>

<h3 id="变量-1"><a href="#变量-1" class="headerlink" title="变量"></a>变量</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;&quot;&quot;</span><br><span class="line">js变量的命名规范</span><br><span class="line">	1.变量名只能是 </span><br><span class="line">		数字 字母 下划线 $</span><br><span class="line">	2.变量名命名规范(不遵循也可以)</span><br><span class="line">        1.js中推荐使用驼峰式命名</span><br><span class="line">            userName</span><br><span class="line">            dataOfDb</span><br><span class="line">        2.python推荐使用下划线的方式</span><br><span class="line">            user_name</span><br><span class="line">            data_of_db</span><br><span class="line">	3.不能用关键字作为变量名</span><br><span class="line">			不需要记忆 </span><br><span class="line"></span><br><span class="line">js代码的书写位置</span><br><span class="line">	1.可以单独开设js文件书写</span><br><span class="line">	2.还可以直接在浏览器提供的console界面书写</span><br><span class="line">		在用浏览器书写js的时候 左上方的清空按钮只是清空当前页面 代码其实还在</span><br><span class="line">		如果你想要重新来 最好重新开设一个 页面</span><br><span class="line">		(在使用浏览器书写 你自己的js代码的时候推荐你在 自己的html页面打开)</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>

<h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><p>js也是一门面向对象 的编程语言 即一切皆对象!!!</p>
<p>js/python是一门拥有动态类型</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">name = <span class="string">'jason'</span></span><br><span class="line">name = <span class="number">123</span></span><br><span class="line">name = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"># name可以指向任意的数据类型 </span><br><span class="line"># 但是有一些语言中，变量名之内指向一种后续不能更改</span><br></pre></td></tr></table></figure>

<h3 id="数值类型-number"><a href="#数值类型-number" class="headerlink" title="数值类型(number)"></a>数值类型(number)</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">11</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="number">11.11</span>;</span><br><span class="line"><span class="comment">// 如何查看当前数据类型</span></span><br><span class="line"><span class="keyword">typeof</span> a;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">11</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="number">11.11</span>;</span><br><span class="line"><span class="keyword">typeof</span> a;</span><br><span class="line"><span class="keyword">typeof</span> b;</span><br><span class="line"><span class="string">"number"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 特殊的 NaN:数值类型 表示的意思是“不是一个数字” NOT A NUMBER</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 类型转换</span></span><br><span class="line"><span class="built_in">parseInt</span>()</span><br><span class="line"><span class="built_in">parseFloat</span>()</span><br><span class="line"></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">'12312312'</span>)</span><br><span class="line"><span class="number">12312312</span></span><br><span class="line"><span class="built_in">parseFloat</span>(<span class="string">'11.11'</span>)</span><br><span class="line"><span class="number">11.11</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">'11.11'</span>)</span><br><span class="line"><span class="number">11</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">'123sdasdajs2312dasd'</span>)</span><br><span class="line"><span class="number">123</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">'asdasdad123sdasdajs2312dasd'</span>)</span><br><span class="line"><span class="literal">NaN</span></span><br></pre></td></tr></table></figure>

<h3 id="字符类型-string"><a href="#字符类型-string" class="headerlink" title="字符类型(string)"></a>字符类型(string)</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="string">'jason'</span></span><br><span class="line"><span class="literal">undefined</span></span><br><span class="line"><span class="keyword">typeof</span> s</span><br><span class="line"><span class="string">"string"</span></span><br><span class="line"><span class="keyword">var</span> s1 = <span class="string">"jason"</span></span><br><span class="line"><span class="literal">undefined</span></span><br><span class="line"><span class="keyword">typeof</span> s1;</span><br><span class="line"><span class="string">"string"</span></span><br><span class="line"><span class="keyword">var</span> s2 = <span class="string">''</span><span class="string">'egon'</span><span class="string">''</span>  <span class="comment">// 不支持三引号</span></span><br><span class="line">VM665:<span class="number">1</span> Uncaught <span class="built_in">SyntaxError</span>: Unexpected string</span><br><span class="line"></span><br><span class="line"><span class="comment">// 模版字符串</span></span><br><span class="line"><span class="keyword">var</span> s3 = <span class="string">`</span></span><br><span class="line"><span class="string">asdkajsd</span></span><br><span class="line"><span class="string">sdjkladj</span></span><br><span class="line"><span class="string">asdjlajdkl</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line"><span class="keyword">typeof</span> s3</span><br><span class="line"><span class="string">"string"</span></span><br><span class="line"><span class="comment">// 模版字符串除了可以定义多行文本之外还可以实现格式化字符串操作</span></span><br><span class="line"><span class="comment">// 书写$&#123;&#125; 会自动去前面找大括号里面的变量名对应的值 如果没有定义直接报错</span></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">'jason'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> age = <span class="number">18</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> sss = <span class="string">`</span></span><br><span class="line"><span class="string">   my name is <span class="subst">$&#123;name&#125;</span> and my age is <span class="subst">$&#123;age&#125;</span></span></span><br><span class="line"><span class="string">`</span></span><br><span class="line">sss</span><br><span class="line"><span class="string">"</span></span><br><span class="line"><span class="string">   my name is jason and my age is 18</span></span><br><span class="line"><span class="string">"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> s4 = <span class="string">`my name is <span class="subst">$&#123;namemmmmm&#125;</span>`</span></span><br><span class="line">VM1140:<span class="number">1</span> Uncaught <span class="built_in">ReferenceError</span>: namemmmmm is not defined</span><br><span class="line">    at &lt;anonymous&gt;:<span class="number">1</span>:<span class="number">24</span></span><br><span class="line"><span class="comment">// 在写js代码的时候 不要去管左侧箭头的内容</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 字符串的拼接</span></span><br><span class="line"><span class="comment">// 在python中不推荐你使用+做拼接 join</span></span><br><span class="line"><span class="comment">// 在js中推荐你直接使用+做拼接</span></span><br><span class="line">name + age</span><br></pre></td></tr></table></figure>

<h3 id="字符类型常用方法"><a href="#字符类型常用方法" class="headerlink" title="字符类型常用方法"></a>字符类型常用方法</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string">.length	返回长度</span></span><br><span class="line"><span class="string">.trim()	移除空白</span></span><br><span class="line"><span class="string">.trimLeft()	移除左边的空白</span></span><br><span class="line"><span class="string">.trimRight()	移除右边的空白</span></span><br><span class="line"><span class="string">.charAt(n)	返回第n个字符</span></span><br><span class="line"><span class="string">.concat(value, ...)	拼接</span></span><br><span class="line"><span class="string">	联想记忆</span></span><br><span class="line"><span class="string">		MySQL</span></span><br><span class="line"><span class="string">			concat</span></span><br><span class="line"><span class="string">			concat_ws</span></span><br><span class="line"><span class="string">			group_concat</span></span><br><span class="line"><span class="string">		python</span></span><br><span class="line"><span class="string">			join</span></span><br><span class="line"><span class="string">.indexOf(substring, start)	子序列位置</span></span><br><span class="line"><span class="string">.substring(from, to)	根据索引获取子序列</span></span><br><span class="line"><span class="string">.slice(start, end)	切片</span></span><br><span class="line"><span class="string">.toLowerCase()	小写</span></span><br><span class="line"><span class="string">.toUpperCase()	大写</span></span><br><span class="line"><span class="string">.split(delimiter, limit)	分割</span></span><br><span class="line"><span class="string">"</span><span class="string">""</span></span><br><span class="line"># 记忆的时候一定要对比python去记 </span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">'egondsb'</span></span><br><span class="line"><span class="literal">undefined</span></span><br><span class="line"></span><br><span class="line">name.length</span><br><span class="line"><span class="number">7</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> name1 = <span class="string">'  egonDSB  '</span></span><br><span class="line"><span class="literal">undefined</span></span><br><span class="line">name1</span><br><span class="line"><span class="string">"  egonDSB  "</span></span><br><span class="line">name1.trim()</span><br><span class="line"><span class="string">"egonDSB"</span></span><br><span class="line">name1.trimLeft()</span><br><span class="line"><span class="string">"egonDSB  "</span></span><br><span class="line">name1.trimRight()</span><br><span class="line"><span class="string">"  egonDSB"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> name2 = <span class="string">'$$jason$$'</span></span><br><span class="line"><span class="literal">undefined</span></span><br><span class="line">name2.trim('$')  # 不能加括号指定去除的内容</span><br><span class="line"><span class="string">"$$jason$$"</span></span><br><span class="line"></span><br><span class="line">name2.charAt(<span class="number">0</span>)</span><br><span class="line"><span class="string">"$"</span></span><br><span class="line">name2.indexOf(<span class="string">'as'</span>)</span><br><span class="line"><span class="number">3</span></span><br><span class="line"></span><br><span class="line">name2.substring(<span class="number">0</span>,<span class="number">5</span>)</span><br><span class="line"><span class="string">"$$jas"</span></span><br><span class="line">name2.slice(<span class="number">0</span>,<span class="number">5</span>)</span><br><span class="line"><span class="string">"$$jas"</span></span><br><span class="line">name2.substring(0,-1)  # 不识别负数</span><br><span class="line"><span class="string">""</span></span><br><span class="line">name2.slice(0,-1)  # 后面推荐就使用slice就可以</span><br><span class="line"><span class="string">"$$jason$"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> name3 = <span class="string">'eGoNDsb123666HahA'</span></span><br><span class="line"><span class="literal">undefined</span></span><br><span class="line">name3.toLowerCase()</span><br><span class="line"><span class="string">"egondsb123666haha"</span></span><br><span class="line">name3.toUpperCase()</span><br><span class="line"><span class="string">"EGONDSB123666HAHA"</span></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">'tank|hecha|liaomei|mengsao|...'</span></span><br><span class="line"><span class="literal">undefined</span></span><br><span class="line"></span><br><span class="line">name.split(<span class="string">'|'</span>)</span><br><span class="line">(<span class="number">5</span>) [<span class="string">"tank"</span>, <span class="string">"hecha"</span>, <span class="string">"liaomei"</span>, <span class="string">"mengsao"</span>, <span class="string">"..."</span>]</span><br><span class="line">name.split(<span class="string">'|'</span>,<span class="number">2</span>)</span><br><span class="line">(<span class="number">2</span>) [<span class="string">"tank"</span>, <span class="string">"hecha"</span>]<span class="number">0</span>: <span class="string">"tank"</span><span class="number">1</span>: <span class="string">"hecha"</span>length: <span class="number">2</span>__proto__: <span class="built_in">Array</span>(<span class="number">0</span>)</span><br><span class="line">name.split('|',10)  # 第二个参数不是限制切割字符的个数还是获取切割之后元素的个数</span><br><span class="line">(<span class="number">5</span>) [<span class="string">"tank"</span>, <span class="string">"hecha"</span>, <span class="string">"liaomei"</span>, <span class="string">"mengsao"</span>, <span class="string">"..."</span>]</span><br><span class="line"></span><br><span class="line">name.concat(name1,name2)</span><br><span class="line"><span class="string">"tank|hecha|liaomei|mengsao|...  egonDSB  $$jason$$"</span></span><br><span class="line"><span class="keyword">var</span> p = <span class="number">1111</span></span><br><span class="line"><span class="literal">undefined</span></span><br><span class="line">name.concat(p)  # js是弱类型(内部会自动转换成相同的数据类型做操作)</span><br><span class="line"><span class="string">"tank|hecha|liaomei|mengsao|...1111"</span></span><br><span class="line"></span><br><span class="line">l = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>]</span><br><span class="line">res = '|'.join(l)  # 直接报错</span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure>

<h1 id="布尔值-boolean"><a href="#布尔值-boolean" class="headerlink" title="布尔值(boolean)"></a>布尔值(boolean)</h1><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string">1.在python中布尔值是首字母大写的</span></span><br><span class="line"><span class="string">	True</span></span><br><span class="line"><span class="string">	False</span></span><br><span class="line"><span class="string">2.但是在js中布尔值是全小写的</span></span><br><span class="line"><span class="string">	true</span></span><br><span class="line"><span class="string">	false</span></span><br><span class="line"><span class="string"># 布尔值是false的有哪些</span></span><br><span class="line"><span class="string">	空字符串、0、null、undefined、NaN</span></span><br><span class="line"><span class="string">"</span><span class="string">""</span></span><br></pre></td></tr></table></figure>

<h3 id="null与undefined"><a href="#null与undefined" class="headerlink" title="null与undefined"></a>null与undefined</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string">null</span></span><br><span class="line"><span class="string">	表示值为空 一般都是指定或者清空一个变量时使用</span></span><br><span class="line"><span class="string">		name = 'jason'</span></span><br><span class="line"><span class="string">		name = null</span></span><br><span class="line"><span class="string">undefined</span></span><br><span class="line"><span class="string">	表示声明了一个变量 但是没有做初始化操作(没有给值)</span></span><br><span class="line"><span class="string">	函数没有指定返回值的时候 返回的也是undefined</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">参考博客图解：厕所卷纸</span></span><br><span class="line"><span class="string">https://www.cnblogs.com/Dominic-Ji/p/9111021.html</span></span><br><span class="line"><span class="string">"</span><span class="string">""</span></span><br></pre></td></tr></table></figure>

<h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><p><strong>一切皆对象</strong></p>
<ul>
<li><p>数组(类似于python里面的列表) []</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> l = [<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>,<span class="number">55</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">typeof</span> l</span><br><span class="line"><span class="string">"object"</span></span><br><span class="line"><span class="keyword">var</span> l1 = [<span class="number">11</span>,<span class="string">'sdasd'</span>,<span class="number">11.11</span>,<span class="literal">true</span>]</span><br><span class="line"></span><br><span class="line">l1[<span class="number">1</span>]</span><br><span class="line"><span class="string">"sdasd"</span></span><br><span class="line">l1[-1]  # 不支持负数索引</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> l = [<span class="number">111</span>,<span class="number">222</span>,<span class="number">333</span>,<span class="number">444</span>,<span class="number">555</span>,<span class="number">666</span>]</span><br><span class="line"><span class="literal">undefined</span></span><br><span class="line">l.length</span><br><span class="line"><span class="number">6</span></span><br><span class="line">l.push(<span class="number">777</span>)</span><br><span class="line"><span class="number">7</span></span><br><span class="line">l</span><br><span class="line">(<span class="number">7</span>) [<span class="number">111</span>, <span class="number">222</span>, <span class="number">333</span>, <span class="number">444</span>, <span class="number">555</span>, <span class="number">666</span>, <span class="number">777</span>]</span><br><span class="line">l.pop()</span><br><span class="line"><span class="number">777</span></span><br><span class="line">l</span><br><span class="line">(<span class="number">6</span>) [<span class="number">111</span>, <span class="number">222</span>, <span class="number">333</span>, <span class="number">444</span>, <span class="number">555</span>, <span class="number">666</span>]</span><br><span class="line">l.unshift(<span class="number">123</span>)</span><br><span class="line"><span class="number">7</span></span><br><span class="line">l</span><br><span class="line">(<span class="number">7</span>) [<span class="number">123</span>, <span class="number">111</span>, <span class="number">222</span>, <span class="number">333</span>, <span class="number">444</span>, <span class="number">555</span>, <span class="number">666</span>]</span><br><span class="line">l.shift()</span><br><span class="line"><span class="number">123</span></span><br><span class="line">l.slice(<span class="number">0</span>,<span class="number">3</span>)</span><br><span class="line">(<span class="number">3</span>) [<span class="number">111</span>, <span class="number">222</span>, <span class="number">333</span>]</span><br><span class="line">l.reverse()</span><br><span class="line">(<span class="number">6</span>) [<span class="number">666</span>, <span class="number">555</span>, <span class="number">444</span>, <span class="number">333</span>, <span class="number">222</span>, <span class="number">111</span>]</span><br><span class="line">l.join('$')  # 跟python刚好相反</span><br><span class="line"><span class="string">"666$555$444$333$222$111"</span></span><br><span class="line"></span><br><span class="line">l.concat([111,222,333])  # extend</span><br><span class="line">(<span class="number">9</span>) [<span class="number">666</span>, <span class="number">555</span>, <span class="number">444</span>, <span class="number">333</span>, <span class="number">222</span>, <span class="number">111</span>, <span class="number">111</span>, <span class="number">222</span>, <span class="number">333</span>]</span><br><span class="line">l.sort()</span><br><span class="line">(<span class="number">6</span>) [<span class="number">111</span>, <span class="number">222</span>, <span class="number">333</span>, <span class="number">444</span>, <span class="number">555</span>, <span class="number">666</span>]</span><br><span class="line"></span><br><span class="line"># 三个比较重要的方法</span><br><span class="line"><span class="keyword">var</span> ll = [<span class="number">111</span>,<span class="number">222</span>,<span class="number">333</span>,<span class="number">444</span>,<span class="number">555</span>,<span class="number">666</span>]</span><br><span class="line">ll.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;<span class="built_in">console</span>.log(value)&#125;,ll)</span><br><span class="line">VM2277:1 111  # 一个参数就是数组里面每一个元素对象</span><br><span class="line">VM2277:<span class="number">1</span> <span class="number">222</span></span><br><span class="line">VM2277:<span class="number">1</span> <span class="number">333</span></span><br><span class="line">VM2277:<span class="number">1</span> <span class="number">444</span></span><br><span class="line">VM2277:<span class="number">1</span> <span class="number">555</span></span><br><span class="line">VM2277:<span class="number">1</span> <span class="number">666</span></span><br><span class="line"></span><br><span class="line">ll.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">value,index</span>)</span>&#123;<span class="built_in">console</span>.log(value,index)&#125;,ll)</span><br><span class="line">VM2346:1 111 0  # 两个参数就是元素 + 元素索引</span><br><span class="line">VM2346:<span class="number">1</span> <span class="number">222</span> <span class="number">1</span></span><br><span class="line">VM2346:<span class="number">1</span> <span class="number">333</span> <span class="number">2</span></span><br><span class="line">VM2346:<span class="number">1</span> <span class="number">444</span> <span class="number">3</span></span><br><span class="line">VM2346:<span class="number">1</span> <span class="number">555</span> <span class="number">4</span></span><br><span class="line">VM2346:<span class="number">1</span> <span class="number">666</span> <span class="number">5</span></span><br><span class="line"><span class="literal">undefined</span></span><br><span class="line">ll.forEach(function(value,index,arr)&#123;console.log(value,index,arr)&#125;,ll)  # 元素 + 元素索引 + 元素的数据来源</span><br><span class="line">VM2430:<span class="number">1</span> <span class="number">111</span> <span class="number">0</span> (<span class="number">6</span>) [<span class="number">111</span>, <span class="number">222</span>, <span class="number">333</span>, <span class="number">444</span>, <span class="number">555</span>, <span class="number">666</span>]</span><br><span class="line">VM2430:<span class="number">1</span> <span class="number">222</span> <span class="number">1</span> (<span class="number">6</span>) [<span class="number">111</span>, <span class="number">222</span>, <span class="number">333</span>, <span class="number">444</span>, <span class="number">555</span>, <span class="number">666</span>]</span><br><span class="line">VM2430:<span class="number">1</span> <span class="number">333</span> <span class="number">2</span> (<span class="number">6</span>) [<span class="number">111</span>, <span class="number">222</span>, <span class="number">333</span>, <span class="number">444</span>, <span class="number">555</span>, <span class="number">666</span>]</span><br><span class="line">VM2430:<span class="number">1</span> <span class="number">444</span> <span class="number">3</span> (<span class="number">6</span>) [<span class="number">111</span>, <span class="number">222</span>, <span class="number">333</span>, <span class="number">444</span>, <span class="number">555</span>, <span class="number">666</span>]</span><br><span class="line">VM2430:<span class="number">1</span> <span class="number">555</span> <span class="number">4</span> (<span class="number">6</span>) [<span class="number">111</span>, <span class="number">222</span>, <span class="number">333</span>, <span class="number">444</span>, <span class="number">555</span>, <span class="number">666</span>]</span><br><span class="line">VM2430:<span class="number">1</span> <span class="number">666</span> <span class="number">5</span> (<span class="number">6</span>) [<span class="number">111</span>, <span class="number">222</span>, <span class="number">333</span>, <span class="number">444</span>, <span class="number">555</span>, <span class="number">666</span>]</span><br><span class="line"><span class="literal">undefined</span></span><br><span class="line"></span><br><span class="line">ll.forEach(function(value,index,arr,xxx)&#123;console.log(value,index,arr,xxx)&#125;,ll)  # 最多三个</span><br><span class="line">VM2532:<span class="number">1</span> <span class="number">111</span> <span class="number">0</span> (<span class="number">6</span>) [<span class="number">111</span>, <span class="number">222</span>, <span class="number">333</span>, <span class="number">444</span>, <span class="number">555</span>, <span class="number">666</span>] <span class="literal">undefined</span></span><br><span class="line">VM2532:<span class="number">1</span> <span class="number">222</span> <span class="number">1</span> (<span class="number">6</span>) [<span class="number">111</span>, <span class="number">222</span>, <span class="number">333</span>, <span class="number">444</span>, <span class="number">555</span>, <span class="number">666</span>] <span class="literal">undefined</span></span><br><span class="line">VM2532:<span class="number">1</span> <span class="number">333</span> <span class="number">2</span> (<span class="number">6</span>) [<span class="number">111</span>, <span class="number">222</span>, <span class="number">333</span>, <span class="number">444</span>, <span class="number">555</span>, <span class="number">666</span>] <span class="literal">undefined</span></span><br><span class="line">VM2532:<span class="number">1</span> <span class="number">444</span> <span class="number">3</span> (<span class="number">6</span>) [<span class="number">111</span>, <span class="number">222</span>, <span class="number">333</span>, <span class="number">444</span>, <span class="number">555</span>, <span class="number">666</span>] <span class="literal">undefined</span></span><br><span class="line">VM2532:<span class="number">1</span> <span class="number">555</span> <span class="number">4</span> (<span class="number">6</span>) [<span class="number">111</span>, <span class="number">222</span>, <span class="number">333</span>, <span class="number">444</span>, <span class="number">555</span>, <span class="number">666</span>] <span class="literal">undefined</span></span><br><span class="line">VM2532:<span class="number">1</span> <span class="number">666</span> <span class="number">5</span> (<span class="number">6</span>) [<span class="number">111</span>, <span class="number">222</span>, <span class="number">333</span>, <span class="number">444</span>, <span class="number">555</span>, <span class="number">666</span>] <span class="literal">undefined</span></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">ll</span><br><span class="line">(<span class="number">6</span>) [<span class="number">111</span>, <span class="number">222</span>, <span class="number">333</span>, <span class="number">444</span>, <span class="number">555</span>, <span class="number">666</span>]</span><br><span class="line">ll.splice(0,3)  # 两个参数 第一个是起始位置 第二个是删除的个数</span><br><span class="line">(<span class="number">3</span>) [<span class="number">111</span>, <span class="number">222</span>, <span class="number">333</span>]</span><br><span class="line">ll</span><br><span class="line">(<span class="number">3</span>) [<span class="number">444</span>, <span class="number">555</span>, <span class="number">666</span>]</span><br><span class="line">ll.splice(0,1,777)  # 先删除后添加</span><br><span class="line">[<span class="number">444</span>]</span><br><span class="line">ll</span><br><span class="line">(<span class="number">3</span>) [<span class="number">777</span>, <span class="number">555</span>, <span class="number">666</span>]</span><br><span class="line">ll.splice(<span class="number">0</span>,<span class="number">1</span>,[<span class="number">111</span>,<span class="number">222</span>,<span class="number">333</span>,<span class="number">444</span>])</span><br><span class="line">[<span class="number">777</span>]</span><br><span class="line">ll</span><br><span class="line">(<span class="number">3</span>) [<span class="built_in">Array</span>(<span class="number">4</span>), <span class="number">555</span>, <span class="number">666</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> l1 = [<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>,<span class="number">55</span>,<span class="number">66</span>]</span><br><span class="line"><span class="literal">undefined</span></span><br><span class="line">l1.map(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;<span class="built_in">console</span>.log(value)&#125;,l1)</span><br><span class="line">VM3115:<span class="number">1</span> <span class="number">11</span></span><br><span class="line">VM3115:<span class="number">1</span> <span class="number">22</span></span><br><span class="line">VM3115:<span class="number">1</span> <span class="number">33</span></span><br><span class="line">VM3115:<span class="number">1</span> <span class="number">44</span></span><br><span class="line">VM3115:<span class="number">1</span> <span class="number">55</span></span><br><span class="line">VM3115:<span class="number">1</span> <span class="number">66</span></span><br><span class="line">l1.map(<span class="function"><span class="keyword">function</span>(<span class="params">value,index</span>)</span>&#123;<span class="keyword">return</span> value*<span class="number">2</span>&#125;,l1)</span><br><span class="line">(<span class="number">6</span>) [<span class="number">22</span>, <span class="number">44</span>, <span class="number">66</span>, <span class="number">88</span>, <span class="number">110</span>, <span class="number">132</span>]</span><br><span class="line">l1.map(<span class="function"><span class="keyword">function</span>(<span class="params">value,index,arr</span>)</span>&#123;<span class="keyword">return</span> value*<span class="number">2</span>&#125;,l1)</span><br><span class="line">(<span class="number">6</span>) [<span class="number">22</span>, <span class="number">44</span>, <span class="number">66</span>, <span class="number">88</span>, <span class="number">110</span>, <span class="number">132</span>]</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"># 算术运算符</span><br><span class="line"><span class="keyword">var</span> x = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> res1 = x++;</span><br><span class="line"><span class="keyword">var</span> res2 = ++x;</span><br><span class="line">res1 <span class="number">10</span></span><br><span class="line">res2 <span class="number">12</span></span><br><span class="line">++表示自增<span class="number">1</span> 类似于 +=<span class="number">1</span></span><br><span class="line">加号在前先加后赋值 加号在后先赋值后加</span><br><span class="line"></span><br><span class="line"># 比较运算符</span><br><span class="line">1 == '1'  # 弱等于  内部自动转换成相同的数据类型比较了</span><br><span class="line"><span class="literal">true</span>  </span><br><span class="line"></span><br><span class="line">1 === '1'  # 强等于  内部不做类型转换</span><br><span class="line"></span><br><span class="line"><span class="number">1</span> != <span class="string">'1'</span></span><br><span class="line"><span class="literal">false</span></span><br><span class="line"><span class="number">1</span> !== <span class="string">'2'</span></span><br><span class="line"><span class="literal">true</span></span><br><span class="line"></span><br><span class="line"># 逻辑运算符</span><br><span class="line">	# python中 and or not</span><br><span class="line">  # js中 &amp;&amp; || !</span><br><span class="line"><span class="number">5</span> &amp;&amp; <span class="string">'5'</span></span><br><span class="line"><span class="string">'5'</span></span><br><span class="line"></span><br><span class="line"><span class="number">0</span> || <span class="number">1</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"></span><br><span class="line">!<span class="number">5</span> &amp;&amp; <span class="string">'5'</span></span><br><span class="line"><span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string">一定要注意到底什么时候返回的是布尔值 什么是返回的是数据</span></span><br><span class="line"><span class="string">按照后端逻辑理解吧 js这块看看就行了</span></span><br><span class="line"><span class="string">"</span><span class="string">""</span></span><br><span class="line"></span><br><span class="line"># 赋值运算符</span><br><span class="line">= += -= *= ....</span><br></pre></td></tr></table></figure>

<h3 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"># if判断</span><br><span class="line"><span class="keyword">var</span> age = <span class="number">28</span>;</span><br><span class="line"># if(条件)&#123;条件成立之后指向的代码块&#125;</span><br><span class="line"><span class="keyword">if</span> (age&gt;<span class="number">18</span>)&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'来啊 来啊'</span>)</span><br><span class="line">&#125;</span><br><span class="line"># if-else</span><br><span class="line"><span class="keyword">if</span> (age&gt;<span class="number">18</span>)&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'来啊 来啊'</span>)</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'没钱 滚蛋'</span>)</span><br><span class="line">&#125;</span><br><span class="line"># if-else if else</span><br><span class="line"><span class="keyword">if</span> (age&lt;<span class="number">18</span>)&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"培养一下"</span>)</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(age&lt;<span class="number">24</span>)&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'小姐姐你好 我是你的粉丝'</span>)</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'你是个好人'</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string">在js中代码是没有缩进的 只不过我们处于python书写习惯人为的加上了而已</span></span><br><span class="line"><span class="string">()条件</span></span><br><span class="line"><span class="string">&#123;&#125;代码块</span></span><br><span class="line"><span class="string">"</span><span class="string">""</span></span><br><span class="line"></span><br><span class="line"># switch语法</span><br><span class="line"><span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string">提前列举好可能出现的条件和解决方式</span></span><br><span class="line"><span class="string">"</span><span class="string">""</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">switch</span>(num)&#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">  	<span class="built_in">console</span>.log(<span class="string">'喝酒'</span>);</span><br><span class="line">  	break;  # 不加break 匹配到一个之后 就一直往下执行</span><br><span class="line">  <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">  	<span class="built_in">console</span>.log(<span class="string">'唱歌'</span>);</span><br><span class="line">  	<span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">  	<span class="built_in">console</span>.log(<span class="string">'洗脚'</span>);</span><br><span class="line">  	<span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">  	<span class="built_in">console</span>.log(<span class="string">'按摩'</span>);</span><br><span class="line">  	<span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">  	<span class="built_in">console</span>.log(<span class="string">'营养快线'</span>);</span><br><span class="line">  	<span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">  	<span class="built_in">console</span>.log(<span class="string">'老板慢走 欢迎下次光临'</span>);</span><br><span class="line">  	<span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">default</span>:</span><br><span class="line">  	<span class="built_in">console</span>.log(<span class="string">'条件都没有匹配上 默认走的流程'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># for循环</span><br><span class="line"># 打印0-9数字</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(i)</span><br><span class="line">&#125;</span><br><span class="line"># 题目1  循环打印出数组里面的每一个元素</span><br><span class="line"><span class="keyword">var</span> l1 = [<span class="number">111</span>,<span class="number">222</span>,<span class="number">333</span>,<span class="number">444</span>,<span class="number">555</span>,<span class="number">666</span>]</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;l1.length;i++)&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(l1[i])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># while循环</span><br><span class="line"><span class="keyword">var</span> i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span>(i&lt;<span class="number">100</span>)&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(i)</span><br><span class="line">  i++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 三元运算符</span><br><span class="line"># python中三元运算符 res = 1 if 1&gt;2 else 3</span><br><span class="line"># JS中三元运算  res = 1&gt;2?1:3 </span><br><span class="line">条件成立取问好后面的<span class="number">1</span> 不成立取冒号后面的<span class="number">3</span></span><br><span class="line">var res = 2&gt;5?8:10 # 10</span><br><span class="line">var res = 2&gt;5?8:(8&gt;5?666:444)  # 666</span><br><span class="line"><span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string">三元运算符不要写的过于复杂 </span></span><br><span class="line"><span class="string">"</span><span class="string">""</span></span><br></pre></td></tr></table></figure>

<h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"># 在python定义函数需要用到关键字def</span><br><span class="line"># 在js中定义函数需要用到关键字function</span><br><span class="line"></span><br><span class="line"># 格式</span><br><span class="line"><span class="function"><span class="keyword">function</span> 函数名(<span class="params">形参<span class="number">1</span>,形参<span class="number">2</span>,形参<span class="number">3.</span>..</span>)</span>&#123;函数体代码&#125;</span><br><span class="line"></span><br><span class="line"># 无参函数</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'hello world'</span>)</span><br><span class="line">&#125;</span><br><span class="line">func1()  # 调用 加括调用 跟python是一样的</span><br><span class="line"></span><br><span class="line"># 有参函数</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func2</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(a,b)</span><br><span class="line">&#125;</span><br><span class="line">func2(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">func2(1,2,3,4,5,6,7,8,9)  # 多了没关系 只要对应的数据</span><br><span class="line">VM3610:<span class="number">2</span> <span class="number">1</span> <span class="number">2</span></span><br><span class="line"><span class="literal">undefined</span></span><br><span class="line"></span><br><span class="line">func2(1)  # 少了也没关系</span><br><span class="line">VM3610:<span class="number">2</span> <span class="number">1</span> <span class="literal">undefined</span></span><br><span class="line">  </span><br><span class="line"># 关键字arguments</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func2</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">  console.log(arguments)  # 能够获取到函数接受到的所有的参数</span><br><span class="line">  <span class="built_in">console</span>.log(a,b)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func2</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="built_in">arguments</span>.length&lt;<span class="number">2</span>)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'传少了'</span>)</span><br><span class="line">  &#125;<span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">arguments</span>.length&gt;<span class="number">2</span>)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'传多了'</span>)</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'正常执行'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 函数的返回值  使用的也是关键字return</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">index</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">666</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">index</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">666</span>,<span class="number">777</span>,<span class="number">888</span>,<span class="number">999</span></span><br><span class="line">&#125;</span><br><span class="line">res = index();</span><br><span class="line"><span class="number">999</span></span><br><span class="line">res</span><br><span class="line">999  # 只能拿到最后一个</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">index</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> [<span class="number">666</span>,<span class="number">777</span>,<span class="number">888</span>,<span class="number">999</span>]</span><br><span class="line">&#125;</span><br><span class="line"># js不支持解压赋值</span><br><span class="line"></span><br><span class="line"># 匿名函数  就是没有名字</span><br><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'哈哈哈'</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> res = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'哈哈哈'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 箭头函数(要了解一下)  主要用来处理简单的业务逻辑 类似于python中的匿名函数</span><br><span class="line"><span class="keyword">var</span> func1 = <span class="function"><span class="params">v</span> =&gt;</span> v;  <span class="string">""</span><span class="string">"箭头左边的是形参 右边的是返回值"</span><span class="string">""</span></span><br><span class="line">等价于</span><br><span class="line"><span class="keyword">var</span> func1 = <span class="function"><span class="keyword">function</span>(<span class="params">v</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> v</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> func2 = <span class="function">(<span class="params">arg1,arg2</span>) =&gt;</span> arg1+arg2</span><br><span class="line">等价于</span><br><span class="line"><span class="keyword">var</span> func1 = <span class="function"><span class="keyword">function</span>(<span class="params">arg1,arg2</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> arg1+arg2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="函数的全局变量与局部变量"><a href="#函数的全局变量与局部变量" class="headerlink" title="函数的全局变量与局部变量"></a>函数的全局变量与局部变量</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"># 跟python查找变量的顺序一致</span><br><span class="line"><span class="keyword">var</span> city = <span class="string">"BeiJing"</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> city = <span class="string">"ShangHai"</span>;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">inner</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> city = <span class="string">"ShenZhen"</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(city);</span><br><span class="line">  &#125;</span><br><span class="line">  inner();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f();  <span class="comment">//输出结果是？</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> city = <span class="string">"BeiJing"</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(city);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> city = <span class="string">"ShangHai"</span>;</span><br><span class="line">  <span class="keyword">return</span> Bar;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> ret = f();</span><br><span class="line">ret();  <span class="comment">// 打印结果是？</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> city = <span class="string">"BeiJing"</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> city = <span class="string">"ShangHai"</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">inner</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(city);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> inner;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> ret = f();</span><br><span class="line">ret();</span><br></pre></td></tr></table></figure>

<h3 id="词法分析（直接忽略）"><a href="#词法分析（直接忽略）" class="headerlink" title="词法分析（直接忽略）"></a>词法分析（直接忽略）</h3><h3 id="自定义对象"><a href="#自定义对象" class="headerlink" title="自定义对象"></a>自定义对象</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"># 你可以看成是我们python中的字典 但是js中的自定义对象要比python里面的字典操作起来更加的方便</span><br><span class="line"></span><br><span class="line"># 创建自定义对象 &#123;&#125;</span><br><span class="line"><span class="string">""</span><span class="string">"第一种创建自定义对象的方式"</span><span class="string">""</span></span><br><span class="line"><span class="keyword">var</span> d1 = &#123;<span class="string">'name'</span>:<span class="string">'jason'</span>,<span class="string">'age'</span>:<span class="number">18</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> d = &#123;<span class="string">'name'</span>:<span class="string">'jason'</span>,<span class="string">'age'</span>:<span class="number">18</span>&#125;</span><br><span class="line"><span class="keyword">typeof</span> d</span><br><span class="line"><span class="string">"object"</span></span><br><span class="line"></span><br><span class="line">d[<span class="string">'name'</span>]</span><br><span class="line"><span class="string">"jason"</span></span><br><span class="line">d.name  # 比python从字典获取值更加的方便</span><br><span class="line"><span class="string">"jason"</span></span><br><span class="line">d.age</span><br><span class="line"><span class="number">18</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i <span class="keyword">in</span> d)&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(i,d[i])</span><br><span class="line">&#125;  # 支持for循环 暴露给外界可以直接获取的也是键</span><br><span class="line"></span><br><span class="line"><span class="string">""</span><span class="string">"第二种创建自定义对象的方式  需要使用关键字 new"</span><span class="string">""</span></span><br><span class="line">var d2 = new Object()  # &#123;&#125;</span><br><span class="line"></span><br><span class="line">d2.name = <span class="string">'jason'</span></span><br><span class="line">&#123;<span class="attr">name</span>: <span class="string">"jason"</span>&#125;</span><br><span class="line"></span><br><span class="line">d2[<span class="string">'age'</span>] = <span class="number">18</span></span><br><span class="line">&#123;<span class="attr">name</span>: <span class="string">"jason"</span>, <span class="attr">age</span>: <span class="number">18</span>&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Date对象"><a href="#Date对象" class="headerlink" title="Date对象"></a>Date对象</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> d3 = <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">Fri May <span class="number">15</span> <span class="number">2020</span> <span class="number">14</span>:<span class="number">41</span>:<span class="number">06</span> GMT+<span class="number">0800</span> (中国标准时间)</span><br><span class="line">   </span><br><span class="line">d3.toLocaleString()</span><br><span class="line"><span class="string">"2020/5/15 下午2:41:06"</span></span><br><span class="line"></span><br><span class="line"># 也支持自己手动输入时间</span><br><span class="line"><span class="keyword">let</span> d4 = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">'2200/11/11 11:11:11'</span>)</span><br><span class="line">d4.toLocaleString()</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> d5 = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">1111</span>,<span class="number">11</span>,<span class="number">11</span>,<span class="number">11</span>,<span class="number">11</span>,<span class="number">11</span>)</span><br><span class="line">d5.toLocaleString()  # 月份从0开始0-11月</span><br><span class="line"><span class="string">"1111/12/11 上午11:11:11"</span></span><br><span class="line"></span><br><span class="line"># 时间对象具体方法</span><br><span class="line"><span class="keyword">let</span> d6 = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">d6.getDate()  获取日</span><br><span class="line">d6.getDay()		获取星期</span><br><span class="line">d6.getMonth()		获取月份(<span class="number">0</span><span class="number">-11</span>)</span><br><span class="line">d6.getFullYear()		获取完整的年份</span><br><span class="line">d6.getHours()			获取小时</span><br><span class="line">d6.getMinutes()		获取分钟</span><br><span class="line">d6.getSeconds()		获取秒</span><br><span class="line">d6.getMilliseconds()  获取毫秒</span><br><span class="line">d6.getTime()					时间戳</span><br></pre></td></tr></table></figure>

<h3 id="JSON对象"><a href="#JSON对象" class="headerlink" title="JSON对象"></a>JSON对象</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string">在python中序列化反序列化</span></span><br><span class="line"><span class="string">	dumps 		序列化</span></span><br><span class="line"><span class="string">	loads			反序列化</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">在js中也有序列化反序列化</span></span><br><span class="line"><span class="string">	JSON.stringify()								dumps</span></span><br><span class="line"><span class="string">	JSON.parse()										loads			</span></span><br><span class="line"><span class="string">"</span><span class="string">""</span></span><br><span class="line">let d7 = &#123;'name':'jason','age':18&#125;</span><br><span class="line">let res666 = JSON.stringify(d7)</span><br><span class="line">"&#123;"name":"jason","age":18&#125;"</span><br><span class="line"></span><br><span class="line">JSON.parse(res666)</span><br><span class="line">&#123;name: "jason", age: 18&#125;</span><br></pre></td></tr></table></figure>

<h3 id="RegExp对象"><a href="#RegExp对象" class="headerlink" title="RegExp对象"></a>RegExp对象</h3><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string">在python中如果需要使用正则 需要借助于re模块</span></span><br><span class="line"><span class="string">在js中需要你创建正则对象</span></span><br><span class="line"><span class="string">"</span><span class="string">""</span></span><br><span class="line"># 第一种 有点麻烦</span><br><span class="line">let reg1 = new RegExp('^[a-zA-Z][a-zA-Z0-9]&#123;5,11&#125;')</span><br><span class="line"># 第二种 个人推荐</span><br><span class="line">let reg2 = /^[a-zA-Z][a-zA-Z0-9]&#123;5,11&#125;/</span><br><span class="line"></span><br><span class="line"># 匹配内容</span><br><span class="line">reg1.test('egondsb')</span><br><span class="line">reg2.test('egondsb')</span><br><span class="line"></span><br><span class="line"># 题目 获取字符串里面所有的字母s</span><br><span class="line">let sss = 'egondsb dsb dsb'</span><br><span class="line">sss.match(/s/)  # 拿到一个就停止了</span><br><span class="line">sss.match(/s/g)	# 全局匹配  g就表示全局模式</span><br><span class="line"></span><br><span class="line">sss.match(/s/)</span><br><span class="line">[<span class="string">"s"</span>, index: <span class="number">5</span>, input: <span class="string">"egondsb dsb dsb"</span>, groups: undefined]</span><br><span class="line">sss.match(/s/g)</span><br><span class="line">(3) ["s", "s", "s"]</span><br><span class="line"></span><br><span class="line"># 全局匹配模式吐槽点</span><br><span class="line">let reg3 = /^[a-zA-Z][a-zA-Z0-9]&#123;5,11&#125;/g</span><br><span class="line">reg2.test('egondsb')</span><br><span class="line"></span><br><span class="line">reg3.test('egondsb')  # 全局模式有一个lastIndex属性</span><br><span class="line">true</span><br><span class="line">reg3.test('egondsb')</span><br><span class="line">false</span><br><span class="line">reg3.test('egondsb')</span><br><span class="line">true</span><br><span class="line">reg3.test('egondsb')</span><br><span class="line">false</span><br><span class="line"></span><br><span class="line">reg3.lastIndex</span><br><span class="line"><span class="number">0</span></span><br><span class="line">reg3.test('egondsb')</span><br><span class="line">true</span><br><span class="line">reg3.lastIndex</span><br><span class="line"><span class="number">7</span></span><br><span class="line"></span><br><span class="line"># 吐槽点二 </span><br><span class="line">let reg4 = /^[a-zA-Z][a-zA-Z0-9]&#123;5,11&#125;/</span><br><span class="line">reg4.test()</span><br><span class="line"></span><br><span class="line">reg4.test()  # 什么都不传 默认传的是undefined</span><br><span class="line">true</span><br><span class="line">reg4.test()</span><br><span class="line">true</span><br><span class="line"></span><br><span class="line">reg4.test(undefined)</span><br><span class="line">true</span><br><span class="line">let reg5 = /undefined/</span><br><span class="line">undefined</span><br><span class="line">reg5.test('jason')</span><br><span class="line">false</span><br><span class="line">reg5.test()</span><br><span class="line">true</span><br><span class="line"></span><br><span class="line"><span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string">总结 你在用js书写正则的时候一定要注意上述问题</span></span><br><span class="line"><span class="string">一般情况下你后续也不会接触到了</span></span><br><span class="line"><span class="string">"</span><span class="string">""</span></span><br></pre></td></tr></table></figure>

<h3 id="Math对象-有兴趣就看一下"><a href="#Math对象-有兴趣就看一下" class="headerlink" title="Math对象(有兴趣就看一下)"></a>Math对象(有兴趣就看一下)</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">abs(x)      返回数的绝对值。</span><br><span class="line">exp(x)      返回 e 的指数。</span><br><span class="line">floor(x)    对数进行下舍入。</span><br><span class="line">log(x)      返回数的自然对数（底为e）。</span><br><span class="line">max(x,y)    返回 x 和 y 中的最高值。</span><br><span class="line">min(x,y)    返回 x 和 y 中的最低值。</span><br><span class="line">pow(x,y)    返回 x 的 y 次幂。</span><br><span class="line">random()    返回 0 ~ 1 之间的随机数。</span><br><span class="line">round(x)    把数四舍五入为最接近的整数。</span><br><span class="line">sin(x)      返回数的正弦。</span><br><span class="line">sqrt(x)     返回数的平方根。</span><br><span class="line">tan(x)      返回角的正切。</span><br></pre></td></tr></table></figure>

<h3 id="BOM与DOM操作"><a href="#BOM与DOM操作" class="headerlink" title="BOM与DOM操作"></a>BOM与DOM操作</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 截至目前为止 我们虽然已经学会了js语法 但是你会发现跟浏览器和html文件还是一点关系没有</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">BOM</span></span><br><span class="line"><span class="string">	浏览器对象模型  Browser Object Model</span></span><br><span class="line"><span class="string">		js代码操作浏览器</span></span><br><span class="line"><span class="string">DOM</span></span><br><span class="line"><span class="string">	文档对象模型	  Document Object Model</span></span><br><span class="line"><span class="string">		js代码操作标签</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<h3 id="BOM操作"><a href="#BOM操作" class="headerlink" title="BOM操作"></a>BOM操作</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"># window对象</span><br><span class="line"><span class="built_in">window</span>对象指代的就是浏览器窗口</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.innerHeight  浏览器窗口的高度</span><br><span class="line"><span class="number">900</span></span><br><span class="line"><span class="built_in">window</span>.innerWidth   浏览器窗口的宽度</span><br><span class="line"><span class="number">1680</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.open(<span class="string">'https://www.mzitu.com/'</span>,<span class="string">''</span>,<span class="string">'height=400px,width=400px,top=400px,left=400px'</span>)</span><br><span class="line"># 新建窗口打开页面 第二个参数写空即可 第三个参数写新建的窗口的大小和位置</span><br><span class="line"># 扩展父子页面通信window.opener()  了解</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.close()  关闭当前页面</span><br></pre></td></tr></table></figure>

<h3 id="window子对象"><a href="#window子对象" class="headerlink" title="window子对象"></a>window子对象</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.navigator.appName</span><br><span class="line"><span class="string">"Netscape"</span></span><br><span class="line"><span class="built_in">window</span>.navigator.appVersion</span><br><span class="line"><span class="string">"5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36"</span></span><br><span class="line"></span><br><span class="line">window.navigator.userAgent		掌握  # 用来表示当前是否是一个浏览器</span><br><span class="line"><span class="string">"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36"</span></span><br><span class="line"></span><br><span class="line"><span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string">扩展:仿爬措施</span></span><br><span class="line"><span class="string">	1.最简单最常用的一个就是校验当前请求的发起者是否是一个浏览器</span></span><br><span class="line"><span class="string">		userAgent</span></span><br><span class="line"><span class="string">		user-agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36</span></span><br><span class="line"><span class="string">	如何破解该措施</span></span><br><span class="line"><span class="string">		在你的代码中加上上面的user-agent配置即可</span></span><br><span class="line"><span class="string">"</span><span class="string">""</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.navigator.platform</span><br><span class="line"><span class="string">"MacIntel"</span></span><br><span class="line"></span><br><span class="line"># 如果是window的子对象 那么window可以省略不写</span><br></pre></td></tr></table></figure>

<h3 id="history对象"><a href="#history对象" class="headerlink" title="history对象"></a>history对象</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.history.back()  回退到上一页</span><br><span class="line"><span class="built_in">window</span>.history.forward()  前进到下一页</span><br><span class="line"># 对应的就是你浏览器左上方的两个的箭头</span><br></pre></td></tr></table></figure>

<h3 id="location对象-掌握"><a href="#location对象-掌握" class="headerlink" title="location对象(掌握)"></a>location对象(掌握)</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">window.location.href	# 获取当前页面的url</span><br><span class="line">window.location.href = url  # 跳转到指定的url</span><br><span class="line">window.location.reload()  # 属性页面   浏览器左上方的小圆圈</span><br></pre></td></tr></table></figure>

<h3 id="弹出框"><a href="#弹出框" class="headerlink" title="弹出框"></a>弹出框</h3><ul>
<li>警告框</li>
<li>确认框</li>
<li>提示框</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">alert(<span class="string">'你不要过来啊！！！'</span>)</span><br><span class="line"><span class="literal">undefined</span></span><br><span class="line"></span><br><span class="line">confirm(<span class="string">'你确定真的要这么做吗?能不能有其他方式能够满足你...'</span>)</span><br><span class="line"><span class="literal">false</span></span><br><span class="line">confirm(<span class="string">'你确定真的要这么做吗?能不能有其他方式能够满足你...'</span>)</span><br><span class="line"><span class="literal">true</span></span><br><span class="line"></span><br><span class="line">prompt(<span class="string">'手牌号给我看一下'</span>,<span class="string">'22号消费888'</span>)</span><br><span class="line"><span class="string">"来宾三位"</span></span><br></pre></td></tr></table></figure>

<h3 id="计时器相关"><a href="#计时器相关" class="headerlink" title="计时器相关"></a>计时器相关</h3><ul>
<li>过一段时间之后触发(一次)</li>
<li>每隔一段时间触发一次(循环)</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">func1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        alert(<span class="number">123</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> t = setTimeout(func1,<span class="number">3000</span>);  <span class="comment">// 毫秒为单位 3秒之后自动执行func1函数</span></span><br><span class="line"></span><br><span class="line">    clearTimeout(t)      <span class="comment">// 取消定时任务  如果你想要清除定时任务 需要日前用变量指代定时任务</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">func2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        alert(<span class="number">123</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> t = setInterval(func2,<span class="number">3000</span>);  <span class="comment">// 每隔3秒执行一次</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">inner</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            clearInterval(t)  <span class="comment">// 清除定时器</span></span><br><span class="line">        &#125;</span><br><span class="line">        setTimeout(inner,<span class="number">9000</span>)  <span class="comment">// 9秒中之后触发</span></span><br><span class="line">    &#125;</span><br><span class="line">    show()</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="DOM操作"><a href="#DOM操作" class="headerlink" title="DOM操作"></a>DOM操作</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;&quot;&quot;</span><br><span class="line">DOM树的概念</span><br><span class="line"></span><br><span class="line">所有的标签都可以称之为是节点</span><br><span class="line"></span><br><span class="line">JavaScript 可以通过DOM创建动态的 HTML：</span><br><span class="line"></span><br><span class="line">JavaScript 能够改变页面中的所有 HTML 元素</span><br><span class="line">JavaScript 能够改变页面中的所有 HTML 属性</span><br><span class="line">JavaScript 能够改变页面中的所有 CSS 样式</span><br><span class="line">JavaScript 能够对页面中的所有事件做出反应</span><br><span class="line"></span><br><span class="line">DOM操作操作的是标签 而一个html页面上的标签有很多 </span><br><span class="line">	1.先学如何查找标签</span><br><span class="line">	2.再学DOM操作标签</span><br><span class="line">	</span><br><span class="line">DOM操作需要用关键字document起手</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>

<h3 id="查找标签"><a href="#查找标签" class="headerlink" title="查找标签"></a>查找标签</h3><ul>
<li><p>直接查找(必须要掌握)</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string">id查找</span></span><br><span class="line"><span class="string">类查找</span></span><br><span class="line"><span class="string">标签查找</span></span><br><span class="line"><span class="string">"</span><span class="string">""</span></span><br><span class="line"># 注意三个方法的返回值是不一样的</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'d1'</span>)</span><br><span class="line">&lt;div id=​<span class="string">"d1"</span>&gt;​…​&lt;<span class="regexp">/div&gt;​</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">document.getElementsByClassName('c1')</span></span><br><span class="line"><span class="regexp">HTMLCollection [p.c1]0: p.c1length: 1__proto__: HTMLCollection</span></span><br><span class="line"><span class="regexp">      </span></span><br><span class="line"><span class="regexp">document.getElementsByTagName('div')</span></span><br><span class="line"><span class="regexp">HTMLCollection(3) [div#d1, div, div, d1: div#d1]</span></span><br><span class="line"><span class="regexp">                   </span></span><br><span class="line"><span class="regexp">                   </span></span><br><span class="line"><span class="regexp">let divEle = document.getElementsByTagName('div')[1]</span></span><br><span class="line"><span class="regexp">divEle</span></span><br><span class="line"><span class="regexp">&lt;div&gt;​div&gt;div​&lt;/</span>div&gt;​</span><br><span class="line"><span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string">当你用变量名指代标签对象的时候 一般情况下都推荐你书写成</span></span><br><span class="line"><span class="string">xxxEle</span></span><br><span class="line"><span class="string">	divEle</span></span><br><span class="line"><span class="string">	aEle</span></span><br><span class="line"><span class="string">	pEle</span></span><br><span class="line"><span class="string">"</span><span class="string">""</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>间接查找(熟悉)</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">let pEle = document.getElementsByClassName('c1')[0]  # 注意是否需要索引取值</span><br><span class="line"></span><br><span class="line">pEle.parentElement  # 拿父节点</span><br><span class="line">&lt;div id=​<span class="string">"d1"</span>&gt;​<span class="string">"div</span></span><br><span class="line"><span class="string">    "</span>&lt;div&gt;​div&gt;div​&lt;<span class="regexp">/div&gt;​&lt;p class=​"c1"&gt;​…​&lt;/</span>p&gt;​&lt;p&gt;​div&gt;p​&lt;<span class="regexp">/p&gt;​&lt;/</span>div&gt;​</span><br><span class="line">pEle.parentElement.parentElement</span><br><span class="line">&lt;body&gt;​…​&lt;<span class="regexp">/body&gt;​</span></span><br><span class="line"><span class="regexp">pEle.parentElement.parentElement.parentElement</span></span><br><span class="line"><span class="regexp">&lt;html lang=​"en"&gt;​&lt;head&gt;​…​&lt;/</span>head&gt;​&lt;body&gt;​…​&lt;<span class="regexp">/body&gt;​&lt;/</span>html&gt;​</span><br><span class="line">pEle.parentElement.parentElement.parentElement.parentElement</span><br><span class="line"><span class="literal">null</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> divEle = <span class="built_in">document</span>.getElementById(<span class="string">'d1'</span>)</span><br><span class="line">divEle.children  # 获取所有的子标签</span><br><span class="line">divEle.children[<span class="number">0</span>]</span><br><span class="line">&lt;div&gt;​div&gt;div​&lt;<span class="regexp">/div&gt;​</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">divEle.firstElementChild</span></span><br><span class="line"><span class="regexp">&lt;div&gt;​div&gt;div​&lt;/</span>div&gt;​</span><br><span class="line"></span><br><span class="line">divEle.lastElementChild</span><br><span class="line">&lt;p&gt;​div&gt;p​&lt;<span class="regexp">/p&gt;​</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">divEle.nextElementSibling  # 同级别下面第一个</span></span><br><span class="line"><span class="regexp">&lt;div&gt;​div下面div​&lt;/</span>div&gt;​</span><br><span class="line"></span><br><span class="line">divEle.previousElementSibling  # 同级别上面第一个</span><br><span class="line">&lt;div&gt;​div上面的div​&lt;<span class="regexp">/div&gt;​</span></span><br></pre></td></tr></table></figure>

<h3 id="节点操作"><a href="#节点操作" class="headerlink" title="节点操作"></a>节点操作</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string">通过DOM操作动态的创建img标签</span></span><br><span class="line"><span class="string">并且给标签加属性</span></span><br><span class="line"><span class="string">最后将标签添加到文本中</span></span><br><span class="line"><span class="string">"</span><span class="string">""</span></span><br><span class="line">let imgEle = document.createElement('img')  # 创建标签</span><br><span class="line"></span><br><span class="line">imgEle.src = '111.png'  # 给标签设置默认的属性</span><br><span class="line"><span class="string">"111.png"</span></span><br><span class="line">imgEle</span><br><span class="line"></span><br><span class="line">imgEle.username = 'jason'  # 自定义的属性没办法点的方式直接设置</span><br><span class="line"><span class="string">"jason"</span></span><br><span class="line">imgEle</span><br><span class="line">&lt;img src=​<span class="string">"111.png"</span>&gt;​</span><br><span class="line"></span><br><span class="line">imgEle.setAttribute('username','jason')   # 既可以设置自定义的属性也可以设置默认的书写</span><br><span class="line"><span class="literal">undefined</span></span><br><span class="line">imgEle</span><br><span class="line">&lt;img src=​<span class="string">"111.png"</span> username=​<span class="string">"jason"</span>&gt;​</span><br><span class="line">imgEle.setAttribute(<span class="string">'title'</span>,<span class="string">'一张图片'</span>)</span><br><span class="line">imgEle</span><br><span class="line">&lt;img src=​<span class="string">"111.png"</span> username=​<span class="string">"jason"</span> title=​<span class="string">"一张图片"</span>&gt;​</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> divEle = <span class="built_in">document</span>.getElementById(<span class="string">'d1'</span>)</span><br><span class="line"><span class="literal">undefined</span></span><br><span class="line">divEle.appendChild(imgEle)  # 标签内部添加元素(尾部追加)</span><br><span class="line">&lt;img src=​<span class="string">"111.png"</span> username=​<span class="string">"jason"</span> title=​<span class="string">"一张图片"</span>&gt;​</span><br><span class="line"></span><br><span class="line"><span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string">创建a标签</span></span><br><span class="line"><span class="string">设置属性</span></span><br><span class="line"><span class="string">设置文本</span></span><br><span class="line"><span class="string">添加到标签内部</span></span><br><span class="line"><span class="string">	添加到指定的标签的上面</span></span><br><span class="line"><span class="string">"</span><span class="string">""</span></span><br><span class="line"><span class="keyword">let</span> aEle = <span class="built_in">document</span>.createElement(<span class="string">'a'</span>)</span><br><span class="line"></span><br><span class="line">aEle</span><br><span class="line">&lt;a&gt;​&lt;<span class="regexp">/a&gt;​</span></span><br><span class="line"><span class="regexp">aEle.href = 'https:/</span><span class="regexp">/www.mzitu.com/</span><span class="string">'</span></span><br><span class="line"><span class="string">"https://www.mzitu.com/"</span></span><br><span class="line"><span class="string">aEle</span></span><br><span class="line"><span class="string">&lt;a href=​"https:​/​/​www.mzitu.com/​"&gt;​&lt;/a&gt;​</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">aEle.innerText = '</span>点我有你好看!<span class="string">'  # 给标签设置文本内容</span></span><br><span class="line"><span class="string">"点我有你好看!"</span></span><br><span class="line"><span class="string">aEle</span></span><br><span class="line"><span class="string">&lt;a href=​"https:​/​/​www.mzitu.com/​"&gt;​点我有你好看!​&lt;/a&gt;​</span></span><br><span class="line"><span class="string">let divEle = document.getElementById('</span>d1<span class="string">')</span></span><br><span class="line"><span class="string">undefined</span></span><br><span class="line"><span class="string">let pEle = document.getElementById('</span>d2<span class="string">')</span></span><br><span class="line"><span class="string">undefined</span></span><br><span class="line"><span class="string">divEle.insertBefore(aEle,pEle)  # 添加标签内容指定位置添加</span></span><br><span class="line"><span class="string">&lt;a href=​"https:​/​/​www.mzitu.com/​"&gt;​点我有你好看!​&lt;/a&gt;​</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">额外补充</span></span><br><span class="line"><span class="string">	appendChild()</span></span><br><span class="line"><span class="string">		removeChild()</span></span><br><span class="line"><span class="string">		replaceChild()</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">	setAttribute()  设置属性</span></span><br><span class="line"><span class="string">		getAttribute()  获取属性</span></span><br><span class="line"><span class="string">		removeAttribute()  移除属性</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># innerText与innerHTML</span></span><br><span class="line"><span class="string">divEle.innerText  # 获取标签内部所有的文本</span></span><br><span class="line"><span class="string">"div 点我有你好看!</span></span><br><span class="line"><span class="string">div&gt;p</span></span><br><span class="line"><span class="string">div&gt;span"</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">divEle.innerHTML  # 内部文本和标签都拿到</span></span><br><span class="line"><span class="string">"div</span></span><br><span class="line"><span class="string">        &lt;a href="https://www.mzitu.com/"&gt;点我有你好看!&lt;/a&gt;&lt;p id="d2"&gt;div&amp;gt;p&lt;/p&gt;</span></span><br><span class="line"><span class="string">        &lt;span&gt;div&amp;gt;span&lt;/span&gt;</span></span><br><span class="line"><span class="string">    "</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">divEle.innerText = '</span>heiheihei<span class="string">'</span></span><br><span class="line"><span class="string">"heiheihei"</span></span><br><span class="line"><span class="string">divEle.innerHTML = '</span>hahahaha<span class="string">'</span></span><br><span class="line"><span class="string">"hahahaha"</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">divEle.innerText = '</span>&lt;h1&gt;heiheihei&lt;<span class="regexp">/h1&gt;'  # 不识别html标签</span></span><br><span class="line"><span class="regexp">"&lt;h1&gt;heiheihei&lt;/</span>h1&gt;<span class="string">"</span></span><br><span class="line"><span class="string">divEle.innerHTML = '&lt;h1&gt;hahahaha&lt;/h1&gt;'  # 识别html标签</span></span><br><span class="line"><span class="string">"</span>&lt;h1&gt;hahahaha&lt;<span class="regexp">/h1&gt;"</span></span><br></pre></td></tr></table></figure>

<h3 id="获取值操作"><a href="#获取值操作" class="headerlink" title="获取值操作"></a>获取值操作</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"># 获取用户数据标签内部的数据</span><br><span class="line"><span class="keyword">let</span> seEle = <span class="built_in">document</span>.getElementById(<span class="string">'d2'</span>)</span><br><span class="line">seEle.value</span><br><span class="line"><span class="string">"111"</span></span><br><span class="line">seEle.value</span><br><span class="line"><span class="string">"333"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> inputEle = <span class="built_in">document</span>.getElementById(<span class="string">'d1'</span>)</span><br><span class="line">inputEle.value</span><br><span class="line"></span><br><span class="line"># 如何获取用户上传的文件数据</span><br><span class="line"><span class="keyword">let</span> fileEle = <span class="built_in">document</span>.getElementById(<span class="string">'d3'</span>)</span><br><span class="line">fileEle.value  # 无法获取到文件数据</span><br><span class="line"><span class="string">"C:\fakepath\02_测试路由.png"</span></span><br><span class="line"></span><br><span class="line">fileEle.files</span><br><span class="line">FileList &#123;<span class="number">0</span>: File, <span class="attr">length</span>: <span class="number">1</span>&#125;<span class="number">0</span>: File &#123;<span class="attr">name</span>: <span class="string">"02_测试路由.png"</span>, <span class="attr">lastModified</span>: <span class="number">1557043082000</span>, <span class="attr">lastModifiedDate</span>: Sun May <span class="number">05</span> <span class="number">2019</span> <span class="number">15</span>:<span class="number">58</span>:<span class="number">02</span> GMT+<span class="number">0800</span> (中国标准时间), <span class="attr">webkitRelativePath</span>: <span class="string">""</span>, <span class="attr">size</span>: <span class="number">29580</span>, …&#125;length: <span class="number">1</span>__proto__: FileList</span><br><span class="line">      </span><br><span class="line">fileEle.files[0]  # 获取文件数据</span><br><span class="line">File &#123;<span class="attr">name</span>: <span class="string">"02_测试路由.png"</span>, <span class="attr">lastModified</span>: <span class="number">1557043082000</span>, <span class="attr">lastModifiedDate</span>: Sun May <span class="number">05</span> <span class="number">2019</span> <span class="number">15</span>:<span class="number">58</span>:<span class="number">02</span> GMT+<span class="number">0800</span> (中国标准时间), <span class="attr">webkitRelativePath</span>: <span class="string">""</span>, <span class="attr">size</span>: <span class="number">29580</span>, …&#125;</span><br></pre></td></tr></table></figure>

<h3 id="class、css操作"><a href="#class、css操作" class="headerlink" title="class、css操作"></a>class、css操作</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> divEle = <span class="built_in">document</span>.getElementById(<span class="string">'d1'</span>)</span><br><span class="line"><span class="literal">undefined</span></span><br><span class="line">divEle.classList  # 获取标签所有的类属性</span><br><span class="line">DOMTokenList(<span class="number">3</span>) [<span class="string">"c1"</span>, <span class="string">"bg_red"</span>, <span class="string">"bg_green"</span>, <span class="attr">value</span>: <span class="string">"c1 bg_red bg_green"</span>]</span><br><span class="line"></span><br><span class="line">divEle.classList.remove('bg_red')  # 移除某个类属性</span><br><span class="line"><span class="literal">undefined</span></span><br><span class="line"></span><br><span class="line">divEle.classList.add('bg_red')  # 添加类属性</span><br><span class="line"><span class="literal">undefined</span></span><br><span class="line">divEle.classList.contains('c1')  # 验证是否包含某个类属性</span><br><span class="line"><span class="literal">true</span></span><br><span class="line">divEle.classList.contains(<span class="string">'c2'</span>)</span><br><span class="line"><span class="literal">false</span></span><br><span class="line"></span><br><span class="line">divEle.classList.toggle('bg_red')  # 有则删除无则添加</span><br><span class="line"><span class="literal">false</span></span><br><span class="line">divEle.classList.toggle(<span class="string">'bg_red'</span>)</span><br><span class="line"><span class="literal">true</span></span><br><span class="line">divEle.classList.toggle(<span class="string">'bg_red'</span>)</span><br><span class="line"><span class="literal">false</span></span><br><span class="line">divEle.classList.toggle(<span class="string">'bg_red'</span>)</span><br><span class="line"><span class="literal">true</span></span><br><span class="line">divEle.classList.toggle(<span class="string">'bg_red'</span>)</span><br><span class="line"><span class="literal">false</span></span><br><span class="line">divEle.classList.toggle(<span class="string">'bg_red'</span>)</span><br><span class="line"><span class="literal">true</span></span><br><span class="line"></span><br><span class="line"># DOM操作操作标签样式 统一先用style起手</span><br><span class="line"><span class="keyword">let</span> pEle = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'p'</span>)[<span class="number">0</span>]</span><br><span class="line"><span class="literal">undefined</span></span><br><span class="line">pEle.style.color = <span class="string">'red'</span></span><br><span class="line"><span class="string">"red"</span></span><br><span class="line">pEle.style.fontSize = <span class="string">'28px'</span></span><br><span class="line"><span class="string">"28px"</span></span><br><span class="line">pEle.style.backgroundColor = <span class="string">'yellow'</span></span><br><span class="line"><span class="string">"yellow"</span></span><br><span class="line">pEle.style.border = <span class="string">'3px solid red'</span></span><br><span class="line"><span class="string">"3px solid red"</span></span><br></pre></td></tr></table></figure>

<h1 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h1><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string">达到某个事先设定的条件 自动触发的动作</span></span><br><span class="line"><span class="string">"</span><span class="string">""</span></span><br><span class="line"># 绑定事件的两种方式</span><br><span class="line">&lt;button onclick=<span class="string">"func1()"</span>&gt;点我&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">&lt;button id="d1"&gt;点我&lt;/</span>button&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// 第一种绑定事件的方式</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">func1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        alert(<span class="number">111</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 第二种</span></span><br><span class="line">    <span class="keyword">let</span> btnEle = <span class="built_in">document</span>.getElementById(<span class="string">'d1'</span>);</span><br><span class="line">    btnEle.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        alert(<span class="number">222</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">"""</span></span><br><span class="line"><span class="regexp">script标签既可以放在head内 也可以放在body内</span></span><br><span class="line"><span class="regexp">但是通常情况下都是放在body内的最底部</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp"># 等待浏览器窗口加载完毕之后再执行代码</span></span><br><span class="line"><span class="regexp">window.onload = function () &#123;</span></span><br><span class="line"><span class="regexp">            /</span><span class="regexp">/ 第一种绑定事件的方式</span></span><br><span class="line"><span class="regexp">            function func1() &#123;</span></span><br><span class="line"><span class="regexp">                alert(111)</span></span><br><span class="line"><span class="regexp">            &#125;</span></span><br><span class="line"><span class="regexp">            /</span><span class="regexp">/ 第二种</span></span><br><span class="line"><span class="regexp">            let btnEle = document.getElementById('d1');</span></span><br><span class="line"><span class="regexp">            btnEle.onclick = function () &#123;</span></span><br><span class="line"><span class="regexp">                alert(222)</span></span><br><span class="line"><span class="regexp">            &#125;</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">"""</span></span><br></pre></td></tr></table></figure>

<h3 id="原生js事件绑定"><a href="#原生js事件绑定" class="headerlink" title="原生js事件绑定"></a>原生js事件绑定</h3></li>
</ul>
<p>我们直接写几个案例，看懂即可</p>
<ul>
<li><p>开关灯案例</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">"d1"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"c1 bg_red bg_green"</span>&gt;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;button id="d2"&gt;变色&lt;/</span>button&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="keyword">let</span> btnEle = <span class="built_in">document</span>.getElementById(<span class="string">'d2'</span>)</span><br><span class="line">        <span class="keyword">let</span> divEle = <span class="built_in">document</span>.getElementById(<span class="string">'d1'</span>)</span><br><span class="line">        btnEle.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;  <span class="comment">// 绑定点击事件</span></span><br><span class="line">            <span class="comment">// 动态的修改div标签的类属性</span></span><br><span class="line">            divEle.classList.toggle(<span class="string">'bg_red'</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>input框获取焦点失去焦点案例</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;input type=<span class="string">"text"</span> value=<span class="string">"老板 去吗?"</span> id=<span class="string">"d1"</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">let</span> iEle = <span class="built_in">document</span>.getElementById(<span class="string">'d1'</span>)</span><br><span class="line">    <span class="comment">// 获取焦点事件</span></span><br><span class="line">    iEle.onfocus = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 将input框内部值去除</span></span><br><span class="line">        iEle.value = <span class="string">''</span></span><br><span class="line">        <span class="comment">//  点value就是获取   等号赋值就是设置</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 失去焦点事件</span></span><br><span class="line">    iEle.onblur = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 给input标签重写赋值</span></span><br><span class="line">        iEle.value = <span class="string">'没钱 不去!'</span></span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>实时展示当前时间</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;input type=<span class="string">"text"</span> id=<span class="string">"d1"</span> style=<span class="string">"display: block;height: 50px;width: 200px"</span>&gt;</span><br><span class="line">&lt;button id=<span class="string">"d2"</span>&gt;开始&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">&lt;button id="d3"&gt;结束&lt;/</span>button&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// 先定义一个全局存储定时器的变量</span></span><br><span class="line">    <span class="keyword">let</span> t = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">let</span> inputEle = <span class="built_in">document</span>.getElementById(<span class="string">'d1'</span>)</span><br><span class="line">    <span class="keyword">let</span> startBtnEle = <span class="built_in">document</span>.getElementById(<span class="string">'d2'</span>)</span><br><span class="line">    <span class="keyword">let</span> endBtnEle = <span class="built_in">document</span>.getElementById(<span class="string">'d3'</span>)</span><br><span class="line">    <span class="comment">// 1 访问页面之后 将访问的时间展示到input框中</span></span><br><span class="line">    <span class="comment">// 2 动态展示当前时间</span></span><br><span class="line">    <span class="comment">// 3 页面上加两个按钮 一个开始 一个结束</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">showTime</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> currentTime = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">        inputEle.value = currentTime.toLocaleString()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    startBtnEle.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 限制定时器只能开一个</span></span><br><span class="line">        <span class="keyword">if</span>(!t)&#123;</span><br><span class="line">            t = setInterval(showTime,<span class="number">1000</span>)  <span class="comment">// 每点击一次就会开设一个定时器 而t只指代最后一个</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    endBtnEle.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        clearInterval(t)</span><br><span class="line">        <span class="comment">// 还应该将t重置为空</span></span><br><span class="line">        t = <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>省市联动</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">    &lt;meta name="viewport" content="width=device-width, initial-scale=1"&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;select name=<span class="string">""</span> id=<span class="string">"d1"</span>&gt;</span><br><span class="line">    &lt;option value=<span class="string">""</span> selected disabled&gt;--请选择--&lt;<span class="regexp">/option&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>select&gt;</span><br><span class="line">&lt;select name=<span class="string">""</span> id=<span class="string">"d2"</span>&gt;&lt;<span class="regexp">/select&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">    let proEle = document.getElementById('d1')</span></span><br><span class="line"><span class="regexp">    let cityEle = document.getElementById('d2')</span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/ 先模拟省市数据</span></span><br><span class="line"><span class="regexp">    data = &#123;</span></span><br><span class="line"><span class="regexp">        "河北": ["廊坊", "邯郸",'唐山'],</span></span><br><span class="line"><span class="regexp">        "北京": ["朝阳区", "海淀区",'昌平区'],</span></span><br><span class="line"><span class="regexp">        "山东": ["威海市", "烟台市",'临沂市'],</span></span><br><span class="line"><span class="regexp">        '上海':['浦东新区','静安区','黄浦区'],</span></span><br><span class="line"><span class="regexp">        '深圳':['南山区','宝安区','福田区']</span></span><br><span class="line"><span class="regexp">    &#125;;</span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/ 选for循环获取省</span></span><br><span class="line"><span class="regexp">    for(let key in data)&#123;</span></span><br><span class="line"><span class="regexp">        /</span><span class="regexp">/ 将省信息做成一个个option标签 添加到第一个select框中</span></span><br><span class="line"><span class="regexp">        /</span><span class="regexp">/ 1 创建option标签</span></span><br><span class="line"><span class="regexp">        let opEle = document.createElement('option')</span></span><br><span class="line"><span class="regexp">        /</span><span class="regexp">/ 2 设置文本</span></span><br><span class="line"><span class="regexp">        opEle.innerText = key</span></span><br><span class="line"><span class="regexp">        /</span><span class="regexp">/ 3 设置value</span></span><br><span class="line"><span class="regexp">        opEle.value = key  /</span><span class="regexp">/ &lt;option value="省"&gt;省&lt;/</span>option&gt;</span><br><span class="line">        <span class="comment">// 4 将创建好的option标签添加到第一个select中</span></span><br><span class="line">        proEle.appendChild(opEle)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 文本域变化事件  change事件</span></span><br><span class="line">    proEle.onchange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 先获取到用户选择的省</span></span><br><span class="line">        <span class="keyword">let</span> currentPro = proEle.value</span><br><span class="line">        <span class="comment">// 获取对应的市信息</span></span><br><span class="line">        <span class="keyword">let</span> currentCityList = data[currentPro]</span><br><span class="line">        <span class="comment">// 清空市select中所有的option</span></span><br><span class="line">        cityEle.innerHTML = <span class="string">''</span></span><br><span class="line">        <span class="comment">// 自己加一个请选择</span></span><br><span class="line">        <span class="keyword">let</span> ss = <span class="string">"&lt;option disabled selected&gt;请选择&lt;/option&gt;"</span></span><br><span class="line">        <span class="comment">// let oppEle = document.createElement('option')</span></span><br><span class="line">        <span class="comment">// oppEle.innerText = '请选择'</span></span><br><span class="line">        <span class="comment">// oppEle.setAttribute('selected','selected')</span></span><br><span class="line">        cityEle.innerHTML = ss</span><br><span class="line"></span><br><span class="line">        <span class="comment">// for循环所有的市 渲染到第二个select中</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;currentCityList.length;i++)&#123;</span><br><span class="line">            <span class="keyword">let</span> currentCity = currentCityList[i]</span><br><span class="line">            <span class="comment">// 1 创建option标签</span></span><br><span class="line">            <span class="keyword">let</span> opEle = <span class="built_in">document</span>.createElement(<span class="string">'option'</span>)</span><br><span class="line">            <span class="comment">// 2 设置文本</span></span><br><span class="line">            opEle.innerText = currentCity</span><br><span class="line">            <span class="comment">// 3 设置value</span></span><br><span class="line">            opEle.value = currentCity  <span class="comment">// &lt;option value="省"&gt;省&lt;/option&gt;</span></span><br><span class="line">            <span class="comment">// 4 将创建好的option标签添加到第一个select中</span></span><br><span class="line">            cityEle.appendChild(opEle)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>前端开发</category>
      </categories>
      <tags>
        <tag>前端入门</tag>
      </tags>
  </entry>
  <entry>
    <title>[NoSQL的前世今生]</title>
    <url>/2020/03/08/NoSQL%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/</url>
    <content><![CDATA[<blockquote>
<p>成长手册，<strong>GitHub</strong> <a href="https://github.com/rogerXS80/roger" target="_blank" rel="noopener">Lupinus</a> ，N线互联网开发必备技能兵器谱</p>
</blockquote>
<h2 id="啥玩意："><a href="#啥玩意：" class="headerlink" title="啥玩意："></a>啥玩意：</h2><p>NoSQL(NoSQL = Not Only SQL )，“不仅仅是SQL”，泛指<strong>非关系型的数据库</strong>。随着互联网web2.0网站的兴起，传统的关系数据库在处理web2.0网站，特别是超大规模和高并发的SNS类型的web2.0纯动态网站已经显得力不从心，暴露了很多难以克服的问题，而非关系型的数据库则由于其本身的特点得到了非常迅速的发展。NoSQL数据库的产生就是为了解决大规模数据集合多重数据种类带来的挑战，尤其是大数据应用难题，包括超大规模数据的存储。（例如谷歌或Facebook每天为他们的用户收集万亿比特的数据）。这些类型的数据存储不需要固定的模式，无需多余操作就可以横向扩展。</p>
<h3 id="互联网时代背景下，数据库的发展以及为什么要用nosql"><a href="#互联网时代背景下，数据库的发展以及为什么要用nosql" class="headerlink" title="互联网时代背景下，数据库的发展以及为什么要用nosql"></a>互联网时代背景下，数据库的发展以及为什么要用nosql</h3><h4 id="1-单机MySQL的美好年代"><a href="#1-单机MySQL的美好年代" class="headerlink" title="1. 单机MySQL的美好年代"></a>1. 单机MySQL的美好年代</h4><p> 在以前，一个网站的访问量一般都不大，用单个数据库完全可以轻松应付。在那个时候，更多的都是静态网页，动态交互类型的网站不多。上述架构下，我们来看看数据存储的瓶颈是什么？</p>
<ul>
<li>数据量的总大小 一个机器放不下时</li>
<li>数据的索引（B+ Tree）一个机器的内存放不下时</li>
<li>访问量(读写混合)一个实例不能承受</li>
</ul>
<h4 id="2-Memcached-缓存-MySQL-垂直拆分"><a href="#2-Memcached-缓存-MySQL-垂直拆分" class="headerlink" title="2. Memcached(缓存)+MySQL+垂直拆分"></a>2. Memcached(缓存)+MySQL+垂直拆分</h4><p> 后来，随着访问量的上升，几乎大部分使用MySQL架构的网站在数据库上都开始出现了性能问题，web程序不再仅仅专注在功能上，同时也在追求性能。程序员们开始大量的使用<strong>缓存技术</strong>来缓解数据库的压力，优化数据库的结构和索引。开始比较流行的是通过<strong>文件缓存</strong>来缓解数据库压力，但是当访问量继续增大的时候，多台web机器通过文件缓存不能共享，大量的小文件缓存也带了了比较高的IO压力。在这个时候，Memcached就自然的成为一个非常时尚的技术产品。</p>
<p> Memcached作为一个<strong>独立的分布式的缓存服务器</strong>，为多个web服务器提供了一个共享的高性能缓存服务，在Memcached服务器上，又发展了根据hash算法来进行多台Memcached缓存服务的扩展，然后又出现了一致性hash来解决增加或减少缓存服务器导致重新hash带来的大量缓存失效的弊端</p>
<h4 id="3-Mysql主从读写分离"><a href="#3-Mysql主从读写分离" class="headerlink" title="3. Mysql主从读写分离"></a>3. Mysql主从读写分离</h4><p> 由于数据库的写入压力增加，Memcached只能缓解数据库的读取压力。读写集中在一个数据库上让数据库不堪重负，大部分网站开始<strong>使用主从复制技术来达到读写分离，以提高读写性能和读库的可扩展性</strong>。<strong>Mysql的master-slave模式</strong>成为这个时候的网站标配了。</p>
<h4 id="4-分表分库-水平拆分-mysql集群"><a href="#4-分表分库-水平拆分-mysql集群" class="headerlink" title="4. 分表分库+水平拆分+mysql集群"></a>4. 分表分库+水平拆分+mysql集群</h4><p> 在Memcached的高速缓存，MySQL的主从复制，读写分离的基础之上，这时MySQL主库的写压力开始出现瓶颈，而数据量的持续猛增，由于<strong>MyISAM</strong>使用<strong>表锁</strong>，在高并发下会出现严重的锁问题，大量的高并发MySQL应用开始使用<strong>InnoDB</strong>引擎代替MyISAM。</p>
<p> 同时，开始流行<strong>使用分表分库来缓解写压力和数据增长的扩展问题</strong>。这个时候，分表分库成了一个热门技术，是面试的热门问题也是业界讨论的热门技术问题。也就在这个时候，MySQL推出了还不太稳定的表分区，这也给技术实力一般的公司带来了希望。虽然MySQL推出了MySQL Cluster集群，但性能也不能很好满足互联网的要求，只是在高可靠性上提供了非常大的保证。</p>
<h4 id="5-MySQL的扩展性瓶颈"><a href="#5-MySQL的扩展性瓶颈" class="headerlink" title="5. MySQL的扩展性瓶颈"></a>5. MySQL的扩展性瓶颈</h4><p> MySQL数据库也经常存储一些大文本字段，导致数据库表非常的大，在做数据库恢复的时候就导致非常的慢，不容易快速恢复数据库。比如1000万4KB大小的文本就接近40GB的大小，如果能把这些数据从MySQL省去，MySQL将变得非常的小。关系数据库很强大，但是它并不能很好的应付所有的应用场景。MySQL的扩展性差（需要复杂的技术来实现），大数据下IO压力大，表结构更改困难，正是当前使用MySQL的开发人员面临的问题。</p>
<h4 id="6-为什么用NoSQL"><a href="#6-为什么用NoSQL" class="headerlink" title="6. 为什么用NoSQL"></a>6. 为什么用NoSQL</h4><p> 今天我们可以通过第三方平台（如：Google,Facebook等）可以很容易的<strong>访问和抓取数据</strong>（爬虫私密信息有风险哈）。用户的个人信息，社交网络，地理位置，用户生成的数据和用户操作日志已经成倍的增加。我们如果要对这些用户数据进行挖掘，那SQL数据库已经不适合这些应用了, NoSQL数据库的发展也不能很好的处理这些大的数据。</p>
<p><img src="https://gitee.com/wjxyzs/img/raw/master/img/16f118aa1160ab73.jpg" alt=""></p>
<h2 id="NoSql的优缺点"><a href="#NoSql的优缺点" class="headerlink" title="NoSql的优缺点"></a>NoSql的优缺点</h2><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ul>
<li><strong>易扩展</strong> ： NoSQL数据库种类繁多，但是一个共同的特点都是去掉关系数据库的关系型特性。数据之间无关系，这样就非常容易扩展。也无形之间，在架构的层面上带来了可扩展的能力。</li>
<li><strong>大数据量高性能</strong>：NoSQL数据库都具有非常高的读写性能，尤其在大数据量下，同样表现优秀。这得益于它的无关系性，数据库的结构简单。一般MySQL使用Query Cache，每次表的更新Cache就失效，是一种大粒度的Cache，在针对web2.0的交互频繁的应用，Cache性能不高。而NoSQL的Cache是记录级的，是一种细粒度的Cache，所以NoSQL在这个层面上来说就要性能高很多了</li>
<li><strong>多样灵活的数据模型</strong>：NoSQL无需事先为要存储的数据建立字段，随时可以存储自定义的数据格式。而在关系数据库里，增删字段是一件非常麻烦的事情。如果是非常大数据量的表，增加字段简直就是一个噩梦</li>
</ul>
<h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ul>
<li>没有标准化</li>
<li>有限的查询功能（到目前为止）</li>
<li>最终一致是不直观的程序</li>
</ul>
<h3 id="传统RDBMS-VS-NOSQL："><a href="#传统RDBMS-VS-NOSQL：" class="headerlink" title="传统RDBMS VS NOSQL："></a>传统<strong>RDBMS</strong> <em>VS</em> <strong>NOSQL</strong>：</h3><h4 id="RDBMS"><a href="#RDBMS" class="headerlink" title="RDBMS"></a>RDBMS</h4><ul>
<li>高度组织化结构化数据</li>
<li>结构化查询语言（SQL）</li>
<li>数据和关系都存储在单独的表中。</li>
<li>数据操纵语言，数据定义语言</li>
<li>严格的一致性</li>
<li>基础事务</li>
</ul>
<h4 id="NoSQL"><a href="#NoSQL" class="headerlink" title="NoSQL"></a>NoSQL</h4><ul>
<li>代表着不仅仅是SQL</li>
<li>没有声明性查询语言</li>
<li>没有预定义的模式</li>
<li>键 - 值对存储，列存储，文档存储，图形数据库</li>
<li>最终一致性，而非ACID属性</li>
<li>非结构化和不可预知的数据</li>
<li>CAP定理</li>
<li>高性能，高可用性和可伸缩性</li>
</ul>
<h4 id="3V-3高"><a href="#3V-3高" class="headerlink" title="3V+3高"></a><strong>3V+3高</strong></h4><ul>
<li>大数据时代的3V（海量Volume、多样Variety、实时Velocity）</li>
<li>互联网需求的3高（高并发、高可扩、高性能）</li>
</ul>
<h2 id="NoSQL数据模型简介"><a href="#NoSQL数据模型简介" class="headerlink" title="NoSQL数据模型简介"></a>NoSQL数据模型简介</h2><p><strong>聚合模型</strong></p>
<ul>
<li>KV键值</li>
<li>bson：BSON（）是一种类json的一种二进制形式的存储格式，简称Binary JSON，它和JSON一样，支持内嵌的文档对象和数组对象</li>
<li>列族：顾名思义，是按列存储数据的。最大的特点是方便存储结构化和半结构化数据，方便做数据压缩，对针对某一列或者某几列的查询有非常大的IO优势。</li>
<li>图形：</li>
</ul>
<h2 id="NoSQL数据库的四大分类"><a href="#NoSQL数据库的四大分类" class="headerlink" title="NoSQL数据库的四大分类"></a>NoSQL数据库的四大分类</h2><p><strong>KV键值：</strong></p>
<p> 新浪：BerkeleyDB+redis</p>
<p> 美团：redis+tair</p>
<p> 阿里、百度：memcache+redis</p>
<p><strong>文档型数据库(bson格式比较多)</strong>：</p>
<p> CouchDB</p>
<p> MongoDB：MongoDB 是一个基于分布式文件存储的数据库。由 C++ 语言编写。旨在为 WEB 应用提供可扩展的高性能数据存储解决方案。MongoDB 是一个介于关系数据库和非关系数据库之间的产品，是非关系数据库当中功能最丰富，最像关系数据库的。</p>
<p><strong>列存储数据库</strong></p>
<p> Cassandra, HBase</p>
<p> 分布式文件系统</p>
<p><strong>图关系数据库</strong></p>
<p> 它不是放图形的，放的是关系比如:朋友圈社交网络、广告推荐系统、社交网络，推荐系统等。专注于构建关系图谱</p>
<p>Neo4J, InfoGrid</p>
<h4 id="四者对比"><a href="#四者对比" class="headerlink" title="四者对比"></a>四者对比</h4><p><strong>在分布式数据库中CAP原理CAP+BASE</strong></p>
<p>传统的<strong>ACID</strong></p>
<p><font color=red size=4>A (Atomicity) 原子性</font></p>
<p><font color=red size=4>C (Consistency) 一致性</font></p>
<p><font color=red size=4>I (Isolation) 独立性</font></p>
<p><font color=red size=4>D (Durability) 持久性</font></p>
<h3 id="CAP"><a href="#CAP" class="headerlink" title="CAP"></a><strong>CAP</strong></h3><p><font color=red size=4><strong>C (Consistency) 强一致性——所有节点在同一时间具有相同的数据</strong></font></p>
<p><font color=red size=4><strong>A (Availability) 可用性——保证每个请求不管成功或者失败都有响应</strong></font></p>
<p><font color=red size=4><strong>P (Partition tolerance) 分区容错性——系统中任意信息的丢失或失败不会影响系统的继续运作</strong></font></p>
<p>CAP理论的核心是：<strong>一个分布式系统不可能同时很好的满足一致性，可用性和分区容错性这三个需求，最多只能同时较好的满足两个</strong>。而由于当前的网络硬件肯定会出现延迟丢包等问题，所以<strong>分区容忍性是我们必须需要实现的</strong>。我们称之为<strong>CAP的3进2，</strong>所以我们只能在一致性和可用性之间进行权衡，没有NoSQL系统能同时保证这三点。</p>
<p>因此，根据 CAP 原理将 NoSQL 数据库分成了满足 CA 原则、满足 CP 原则和满足 AP 原则三大类：</p>
<ul>
<li>CA - 单点集群，满足一致性，可用性的系统，通常在可扩展性上不太强大。传统Oracle数据库</li>
<li>CP - 满足一致性，分区容忍性的系统，通常性能不是特别高。Redis、Mongodb</li>
<li>AP - 满足可用性，分区容忍性的系统，通常可能对一致性要求低一些。大多数网站架构的选择</li>
</ul>
<p><img src="https://gitee.com/wjxyzs/img/raw/master/img/16f118aa11736452.jpg" alt=""></p>
<p>☆ 注意</p>
<p><strong>分布式架构的时候必须做出取舍</strong>：一致性和可用性之间取一个平衡。多余大多数web应用，其实并不需要强一致性。因此牺牲C换取P，这是目前分布式数据库产品的方向</p>
<p><strong>一致性与可用性的决择</strong>：对于web2.0网站来说，关系数据库的很多主要特性却往往无用武之地</p>
<p><strong>数据库事务一致性需求</strong> ：很多web实时系统并不要求严格的数据库事务，对读一致性的要求很低， 有些场合对写一致性要求并不高。允许实现最终一致性。</p>
<p><strong>数据库的写实时性和读实时性需求</strong>：对关系数据库来说，插入一条数据之后立刻查询，是肯定可以读出来这条数据的，但是对于很多web应用来说，并不要求这么高的实时性，比方说发一条消息之 后，过几秒乃至十几秒之后，我的订阅者才看到这条动态是完全可以接受的。</p>
<p><strong>对复杂的SQL查询，特别是多表关联查询的需求</strong> ：任何大数据量的web系统，都非常忌讳多个大表的关联查询，以及复杂的数据分析类型的报表查询，特别是SNS类型的网站，从需求以及产品设计角度，就避免了这种情况的产生。往往更多的只是单表的主键查询，以及单表的简单条件分页查询，SQL的功能被极大的弱化了。</p>
<h2 id="BASE是什么"><a href="#BASE是什么" class="headerlink" title="BASE是什么"></a>BASE是什么</h2><p>BASE就是为了解决关系数据库强一致性引起的的可用性降低问题而提出的方案。</p>
<p>BASE其实是下面三个术语的缩写：</p>
<ul>
<li>基本可用（Basically Available）</li>
<li>软状态（Soft state）</li>
<li>最终一致（Eventually consistent）</li>
</ul>
<p>它的思想是通过让系统放松对某一时刻数据一致性的要求来换取系统整体伸缩性和性能上改观。为什么这么说呢，缘由就在于大型系统往往由于地域分布和极高性能的要求，不可能采用分布式事务来完成这些指标，要想获得这些指标，我们必须采用另外一种方式来完成，这里BASE就是解决这个问题的办法</p>
<p><strong>分布式+集群简介</strong></p>
<p>分布式系统（distributed system）</p>
<p>由多台计算机和通信的软件组件通过计算机网络连接（本地网络或广域网）组成。分布式系统是建立在网络之上的软件系统。正是因为软件的特性，所以分布式系统具有高度的内聚性和透明性。因此，网络和分布式系统之间的区别更多的在于高层软件（特别是操作系统），而不是硬件。分布式系统可以应用在在不同的平台上如：PC、工作站、局域网和广域网上等。</p>
<p><strong>分布式计算的优点</strong></p>
<ul>
<li><strong>可靠性（容错）</strong> ：分布式计算系统中的一个重要的优点是可靠性。一台服务器的系统崩溃并不影响到其余的服务器。</li>
<li><strong>可扩展性</strong>：在分布式计算系统可以根据需要增加更多的机器。</li>
<li><strong>资源共享</strong>：共享数据是必不可少的应用，如银行，预订系统。</li>
<li><strong>灵活性</strong>：由于该系统是非常灵活的，它很容易安装，实施和调试新的服务。</li>
<li><strong>更快的速度</strong>：分布式计算系统可以有多台计算机的计算能力，使得它比其他系统有更快的处理速度。</li>
<li><strong>开放系统</strong>：由于它是开放的系统，本地或者远程都可以访问到该服务。</li>
<li><strong>更高的性能</strong>：相较于集中式计算机网络集群可以提供更高的性能（及更好的性价比）。</li>
</ul>
<p><strong>分布式计算的缺点</strong></p>
<ul>
<li><strong>故障排除</strong>： 故障排除和诊断问题。</li>
<li><strong>软件</strong>：更少的软件支持是分布式计算系统的主要缺点。</li>
<li><strong>网络</strong>：网络基础设施的问题，包括：传输问题，高负载，信息丢失等。</li>
<li><strong>安全性</strong>：开发系统的特性让分布式计算系统存在着数据的安全性和共享的风险等问题。</li>
</ul>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>[Navicat安装与pymysql模块]</title>
    <url>/2020/03/12/Navicat%E5%AE%89%E8%A3%85%E4%B8%8Epymysql%E6%A8%A1%E5%9D%97/</url>
    <content><![CDATA[<h2 id="Navicat软件"><a href="#Navicat软件" class="headerlink" title="Navicat软件"></a>Navicat软件</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;&quot;&quot;</span><br><span class="line">一开始学习python的时候 下载python解释器然后直接在终端书写</span><br><span class="line">pycharm能够更加方便快捷的帮助你书写python代码</span><br><span class="line">excel word pdf</span><br><span class="line"></span><br><span class="line">我们在终端操作MySQL 也没有自动提示也无法保存等等 不方便开发</span><br><span class="line">Navicat内部封装了所有的操作数据库的命令 </span><br><span class="line">用户在使用它的时候只需要鼠标点点即可完成操作 无需书写sql语句</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>

<p><strong>安装</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">直接百度搜索 有破解版的也有非破解</span><br><span class="line">非破解的有试用期 你如果不嫌麻烦 你就用使用</span><br><span class="line">到期之后重新装再使用 或者破解一下也很简单</span><br><span class="line">https:&#x2F;&#x2F;www.cr173.com&#x2F;soft&#x2F;126934.html</span><br><span class="line">    </span><br><span class="line">下载完成后是一个压缩包 直接解压 然后点击安装 有提醒直接点击next即可</span><br><span class="line"></span><br><span class="line">navicat能够充当多个数据库的客户端</span><br><span class="line"></span><br><span class="line">navicat图形化界面有时候反应速度较慢 你可以选择刷新或者关闭当前窗口再次打开即可</span><br><span class="line"></span><br><span class="line">当你有一些需求该软件无法满足的时候 你就自己动手写sql</span><br></pre></td></tr></table></figure>

<h3 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">"""</span><br><span class="line">1 MySQL是不区分大小写的</span><br><span class="line">	验证码忽略大小写</span><br><span class="line">		内部统一转大写或者小写比较即可</span><br><span class="line">			upper</span><br><span class="line">			lower</span><br><span class="line"></span><br><span class="line">2 MySQL建议所有的关键字写大写</span><br><span class="line"></span><br><span class="line">3 MySQL中的注释 有两种</span><br><span class="line">	<span class="comment">--</span></span><br><span class="line">	<span class="comment">#</span></span><br><span class="line"></span><br><span class="line">4 在navicat中如何快速的注释和解注释</span><br><span class="line">	ctrl + ？  加注释</span><br><span class="line">	ctrl + ？  基于上述操作再来一次就是解开注释</span><br><span class="line">	如果你的navicat版本不一致还有可能是</span><br><span class="line">	ctrl + shift + ？解开注释</span><br><span class="line">"""</span><br></pre></td></tr></table></figure>

<h3 id="练习题"><a href="#练习题" class="headerlink" title="练习题"></a>练习题</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">"""</span><br><span class="line">课下一定要把握上课将的这几道题全部自己独立的理解并写出来</span><br><span class="line"></span><br><span class="line">在解决sql查询问题的时候 不要慌</span><br><span class="line">一步一步慢慢来  最终能够东拼西凑出来就过关了！！！</span><br><span class="line"></span><br><span class="line">"""</span><br><span class="line"><span class="comment">-- 1、查询所有的课程的名称以及对应的任课老师姓名</span></span><br><span class="line"><span class="comment">-- SELECT</span></span><br><span class="line"><span class="comment">-- 	course.cname,</span></span><br><span class="line"><span class="comment">-- 	teacher.tname </span></span><br><span class="line"><span class="comment">-- FROM</span></span><br><span class="line"><span class="comment">-- 	course</span></span><br><span class="line"><span class="comment">-- 	INNER JOIN teacher ON course.teacher_id = teacher.tid;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 4、查询平均成绩大于八十分的同学的姓名和平均成绩</span></span><br><span class="line"><span class="comment">-- SELECT</span></span><br><span class="line"><span class="comment">-- 	student.sname,</span></span><br><span class="line"><span class="comment">-- 	t1.avg_num </span></span><br><span class="line"><span class="comment">-- FROM</span></span><br><span class="line"><span class="comment">-- 	student</span></span><br><span class="line"><span class="comment">-- 	INNER JOIN (</span></span><br><span class="line"><span class="comment">-- 	SELECT</span></span><br><span class="line"><span class="comment">-- 		score.student_id,</span></span><br><span class="line"><span class="comment">-- 		avg( num ) AS avg_num </span></span><br><span class="line"><span class="comment">-- 	FROM</span></span><br><span class="line"><span class="comment">-- 		score</span></span><br><span class="line"><span class="comment">-- 		INNER JOIN student ON score.student_id = student.sid </span></span><br><span class="line"><span class="comment">-- 	GROUP BY</span></span><br><span class="line"><span class="comment">-- 		score.student_id </span></span><br><span class="line"><span class="comment">-- 	HAVING</span></span><br><span class="line"><span class="comment">-- 		AVG( num ) &gt; 80 </span></span><br><span class="line"><span class="comment">-- 	) AS t1 ON student.sid = t1.student_id;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 7、 查询没有报李平老师课的学生姓名</span></span><br><span class="line"><span class="comment"># 分步操作</span></span><br><span class="line"><span class="comment"># 1 先找到李平老师教授的课程id</span></span><br><span class="line"><span class="comment"># 2 再找所有报了李平老师课程的学生id</span></span><br><span class="line"><span class="comment"># 3 之后去学生表里面取反 就可以获取到没有报李平老师课程的学生姓名</span></span><br><span class="line"><span class="comment">-- SELECT</span></span><br><span class="line"><span class="comment">-- 	student.sname </span></span><br><span class="line"><span class="comment">-- FROM</span></span><br><span class="line"><span class="comment">-- 	student </span></span><br><span class="line"><span class="comment">-- WHERE</span></span><br><span class="line"><span class="comment">-- 	sid NOT IN (</span></span><br><span class="line"><span class="comment">-- 	SELECT DISTINCT</span></span><br><span class="line"><span class="comment">-- 		score.student_id </span></span><br><span class="line"><span class="comment">-- 	FROM</span></span><br><span class="line"><span class="comment">-- 		score </span></span><br><span class="line"><span class="comment">-- 	WHERE</span></span><br><span class="line"><span class="comment">-- 		score.course_id IN ( SELECT course.cid FROM teacher INNER JOIN course ON teacher.tid = course.teacher_id WHERE teacher.tname = '李平老师' ) </span></span><br><span class="line"><span class="comment">-- 	);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 8、 查询没有同时选修物理课程和体育课程的学生姓名</span></span><br><span class="line"><span class="comment">--     (只要选了一门的 选了两门和没有选的都不要)</span></span><br><span class="line"><span class="comment"># 1 先查物理和体育课程的id</span></span><br><span class="line"><span class="comment"># 2 再去获取所有选了物理和体育的学生数据</span></span><br><span class="line"><span class="comment"># 3 按照学生分组 利用聚合函数count筛选出只选了一门的学生id</span></span><br><span class="line"><span class="comment"># 4 依旧id获取学生姓名</span></span><br><span class="line"><span class="comment">-- SELECT</span></span><br><span class="line"><span class="comment">-- 	student.sname </span></span><br><span class="line"><span class="comment">-- FROM</span></span><br><span class="line"><span class="comment">-- 	student </span></span><br><span class="line"><span class="comment">-- WHERE</span></span><br><span class="line"><span class="comment">-- 	student.sid IN (</span></span><br><span class="line"><span class="comment">-- 	SELECT</span></span><br><span class="line"><span class="comment">-- 		score.student_id </span></span><br><span class="line"><span class="comment">-- 	FROM</span></span><br><span class="line"><span class="comment">-- 		score </span></span><br><span class="line"><span class="comment">-- 	WHERE</span></span><br><span class="line"><span class="comment">-- 		score.course_id IN ( SELECT course.cid FROM course WHERE course.cname IN ( '物理', '体育' ) ) </span></span><br><span class="line"><span class="comment">-- 	GROUP BY</span></span><br><span class="line"><span class="comment">-- 		score.student_id </span></span><br><span class="line"><span class="comment">-- 	HAVING</span></span><br><span class="line"><span class="comment">-- 		COUNT( score.course_id ) = 1 </span></span><br><span class="line"><span class="comment">-- 	);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 9、 查询挂科超过两门(包括两门)的学生姓名和班级</span></span><br><span class="line"><span class="comment"># 1 先筛选出所有分数小于60的数据</span></span><br><span class="line"><span class="comment"># 2 按照学生分组 对数据进行计数获取大于等于2的数据</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">	class.caption,</span><br><span class="line">	student.sname </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">	<span class="keyword">class</span></span><br><span class="line">	<span class="keyword">INNER</span> <span class="keyword">JOIN</span> student <span class="keyword">ON</span> class.cid = student.class_id </span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">	student.sid <span class="keyword">IN</span> (</span><br><span class="line">	<span class="keyword">SELECT</span></span><br><span class="line">		score.student_id </span><br><span class="line">	<span class="keyword">FROM</span></span><br><span class="line">		score </span><br><span class="line">	<span class="keyword">WHERE</span></span><br><span class="line">		score.num &lt; <span class="number">60</span> <span class="keyword">GROUP</span> <span class="keyword">BY</span> score.student_id <span class="keyword">HAVING</span> <span class="keyword">COUNT</span>( score.course_id ) &gt;= <span class="number">2</span> </span><br><span class="line">	);</span><br></pre></td></tr></table></figure>

<h2 id="pymysql模块"><a href="#pymysql模块" class="headerlink" title="pymysql模块"></a>pymysql模块</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">支持python代码操作数据库MySQL</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">pip3 install pymysql</span><br></pre></td></tr></table></figure>

<h3 id="sql注入"><a href="#sql注入" class="headerlink" title="sql注入"></a>sql注入</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">利用一些语法的特性 书写一些特点的语句实现固定的语法</span></span><br><span class="line"><span class="string">MySQL利用的是MySQL的注释语法</span></span><br><span class="line"><span class="string">select * from user where name='jason' -- jhsadklsajdkla' and password=''</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">select * from user where name='xxx' or 1=1 -- sakjdkljakldjasl' and password=''</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">日常生活中很多软件在注册的时候都不能含有特殊符号</span><br><span class="line">因为怕你构造出特定的语句入侵数据库 不安全</span><br><span class="line"></span><br><span class="line"><span class="comment"># 敏感的数据不要自己做拼接 交给execute帮你拼接即可</span></span><br><span class="line"><span class="comment"># 结合数据库完成一个用户的登录功能？</span></span><br><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line">conn = pymysql.connect(</span><br><span class="line">    host = <span class="string">'127.0.0.1'</span>,</span><br><span class="line">    port = <span class="number">3306</span>,</span><br><span class="line">    user = <span class="string">'root'</span>,</span><br><span class="line">    password = <span class="string">'123456'</span>,</span><br><span class="line">    database = <span class="string">'day48'</span>,</span><br><span class="line">    charset = <span class="string">'utf8'</span>  <span class="comment"># 编码千万不要加-</span></span><br><span class="line">)  <span class="comment"># 链接数据库</span></span><br><span class="line">cursor = conn.cursor(cursor=pymysql.cursors.DictCursor)</span><br><span class="line"></span><br><span class="line">username = input(<span class="string">'&gt;&gt;&gt;:'</span>)</span><br><span class="line">password = input(<span class="string">'&gt;&gt;&gt;:'</span>)</span><br><span class="line">sql = <span class="string">"select * from user where name=%s and password=%s"</span></span><br><span class="line"><span class="comment"># 不要手动拼接数据 先用%s占位 之后将需要拼接的数据直接交给execute方法即可</span></span><br><span class="line">print(sql)</span><br><span class="line">rows = cursor.execute(sql,(username,password))  <span class="comment"># 自动识别sql里面的%s用后面元组里面的数据替换</span></span><br><span class="line"><span class="keyword">if</span> rows:</span><br><span class="line">    print(<span class="string">'登录成功'</span>)</span><br><span class="line">    print(cursor.fetchall())</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'用户名密码错误'</span>)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>[Redis搭建]</title>
    <url>/2020/06/21/Redis%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h1 id="3-redis"><a href="#3-redis" class="headerlink" title="3. redis"></a>3. redis</h1><p>window系统的redis是微软团队根据官方的linux版本高仿的</p>
<p>官方原版: <a href="https://redis.io/" target="_blank" rel="noopener">https://redis.io/</a></p>
<p>中文官网: <a href="http://www.redis.cn" target="_blank" rel="noopener">http://www.redis.cn</a></p>
<h2 id="3-1-redis下载和安装"><a href="#3-1-redis下载和安装" class="headerlink" title="3.1 redis下载和安装"></a>3.1 redis下载和安装</h2><p>下载地址： <a href="https://github.com/MicrosoftArchive/redis/releases" target="_blank" rel="noopener">https://github.com/MicrosoftArchive/redis/releases</a></p>
<p><img src="/images/867021-20190120213315530-199992307.png" alt=""></p>
<p><img src="/images/867021-20190120213337245-1919434508.png" alt=""></p>
<p><img src="/images/867021-20190120213351947-466120029.png" alt=""></p>
<p><img src="/images/867021-20190120213613576-1092651557.png" alt=""></p>
<p><img src="/images/867021-20190120213732137-1070050780.png" alt=""></p>
<p><img src="/images/867021-20190120213836094-663215847.png" alt=""></p>
<p><img src="/images/867021-20190120213850621-1280736381.png" alt=""></p>
<p><img src="/images/867021-20190120214101037-1456534345.png" alt=""></p>
<p><img src="/images/867021-20190120214000974-189830387.png" alt=""></p>
<p>使用以下命令启动redis服务端</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis-server C:/tool/redis/redis.windows.conf</span><br></pre></td></tr></table></figure>

<p><img src="/images/1553244955947.png" alt=""></p>
<p>关闭上面这个cmd窗口就关闭redis服务器服务了。</p>
<p><strong>redis作为windows服务启动方式</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis-server --service-install redis.windows.conf</span><br></pre></td></tr></table></figure>

<p>启动服务：redis-server –service-start 停止服务：redis-server –service-stop</p>
<p>启动内置客户端连接redis服务：</p>
<p><img src="/images/867021-20190120215300667-1673204066.png" alt=""></p>
<h2 id="3-2-redis的配置"><a href="#3-2-redis的配置" class="headerlink" title="3.2 redis的配置"></a>3.2 redis的配置</h2><p>redis 安装成功以后,window下的配置文件保存在软件 安装目录下,如果是mac或者linux,则默认安装/etc/redis/redis.conf</p>
<h3 id="3-2-1-redis的核心配置选项"><a href="#3-2-1-redis的核心配置选项" class="headerlink" title="3.2.1 redis的核心配置选项"></a>3.2.1 redis的核心配置选项</h3><ul>
<li><p>绑定ip：如果需要远程访问，可将此⾏注释，或绑定⼀个真实ip</p>
<blockquote>
<p>bind 127.0.0.1</p>
</blockquote>
</li>
<li><p>端⼝，默认为6379</p>
<blockquote>
<p>port 6379</p>
</blockquote>
</li>
<li><p>是否以守护进程运⾏[这里的配置主要是linux和mac下面需要配置的]</p>
<ul>
<li>如果以守护进程运⾏，则不会在命令⾏阻塞，类似于服务</li>
<li>如果以⾮守护进程运⾏，则当前终端被阻塞</li>
<li>设置为yes表示守护进程，设置为no表示⾮守护进程</li>
<li>推荐设置为yes</li>
</ul>
<blockquote>
<p>daemonize yes</p>
</blockquote>
</li>
<li><p>数据⽂件</p>
<blockquote>
<p>dbfilename dump.rdb</p>
</blockquote>
</li>
<li><p>数据⽂件存储路径</p>
<blockquote>
<p>dir .</p>
</blockquote>
</li>
<li><p>⽇志⽂件</p>
<blockquote>
<p>logfile “C:/tool/redis/redis-server.log”</p>
</blockquote>
</li>
<li><p>数据库，默认有16个</p>
<blockquote>
<p>database 16</p>
</blockquote>
</li>
<li><p>主从复制，类似于双机备份。</p>
<blockquote>
<p>slaveof</p>
</blockquote>
</li>
</ul>
<h3 id="3-2-2-Redis的使用"><a href="#3-2-2-Redis的使用" class="headerlink" title="3.2.2 Redis的使用"></a>3.2.2 Redis的使用</h3><p>Redis 是一个高性能的key-value数据格式的内存缓存，NoSQL数据库。</p>
<p>NOSQL：not only sql，泛指非关系型数据库。</p>
<p>关系型数据库: (mysql, oracle, sql server, sqlite)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 数据存放在表中，表之间有关系。</span><br><span class="line">2. 通用的SQL操作语言。</span><br><span class="line">3. 大部分支持事务。</span><br></pre></td></tr></table></figure>

<p>非关系型数据库[ redis，hadoop，mangoDB]:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 没有数据表的概念，不同的nosql数据库存放数据位置不同。</span><br><span class="line">2. nosql数据库没有通用的操作语言。</span><br><span class="line">3. 基本不支持事务。   redis支持简单事务</span><br></pre></td></tr></table></figure>

<p>redis： 内存型(数据存放在内存中)的非关系型(nosql)key-value(键值存储)数据库， 支持数据的持久化(注: 数据持久化时将数据存放到文件中，每次启动redis之后会先将文 件中数据加载到内存)，经常用来做缓存(用来缓存一些经常用到的数据，提高读写速度)。</p>
<p>redis是一款基于CS架构的数据库，所以redis有客户端，也有服务端。</p>
<p>其中，客户端可以使用python等编程语言，也可以终端命令行工具</p>
<p><img src="/images/1553246999266.png" alt=""></p>
<p>redis客户端连接服务器:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">redis-cli -h &#96;redis服务器ip&#96; -p &#96;redis服务器port&#96;</span><br></pre></td></tr></table></figure>

<h2 id="3-3-redis数据类型"><a href="#3-3-redis数据类型" class="headerlink" title="3.3 redis数据类型"></a>3.3 redis数据类型</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. string类型:</span><br><span class="line">    字符串类型是 Redis 中最为基础的数据存储类型，它在 Redis 中是二进制安全的，也就是byte类型</span><br><span class="line">    最大容量是512M。</span><br><span class="line">2. hash类型:</span><br><span class="line">        hash用于存储对象，对象的结构为属性、值，值的类型为string。</span><br><span class="line">        key:&#123;</span><br><span class="line">            域:值[这里的值只能是字符串]，</span><br><span class="line">            域:值，            </span><br><span class="line">            域:值，</span><br><span class="line">            域:值，</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">3. list类型:</span><br><span class="line">        列表的元素类型为string。</span><br><span class="line">        key:[ 值1，值2,值3..... ]</span><br><span class="line">4. set类型:</span><br><span class="line">    无序集合，元素为string类型，元素唯一不重复，没有修改操作。</span><br><span class="line">    &#123;值1,值4,值3,值5&#125;</span><br><span class="line">5. zset类型:</span><br><span class="line">    有序集合，元素为string类型，元素唯一不重复，没有修改操作。</span><br></pre></td></tr></table></figure>

<h3 id="3-4-string"><a href="#3-4-string" class="headerlink" title="3.4 string"></a>3.4 string</h3><p>如果设置的键不存在则为添加，如果设置的键已经存在则修改</p>
<ul>
<li><p>设置键值</p>
<blockquote>
<p>set key value</p>
</blockquote>
</li>
<li><p>例1：设置键为<code>name</code>值为<code>xiaoming</code>的数据</p>
<blockquote>
<p>set name xiaoming</p>
</blockquote>
</li>
</ul>
<p><img src="/images/1553478355927.png" alt=""></p>
<ul>
<li><p>设置键值及过期时间，以秒为单位</p>
<blockquote>
<p>setex key seconds value</p>
</blockquote>
</li>
<li><p>例2：设置键为<code>aa</code>值为<code>aa</code>过期时间为3秒的数据</p>
<blockquote>
<p>setex name 20 xiaoming</p>
</blockquote>
</li>
</ul>
<p>关于设置保存数据的有效期</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># setex 添加保存数据到redis，同时设置有效期</span><br><span class="line">格式：</span><br><span class="line">    setex key time value</span><br><span class="line"># expire 给已有的数据重新设置有效期</span><br><span class="line">格式：</span><br><span class="line">    expire key time</span><br></pre></td></tr></table></figure>

<ul>
<li><p>设置多个键值</p>
<blockquote>
<p>mset key1 value1 key2 value2 …</p>
</blockquote>
</li>
<li><p>例3：设置键为<code>a1</code>值为<code>python</code>、键为<code>a2</code>值为<code>java</code>、键为<code>a3</code>值为<code>c</code></p>
<blockquote>
<p>mset a1 python a2 java a3 c</p>
</blockquote>
</li>
<li><p>追加值</p>
<blockquote>
<p>append key value</p>
</blockquote>
</li>
<li><p>例4：向键为<code>a1</code>中追加值<code>haha</code></p>
<blockquote>
<p>append a1 haha</p>
</blockquote>
</li>
<li><p>获取：根据键获取值，如果不存在此键则返回<code>nil</code></p>
<blockquote>
<p>get key</p>
</blockquote>
</li>
<li><p>例5：获取键<code>name</code>的值</p>
<blockquote>
<p>get name</p>
</blockquote>
</li>
<li><p>根据多个键获取多个值</p>
<blockquote>
<p>mget key1 key2 …</p>
</blockquote>
</li>
<li><p>例6：获取键<code>a1、a2、a3</code>的值</p>
<blockquote>
<p>mget a1 a2 a3</p>
</blockquote>
</li>
</ul>
<h3 id="3-5-键操作"><a href="#3-5-键操作" class="headerlink" title="3.5 键操作"></a>3.5 键操作</h3><ul>
<li><p>查找键，参数⽀持正则表达式</p>
<blockquote>
<p>keys pattern</p>
</blockquote>
</li>
<li><p>例1：查看所有键</p>
<blockquote>
<p>keys *</p>
</blockquote>
</li>
<li><p>例2：查看名称中包含<code>a</code>的键</p>
<blockquote>
<p>keys a*</p>
</blockquote>
</li>
<li><p>判断键是否存在，如果存在返回<code>1</code>，不存在返回<code>0</code></p>
<blockquote>
<p>exists key1</p>
</blockquote>
</li>
<li><p>例3：判断键<code>a1</code>是否存在</p>
<blockquote>
<p>exists a1</p>
</blockquote>
</li>
<li><p>查看键对应的<code>value</code>的类型</p>
<blockquote>
<p>type key</p>
</blockquote>
</li>
<li><p>例4：查看键<code>a1</code>的值类型，为redis⽀持的五种类型中的⼀种</p>
<blockquote>
<p>type a1</p>
</blockquote>
</li>
<li><p>删除键及对应的值</p>
<blockquote>
<p>del key1 key2 …</p>
</blockquote>
</li>
<li><p>例5：删除键<code>a2、a3</code></p>
<blockquote>
<p>del a2 a3</p>
</blockquote>
</li>
<li><p>查看有效时间，以秒为单位</p>
<blockquote>
<p>ttl key</p>
</blockquote>
</li>
<li><p>例7：查看键<code>bb</code>的有效时间</p>
<blockquote>
<p>ttl bb</p>
</blockquote>
</li>
</ul>
<h3 id="3-6-hash"><a href="#3-6-hash" class="headerlink" title="3.6 hash"></a>3.6 hash</h3><p>结构：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">键key:&#123;</span><br><span class="line">    域field:值value</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>设置单个属性</p>
<blockquote>
<p>hset key field value</p>
</blockquote>
</li>
<li><p>例1：设置键 <code>user</code>的属性<code>name</code>为<code>xiaohong</code></p>
<blockquote>
<p>hset user name xiaohong</p>
</blockquote>
</li>
<li><p>设置多个属性</p>
<blockquote>
<p>hmset key field1 value1 field2 value2 …</p>
</blockquote>
</li>
<li><p>例2：设置键<code>u2</code>的属性<code>name</code>为<code>xiaohong</code>、属性<code>age</code>为<code>11</code></p>
<blockquote>
<p>hmset u2 name xiaohongage 11</p>
</blockquote>
</li>
<li><p>获取指定键所有的属性</p>
<blockquote>
<p>hkeys key</p>
</blockquote>
</li>
<li><p>例3：获取键u2的所有属性</p>
<blockquote>
<p>hkeys u2</p>
</blockquote>
</li>
<li><p>获取⼀个属性的值</p>
<blockquote>
<p>hget key field</p>
</blockquote>
</li>
<li><p>例4：获取键<code>u2</code>属性<code>name</code>的值</p>
<blockquote>
<p>hget u2 name</p>
</blockquote>
</li>
<li><p>获取多个属性的值</p>
<blockquote>
<p>hmget key field1 field2 …</p>
</blockquote>
</li>
<li><p>例5：获取键<code>u2</code>属性<code>name</code>、<code>age</code>的值</p>
<blockquote>
<p>hmget u2 name age</p>
</blockquote>
</li>
<li><p>获取所有属性的值</p>
<blockquote>
<p>hvals key</p>
</blockquote>
</li>
<li><p>例6：获取键<code>u2</code>所有属性的值</p>
<blockquote>
<p>hvals u2</p>
</blockquote>
</li>
<li><p>删除属性，属性对应的值会被⼀起删除</p>
<blockquote>
<p>hdel key field1 field2 …</p>
</blockquote>
</li>
<li><p>例7：删除键<code>u2</code>的属性<code>age</code></p>
<blockquote>
<p>hdel u2 age</p>
</blockquote>
</li>
</ul>
<h3 id="3-7-list"><a href="#3-7-list" class="headerlink" title="3.7 list"></a>3.7 list</h3><p>列表的元素类型为string</p>
<p>按照插⼊顺序排序</p>
<ul>
<li><p>在左侧插⼊数据</p>
<blockquote>
<p>lpush key value1 value2 …</p>
</blockquote>
</li>
<li><p>例1：从键为<code>a1</code>的列表左侧加⼊数据<code>a 、 b 、c</code></p>
<blockquote>
<p>lpush a1 a b c</p>
</blockquote>
</li>
<li><p>在右侧插⼊数据</p>
<blockquote>
<p>rpush key value1 value2 …</p>
</blockquote>
</li>
<li><p>例2：从键为<code>a1</code>的列表右侧加⼊数据<code>0、1</code></p>
<blockquote>
<p>rpush a1 0 1</p>
</blockquote>
</li>
<li><p>在指定元素的前或后插⼊新元素</p>
<blockquote>
<p>linsert key before或after 现有元素 新元素</p>
</blockquote>
</li>
<li><p>例3：在键为<code>a1</code>的列表中元素<code>b</code>前加⼊<code>3</code></p>
<blockquote>
<p>linsert a1 before b 3</p>
</blockquote>
</li>
</ul>
<p>设置指定索引位置的元素值</p>
<ul>
<li><p>索引从左侧开始，第⼀个元素为0</p>
</li>
<li><p>索引可以是负数，表示尾部开始计数，如<code>-1</code>表示最后⼀个元素</p>
<blockquote>
<p>lset key index value</p>
</blockquote>
</li>
<li><p>例5：修改键为<code>a1</code>的列表中下标为<code>1</code>的元素值为<code>z</code></p>
<blockquote>
<p>lset a 1 z</p>
</blockquote>
</li>
<li><p>删除指定元素</p>
<ul>
<li>将列表中前<code>count</code>次出现的值为<code>value</code>的元素移除</li>
<li>count &gt; 0: 从头往尾移除</li>
<li>count &lt; 0: 从尾往头移除</li>
<li>count = 0: 移除所有</li>
</ul>
<blockquote>
<p>lrem key count value</p>
</blockquote>
<p><img src="/images/1553479815621.png" alt=""></p>
</li>
<li><p>例6.1：向列表<code>a2</code>中加⼊元素<code>a、b、a、b、a、b</code></p>
<blockquote>
<p>lpush a2 a b a b a b</p>
</blockquote>
</li>
<li><p>例6.2：从<code>a2</code>列表右侧开始删除2个<code>b</code></p>
<blockquote>
<p>lrem a2 -2 b</p>
</blockquote>
</li>
<li><p>例6.3：查看列表<code>a2</code>的所有元素</p>
<blockquote>
<p>lrange a2 0 -1</p>
</blockquote>
</li>
</ul>
<h3 id="3-8-set"><a href="#3-8-set" class="headerlink" title="3.8 set"></a>3.8 set</h3><ul>
<li><p>添加元素</p>
<blockquote>
<p>sadd key member1 member2 …</p>
</blockquote>
</li>
<li><p>例1：向键<code>a3</code>的集合中添加元素<code>zhangsan</code>、<code>lisi</code>、<code>wangwu</code></p>
<blockquote>
<p>sadd a3 zhangsan sili wangwu</p>
</blockquote>
</li>
<li><p>返回所有的元素</p>
<blockquote>
<p>smembers key</p>
</blockquote>
</li>
<li><p>例2：获取键<code>a3</code>的集合中所有元素</p>
<blockquote>
<p>smembers a3</p>
</blockquote>
</li>
<li><p>删除指定元素</p>
<blockquote>
<p>srem key value</p>
</blockquote>
</li>
<li><p>例3：删除键<code>a3</code>的集合中元素<code>wangwu</code></p>
<blockquote>
<p>srem a3 wangwu</p>
</blockquote>
</li>
</ul>
<h3 id="3-9-redis的几个站点地址"><a href="#3-9-redis的几个站点地址" class="headerlink" title="3.9 redis的几个站点地址"></a>3.9 redis的几个站点地址</h3><p>中文官网： <a href="http://www.redis.cn/" target="_blank" rel="noopener">http://www.redis.cn/</a></p>
<p>英文官网：<a href="https://redis.io" target="_blank" rel="noopener">https://redis.io</a></p>
<p>参考命令：<a href="http://doc.redisfans.com/" target="_blank" rel="noopener">http://doc.redisfans.com/</a></p>
<h3 id="针对redis中的内容扩展"><a href="#针对redis中的内容扩展" class="headerlink" title="针对redis中的内容扩展"></a>针对redis中的内容扩展</h3><p>flushall 清空数据库中的所有数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">针对各种数据类型它们的特性，使用场景如下:</span><br><span class="line">字符串string: 用于保存一些项目中的普通数据，只要键值对的都可以保存，例如，保存 session,定时记录状态</span><br><span class="line">哈希hash：用于保存项目中的一些字典数据，但是不能保存多维的字典，例如，商城的购物车</span><br><span class="line">列表list：用于保存项目中的列表数据，但是也不能保存多维的列表，例如，队列，秒杀，医院的挂号</span><br><span class="line">无序集合set:用于保存项目中的一些不能重复的数据，可以用于过滤，例如，投票海选的时候，过滤候选人</span><br><span class="line">有序集合zset：用于保存项目中一些不能重复，但是需要进行排序的数据，分数排行榜.</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>[Git安装与介绍]</title>
    <url>/2020/05/21/Git%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BB%8B%E7%BB%8D/</url>
    <content><![CDATA[<h1 id="如何多人协同开发同一个项目？"><a href="#如何多人协同开发同一个项目？" class="headerlink" title="如何多人协同开发同一个项目？"></a>如何多人协同开发同一个项目？</h1><p>使用代码版本控制[version control]软件,</p>
<p>目前市面上比较流行的代码版本控制器有: git,svn,csv</p>
<p>澄清一个问题：</p>
<blockquote>
<p>github，gitee和git之间的关系github和gitee是一个网站，git是一个代码版本控制软件。git是当初Linux系统的作者【林纳斯·托瓦兹】为了开发Linux代码所开发的一个开软软件。github是全球知名的一个开源源码托管平台，之所以叫github是因为他支持通过git上传和下载代码，同时因为git比较出名，所以借助了他的名气而已。他们之间的关系类似，张三和张三丰。gitee是一个国内知名的开源源码托管平台，和github出现的原因类似。</p>
</blockquote>
<h1 id="1-使用git管理代码版本"><a href="#1-使用git管理代码版本" class="headerlink" title="1. 使用git管理代码版本"></a>1. 使用git管理代码版本</h1><p>本项目使用git管理项目代码，代码库放在gitee码云平台。（注意，公司中通常放在gitlab私有服务器中）</p>
<h2 id="1-1-Git-的诞生"><a href="#1-1-Git-的诞生" class="headerlink" title="1.1 Git 的诞生"></a>1.1 Git 的诞生</h2><p>2005 年 4 月3 日，Git 是目前世界上最先进的分布式版本控制系统（没有之一）</p>
<p>作用：源代码管理</p>
<p><strong>为什么要进行源代码管理?</strong></p>
<ul>
<li>方便多人协同开发[防止代码冲突，相互覆盖]</li>
<li>方便版本控制[利于以后的开发人员快速了解项目的开发过程，利于需求变更的时候进行代码回滚]</li>
</ul>
<h2 id="1-2-git与svn区别"><a href="#1-2-git与svn区别" class="headerlink" title="1.2 git与svn区别"></a>1.2 git与svn区别</h2><p>SVN 都是集中控制管理的，也就是有一个中央服务器，大家都把代码提交到中央服务器，而 git 是分布式的版本控制工具，也就是说没有中央服务器，每个节点的地位平等。</p>
<p>SVN</p>
<p><img src="/image/1553208721216.png" alt=""></p>
<p>Git</p>
<p><img src="/image/1553208738888.png" alt=""></p>
<h2 id="Git的windows下安装"><a href="#Git的windows下安装" class="headerlink" title="Git的windows下安装"></a>Git的windows下安装</h2><p>官网地址：<a href="https://git-scm.com/download" target="_blank" rel="noopener">https://git-scm.com/download</a></p>
<p><img src="/image/1553220095452.png" alt=""></p>
<p><img src="/image/1553208779674.png" alt=""></p>
<p>下载到本地磁盘</p>
<p><img src="/image/1553208790623.png" alt=""></p>
<p>安装</p>
<p><img src="/image/1553208801316.png" alt=""></p>
<p>一路【next】就可以了</p>
<p><img src="/image/1553220218170.png" alt=""></p>
<p><img src="/image/1553220208875.png" alt=""></p>
<p><img src="/image/1553220240618.png" alt=""></p>
<p>注意：<strong>openssl 一定选它</strong></p>
<p>安装完成后，右击菜单栏，有如下菜单，表示安装完成</p>
<p><img src="/image/1553220425466.png" alt=""></p>
<p>进入git bash选项</p>
<p><img src="/image/1553220553963.png" alt=""></p>
<p>Git工作区、暂存区和版本库</p>
<p><img src="/image/1593749346903.png" alt=""></p>
<h2 id="1、工作区介绍"><a href="#1、工作区介绍" class="headerlink" title="1、工作区介绍"></a>1、工作区介绍</h2><p>就是在你本要电脑磁盘上能看到的目录。</p>
<h2 id="2、暂存区介绍"><a href="#2、暂存区介绍" class="headerlink" title="2、暂存区介绍"></a>2、暂存区介绍</h2><p>一般存放在【.git】目录下的index文件(.git/index) 中，所以我们把暂存区有时也叫作索引。</p>
<h2 id="3、版本库介绍"><a href="#3、版本库介绍" class="headerlink" title="3、版本库介绍"></a>3、版本库介绍</h2><p>工作区有一个隐藏目录.git，这个不算工作区，而是Git的版本库。git中的head/master是分支，是版本库。</p>
<h3 id="git项目仓库的本地搭建"><a href="#git项目仓库的本地搭建" class="headerlink" title="git项目仓库的本地搭建"></a>git项目仓库的本地搭建</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span>进入到自己希望存储代码的目录路径，并创建本地仓库.git</span><br><span class="line">新创建的本地仓库.git是个空仓库</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> 目录路径</span><br><span class="line">git init gitdemo  <span class="comment"># 如果没有声明目录,则自动把当前目录作为git仓库</span></span><br></pre></td></tr></table></figure>

<p>创建仓库</p>
<p><img src="/image/1553222861995.png" alt=""></p>
<h3 id="仓库目录的结构"><a href="#仓库目录的结构" class="headerlink" title="仓库目录的结构"></a>仓库目录的结构</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">branches&#x2F;   分支管理目录config      </span><br><span class="line">当前项目仓木的配置信息description </span><br><span class="line">当前项目的描述HEAD        </span><br><span class="line">当前项目仓库的当前版本信息hooks       </span><br><span class="line">当前项目仓库的钩子目录[可以利用这个目录下面的文件实现自己拉去代码到服务器]info        </span><br><span class="line">仓库相关信息objects     </span><br><span class="line">仓库版本信息refs        </span><br><span class="line">引用信息</span><br></pre></td></tr></table></figure>

<h3 id="配置用户名和邮箱"><a href="#配置用户名和邮箱" class="headerlink" title="配置用户名和邮箱"></a>配置用户名和邮箱</h3><blockquote>
<p>–global表示全局配置，配置信息默认保存到当前操作系统的用户家目录中的.gitconfig文件，可以通过命令cat ~/.gitconfig查看全局配置如果不加上这个参数，则默认配置信息保存到.git/config文件中，可以通过命令 cat 项目/.git/config查看仓库配置</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.name <span class="string">'lisi'</span></span><br><span class="line">git config --global user.email <span class="string">'lisi@163.com'</span></span><br></pre></td></tr></table></figure>

<p><img src="/image/1553209118220.png" alt=""></p>
<h3 id="查看仓库状态"><a href="#查看仓库状态" class="headerlink" title="查看仓库状态"></a>查看仓库状态</h3><p>所以的仓库状态指代的就是开发者每次对于项目的文件/目录都会进行增删查改操作。每次对于文件/目录进行操作时，仓库的状态都会记录下来。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git status</span><br><span class="line"></span><br><span class="line">git status –s 简约显示</span><br></pre></td></tr></table></figure>

<ul>
<li>红色表示新建文件或者新修改的文件,都在工作区.</li>
<li>绿色表示文件在暂存区</li>
<li>新建的<code>login.py</code>文件在工作区，需要添加到暂存区并提交到仓库区</li>
</ul>
<p><img src="/image/1553209157268.png" alt=""></p>
<p>上图表示： 暂时没有新文件需要提交到暂存区</p>
<h3 id="添加文件到暂存区"><a href="#添加文件到暂存区" class="headerlink" title="添加文件到暂存区"></a>添加文件到暂存区</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 添加项目中所有文件</span></span><br><span class="line">git add .</span><br><span class="line">或者</span><br><span class="line"><span class="comment"># 添加指定文件</span></span><br><span class="line">git add login.py</span><br></pre></td></tr></table></figure>

<p>例如： 创建3个文件 ，并查看状态.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">touch 1.htmltouch 2.html 3.htmlgit statusgit add 1.html 2.html 3.html <span class="comment"># 或 git add .git status</span></span><br></pre></td></tr></table></figure>

<p>效果：</p>
<p><img src="/image/1593749524017.png" alt=""></p>
<p>如果要测试1.html，2.html的暂存状态，则</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git rm --cached 1.html 2.html</span><br></pre></td></tr></table></figure>

<p>结果就是只有3.html是被保留在了暂存区</p>
<p><img src="/image/1593749620435.png" alt=""></p>
<h3 id="提交到版本库"><a href="#提交到版本库" class="headerlink" title="提交到版本库"></a>提交到版本库</h3><p>要把文件/目录提交到版本库必须先把文件/目录添加到暂存库才可以。所以上述的3.html可以提交，1.html和2.html是不能被提交的。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git commit -m <span class="string">"版本描述"</span></span><br></pre></td></tr></table></figure>

<h3 id="手动删除文件"><a href="#手动删除文件" class="headerlink" title="手动删除文件"></a>手动删除文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">手动操作删除 或者 在命令行下 使用 rm 文件名 删除 都是表示在工作区删除.</span><br><span class="line">对于这种删除,如果还原,则可以使用 git reset --hard HEAD</span><br></pre></td></tr></table></figure>

<p><img src="/image/1553221937786.png" alt=""></p>
<h3 id="查看历史版本-查看日志"><a href="#查看历史版本-查看日志" class="headerlink" title="查看历史版本[查看日志]"></a>查看历史版本[查看日志]</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span>      <span class="comment"># 查看详细日志列表</span></span><br><span class="line">git reflog   <span class="comment"># 查看简单日志列表</span></span><br><span class="line"> </span><br><span class="line">过滤查看日志</span><br><span class="line">  git <span class="built_in">log</span> –p </span><br><span class="line">  退出按【q】键</span><br><span class="line">  ctrl+f 向下分页</span><br><span class="line">  ctrl+b 向上分页</span><br><span class="line"></span><br><span class="line">显示指定日期之后的日志   git <span class="built_in">log</span> --after  <span class="string">'2018-11-6'</span></span><br><span class="line">显示指定日期之前的日志   git <span class="built_in">log</span> --before <span class="string">'2018-11-6'</span></span><br><span class="line"></span><br><span class="line">指定显示指定开发者的日志  git <span class="built_in">log</span> --author <span class="string">'lisi'</span></span><br></pre></td></tr></table></figure>

<p><strong>回退版本</strong></p>
<ul>
<li><p><strong>方案一：</strong></p>
<ul>
<li><p><code>HEAD</code>表示当前最新版本</p>
</li>
<li><p><code>HEAD^</code>表示当前最新版本的前一个版本</p>
</li>
<li><p><code>HEAD^^</code>表示当前最新版本的前两个版本，<strong>以此类推…</strong></p>
</li>
<li><p><code>HEAD~1</code>表示当前最新版本的前一个版本</p>
</li>
<li><p><code>HEAD~10</code>表示当前最新版本的前10个版本，<strong>以此类推…</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git reset --hard HEAD^</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p><strong>方案二：当版本非常多时可选择的方案</strong></p>
<ul>
<li><p>通过每个版本的版本号回退到指定版本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git reset --hard 版本号</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<h2 id="查看文件状态"><a href="#查看文件状态" class="headerlink" title="查看文件状态"></a>查看文件状态</h2><p><strong>针对与文件所处的不同分区，文件所处的状态:</strong></p>
<p>(1)未追踪, 文件第一次出现在工作区, 版本库还没有存储该文件的状态</p>
<p>(2)已追踪, 只要第一次,git add了文件, 文件就是已追踪</p>
<p>(3)未修改, 文件在工作区未被编辑</p>
<p>(4)已修改, 文件在工作区被修改</p>
<p>(5)未暂存, 文件已修改, 但是没有add到暂存区</p>
<p>(6)已暂存, 已经将修改的文件add到暂存区</p>
<p>(7)未提交, 已暂存的文件, 没有commit提交. 处于暂存区</p>
<p>(8)已提交, 提交到版本库的文件修改,只有commit以后才会有仓库的版本号生成</p>
<p>注意：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">公司一般使用git管理项目,往往会搭建一个gitlab自己内部管理代码,也有公司选择使用码云的企业版仓库来管理</span><br><span class="line"></span><br><span class="line">使用git开发项目时，有时候不一定通过https协议提交代码的。也有的公司是通过ssh协议提交,此时需要生成ssh公钥和提交公钥给仓库。[码云这些官网都会有详细的提示说明]</span><br><span class="line"></span><br><span class="line">生成SSH公钥【必须安装git bash才可以使用这个命令，而且还要把git bash添加到系统变量里面】</span><br><span class="line">  ssh-keygen -t rsa -C &quot;源码托管平台的账号&quot;</span><br><span class="line"></span><br><span class="line">参考：https:&#x2F;&#x2F;gitee.com&#x2F;help&#x2F;articles&#x2F;4180</span><br></pre></td></tr></table></figure>

<h1 id="2-在git平台创建工程"><a href="#2-在git平台创建工程" class="headerlink" title="2. 在git平台创建工程"></a>2. 在git平台创建工程</h1><p>1） 创建私有项目库</p>
<p><img src="/image/1553225634429.png" alt=""></p>
<p><img src="/image/1553225730511.png" alt=""></p>
<p>创建私有空仓库以后的界面:</p>
<p><img src="/image/1553225968558.png" alt=""></p>
<p>2）克隆项目到本地</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone 仓库地址</span><br><span class="line">注意，如果当前目录下出现git仓库同名目录时，会克隆失败。</span><br></pre></td></tr></table></figure>

<p><img src="/image/1553227023342.png" alt=""></p>
<p>3）创建并切换分支到dev</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 分支管理的命令</span></span><br><span class="line">git branch            <span class="comment"># 查看当前项目的所有分支列表</span></span><br><span class="line">git bracn 分支名称     <span class="comment"># 新建一个分支</span></span><br><span class="line">git checkout 分支名称  <span class="comment"># 切换分支，让当前目录下显示对应分支里面的内容</span></span><br><span class="line">git checkout -d  分支名称  <span class="comment"># 删除指定名称的分支</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># git branch dev      # 创建本地分支dev,dev是自定义</span></span><br><span class="line"><span class="comment"># git checkout dev    # 切换本地分支代码</span></span><br><span class="line">git checkout -b dev   <span class="comment"># 这里是上面两句代码的简写</span></span><br></pre></td></tr></table></figure>

<p>git提交</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git add 代码目录</span><br><span class="line">git status</span><br><span class="line">git commit -m <span class="string">'添加项目代码'</span></span><br></pre></td></tr></table></figure>

<p>推送到远端</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># git push origin 本地分支名称:线上分支名称</span></span><br><span class="line"><span class="comment"># 如果本地分支和线上分支名称一致，则可以简写 git push origin 分支名称</span></span><br><span class="line"><span class="comment"># 如果有的本地分支名称，但是线上没有，则代码推送时，线上会自动创建</span></span><br><span class="line">git push origin dev:dev</span><br></pre></td></tr></table></figure>

<p>如果推送代码,出现以下提示: git pull ….,则表示当前本地的代码和线上的代码版本不同.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 把线上的代码执行以下命令,拉取到本地,进行同步</span><br><span class="line">git pull</span><br><span class="line"></span><br><span class="line">2. 根据提示,移除多余的冲突的文件,也可以删除.</span><br><span class="line">完成这些步骤以后,再次add,commit,push,通知其他同事git pull即可.</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>IT兵器谱</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>[Redis初识]</title>
    <url>/2020/06/21/Redis%E5%88%9D%E8%AF%86/</url>
    <content><![CDATA[<h2 id="第一章-Redis初识"><a href="#第一章-Redis初识" class="headerlink" title="第一章 Redis初识"></a>第一章 Redis初识</h2><h3 id="1-1-Redis是什么"><a href="#1-1-Redis是什么" class="headerlink" title="1.1 Redis是什么"></a>1.1 Redis是什么</h3><p><strong>介绍</strong></p>
<p>开源：早起版本2w3千行</p>
<p>基于键值对的存储系统：字典形式 </p>
<p>多种数据结构：字符串，hash，列表，集合，有序集合</p>
<p>高性能，功能丰富</p>
<p><strong>那些公司在用</strong></p>
<p>github，twitter，stackoverflow，阿里，百度，微博，美团，搜狐</p>
<h3 id="1-2-Redis特性（8个）"><a href="#1-2-Redis特性（8个）" class="headerlink" title="1.2 Redis特性（8个）"></a>1.2 Redis特性（8个）</h3><p><strong>速度快</strong>：10w ops（每秒10w读写），数据存在内存中，c语言实现，单线程模型</p>
<p><strong>持久化</strong>：rdb和aof</p>
<p><strong>多种数据结构</strong>：</p>
<p>5大数据结构 </p>
<p>BitMaps位图：布隆过滤器   本质是 字符串</p>
<p>HyperLogLog：超小内存唯一值计数，12kb  HyperLogLog  本质是 字符串</p>
<p>GEO：地理信息定位  本质是有序集合</p>
<p><strong>支持多种编程语言</strong>：基于tcp通信协议，各大编程语言都支持</p>
<p><strong>功能丰富</strong>：发布订阅（消息） Lua脚本，事务（pipeline）</p>
<p><strong>简单</strong>：源代码几万行，不依赖外部库</p>
<p><strong>主从复制</strong>：主服务器和从服务器，主服务器可以同步到从服务器中</p>
<p><strong>高可用和分布式</strong>：</p>
<p>​    2.8版本以后使用redis-sentinel支持高可用</p>
<p>​    3.0版本以后支持分布式</p>
<h3 id="1-3-Redis单机安装"><a href="#1-3-Redis单机安装" class="headerlink" title="1.3 Redis单机安装"></a>1.3 Redis单机安装</h3><h4 id="1-3-1下载安装"><a href="#1-3-1下载安装" class="headerlink" title="1.3.1下载安装"></a>1.3.1下载安装</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#下载</span></span><br><span class="line">wget http://download.redis.io/releases/redis<span class="number">-5.0</span><span class="number">.7</span>.tar.gz</span><br><span class="line"><span class="comment">#解压</span></span><br><span class="line">tar -xzf redis<span class="number">-5.0</span><span class="number">.7</span>.tar.gz</span><br><span class="line"><span class="comment">#建立软连接</span></span><br><span class="line">ln -s redis<span class="number">-5.0</span><span class="number">.7</span> redis</span><br><span class="line">cd redis</span><br><span class="line">make&amp;&amp;make install</span><br><span class="line"><span class="comment">#在src目录下可以看到</span></span><br><span class="line"><span class="comment">#redis-server---&gt;redis服务器</span></span><br><span class="line"><span class="comment">#redis-cli---》redis命令行客户端</span></span><br><span class="line"><span class="comment">#redis-benchmark---》redis性能测试工具</span></span><br><span class="line"><span class="comment">#redis-check-aof---&gt;aof文件修复工具</span></span><br><span class="line"><span class="comment">#redis-check-dump---》rdb文件检查工具</span></span><br><span class="line"><span class="comment">#redis-sentinel---》sentinel服务器，哨兵</span></span><br><span class="line"><span class="comment">#redis作者对windows维护不好，window自己有安装包</span></span><br><span class="line"></span><br><span class="line"><span class="comment">####卸载redis</span></span><br><span class="line"><span class="comment"># 1、查看redis进程；</span></span><br><span class="line">ps aux|grep redis</span><br><span class="line"><span class="comment"># 2、kill掉进程；</span></span><br><span class="line">kill 进程id</span><br><span class="line"><span class="comment"># 3、进入到redis目录</span></span><br><span class="line">cd /usr/local/</span><br><span class="line"><span class="comment"># 4、删除redis对应的文件</span></span><br><span class="line">rm -f /usr/local/redis/bin/redis*</span><br><span class="line">rm -f /usr/local/bin/redis*</span><br><span class="line"><span class="comment"># 5、删除对应的文件</span></span><br><span class="line">rm -rf redis</span><br></pre></td></tr></table></figure>

<h4 id="1-3-2三种启动方式"><a href="#1-3-2三种启动方式" class="headerlink" title="1.3.2三种启动方式"></a>1.3.2三种启动方式</h4><h5 id="1-3-2-1-最简启动"><a href="#1-3-2-1-最简启动" class="headerlink" title="1.3.2.1 最简启动"></a>1.3.2.1 最简启动</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#最简启动</span></span><br><span class="line">redis-server</span><br><span class="line">ps -ef|grep redis  <span class="comment">#查看进程</span></span><br><span class="line">netstat -antpl|grep redis <span class="comment">#查看端口</span></span><br><span class="line">redis-cli -h ip -p port ping <span class="comment">#命令查看</span></span><br></pre></td></tr></table></figure>

<h5 id="1-3-2-2-动态参数启动"><a href="#1-3-2-2-动态参数启动" class="headerlink" title="1.3.2.2 动态参数启动"></a>1.3.2.2 动态参数启动</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#动态参数启动</span></span><br><span class="line">redis-serve --port <span class="number">6380</span> <span class="comment">#启动，监听6380端口</span></span><br></pre></td></tr></table></figure>

<h5 id="1-3-2-2-配置文件启动"><a href="#1-3-2-2-配置文件启动" class="headerlink" title="1.3.2.2 配置文件启动"></a>1.3.2.2 配置文件启动</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#配置文件启动（6379对应手机按键MERZ，意大利女歌手Alessia Merz的名字）</span></span><br><span class="line"><span class="comment">#####通过redis-cli连接，输入config get * 可以获得默认配置</span></span><br><span class="line"><span class="comment">#在redis目录下创建config目录，copy一个redis.conf文件</span></span><br><span class="line"><span class="comment">#daemonize--》是否是守护进程启动（no|yes）</span></span><br><span class="line"><span class="comment">#port---》端口号</span></span><br><span class="line"><span class="comment">#logfile--》redis系统日志</span></span><br><span class="line"><span class="comment">#dir--》redis工作目录</span></span><br></pre></td></tr></table></figure>

<p>配置文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查看一下默认注释，把#和空格去掉</span></span><br><span class="line">cat redis.conf|grep -v <span class="string">"#"</span> |grep -v <span class="string">"^$"</span></span><br><span class="line"><span class="comment">#重定向到另一个文件</span></span><br><span class="line">cat redis.conf|grep -v <span class="string">"#"</span> |grep -v <span class="string">"^$"</span> &gt;redis<span class="number">-6382.</span>conf</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">daemonize yes #是否以守护进程启动</span></span><br><span class="line"><span class="string">pidfile /var/run/redis.pid   #进程号的位置，删除</span></span><br><span class="line"><span class="string">port 6379    #端口号</span></span><br><span class="line"><span class="string">dir "/opt/soft/redis/data"  #工作目录</span></span><br><span class="line"><span class="string">logfile “6379.log” #日志位置  </span></span><br><span class="line"><span class="string">#其他全删掉</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment">#在redis目录下新建data目录，用来存放书籍</span></span><br><span class="line"><span class="comment">#启动redis</span></span><br><span class="line">redis-server config/redis.conf</span><br><span class="line"><span class="comment">#查看进程</span></span><br><span class="line">ps -ef |grep redis-server |grep <span class="number">6379</span></span><br><span class="line"><span class="comment">#查看日志</span></span><br><span class="line">cd data</span><br><span class="line">cat <span class="number">6379.l</span>og</span><br></pre></td></tr></table></figure>



<h4 id="1-3-3-客户端连接"><a href="#1-3-3-客户端连接" class="headerlink" title="1.3.3 客户端连接"></a>1.3.3 客户端连接</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">###客户端连接###</span></span><br><span class="line">redis-cli -h <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> -p <span class="number">6379</span></span><br><span class="line">ping <span class="comment">#返回PONG</span></span><br></pre></td></tr></table></figure>

<h4 id="1-3-4-redis返回值"><a href="#1-3-4-redis返回值" class="headerlink" title="1.3.4 redis返回值"></a>1.3.4 redis返回值</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">####redis返回值</span></span><br><span class="line">状态回复：ping---》PONG</span><br><span class="line">错误回复：hget hello field ---》(error)WRONGTYPE Operation against</span><br><span class="line">整数回复：incr hello---》(integer) <span class="number">1</span></span><br><span class="line">字符串回复：get hello---》<span class="string">"world"</span></span><br><span class="line">多行字符串回复：mget hello foo---》<span class="string">"world"</span> <span class="string">"bar"</span></span><br></pre></td></tr></table></figure>


<h3 id="1-4-Redis典型使用场景"><a href="#1-4-Redis典型使用场景" class="headerlink" title="1.4 Redis典型使用场景"></a>1.4 Redis典型使用场景</h3><p>缓存系统：使用最广泛的就是缓存</p>
<p>计数器：网站访问量，转发量，评论数（文章转发，商品销量，单线程模型，不会出现并发问题）</p>
<p>消息队列：发布订阅，阻塞队列实现（简单的分布式，blpop：阻塞队列，生产者消费者）</p>
<p>排行榜：有序集合（阅读排行，点赞排行，推荐（销量高的，推荐））</p>
<p>社交网络：很多特效跟社交网络匹配，粉丝数，关注数</p>
<p>实时系统：垃圾邮件处理系统，布隆过滤器</p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>[Redis系列]</title>
    <url>/2020/06/21/Redis%E7%B3%BB%E5%88%97/</url>
    <content><![CDATA[<h2 id="Redis系列"><a href="#Redis系列" class="headerlink" title="Redis系列"></a>Redis系列</h2><p>Redis（Remote Dictionary Server )，即远程字典服务，是一个开源的使用ANSI C语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API…</p>
<p><a href="https://rogerxs80.github.io/2020/06/21/Redis%E5%88%9D%E8%AF%86/" target="_blank" rel="noopener">1.Redis介绍安装配置</a></p>
<p><a href="https://rogerxs80.github.io/2020/06/21/API%E7%9A%84%E4%BD%BF%E7%94%A8/" target="_blank" rel="noopener">2.API的使用</a></p>
<p><a href="https://rogerxs80.github.io/2020/06/21/%E9%AB%98%E7%BA%A7%E7%94%A8%E6%B3%95/" target="_blank" rel="noopener">3.客户端使用</a></p>
<p><a href="https://rogerxs80.github.io/2020/06/21/%E9%AB%98%E7%BA%A7%E7%94%A8%E6%B3%95/" target="_blank" rel="noopener">4.高级用法</a></p>
<p><a href="https://rogerxs80.github.io/2020/06/21/%E6%8C%81%E4%B9%85%E5%8C%96/" target="_blank" rel="noopener">5.持久化</a></p>
<p><a href="https://rogerxs80.github.io/2020/06/21/%E4%BD%BF%E7%94%A8%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/" target="_blank" rel="noopener">6.使用常见问题</a></p>
<p><a href="https://rogerxs80.github.io/2020/06/21/%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E5%8E%9F%E7%90%86%E4%B8%8E%E4%BC%98%E5%8C%96/" target="_blank" rel="noopener">7.主从复制原理与优化</a></p>
<p><a href="https://rogerxs80.github.io/2020/06/21/Sentinel/" target="_blank" rel="noopener">8.Sentinel</a></p>
<p><a href="https://rogerxs80.github.io/2020/06/21/%E7%BC%93%E5%AD%98%E7%9A%84%E4%BD%BF%E7%94%A8%E5%92%8C%E4%BC%98%E5%8C%96/" target="_blank" rel="noopener">9.缓存的使用和优化</a></p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>[vue自动化工具（Vue-cli）]</title>
    <url>/2020/02/25/Vue%E8%87%AA%E5%8A%A8%E5%8C%96%E5%B7%A5%E5%85%B7%EF%BC%88Vue-cli%EF%BC%89/</url>
    <content><![CDATA[<h2 id="5-1-组件-component"><a href="#5-1-组件-component" class="headerlink" title="5.1 组件[component]"></a>5.1 组件[component]</h2><p>组件（Component）是自定义封装代码的功能。在前端开发过程中，经常出现多个网页的功能是重复的，而且很多不同的页面之间，也存在同样的功能。</p>
<p>而在网页中实现一个功能，需要使用html定义功能的内容结构，使用css声明功能的外观样式，还要使用js来定义功能的特效，因此就产生了把一个功能相关的[HTML、css和javascript]代码封装在一起组成一个整体的代码块封装模式，我们称之为“组件”。</p>
<p>所以，组件就是一个html网页中的功能，一般就是一个标签，标签中有自己的html内容结构，css样式和js特效。</p>
<p>这样，前端人员就可以在组件化开发时，只需要书写一次代码，随处引入即可使用。</p>
<p>vue的组件有两种：默认组件[全局组件] 和 单文件组件</p>
<h3 id="5-1-1-默认组件"><a href="#5-1-1-默认组件" class="headerlink" title="5.1.1 默认组件"></a>5.1.1 默认组件</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;addnum&gt;&lt;<span class="regexp">/addnum&gt;</span></span><br><span class="line"><span class="regexp">    &lt;addnum&gt;&lt;/</span>addnum&gt;</span><br><span class="line">    &lt;addnum&gt;&lt;<span class="regexp">/addnum&gt;</span></span><br><span class="line"><span class="regexp">    &lt;addnum&gt;&lt;/</span>addnum&gt;</span><br><span class="line">    &lt;addnum&gt;&lt;<span class="regexp">/addnum&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    Vue.component(<span class="string">"addnum"</span>,&#123;</span><br><span class="line">        template:<span class="string">'&lt;div&gt;&lt;input type="text" v-model="num"&gt;&lt;button @click="num+=1"&gt;点击&lt;/button&gt;&lt;/div&gt;'</span>,</span><br><span class="line">        data: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="comment">// 写在这里的数据只有当前组件可以使用</span></span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                num:<span class="number">1</span>,</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">        el:<span class="string">"#app"</span>,</span><br><span class="line">        <span class="comment">// 这里写的数据是全局公用的，整个文件共享</span></span><br><span class="line">        data:&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="6-Vue自动化工具（Vue-cli）"><a href="#6-Vue自动化工具（Vue-cli）" class="headerlink" title="6. Vue自动化工具（Vue-cli）"></a>6. Vue自动化工具（Vue-cli）</h1><p>前面学习了普通组件以后，接下来我们继续学习单文件组件则需要提前先安装准备一些组件开发工具。否则无法使用和学习单文件组件。</p>
<p>一般情况下，单文件组件，我们运行在 自动化工具vue-CLI中，可以帮我们把单文件组件编译成普通的js代码。所以我们需要在电脑先安装搭建vue-CLI工具。</p>
<p>官网：<a href="https://cli.vuejs.org/zh/" target="_blank" rel="noopener">https://cli.vuejs.org/zh/</a></p>
<p>Vue CLI 需要 <a href="https://nodejs.org/" target="_blank" rel="noopener">Node.js</a> 8.9 或更高版本 (推荐 8.11.0+)。你可以使用 <a href="https://github.com/creationix/nvm" target="_blank" rel="noopener">nvm</a> 或 <a href="https://github.com/coreybutler/nvm-windows" target="_blank" rel="noopener">nvm-windows</a>在同一台电脑中管理多个 Node 版本。</p>
<p>nvm工具的下载和安装： </p>
<p><a href="https://www.jianshu.com/p/d0e0935b150a" target="_blank" rel="noopener">https://www.jianshu.com/p/d0e0935b150a</a></p>
<p> <a href="https://www.jianshu.com/p/622ad36ee020" target="_blank" rel="noopener">https://www.jianshu.com/p/622ad36ee020</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -o- https://github.com/nvm-sh/nvm/v0.35.3/install.sh | bash</span><br></pre></td></tr></table></figure>

<p>安装记录:</p>
<p>打开:<a href="https://github.com/coreybutler/nvm-windows/releases" target="_blank" rel="noopener">https://github.com/coreybutler/nvm-windows/releases</a></p>
<p>安装完成以后,先查看环境变量是否设置好了.</p>
<p><img src="/images/1552357036022.png" alt=""></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">常用的nvm命令</span><br><span class="line"></span><br><span class="line">nvm list   <span class="comment"># 列出目前在nvm里面安装的所有node版本</span></span><br><span class="line">nvm install node版本号      <span class="comment"># 安装指定版本的node.js</span></span><br><span class="line">nvm uninstall node版本号    <span class="comment"># 卸载指定版本的node.js</span></span><br><span class="line">nvm use node版本号          <span class="comment"># 切换当前使用的node.js版本</span></span><br></pre></td></tr></table></figure>

<p>如果使用nvm工具，则直接可以不用自己手动下载，如果使用nvm下载安装 node的npm比较慢的时候，可以修改nvm的配置文件(在安装根目录下)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># settings.txt</span><br><span class="line">root: C:\tool\nvm    [这里的目录地址是安装nvm时自己设置的地址,要根据实际修改]</span><br><span class="line">path: C:\tool\nodejs</span><br><span class="line">arch: 64</span><br><span class="line">proxy: none</span><br><span class="line">node_mirror: http:&#x2F;&#x2F;npm.taobao.org&#x2F;mirrors&#x2F;node&#x2F; </span><br><span class="line">npm_mirror: https:&#x2F;&#x2F;npm.taobao.org&#x2F;mirrors&#x2F;npm&#x2F;</span><br></pre></td></tr></table></figure>

<h2 id="6-1-安装node-js"><a href="#6-1-安装node-js" class="headerlink" title="6.1 安装node.js"></a>6.1 安装node.js</h2><p>Node.js是一个新的后端(后台)语言，它的语法和JavaScript类似，所以可以说它是属于前端的后端语言，后端语言和前端语言的区别：</p>
<ul>
<li>运行环境：后端语言一般运行在服务器端，前端语言运行在客户端的浏览器上</li>
<li>功能：后端语言可以操作文件，可以读写数据库，前端语言不能操作文件，不能读写数据库。</li>
</ul>
<p>我们一般安装LTS(长线支持版本 Long-Time Support)：</p>
<p>下载地址：<a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">https://nodejs.org/en/download/</a>【上面已经安装了nvm，那么这里不用手动安装了】</p>
<p>node.js的版本有两大分支：</p>
<p>官方发布的node.js版本：0.xx.xx 这种版本号就是官方发布的版本</p>
<p>社区发布的node.js版本：xx.xx.x 就是社区开发的版本</p>
<p>Node.js如果安装成功，可以查看Node.js的版本,在终端输入如下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure>

<h2 id="6-2-npm"><a href="#6-2-npm" class="headerlink" title="6.2 npm"></a>6.2 npm</h2><p>在安装node.js完成后，在node.js中会同时帮我们安装一个npm包管理器npm。我们可以借助npm命令来安装node.js的包。这个工具相当于python的pip管理器。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g 包名              <span class="comment"># 安装模块   -g表示全局安装，如果没有-g，则表示在当前项目安装</span></span><br><span class="line">npm list                        <span class="comment"># 查看当前目录下已安装的node包</span></span><br><span class="line">npm view 包名 engines            <span class="comment"># 查看包所依赖的Node的版本 </span></span><br><span class="line">npm outdated                    <span class="comment"># 检查包是否已经过时，命令会列出所有已过时的包</span></span><br><span class="line">npm update 包名                  <span class="comment"># 更新node包</span></span><br><span class="line">npm uninstall 包名               <span class="comment"># 卸载node包</span></span><br><span class="line">npm 命令 -h                      <span class="comment"># 查看指定命令的帮助文档</span></span><br></pre></td></tr></table></figure>

<h2 id="6-3-安装Vue-cli"><a href="#6-3-安装Vue-cli" class="headerlink" title="6.3 安装Vue-cli"></a>6.3 安装Vue-cli</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g vue-cli</span><br></pre></td></tr></table></figure>

<p>如果安装速度过慢，一直超时，可以考虑切换npm镜像源：<a href="http://npm.taobao.org/" target="_blank" rel="noopener">http://npm.taobao.org/</a></p>
<h2 id="6-4-使用Vue-CLI初始化创建前端项目"><a href="#6-4-使用Vue-CLI初始化创建前端项目" class="headerlink" title="6.4 使用Vue-CLI初始化创建前端项目"></a>6.4 使用Vue-CLI初始化创建前端项目</h2><h3 id="6-4-1-生成项目目录"><a href="#6-4-1-生成项目目录" class="headerlink" title="6.4.1 生成项目目录"></a>6.4.1 生成项目目录</h3><p>使用vue-cli自动化工具可以快速搭建单页应用项目目录。</p>
<p>该工具为现代化的前端开发工作流提供了开箱即用的构建配置。只需几分钟即可创建并启动一个带热重载、保存时静态检查以及可用于生产环境的构建配置的项目：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 生成一个基于 webpack 模板的新项目</span><br><span class="line">vue init webpack 项目目录名</span><br><span class="line">例如：</span><br><span class="line">vue init webpack myproject</span><br><span class="line"></span><br><span class="line">// 启动开发服务器 ctrl+c 停止服务</span><br><span class="line"><span class="built_in">cd</span> myproject</span><br><span class="line">npm run dev           <span class="comment"># 运行这个命令就可以启动node提供的测试http服务器</span></span><br></pre></td></tr></table></figure>

<p>运行了上面代码以后,终端下会出现以下效果提示：</p>
<p><img src="/images/1552187745456.png" alt=""></p>
<p>那么访问：<a href="http://localhost:8080/" target="_blank" rel="noopener">http://localhost:8080/</a></p>
<p><img src="/images/1552187794989.png" alt=""></p>
<h3 id="6-4-2-项目目录结构"><a href="#6-4-2-项目目录结构" class="headerlink" title="6.4.2 项目目录结构"></a>6.4.2 项目目录结构</h3><p>src 主开发目录，要开发的单文件组件全部在这个目录下的components目录下</p>
<p>static 静态资源目录，所有的css，js，图片等资源文件放在这个文件夹</p>
<p>dist项目打包发布文件夹，最后要上线单文件项目文件都在这个文件夹中[后面打包项目,让项目中的vue组件经过编译变成js 代码以后,dist就出现了]</p>
<p>node_modules目录是node的依赖包目录</p>
<p>config是配置目录，</p>
<p>build是项目打包时依赖的目录</p>
<p>src/router 路由,后面需要我们在使用Router路由的时候,自己声明.</p>
<h3 id="6-4-3-vue项目执行流程图"><a href="#6-4-3-vue项目执行流程图" class="headerlink" title="6.4.3 vue项目执行流程图"></a>6.4.3 vue项目执行流程图</h3><p><img src="/images/page_structrue.png" alt=""></p>
<p>page_structrue</p>
<p>整个项目是一个主文件index.html,index.html中会引入src文件夹中的main.js,main.js中会导入顶级单文件组件App.vue,App.vue中会通过组件嵌套或者路由来引用components文件夹中的其他单文件组件。</p>
<h2 id="7-单文件组件的使用"><a href="#7-单文件组件的使用" class="headerlink" title="7. 单文件组件的使用"></a>7. 单文件组件的使用</h2><p>组件有两种：普通组件、单文件组件</p>
<p>普通组件的缺点：</p>
<ol>
<li>html代码是作为js的字符串进行编写，所以组装和开发的时候不易理解，而且没有高亮效果。</li>
<li>普通组件用在小项目中非常合适，但是复杂的大项目中，如果把更多的组件放在html文件中，那么维护成本就会变得非常昂贵。</li>
<li>普通组件只是整合了js和html，但是css代码被剥离出去了。使用的时候的时候不好处理。</li>
</ol>
<p>将一个组件相关的html结构，css样式，以及交互的JavaScript代码从html文件中剥离出来，合成一个文件，这种文件就是单文件组件，相当于一个组件具有了结构、表现和行为的完整功能，方便组件之间随意组合以及组件的重用，这种文件的扩展名为“.vue”，比如：“Home.vue”。</p>
<ol>
<li>创建组件</li>
</ol>
<p><img src="/images/1552362045478.png" alt=""></p>
<p>在组件中编辑三个标签，编写视图、vm对象和css样式代码。</p>
<h3 id="7-1-template-编写html代码的地方"><a href="#7-1-template-编写html代码的地方" class="headerlink" title="7.1 template 编写html代码的地方"></a>7.1 template 编写html代码的地方</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"Home"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> @<span class="attr">click</span>=<span class="string">"num--"</span> <span class="attr">class</span>=<span class="string">"sub"</span>&gt;</span>-<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">size</span>=<span class="string">"1"</span> <span class="attr">v-model</span>=<span class="string">"num"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> @<span class="attr">click</span>=<span class="string">"num++"</span> <span class="attr">class</span>=<span class="string">"add"</span>&gt;</span>+<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="7-2-script编写vue-js代码"><a href="#7-2-script编写vue-js代码" class="headerlink" title="7.2 script编写vue.js代码"></a>7.2 script编写vue.js代码</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    name:<span class="string">"Home"</span>,</span><br><span class="line">    data: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        num:<span class="number">0</span>,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="7-3-style编写当前组件的样式代码"><a href="#7-3-style编写当前组件的样式代码" class="headerlink" title="7.3 style编写当前组件的样式代码"></a>7.3 style编写当前组件的样式代码</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.sub</span>,<span class="selector-class">.add</span>&#123;</span></span><br><span class="line">    border: 1px solid red;</span><br><span class="line">    padding: 4px 7px;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="7-4-完成案例-点击加减数字"><a href="#7-4-完成案例-点击加减数字" class="headerlink" title="7.4 完成案例-点击加减数字"></a>7.4 完成案例-点击加减数字</h3><p>创建Homes.vue</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"add_num"</span>&gt;</span><br><span class="line">      &lt;span @click=<span class="string">"num++"</span>&gt;+&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">      &lt;input type="text" size="2" v-model="num"&gt;</span></span><br><span class="line"><span class="regexp">      &lt;span @click="num--"&gt;-&lt;/</span>span&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line">    name:<span class="string">"AddNum"</span>,</span><br><span class="line">    data: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        num: <span class="number">0</span>,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;style scoped&gt;</span></span><br><span class="line"><span class="regexp">   .add_num&#123;</span></span><br><span class="line"><span class="regexp">      font-size: 32px;</span></span><br><span class="line"><span class="regexp">   &#125;</span></span><br><span class="line"><span class="regexp">&lt;/</span>style&gt;</span><br></pre></td></tr></table></figure>

<p>在App.vue组件中调用上面的组件</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=<span class="string">"Home"</span>&gt;</span><br><span class="line">    &lt;span @click=<span class="string">"num--"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"sub"</span>&gt;-&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">    &lt;input type="text" size="1" v-model="num"&gt;</span></span><br><span class="line"><span class="regexp">    &lt;span @click="num++" class="add"&gt;+&lt;/</span>span&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    name:<span class="string">"Home"</span>,</span><br><span class="line">    data: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        num:<span class="number">0</span>,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;style scoped&gt;</span></span><br><span class="line"><span class="regexp">  .sub,.add&#123;</span></span><br><span class="line"><span class="regexp">    border: 1px solid red;</span></span><br><span class="line"><span class="regexp">    padding: 4px 7px;</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&lt;/</span>style&gt;</span><br></pre></td></tr></table></figure>

<p>在开发vue项目之前，需要手动把 App.vue的HelloWorld组件代码以及默认的css样式，清楚。</p>
<p>上面的代码效果：</p>
<p><img src="/images/1552362182984.png" alt=""></p>
<h3 id="7-4-组件的嵌套"><a href="#7-4-组件的嵌套" class="headerlink" title="7.4 组件的嵌套"></a>7.4 组件的嵌套</h3><p>有时候开发vue项目时,页面也可以算是一个大组件,同时页面也可以分成多个子组件.</p>
<p>因为,产生了父组件调用子组件的情况.</p>
<p>例如,我们可以声明一个组件,作为父组件</p>
<p>在components/创建一个保存子组件的目录HomeSon</p>
<p><img src="/images/1552363669256.png" alt=""></p>
<p>在HomeSon目录下,可以创建当前页面的子组件,例如,是Menu.vue</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  组件中代码必须写在同一个标签中</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div id=<span class="string">"menu"</span>&gt;</span><br><span class="line">      &lt;span&gt;&#123;&#123;msg&#125;&#125;&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">      &lt;div&gt;hello&lt;/</span>div&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    name:<span class="string">"Menu"</span>,</span><br><span class="line">    data: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        msg:<span class="string">"这是Menu组件里面的菜单"</span>,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>

<p>然后，在父组件中调用上面声明的子组件。</p>
<p><img src="/images/1552363770013.png" alt=""></p>
<p>最后,父组件被App.vue调用.就可以看到页面效果.</p>
<p><img src="/images/1552363834171.png" alt=""></p>
<p><img src="/images/1552363702858.png" alt=""></p>
<p>效果:</p>
<p><img src="/images/1552363849977.png" alt=""></p>
<h3 id="7-5-传递数据"><a href="#7-5-传递数据" class="headerlink" title="7.5 传递数据"></a>7.5 传递数据</h3><h3 id="父组件的数据传递给子组件"><a href="#父组件的数据传递给子组件" class="headerlink" title="父组件的数据传递给子组件"></a>父组件的数据传递给子组件</h3><p>例如,我们希望把父组件的数据传递给子组件.</p>
<p>可以通过props属性来进行数据传递.</p>
<p>传递数据三个步骤：</p>
<ol>
<li><p>在父组件中，调用子组件的组名处，使用属性值的方式往下传递数据</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Menu</span> <span class="attr">:mynum</span>=<span class="string">"num"</span> <span class="attr">title</span>=<span class="string">"home里面写的数据"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"># 上面表示在父组件调用Menu子组件的时候传递了2个数据：</span><br><span class="line">  如果要传递变量[变量可以各种类型的数据]，属性名左边必须加上冒号:，同时，属性名是自定义的，会在子组件中使用。</span><br><span class="line">  如果要传递普通字符串数据，则不需要加上冒号:</span><br></pre></td></tr></table></figure>
</li>
<li><p>在子组件中接受上面父组件传递的数据，需要在vm组件对象中，使用props属性类接受。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    name:<span class="string">"Menu"</span>,</span><br><span class="line">    props:[<span class="string">"mynum"</span>,<span class="string">"title"</span>],</span><br><span class="line">    data: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        msg:<span class="string">"这是Menu组件里面的菜单"</span>,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 上面 props属性中表示接受了两个数据。</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在子组件中的template中使用父组件传递过来的数据.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"menu"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;msg&#125;&#125;，&#123;&#123;title&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>hello，&#123;&#123;mynum&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>效果：</p>
<p><img src="/images/1552364511546.png" alt=""></p>
<p>步骤流程:</p>
<p><img src="/images/1552364590540.png" alt=""></p>
<p>使用父组件传递数据给子组件时, 注意一下几点:</p>
<ol>
<li><p>传递数据是变量,则需要在属性左边添加冒号.</p>
<p>传递数据是变量,这种数据称之为“动态数据传递”</p>
<p>传递数据不是变量,这种数据称之为“静态数据传递”</p>
</li>
<li><p>父组件中修改了数据,在子组件中会被同步修改,但是,子组件中的数据修改了,是不是影响到父组件中的数据.</p>
<p>这种情况,在开发时,也被称为“单向数据流”</p>
</li>
</ol>
<h3 id="子组件传递数据给父组件"><a href="#子组件传递数据给父组件" class="headerlink" title="子组件传递数据给父组件"></a>子组件传递数据给父组件</h3><ol>
<li><p>在子组件中，通过<code>this.$emit()</code>来调用父组件中定义的事件.</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;p&gt;Post的子组件&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">      &lt;h2&gt;&#123;&#123;fnum&#125;&#125;&lt;/</span>h2&gt;</span><br><span class="line">      &lt;p&gt;data=&#123;&#123;data&#125;&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">      &lt;p&gt;fnum=&#123;&#123;fnum&#125;&#125;&lt;/</span>p&gt;</span><br><span class="line">      &lt;div&gt;<span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"fnum"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">        name: <span class="string">"PostSon"</span>,</span><br><span class="line">        <span class="comment">// 父组件传递数据给子组件: 1. 在父组件中调用子组件的组件名称标签上面声明属性和传递值，2. 在子组件中通过props进行接收</span></span><br><span class="line">        props:[<span class="string">"data"</span>,<span class="string">"fnum"</span>],  <span class="comment">// 接受父组件中传递过来的数据</span></span><br><span class="line">        <span class="comment">// 子组件传递数据给父组件[事件的方式进行传递]：</span></span><br><span class="line">        watch:&#123;</span><br><span class="line">          fnum()&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.fnum);</span><br><span class="line">            <span class="comment">// this.$emit("父元素的自定义事件","要传递的数据");  // 通过this.$emit()方法，子组件可以把数据传递给父组件</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">this</span>.$emit(<span class="string">"postparentdata"</span>,<span class="keyword">this</span>.fnum);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;style scoped&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;/</span>style&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>父组件中声明一个和子组件中<code>this.$emit(&quot;自定义事件名称&quot;)</code>对应的事件属性。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>num=&#123;&#123;num&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">Son</span> <span class="attr">data</span>=<span class="string">"我是付组件里面的内容"</span> <span class="attr">:fnum</span>=<span class="string">"num"</span> @<span class="attr">postparentdata</span>=<span class="string">"getsondata"</span>&gt;</span><span class="tag">&lt;/<span class="name">Son</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>父组件中，声明一个自定义方法，在事件被调用时，执行的。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">import</span> Son <span class="keyword">from</span> <span class="string">"./PostSon"</span></span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">        name: <span class="string">"Post"</span>,</span><br><span class="line">        data()&#123;</span><br><span class="line">          <span class="keyword">return</span> &#123;</span><br><span class="line">            num: <span class="number">100</span>,</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        components:&#123;</span><br><span class="line">          Son:Son,</span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">          getsondata(message)&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"父组件"</span>+message);</span><br><span class="line">            <span class="keyword">this</span>.num = message;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="8-在组件中使用axios获取数据"><a href="#8-在组件中使用axios获取数据" class="headerlink" title="8. 在组件中使用axios获取数据"></a>8. 在组件中使用axios获取数据</h2><p>默认情况下，我们的项目中并没有对axios包的支持，所以我们需要下载安装。</p>
<p>在项目根目录中使用 npm安装包</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install axios</span><br></pre></td></tr></table></figure>

<p>接着在main.js文件中，导入axios并把axios对象 挂载到vue属性中多为一个子对象，这样我们才能在组件中使用。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">// The Vue build version to load <span class="keyword">with</span> the `<span class="keyword">import</span>` command</span><br><span class="line">// (runtime-only <span class="keyword">or</span> standalone) has been set <span class="keyword">in</span> webpack.base.conf <span class="keyword">with</span> an alias.</span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App'</span> // 这里表示从别的目录下导入 单文件组件</span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span>; // 从node_modules目录中导入包</span><br><span class="line">Vue.config.productionTip = false</span><br><span class="line"></span><br><span class="line">Vue.prototype.$axios = axios; // 把对象挂载vue中</span><br><span class="line"></span><br><span class="line">/* eslint-disable no-new */</span><br><span class="line">new Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  components: &#123; App &#125;,</span><br><span class="line">  template: <span class="string">'&lt;App/&gt;'</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="8-1-在组建中使用axios获取数据"><a href="#8-1-在组建中使用axios获取数据" class="headerlink" title="8.1 在组建中使用axios获取数据"></a>8.1 在组建中使用axios获取数据</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line">	。。。</span><br><span class="line">	methods:&#123;</span><br><span class="line">      get_data:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">         <span class="comment">// 使用axios请求数据</span></span><br><span class="line">        <span class="keyword">this</span>.$axios.get(<span class="string">"http://wthrcdn.etouch.cn/weather_mini?city=深圳"</span>).then(<span class="function">(<span class="params">response</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(response);</span><br><span class="line">        &#125;).catch(<span class="function"><span class="params">error</span>=&gt;</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(error);</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果:</p>
<p><img src="/images/1552202922168.png" alt=""></p>
<p>使用的时候，因为本质上来说，我们还是原来的axios，所以也会收到同源策略的影响。</p>
]]></content>
      <categories>
        <category>前端框架</category>
      </categories>
      <tags>
        <tag>vue框架</tag>
      </tags>
  </entry>
  <entry>
    <title>[vue对象的属性功能]</title>
    <url>/2020/02/23/vue%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%B1%9E%E6%80%A7%E5%8A%9F%E8%83%BD/</url>
    <content><![CDATA[<h1 id="3-Vue对象提供的属性功能"><a href="#3-Vue对象提供的属性功能" class="headerlink" title="3. Vue对象提供的属性功能"></a>3. Vue对象提供的属性功能</h1><h2 id="3-1-过滤器"><a href="#3-1-过滤器" class="headerlink" title="3.1 过滤器"></a>3.1 过滤器</h2><p>过滤器，就是vue允许开发者自定义的文本格式化函数，可以使用在两个地方：输出内容和操作数据中。</p>
<p>定义过滤器的方式有两种。</p>
<h3 id="3-1-1-使用Vue-filter-进行全局定义"><a href="#3-1-1-使用Vue-filter-进行全局定义" class="headerlink" title="3.1.1 使用Vue.filter()进行全局定义"></a>3.1.1 使用Vue.filter()进行全局定义</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">Vue.filter("RMB1", function(v)&#123;</span><br><span class="line">  	//就是来格式化(处理)v这个数据的</span><br><span class="line">  	if(v==0)&#123;</span><br><span class="line">    		return v</span><br><span class="line">  	&#125;</span><br><span class="line"></span><br><span class="line">  	return v+"元"</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="3-1-2-在vue对象中通过filters属性来定义"><a href="#3-1-2-在vue对象中通过filters属性来定义" class="headerlink" title="3.1.2 在vue对象中通过filters属性来定义"></a>3.1.2 在vue对象中通过filters属性来定义</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">var vm = new Vue(&#123;</span><br><span class="line">  el:"#app",</span><br><span class="line">  data:&#123;&#125;,</span><br><span class="line">  filters:&#123;</span><br><span class="line">    RMB2:function(value)&#123;</span><br><span class="line">      if(value=='')&#123;</span><br><span class="line">        return;</span><br><span class="line">      &#125;else&#123;</span><br><span class="line">      	return '¥ '+value;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="3-4-计算和侦听属性"><a href="#3-4-计算和侦听属性" class="headerlink" title="3.4 计算和侦听属性"></a>3.4 计算和侦听属性</h2><h3 id="3-4-1-计算属性"><a href="#3-4-1-计算属性" class="headerlink" title="3.4.1 计算属性"></a>3.4.1 计算属性</h3><p>我们之前学习过字符串反转，如果直接把反转的代码写在元素中，则会使得其他同事在开发时时不易发现数据被调整了，所以vue提供了一个计算属性(computed)，可以让我们把调整data数据的代码存在在该属性中。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/vue.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">		<span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el:<span class="string">"#app"</span>,</span></span><br><span class="line">            data:&#123;</span><br><span class="line"><span class="actionscript">                str1: <span class="string">"abcdefgh"</span></span></span><br><span class="line">            &#125;,</span><br><span class="line"><span class="actionscript">            computed:&#123;   <span class="comment">//计算属性：里面的函数都必须有返回值</span></span></span><br><span class="line"><span class="actionscript">                strRevs: <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">var</span> ret = <span class="keyword">this</span>.str1.split(<span class="string">""</span>).reverse().join(<span class="string">""</span>);</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">return</span> ret</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; str1 &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; strRevs &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3-4-2-监听属性"><a href="#3-4-2-监听属性" class="headerlink" title="3.4.2 监听属性"></a>3.4.2 监听属性</h3><p>侦听属性，可以帮助我们侦听data某个数据的变化，从而做相应的自定义操作。</p>
<p>侦听属性是一个对象，它的键是要监听的对象或者变量，值一般是函数，当侦听的data数据发生变化时，会自定执行的对应函数，这个函数在被调用时，vue会传入两个形参，第一个是变化前的数据值，第二个是变化后的数据值。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/vue.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="actionscript">         <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el:<span class="string">"#app"</span>,</span></span><br><span class="line">            data:&#123;</span><br><span class="line">                num:20</span><br><span class="line">            &#125;,</span><br><span class="line">            watch:&#123;</span><br><span class="line"><span class="actionscript">                num:<span class="function"><span class="keyword">function</span><span class="params">(newval,oldval)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">                    <span class="comment">//num发生变化的时候，要执行的代码</span></span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(<span class="string">"num已经发生了变化！"</span>);</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; num &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"num++"</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="3-5-vue对象的生命周期"><a href="#3-5-vue对象的生命周期" class="headerlink" title="3.5 vue对象的生命周期"></a>3.5 vue对象的生命周期</h2><p>每个Vue对象在创建时都要经过一系列的初始化过程。在这个过程中Vue.js会自动运行一些叫做生命周期的的钩子函数，我们可以使用这些函数，在对象创建的不同阶段加上我们需要的代码，实现特定的功能。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">    &lt;script src="js/</span>vue.min.js<span class="string">"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">    &lt;script&gt;</span></span><br><span class="line"><span class="string">    window.onload = function()&#123;</span></span><br><span class="line"><span class="string">        var vm = new Vue(&#123;</span></span><br><span class="line">            el:"#app",</span><br><span class="line">            data:&#123;</span><br><span class="line">                num:<span class="number">0</span></span><br><span class="line">            &#125;,</span><br><span class="line">            beforeCreate:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"beforeCreate,vm对象尚未创建,num="</span>+ <span class="keyword">this</span>.num);  <span class="comment">//undefined</span></span><br><span class="line">                <span class="keyword">this</span>.name=<span class="number">10</span>; <span class="comment">// 此时没有this对象呢，所以设置的name无效，被在创建对象的时候被覆盖为0</span></span><br><span class="line">            &#125;,</span><br><span class="line">            created:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"created,vm对象创建完成,设置好了要控制的元素范围,num="</span>+<span class="keyword">this</span>.num );  <span class="comment">// 0</span></span><br><span class="line">                <span class="keyword">this</span>.num = <span class="number">20</span>;</span><br><span class="line">            &#125;,</span><br><span class="line">            beforeMount:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log( <span class="keyword">this</span>.$el.innerHTML ); <span class="comment">// &lt;p&gt;&#123;&#123;num&#125;&#125;&lt;/p&gt;</span></span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"beforeMount,vm对象尚未把data数据显示到页面中,num="</span>+<span class="keyword">this</span>.num ); <span class="comment">// 20</span></span><br><span class="line">                <span class="keyword">this</span>.num = <span class="number">30</span>;</span><br><span class="line">            &#125;,</span><br><span class="line">            mounted:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log( <span class="keyword">this</span>.$el.innerHTML ); <span class="comment">// &lt;p&gt;30&lt;/p&gt;</span></span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"mounted,vm对象已经把data数据显示到页面中,num="</span>+<span class="keyword">this</span>.num); <span class="comment">// 30</span></span><br><span class="line">            &#125;,</span><br><span class="line">            beforeUpdate:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="comment">// this.$el 就是我们上面的el属性了，$el表示当前vue.js所控制的元素#app</span></span><br><span class="line">                <span class="built_in">console</span>.log( <span class="keyword">this</span>.$el.innerHTML );  <span class="comment">// &lt;p&gt;30&lt;/p&gt;</span></span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"beforeUpdate,vm对象尚未把更新后的data数据显示到页面中,num="</span>+<span class="keyword">this</span>.num); <span class="comment">// beforeUpdate----31</span></span><br><span class="line">                </span><br><span class="line">            &#125;,</span><br><span class="line">            updated:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log( <span class="keyword">this</span>.$el.innerHTML ); <span class="comment">// &lt;p&gt;31&lt;/p&gt;</span></span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"updated,vm对象已经把过呢更新后的data数据显示到页面中,num="</span> + <span class="keyword">this</span>.num ); <span class="comment">// updated----31</span></span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">        &lt;p&gt;&#123;&#123;num&#125;&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">        &lt;button @click="num++"&gt;按钮&lt;/</span>button&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure>

<p>总结：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在vue使用的过程中，如果要初始化操作，把初始化操作的代码放在 mounted 中执行。</span><br><span class="line">mounted阶段就是在vm对象已经把data数据实现到页面以后。一般页面初始化使用。例如，用户访问页面加载成功以后，就要执行的ajax请求。</span><br><span class="line"></span><br><span class="line">另一个就是created，这个阶段就是在 vue对象创建以后，把ajax请求后端数据的代码放进 created</span><br></pre></td></tr></table></figure>

<h2 id="3-2-阻止事件冒泡和刷新页面"><a href="#3-2-阻止事件冒泡和刷新页面" class="headerlink" title="3.2 阻止事件冒泡和刷新页面"></a>3.2 阻止事件冒泡和刷新页面</h2><p>事件冒泡：指代js中子元素的事件触发以后，会导致父级元素的同类事件一并被触发到。</p>
<p>事件冒泡有好处，也有坏处。</p>
<p>好处：如果能正确利用这种现象，可以实现事件委托，提升特效的性能</p>
<p>坏处：如果没有正确使用，则会导致不必要的bug出现。</p>
<p>使用.stop和.prevent</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.box1</span>&#123;</span></span><br><span class="line">            width: 200px;</span><br><span class="line">            height: 200px;</span><br><span class="line"><span class="css">            <span class="selector-tag">background</span>: <span class="selector-id">#ccc</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.box2</span>&#123;</span></span><br><span class="line">            width: 100px;</span><br><span class="line">            height: 100px;</span><br><span class="line">            background: pink;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/vue.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el:<span class="string">"#app"</span>,</span></span><br><span class="line">            data:&#123;&#125;</span><br><span class="line">        &#125;)        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box1"</span> @<span class="attr">click</span>=<span class="string">"alert('box1')"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box2"</span> @<span class="attr">click.stop.prevent</span>=<span class="string">"alert('box2')"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>   <span class="comment">&lt;!-- @click.stop来阻止事件冒泡 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"#"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交02"</span> @<span class="attr">click.prevent</span>=<span class="string">""</span>&gt;</span> <span class="comment">&lt;!-- @click.prevent来阻止表单提交 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="3-3-综合案例-todolist"><a href="#3-3-综合案例-todolist" class="headerlink" title="3.3 综合案例-todolist"></a>3.3 综合案例-todolist</h2><p>我的计划列表</p>
<p>html代码:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>todolist<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css">		<span class="selector-class">.list_con</span>&#123;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">width</span><span class="selector-pseudo">:600px</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">margin</span><span class="selector-pseudo">:50px</span> <span class="selector-tag">auto</span> 0;</span></span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="selector-class">.inputtxt</span>&#123;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">width</span><span class="selector-pseudo">:550px</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">height</span><span class="selector-pseudo">:30px</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">border</span><span class="selector-pseudo">:1px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ccc</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">padding</span><span class="selector-pseudo">:0px</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">text-indent</span><span class="selector-pseudo">:10px</span>;</span></span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="selector-class">.inputbtn</span>&#123;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">width</span><span class="selector-pseudo">:40px</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">height</span><span class="selector-pseudo">:32px</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">padding</span><span class="selector-pseudo">:0px</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">border</span><span class="selector-pseudo">:1px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ccc</span>;</span></span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="selector-class">.list</span>&#123;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">margin</span><span class="selector-pseudo">:0</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">padding</span><span class="selector-pseudo">:0</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">list-style</span><span class="selector-pseudo">:none</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">margin-top</span><span class="selector-pseudo">:20px</span>;</span></span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="selector-class">.list</span> <span class="selector-tag">li</span>&#123;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">height</span><span class="selector-pseudo">:40px</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">line-height</span><span class="selector-pseudo">:40px</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">border-bottom</span><span class="selector-pseudo">:1px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ccc</span>;</span></span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line"><span class="css">		<span class="selector-class">.list</span> <span class="selector-tag">li</span> <span class="selector-tag">span</span>&#123;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">float</span><span class="selector-pseudo">:left</span>;</span></span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line"><span class="css">		<span class="selector-class">.list</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span>&#123;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">float</span><span class="selector-pseudo">:right</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">text-decoration</span><span class="selector-pseudo">:none</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">margin</span><span class="selector-pseudo">:0</span> 10<span class="selector-tag">px</span>;</span></span><br><span class="line">		&#125;</span><br><span class="line">	<span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list_con"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">h2</span>&gt;</span>To do list<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">"txt1"</span> <span class="attr">class</span>=<span class="string">"inputtxt"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">"增加"</span> <span class="attr">id</span>=<span class="string">"btn1"</span> <span class="attr">class</span>=<span class="string">"inputbtn"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"list"</span> <span class="attr">class</span>=<span class="string">"list"</span>&gt;</span></span><br><span class="line">			<span class="comment">&lt;!-- javascript:; # 阻止a标签跳转 --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">span</span>&gt;</span>学习html<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">class</span>=<span class="string">"up"</span>&gt;</span> ↑ <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">class</span>=<span class="string">"down"</span>&gt;</span> ↓ <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">class</span>=<span class="string">"del"</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>学习css<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">class</span>=<span class="string">"up"</span>&gt;</span> ↑ <span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">class</span>=<span class="string">"down"</span>&gt;</span> ↓ <span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">class</span>=<span class="string">"del"</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>学习javascript<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">class</span>=<span class="string">"up"</span>&gt;</span> ↑ <span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">class</span>=<span class="string">"down"</span>&gt;</span> ↓ <span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">class</span>=<span class="string">"del"</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>特效实现效果：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>todolist<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css">		<span class="selector-class">.list_con</span>&#123;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">width</span><span class="selector-pseudo">:600px</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">margin</span><span class="selector-pseudo">:50px</span> <span class="selector-tag">auto</span> 0;</span></span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="selector-class">.inputtxt</span>&#123;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">width</span><span class="selector-pseudo">:550px</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">height</span><span class="selector-pseudo">:30px</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">border</span><span class="selector-pseudo">:1px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ccc</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">padding</span><span class="selector-pseudo">:0px</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">text-indent</span><span class="selector-pseudo">:10px</span>;</span></span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="selector-class">.inputbtn</span>&#123;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">width</span><span class="selector-pseudo">:40px</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">height</span><span class="selector-pseudo">:32px</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">padding</span><span class="selector-pseudo">:0px</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">border</span><span class="selector-pseudo">:1px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ccc</span>;</span></span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="selector-class">.list</span>&#123;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">margin</span><span class="selector-pseudo">:0</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">padding</span><span class="selector-pseudo">:0</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">list-style</span><span class="selector-pseudo">:none</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">margin-top</span><span class="selector-pseudo">:20px</span>;</span></span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="selector-class">.list</span> <span class="selector-tag">li</span>&#123;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">height</span><span class="selector-pseudo">:40px</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">line-height</span><span class="selector-pseudo">:40px</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">border-bottom</span><span class="selector-pseudo">:1px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ccc</span>;</span></span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line"><span class="css">		<span class="selector-class">.list</span> <span class="selector-tag">li</span> <span class="selector-tag">span</span>&#123;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">float</span><span class="selector-pseudo">:left</span>;</span></span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line"><span class="css">		<span class="selector-class">.list</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span>&#123;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">float</span><span class="selector-pseudo">:right</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">text-decoration</span><span class="selector-pseudo">:none</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">margin</span><span class="selector-pseudo">:0</span> 10<span class="selector-tag">px</span>;</span></span><br><span class="line">		&#125;</span><br><span class="line">	<span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"todolist"</span> <span class="attr">class</span>=<span class="string">"list_con"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">h2</span>&gt;</span>To do list<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"message"</span> <span class="attr">class</span>=<span class="string">"inputtxt"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> @<span class="attr">click</span>=<span class="string">"addItem"</span> <span class="attr">value</span>=<span class="string">"增加"</span> <span class="attr">class</span>=<span class="string">"inputbtn"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"list"</span> <span class="attr">class</span>=<span class="string">"list"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"item,key in dolist"</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">a</span> @<span class="attr">click</span>=<span class="string">"upItem(key)"</span> <span class="attr">class</span>=<span class="string">"up"</span> &gt;</span> ↑ <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">a</span> @<span class="attr">click</span>=<span class="string">"downItem(key)"</span> <span class="attr">class</span>=<span class="string">"down"</span>&gt;</span> ↓ <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">a</span> @<span class="attr">click</span>=<span class="string">"delItem(key)"</span> <span class="attr">class</span>=<span class="string">"del"</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 计划列表代码</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el:<span class="string">"#todolist"</span>,</span></span><br><span class="line">        data:&#123;</span><br><span class="line"><span class="actionscript">            message:<span class="string">""</span>,</span></span><br><span class="line">            dolist:[</span><br><span class="line"><span class="actionscript">                <span class="string">"学习html"</span>,</span></span><br><span class="line"><span class="actionscript">                <span class="string">"学习css"</span>,</span></span><br><span class="line"><span class="actionscript">                <span class="string">"学习javascript"</span>,</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">            addItem()&#123;</span><br><span class="line"><span class="actionscript">                <span class="keyword">if</span>(<span class="keyword">this</span>.messsage==<span class="string">""</span>)&#123;</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.dolist.push(<span class="keyword">this</span>.message);</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.message = <span class="string">""</span></span></span><br><span class="line">            &#125;,</span><br><span class="line">            delItem(key)&#123;</span><br><span class="line"><span class="actionscript">                <span class="comment">// 删除和替换</span></span></span><br><span class="line"><span class="actionscript">                <span class="comment">// 参数1: 开始下表</span></span></span><br><span class="line"><span class="actionscript">                <span class="comment">// 参数2: 元素长度，如果不填默认删除到最后</span></span></span><br><span class="line"><span class="actionscript">                <span class="comment">// 参数3: 表示使用当前参数替换已经删除内容的位置</span></span></span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.dolist.splice(key, <span class="number">1</span>);</span></span><br><span class="line">            &#125;,</span><br><span class="line">            upItem(key)&#123;</span><br><span class="line">                if(key==0)&#123;</span><br><span class="line"><span class="actionscript">                    <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line">                &#125;</span><br><span class="line"><span class="actionscript">                <span class="comment">// 向上移动</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">let</span> result = <span class="keyword">this</span>.dolist.splice(key,<span class="number">1</span>);</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.dolist.splice(key<span class="number">-1</span>,<span class="number">0</span>,result[<span class="number">0</span>]);</span></span><br><span class="line">            &#125;,</span><br><span class="line">            downItem(key)&#123;</span><br><span class="line"><span class="actionscript">                <span class="comment">// 向下移动</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">let</span> result = <span class="keyword">this</span>.dolist.splice(key, <span class="number">1</span>);</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(result);</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.dolist.splice(key+<span class="number">1</span>,<span class="number">0</span>,result[<span class="number">0</span>]);</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端框架</category>
      </categories>
      <tags>
        <tag>vue框架</tag>
      </tags>
  </entry>
  <entry>
    <title>[Sentinel]</title>
    <url>/2020/06/21/Sentinel/</url>
    <content><![CDATA[<h2 id="一-主从复制高可用"><a href="#一-主从复制高可用" class="headerlink" title="一 主从复制高可用"></a>一 主从复制高可用</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#主从复制存在的问题：</span></span><br><span class="line"><span class="comment">#1 主从复制，主节点发生故障，需要做故障转移，可以手动转移：让其中一个slave变成master</span></span><br><span class="line"><span class="comment">#2 主从复制，只能主写数据，所以写能力和存储能力有限</span></span><br></pre></td></tr></table></figure>

<h2 id="二-架构说明"><a href="#二-架构说明" class="headerlink" title="二 架构说明"></a>二 架构说明</h2><p>可以做故障判断，故障转移，通知客户端（其实是一个进程），客户端直接连接sentinel的地址</p>
<img src="https://tva1.sinaimg.cn/large/006tNbRwgy1gadzuhodicj30oe0dc0y9.jpg" alt="image-20191229230823911" style="zoom:50%;" />

<p>1 多个sentinel发现并确认master有问题</p>
<p>2 选举触一个sentinel作为领导</p>
<p>3 选取一个slave作为新的master</p>
<p>4 通知其余slave成为新的master的slave</p>
<p>5 通知客户端主从变化</p>
<p>6 等待老的master复活成为新master的slave</p>
<h2 id="三-安装配置"><a href="#三-安装配置" class="headerlink" title="三 安装配置"></a>三 安装配置</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> 配置开启主从节点</span><br><span class="line"><span class="number">2</span> 配置开启sentinel监控主节点（sentinel是特殊的redis）</span><br><span class="line"><span class="number">3</span> 应该是多台机器</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#配置开启sentinel监控主节点</span></span><br><span class="line">mkdir -p redis4/conf redis4/data redis5/conf redis5/data redis6/data redis6/conf</span><br><span class="line"></span><br><span class="line">vi sentinel.conf</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">port <span class="number">26379</span></span><br><span class="line">daemonize yes</span><br><span class="line">dir data</span><br><span class="line">protected-mode no</span><br><span class="line">bind <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line">logfile <span class="string">"redis_sentinel.log"</span></span><br><span class="line">sentinel monitor mymaster <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> <span class="number">6379</span> <span class="number">2</span></span><br><span class="line">sentinel down-after-milliseconds mymaster <span class="number">30000</span></span><br><span class="line">sentinel parallel-syncs mymaster <span class="number">1</span></span><br><span class="line">sentinel failover-timeout mymaster <span class="number">180000</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">docker run -p <span class="number">26379</span>:<span class="number">26379</span> --name redis_26379 -v /home/redis4/conf/sentinel.conf:/etc/redis/sentinel.conf -v /home/redis4/data:/data -d redis redis-sentinel /etc/redis/sentinel.conf</span><br><span class="line"></span><br><span class="line">docker run -p <span class="number">26378</span>:<span class="number">26379</span> --name redis_26378 -v /home/redis5/conf/sentinel.conf:/etc/redis/sentinel.conf -v /home/redis5/data:/data -d redis redis-sentinel /etc/redis/sentinel.conf</span><br><span class="line"></span><br><span class="line">docker run -p <span class="number">26377</span>:<span class="number">26379</span> --name redis_26377 -v /home/redis6/conf/sentinel.conf:/etc/redis/sentinel.conf -v /home/redis6/data:/data -d redis redis-sentinel /etc/redis/sentinel.conf</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">redis-sentinel sentinel.conf</span><br><span class="line"></span><br><span class="line">info</span><br><span class="line">配置会重写，自动发现slave</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sentinel monitor mymaster <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> <span class="number">6379</span> <span class="number">2</span></span><br><span class="line">sentinel down-after-milliseconds mymaster <span class="number">30000</span></span><br><span class="line">sentinel parallel-syncs mymaster <span class="number">1</span></span><br><span class="line">sentinel failover-timeout mymaster <span class="number">180000</span></span><br><span class="line">sentinel monitor &lt;master-name&gt; &lt;ip&gt; &lt;redis-port&gt; &lt;quorum&gt;</span><br><span class="line">告诉sentinel去监听地址为ip:port的一个master，这里的master-name可以自定义，quorum是一个数字，指明当有多少个sentinel认为一个master失效时，master才算真正失效</span><br><span class="line"></span><br><span class="line">sentinel auth-<span class="keyword">pass</span> &lt;master-name&gt; &lt;password&gt;</span><br><span class="line">设置连接master和slave时的密码，注意的是sentinel不能分别为master和slave设置不同的密码，因此master和slave的密码应该设置相同。</span><br><span class="line"></span><br><span class="line">sentinel down-after-milliseconds &lt;master-name&gt; &lt;milliseconds&gt; </span><br><span class="line">这个配置项指定了需要多少失效时间，一个master才会被这个sentinel主观地认为是不可用的。 单位是毫秒，默认为<span class="number">30</span>秒</span><br><span class="line"></span><br><span class="line">sentinel parallel-syncs &lt;master-name&gt; &lt;numslaves&gt; </span><br><span class="line">这个配置项指定了在发生failover主备切换时最多可以有多少个slave同时对新的master进行 同步，这个数字越小，完成failover所需的时间就越长，但是如果这个数字越大，就意味着越 多的slave因为replication而不可用。可以通过将这个值设为 <span class="number">1</span> 来保证每次只有一个slave 处于不能处理命令请求的状态。</span><br><span class="line"></span><br><span class="line">sentinel failover-timeout &lt;master-name&gt; &lt;milliseconds&gt;</span><br><span class="line">failover-timeout 可以用在以下这些方面：     </span><br><span class="line"><span class="number">1.</span> 同一个sentinel对同一个master两次failover之间的间隔时间。   </span><br><span class="line"><span class="number">2.</span> 当一个slave从一个错误的master那里同步数据开始计算时间。直到slave被纠正为向正确的master那里同步数据时。    </span><br><span class="line"><span class="number">3.</span>当想要取消一个正在进行的failover所需要的时间。    </span><br><span class="line"><span class="number">4.</span>当进行failover时，配置所有slaves指向新的master所需的最大时间。不过，即使过了这个超时，slaves依然会被正确配置为指向master，但是就不按parallel-syncs所配置的规则来了。</span><br></pre></td></tr></table></figure>



<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> 搭一个一主两从</span><br><span class="line"><span class="comment">#创建三个配置文件：</span></span><br><span class="line"><span class="comment">#第一个是主配置文件</span></span><br><span class="line">daemonize yes</span><br><span class="line">pidfile /var/run/redis.pid</span><br><span class="line">port <span class="number">6379</span></span><br><span class="line">dir <span class="string">"/opt/soft/redis/data"</span></span><br><span class="line">logfile “<span class="number">6379.l</span>og”</span><br><span class="line"></span><br><span class="line"><span class="comment">#第二个是从配置文件</span></span><br><span class="line">daemonize yes</span><br><span class="line">pidfile /var/run/redis2.pid</span><br><span class="line">port <span class="number">6378</span></span><br><span class="line">dir <span class="string">"/opt/soft/redis/data2"</span></span><br><span class="line">logfile “<span class="number">6378.l</span>og”</span><br><span class="line">slaveof <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> <span class="number">6379</span></span><br><span class="line">slave-read-only yes</span><br><span class="line"><span class="comment">#第三个是从配置文件</span></span><br><span class="line">daemonize yes</span><br><span class="line">pidfile /var/run/redis3.pid</span><br><span class="line">port <span class="number">6377</span></span><br><span class="line">dir <span class="string">"/opt/soft/redis/data3"</span></span><br><span class="line">logfile “<span class="number">6377.l</span>og”</span><br><span class="line">slaveof <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> <span class="number">6379</span></span><br><span class="line">slave-read-only yes</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#把三个redis服务都启动起来</span></span><br><span class="line">./src/redis-server redis_6379.conf</span><br><span class="line">./src/redis-server redis_6378.conf</span><br><span class="line">./src/redis-server redis_6377.conf</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">2</span> 搭建哨兵</span><br><span class="line"><span class="comment"># sentinel.conf这个文件</span></span><br><span class="line"><span class="comment"># 把哨兵也当成一个redis服务器</span></span><br><span class="line">创建三个配置文件分别叫sentinel_26379.conf sentinel_26378.conf  sentinel_26377.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 当前路径下创建 data1 data2 data3 个文件夹</span></span><br><span class="line"><span class="comment">#内容如下(需要修改端口，文件地址日志文件名字)</span></span><br><span class="line">port <span class="number">26379</span></span><br><span class="line">daemonize yes</span><br><span class="line">dir ./data3</span><br><span class="line">protected-mode no</span><br><span class="line">bind <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line">logfile <span class="string">"redis_sentinel3.log"</span></span><br><span class="line">sentinel monitor mymaster <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> <span class="number">6379</span> <span class="number">2</span></span><br><span class="line">sentinel down-after-milliseconds mymaster <span class="number">30000</span></span><br><span class="line">sentinel parallel-syncs mymaster <span class="number">1</span></span><br><span class="line">sentinel failover-timeout mymaster <span class="number">180000</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#启动三个哨兵</span></span><br><span class="line">./src/redis-sentinel sentinel_26379.conf</span><br><span class="line">./src/redis-sentinel sentinel_26378.conf</span><br><span class="line">./src/redis-sentinel sentinel_26377.conf</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 登陆哨兵</span></span><br><span class="line">./src/redis-cli -p <span class="number">26377</span></span><br><span class="line"><span class="comment"># 输入 info</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 查看哨兵的配置文件被修改了，自动生成的</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 主动停掉主redis 6379，哨兵会自动选择一个从库作为主库</span></span><br><span class="line">redis-cli -p <span class="number">6379</span></span><br><span class="line">shutdown</span><br><span class="line"><span class="comment">#等待原来的主库启动，该主库会变成从库</span></span><br></pre></td></tr></table></figure>
<h2 id="四-客户端连接"><a href="#四-客户端连接" class="headerlink" title="四 客户端连接"></a>四 客户端连接</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> redis</span><br><span class="line"><span class="keyword">from</span> redis.sentinel <span class="keyword">import</span> Sentinel</span><br><span class="line"></span><br><span class="line"><span class="comment"># 连接哨兵服务器(主机名也可以用域名)</span></span><br><span class="line"><span class="comment"># 10.0.0.101:26379</span></span><br><span class="line">sentinel = Sentinel([(<span class="string">'10.0.0.101'</span>, <span class="number">26379</span>),</span><br><span class="line">                     (<span class="string">'10.0.0.101'</span>, <span class="number">26378</span>),</span><br><span class="line">                     (<span class="string">'10.0.0.101'</span>, <span class="number">26377</span>)</span><br><span class="line">		     ],</span><br><span class="line">                    socket_timeout=<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(sentinel)</span><br><span class="line"><span class="comment"># 获取主服务器地址</span></span><br><span class="line">master = sentinel.discover_master(<span class="string">'mymaster'</span>)</span><br><span class="line">print(master)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取从服务器地址</span></span><br><span class="line">slave = sentinel.discover_slaves(<span class="string">'mymaster'</span>)</span><br><span class="line">print(slave)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取主服务器进行写入</span></span><br><span class="line"><span class="comment"># master = sentinel.master_for('mymaster', socket_timeout=0.5)</span></span><br><span class="line"><span class="comment"># w_ret = master.set('foo', 'bar')</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># slave = sentinel.slave_for('mymaster', socket_timeout=0.5)</span></span><br><span class="line"><span class="comment"># r_ret = slave.get('foo')</span></span><br><span class="line"><span class="comment"># print(r_ret)</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>[vue客户端项目搭建]</title>
    <url>/2020/02/26/vue%E5%AE%A2%E6%88%B7%E7%AB%AF%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h1 id="2-客户端项目搭建"><a href="#2-客户端项目搭建" class="headerlink" title="2. 客户端项目搭建"></a>2. 客户端项目搭建</h1><h2 id="2-1-创建项目目录"><a href="#2-1-创建项目目录" class="headerlink" title="2.1 创建项目目录"></a>2.1 创建项目目录</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> 项目目录[荏苒资讯]</span><br><span class="line">vue init webpack renran</span><br></pre></td></tr></table></figure>

<p>例如，我要把项目保存在桌面下的子目录renran ~/Desktop/renran，可以如下操作：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> Desktop/renran</span><br><span class="line">vue init webpack renran_pc</span><br></pre></td></tr></table></figure>

<p><img src="/images/1581901045861.png" alt=""></p>
<p>打开项目已经，在pycharm的终端下运行vue项目，查看效果。</p>
<p><img src="/images/1581901177538.png" alt=""></p>
<p><img src="/images/1581901225429.png" alt=""></p>
<p>上面的操作步骤，等同于执行了下面这句命令。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure>

<p>接下来，我们根据终端上效果显示的对应地址来访问项目(如果有多个vue项目在运行，8080端口被占据了，服务器会自动改端口，所以根据自己实际在操作中看到的地址来访问。)</p>
<p>访问：<a href="http://localost:8080" target="_blank" rel="noopener">http://localost:8080</a></p>
<p><img src="/images/1581901294089.png" alt=""></p>
<h2 id="2-2-初始化项目"><a href="#2-2-初始化项目" class="headerlink" title="2.2 初始化项目"></a>2.2 初始化项目</h2><p>清除默认的HelloWorld.vue组件和APP.vue中的默认模板代码和默认css样式</p>
<p><img src="/images/1581901419680.png" alt=""></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line"></span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  name: <span class="string">'App'</span>,</span><br><span class="line">  components: &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;style&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;/</span>style&gt;</span><br></pre></td></tr></table></figure>

<p>接下来，我们可以查看效果了，一张白纸~</p>
<p><img src="/images/1556414476287.png" alt=""></p>
<h2 id="2-3-安装路由vue-router"><a href="#2-3-安装路由vue-router" class="headerlink" title="2.3 安装路由vue-router"></a>2.3 安装路由vue-router</h2><p>官方文档：<a href="https://router.vuejs.org/zh/" target="_blank" rel="noopener">https://router.vuejs.org/zh/</a></p>
<h3 id="2-3-1-下载安装路由组件"><a href="#2-3-1-下载安装路由组件" class="headerlink" title="2.3.1 下载安装路由组件"></a>2.3.1 下载安装路由组件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i vue-router -S<span class="comment"># npm install vue-router --save</span></span><br></pre></td></tr></table></figure>

<h3 id="2-3-2-配置路由"><a href="#2-3-2-配置路由" class="headerlink" title="2.3.2 配置路由"></a>2.3.2 配置路由</h3><h3 id="2-3-2-1-初始化路由对象"><a href="#2-3-2-1-初始化路由对象" class="headerlink" title="2.3.2.1 初始化路由对象"></a>2.3.2.1 初始化路由对象</h3><p>在src目录下创建routes路由目录，在router目录下创建index.js路由文件</p>
<p>index.js路由文件中，编写初始化路由对象的代码 .</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">// <span class="number">1.</span> 引入vue和vue-router组件核心对象，并在vue中通过use注册vue-router组件</span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">"vue"</span>;</span><br><span class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">"vue-router"</span>;</span><br><span class="line"></span><br><span class="line">Vue.use(Router);</span><br><span class="line"></span><br><span class="line">// <span class="number">2.</span> 暴露vue-router对象，并在vue-router里面编写路由，提供给main.js调用</span><br><span class="line">export default new Router(&#123;</span><br><span class="line">  // 设置路由模式为‘history’，去掉默认的<span class="comment">#</span></span><br><span class="line">  mode: <span class="string">"history"</span>,</span><br><span class="line">  routes:[</span><br><span class="line">    // 路由列表</span><br><span class="line">	</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="2-3-2-2-注册路由信息"><a href="#2-3-2-2-注册路由信息" class="headerlink" title="2.3.2.2 注册路由信息"></a>2.3.2.2 注册路由信息</h3><p>打开main.js文件，把router路由规则对象注册到vue中，代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">// The Vue build version to load <span class="keyword">with</span> the `<span class="keyword">import</span>` command</span><br><span class="line">// (runtime-only <span class="keyword">or</span> standalone) has been set <span class="keyword">in</span> webpack.base.conf <span class="keyword">with</span> an alias.</span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App'</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">'./router/index'</span>;</span><br><span class="line"></span><br><span class="line">Vue.config.productionTip = false</span><br><span class="line"></span><br><span class="line">/* eslint-disable no-new */</span><br><span class="line">new Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  router,</span><br><span class="line">  components: &#123; App &#125;,</span><br><span class="line">  template: <span class="string">'&lt;App/&gt;'</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="2-3-2-3-在视图中显示路由对应的内容"><a href="#2-3-2-3-在视图中显示路由对应的内容" class="headerlink" title="2.3.2.3 在视图中显示路由对应的内容"></a>2.3.2.3 在视图中显示路由对应的内容</h3><p>在App.vue组件中，添加显示路由对应的内容。代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 标签名必须是这个rouer-view --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">  name: <span class="string">'App'</span>,</span></span><br><span class="line">  components: &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>注意：如果在vue创建项目的时候，设置安装vue-router，则项目会自动帮我们生成上面的router目录和index.js里面的代码，以及自动到main.js里面注册路由对象。</p>
<h3 id="2-3-3-路由对象提供的操作"><a href="#2-3-3-路由对象提供的操作" class="headerlink" title="2.3.3 路由对象提供的操作"></a>2.3.3 路由对象提供的操作</h3><p>在我们安装注册了vue-router组件以后，vue-router在vue项目中会帮我们在全局范围内所有组件里面创建2个对象给我们使用：</p>
<ol>
<li><code>this.$router</code>，可用于在js代码中进行页面跳转。</li>
<li><code>this.$route</code>，可用于获取地址栏上面的url参数。</li>
</ol>
<h3 id="2-3-3-1-页面跳转"><a href="#2-3-3-1-页面跳转" class="headerlink" title="2.3.3.1 页面跳转"></a>2.3.3.1 页面跳转</h3><p>在vue-router提供的操作中， 进行页面跳转有2种方式：</p>
<ol>
<li><p>使用<code>&lt;router-link to=&quot;url地址&quot;&gt;</code>来跳转</p>
</li>
<li><p>在<code>&lt;script&gt;</code>中使用<code>this.$router.push(url地址)</code>来跳转</p>
<p>在<code>&lt;script&gt;</code>中还可以使用<code>this.$router.go(整数)</code>，表示跳转返回上一页或者上几页，下一个或者下几页</p>
</li>
</ol>
<h3 id="2-3-3-1-1-router-link标签"><a href="#2-3-3-1-1-router-link标签" class="headerlink" title="2.3.3.1.1 router-link标签"></a>2.3.3.1.1 router-link标签</h3><p>例如，我们就可以在Home.vue组件中，使用router-link跳转到User.vue组件中。</p>
<p>routes/index.js，代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">// <span class="number">1.</span> 引入vue和vue-router组件核心对象，并在vue中通过use注册vue-router组件</span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">"vue"</span>;</span><br><span class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">"vue-router"</span>;</span><br><span class="line"></span><br><span class="line">Vue.use(Router); // Router是类</span><br><span class="line">// <span class="number">2.</span> 暴露vue-router对象，并在vue-router里面编写路由，提供给main.js调用</span><br><span class="line"></span><br><span class="line">// 导入组件</span><br><span class="line">// <span class="keyword">import</span> 组件名 <span class="keyword">from</span> <span class="string">"../components/组件名"</span></span><br><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">"../components/Home"</span>;</span><br><span class="line"><span class="keyword">import</span> User <span class="keyword">from</span> <span class="string">"../components/User"</span>;</span><br><span class="line"></span><br><span class="line">export default new Router(&#123;</span><br><span class="line">  mode:<span class="string">"history"</span>,  // 路由地址的显示模式： 默认hash，表示地址栏上面出现<span class="comment">#</span></span><br><span class="line">  routes:[</span><br><span class="line">    // &#123;</span><br><span class="line">    //   name:<span class="string">"路由名称[对应组件的name值，将来用于跳转页面]"</span>,</span><br><span class="line">    //   path: <span class="string">"访问url路径"</span>,</span><br><span class="line">    //   component: 组件名</span><br><span class="line">    // &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      name:<span class="string">"Home"</span>,</span><br><span class="line">      path: <span class="string">"/"</span>,</span><br><span class="line">      component: Home</span><br><span class="line">    &#125;,&#123;</span><br><span class="line">      name:<span class="string">"User"</span>,</span><br><span class="line">      path: <span class="string">"/user"</span>,</span><br><span class="line">      component: User</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// vue-router除了可以进行组件和url地址的绑定以外，还可以</span><br><span class="line">// 进行不同组件的页面跳转，</span><br></pre></td></tr></table></figure>

<p>Home.vue代码：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      首页页面组件</span><br><span class="line">      &lt;a href=<span class="string">"/user"</span>&gt;个人中心&lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp">      &lt;!-- router-link标签，本质上就是a标签，只是由vue-router进行加工处理</span></span><br><span class="line"><span class="regexp">      可以显示局部页面刷新，不会重新加载内容，进行ajax跳转</span></span><br><span class="line"><span class="regexp">       --&gt;</span></span><br><span class="line"><span class="regexp">      &lt;router-link to="/u</span>ser<span class="string">"&gt;个人中心&lt;/router-link&gt;</span></span><br><span class="line"><span class="string">      &lt;router-link :to="</span>url<span class="string">"&gt;个人中心&lt;/router-link&gt;</span></span><br><span class="line"><span class="string">      &lt;router-link :to="</span>&#123;<span class="attr">name</span>:<span class="string">'User'</span>&#125;<span class="string">"&gt;个人中心&lt;/router-link&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;/template&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;script&gt;</span></span><br><span class="line"><span class="string">    export default &#123;</span></span><br><span class="line"><span class="string">        name: "</span>Home<span class="string">",</span></span><br><span class="line"><span class="string">        data()&#123;</span></span><br><span class="line"><span class="string">          return &#123;</span></span><br><span class="line"><span class="string">              url: "</span>/user<span class="string">",</span></span><br><span class="line"><span class="string">          &#125;</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        methods:&#123;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;style scoped&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;/style&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/images/1581908101280.png" alt=""></p>
<h3 id="2-3-3-1-2-this-router-push-跳转"><a href="#2-3-3-1-2-this-router-push-跳转" class="headerlink" title="2.3.3.1.2 this.$router.push()跳转"></a>2.3.3.1.2 <code>this.$router.push()</code>跳转</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      首页页面组件</span><br><span class="line">      &lt;a href=<span class="string">"/user"</span>&gt;个人中心&lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp">      &lt;!-- router-link标签，本质上就是a标签，只是由vue-router进行加工处理</span></span><br><span class="line"><span class="regexp">      可以显示局部页面刷新，不会重新加载内容，进行ajax跳转</span></span><br><span class="line"><span class="regexp">       --&gt;</span></span><br><span class="line"><span class="regexp">      &lt;router-link to="/u</span>ser<span class="string">"&gt;个人中心&lt;/router-link&gt;</span></span><br><span class="line"><span class="string">      &lt;router-link :to="</span>url<span class="string">"&gt;个人中心&lt;/router-link&gt;</span></span><br><span class="line"><span class="string">      &lt;router-link :to="</span>&#123;<span class="attr">name</span>:<span class="string">'User'</span>&#125;<span class="string">"&gt;个人中心&lt;/router-link&gt;</span></span><br><span class="line"><span class="string">      &lt;button @click="</span>jump<span class="string">"&gt;个人中心&lt;/button&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;/template&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;script&gt;</span></span><br><span class="line"><span class="string">    export default &#123;</span></span><br><span class="line"><span class="string">        name: "</span>Home<span class="string">",</span></span><br><span class="line"><span class="string">        data()&#123;</span></span><br><span class="line"><span class="string">          return &#123;</span></span><br><span class="line"><span class="string">              url: "</span>/user<span class="string">",</span></span><br><span class="line"><span class="string">          &#125;</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        methods:&#123;</span></span><br><span class="line"><span class="string">          jump()&#123;</span></span><br><span class="line"><span class="string">              // 开发中可以先进行权限，登录之类的判断，然后再进行跳转</span></span><br><span class="line"><span class="string">                // this.$router.back(); // 返回上一页，本质上就是 location.back()</span></span><br><span class="line"><span class="string">                // this.$router.go(-1); // 返回上一页，本质上就是 location.go()</span></span><br><span class="line"><span class="string">                // this.$router.forward(); // 跳转到下一页，本质上就是 location.forward()</span></span><br><span class="line"><span class="string">                this.$router.push("</span>/user<span class="string">"); // 跳转到站内的制定地址页面中，本质上就是 location.href</span></span><br><span class="line"><span class="string">                // 注意,this.$router.push() 不能跳转到其他网站。如果真的要跳转外站，则使用location.href="</span>站外地址，记得加上http:<span class="comment">//协议"</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;style scoped&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;/</span>style&gt;</span><br></pre></td></tr></table></figure>

<h3 id="2-3-3-2-参数传递"><a href="#2-3-3-2-参数传递" class="headerlink" title="2.3.3.2 参数传递"></a>2.3.3.2 参数传递</h3><p><code>vue-router</code>提供了<code>this.$route</code>，可以让我们接收来自其他页面的附带参数。参数有2种：</p>
<ol>
<li><p>查询字符串(<code>query string</code>)，就是地址栏上面<code>?</code>号后面的参数，</p>
<p>例如：<code>http://localhost:8008/user?name=xiaoming&amp;pwd=123</code>，这里<code>name=xiaoming&amp;pwd=123</code>就是查询字符串参数。</p>
</li>
<li><p>路由参数(<code>router params</code>)，就是地址栏上面路由路径的一部分，</p>
<p>例如：<code>http://localhost:8080/user/300/xiaoming</code>，此时，300属于路由路径的一部分，这个300就是路由参数.，当然，xiaoming,或者user也可以理解是路由参数，就是看我们的页面中是否需要接收而已。</p>
</li>
</ol>
<h3 id="2-3-3-2-1-获取查询字符串"><a href="#2-3-3-2-1-获取查询字符串" class="headerlink" title="2.3.3.2.1 获取查询字符串"></a>2.3.3.2.1 获取查询字符串</h3><ol>
<li>必须先有一个页面跳转发送参数。例如，在Home组件中跳转到User组件中，需要传递name和pwd查询字符串。</li>
</ol>
<p>Home.vue代码：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      首页页面组件</span><br><span class="line">&lt;!--      <span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/user"</span>&gt;</span>个人中心<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line">      &amp;lt;!&amp;ndash; router-link标签，本质上就是a标签，只是由vue-router进行加工处理</span><br><span class="line">      可以显示局部页面刷新，不会重新加载内容，进行ajax跳转</span><br><span class="line">       &amp;ndash;&amp;gt;</span><br><span class="line">      &lt;router-link to=<span class="string">"/user"</span>&gt;个人中心&lt;<span class="regexp">/router-link&gt;</span></span><br><span class="line"><span class="regexp">      &lt;router-link :to="url"&gt;个人中心&lt;/</span>router-link&gt;</span><br><span class="line">      &lt;router-link :to=<span class="string">"&#123;name:'User'&#125;"</span>&gt;个人中心&lt;<span class="regexp">/router-link&gt;</span></span><br><span class="line"><span class="regexp">      &lt;button @click="jump"&gt;个人中心&lt;/</span>button&gt;--&gt;</span><br><span class="line"></span><br><span class="line">      &lt;router-link :to=<span class="string">"`/user?name=$&#123;name&#125;&amp;pwd=$&#123;pwd&#125;`"</span>&gt;查询字符串参数&lt;<span class="regexp">/router-link&gt;</span></span><br><span class="line"><span class="regexp">      &lt;router-link :to="'/u</span>ser?name=<span class="string">'+name+'</span>&amp;pwd=<span class="string">'+pwd"&gt;查询字符串参数&lt;/router-link&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;/template&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;script&gt;</span></span><br><span class="line"><span class="string">    export default &#123;</span></span><br><span class="line"><span class="string">        name: "Home",</span></span><br><span class="line"><span class="string">        data()&#123;</span></span><br><span class="line"><span class="string">          return &#123;</span></span><br><span class="line"><span class="string">              name: "xiaoming",</span></span><br><span class="line"><span class="string">              pwd: "123",</span></span><br><span class="line"><span class="string">              url: "/user",</span></span><br><span class="line"><span class="string">          &#125;</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        methods:&#123;</span></span><br><span class="line"><span class="string">          jump()&#123;</span></span><br><span class="line"><span class="string">              // 开发中可以先进行权限，登录之类的判断，然后再进行跳转</span></span><br><span class="line"><span class="string">                // this.$router.back(); // 返回上一页，本质上就是 location.back()</span></span><br><span class="line"><span class="string">                // this.$router.go(-1); // 返回上一页，本质上就是 location.go()</span></span><br><span class="line"><span class="string">                // this.$router.forward(); // 跳转到下一页，本质上就是 location.forward()</span></span><br><span class="line"><span class="string">                this.$router.push("/user"); // 跳转到站内的制定地址页面中，本质上就是 location.href</span></span><br><span class="line"><span class="string">                // 注意,this.$router.push 不能跳转到其他网站。如果真的要跳转外站，则使用location.href="站外地址，记得加上http://协议"</span></span><br><span class="line"><span class="string">          &#125;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;style scoped&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;/style&gt;</span></span><br></pre></td></tr></table></figure>

<ol>
<li>可以下一个页面中，这里代表的就是User组件，接收来自Home组件的参数。</li>
</ol>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      用户中心页面组件</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">        name: <span class="string">"User"</span>,</span><br><span class="line">        created() &#123;</span><br><span class="line">            <span class="comment">// 接收地址栏上面的参数</span></span><br><span class="line">            <span class="comment">// this.$route是vue-router提供的一个用于接收地址参数的对象。</span></span><br><span class="line">            <span class="comment">// 经过main.js里面注册router对象以后，</span></span><br><span class="line">            <span class="comment">// 将来在所有的子组件中，可以通过this.$route来获取参数或者通过this.$router跳转页面</span></span><br><span class="line">            <span class="comment">// 查询字符串参数</span></span><br><span class="line">            <span class="comment">// query是this.$route里面的一个数组，this.$route会自动收集地址栏上所有的参数保存到query里面</span></span><br><span class="line">            <span class="comment">// let name = this.$route.query.name;</span></span><br><span class="line">            <span class="comment">// let pwd = this.$route.query.pwd;</span></span><br><span class="line">            <span class="comment">// console.log(`name=$&#123;name&#125;&amp;pwd=$&#123;pwd&#125;`);  // ``里面，$&#123;&#125;圈住的内容会被js当成变量来解析</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;style scoped&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;/</span>style&gt;</span><br></pre></td></tr></table></figure>

<h3 id="2-3-4-2-获取路由参数"><a href="#2-3-4-2-获取路由参数" class="headerlink" title="2.3.4.2 获取路由参数"></a>2.3.4.2 获取路由参数</h3><p>例如：我们用户的界面都是一样的，但是每一个用户来到自己的页面中，显示的内容肯定都是不一样的，此时，我们需要使用不同的路径来区分不同的用户。这时候，可以在路由路径中使用路由参数表示不同用户的id</p>
<p>例如：我们就需要设置一个route/index.js中路由信息里面，哪一段路由属于路由参数。</p>
<p>src/routes/index.js设置路由参数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">// <span class="number">1.</span> 引入vue和vue-router组件核心对象，并在vue中通过use注册vue-router组件</span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">"vue"</span>;</span><br><span class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">"vue-router"</span>;</span><br><span class="line"></span><br><span class="line">Vue.use(Router); // Router是类</span><br><span class="line">// <span class="number">2.</span> 暴露vue-router对象，并在vue-router里面编写路由，提供给main.js调用</span><br><span class="line"></span><br><span class="line">// 导入组件</span><br><span class="line">// <span class="keyword">import</span> 组件名 <span class="keyword">from</span> <span class="string">"../components/组件名"</span></span><br><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">"../components/Home"</span>;</span><br><span class="line"><span class="keyword">import</span> User <span class="keyword">from</span> <span class="string">"../components/User"</span>;</span><br><span class="line"></span><br><span class="line">export default new Router(&#123;</span><br><span class="line">  mode:<span class="string">"history"</span>,  // 路由地址的显示模式： 默认hash，表示地址栏上面出现<span class="comment">#</span></span><br><span class="line">  routes:[</span><br><span class="line">    // &#123;</span><br><span class="line">    //   name:<span class="string">"路由名称[对应组件的name值，将来用于跳转页面]"</span>,</span><br><span class="line">    //   path: <span class="string">"访问url路径"</span>,</span><br><span class="line">    //   component: 组件名</span><br><span class="line">    // &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      name:<span class="string">"Home"</span>,</span><br><span class="line">      path: <span class="string">"/"</span>,</span><br><span class="line">      component: Home</span><br><span class="line">    &#125;,&#123;</span><br><span class="line">      name:<span class="string">"User"</span>,</span><br><span class="line">      path: <span class="string">"/user/:id/img-:img_id"</span>,</span><br><span class="line">      component: User</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// vue-router除了可以进行组件和url地址的绑定以外，还可以</span><br><span class="line">// 进行不同组件的页面跳转，</span><br></pre></td></tr></table></figure>

<p>然后我们就是在Home中如果需要转到User里面。</p>
<p>Home.vue代码：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      首页页面组件</span><br><span class="line">&lt;!--      <span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/user"</span>&gt;</span>个人中心<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line">      &amp;lt;!&amp;ndash; router-link标签，本质上就是a标签，只是由vue-router进行加工处理</span><br><span class="line">      可以显示局部页面刷新，不会重新加载内容，进行ajax跳转</span><br><span class="line">       &amp;ndash;&amp;gt;</span><br><span class="line">      &lt;router-link to=<span class="string">"/user"</span>&gt;个人中心&lt;<span class="regexp">/router-link&gt;</span></span><br><span class="line"><span class="regexp">      &lt;router-link :to="url"&gt;个人中心&lt;/</span>router-link&gt;</span><br><span class="line">      &lt;router-link :to=<span class="string">"&#123;name:'User'&#125;"</span>&gt;个人中心&lt;<span class="regexp">/router-link&gt;</span></span><br><span class="line"><span class="regexp">      &lt;button @click="jump"&gt;个人中心&lt;/</span>button&gt;--&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--      <span class="xml"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">"`/user?name=$&#123;name&#125;&amp;pwd=$&#123;pwd&#125;`"</span>&gt;</span>查询字符串参数<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span>--&gt;</span><br><span class="line">&lt;!--      <span class="xml"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">"'/user?name='+name+'&amp;pwd='+pwd"</span>&gt;</span>查询字符串参数<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span>--&gt;</span><br><span class="line">      &lt;router-link to=<span class="string">"/user/100/img-10086"</span>&gt;路由参数&lt;<span class="regexp">/router-link&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">    export default &#123;</span></span><br><span class="line"><span class="regexp">        name: "Home",</span></span><br><span class="line"><span class="regexp">        data()&#123;</span></span><br><span class="line"><span class="regexp">          return &#123;</span></span><br><span class="line"><span class="regexp">              name: "xiaoming",</span></span><br><span class="line"><span class="regexp">              pwd: "123",</span></span><br><span class="line"><span class="regexp">              url: "/u</span>ser<span class="string">",</span></span><br><span class="line"><span class="string">          &#125;</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        methods:&#123;</span></span><br><span class="line"><span class="string">          jump()&#123;</span></span><br><span class="line"><span class="string">              // 开发中可以先进行权限，登录之类的判断，然后再进行跳转</span></span><br><span class="line"><span class="string">                // this.$router.back(); // 返回上一页，本质上就是 location.back()</span></span><br><span class="line"><span class="string">                // this.$router.go(-1); // 返回上一页，本质上就是 location.go()</span></span><br><span class="line"><span class="string">                // this.$router.forward(); // 跳转到下一页，本质上就是 location.forward()</span></span><br><span class="line"><span class="string">                this.$router.push("</span>/user<span class="string">"); // 跳转到站内的制定地址页面中，本质上就是 location.href</span></span><br><span class="line"><span class="string">                // 注意,this.$router.push 不能跳转到其他网站。如果真的要跳转外站，则使用location.href="</span>站外地址，记得加上http:<span class="comment">//协议"</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;style scoped&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;/</span>style&gt;</span><br></pre></td></tr></table></figure>

<p>User.vue，组件中可以通过<code>this.$route.params</code>接收路由参数。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      用户中心页面组件</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">        name: <span class="string">"User"</span>,</span><br><span class="line">        created() &#123;</span><br><span class="line">            <span class="comment">// 接收地址栏上面的参数</span></span><br><span class="line">            <span class="comment">// this.$route是vue-router提供的一个用于接收地址参数的对象。</span></span><br><span class="line">            <span class="comment">// 经过main.js里面注册router对象以后，</span></span><br><span class="line">            <span class="comment">// 将来在所有的子组件中，可以通过this.$route来获取参数或者通过this.$router跳转页面</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 查询字符串参数</span></span><br><span class="line">            <span class="comment">// query是this.$route里面的一个数组，this.$route会自动收集地址栏上所有的参数保存到query里面</span></span><br><span class="line">            <span class="comment">// let name = this.$route.query.name;</span></span><br><span class="line">            <span class="comment">// let pwd = this.$route.query.pwd;</span></span><br><span class="line">            <span class="comment">// console.log(`name=$&#123;name&#125;&amp;pwd=$&#123;pwd&#125;`);  // ``里面，$&#123;&#125;圈住的内容会被js当成变量来解析</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 路由参数</span></span><br><span class="line">            <span class="comment">// params是this.$route里面的一个数组，this.$route会自动收集路由列表中已经标记为路由参数所有内容保存到params中</span></span><br><span class="line">            <span class="keyword">let</span> id = <span class="keyword">this</span>.$route.params.id;</span><br><span class="line">            <span class="built_in">console</span>.log(id);</span><br><span class="line">            <span class="keyword">let</span> img_id = <span class="keyword">this</span>.$route.params.img_id;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">`img_id = <span class="subst">$&#123;img_id&#125;</span>`</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;style scoped&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;/</span>style&gt;</span><br></pre></td></tr></table></figure>

<h1 id="3-ElementUI"><a href="#3-ElementUI" class="headerlink" title="3. ElementUI"></a>3. ElementUI</h1><p>对于前端页面布局，我们可以使用一些开源的UI框架来配合开发，常用的UI框: bootstap，H-ui框架，lay-UI框架，Amaze UI，zui框架，ElementUI.</p>
<p>Vue开发前端项目中，比较常用的就是ElementUI了。</p>
<p>ElementUI是饿了么团队开发的一个UI组件框架，这个框架提前帮我们提供了很多已经写好的通用模块，我们可以在Vue项目中引入来使用，这个框架的使用类似于我们前面学习的bootstrap框架，也就是说，我们完全可以把官方文档中的组件代码拿来就用，有定制性的内容，可以直接通过样式进行覆盖修改就可以了。</p>
<p><img src="/images/1552501300174.png" alt=""></p>
<p>中文官网：<a href="http://element-cn.eleme.io/#/zh-CN" target="_blank" rel="noopener">http://element-cn.eleme.io/#/zh-CN</a></p>
<p>文档快速入门：<a href="http://element-cn.eleme.io/#/zh-CN/component/quickstart" target="_blank" rel="noopener">http://element-cn.eleme.io/#/zh-CN/component/quickstart</a></p>
<h3 id="3-1-快速安装ElementUI"><a href="#3-1-快速安装ElementUI" class="headerlink" title="3.1 快速安装ElementUI"></a>3.1 快速安装ElementUI</h3><p>项目根目录执行以下命令:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i element-ui -S</span><br></pre></td></tr></table></figure>

<p>上面的命令等同于 <code>npm install element-ui --save</code></p>
<p>执行命令效果：</p>
<p><img src="/images/1556417812874.png" alt=""></p>
<h3 id="3-2-配置ElementUI到项目中"><a href="#3-2-配置ElementUI到项目中" class="headerlink" title="3.2 配置ElementUI到项目中"></a>3.2 配置ElementUI到项目中</h3><p>在main.js中导入ElementUI，并调用。代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">// elementUI 导入</span><br><span class="line"><span class="keyword">import</span> ElementUI <span class="keyword">from</span> <span class="string">'element-ui'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'element-ui/lib/theme-chalk/index.css'</span>;</span><br><span class="line">// 调用插件</span><br><span class="line">Vue.use(ElementUI);</span><br></pre></td></tr></table></figure>

<p>成功引入了ElementUI以后，接下来我们就可以开始进入前端页面开发，首先是首页。</p>
<h1 id="4-首页"><a href="#4-首页" class="headerlink" title="4. 首页"></a>4. 首页</h1><p>首页采用了上下页面布局，首页是导航栏、轮播图。。。脚部等几个小模块。所以我们可以把首页作为一个组件进行开发，然后把首页的这些小模块作为单独的组件来进行开发。</p>
<h2 id="4-1-创建首页组件"><a href="#4-1-创建首页组件" class="headerlink" title="4.1 创建首页组件"></a>4.1 创建首页组件</h2><p>在src/components目录下创建文件 Home.vue</p>
<p>代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"home"</span>&gt;</span></span><br><span class="line">    首页</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">  name:<span class="string">"Home"</span>,</span></span><br><span class="line">  data()&#123;</span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="4-1-1-创建首页对应的路由"><a href="#4-1-1-创建首页对应的路由" class="headerlink" title="4.1.1 创建首页对应的路由"></a>4.1.1 创建首页对应的路由</h3><p>在router/index.js中引入Home组件，并设置Home组件作为首页路由。</p>
<p>代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">"vue"</span></span><br><span class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">"vue-router"</span></span><br><span class="line"></span><br><span class="line">// 后面这里引入可以被用户访问的页面组件</span><br><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">"../components/Home"</span></span><br><span class="line"></span><br><span class="line">Vue.use(Router);</span><br><span class="line"></span><br><span class="line">export default new Router(&#123;</span><br><span class="line">  // 路由跳转模式，注意使用 history</span><br><span class="line">  mode: <span class="string">"history"</span>,</span><br><span class="line"></span><br><span class="line">  // 路由规则</span><br><span class="line">  routes:[</span><br><span class="line">    &#123;</span><br><span class="line">      // name:<span class="string">"路由别名"</span>,</span><br><span class="line">      name:<span class="string">"Home"</span>,</span><br><span class="line">      // path: <span class="string">"路由地址"</span>,</span><br><span class="line">      path: <span class="string">"/"</span>,</span><br><span class="line">      // component: 组件类名,</span><br><span class="line">      component: Home,</span><br><span class="line">    &#125;,</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端框架</category>
      </categories>
      <tags>
        <tag>vue框架</tag>
      </tags>
  </entry>
  <entry>
    <title>[axios与组件化开发]</title>
    <url>/2020/02/23/axios%E4%B8%8E%E7%BB%84%E4%BB%B6%E5%8C%96%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<h1 id="4-通过axios实现数据请求"><a href="#4-通过axios实现数据请求" class="headerlink" title="4. 通过axios实现数据请求"></a>4. 通过axios实现数据请求</h1><p>vue.js默认没有提供ajax功能的。</p>
<p>所以使用vue的时候，一般都会使用axios的插件来实现ajax与后端服务器的数据交互。</p>
<p>注意，axios本质上就是javascript的ajax封装，所以会被<strong>同源策略</strong>限制。</p>
<p>下载地址：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;unpkg.com&#x2F;axios@0.18.0&#x2F;dist&#x2F;axios.js</span><br><span class="line">https:&#x2F;&#x2F;unpkg.com&#x2F;axios@0.18.0&#x2F;dist&#x2F;axios.min.js</span><br></pre></td></tr></table></figure>

<p>使用文档：<a href="https://www.kancloud.cn/yunye/axios/234845" target="_blank" rel="noopener">https://www.kancloud.cn/yunye/axios/234845</a> </p>
<p>axios提供发送http请求的常用方法有两个：axios.get() 和 axios.post() 。</p>
<p>增 post</p>
<p>删 delete</p>
<p>改 put/patch</p>
<p>查 get</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 发送get请求</span></span><br><span class="line">    <span class="comment">// 参数1: 必填，字符串，请求的数据接口的url地址，例如请求地址：http://www.baidu.com?id=200</span></span><br><span class="line">    <span class="comment">// 参数2：可选，请求参数和请求头内容，json对象，要提供给数据接口的参数</span></span><br><span class="line">	axios.get(<span class="string">'服务器的资源地址'</span>,&#123; <span class="comment">// http://www.baidu.com</span></span><br><span class="line">    	params:&#123;</span><br><span class="line">    		参数名:<span class="string">'参数值'</span>, <span class="comment">// id: 200,</span></span><br><span class="line">    	&#125;,</span><br><span class="line">        headers:&#123;</span><br><span class="line">            选项名:<span class="string">'选项值'</span>, <span class="comment">// 请求头</span></span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">    &#125;).then(<span class="function"><span class="params">response</span>=&gt;</span>&#123; <span class="comment">// 请求成功以后的回调函数</span></span><br><span class="line">    		<span class="built_in">console</span>.log(<span class="string">"请求成功"</span>);</span><br><span class="line">    		<span class="built_in">console</span>.log(response.data); <span class="comment">// 获取服务端提供的数据</span></span><br><span class="line">    </span><br><span class="line">    &#125;).catch(<span class="function"><span class="params">error</span>=&gt;</span>&#123;   <span class="comment">// 请求失败以后的回调函数</span></span><br><span class="line">    		<span class="built_in">console</span>.log(<span class="string">"请求失败"</span>);</span><br><span class="line">    		<span class="built_in">console</span>.log(error.response);  <span class="comment">// 获取错误信息</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 发送post请求，参数和使用和axios.get()类似。</span></span><br><span class="line">    <span class="comment">// 参数1: 必填，字符串，请求的数据接口的url地址</span></span><br><span class="line">    <span class="comment">// 参数2：必填，json对象，要提供给数据接口的参数,如果没有参数，则必须使用&#123;&#125;</span></span><br><span class="line">    <span class="comment">// 参数3：可选，json对象，请求头信息</span></span><br><span class="line">    axios.post(<span class="string">'服务器的资源地址'</span>,&#123;</span><br><span class="line">    	username: <span class="string">'xiaoming'</span>,</span><br><span class="line">    	password: <span class="string">'123456'</span></span><br><span class="line">    &#125;,&#123;</span><br><span class="line">        headers:&#123;</span><br><span class="line">            选项名:<span class="string">"选项值"</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    .then(<span class="function"><span class="params">response</span>=&gt;</span>&#123; <span class="comment">// 请求成功以后的回调函数</span></span><br><span class="line">      <span class="built_in">console</span>.log(response);</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(<span class="function"><span class="params">error</span>=&gt;</span>&#123;   <span class="comment">// 请求失败以后的回调函数</span></span><br><span class="line">      <span class="built_in">console</span>.log(error);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">	</span><br><span class="line">	<span class="comment">// b'firstName=Fred&amp;lastName=Flintstone'</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：axios.delete() 的用法和参数与axios.get()一样，axios.put()或者axios.patch的用法和参数与axios.post()一样。在http协议中，不同的请求动作都有不同的含义，例如：get 代表向目标服务器请求获取数据post 代表向目标服务器请求上传数据put 代表向目标服务器请求更新数据【修改全部数据】patch 代表向目标服务器请求更新数据【修改部分数据】patch 代表向目标服务器请求更新数据delete 代表向目标服务器请求删除数据</p>
</blockquote>
<h2 id="4-1-json"><a href="#4-1-json" class="headerlink" title="4.1 json"></a>4.1 json</h2><p>json是 JavaScript Object Notation 的首字母缩写，单词的意思是javascript对象表示法，这里说的json指的是类似于javascript对象的一种数据格式。</p>
<p>json的作用：在不同的系统平台，或不同编程语言之间传递数据。</p>
<h3 id="4-1-1-json数据的语法"><a href="#4-1-1-json数据的语法" class="headerlink" title="4.1.1 json数据的语法"></a>4.1.1 json数据的语法</h3><p>json数据对象类似于JavaScript中的对象，但是它的键对应的值里面是没有函数方法的，值可以是普通变量，不支持undefined，值还可以是数组或者json对象。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 原生的js的json对象</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  age:<span class="number">10</span>,</span><br><span class="line">  sex: <span class="string">'女'</span>,</span><br><span class="line">  work()&#123;                     <span class="comment">// work: function()&#123;&#125;的简写</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"好好学习"</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// json数据的对象格式,json数据格式,是没有方法的,只有属性,属性值：字符串，数值(整数，浮点数，布尔值), json，</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"name"</span>:<span class="string">"tom"</span>,</span><br><span class="line">    <span class="string">"age"</span>:<span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// json数据的数组格式：</span></span><br><span class="line">[<span class="string">"tom"</span>,<span class="number">18</span>,<span class="string">"programmer"</span>]</span><br></pre></td></tr></table></figure>

<p>复杂的json格式数据可以包含对象和数组的写法。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>:<span class="string">"小明"</span>,</span><br><span class="line">  <span class="attr">"age"</span>:<span class="number">200</span>,</span><br><span class="line">  <span class="attr">"is_delete"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"fav"</span>:[<span class="string">"code"</span>,<span class="string">"eat"</span>,<span class="string">"swim"</span>,<span class="string">"read"</span>],</span><br><span class="line">  <span class="attr">"son"</span>:&#123;</span><br><span class="line">    <span class="attr">"name"</span>:<span class="string">"小小明"</span>,</span><br><span class="line">    <span class="attr">"age"</span>:<span class="number">100</span>,</span><br><span class="line">    <span class="attr">"lve"</span>:[<span class="string">"code"</span>,<span class="string">"eat"</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数组结构也可以作为json传输数据。</span></span><br></pre></td></tr></table></figure>

<p>json数据可以保存在.json文件中，一般里面就只有一个json对象。</p>
<p>总结：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">1. json文件的后缀是.json</span><br><span class="line">2. json文件一般保存一个单一的json数据</span><br><span class="line">3. json数据的属性不能是方法或者undefined，属性值只能：数值[整数,小数,布尔值]、字符串、json和数组</span><br><span class="line">4. json数据只使用双引号、每一个属性成员之间使用逗号隔开，并且最后一个成员没有逗号。</span><br><span class="line">   &#123;</span><br><span class="line">      <span class="attr">"name"</span>:<span class="string">"小明"</span>,</span><br><span class="line">      <span class="attr">"age"</span>:<span class="number">200</span>,</span><br><span class="line">      <span class="attr">"fav"</span>:[<span class="string">"code"</span>,<span class="string">"eat"</span>,<span class="string">"swim"</span>,<span class="string">"read"</span>],</span><br><span class="line">      <span class="attr">"son"</span>:&#123;</span><br><span class="line">        <span class="attr">"name"</span>:<span class="string">"小小明"</span>,</span><br><span class="line">        <span class="attr">"age"</span>:<span class="number">100</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>工具：postman可以用于测试开发的数据接口。</p>
<p>postman就是一个软件，专门提供给开发者组织和测试http请求的。</p>
<h3 id="4-1-2-js中提供的json数据转换方法"><a href="#4-1-2-js中提供的json数据转换方法" class="headerlink" title="4.1.2 js中提供的json数据转换方法"></a>4.1.2 js中提供的json数据转换方法</h3><p>javascript提供了一个JSON对象来操作json数据的数据转换.</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>参数</th>
<th>返回值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>stringify</td>
<td>json对象</td>
<td>字符串</td>
<td>json对象转成字符串</td>
</tr>
<tr>
<td>parse</td>
<td>字符串</td>
<td>json对象</td>
<td>字符串格式的json数据转成json对象</td>
</tr>
</tbody></table>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// json语法</span></span><br><span class="line">    <span class="keyword">let</span> humen = &#123;</span><br><span class="line">        <span class="string">"username"</span>:<span class="string">"xiaohui"</span>,</span><br><span class="line">        <span class="string">"password"</span>:<span class="string">"1234567"</span>,</span><br><span class="line">        <span class="string">"age"</span>:<span class="number">20</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(humen);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span> humen);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// JSON对象提供对json格式数据的转换功能</span></span><br><span class="line">    <span class="comment">// stringify(json对象)  # 用于把json转换成字符串</span></span><br><span class="line">    <span class="keyword">let</span> result = <span class="built_in">JSON</span>.stringify(humen);</span><br><span class="line">    <span class="built_in">console</span>.log(result);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span> result);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// parse(字符串类型的json数据)  # 用于把字符串转成json对象</span></span><br><span class="line">    <span class="keyword">let</span> json_str = <span class="string">'&#123;"password":"1123","age":20,"name":"xiaobai"&#125;'</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(json_str)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span> json_str)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> json_obj = <span class="built_in">JSON</span>.parse(json_str);</span><br><span class="line">    <span class="built_in">console</span>.log(json_obj);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span> json_obj)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(json_obj.age)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="4-2-ajax"><a href="#4-2-ajax" class="headerlink" title="4.2 ajax"></a>4.2 ajax</h2><p>ajax，一般中文称之为：“阿贾克斯”，是英文 “Async Javascript And Xml”的简写，译作：异步js和xml数据传输数据。</p>
<p>ajax的作用： ajax可以让js代替浏览器向后端程序发送http请求，与后端通信，在用户不知道的情况下操作数据和信息，从而实现页面局部刷新数据/无刷新更新数据。</p>
<p>所以web开发中ajax是很常用的技术，主要用于操作后端提供的<code>数据接口</code>，从而实现网站的<code>前后端分离</code>。</p>
<p>ajax技术的原理是实例化js的XMLHttpRequest对象，使用此对象提供的内置方法就可以与后端进行数据通信。</p>
<blockquote>
<p>实际而言，axios或者jQuery提供的ajax，本质上就是XMLHttpRequest对象操作的封装。</p>
</blockquote>
<h3 id="4-2-1-数据接口"><a href="#4-2-1-数据接口" class="headerlink" title="4.2.1 数据接口"></a>4.2.1 数据接口</h3><p>数据接口，也叫api接口，表示<code>后端提供</code>操作数据/功能的url地址给客户端使用。</p>
<p>客户端通过发起请求向服务端提供的url地址申请操作数据【操作一般：增删查改】</p>
<p>同时在工作中，大部分数据接口都不是手写，而是通过函数库/框架来生成。</p>
<h3 id="4-2-3-ajax的使用"><a href="#4-2-3-ajax的使用" class="headerlink" title="4.2.3 ajax的使用"></a>4.2.3 ajax的使用</h3><p>ajax的使用必须与服务端程序配合使用，但是目前我们先学习ajax的使用，所以暂时先不涉及到服务端python代码的编写。因此，我们可以使用别人写好的数据接口进行调用。</p>
<p>jQuery将ajax封装成了一个函数$.ajax()，我们可以直接用这个函数来执行ajax请求。</p>
<table>
<thead>
<tr>
<th>接口</th>
<th>地址</th>
</tr>
</thead>
<tbody><tr>
<td>天气接口</td>
<td><a href="http://wthrcdn.etouch.cn/weather_mini?city=城市名称" target="_blank" rel="noopener">http://wthrcdn.etouch.cn/weather_mini?city=城市名称</a></td>
</tr>
<tr>
<td>音乐接口搜索</td>
<td><a href="http://tingapi.ting.baidu.com/v1/restserver/ting?method=baidu.ting.search.catalogSug&amp;query=歌曲标题" target="_blank" rel="noopener">http://tingapi.ting.baidu.com/v1/restserver/ting?method=baidu.ting.search.catalogSug&amp;query=歌曲标题</a></td>
</tr>
<tr>
<td>音乐信息接口</td>
<td><a href="http://tingapi.ting.baidu.com/v1/restserver/ting?method=baidu.ting.song.play&amp;songid=音乐ID" target="_blank" rel="noopener">http://tingapi.ting.baidu.com/v1/restserver/ting?method=baidu.ting.song.play&amp;songid=音乐ID</a></td>
</tr>
</tbody></table>
<p>编写代码获取接口提供的数据：</p>
<p>jQ版本</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">    &lt;script src="js/</span>jquery<span class="number">-1.12</span><span class="number">.4</span>.js<span class="string">"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">    &lt;script&gt;</span></span><br><span class="line"><span class="string">    $(function()&#123;</span></span><br><span class="line">        $("#btn").on("click",function()&#123;</span><br><span class="line">            $.ajax(&#123;</span><br><span class="line">                <span class="comment">// 后端程序的url地址</span></span><br><span class="line">                url: <span class="string">'http://wthrcdn.etouch.cn/weather_mini'</span>,</span><br><span class="line">                <span class="comment">// 也可以使用method，提交数据的方式，默认是'GET'，常用的还有'POST'</span></span><br><span class="line">                type: <span class="string">'get'</span>, </span><br><span class="line">                dataType: <span class="string">'json'</span>,  <span class="comment">// 返回的数据格式，常用的有是'json','html',"jsonp"</span></span><br><span class="line">                data:&#123; <span class="comment">// 设置发送给服务器的数据，如果是get请求，也可以写在url地址的?后面</span></span><br><span class="line">                    <span class="string">"city"</span>:<span class="string">'北京'</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">            .done(<span class="function"><span class="keyword">function</span>(<span class="params">resp</span>) </span>&#123;     <span class="comment">// 请求成功以后的操作</span></span><br><span class="line">                <span class="built_in">console</span>.log(resp);</span><br><span class="line">            &#125;)</span><br><span class="line">            .fail(<span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;    <span class="comment">// 请求失败以后的操作</span></span><br><span class="line">                <span class="built_in">console</span>.log(error);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">    &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;button id=<span class="string">"btn"</span>&gt;点击获取数据&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure>

<p>vue版本：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">    &lt;script src="js/</span>vue.js<span class="string">"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">    &lt;script src="</span>js/axios.js<span class="string">"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">    &lt;div id="</span>app<span class="string">"&gt;</span></span><br><span class="line"><span class="string">        &lt;input type="</span>text<span class="string">" v-model="</span>city<span class="string">"&gt;</span></span><br><span class="line"><span class="string">        &lt;button @click="</span>get_weather<span class="string">"&gt;点击获取天气&lt;/button&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;script&gt;</span></span><br><span class="line"><span class="string">        let vm = new Vue(&#123;</span></span><br><span class="line">            el:"#app",</span><br><span class="line">            data:&#123;</span><br><span class="line">                city:<span class="string">""</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">            methods:&#123;</span><br><span class="line">                get_weather()&#123;</span><br><span class="line">                    <span class="comment">// http://wthrcdn.etouch.cn/weather_mini?city=城市名称</span></span><br><span class="line">                    axios.get(<span class="string">"http://wthrcdn.etouch.cn/weather_mini?city="</span>+<span class="keyword">this</span>.city)</span><br><span class="line">                        .then(<span class="function"><span class="params">response</span>=&gt;</span>&#123;</span><br><span class="line">                            <span class="built_in">console</span>.log(response);</span><br><span class="line"></span><br><span class="line">                        &#125;).catch(<span class="function"><span class="params">error</span>=&gt;</span>&#123;</span><br><span class="line">                            <span class="built_in">console</span>.log(error.response)</span><br><span class="line">                    &#125;);</span><br><span class="line">                  <span class="comment">// 上面的参数写法,也可以是下面这种格式:</span></span><br><span class="line">                  <span class="comment">// axios.get("http://wthrcdn.etouch.cn/weather_mini",&#123;</span></span><br><span class="line">                  <span class="comment">//     // get请求的附带参数</span></span><br><span class="line">                  <span class="comment">//     params:&#123;</span></span><br><span class="line">                  <span class="comment">//         "city":"广州",</span></span><br><span class="line">                  <span class="comment">//     &#125;</span></span><br><span class="line">                  <span class="comment">// &#125;).then(response=&gt;&#123;</span></span><br><span class="line">                  <span class="comment">//     console.log(response.data);  // 获取接口数据</span></span><br><span class="line">                  <span class="comment">// &#125;).catch(error=&gt;&#123;</span></span><br><span class="line">                  <span class="comment">//     console.log(error.response); // 获取错误信息</span></span><br><span class="line">                  <span class="comment">// &#125;)</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="4-2-4-同源策略"><a href="#4-2-4-同源策略" class="headerlink" title="4.2.4 同源策略"></a>4.2.4 同源策略</h3><p>同源策略，是浏览器为了保护用户信息安全的一种安全机制。所谓的同源就是指代通信的两个地址（例如服务端接口地址与浏览器客户端页面地址）之间比较，是否协议、域名(IP)和端口相同。不同源的客户端脚本[javascript]在没有得到服务端的明确授权的情况下，浏览器会拒绝显示服务端信息提供给前端ajax。</p>
<p>ajax本质上还是javascript，是运行在浏览器中的脚本语言，所以会被受到浏览器的同源策略所限制。</p>
<table>
<thead>
<tr>
<th>前端地址：<code>http://www.oldboy.cn/index.html</code></th>
<th>是否同源</th>
<th>原因</th>
</tr>
</thead>
<tbody><tr>
<td><code>http://www.oldboy.cn/user/login.html</code></td>
<td>是</td>
<td>协议、域名、端口相同</td>
</tr>
<tr>
<td><code>http://www.oldboy.cn/about.html</code></td>
<td>是</td>
<td>协议、域名、端口相同</td>
</tr>
<tr>
<td><code>https://www.oldboy.cn:443/user/login.html</code></td>
<td>否</td>
<td>协议不同 ( https和http )</td>
</tr>
<tr>
<td><code>http:/www.oldboy.cn:5000/user/login.html</code></td>
<td>否</td>
<td>端口 不同( 5000和80)</td>
</tr>
<tr>
<td><code>http://bbs.oldboy.cn/user/login.html</code></td>
<td>否</td>
<td>域名不同 ( bbs和www )</td>
</tr>
</tbody></table>
<p>同源策略针对ajax的拦截，代码：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">    &lt;script src="js/</span>vue.js<span class="string">"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">    &lt;script src="</span>js/axios.js<span class="string">"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">    &lt;div id="</span>app<span class="string">"&gt;</span></span><br><span class="line"><span class="string">        &lt;input type="</span>text<span class="string">" v-model="</span>music<span class="string">"&gt;&lt;button @click="</span>get_music<span class="string">"&gt;查询歌曲&lt;/button&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;script&gt;</span></span><br><span class="line"><span class="string">        var vm = new Vue(&#123;</span></span><br><span class="line">            el:"#app",</span><br><span class="line">            data:&#123;</span><br><span class="line">                music:<span class="string">""</span>, <span class="comment">// 歌曲标题</span></span><br><span class="line">            &#125;,</span><br><span class="line">            methods:&#123;</span><br><span class="line">                get_music()&#123;</span><br><span class="line">                    axios.get(<span class="string">`http://tingapi.ting.baidu.com/v1/restserver/ting`</span>,&#123;</span><br><span class="line">                        params:&#123;</span><br><span class="line">                            method:<span class="string">"baidu.ting.search.catalogSug"</span>,</span><br><span class="line">                            query:<span class="keyword">this</span>.music,</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;).then(<span class="function"><span class="params">response</span>=&gt;</span>&#123;</span><br><span class="line">                        <span class="built_in">console</span>.log(<span class="string">"查询数据成功！"</span>);</span><br><span class="line">                    &#125;).catch(<span class="function"><span class="params">error</span>=&gt;</span>&#123;</span><br><span class="line">                        <span class="built_in">console</span>.log(<span class="string">"查询数据失败！"</span>);</span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure>

<p>上面代码运行错误如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Access to XMLHttpRequest at <span class="string">'http://tingapi.ting.baidu.com/v1/restserver/ting?method=baidu.ting.search.catalogSug&amp;query=%E6%88%91%E7%9A%84%E4%B8%AD%E5%9B%BD%E5%BF%83'</span> <span class="keyword">from</span> origin <span class="string">'http://localhost:63342'</span> has been blocked by CORS policy: No <span class="string">'Access-Control-Allow-Origin'</span> header <span class="keyword">is</span> present on the requested resource.</span><br></pre></td></tr></table></figure>

<p>上面错误，关键词：Access-Control-Allow-Origin</p>
<p>只要出现这个关键词，就是访问受限。出现同源策略的拦截问题。</p>
<h3 id="4-2-5-ajax跨域-跨源-方案之CORS"><a href="#4-2-5-ajax跨域-跨源-方案之CORS" class="headerlink" title="4.2.5 ajax跨域(跨源)方案之CORS"></a>4.2.5 ajax跨域(跨源)方案之CORS</h3><p>ajax跨域(跨源)方案：服务端授权[CORS]，jsonp，服务端代理</p>
<p> CORS是一个W3C标准，全称是“跨域资源共享”，它允许浏览器向跨源的后端服务器发出ajax请求，从而克服了AJAX只能同源使用的限制。</p>
<p> 实现CORS主要依靠后端服务器中响应数据中设置响应头信息返回的。</p>
<p>django的视图[伪代码]</p>
<p>def post(request):</p>
<p> response = new Response()</p>
<p> response .set_header(“Access-Control-Allow-Origin”,“<a href="http://localhost:63342”">http://localhost:63342”</a>)</p>
<p> return response;</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">// 在响应行信息里面设置以下内容：</span><br><span class="line">Access-Control-Allow-Origin: ajax所在的域名地址</span><br><span class="line"></span><br><span class="line">Access-Control-Allow-Origin: www.oldboy.cn  <span class="comment"># 表示只允许www.oldboy.cn域名的客户端的ajax跨域访问</span></span><br><span class="line"></span><br><span class="line">// * 表示任意源，表示允许任意源下的客户端的ajax都可以访问当前服务端信息</span><br><span class="line">Access-Control-Allow-Origin: *</span><br></pre></td></tr></table></figure>

<p><img src="/images/1556074087897.png" alt=""></p>
<p>总结：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0. 同源策略：浏览器的一种保护用户数据的一种安全机制。</span><br><span class="line">   浏览器会限制ajax不能跨源访问其他源的数据地址。</span><br><span class="line">   同源：判断两个通信的地址之间，是否协议，域名[IP]，端口一致。</span><br><span class="line">   </span><br><span class="line">   ajax：  http:&#x2F;&#x2F;127.0.0.1&#x2F;index.html</span><br><span class="line">   api数据接口：  http:&#x2F;&#x2F;localhost&#x2F;index</span><br><span class="line">   </span><br><span class="line">   这两个是同源么？不是同源的。是否同源的判断依据不会根据电脑来判断，而是通过协议、域名、端口的字符串是否来判断。</span><br><span class="line">   </span><br><span class="line">1. ajax默认情况下会受到同源策略的影响，一旦受到影响会报错误如下：</span><br><span class="line">	 No &#39;Access-Control-Allow-Origin&#39; header is present on the requested resource</span><br><span class="line"></span><br><span class="line">2. 解决ajax只能同源访问数据接口的方式：</span><br><span class="line">   1. CORS，跨域资源共享，在服务端的响应行中设置：</span><br><span class="line">      Access-Control-Allow-Origin: 允许访问的域名地址</span><br><span class="line">   2. jsonp</span><br><span class="line">   	  所谓的jsonp本质上来说不是ajax技术，jsonp的核心实现是依靠script本身加载外部js文件来实现的。</span><br><span class="line">   	  当然，实现jsonp技术，也需要服务端的配合</span><br><span class="line">   3. 是否服务端代理</span><br><span class="line">      思路：通过python来请求对应的服务器接口，客户端和python这边处于同源，那么就实现了服务端代理</span><br></pre></td></tr></table></figure>

<h1 id="5-组件化开发"><a href="#5-组件化开发" class="headerlink" title="5. 组件化开发"></a>5. 组件化开发</h1><h2 id="5-1-组件-component"><a href="#5-1-组件-component" class="headerlink" title="5.1 组件[component]"></a>5.1 组件[component]</h2><p>组件（Component）是自定义封装的功能。在前端开发过程中，经常出现多个网页的功能是重复的，而且很多不同的页面之间，也存在同样的功能。</p>
<p>而在网页中实现一个功能，需要使用html定义功能的内容结构，使用css声明功能的外观样式，还要使用js来定义功能的特效，因此就产生了把一个功能相关的[HTML、css和javascript]代码封装在一起组成一个整体的代码块封装模式，我们称之为“组件”。</p>
<p>所以，组件就是一个html网页中的功能，一般就是一个标签，标签中有自己的html内容结构，css样式和js特效。</p>
<p>这样，前端人员就可以在组件化开发时，只需要书写一次代码，随处引入即可使用。</p>
<p>vue的组件有两种：默认组件[全局组件] 和 单文件组件</p>
<h3 id="5-1-1-默认组件"><a href="#5-1-1-默认组件" class="headerlink" title="5.1.1 默认组件"></a>5.1.1 默认组件</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">addnum</span>&gt;</span><span class="tag">&lt;/<span class="name">addnum</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">addnum</span>&gt;</span><span class="tag">&lt;/<span class="name">addnum</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">addnum</span>&gt;</span><span class="tag">&lt;/<span class="name">addnum</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">addnum</span>&gt;</span><span class="tag">&lt;/<span class="name">addnum</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">addnum</span>&gt;</span><span class="tag">&lt;/<span class="name">addnum</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    Vue.component(<span class="string">"addnum"</span>,&#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">        template:'<span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"num"</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"num+=1"</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>',</span></span></span><br><span class="line"><span class="actionscript">        data: <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 写在这里的数据只有当前组件可以使用</span></span></span><br><span class="line"><span class="actionscript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line">                num:1,</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el:<span class="string">"#app"</span>,</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 这里写的数据是全局公用的，整个文件共享</span></span></span><br><span class="line">        data:&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="6-Vue自动化工具（Vue-cli）"><a href="#6-Vue自动化工具（Vue-cli）" class="headerlink" title="6. Vue自动化工具（Vue-cli）"></a>6. Vue自动化工具（Vue-cli）</h1><p>前面学习了普通组件以后，接下来我们继续学习单文件组件则需要提前先安装准备一些组件开发工具。否则无法使用和学习单文件组件。</p>
<p>一般情况下，单文件组件，我们运行在 自动化工具vue-CLI中，可以帮我们编译单文件组件。所以我们需要在系统中先搭建vue-CLI工具，</p>
<p>官网：<a href="https://cli.vuejs.org/zh/" target="_blank" rel="noopener">https://cli.vuejs.org/zh/</a></p>
<p>Vue CLI 需要 <a href="https://nodejs.org/" target="_blank" rel="noopener">Node.js</a> 8.9 或更高版本 (推荐 8.11.0+)。你可以使用 <a href="https://github.com/creationix/nvm" target="_blank" rel="noopener">nvm</a> 或 <a href="https://github.com/coreybutler/nvm-windows" target="_blank" rel="noopener">nvm-windows</a>在同一台电脑中管理多个 Node 版本。</p>
<p>nvm工具的下载和安装： </p>
<p><a href="https://www.jianshu.com/p/d0e0935b150a" target="_blank" rel="noopener">https://www.jianshu.com/p/d0e0935b150a</a></p>
<p><a href="https://www.jianshu.com/p/622ad36ee020" target="_blank" rel="noopener">​https://www.jianshu.com/p/622ad36ee020</a></p>
<p>安装记录:</p>
<p>打开:<a href="https://github.com/coreybutler/nvm-windows/releases" target="_blank" rel="noopener">https://github.com/coreybutler/nvm-windows/releases</a></p>
<p>安装完成以后,先查看环境变量是否设置好了.</p>
<p><img src="/images/1552357036022.png" alt=""></p>
<p>常用的nvm命令</p>
<p>nvm list # 列出目前在nvm里面安装的所有node版本 nvm install node版本号 # 安装指定版本的node.js nvm uninstall node版本号 # 卸载指定版本的node.js nvm use node版本号 # 切换当前使用的node.js版本</p>
<p>如果使用nvm工具，则直接可以不用自己手动下载，如果使用nvm下载安装 node的npm比较慢的时候，可以修改nvm的配置文件(在安装根目录下)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># settings.txt</span><br><span class="line">root: C:\tool\nvm    [这里的目录地址是安装nvm时自己设置的地址,要根据实际修改]</span><br><span class="line">path: C:\tool\nodejs</span><br><span class="line">arch: 64</span><br><span class="line">proxy: none</span><br><span class="line">node_mirror: http:&#x2F;&#x2F;npm.taobao.org&#x2F;mirrors&#x2F;node&#x2F; </span><br><span class="line">npm_mirror: https:&#x2F;&#x2F;npm.taobao.org&#x2F;mirrors&#x2F;npm&#x2F;</span><br></pre></td></tr></table></figure>

<h2 id="6-1-安装node-js"><a href="#6-1-安装node-js" class="headerlink" title="6.1 安装node.js"></a>6.1 安装node.js</h2><p>Node.js是一个新的后端(后台)语言，它的语法和JavaScript类似，所以可以说它是属于前端的后端语言，后端语言和前端语言的区别：</p>
<ul>
<li>运行环境：后端语言一般运行在服务器端，前端语言运行在客户端的浏览器上</li>
<li>功能：后端语言可以操作文件，可以读写数据库，前端语言不能操作文件，不能读写数据库。</li>
</ul>
<p>我们一般安装LTS(长线支持版本 Long-Time Support)：</p>
<p>下载地址：<a href="https://nodejs.org/en/download/【上面已经安装了nvm，那么这里不用手动安装了】" target="_blank" rel="noopener">https://nodejs.org/en/download/【上面已经安装了nvm，那么这里不用手动安装了】</a></p>
<p>node.js的版本有两大分支：</p>
<p>官方发布的node.js版本：0.xx.xx 这种版本号就是官方发布的版本</p>
<p>社区发布的node.js版本：xx.xx.x 就是社区开发的版本</p>
<p>Node.js如果安装成功，可以查看Node.js的版本,在终端输入如下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure>

<h2 id="6-2-npm"><a href="#6-2-npm" class="headerlink" title="6.2 npm"></a>6.2 npm</h2><p>在安装node.js完成后，在node.js中会同时帮我们安装一个npm包管理器npm。我们可以借助npm命令来安装node.js的包。这个工具相当于python的pip管理器。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g 包名              <span class="comment"># 安装模块   -g表示全局安装，如果没有-g，则表示在当前项目安装</span></span><br><span class="line">npm list                        <span class="comment"># 查看当前目录下已安装的node包</span></span><br><span class="line">npm view 包名 engines            <span class="comment"># 查看包所依赖的Node的版本 </span></span><br><span class="line">npm outdated                    <span class="comment"># 检查包是否已经过时，命令会列出所有已过时的包</span></span><br><span class="line">npm update 包名                  <span class="comment"># 更新node包</span></span><br><span class="line">npm uninstall 包名               <span class="comment"># 卸载node包</span></span><br><span class="line">npm 命令 -h                      <span class="comment"># 查看指定命令的帮助文档</span></span><br></pre></td></tr></table></figure>

<h2 id="6-3-安装Vue-cli"><a href="#6-3-安装Vue-cli" class="headerlink" title="6.3 安装Vue-cli"></a>6.3 安装Vue-cli</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g vue-cli</span><br></pre></td></tr></table></figure>

<p>如果安装速度过慢，一直超时，可以考虑切换npm镜像源：<a href="http://npm.taobao.org/" target="_blank" rel="noopener">http://npm.taobao.org/</a></p>
<h2 id="6-4-使用Vue-CLI初始化创建前端项目"><a href="#6-4-使用Vue-CLI初始化创建前端项目" class="headerlink" title="6.4 使用Vue-CLI初始化创建前端项目"></a>6.4 使用Vue-CLI初始化创建前端项目</h2><h3 id="6-4-1-生成项目目录"><a href="#6-4-1-生成项目目录" class="headerlink" title="6.4.1 生成项目目录"></a>6.4.1 生成项目目录</h3><p>使用vue自动化工具可以快速搭建单页应用项目目录。</p>
<p>该工具为现代化的前端开发工作流提供了开箱即用的构建配置。只需几分钟即可创建并启动一个带热重载、保存时静态检查以及可用于生产环境的构建配置的项目：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 生成一个基于 webpack 模板的新项目</span><br><span class="line">vue init webpack 项目目录名</span><br><span class="line">例如：</span><br><span class="line">vue init webpack myproject</span><br><span class="line"></span><br><span class="line">// 启动开发服务器 ctrl+c 停止服务</span><br><span class="line"><span class="built_in">cd</span> myproject</span><br><span class="line">npm run dev           <span class="comment"># 运行这个命令就可以启动node提供的测试http服务器</span></span><br></pre></td></tr></table></figure>

<p>运行了上面代码以后,终端下会出现以下效果提示：</p>
<p><img src="/images/1552187745456.png" alt=""></p>
<p>那么访问：<a href="http://localhost:8080/" target="_blank" rel="noopener">http://localhost:8080/</a></p>
<p><img src="/images/1552187794989.png" alt=""></p>
<h3 id="6-4-2-项目目录结构"><a href="#6-4-2-项目目录结构" class="headerlink" title="6.4.2 项目目录结构"></a>6.4.2 项目目录结构</h3><p>src 主开发目录，要开发的单文件组件全部在这个目录下的components目录下</p>
<p>static 静态资源目录，所有的css，js文件放在这个文件夹</p>
<p>dist项目打包发布文件夹，最后要上线单文件项目文件都在这个文件夹中[后面打包项目,让项目中的vue组件经过编译变成js 代码以后,dist就出现了]</p>
<p>node_modules目录是node的包目录，</p>
<p>config是配置目录，</p>
<p>build是项目打包时依赖的目录</p>
<p>src/router 路由,后面需要我们在使用Router路由的时候,自己声明.</p>
<h3 id="6-4-3-项目执行流程图"><a href="#6-4-3-项目执行流程图" class="headerlink" title="6.4.3 项目执行流程图"></a>6.4.3 项目执行流程图</h3><p><img src="/images/page_structrue.png" alt=""></p>
<p>page_structrue</p>
<p>整个项目是一个主文件index.html,index.html中会引入src文件夹中的main.js,main.js中会导入顶级单文件组件App.vue,App.vue中会通过组件嵌套或者路由来引用components文件夹中的其他单文件组件。</p>
<h2 id="7-单文件组件的使用"><a href="#7-单文件组件的使用" class="headerlink" title="7. 单文件组件的使用"></a>7. 单文件组件的使用</h2><p>组件有两种：普通组件、单文件组件</p>
<p>普通组件的缺点：</p>
<ol>
<li>html代码是作为js的字符串进行编写，所以组装和开发的时候不易理解，而且没有高亮效果。</li>
<li>普通组件用在小项目中非常合适，但是复杂的大项目中，如果把更多的组件放在html文件中，那么维护成本就会变得非常昂贵。</li>
<li>普通组件只是整合了js和html，但是css代码被剥离出去了。使用的时候的时候不好处理。</li>
</ol>
<p>将一个组件相关的html结构，css样式，以及交互的JavaScript代码从html文件中剥离出来，合成一个文件，这种文件就是单文件组件，相当于一个组件具有了结构、表现和行为的完整功能，方便组件之间随意组合以及组件的重用，这种文件的扩展名为“.vue”，比如：“Home.vue”。</p>
<ol>
<li>创建组件</li>
</ol>
<p><img src="/images/1552362045478.png" alt=""></p>
<p>在组件中编辑三个标签，编写视图、vm对象和css样式代码。</p>
<h3 id="7-1-template-编写html代码的地方"><a href="#7-1-template-编写html代码的地方" class="headerlink" title="7.1 template 编写html代码的地方"></a>7.1 template 编写html代码的地方</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"Home"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> @<span class="attr">click</span>=<span class="string">"num--"</span> <span class="attr">class</span>=<span class="string">"sub"</span>&gt;</span>-<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">size</span>=<span class="string">"1"</span> <span class="attr">v-model</span>=<span class="string">"num"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> @<span class="attr">click</span>=<span class="string">"num++"</span> <span class="attr">class</span>=<span class="string">"add"</span>&gt;</span>+<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="7-2-script编写vue-js代码"><a href="#7-2-script编写vue-js代码" class="headerlink" title="7.2 script编写vue.js代码"></a>7.2 script编写vue.js代码</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    name:<span class="string">"Home"</span>,</span><br><span class="line">    data: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        num:<span class="number">0</span>,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="7-3-style编写当前组件的样式代码"><a href="#7-3-style编写当前组件的样式代码" class="headerlink" title="7.3 style编写当前组件的样式代码"></a>7.3 style编写当前组件的样式代码</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;<span class="selector-tag">style</span> <span class="selector-tag">scoped</span>&gt;</span><br><span class="line">  <span class="selector-class">.sub</span>,<span class="selector-class">.add</span>&#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">4px</span> <span class="number">7px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<h3 id="7-4-完成案例-点击加减数字"><a href="#7-4-完成案例-点击加减数字" class="headerlink" title="7.4 完成案例-点击加减数字"></a>7.4 完成案例-点击加减数字</h3><p>创建Homes.vue</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"add_num"</span>&gt;</span><br><span class="line">      &lt;span @click=<span class="string">"num++"</span>&gt;+&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">      &lt;input type="text" size="2" v-model="num"&gt;</span></span><br><span class="line"><span class="regexp">      &lt;span @click="num--"&gt;-&lt;/</span>span&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line">    name:<span class="string">"AddNum"</span>,</span><br><span class="line">    data: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        num: <span class="number">0</span>,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;style scoped&gt;</span></span><br><span class="line"><span class="regexp">   .add_num&#123;</span></span><br><span class="line"><span class="regexp">      font-size: 32px;</span></span><br><span class="line"><span class="regexp">   &#125;</span></span><br><span class="line"><span class="regexp">&lt;/</span>style&gt;</span><br></pre></td></tr></table></figure>

<p>在App.vue组件中调用上面的组件</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=<span class="string">"Home"</span>&gt;</span><br><span class="line">    &lt;span @click=<span class="string">"num--"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"sub"</span>&gt;-&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">    &lt;input type="text" size="1" v-model="num"&gt;</span></span><br><span class="line"><span class="regexp">    &lt;span @click="num++" class="add"&gt;+&lt;/</span>span&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    name:<span class="string">"Home"</span>,</span><br><span class="line">    data: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        num:<span class="number">0</span>,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;style scoped&gt;</span></span><br><span class="line"><span class="regexp">  .sub,.add&#123;</span></span><br><span class="line"><span class="regexp">    border: 1px solid red;</span></span><br><span class="line"><span class="regexp">    padding: 4px 7px;</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&lt;/</span>style&gt;</span><br></pre></td></tr></table></figure>

<p>在开发vue项目之前，需要手动把 App.vue的HelloWorld组件代码以及默认的css样式，清楚。</p>
<p>上面的代码效果：</p>
<p><img src="/images/1552362182984.png" alt=""></p>
<h3 id="7-4-组件的嵌套"><a href="#7-4-组件的嵌套" class="headerlink" title="7.4 组件的嵌套"></a>7.4 组件的嵌套</h3><p>有时候开发vue项目时,页面也可以算是一个大组件,同时页面也可以分成多个子组件.</p>
<p>因为,产生了父组件调用子组件的情况.</p>
<p>例如,我们可以声明一个组件,作为父组件</p>
<p>在components/创建一个保存子组件的目录HomeSon</p>
<p><img src="/images/1552363669256.png" alt=""></p>
<p>在HomeSon目录下,可以创建当前页面的子组件,例如,是Menu.vue</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  组件中代码必须写在同一个标签中</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div id=<span class="string">"menu"</span>&gt;</span><br><span class="line">      &lt;span&gt;&#123;&#123;msg&#125;&#125;&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">      &lt;div&gt;hello&lt;/</span>div&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    name:<span class="string">"Menu"</span>,</span><br><span class="line">    data: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        msg:<span class="string">"这是Menu组件里面的菜单"</span>,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>

<p>然后，在父组件中调用上面声明的子组件。</p>
<p><img src="/images/1552363770013.png" alt=""></p>
<p>最后,父组件被App.vue调用.就可以看到页面效果.</p>
<p><img src="/images/1552363834171.png" alt=""></p>
<p><img src="/images/1552363849977.png" alt=""></p>
<p>效果:</p>
<p><img src="/images/1552363702858.png" alt=""></p>
<h3 id="7-5-传递数据"><a href="#7-5-传递数据" class="headerlink" title="7.5 传递数据"></a>7.5 传递数据</h3><h3 id="父组件的数据传递给子组件"><a href="#父组件的数据传递给子组件" class="headerlink" title="父组件的数据传递给子组件"></a>父组件的数据传递给子组件</h3><p>例如,我们希望把父组件的数据传递给子组件.</p>
<p>可以通过props属性来进行数据传递.</p>
<p>传递数据三个步骤：</p>
<ol>
<li><p>在父组件中，调用子组件的组名处，使用属性值的方式往下传递数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;Menu :mynum&#x3D;&quot;num&quot; title&#x3D;&quot;home里面写的数据&quot;&#x2F;&gt;</span><br><span class="line"></span><br><span class="line"># 上面表示在父组件调用Menu子组件的时候传递了2个数据：</span><br><span class="line">  如果要传递变量[变量可以各种类型的数据]，属性名左边必须加上冒号:，同时，属性名是自定义的，会在子组件中使用。</span><br><span class="line">  如果要传递普通字符串数据，则不需要加上冒号:</span><br></pre></td></tr></table></figure>
</li>
<li><p>在子组件中接受上面父组件传递的数据，需要在vm组件对象中，使用props属性类接受。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    name:<span class="string">"Menu"</span>,</span><br><span class="line">    props:[<span class="string">"mynum"</span>,<span class="string">"title"</span>],</span><br><span class="line">    data: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        msg:<span class="string">"这是Menu组件里面的菜单"</span>,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 上面 props属性中表示接受了两个数据。</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在子组件中的template中使用父组件传递过来的数据.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"menu"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;msg&#125;&#125;，&#123;&#123;title&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>hello，&#123;&#123;mynum&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>效果：</p>
<p><img src="/images/1552364511546.png" alt=""></p>
<p>步骤流程:</p>
<p><img src="/images/1552364590540.png" alt=""></p>
<p>使用父组件传递数据给子组件时, 注意一下几点:</p>
<ol>
<li><p>传递数据是变量,则需要在属性左边添加冒号.</p>
<p>传递数据是变量,这种数据称之为“动态数据传递”</p>
<p>传递数据不是变量,这种数据称之为“静态数据传递”</p>
</li>
<li><p>父组件中修改了数据,在子组件中会被同步修改,但是,子组件中的数据修改了,是不是影响到父组件中的数据.</p>
<p>这种情况,在开发时,也被称为“单向数据流”</p>
</li>
</ol>
<h3 id="子组件传递数据给父组件"><a href="#子组件传递数据给父组件" class="headerlink" title="子组件传递数据给父组件"></a>子组件传递数据给父组件</h3><ol>
<li><p>在子组件中，通过<code>this.$emit()</code>来调用父组件中定义的事件.</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;p&gt;Post的子组件&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">      &lt;h2&gt;&#123;&#123;fnum&#125;&#125;&lt;/</span>h2&gt;</span><br><span class="line">      &lt;p&gt;data=&#123;&#123;data&#125;&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">      &lt;p&gt;fnum=&#123;&#123;fnum&#125;&#125;&lt;/</span>p&gt;</span><br><span class="line">      &lt;div&gt;<span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"fnum"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">        name: <span class="string">"PostSon"</span>,</span><br><span class="line">        <span class="comment">// 父组件传递数据给子组件: 1. 在父组件中调用子组件的组件名称标签上面声明属性和传递值，2. 在子组件中通过props进行接收</span></span><br><span class="line">        props:[<span class="string">"data"</span>,<span class="string">"fnum"</span>],  <span class="comment">// 接受父组件中传递过来的数据</span></span><br><span class="line">        <span class="comment">// 子组件传递数据给父组件[事件的方式进行传递]：</span></span><br><span class="line">        watch:&#123;</span><br><span class="line">          fnum()&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.fnum);</span><br><span class="line">            <span class="comment">// this.$emit("父元素的自定义事件","要传递的数据");  // 通过this.$emit()方法，子组件可以把数据传递给父组件</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">this</span>.$emit(<span class="string">"postparentdata"</span>,<span class="keyword">this</span>.fnum);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;style scoped&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;/</span>style&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>父组件中声明一个和子组件中<code>this.$emit(&quot;自定义事件名称&quot;)</code>对应的事件属性。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>num=&#123;&#123;num&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">Son</span> <span class="attr">data</span>=<span class="string">"我是付组件里面的内容"</span> <span class="attr">:fnum</span>=<span class="string">"num"</span> @<span class="attr">postparentdata</span>=<span class="string">"getsondata"</span>&gt;</span><span class="tag">&lt;/<span class="name">Son</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>父组件中，声明一个自定义方法，在事件被调用时，执行的。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">import</span> Son <span class="keyword">from</span> <span class="string">"./PostSon"</span></span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">        name: <span class="string">"Post"</span>,</span><br><span class="line">        data()&#123;</span><br><span class="line">          <span class="keyword">return</span> &#123;</span><br><span class="line">            num: <span class="number">100</span>,</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        components:&#123;</span><br><span class="line">          Son:Son,</span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">          getsondata(message)&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"父组件"</span>+message);</span><br><span class="line">            <span class="keyword">this</span>.num = message;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>作业：</p>
<ol>
<li>使用组件化开发，完成之前的选项卡练习功能</li>
<li>使用组件化开发，完成之前的todolist功能</li>
<li>使用组件化开发，完成table表格的增删查改作业，数据使用本地存储进行保存</li>
</ol>
<h2 id="8-在组件中使用axios获取数据"><a href="#8-在组件中使用axios获取数据" class="headerlink" title="8. 在组件中使用axios获取数据"></a>8. 在组件中使用axios获取数据</h2><p>默认情况下，我们的项目中并没有对axios包的支持，所以我们需要下载安装。</p>
<p>在项目根目录中使用 npm安装包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install axios</span><br></pre></td></tr></table></figure>

<p>接着在main.js文件中，导入axios并把axios对象 挂载到vue属性中多为一个子对象，这样我们才能在组件中使用。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">// The Vue build version to load <span class="keyword">with</span> the `<span class="keyword">import</span>` command</span><br><span class="line">// (runtime-only <span class="keyword">or</span> standalone) has been set <span class="keyword">in</span> webpack.base.conf <span class="keyword">with</span> an alias.</span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App'</span> // 这里表示从别的目录下导入 单文件组件</span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span>; // 从node_modules目录中导入包</span><br><span class="line">Vue.config.productionTip = false</span><br><span class="line"></span><br><span class="line">Vue.prototype.$axios = axios; // 把对象挂载vue中</span><br><span class="line"></span><br><span class="line">/* eslint-disable no-new */</span><br><span class="line">new Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  components: &#123; App &#125;,</span><br><span class="line">  template: <span class="string">'&lt;App/&gt;'</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="8-1-在组建中使用axios获取数据"><a href="#8-1-在组建中使用axios获取数据" class="headerlink" title="8.1 在组建中使用axios获取数据"></a>8.1 在组建中使用axios获取数据</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line">	。。。</span><br><span class="line">	methods:&#123;</span><br><span class="line">      get_data:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">         <span class="comment">// 使用axios请求数据</span></span><br><span class="line">        <span class="keyword">this</span>.$axios.get(<span class="string">"http://wthrcdn.etouch.cn/weather_mini?city=深圳"</span>).then(<span class="function">(<span class="params">response</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(response);</span><br><span class="line">        &#125;).catch(<span class="function"><span class="params">error</span>=&gt;</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(error);</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果:</p>
<p><img src="/images/1552202922168.png" alt=""></p>
<p>使用的时候，因为本质上来说，我们还是原来的axios，所以也会收到同源策略的影响。</p>
]]></content>
      <categories>
        <category>前端框架</category>
      </categories>
      <tags>
        <tag>vue框架</tag>
      </tags>
  </entry>
  <entry>
    <title>[vue快速入门使用]</title>
    <url>/2020/02/22/vue%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="1-vue-js的快速入门使用"><a href="#1-vue-js的快速入门使用" class="headerlink" title="1. vue.js的快速入门使用"></a>1. vue.js的快速入门使用</h1><h2 id="1-1-vue-js库的下载"><a href="#1-1-vue-js库的下载" class="headerlink" title="1.1 vue.js库的下载"></a>1.1 vue.js库的下载</h2><p>vue.js是目前前端web开发最流行的工具库，由尤雨溪在2014年2月发布的。</p>
<p>另外几个常见的工具库：react.js /angular.js/jQuery</p>
<p>官方网站：</p>
<p> 中文：<a href="https://cn.vuejs.org/" target="_blank" rel="noopener">https://cn.vuejs.org/</a></p>
<p> 英文：<a href="https://cn.vuejs.org/" target="_blank" rel="noopener">https://vuejs.org/</a></p>
<p>官方文档：<a href="https://cn.vuejs.org/v2/guide/" target="_blank" rel="noopener">https://cn.vuejs.org/v2/guide/</a></p>
<p>vue.js目前有1.x、2.x和3.x 版本，我们学习2.x版本的。</p>
<h2 id="1-2-vue-js库的基本使用"><a href="#1-2-vue-js库的基本使用" class="headerlink" title="1.2 vue.js库的基本使用"></a>1.2 vue.js库的基本使用</h2><p>在github下载：</p>
<p>在官网下载地址： <a href="https://cn.vuejs.org/v2/guide/installation.html" target="_blank" rel="noopener">https://cn.vuejs.org/v2/guide/installation.html</a></p>
<p>vue的引入类似于jQuery，开发中可以使用开发版本vue-x.x.x.js，产品上线要换成vue.min.js。</p>
<p>下图是github网站下载的vue.js目录</p>
<p><img src="/images/1544363032042.png" alt=""></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="actionscript">      	<span class="comment">// vue.js的代码开始于一个Vue对象。所以每次操作数据都要声明Vue对象开始。</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el:<span class="string">'#app'</span>,   <span class="comment">// 设置当前vue对象要控制的标签范围。</span></span></span><br><span class="line"><span class="actionscript">            data:&#123;  <span class="comment">// data是将要展示到HTML标签元素中的数据。</span></span></span><br><span class="line"><span class="actionscript">              message: <span class="string">'hello world!'</span>,</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &#123;&#123; message &#125;&#125; 表示把vue对象里面data属性中的对应数据输出到页面中 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 在双标签中显示数据要通过&#123;&#123;  &#125;&#125;来完成 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>总结：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">1. vue的使用要从创建Vue对象开始</span><br><span class="line">   var vm = new Vue();</span><br><span class="line">   </span><br><span class="line">2. 创建vue对象的时候，需要传递参数，是json对象，json对象对象必须至少有两个属性成员</span><br><span class="line">   var vm = new Vue(&#123;</span><br><span class="line">         el:"#app",</span><br><span class="line">	 	 data: &#123;</span><br><span class="line">             数据变量:"变量值",</span><br><span class="line">             数据变量:"变量值",</span><br><span class="line">             数据变量:"变量值",</span><br><span class="line">     	 &#125;,</span><br><span class="line">   &#125;);</span><br><span class="line">   </span><br><span class="line">   el:设置vue可以操作的html内容范围，值一般就是css的id选择器。</span><br><span class="line">   data: 保存vue.js中要显示到html页面的数据。</span><br><span class="line">   </span><br><span class="line">3. vue.js要控制器的内容范围，必须先通过id来设置。</span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="1-3-vue-js的M-V-VM思想"><a href="#1-3-vue-js的M-V-VM思想" class="headerlink" title="1.3 vue.js的M-V-VM思想"></a>1.3 vue.js的M-V-VM思想</h2><p>MVVM 是Model-View-ViewModel 的缩写，它是一种基于前端开发的架构模式。</p>
<p><code>Model</code> 指代的就是vue对象的data属性里面的数据。这里的数据要显示到页面中。</p>
<p><code>View</code> 指代的就是vue中数据要显示的HTML页面，在vue中，也称之为“视图模板” 。</p>
<p><code>ViewModel</code> 指代的是vue.js中我们编写代码时的vm对象了，它是vue.js的核心，负责连接 View 和 Model，保证视图和数据的一致性，所以前面代码中，data里面的数据被显示中p标签中就是vm对象自动完成的。</p>
<p><img src="/images/201105031754285061.png" alt=""></p>
<p>编写代码，让我们更加清晰的了解MVVM：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/vue.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 创建vm对象</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el: <span class="string">"#app"</span>,</span></span><br><span class="line">            data: &#123;</span><br><span class="line"><span class="actionscript">                name:<span class="string">"大标题"</span>,</span></span><br><span class="line">                age:16,</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 在双标签中显示数据要通过&#123;&#123;  &#125;&#125;来完成 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;age&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 在表单输入框中显示数据要使用v-model来完成，模板语法的时候，我们会详细学习 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"name"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在浏览器中可以在 console.log通过 vm对象可以直接访问el和data属性,甚至可以访问data里面的数据</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">console.log(vm.$el)        # #app  vm对象可以控制的范围</span><br><span class="line">console.log(vm.$data);     #    vm对象要显示到页面中的数据</span><br><span class="line">console.log(vm.$data.message);  # 访问data里面的数据</span><br><span class="line">console.log(vm.message);   # 这个 message就是data里面声明的数据,也可以使用 vm.变量名显示其他数据,message只是举例.</span><br></pre></td></tr></table></figure>

<p>总结：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> 如果要输出data里面的数据作为普通标签的内容，需要使用&#123;&#123;  &#125;&#125;</span><br><span class="line">   用法：</span><br><span class="line">      vue对象的data属性：</span><br><span class="line">          data:&#123;</span><br><span class="line">            name:<span class="string">"小明"</span>,</span><br><span class="line">          &#125;</span><br><span class="line">      标签元素：</span><br><span class="line">      		&lt;h1&gt;&#123;&#123; name &#125;&#125;&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">2. 如果要输出data里面的数据作为表单元素的值，需要使用vue.js提供的元素属性v-model</span></span><br><span class="line"><span class="regexp">   用法：</span></span><br><span class="line"><span class="regexp">      vue对象的data属性：</span></span><br><span class="line"><span class="regexp">          data:&#123;</span></span><br><span class="line"><span class="regexp">            name:"小明",</span></span><br><span class="line"><span class="regexp">          &#125;</span></span><br><span class="line"><span class="regexp">      表单元素：</span></span><br><span class="line"><span class="regexp">      		&lt;input v-model="name"&gt;</span></span><br><span class="line"><span class="regexp">      </span></span><br><span class="line"><span class="regexp">   使用v-model把data里面的数据显示到表单元素以后，一旦用户修改表单元素的值，则data里面对应数据的值也会随之发生改变，甚至，页面中凡是使用了这个数据都会发生变化。</span></span><br></pre></td></tr></table></figure>

<h2 id="1-4-显示数据"><a href="#1-4-显示数据" class="headerlink" title="1.4 显示数据"></a>1.4 显示数据</h2> 
1. 在双标签中显示数据要通过{{ }}来完成数据显示，双括号中还可以支持js表达式和符合js语法的代码，例如函数调用.
2. 在表单输入框中显示数据要使用v-model来完成数据显示

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/vue.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">          el:<span class="string">"#app"</span>,</span></span><br><span class="line">          data:&#123;</span><br><span class="line"><span class="actionscript">            str1: <span class="string">"hello"</span>,</span></span><br><span class="line">            num: 20,</span><br><span class="line">            price: 7.1,</span><br><span class="line"><span class="actionscript">            url1: <span class="string">"http://www.baidu.com"</span>,</span></span><br><span class="line"><span class="actionscript">            url2: <span class="string">"http://www.taobao.com"</span></span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)        </span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; str1 &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; str1.split("").reverse().join("") &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>num和num2中比较大的数是：&#123;&#123; num&gt;num2? num:num2 &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"name"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;(price+0.8).toFixed(2)&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>双花括号仅用输出文本内容,如果要输出html代码,则不能使用这个.要使用v-html来输出.</p>
<p>v-html必须在html标签里面作为属性写出来.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;title&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123;url1&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        &#123;&#123;img&#125;&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-html</span>=<span class="string">"img"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el:<span class="string">".app"</span>,</span></span><br><span class="line">            data:&#123;</span><br><span class="line"><span class="actionscript">                title:<span class="string">"我的vue"</span>,</span></span><br><span class="line"><span class="actionscript">                url1:<span class="string">"我的收获地址"</span>,</span></span><br><span class="line"><span class="handlebars"><span class="xml">                img:'<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/shendan.png"</span>&gt;</span>',</span></span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>总结：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">1. 可以在普通标签中使用&#123;&#123;  &#125;&#125; 或者 v-html 来输出data里面的数据</span><br><span class="line">   <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">2. 可以在表单标签中使用v-model属性来输出data里面的数据，同时还可以修改data里面的数据</span><br><span class="line">   <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"username"</span>&gt;</span></span><br></pre></td></tr></table></figure>
 
在输出内容到普通标签的使用{{ }}

v-model或者v-html等vue提供的属性，或者 {{}} 都支持js代码。

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;str1.split("").reverse().join("")&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 3.2 支持js的运算符--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;num1+3&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 3.3 js还有一种运算符,三元运算符,类似于python里面的三元表达式</span></span><br><span class="line"><span class="comment">        三元运算符的语法:</span></span><br><span class="line"><span class="comment">         判断条件 ? 条件为true : 条件为false的结果</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        python 三元表达式[三目运算符]的语法:</span></span><br><span class="line"><span class="comment">        a if 条件 else b</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>num1和num2之间进行比较,最大值:&#123;&#123; num2&gt;num1?num2:num1 &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>例子：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Vue的快速使用<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;url&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;text&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-html</span>=<span class="string">"text"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">"url"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>num是&#123;&#123;num%2==0?'偶数':'奇数'&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>num的下一个数字：&#123;&#123;num-0+1&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"num"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;message.split("").reverse().join("")&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"message"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el:<span class="string">"#app"</span>, <span class="comment">// 设置vue对象控制的标签范围</span></span></span><br><span class="line"><span class="actionscript">        data:&#123;     <span class="comment">// vue要操作的数据</span></span></span><br><span class="line"><span class="actionscript">            url:<span class="string">"http://www.luffycity.com"</span>,</span></span><br><span class="line"><span class="handlebars"><span class="xml">            text:"<span class="tag">&lt;<span class="name">h1</span>&gt;</span>大标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>",</span></span></span><br><span class="line">            num: 100,</span><br><span class="line"><span class="actionscript">            message:<span class="string">"abcdef"</span>,</span></span><br><span class="line">        &#125;,</span><br><span class="line">        </span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="2-常用指令"><a href="#2-常用指令" class="headerlink" title="2. 常用指令"></a>2. 常用指令</h1><p>指令 (Directives) 是带有“v-”前缀的特殊属性。每一个指令在vue中都有固定的作用。</p>
<p>在vue中，提供了很多指令，常用的有：v-if、v-model、v-for等等。</p>
<p>指令会在vm对象的data属性的数据发生变化时，会同时改变元素中的其控制的内容或属性。</p>
<p>因为vue的历史版本原因，所以有一部分指令都有两种写法：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">vue1.x写法             vue2.x的写法</span><br><span class="line">v-html         ----&gt;   v-html</span><br><span class="line">&#123;&#123; 普通文本 &#125;&#125;         &#123;&#123;普通文本&#125;&#125;</span><br><span class="line">v-bind:属性名   ----&gt;  :属性</span><br><span class="line">v-on:事件名     ----&gt;  @事件名</span><br></pre></td></tr></table></figure>

<h2 id="2-1-操作属性"><a href="#2-1-操作属性" class="headerlink" title="2.1 操作属性"></a>2.1 操作属性</h2><p>格式：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">标签名</span> <span class="attr">:</span>标签属性=<span class="string">"data属性"</span>&gt;</span><span class="tag">&lt;/<span class="name">标签名</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">:title</span>=<span class="string">"str1"</span>&gt;</span>&#123;&#123; str1 &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span> <span class="comment">&lt;!-- 也可以使用v-html显示双标签的内容，&#123;&#123;  &#125;&#125; 是简写 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">:href</span>=<span class="string">"url2"</span>&gt;</span>淘宝<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">"url1"</span>&gt;</span>百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span>  <span class="comment">&lt;!-- v-bind是vue1.x版本的写法 --&gt;</span></span><br></pre></td></tr></table></figure>

<p>显示wifi密码效果：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"index"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">"url"</span> <span class="attr">:alt</span>=<span class="string">"title"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">:type</span>=<span class="string">"type"</span> <span class="attr">placeholder</span>=<span class="string">"请输入wifi密码"</span>&gt;</span> <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"type='text'"</span>&gt;</span>显示密码<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el:<span class="string">"#index"</span>,</span></span><br><span class="line">        data:&#123;</span><br><span class="line"><span class="actionscript">          url:<span class="string">"https://www.luffycity.com/static/img/head-logo.a7cedf3.svg"</span>,</span></span><br><span class="line"><span class="actionscript">          title:<span class="string">"路飞学成"</span>,</span></span><br><span class="line"><span class="actionscript">          type:<span class="string">"password"</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="2-2-事件绑定"><a href="#2-2-事件绑定" class="headerlink" title="2.2 事件绑定"></a>2.2 事件绑定</h2><p>有两种事件操作的写法，@事件名 和 v-on:事件名</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"num++"</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span>   <span class="comment">&lt;!-- v-on 是vue1.x版本的写法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"num+=5"</span>&gt;</span>按钮2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>总结：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">1. 使用@事件名来进行事件的绑定</span><br><span class="line">   语法：</span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span> @<span class="attr">click</span>=<span class="string">"num++"</span>&gt;</span>&#123;&#123;num&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">2. 绑定的事件的事件名，全部都是js的事件名：</span><br><span class="line">   @submit   ---&gt;  onsubmit</span><br><span class="line">   @focus    ---&gt;  onfocus</span><br><span class="line">   @blur     ---&gt;  onblur</span><br><span class="line">   @click    ---&gt;  onclick</span><br><span class="line">   ....</span><br></pre></td></tr></table></figure>

<h3 id="例如-完成商城购物车中的商品增加减少数量"><a href="#例如-完成商城购物车中的商品增加减少数量" class="headerlink" title="例如:完成商城购物车中的商品增加减少数量"></a>例如:完成商城购物车中的商品增加减少数量</h3><p>步骤：</p>
<ol>
<li>给vue对象添加操作数据的方法</li>
<li>在标签中使用指令调用操作数据的方法</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"++num"</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"num"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"sub"</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el:<span class="string">"#box"</span>,</span></span><br><span class="line">            data:&#123;</span><br><span class="line">                num:0,</span><br><span class="line">            &#125;,</span><br><span class="line">            methods:&#123;</span><br><span class="line">                sub()&#123;</span><br><span class="line"><span class="actionscript">                    <span class="keyword">if</span>(<span class="keyword">this</span>.num&lt;=<span class="number">1</span>)&#123;</span></span><br><span class="line"><span class="actionscript">                        <span class="keyword">this</span>.num=<span class="number">0</span>;</span></span><br><span class="line"><span class="actionscript">                    &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="actionscript">                        <span class="keyword">this</span>.num--;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--#box&gt;(button+input+button) tab键--&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="2-3-操作样式"><a href="#2-3-操作样式" class="headerlink" title="2.3 操作样式"></a>2.3 操作样式</h2><p>操作样式，本质就是属性操作，使用冒号：</p>
<h3 id="2-3-1-控制标签class类名"><a href="#2-3-1-控制标签class类名" class="headerlink" title="2.3.1 控制标签class类名"></a>2.3.1 控制标签class类名</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">格式：</span><br><span class="line">   <span class="tag">&lt;<span class="name">h1</span> <span class="attr">:class</span>=<span class="string">"值"</span>&gt;</span>元素<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>  值可以是字符串、对象、对象名、数组</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.box1</span>&#123;</span></span><br><span class="line">        color: red;</span><br><span class="line"><span class="css">        <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#000</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.box2</span>&#123;</span></span><br><span class="line">        background-color: orange;</span><br><span class="line">        font-size: 32px;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--- 添加class类名，值是一个对象</span></span><br><span class="line"><span class="comment">        &#123;</span></span><br><span class="line"><span class="comment">         class类1:布尔值变量1,</span></span><br><span class="line"><span class="comment">         class类2:布尔值变量2,</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">         --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">:class</span>=<span class="string">"&#123;box1:myclass1&#125;"</span>&gt;</span>一个段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> @<span class="attr">click</span>=<span class="string">"myclass3=!myclass3"</span> <span class="attr">:class</span>=<span class="string">"&#123;box1:myclass2,box2:myclass3&#125;"</span>&gt;</span>一个段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> vm1=<span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el:<span class="string">"#box"</span>,</span></span><br><span class="line">            data:&#123;</span><br><span class="line"><span class="actionscript">                myclass1:<span class="literal">false</span>, <span class="comment">// 布尔值变量如果是false，则不会添加对象的属性名作为样式</span></span></span><br><span class="line"><span class="actionscript">                myclass2:<span class="literal">true</span>,  <span class="comment">// 布尔值变量如果是true，则不会添加对象的属性名作为样式</span></span></span><br><span class="line"><span class="actionscript">                myclass3:<span class="literal">false</span>,</span></span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 上面的代码可以:class的值保存到data里面的一个变量，然后使用该变量作为:class的值 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.box4</span>&#123;</span></span><br><span class="line">        background-color: red;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.box5</span>&#123;</span></span><br><span class="line">        color: green;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"mycls.box4=!mycls.box4"</span>&gt;</span>改变背景<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"mycls.box5=!mycls.box5"</span>&gt;</span>改变字体颜色<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">:class</span>=<span class="string">"mycls"</span>&gt;</span>第二个段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> vm2 = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el:<span class="string">"#app"</span>,</span></span><br><span class="line">            data:&#123;</span><br><span class="line">                mycls:&#123;</span><br><span class="line"><span class="actionscript">                    box4:<span class="literal">false</span>,</span></span><br><span class="line"><span class="actionscript">                    box5:<span class="literal">true</span></span></span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 批量给元素增加多个class样式类 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.box6</span>&#123;</span></span><br><span class="line">        background-color: red;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.box7</span>&#123;</span></span><br><span class="line">        color: green;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.box8</span>&#123;</span></span><br><span class="line">        border: 1px solid yellow;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app2"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span> <span class="attr">:class</span>=<span class="string">"[mycls1,mycls2]"</span>&gt;</span>第三个段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> vm3 = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el:<span class="string">"#app2"</span>,</span></span><br><span class="line">            data:&#123;</span><br><span class="line">                mycls1:&#123;</span><br><span class="line"><span class="actionscript">                    box6:<span class="literal">true</span>,</span></span><br><span class="line"><span class="actionscript">                    box7:<span class="literal">true</span>,</span></span><br><span class="line">                &#125;,</span><br><span class="line">                mycls2:&#123;</span><br><span class="line"><span class="actionscript">                    box8:<span class="literal">true</span>,</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>代码执行效果：</p>
<p><img src="/images/1552036325806.png" alt="/1552036325806"></p>
<p>总结：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">1. 给元素绑定class类名，最常用的就是第二种。</span><br><span class="line">    vue对象的data数据：</span><br><span class="line">        data:&#123;</span><br><span class="line">          myObj:&#123;</span><br><span class="line">            complete:true,</span><br><span class="line">            uncomplete:false,</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">		html元素：    </span><br><span class="line">    		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span> <span class="attr">:class</span>=<span class="string">"myObj"</span>&gt;</span>2222<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    最终浏览器效果：</span><br><span class="line">		    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box complete"</span>&gt;</span>2222<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-3-2-控制标签style样式"><a href="#2-3-2-控制标签style样式" class="headerlink" title="2.3.2 控制标签style样式"></a>2.3.2 控制标签style样式</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">格式1：值是json对象，对象写在元素的:style属性中</span><br><span class="line">	 标签元素：</span><br><span class="line">		     <span class="tag">&lt;<span class="name">div</span> <span class="attr">:style</span>=<span class="string">"&#123;color: activeColor, fontSize: fontSize + 'px' &#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	 data数据如下：</span><br><span class="line">         data: &#123;</span><br><span class="line">             activeColor: 'red',</span><br><span class="line">             fontSize: 30</span><br><span class="line">         &#125;</span><br><span class="line">格式2：值是对象变量名，对象在data中进行声明</span><br><span class="line">   标签元素：</span><br><span class="line">   			<span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:style</span>=<span class="string">"styleObject"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   data数据如下：</span><br><span class="line">         data: &#123;</span><br><span class="line">            	styleObject: &#123;</span><br><span class="line">             		color: 'red',</span><br><span class="line">             		fontSize: '13px'</span><br><span class="line">			  			&#125;</span><br><span class="line">				 &#125;</span><br><span class="line"></span><br><span class="line">格式3：值是数组</span><br><span class="line">  标签元素：</span><br><span class="line">				<span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:style</span>=<span class="string">"[style1, style2]"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	data数据如下：</span><br><span class="line">				data: &#123;</span><br><span class="line">                     style1:&#123;</span><br><span class="line">                       color:"red"</span><br><span class="line">                     &#125;,</span><br><span class="line">                     style2:&#123;</span><br><span class="line">                       background:"yellow",</span><br><span class="line">                       fontSize: "21px"</span><br><span class="line">                     &#125;</span><br><span class="line">				&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-3-2-实例-vue版本选项卡"><a href="#2-3-2-实例-vue版本选项卡" class="headerlink" title="2.3.2 实例-vue版本选项卡"></a>2.3.2 实例-vue版本选项卡</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-id">#card</span>&#123;</span></span><br><span class="line">            width: 500px;</span><br><span class="line">            height: 350px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.title</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">height</span><span class="selector-pseudo">:50px</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.title</span> <span class="selector-tag">span</span>&#123;</span></span><br><span class="line">            width: 100px;</span><br><span class="line">            height: 50px;</span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>:<span class="selector-id">#ccc</span>;</span></span><br><span class="line">            display: inline-block;</span><br><span class="line"><span class="css">            <span class="selector-tag">line-height</span>: 50<span class="selector-tag">px</span>; <span class="comment">/* 设置行和当前元素的高度相等,就可以让文本内容上下居中 */</span></span></span><br><span class="line"><span class="css">            <span class="selector-tag">text-align</span><span class="selector-pseudo">:center</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.content</span> <span class="selector-class">.list</span>&#123;</span></span><br><span class="line">            width: 500px;</span><br><span class="line">            height: 300px;</span><br><span class="line">            background-color: yellow;</span><br><span class="line">            display: none;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.content</span> <span class="selector-class">.active</span>&#123;</span></span><br><span class="line">            display: block;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.title</span> <span class="selector-class">.current</span>&#123;</span></span><br><span class="line">            background-color: yellow;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"card"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"title"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> @<span class="attr">click</span>=<span class="string">"num=0"</span> <span class="attr">:class</span>=<span class="string">"num==0?'current':''"</span>&gt;</span>国内新闻<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> @<span class="attr">click</span>=<span class="string">"num=1"</span> <span class="attr">:class</span>=<span class="string">"num==1?'current':''"</span>&gt;</span>国际新闻<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> @<span class="attr">click</span>=<span class="string">"num=2"</span> <span class="attr">:class</span>=<span class="string">"num==2?'current':''"</span>&gt;</span>银河新闻<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--&lt;span&gt;&#123;&#123;num&#125;&#125;&lt;/span&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list"</span> <span class="attr">:class</span>=<span class="string">"num==0?'active':''"</span>&gt;</span>国内新闻列表<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list"</span> <span class="attr">:class</span>=<span class="string">"num==1?'active':''"</span>&gt;</span>国际新闻列表<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list"</span> <span class="attr">:class</span>=<span class="string">"num==2?'active':''"</span>&gt;</span>银河新闻列表<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 思路：</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 当用户点击标题栏的按钮[span]时，显示对应索引下标的内容块[.list]</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 代码实现：</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> card = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el:<span class="string">"#card"</span>,</span></span><br><span class="line">            data:&#123;</span><br><span class="line">                num:0,</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>代码运行效果：</p>
<p><img src="/images/1552038219804.png" alt=""></p>
<h2 id="2-4-条件渲染指令"><a href="#2-4-条件渲染指令" class="headerlink" title="2.4 条件渲染指令"></a>2.4 条件渲染指令</h2><p>vue中提供了两个指令可以用于判断是否要显示元素，分别是v-if和v-show。</p>
<h3 id="2-4-1-v-if"><a href="#2-4-1-v-if" class="headerlink" title="2.4.1 v-if"></a>2.4.1 v-if</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">标签元素：</span><br><span class="line">      <span class="comment">&lt;!-- vue对象最终会把条件的结果变成布尔值 --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-if</span>=<span class="string">"ok"</span>&gt;</span>Yes<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  data数据：</span><br><span class="line">  		data:&#123;</span><br><span class="line">      		ok:false    // true则是显示，false是隐藏</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-4-2-v-else"><a href="#2-4-2-v-else" class="headerlink" title="2.4.2 v-else"></a>2.4.2 v-else</h3><p>v-else指令来表示 v-if 的“else 块”，v-else 元素必须紧跟在带 v-if 或者 v-else-if 的元素的后面，否则它将不会被识别。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">标签元素：</span><br><span class="line">			<span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-if</span>=<span class="string">"ok"</span>&gt;</span>Yes<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-else</span>&gt;</span>No<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  data数据：</span><br><span class="line">  		data:&#123;</span><br><span class="line">      		ok:false    // true则是显示，false是隐藏</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-4-3-v-else-if"><a href="#2-4-3-v-else-if" class="headerlink" title="2.4.3 v-else-if"></a>2.4.3 v-else-if</h3><p>可以出现多个v-else-if语句，但是v-else-if之前必须有一个v-if开头。后面可以跟着v-else，也可以没有。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">标签元素：</span><br><span class="line">			<span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-if</span>=<span class="string">"num==1"</span>&gt;</span>num的值为1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-else-if</span>=<span class="string">"num==2"</span>&gt;</span>num的值为2<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">		  <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-else</span>&gt;</span>num的值是&#123;&#123;num&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  data数据：</span><br><span class="line">  		data:&#123;</span><br><span class="line">      		num:2</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-4-4-v-show"><a href="#2-4-4-v-show" class="headerlink" title="2.4.4 v-show"></a>2.4.4 v-show</h3><p>用法和v-if大致一样，区别在于2点：</p>
<ol>
<li>v-show后面不能v-else或者v-else-if</li>
<li>v-show隐藏元素时，使用的是display:none来隐藏的，而v-if是直接从HTML文档中移除元素[ DOM操作中的remove ]</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">标签元素：</span><br><span class="line">			<span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-show</span>=<span class="string">"ok"</span>&gt;</span>Hello!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  data数据：</span><br><span class="line">  		data:&#123;</span><br><span class="line">      		ok:false    // true则是显示，false是隐藏</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-5-列表渲染指令"><a href="#2-5-列表渲染指令" class="headerlink" title="2.5 列表渲染指令"></a>2.5 列表渲染指令</h2><p>在vue中，可以通过v-for指令可以将一组数据渲染到页面中，数据可以是数组或者对象。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">数据是数组：        </span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--book是列表的每一个元素--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"book in book_list"</span>&gt;</span>&#123;&#123;book.title&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--book是列表的每一个元素，index是每个元素的下标--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(book, index) in book_list"</span>&gt;</span>第&#123;&#123; index+1&#125;&#125;本图书：&#123;&#123;book.title&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> vm1 = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">                el:<span class="string">"#app"</span>,</span></span><br><span class="line">                data:&#123;</span><br><span class="line">                    book_list:[</span><br><span class="line"><span class="actionscript">                        &#123;<span class="string">"id"</span>:<span class="number">1</span>,<span class="string">"title"</span>:<span class="string">"图书名称1"</span>,<span class="string">"price"</span>:<span class="number">200</span>&#125;,</span></span><br><span class="line"><span class="actionscript">                        &#123;<span class="string">"id"</span>:<span class="number">2</span>,<span class="string">"title"</span>:<span class="string">"图书名称2"</span>,<span class="string">"price"</span>:<span class="number">200</span>&#125;,</span></span><br><span class="line"><span class="actionscript">                        &#123;<span class="string">"id"</span>:<span class="number">3</span>,<span class="string">"title"</span>:<span class="string">"图书名称3"</span>,<span class="string">"price"</span>:<span class="number">200</span>&#125;,</span></span><br><span class="line"><span class="actionscript">                        &#123;<span class="string">"id"</span>:<span class="number">4</span>,<span class="string">"title"</span>:<span class="string">"图书名称4"</span>,<span class="string">"price"</span>:<span class="number">200</span>&#125;,</span></span><br><span class="line">                    ]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">数据是对象：</span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--i是每一个value值--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"value in book"</span>&gt;</span>&#123;&#123;value&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--i是每一个value值,j是每一个键名--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"attr, value in book"</span>&gt;</span>&#123;&#123;attr&#125;&#125;:&#123;&#123;value&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> vm1 = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">                el:<span class="string">"#app"</span>,</span></span><br><span class="line">                data:&#123;</span><br><span class="line">                    book: &#123;</span><br><span class="line"><span class="actionscript">                        <span class="comment">// "attr":"value"</span></span></span><br><span class="line"><span class="actionscript">                        <span class="string">"id"</span>:<span class="number">11</span>,</span></span><br><span class="line"><span class="actionscript">                        <span class="string">"title"</span>:<span class="string">"图书名称1"</span>,</span></span><br><span class="line"><span class="actionscript">                        <span class="string">"price"</span>:<span class="number">200</span></span></span><br><span class="line">                    &#125;,</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;)</span><br><span class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>练习：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">goods:[</span><br><span class="line">	&#123;"name":"python入门","price":150&#125;,</span><br><span class="line">	&#123;"name":"python进阶","price":100&#125;,</span><br><span class="line">	&#123;"name":"python高级","price":75&#125;,</span><br><span class="line">	&#123;"name":"python研究","price":60&#125;,</span><br><span class="line">	&#123;"name":"python放弃","price":110&#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"># 把上面的数据采用table表格输出到页面，价格大于60的数据需要添加背景色橙色[orange]</span><br></pre></td></tr></table></figure>

<h1 id="3-Vue对象提供的属性功能"><a href="#3-Vue对象提供的属性功能" class="headerlink" title="3. Vue对象提供的属性功能"></a>3. Vue对象提供的属性功能</h1><h2 id="3-1-过滤器"><a href="#3-1-过滤器" class="headerlink" title="3.1 过滤器"></a>3.1 过滤器</h2><p>过滤器，就是vue允许开发者自定义的文本格式化函数，可以使用在两个地方：输出内容和操作数据中。</p>
<p>定义过滤器的方式有两种。</p>
<h3 id="3-1-1-使用Vue-filter-进行全局定义"><a href="#3-1-1-使用Vue-filter-进行全局定义" class="headerlink" title="3.1.1 使用Vue.filter()进行全局定义"></a>3.1.1 使用Vue.filter()进行全局定义</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">Vue.filter("RMB1", function(v)&#123;</span><br><span class="line">  	//就是来格式化(处理)v这个数据的</span><br><span class="line">  	if(v==0)&#123;</span><br><span class="line">    		return v</span><br><span class="line">  	&#125;</span><br><span class="line"></span><br><span class="line">  	return v+"元"</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="3-1-2-在vue对象中通过filters属性来定义"><a href="#3-1-2-在vue对象中通过filters属性来定义" class="headerlink" title="3.1.2 在vue对象中通过filters属性来定义"></a>3.1.2 在vue对象中通过filters属性来定义</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">var vm = new Vue(&#123;</span><br><span class="line">  el:"#app",</span><br><span class="line">  data:&#123;&#125;,</span><br><span class="line">  filters:&#123;</span><br><span class="line">    RMB2:function(value)&#123;</span><br><span class="line">      if(value=='')&#123;</span><br><span class="line">        return;</span><br><span class="line">      &#125;else&#123;</span><br><span class="line">      	return '¥ '+value;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="3-4-计算和侦听属性"><a href="#3-4-计算和侦听属性" class="headerlink" title="3.4 计算和侦听属性"></a>3.4 计算和侦听属性</h2><h3 id="3-4-1-计算属性"><a href="#3-4-1-计算属性" class="headerlink" title="3.4.1 计算属性"></a>3.4.1 计算属性</h3><p>我们之前学习过字符串反转，如果直接把反转的代码写在元素中，则会使得其他同事在开发时时不易发现数据被调整了，所以vue提供了一个计算属性(computed)，可以让我们把调整data数据的代码存在在该属性中。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/vue.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">		<span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el:<span class="string">"#app"</span>,</span></span><br><span class="line">            data:&#123;</span><br><span class="line"><span class="actionscript">                str1: <span class="string">"abcdefgh"</span></span></span><br><span class="line">            &#125;,</span><br><span class="line"><span class="actionscript">            computed:&#123;   <span class="comment">//计算属性：里面的函数都必须有返回值</span></span></span><br><span class="line"><span class="actionscript">                strRevs: <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">var</span> ret = <span class="keyword">this</span>.str1.split(<span class="string">""</span>).reverse().join(<span class="string">""</span>);</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">return</span> ret</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; str1 &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; strRevs &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3-4-2-监听属性"><a href="#3-4-2-监听属性" class="headerlink" title="3.4.2 监听属性"></a>3.4.2 监听属性</h3><p>侦听属性，可以帮助我们侦听data某个数据的变化，从而做相应的自定义操作。</p>
<p>侦听属性是一个对象，它的键是要监听的对象或者变量，值一般是函数，当侦听的data数据发生变化时，会自定执行的对应函数，这个函数在被调用时，vue会传入两个形参，第一个是变化前的数据值，第二个是变化后的数据值。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/vue.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="actionscript">         <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el:<span class="string">"#app"</span>,</span></span><br><span class="line">            data:&#123;</span><br><span class="line">                num:20</span><br><span class="line">            &#125;,</span><br><span class="line">            watch:&#123;</span><br><span class="line"><span class="actionscript">                num:<span class="function"><span class="keyword">function</span><span class="params">(newval,oldval)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">                    <span class="comment">//num发生变化的时候，要执行的代码</span></span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(<span class="string">"num已经发生了变化！"</span>);</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; num &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"num++"</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="3-5-vue对象的生命周期"><a href="#3-5-vue对象的生命周期" class="headerlink" title="3.5 vue对象的生命周期"></a>3.5 vue对象的生命周期</h2><p>每个Vue对象在创建时都要经过一系列的初始化过程。在这个过程中Vue.js会自动运行一些叫做生命周期的的钩子函数，我们可以使用这些函数，在对象创建的不同阶段加上我们需要的代码，实现特定的功能。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/vue.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el:<span class="string">"#app"</span>,</span></span><br><span class="line">            data:&#123;</span><br><span class="line">                num:0</span><br><span class="line">            &#125;,</span><br><span class="line"><span class="actionscript">            beforeCreate:<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">"beforeCreate,vm对象尚未创建,num="</span>+ <span class="keyword">this</span>.num);  <span class="comment">//undefined</span></span></span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.name=<span class="number">10</span>; <span class="comment">// 此时没有this对象呢，所以设置的name无效，被在创建对象的时候被覆盖为0</span></span></span><br><span class="line">            &#125;,</span><br><span class="line"><span class="actionscript">            created:<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">"created,vm对象创建完成,设置好了要控制的元素范围,num="</span>+<span class="keyword">this</span>.num );  <span class="comment">// 0</span></span></span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.num = <span class="number">20</span>;</span></span><br><span class="line">            &#125;,</span><br><span class="line"><span class="actionscript">            beforeMount:<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log( <span class="keyword">this</span>.$el.innerHTML ); <span class="comment">// &lt;p&gt;&#123;&#123;num&#125;&#125;&lt;/p&gt;</span></span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">"beforeMount,vm对象尚未把data数据显示到页面中,num="</span>+<span class="keyword">this</span>.num ); <span class="comment">// 20</span></span></span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.num = <span class="number">30</span>;</span></span><br><span class="line">            &#125;,</span><br><span class="line"><span class="actionscript">            mounted:<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log( <span class="keyword">this</span>.$el.innerHTML ); <span class="comment">// &lt;p&gt;30&lt;/p&gt;</span></span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">"mounted,vm对象已经把data数据显示到页面中,num="</span>+<span class="keyword">this</span>.num); <span class="comment">// 30</span></span></span><br><span class="line">            &#125;,</span><br><span class="line"><span class="actionscript">            beforeUpdate:<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="comment">// this.$el 就是我们上面的el属性了，$el表示当前vue.js所控制的元素#app</span></span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log( <span class="keyword">this</span>.$el.innerHTML );  <span class="comment">// &lt;p&gt;30&lt;/p&gt;</span></span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">"beforeUpdate,vm对象尚未把更新后的data数据显示到页面中,num="</span>+<span class="keyword">this</span>.num); <span class="comment">// beforeUpdate----31</span></span></span><br><span class="line">                </span><br><span class="line">            &#125;,</span><br><span class="line"><span class="actionscript">            updated:<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log( <span class="keyword">this</span>.$el.innerHTML ); <span class="comment">// &lt;p&gt;31&lt;/p&gt;</span></span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">"updated,vm对象已经把过呢更新后的data数据显示到页面中,num="</span> + <span class="keyword">this</span>.num ); <span class="comment">// updated----31</span></span></span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;num&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"num++"</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>总结：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在vue使用的过程中，如果要初始化操作，把初始化操作的代码放在 mounted 中执行。</span><br><span class="line">mounted阶段就是在vm对象已经把data数据实现到页面以后。一般页面初始化使用。例如，用户访问页面加载成功以后，就要执行的ajax请求。</span><br><span class="line"></span><br><span class="line">另一个就是created，这个阶段就是在 vue对象创建以后，把ajax请求后端数据的代码放进 created</span><br></pre></td></tr></table></figure>

<h2 id="3-2-阻止事件冒泡和刷新页面"><a href="#3-2-阻止事件冒泡和刷新页面" class="headerlink" title="3.2 阻止事件冒泡和刷新页面"></a>3.2 阻止事件冒泡和刷新页面</h2><p>使用.stop和.prevent</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.box1</span>&#123;</span></span><br><span class="line">            width: 200px;</span><br><span class="line">            height: 200px;</span><br><span class="line"><span class="css">            <span class="selector-tag">background</span>: <span class="selector-id">#ccc</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.box2</span>&#123;</span></span><br><span class="line">            width: 100px;</span><br><span class="line">            height: 100px;</span><br><span class="line">            background: pink;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/vue.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el:<span class="string">"#app"</span>,</span></span><br><span class="line">            data:&#123;&#125;</span><br><span class="line">        &#125;)        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box1"</span> @<span class="attr">click</span>=<span class="string">"alert('box1')"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box2"</span> @<span class="attr">click.stop.prevent</span>=<span class="string">"alert('box2')"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>   <span class="comment">&lt;!-- @click.stop来阻止事件冒泡 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"#"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交02"</span> @<span class="attr">click.prevent</span>=<span class="string">""</span>&gt;</span> <span class="comment">&lt;!-- @click.prevent来阻止表单提交 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="3-3-综合案例-todolist"><a href="#3-3-综合案例-todolist" class="headerlink" title="3.3 综合案例-todolist"></a>3.3 综合案例-todolist</h2><p>我的计划列表</p>
<p>html代码:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>todolist<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css">		<span class="selector-class">.list_con</span>&#123;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">width</span><span class="selector-pseudo">:600px</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">margin</span><span class="selector-pseudo">:50px</span> <span class="selector-tag">auto</span> 0;</span></span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="selector-class">.inputtxt</span>&#123;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">width</span><span class="selector-pseudo">:550px</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">height</span><span class="selector-pseudo">:30px</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">border</span><span class="selector-pseudo">:1px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ccc</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">padding</span><span class="selector-pseudo">:0px</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">text-indent</span><span class="selector-pseudo">:10px</span>;</span></span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="selector-class">.inputbtn</span>&#123;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">width</span><span class="selector-pseudo">:40px</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">height</span><span class="selector-pseudo">:32px</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">padding</span><span class="selector-pseudo">:0px</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">border</span><span class="selector-pseudo">:1px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ccc</span>;</span></span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="selector-class">.list</span>&#123;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">margin</span><span class="selector-pseudo">:0</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">padding</span><span class="selector-pseudo">:0</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">list-style</span><span class="selector-pseudo">:none</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">margin-top</span><span class="selector-pseudo">:20px</span>;</span></span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="selector-class">.list</span> <span class="selector-tag">li</span>&#123;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">height</span><span class="selector-pseudo">:40px</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">line-height</span><span class="selector-pseudo">:40px</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">border-bottom</span><span class="selector-pseudo">:1px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ccc</span>;</span></span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line"><span class="css">		<span class="selector-class">.list</span> <span class="selector-tag">li</span> <span class="selector-tag">span</span>&#123;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">float</span><span class="selector-pseudo">:left</span>;</span></span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line"><span class="css">		<span class="selector-class">.list</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span>&#123;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">float</span><span class="selector-pseudo">:right</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">text-decoration</span><span class="selector-pseudo">:none</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">margin</span><span class="selector-pseudo">:0</span> 10<span class="selector-tag">px</span>;</span></span><br><span class="line">		&#125;</span><br><span class="line">	<span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list_con"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">h2</span>&gt;</span>To do list<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">"txt1"</span> <span class="attr">class</span>=<span class="string">"inputtxt"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">"增加"</span> <span class="attr">id</span>=<span class="string">"btn1"</span> <span class="attr">class</span>=<span class="string">"inputbtn"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"list"</span> <span class="attr">class</span>=<span class="string">"list"</span>&gt;</span></span><br><span class="line">			<span class="comment">&lt;!-- javascript:; # 阻止a标签跳转 --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">span</span>&gt;</span>学习html<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">class</span>=<span class="string">"up"</span>&gt;</span> ↑ <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">class</span>=<span class="string">"down"</span>&gt;</span> ↓ <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">class</span>=<span class="string">"del"</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>学习css<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">class</span>=<span class="string">"up"</span>&gt;</span> ↑ <span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">class</span>=<span class="string">"down"</span>&gt;</span> ↓ <span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">class</span>=<span class="string">"del"</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>学习javascript<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">class</span>=<span class="string">"up"</span>&gt;</span> ↑ <span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">class</span>=<span class="string">"down"</span>&gt;</span> ↓ <span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">class</span>=<span class="string">"del"</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>特效实现效果：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>todolist<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css">		<span class="selector-class">.list_con</span>&#123;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">width</span><span class="selector-pseudo">:600px</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">margin</span><span class="selector-pseudo">:50px</span> <span class="selector-tag">auto</span> 0;</span></span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="selector-class">.inputtxt</span>&#123;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">width</span><span class="selector-pseudo">:550px</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">height</span><span class="selector-pseudo">:30px</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">border</span><span class="selector-pseudo">:1px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ccc</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">padding</span><span class="selector-pseudo">:0px</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">text-indent</span><span class="selector-pseudo">:10px</span>;</span></span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="selector-class">.inputbtn</span>&#123;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">width</span><span class="selector-pseudo">:40px</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">height</span><span class="selector-pseudo">:32px</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">padding</span><span class="selector-pseudo">:0px</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">border</span><span class="selector-pseudo">:1px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ccc</span>;</span></span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="selector-class">.list</span>&#123;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">margin</span><span class="selector-pseudo">:0</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">padding</span><span class="selector-pseudo">:0</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">list-style</span><span class="selector-pseudo">:none</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">margin-top</span><span class="selector-pseudo">:20px</span>;</span></span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="selector-class">.list</span> <span class="selector-tag">li</span>&#123;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">height</span><span class="selector-pseudo">:40px</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">line-height</span><span class="selector-pseudo">:40px</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">border-bottom</span><span class="selector-pseudo">:1px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ccc</span>;</span></span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line"><span class="css">		<span class="selector-class">.list</span> <span class="selector-tag">li</span> <span class="selector-tag">span</span>&#123;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">float</span><span class="selector-pseudo">:left</span>;</span></span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line"><span class="css">		<span class="selector-class">.list</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span>&#123;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">float</span><span class="selector-pseudo">:right</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">text-decoration</span><span class="selector-pseudo">:none</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">margin</span><span class="selector-pseudo">:0</span> 10<span class="selector-tag">px</span>;</span></span><br><span class="line">		&#125;</span><br><span class="line">	<span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"todolist"</span> <span class="attr">class</span>=<span class="string">"list_con"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">h2</span>&gt;</span>To do list<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"message"</span> <span class="attr">class</span>=<span class="string">"inputtxt"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> @<span class="attr">click</span>=<span class="string">"addItem"</span> <span class="attr">value</span>=<span class="string">"增加"</span> <span class="attr">class</span>=<span class="string">"inputbtn"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"list"</span> <span class="attr">class</span>=<span class="string">"list"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"item,key in dolist"</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">a</span> @<span class="attr">click</span>=<span class="string">"upItem(key)"</span> <span class="attr">class</span>=<span class="string">"up"</span> &gt;</span> ↑ <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">a</span> @<span class="attr">click</span>=<span class="string">"downItem(key)"</span> <span class="attr">class</span>=<span class="string">"down"</span>&gt;</span> ↓ <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">a</span> @<span class="attr">click</span>=<span class="string">"delItem(key)"</span> <span class="attr">class</span>=<span class="string">"del"</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 计划列表代码</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el:<span class="string">"#todolist"</span>,</span></span><br><span class="line">        data:&#123;</span><br><span class="line"><span class="actionscript">            message:<span class="string">""</span>,</span></span><br><span class="line">            dolist:[</span><br><span class="line"><span class="actionscript">                <span class="string">"学习html"</span>,</span></span><br><span class="line"><span class="actionscript">                <span class="string">"学习css"</span>,</span></span><br><span class="line"><span class="actionscript">                <span class="string">"学习javascript"</span>,</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">            addItem()&#123;</span><br><span class="line"><span class="actionscript">                <span class="keyword">if</span>(<span class="keyword">this</span>.messsage==<span class="string">""</span>)&#123;</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.dolist.push(<span class="keyword">this</span>.message);</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.message = <span class="string">""</span></span></span><br><span class="line">            &#125;,</span><br><span class="line">            delItem(key)&#123;</span><br><span class="line"><span class="actionscript">                <span class="comment">// 删除和替换</span></span></span><br><span class="line"><span class="actionscript">                <span class="comment">// 参数1: 开始下表</span></span></span><br><span class="line"><span class="actionscript">                <span class="comment">// 参数2: 元素长度，如果不填默认删除到最后</span></span></span><br><span class="line"><span class="actionscript">                <span class="comment">// 参数3: 表示使用当前参数替换已经删除内容的位置</span></span></span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.dolist.splice(key, <span class="number">1</span>);</span></span><br><span class="line">            &#125;,</span><br><span class="line">            upItem(key)&#123;</span><br><span class="line">                if(key==0)&#123;</span><br><span class="line"><span class="actionscript">                    <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line">                &#125;</span><br><span class="line"><span class="actionscript">                <span class="comment">// 向上移动</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">let</span> result = <span class="keyword">this</span>.dolist.splice(key,<span class="number">1</span>);</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.dolist.splice(key<span class="number">-1</span>,<span class="number">0</span>,result[<span class="number">0</span>]);</span></span><br><span class="line">            &#125;,</span><br><span class="line">            downItem(key)&#123;</span><br><span class="line"><span class="actionscript">                <span class="comment">// 向下移动</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">let</span> result = <span class="keyword">this</span>.dolist.splice(key, <span class="number">1</span>);</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(result);</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.dolist.splice(key+<span class="number">1</span>,<span class="number">0</span>,result[<span class="number">0</span>]);</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端框架</category>
      </categories>
      <tags>
        <tag>vue框架</tag>
      </tags>
  </entry>
  <entry>
    <title>[了解知识]</title>
    <url>/2020/02/19/%E4%BA%86%E8%A7%A3%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<h3 id="名称空间-了解"><a href="#名称空间-了解" class="headerlink" title="名称空间(了解)"></a>名称空间(了解)</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 当多个应用出现了相同的别名 我们研究反向解析会不会自动识别应用前缀</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">正常情况下的反向解析是没有办法自动识别前缀的</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 名称空间</span></span><br><span class="line">	<span class="comment"># 总路由</span></span><br><span class="line">    url(<span class="string">r'^app01/'</span>,include(<span class="string">'app01.urls'</span>,namespace=<span class="string">'app01'</span>)),</span><br><span class="line">    url(<span class="string">r'^app02/'</span>,include(<span class="string">'app02.urls'</span>,namespace=<span class="string">'app02'</span>))</span><br><span class="line">  <span class="comment"># 解析的时候</span></span><br><span class="line">  	<span class="comment"># app01</span></span><br><span class="line">  	urlpatterns = [</span><br><span class="line">    url(<span class="string">r'^reg/'</span>,views.reg,name=<span class="string">'reg'</span>)</span><br><span class="line">		]</span><br><span class="line">    <span class="comment"># app02</span></span><br><span class="line">    urlpatterns = [</span><br><span class="line">    url(<span class="string">r'^reg/'</span>,views.reg,name=<span class="string">'reg'</span>)</span><br><span class="line">		]</span><br><span class="line">    </span><br><span class="line">  	reverse(<span class="string">'app01:reg'</span>)</span><br><span class="line">    reverse(<span class="string">'app02:reg'</span>)</span><br><span class="line">    </span><br><span class="line">    &#123;% url <span class="string">'app01:reg'</span> %&#125;</span><br><span class="line">    &#123;% url <span class="string">'app02:reg'</span> %&#125;</span><br><span class="line"><span class="comment"># 其实只要保证名字不冲突 就没有必要使用名称空间</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">一般情况下 有多个app的时候我们在起别名的时候会加上app的前缀</span></span><br><span class="line"><span class="string">这样的话就能够确保多个app之间名字不冲突的问题</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r'^reg/'</span>,views.reg,name=<span class="string">'app01_reg'</span>)</span><br><span class="line">]</span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r'^reg/'</span>,views.reg,name=<span class="string">'app02_reg'</span>)</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h3 id="伪静态-了解"><a href="#伪静态-了解" class="headerlink" title="伪静态(了解)"></a>伪静态(了解)</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">静态网页</span></span><br><span class="line"><span class="string">	数据是写死的 万年不变</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">伪静态</span></span><br><span class="line"><span class="string">	将一个动态网页伪装成静态网页</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">	为什么要伪装呢？</span></span><br><span class="line"><span class="string">		https://www.cnblogs.com/Dominic-Ji/p/9234099.html</span></span><br><span class="line"><span class="string">		伪装的目的在于增大本网站的seo查询力度</span></span><br><span class="line"><span class="string">		并且增加搜索引擎收藏本网上的概率</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">	搜索引擎本质上就是一个巨大的爬虫程序</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">	总结:</span></span><br><span class="line"><span class="string">		无论你怎么优化 怎么处理</span></span><br><span class="line"><span class="string">		始终还是干不过RMB玩家</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r'^reg.html'</span>,views.reg,name=<span class="string">'app02_reg'</span>)</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h3 id="虚拟环境-了解"><a href="#虚拟环境-了解" class="headerlink" title="虚拟环境(了解)"></a>虚拟环境(了解)</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">在正常开发中 我们会给每一个项目配备一个该项目独有的解释器环境</span></span><br><span class="line"><span class="string">该环境内只有该项目用到的模块 用不到一概不装</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">linux:缺什么才装什么</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">虚拟环境</span></span><br><span class="line"><span class="string">	你每创建一个虚拟环境就类似于重新下载了一个纯净的python解释器</span></span><br><span class="line"><span class="string">	但是虚拟环境不要创建太多，是需要消耗硬盘空间的</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">扩展:</span></span><br><span class="line"><span class="string">	每一个项目都需要用到很多模块 并且每个模块版本可能还不一样</span></span><br><span class="line"><span class="string">	那我该如何安装呢？ 一个个看一个个装？？？</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">	开发当中我们会给每一个项目配备一个requirements.txt文件</span></span><br><span class="line"><span class="string">	里面书写了该项目所有的模块即版本</span></span><br><span class="line"><span class="string">	你只需要直接输入一条命令即可一键安装所有模块即版本</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<h3 id="django版本区别"><a href="#django版本区别" class="headerlink" title="django版本区别"></a>django版本区别</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">1.django1.X路由层使用的是url方法</span></span><br><span class="line"><span class="string">	而在django2.Xhe3.X版本中路由层使用的是path方法</span></span><br><span class="line"><span class="string">	url()第一个参数支持正则</span></span><br><span class="line"><span class="string">	path()第一个参数是不支持正则的 写什么就匹配什么</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">	如果你习惯使用path那么也给你提供了另外一个方法</span></span><br><span class="line"><span class="string">		from django.urls import path, re_path</span></span><br><span class="line"><span class="string">		from django.conf.urls import url</span></span><br><span class="line"><span class="string">		</span></span><br><span class="line"><span class="string">		re_path(r'^index/',index),</span></span><br><span class="line"><span class="string">    url(r'^login/',login)</span></span><br><span class="line"><span class="string">  2.X和3.X里面的re_path就等价于1.X里面的url</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">2.虽然path不支持正则 但是它的内部支持五种转换器</span></span><br><span class="line"><span class="string">	path('index/&lt;int:id&gt;/',index)</span></span><br><span class="line"><span class="string">	# 将第二个路由里面的内容先转成整型然后以关键字的形式传递给后面的视图函数</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">	def index(request,id):</span></span><br><span class="line"><span class="string">    print(id,type(id))</span></span><br><span class="line"><span class="string">    return HttpResponse('index')</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">  str,匹配除了路径分隔符（/）之外的非空字符串，这是默认的形式</span></span><br><span class="line"><span class="string">	int,匹配正整数，包含0。</span></span><br><span class="line"><span class="string">	slug,匹配字母、数字以及横杠、下划线组成的字符串。</span></span><br><span class="line"><span class="string">	uuid,匹配格式化的uuid，如 075194d3-6885-417e-a8a8-6c931e272f00。</span></span><br><span class="line"><span class="string">	path,匹配任何非空字符串，包含了路径分隔符（/）（不能用？）</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">3.除了有默认的五个转换器之外 还支持自定义转换器(了解)</span></span><br><span class="line"><span class="string">	class MonthConverter:</span></span><br><span class="line"><span class="string">    regex='\d&#123;2&#125;' # 属性名必须为regex</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    def to_python(self, value):</span></span><br><span class="line"><span class="string">        return int(value)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    def to_url(self, value):</span></span><br><span class="line"><span class="string">        return value # 匹配的regex是两个数字，返回的结果也必须是两个数字</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">	from django.urls import path,register_converter</span></span><br><span class="line"><span class="string">	from app01.path_converts import MonthConverter</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">	# 先注册转换器</span></span><br><span class="line"><span class="string">	register_converter(MonthConverter,'mon')</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">	from app01 import views</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">	urlpatterns = [</span></span><br><span class="line"><span class="string">    path('articles/&lt;int:year&gt;/&lt;mon:month&gt;/&lt;slug:other&gt;/', 	views.article_detail, name='aaa'),</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">4.模型层里面1.X外键默认都是级联更新删除的</span></span><br><span class="line"><span class="string">但是到了2.X和3.X中需要你自己手动配置参数</span></span><br><span class="line"><span class="string">	models.ForeignKey(to='Publish')</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">	models.ForeignKey(to='Publish',on_delete=models.CASCADE...)</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>django框架</tag>
      </tags>
  </entry>
  <entry>
    <title>[事务与其他介绍]</title>
    <url>/2020/03/13/%E4%BA%8B%E5%8A%A1%E4%B8%8E%E5%85%B6%E4%BB%96%E4%BB%8B%E7%BB%8D/</url>
    <content><![CDATA[<h3 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h3><ul>
<li><p>什么是视图</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;&quot;&quot;</span><br><span class="line">视图就是通过查询得到一张虚拟表，然后保存下来，下次可以直接使用</span><br><span class="line">其实视图也是表</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>
</li>
<li><p>为什么要用视图</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;&quot;&quot;</span><br><span class="line">如果要频繁的操作一张虚拟表(拼表组成的)，你就可以制作成视图 后续直接操作</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>
</li>
<li><p>如何操作</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 固定语法</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">view</span> 表名 <span class="keyword">as</span> 虚拟表的查询<span class="keyword">sql</span>语句</span><br><span class="line"></span><br><span class="line"><span class="comment"># 具体操作</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">view</span> teacher2course <span class="keyword">as</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> teacher <span class="keyword">INNER</span> <span class="keyword">JOIN</span> course</span><br><span class="line"><span class="keyword">on</span> teacher.tid = course.teacher_id</span><br><span class="line">;</span><br></pre></td></tr></table></figure>
</li>
<li><p>注意</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;&quot;&quot;</span><br><span class="line">1 创建视图在硬盘上只会有表结构 没有表数据(数据还是来自于之前的表)</span><br><span class="line">2 视图一般只用来查询 里面的数据不要继续修改 可能会影响真正的表</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>
</li>
<li><p>视图到底使用频率高不高呢？</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;&quot;&quot;</span><br><span class="line">不高</span><br><span class="line">当你创建了很多视图之后 会造成表的不好维护 </span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"># 总结</span><br><span class="line">	视图了解即可 基本不用！！！</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="触发器-了解"><a href="#触发器-了解" class="headerlink" title="触发器(了解)"></a>触发器(了解)</h3><p>在满足对表数据进行增、删、改的情况下，自动触发的功能</p>
<p>使用触发器可以帮助我们实现监控、日志…</p>
<p>触发器可以在六种情况下自动触发 增前 增后 删前删后 改前改后</p>
<h3 id="基本语法结构"><a href="#基本语法结构" class="headerlink" title="基本语法结构"></a>基本语法结构</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">trigger</span> 触发器的名字  <span class="keyword">before</span>/<span class="keyword">after</span> <span class="keyword">insert</span>/<span class="keyword">update</span>/<span class="keyword">delete</span> <span class="keyword">on</span> 表名</span><br><span class="line"><span class="keyword">for</span> <span class="keyword">each</span> <span class="keyword">row</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">	<span class="keyword">sql</span>语句</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 具体使用 针对触发器的名字 我们通常需要做到见名知意</span></span><br><span class="line"><span class="comment"># 针对增</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">trigger</span> tri_before_insert_t1  <span class="keyword">before</span> <span class="keyword">insert</span> <span class="keyword">on</span> t1</span><br><span class="line"><span class="keyword">for</span> <span class="keyword">each</span> <span class="keyword">row</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">	<span class="keyword">sql</span>语句</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">trigger</span> tri_after_insert_t1  <span class="keyword">after</span> <span class="keyword">insert</span> <span class="keyword">on</span> t1</span><br><span class="line"><span class="keyword">for</span> <span class="keyword">each</span> <span class="keyword">row</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">	<span class="keyword">sql</span>语句</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="string">"""针对删除和修改 书写格式一致"""</span></span><br><span class="line"></span><br><span class="line">ps:修改MySQL默认的语句结束符  只作用于当前窗口</span><br><span class="line">	delimiter $$  将默认的结束符号由;改为$$</span><br><span class="line">    delimiter ;</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 案例</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> cmd (</span><br><span class="line">    <span class="keyword">id</span> <span class="built_in">INT</span> PRIMARY <span class="keyword">KEY</span> auto_increment,</span><br><span class="line">    <span class="keyword">USER</span> <span class="built_in">CHAR</span> (<span class="number">32</span>),</span><br><span class="line">    priv <span class="built_in">CHAR</span> (<span class="number">10</span>),</span><br><span class="line">    cmd <span class="built_in">CHAR</span> (<span class="number">64</span>),</span><br><span class="line">    sub_time datetime, <span class="comment">#提交时间</span></span><br><span class="line">    <span class="keyword">success</span> enum (<span class="string">'yes'</span>, <span class="string">'no'</span>) <span class="comment">#0代表执行失败</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> errlog (</span><br><span class="line">    <span class="keyword">id</span> <span class="built_in">INT</span> PRIMARY <span class="keyword">KEY</span> auto_increment,</span><br><span class="line">    err_cmd <span class="built_in">CHAR</span> (<span class="number">64</span>),</span><br><span class="line">    err_time datetime</span><br><span class="line">);</span><br><span class="line">"""</span><br><span class="line">当cmd表中的记录succes字段是no那么就触发触发器的执行去errlog表中插入数据</span><br><span class="line">NEW指代的就是一条条数据对象</span><br><span class="line">"""</span><br><span class="line">delimiter $$</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">trigger</span> tri_after_insert_cmd <span class="keyword">after</span> <span class="keyword">insert</span> <span class="keyword">on</span> cmd </span><br><span class="line"><span class="keyword">for</span> <span class="keyword">each</span> <span class="keyword">row</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">	<span class="keyword">if</span> NEW.success = <span class="string">'no'</span> <span class="keyword">then</span></span><br><span class="line">    	<span class="keyword">insert</span> <span class="keyword">into</span> errlog(err_cmd,err_time) <span class="keyword">values</span>(NEW.cmd,NEW.sub_time);</span><br><span class="line">    <span class="keyword">end</span> <span class="keyword">if</span>;</span><br><span class="line"><span class="keyword">end</span> $$</span><br><span class="line">delimiter ;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 朝cmd表插入数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> cmd (</span><br><span class="line">    <span class="keyword">USER</span>,</span><br><span class="line">    priv,</span><br><span class="line">    cmd,</span><br><span class="line">    sub_time,</span><br><span class="line">    <span class="keyword">success</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">    (<span class="string">'jason'</span>,<span class="string">'0755'</span>,<span class="string">'ls -l /etc'</span>,<span class="keyword">NOW</span>(),<span class="string">'yes'</span>),</span><br><span class="line">    (<span class="string">'jason'</span>,<span class="string">'0755'</span>,<span class="string">'cat /etc/passwd'</span>,<span class="keyword">NOW</span>(),<span class="string">'no'</span>),</span><br><span class="line">    (<span class="string">'jason'</span>,<span class="string">'0755'</span>,<span class="string">'useradd xxx'</span>,<span class="keyword">NOW</span>(),<span class="string">'no'</span>),</span><br><span class="line">    (<span class="string">'jason'</span>,<span class="string">'0755'</span>,<span class="string">'ps aux'</span>,<span class="keyword">NOW</span>(),<span class="string">'yes'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除触发器</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">trigger</span> tri_after_insert_cmd;</span><br></pre></td></tr></table></figure>

<h3 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h3><ul>
<li><p>什么是事务</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;&quot;&quot;</span><br><span class="line">开启一个事务可以包含多条sql语句 这些sql语句要么同时成功</span><br><span class="line">要么一个都别想成功 称之为事务的原子性</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>
</li>
<li><p>事务的作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;&quot;&quot;</span><br><span class="line">保证了对数据操作的安全性</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">eg:还钱的例子</span><br><span class="line">    egon用银行卡给我的支付宝转账1000</span><br><span class="line">    	1 将egon银行卡账户的数据减1000块</span><br><span class="line">        2 将jason支付宝账户的数据加1000块</span><br><span class="line">    </span><br><span class="line">   	你在操作多条数据的时候可能会出现某几条操作不成功的情况</span><br></pre></td></tr></table></figure>
</li>
<li><p>事务的四大特性</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;&quot;&quot;</span><br><span class="line">ACID</span><br><span class="line">A:原子性</span><br><span class="line">	一个事务是一个不可分割的单位，事务中包含的诸多操作</span><br><span class="line">	要么同时成功要么同时失败</span><br><span class="line">C:一致性</span><br><span class="line">	事务必须是使数据库从一个一致性的状态变到另外一个一致性的状态</span><br><span class="line">	一致性跟原子性是密切相关的</span><br><span class="line">I:隔离性</span><br><span class="line">	一个事务的执行不能被其他事务干扰</span><br><span class="line">	（即一个事务内部的操作及使用到的数据对并发的其他事务是隔离的，并发执行的事务之间也是互相不干扰的）</span><br><span class="line">D:持久性</span><br><span class="line">	也叫&quot;永久性&quot;</span><br><span class="line">	一个事务一旦提交成功执行成功 那么它对数据库中数据的修改应该是永久的</span><br><span class="line">	接下来的其他操作或者故障不应该对其有任何的影响</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>
</li>
<li><p>如何使用事务</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 事务相关的关键字</span></span><br><span class="line"><span class="comment"># 1 开启事务</span></span><br><span class="line"><span class="keyword">start</span> <span class="keyword">transaction</span>;</span><br><span class="line"><span class="comment"># 2 回滚(回到事务执行之前的状态)</span></span><br><span class="line"><span class="keyword">rollback</span>;</span><br><span class="line"><span class="comment"># 3 确认(确认之后就无法回滚了)</span></span><br><span class="line"><span class="keyword">commit</span>;</span><br><span class="line"></span><br><span class="line">"""模拟转账功能"""</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">user</span>(</span><br><span class="line">	<span class="keyword">id</span> <span class="built_in">int</span> primary <span class="keyword">key</span> auto_increment,</span><br><span class="line">    <span class="keyword">name</span> <span class="built_in">char</span>(<span class="number">16</span>),</span><br><span class="line">    balance <span class="built_in">int</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span>(<span class="keyword">name</span>,balance) <span class="keyword">values</span></span><br><span class="line">(<span class="string">'jason'</span>,<span class="number">1000</span>),</span><br><span class="line">(<span class="string">'egon'</span>,<span class="number">1000</span>),</span><br><span class="line">(<span class="string">'tank'</span>,<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1 先开启事务</span></span><br><span class="line"><span class="keyword">start</span> <span class="keyword">transaction</span>;</span><br><span class="line"><span class="comment"># 2 多条sql语句</span></span><br><span class="line"><span class="keyword">update</span> <span class="keyword">user</span> <span class="keyword">set</span> balance=<span class="number">900</span> <span class="keyword">where</span> <span class="keyword">name</span>=<span class="string">'jason'</span>;</span><br><span class="line"><span class="keyword">update</span> <span class="keyword">user</span> <span class="keyword">set</span> balance=<span class="number">1010</span> <span class="keyword">where</span> <span class="keyword">name</span>=<span class="string">'egon'</span>;</span><br><span class="line"><span class="keyword">update</span> <span class="keyword">user</span> <span class="keyword">set</span> balance=<span class="number">1090</span> <span class="keyword">where</span> <span class="keyword">name</span>=<span class="string">'tank'</span>;</span><br><span class="line"></span><br><span class="line">"""</span><br><span class="line">总结</span><br><span class="line">	当你想让多条sql语句保持一致性 要么同时成功要么同时失败 </span><br><span class="line">	你就应该考虑使用事务</span><br><span class="line">"""</span><br></pre></td></tr></table></figure>

<h3 id="存储过程-了解"><a href="#存储过程-了解" class="headerlink" title="存储过程(了解)"></a>存储过程(了解)</h3><p>存储过程就类似于python中的自定义函数</p>
<p>它的内部包含了一系列可以执行的sql语句，存储过程存放于MySQL服务端中，你可以直接通过调用存储过程触发内部sql语句的执行</p>
<p><strong>基本使用</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> 存储过程的名字(形参<span class="number">1</span>,形参<span class="number">2</span>,...)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">	<span class="keyword">sql</span>代码</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment"># 调用</span></span><br><span class="line"><span class="keyword">call</span> 存储过程的名字();</span><br></pre></td></tr></table></figure>

<h3 id="三种开发模型"><a href="#三种开发模型" class="headerlink" title="三种开发模型"></a>三种开发模型</h3><p>第一种</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;&quot;&quot;</span><br><span class="line">应用程序:程序员写代码开发</span><br><span class="line">MySQL:提前编写好存储过程，供应用程序调用</span><br><span class="line"></span><br><span class="line">好处:开发效率提升了 执行效率也上去了</span><br><span class="line">缺点:考虑到认为元素、跨部门沟通的问题  后续的存储过程的扩展性差</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>

<p>第二种</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;&quot;&quot;</span><br><span class="line">应用程序:程序员写代码开发之外 设计到数据库操作也自己动手写</span><br><span class="line">优点:扩展性很高</span><br><span class="line">缺点:</span><br><span class="line">	开发效率降低</span><br><span class="line">	编写sql语句太过繁琐 而且后续还需要考虑sql优化的问题</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>

<p>第三种</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;&quot;&quot;</span><br><span class="line">应用程序:只写程序代码 不写sql语句 基于别人写好的操作MySQL的python框架直接调用操作即可			ORM框架  </span><br><span class="line">优点:开发效率比上面两种情况都要高 </span><br><span class="line">缺点:语句的扩展性差 可能会出现效率低下的问题 </span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>

<p>第一种基本不用。一般都是第三种，出现效率问题再动手写sql</p>
</li>
<li><p>存储过程具体演示</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">delimiter $$</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> p1(</span><br><span class="line">	<span class="keyword">in</span> m <span class="built_in">int</span>,  <span class="comment"># 只进不出  m不能返回出去</span></span><br><span class="line">    <span class="keyword">in</span> n <span class="built_in">int</span>,</span><br><span class="line">    <span class="keyword">out</span> res <span class="built_in">int</span>  <span class="comment"># 该形参可以返回出去</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">	<span class="keyword">select</span> tname <span class="keyword">from</span> teacher <span class="keyword">where</span> tid&gt;m <span class="keyword">and</span> tid&lt;n;</span><br><span class="line">    <span class="keyword">set</span> res=<span class="number">666</span>;  <span class="comment"># 将res变量修改 用来标识当前的存储过程代码确实执行了</span></span><br><span class="line"><span class="keyword">end</span> $$</span><br><span class="line">delimiter ;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 针对形参res 不能直接传数据 应该传一个变量名</span></span><br><span class="line"><span class="comment"># 定义变量</span></span><br><span class="line"><span class="keyword">set</span> @ret = <span class="number">10</span>;</span><br><span class="line"><span class="comment"># 查看变量对应的值</span></span><br><span class="line"><span class="keyword">select</span> @ret;</span><br></pre></td></tr></table></figure>

<p>在pymysql模块中如何调用存储过程呢？</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">import pymysql</span><br><span class="line"></span><br><span class="line">conn = pymysql.connect(</span><br><span class="line">    host = '127.0.0.1',</span><br><span class="line">    port = 3306,</span><br><span class="line">    user = 'root',</span><br><span class="line">    passwd = '123456',</span><br><span class="line">    db = 'day48',</span><br><span class="line">    charset = 'utf8',</span><br><span class="line">    autocommit = True</span><br><span class="line">)</span><br><span class="line">cursor = conn.cursor(pymysql.cursors.DictCursor)</span><br><span class="line"><span class="comment"># 调用存储过程</span></span><br><span class="line">cursor.callproc('p1',(1,5,10))</span><br><span class="line">"""</span><br><span class="line">@_p1_0=1</span><br><span class="line">@_p1_1=5</span><br><span class="line">@_p1_2=10</span><br><span class="line">"""</span><br><span class="line"><span class="comment"># print(cursor.fetchall())</span></span><br><span class="line">cursor.execute(<span class="string">'select @_p1_2;'</span>)</span><br><span class="line">print(cursor.fetchall())</span><br></pre></td></tr></table></figure>

<h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p>跟存储过程是有区别的，存储过程是自定义函数，函数就类似于是内置函数</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">('jason','0755','ls -l /etc',NOW(),'yes')</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> blog (</span><br><span class="line">    <span class="keyword">id</span> <span class="built_in">INT</span> PRIMARY <span class="keyword">KEY</span> auto_increment,</span><br><span class="line">    <span class="keyword">NAME</span> <span class="built_in">CHAR</span> (<span class="number">32</span>),</span><br><span class="line">    sub_time datetime</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> blog (<span class="keyword">NAME</span>, sub_time)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">    (<span class="string">'第1篇'</span>,<span class="string">'2015-03-01 11:31:21'</span>),</span><br><span class="line">    (<span class="string">'第2篇'</span>,<span class="string">'2015-03-11 16:31:21'</span>),</span><br><span class="line">    (<span class="string">'第3篇'</span>,<span class="string">'2016-07-01 10:21:31'</span>),</span><br><span class="line">    (<span class="string">'第4篇'</span>,<span class="string">'2016-07-22 09:23:21'</span>),</span><br><span class="line">    (<span class="string">'第5篇'</span>,<span class="string">'2016-07-23 10:11:11'</span>),</span><br><span class="line">    (<span class="string">'第6篇'</span>,<span class="string">'2016-07-25 11:21:31'</span>),</span><br><span class="line">    (<span class="string">'第7篇'</span>,<span class="string">'2017-03-01 15:33:21'</span>),</span><br><span class="line">    (<span class="string">'第8篇'</span>,<span class="string">'2017-03-01 17:32:21'</span>),</span><br><span class="line">    (<span class="string">'第9篇'</span>,<span class="string">'2017-03-01 18:31:21'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">date_format</span>(sub_time,<span class="string">'%Y-%m'</span>),<span class="keyword">count</span>(<span class="keyword">id</span>) <span class="keyword">from</span> blog <span class="keyword">group</span> <span class="keyword">by</span> <span class="keyword">date_format</span>(sub_time,<span class="string">'%Y-%m'</span>);</span><br></pre></td></tr></table></figure>

<h3 id="流程控制-了解"><a href="#流程控制-了解" class="headerlink" title="流程控制(了解)"></a>流程控制(了解)</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment"># if判断</span></span><br><span class="line">delimiter //</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> proc_if ()</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">declare</span> i <span class="built_in">int</span> <span class="keyword">default</span> <span class="number">0</span>;</span><br><span class="line">    if i = 1 THEN</span><br><span class="line">        <span class="keyword">SELECT</span> <span class="number">1</span>;</span><br><span class="line">    ELSEIF i = 2 THEN</span><br><span class="line">        <span class="keyword">SELECT</span> <span class="number">2</span>;</span><br><span class="line">    ELSE</span><br><span class="line">        <span class="keyword">SELECT</span> <span class="number">7</span>;</span><br><span class="line">    <span class="keyword">END</span> <span class="keyword">IF</span>;</span><br><span class="line"><span class="keyword">END</span> //</span><br><span class="line">delimiter ;</span><br><span class="line"><span class="comment"># while循环</span></span><br><span class="line">delimiter //</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> proc_while ()</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">DECLARE</span> <span class="keyword">num</span> <span class="built_in">INT</span> ;</span><br><span class="line">    <span class="keyword">SET</span> <span class="keyword">num</span> = <span class="number">0</span> ;</span><br><span class="line">    WHILE num &lt; 10 DO</span><br><span class="line">        <span class="keyword">SELECT</span></span><br><span class="line">            <span class="keyword">num</span> ;</span><br><span class="line">        <span class="keyword">SET</span> <span class="keyword">num</span> = <span class="keyword">num</span> + <span class="number">1</span> ;</span><br><span class="line">    <span class="keyword">END</span> <span class="keyword">WHILE</span> ;</span><br></pre></td></tr></table></figure>

<h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><p>ps:数据都是存在与硬盘上的，查询数据不可避免的需要进行IO操作</p>
<p>索引:就是一种数据结构，类似于书的目录。意味着以后在查询数据的应该先找目录再找数据，而不是一页一页的翻书，从而提升查询速度降低IO操作</p>
<p>索引在MySQL中也叫“键”,是存储引擎用于快速查找记录的一种数据结构</p>
<ul>
<li>primary key</li>
<li>unique key</li>
<li>index key</li>
</ul>
<p>注意foreign key不是用来加速查询用的，不在我们的而研究范围之内</p>
<p>上面的三种key，前面两种除了可以增加查询速度之外各自还具有约束条件，而最后一种index key没有任何的约束条件，只是用来帮助你快速查询数据</p>
<p><strong>本质</strong></p>
<p>通过不断的缩小想要的数据范围筛选出最终的结果，同时将随机事件(一页一页的翻)</p>
<p>变成顺序事件(先找目录、找数据)</p>
<p>也就是说有了索引机制，我们可以总是用一种固定的方式查找数据</p>
<p>一张表中可以有多个索引(多个目录)</p>
<p>索引虽然能够帮助你加快查询速度但是也有缺点</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;&quot;&quot;</span><br><span class="line">1 当表中有大量数据存在的前提下 创建索引速度会很慢</span><br><span class="line">2 在索引创建完毕之后 对表的查询性能会大幅度的提升 但是写的性能也会大幅度的降低</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">索引不要随意的创建！！！</span><br></pre></td></tr></table></figure>

<h3 id="b-树"><a href="#b-树" class="headerlink" title="b+树"></a>b+树</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;&quot;&quot;</span><br><span class="line">只有叶子节点存放的是真实的数据 其他节点存放的是虚拟数据 仅仅是用来指路的</span><br><span class="line">树的层级越高查询数据所需要经历的步骤就越多(树有几层查询数据就需要几步)</span><br><span class="line"></span><br><span class="line">一个磁盘块存储是有限制的</span><br><span class="line">为什么建议你将id字段作为索引</span><br><span class="line">	占得空间少 一个磁盘块能够存储的数据多</span><br><span class="line">	那么久降低了树的高度 从而减少查询次数</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>

<h3 id="聚集索引-primary-key"><a href="#聚集索引-primary-key" class="headerlink" title="聚集索引(primary key)"></a>聚集索引(primary key)</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;&quot;&quot;</span><br><span class="line">聚集索引指的就是主键 </span><br><span class="line">Innodb  只有两个文件  直接将主键存放在了idb表中 </span><br><span class="line">MyIsam  三个文件  单独将索引存在一个文件</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>

<h3 id="辅助索引-unique-index"><a href="#辅助索引-unique-index" class="headerlink" title="辅助索引(unique,index)"></a>辅助索引(unique,index)</h3><p>查询数据的时候不可能一直使用到主键，也有可能会用到name,password等其他字段</p>
<p>那么这个时候你是没有办法利用聚集索引。这个时候你就可以根据情况给其他字段设置辅助索引(也是一个b+树）</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">"""</span><br><span class="line">叶子节点存放的是数据对应的主键值</span><br><span class="line">	先按照辅助索引拿到数据的主键值</span><br><span class="line">	之后还是需要去主键的聚集索引里面查询数据</span><br><span class="line">"""</span><br></pre></td></tr></table></figure>

<h3 id="覆盖索引"><a href="#覆盖索引" class="headerlink" title="覆盖索引"></a>覆盖索引</h3><p>在辅助索引的叶子节点就已经拿到了需要的数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 给name设置辅助索引</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">name</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> <span class="keyword">name</span>=<span class="string">'jason'</span>;</span><br><span class="line"><span class="comment"># 非覆盖索引</span></span><br><span class="line"><span class="keyword">select</span> age <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> <span class="keyword">name</span>=<span class="string">'jason'</span>;</span><br></pre></td></tr></table></figure>

<h3 id="测试索引是否有效的代码"><a href="#测试索引是否有效的代码" class="headerlink" title="测试索引是否有效的代码"></a>测试索引是否有效的代码</h3><p>感兴趣就自己试一试 不感兴趣直接忽略</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">**准备**</span><br><span class="line"></span><br><span class="line">​```mysql</span><br><span class="line"><span class="comment">#1. 准备表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> s1(</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">int</span>,</span><br><span class="line"><span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">20</span>),</span><br><span class="line">gender <span class="built_in">char</span>(<span class="number">6</span>),</span><br><span class="line">email <span class="built_in">varchar</span>(<span class="number">50</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">#2. 创建存储过程，实现批量插入记录</span></span><br><span class="line">delimiter $$ <span class="comment">#声明存储过程的结束符号为$$</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> auto_insert1()</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">declare</span> i <span class="built_in">int</span> <span class="keyword">default</span> <span class="number">1</span>;</span><br><span class="line">    while(i&lt;3000000)do</span><br><span class="line">        <span class="keyword">insert</span> <span class="keyword">into</span> s1 <span class="keyword">values</span>(i,<span class="string">'jason'</span>,<span class="string">'male'</span>,<span class="keyword">concat</span>(<span class="string">'jason'</span>,i,<span class="string">'@oldboy'</span>));</span><br><span class="line">        <span class="keyword">set</span> i=i+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">end</span> <span class="keyword">while</span>;</span><br><span class="line"><span class="keyword">END</span>$$ <span class="comment">#$$结束</span></span><br><span class="line">delimiter ; <span class="comment">#重新声明分号为结束符号</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#3. 查看存储过程</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">procedure</span> auto_insert1\G </span><br><span class="line"></span><br><span class="line"><span class="comment">#4. 调用存储过程</span></span><br><span class="line"><span class="keyword">call</span> auto_insert1();</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 表没有任何索引的情况下</span><br><span class="line">select * from s1 where id&#x3D;30000;</span><br><span class="line"># 避免打印带来的时间损耗</span><br><span class="line">select count(id) from s1 where id &#x3D; 30000;</span><br><span class="line">select count(id) from s1 where id &#x3D; 1;</span><br><span class="line"></span><br><span class="line"># 给id做一个主键</span><br><span class="line">alter table s1 add primary key(id);  # 速度很慢</span><br><span class="line"></span><br><span class="line">select count(id) from s1 where id &#x3D; 1;  # 速度相较于未建索引之前两者差着数量级</span><br><span class="line">select count(id) from s1 where name &#x3D; &#39;jason&#39;  # 速度仍然很慢</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">范围问题</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"># 并不是加了索引，以后查询的时候按照这个字段速度就一定快   </span><br><span class="line">select count(id) from s1 where id &gt; 1;  # 速度相较于id &#x3D; 1慢了很多</span><br><span class="line">select count(id) from s1 where id &gt;1 and id &lt; 3;</span><br><span class="line">select count(id) from s1 where id &gt; 1 and id &lt; 10000;</span><br><span class="line">select count(id) from s1 where id !&#x3D; 3;</span><br><span class="line"></span><br><span class="line">alter table s1 drop primary key;  # 删除主键 单独再来研究name字段</span><br><span class="line">select count(id) from s1 where name &#x3D; &#39;jason&#39;;  # 又慢了</span><br><span class="line"></span><br><span class="line">create index idx_name on s1(name);  # 给s1表的name字段创建索引</span><br><span class="line">select count(id) from s1 where name &#x3D; &#39;jason&#39;  # 仍然很慢！！！</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">再来看b+树的原理，数据需要区分度比较高，而我们这张表全是jason，根本无法区分</span><br><span class="line">那这个树其实就建成了“一根棍子”</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">select count(id) from s1 where name &#x3D; &#39;xxx&#39;;  </span><br><span class="line"># 这个会很快，我就是一根棍，第一个不匹配直接不需要再往下走了</span><br><span class="line">select count(id) from s1 where name like &#39;xxx&#39;;</span><br><span class="line">select count(id) from s1 where name like &#39;xxx%&#39;;</span><br><span class="line">select count(id) from s1 where name like &#39;%xxx&#39;;  # 慢 最左匹配特性</span><br><span class="line"></span><br><span class="line"># 区分度低的字段不能建索引</span><br><span class="line">drop index idx_name on s1;</span><br><span class="line"></span><br><span class="line"># 给id字段建普通的索引</span><br><span class="line">create index idx_id on s1(id);</span><br><span class="line">select count(id) from s1 where id &#x3D; 3;  # 快了</span><br><span class="line">select count(id) from s1 where id*12 &#x3D; 3;  # 慢了  索引的字段一定不要参与计算</span><br><span class="line"></span><br><span class="line">drop index idx_id on s1;</span><br><span class="line">select count(id) from s1 where name&#x3D;&#39;jason&#39; and gender &#x3D; &#39;male&#39; and id &#x3D; 3 and email &#x3D; &#39;xxx&#39;;</span><br><span class="line"># 针对上面这种连续多个and的操作，mysql会从左到右先找区分度比较高的索引字段，先将整体范围降下来再去比较其他条件</span><br><span class="line">create index idx_name on s1(name);</span><br><span class="line">select count(id) from s1 where name&#x3D;&#39;jason&#39; and gender &#x3D; &#39;male&#39; and id &#x3D; 3 and email &#x3D; &#39;xxx&#39;;  # 并没有加速</span><br><span class="line"></span><br><span class="line">drop index idx_name on s1;</span><br><span class="line"># 给name，gender这种区分度不高的字段加上索引并不难加快查询速度</span><br><span class="line"></span><br><span class="line">create index idx_id on s1(id);</span><br><span class="line">select count(id) from s1 where name&#x3D;&#39;jason&#39; and gender &#x3D; &#39;male&#39; and id &#x3D; 3 and email &#x3D; &#39;xxx&#39;;  # 快了  先通过id已经讲数据快速锁定成了一条了</span><br><span class="line">select count(id) from s1 where name&#x3D;&#39;jason&#39; and gender &#x3D; &#39;male&#39; and id &gt; 3 and email &#x3D; &#39;xxx&#39;;  # 慢了  基于id查出来的数据仍然很多，然后还要去比较其他字段</span><br><span class="line"></span><br><span class="line">drop index idx_id on s1</span><br><span class="line"></span><br><span class="line">create index idx_email on s1(email);</span><br><span class="line">select count(id) from s1 where name&#x3D;&#39;jason&#39; and gender &#x3D; &#39;male&#39; and id &gt; 3 and email &#x3D; &#39;xxx&#39;;  # 快 通过email字段一剑封喉</span><br></pre></td></tr></table></figure>

<h4 id="联合索引"><a href="#联合索引" class="headerlink" title="联合索引"></a>联合索引</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select count(id) from s1 where name&#x3D;&#39;jason&#39; and gender &#x3D; &#39;male&#39; and id &gt; 3 and email &#x3D; &#39;xxx&#39;;  </span><br><span class="line"># 如果上述四个字段区分度都很高，那给谁建都能加速查询</span><br><span class="line"># 给email加然而不用email字段</span><br><span class="line">select count(id) from s1 where name&#x3D;&#39;jason&#39; and gender &#x3D; &#39;male&#39; and id &gt; 3; </span><br><span class="line"># 给name加然而不用name字段</span><br><span class="line">select count(id) from s1 where gender &#x3D; &#39;male&#39; and id &gt; 3; </span><br><span class="line"># 给gender加然而不用gender字段</span><br><span class="line">select count(id) from s1 where id &gt; 3; </span><br><span class="line"></span><br><span class="line"># 带来的问题是所有的字段都建了索引然而都没有用到，还需要花费四次建立的时间</span><br><span class="line">create index idx_all on s1(email,name,gender,id);  # 最左匹配原则，区分度高的往左放</span><br><span class="line">select count(id) from s1 where name&#x3D;&#39;jason&#39; and gender &#x3D; &#39;male&#39; and id &gt; 3 and email &#x3D; &#39;xxx&#39;;  # 速度变快</span><br></pre></td></tr></table></figure>

<p>总结:上面这些操作，你感兴趣可以敲一敲，不感兴趣你就可以不用敲了，权当看个乐呵。理论掌握了就行了</p>
<p>慢查询日志</p>
<p>设定一个时间检测所有超出该时间的sql语句，然后针对性的进行优化！</p>
</li>
</ul>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>[使用常见问题]</title>
    <url>/2020/06/21/%E4%BD%BF%E7%94%A8%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h2 id="一-子进程开销和优化"><a href="#一-子进程开销和优化" class="headerlink" title="一 子进程开销和优化"></a>一 子进程开销和优化</h2><p>1 cpu</p>
<p>开销：rdb和aof文件生成，属于cpu密集型</p>
<p>优化：不做cpu绑定，不和cpu密集型的服务一起部署</p>
<p>2 内存</p>
<p>开销：fork内存开销，copy-on-write，</p>
<p>优化：单机部署尽量少重写</p>
<p> 3 硬盘</p>
<p>开销：aof和rdb写入，可以结合分析工具使用</p>
<p>优化：</p>
<p>1 不要和高硬盘负载的服务部署在一起：存储服务，消息队列</p>
<p>2 在aof重写期间，不要对aof进行追加：no-appendfsync-on-rewrite=yes</p>
<p>3 根据写入量决定磁盘类型：例如ssd</p>
<p>4 单机多实例持久化考虑分盘</p>
<h2 id="二-fork操作"><a href="#二-fork操作" class="headerlink" title="二 fork操作"></a>二 fork操作</h2><p>1 fork是同步操作</p>
<p>2 与内存量嘻嘻相关：内存越大，耗时越长，跟机型也有关系</p>
<p>3 info：latest_fok_usec:查看持久化执行时间</p>
<p>改善fork</p>
<p>1 有限使用无机或高效支持fork操作的虚拟化技术</p>
<p>2 控制redis实例最大可用内存：maxmemory</p>
<p>3 合理配置linux内存分配策略</p>
<p>4 降低fork频率，例如放宽aof重写自动触发时机，不必要的全量复制</p>
<h2 id="三-aof追加阻塞"><a href="#三-aof追加阻塞" class="headerlink" title="三 aof追加阻塞"></a>三 aof追加阻塞</h2><p><img src="https://tva1.sinaimg.cn/large/006tNbRwgy1gadtfor4exj30hu0ke434.jpg" alt="image-20191229192629198"></p>
<p>aof阻塞：看日志定位</p>
<p>info Persistence：每次阻塞一次就会+1</p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>[初识数据库与mysql安装]</title>
    <url>/2020/03/09/%E5%88%9D%E8%AF%86%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%8Emysql%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h1 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h1><h2 id="存储数据的演变过程"><a href="#存储数据的演变过程" class="headerlink" title="存储数据的演变过程"></a>存储数据的演变过程</h2><ul>
<li><p>随意的存到一个文件中、数据格式也是千差万别的完全取决于我们自己</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string"># 小李</span></span><br><span class="line"><span class="string">jason|123|NB</span></span><br><span class="line"><span class="string"># 小王</span></span><br><span class="line"><span class="string">egon-123-DBJ</span></span><br><span class="line"><span class="string"># 小红</span></span><br><span class="line"><span class="string">tank~123~hecha</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>软件开发目录规范</p>
<p>限制了存储数据的具体位置</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">bin</span></span><br><span class="line"><span class="string">conf</span></span><br><span class="line"><span class="string">core</span></span><br><span class="line"><span class="string">db</span></span><br><span class="line"><span class="string">lib</span></span><br><span class="line"><span class="string">readme</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<p>假设上述是一个单机游戏</p>
<p>那么每个人的游戏记录只会在自己的计算机上面保存</p>
<p>注册登录的账号也只能在自己的计算机上有效</p>
</li>
<li><p>如何将单机变成连网</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">将数据库保存部分全部统一起来</span></span><br><span class="line"><span class="string">所有人操作数据都来一个地方操作</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="数据库的本质"><a href="#数据库的本质" class="headerlink" title="数据库的本质"></a>数据库的本质</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">本质其实就是一款基于网络通信的应用程序</span></span><br><span class="line"><span class="string">那其实每个人都可以开发一款数据库软件 因为它仅仅就是一个基于网络通信的应用程序</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">也就意味着数据库软件其实有很多很多</span></span><br><span class="line"><span class="string">	关系型数据库</span></span><br><span class="line"><span class="string">		MySQL、oracle、db2、access、sql server</span></span><br><span class="line"><span class="string">	非关系型数据库</span></span><br><span class="line"><span class="string">		redis、mongodb、memcache</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment"># 关系型</span></span><br><span class="line">	<span class="number">1</span> 数据之间彼此有关系或者约束</span><br><span class="line">    	男生表和前女友表</span><br><span class="line">  <span class="number">2</span> 存储数据的表现形式通常是以表格存储	</span><br><span class="line">    	name     password		hobby</span><br><span class="line">        jason	  <span class="number">123</span>			学习</span><br><span class="line">        egon	  <span class="number">123</span>			女教练</span><br><span class="line">        tank	  <span class="number">123</span>			吃生蚝</span><br><span class="line">        每个字段还会有存储类型的限制</span><br><span class="line">        比如姓名只能存字符串...</span><br><span class="line"><span class="comment"># 非关系型</span></span><br><span class="line">	存储数据通常都是以k,v键值对的形式</span><br></pre></td></tr></table></figure>

<h2 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">任何基于网络通信的应用程序底层用的都是socket</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">-服务端</span></span><br><span class="line"><span class="string">	-基于socket通信</span></span><br><span class="line"><span class="string">	-收发消息</span></span><br><span class="line"><span class="string">	-SQL语句</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">-客户端</span></span><br><span class="line"><span class="string">	-基于socket通信</span></span><br><span class="line"><span class="string">	-收发消息</span></span><br><span class="line"><span class="string">	-SQL语句</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">MySQL不单单支持MySQL自己的客户端app还支持其他编程语言来充当客户端操作</span><br><span class="line">	如何解决语言沟通的障碍？</span><br><span class="line">    	<span class="comment"># 1 让服务端兼容所有的语言(一个人精通多国语言)</span></span><br><span class="line">        <span class="comment"># 2 采用统一的语言(SQL语句)</span></span><br></pre></td></tr></table></figure>

<h2 id="重要概念介绍"><a href="#重要概念介绍" class="headerlink" title="重要概念介绍"></a>重要概念介绍</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">库 			》》》			 文件夹</span></span><br><span class="line"><span class="string">表			》》》			 文件</span></span><br><span class="line"><span class="string">记录		   》》》			文件内一行行的数据</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    	name     password		hobby</span></span><br><span class="line"><span class="string">        jason	  123			学习</span></span><br><span class="line"><span class="string">        egon	  123			女教练</span></span><br><span class="line"><span class="string">        tank	  123			吃生蚝</span></span><br><span class="line"><span class="string">表头				表格的第一行字段</span></span><br><span class="line"><span class="string">字段				name、password、hobby</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<h1 id="MySQL的安装"><a href="#MySQL的安装" class="headerlink" title="MySQL的安装"></a>MySQL的安装</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">在IT界 一般都不会轻易的使用最新版本的软件，因为新版本可能会出现各种问题</span></span><br><span class="line"><span class="string">(你原本项目跑的好好的 非要画蛇添足更新版本 然后项目奔溃)</span></span><br><span class="line"><span class="string">小段子:</span></span><br><span class="line"><span class="string">	更新完没事 那么你还是一个普通员工</span></span><br><span class="line"><span class="string">	更新完出事 那么你就是一名"烈士"</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment"># MySQL有很多版本(5.6、5.7、8.0) 目前企业里面用的比较多的还是5.6左右</span></span><br></pre></td></tr></table></figure>

<p>参考网站:<a href="https://www.mysql.com/" target="_blank" rel="noopener">https://www.mysql.com/</a></p>
<p>下载5.6版本即可，如果你下载了其他版本问题也不大，因为sql语句是一样的学</p>
<p>按照教学方式下载，会将服务端和客户端一并下载到本地</p>
<p>为了学习方便我们将服务端和客户端都在本地启动，后期到了公司服务端会专门跑在一台服务器上，所有人基于网络连接服务端操作</p>
<h2 id="MySQL服务端与客户端"><a href="#MySQL服务端与客户端" class="headerlink" title="MySQL服务端与客户端"></a>MySQL服务端与客户端</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">服务端</span></span><br><span class="line"><span class="string">mysqld.exe</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">客户端</span></span><br><span class="line"><span class="string">mysql.exe</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<p><strong>注意</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">在前期配置MySQL的时候 cmd终端尽量以管理员的身份运行</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">windows+r 输入cmd  进入的是普通用户终端 有一些命令是无法执行的</span></span><br><span class="line"><span class="string">搜索cmd右键 以管理员身份运行</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><ul>
<li><p>先切换到mysqld所在的bin目录下，然后输入mysqld即可</p>
</li>
<li><p>保留原来的cmd窗口重新打开一个</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">常见软件的默认端口号</span></span><br><span class="line"><span class="string">	MySQL  3306</span></span><br><span class="line"><span class="string">	redis  6379</span></span><br><span class="line"><span class="string">	mongodb 27017</span></span><br><span class="line"><span class="string">	django  8000</span></span><br><span class="line"><span class="string">	flask   5000</span></span><br><span class="line"><span class="string">	...</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">MySQL第一次以管理员身份进入是没有密码的 直接回车即可</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">客户端连接服务端完整命令</span></span><br><span class="line"><span class="string">	mysql -h 127.0.0.1 -P 3306 -uroot -p</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h1 id="sql语句初识"><a href="#sql语句初识" class="headerlink" title="sql语句初识"></a>sql语句初识</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">1 MySQL中的sql语句是以分号作为结束的标志</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">2 基本命令</span></span><br><span class="line"><span class="string">	show databases;  查看所有的库名</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">3 连接服务端的命令可以简写</span></span><br><span class="line"><span class="string">	mysql -uroot -p</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">4 当你输入的命令不对 又不想让服务端执行并返回报错信息 可以用\c取消</span></span><br><span class="line"><span class="string">	错误命令  \c</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">5 客户端退出  退出命令加不加分号都可以执行</span></span><br><span class="line"><span class="string">	quit</span></span><br><span class="line"><span class="string">	exit</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">6 当你在连接服务端的时候 发现只输入mysql也能连接</span></span><br><span class="line"><span class="string">	但是你不是管理员身份 而只是一个游客模式</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<h2 id="环境变量配置及系统服务制作"><a href="#环境变量配置及系统服务制作" class="headerlink" title="环境变量配置及系统服务制作"></a>环境变量配置及系统服务制作</h2><p>小知识点补充</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">1 如何查看当前具体进程</span></span><br><span class="line"><span class="string">	tasklist</span></span><br><span class="line"><span class="string">	tasklist |findstr mysqld</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">2 如何杀死具体进程(只有在管理员cmd窗口下才能成功)</span></span><br><span class="line"><span class="string">	taskkill /F /PID PID号</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<h2 id="环境变量配置"><a href="#环境变量配置" class="headerlink" title="环境变量配置"></a>环境变量配置</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">每次启动mysqld需要先切到对应的文件路径下才能操作太多繁琐</span></span><br><span class="line"><span class="string">将mysqld所在的文件路径添加到系统环境变量中</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<p>还是繁琐 需要起两个cmd窗口 不好</p>
<p>将mysql服务端制作成系统服务(开机自启动)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">查看当前计算机的运行进程数</span></span><br><span class="line"><span class="string">	services.msc</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">将mysql制作成系统服务</span></span><br><span class="line"><span class="string">	mysqld --install</span></span><br><span class="line"><span class="string">移除mysql系统服务</span></span><br><span class="line"><span class="string">	mysqld --remove</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<h2 id="设置密码"><a href="#设置密码" class="headerlink" title="设置密码"></a>设置密码</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">mysqladmin -uroot -p原密码 password 新密码</span></span><br><span class="line"><span class="string">改命令直接在终端输入即可 无序进入客户端</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">mysqladmin -uroot -p123 password 123456</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<h2 id="破解密码"><a href="#破解密码" class="headerlink" title="破解密码"></a>破解密码</h2><p>出去玩了好几个月，回来返现密码忘了，死活进不去</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">你可以将mysql获取用户名和密码校验的功能看成是一个装饰器</span></span><br><span class="line"><span class="string">装饰在了客户端请求访问的功能上</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">我们如果将该装饰器移除 那么mysql服务端就不会校验用户名和密码了</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment"># 1 先关闭当前mysql服务端</span></span><br><span class="line"> 命令行的方式启动(让mysql跳过用户名密码验证功能)</span><br><span class="line"> mysqld --skip-grant-tables  </span><br><span class="line"><span class="comment"># 2 直接以无密码的方式连接</span></span><br><span class="line">	mysql -uroot -p   直接回车</span><br><span class="line"><span class="comment"># 3 修改当前用户的密码</span></span><br><span class="line">	update mysql.user set password=password(<span class="number">123456</span>) where 		user=<span class="string">'root'</span> <span class="keyword">and</span> host=<span class="string">'localhost'</span>;</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">真正存储用户表的密码字段 存储的肯定是密文 </span></span><br><span class="line"><span class="string">只有用户自己知道明文是什么 其他人都不知道 这样更加的安全</span></span><br><span class="line"><span class="string">密码比对也只能比对密文</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment"># 4 立刻将修改数据刷到硬盘</span></span><br><span class="line">	flush privileges;</span><br><span class="line"><span class="comment"># 5 关闭当前服务端 然后以正常校验授权表的形式启动</span></span><br></pre></td></tr></table></figure>

<h2 id="统一编码"><a href="#统一编码" class="headerlink" title="统一编码"></a>统一编码</h2><ul>
<li><p>mysql默认的配置文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">my-default.ini </span></span><br><span class="line"><span class="string">ini结尾的一般都是配置文件</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">程序启动会先加载配置文件中的配置之后才真正的启动</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">[mysqld]  <span class="comment"># 一旦服务端启动立刻加载下面的配置</span></span><br><span class="line">sql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES </span><br><span class="line">[mysql]  <span class="comment"># 一旦客户端启动立刻加载下面的配置</span></span><br><span class="line">...</span><br><span class="line">[client]  <span class="comment"># 其他客户端</span></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 需要你自己新建一个my.ini的配置文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证配置是否真的是自动加载</span></span><br><span class="line">[mysql]</span><br><span class="line">print(<span class="string">'hello world'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改配置文件后一定要重启服务才能生效</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 统一编码的配置 无需掌握 直接拷贝即可</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 偷懒 将管理员的用户名和密码也添加到配置文件中</span></span><br><span class="line">[mysqld]</span><br><span class="line">character-set-server=utf8</span><br><span class="line">collation-server=utf8_general_ci</span><br><span class="line">[client]</span><br><span class="line">default-character-set=utf8</span><br><span class="line">[mysql]</span><br><span class="line">user=<span class="string">"root"</span></span><br><span class="line">password=<span class="number">123456</span></span><br><span class="line">default-character-set=utf8</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="基本sql语句"><a href="#基本sql语句" class="headerlink" title="基本sql语句"></a>基本sql语句</h2><p>PS:大部分程序的业务逻辑其实都是增删改查</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">辛辛苦苦一个月 只为了一条sql语句(将自己账户的钱修改一下)</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<p><strong>针对库的增删改查(文件夹)</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 增</span></span><br><span class="line">create database db1;</span><br><span class="line">create database db2 charset=<span class="string">'gbk'</span>;</span><br><span class="line"><span class="comment"># 查</span></span><br><span class="line">show databases;  <span class="comment"># 查所有</span></span><br><span class="line">show create database db1;  <span class="comment"># 查单个</span></span><br><span class="line"><span class="comment"># 改</span></span><br><span class="line">alter database db2 charset=<span class="string">'utf8'</span>;</span><br><span class="line"><span class="comment"># 删</span></span><br><span class="line">drop database db2;</span><br></pre></td></tr></table></figure>

<p><strong>针对表的增删改查(文件)</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">在操作表(文件)的时候 需要指定所在的库(文件夹)</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment"># 查看当前所在的库的名字</span></span><br><span class="line">select database();</span><br><span class="line"><span class="comment"># 切换库</span></span><br><span class="line">use db1; </span><br><span class="line"></span><br><span class="line"><span class="comment"># 增</span></span><br><span class="line">create table t1(id int,name char(<span class="number">4</span>));</span><br><span class="line"><span class="comment"># 查</span></span><br><span class="line">show tables;  <span class="comment"># 查看当前库下面所有的表名</span></span><br><span class="line">show create table t1;</span><br><span class="line">describe t1;  <span class="comment"># 支持简写 desc t1;</span></span><br><span class="line"><span class="comment"># 改</span></span><br><span class="line">alter table t1 modify name char(<span class="number">16</span>);</span><br><span class="line"><span class="comment"># 删</span></span><br><span class="line">drop table t1;</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">create table db2.t1(id int);  也可以用绝对路径的形式操作不同的库</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<p><strong>针对数据的增删改查(一行行数据)</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">一定要先有库 有表 最后才能操作记录</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment"># 增</span></span><br><span class="line">insert into t1 values(<span class="number">1</span>,<span class="string">'jason'</span>);</span><br><span class="line">insert into t1 values(<span class="number">1</span>,<span class="string">'jason'</span>),(<span class="number">2</span>,<span class="string">'egon'</span>),(<span class="number">3</span>,<span class="string">'tank'</span>);</span><br><span class="line"><span class="comment"># 查</span></span><br><span class="line">select * <span class="keyword">from</span> t1;  <span class="comment"># 该命令当数据量特别大的时候不建议使用</span></span><br><span class="line">select name <span class="keyword">from</span> t1;</span><br><span class="line"><span class="comment"># 改</span></span><br><span class="line">update t1 set name=<span class="string">'DSB'</span> where id &gt; <span class="number">1</span>;</span><br><span class="line"><span class="comment"># 删</span></span><br><span class="line">delete <span class="keyword">from</span> t1 where id &gt; <span class="number">1</span>;</span><br><span class="line">delete <span class="keyword">from</span> t1 where name=<span class="string">'jason'</span>;</span><br><span class="line"><span class="comment"># 将表所有的数据清空</span></span><br><span class="line">delete <span class="keyword">from</span> t1;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>[主从复制原理与优化]</title>
    <url>/2020/06/21/%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E5%8E%9F%E7%90%86%E4%B8%8E%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<h2 id="一-什么是主从复制"><a href="#一-什么是主从复制" class="headerlink" title="一 什么是主从复制"></a>一 什么是主从复制</h2><p>机器故障；容量瓶颈；QPS瓶颈</p>
<p>一主一从，一主多从</p>
<p>做读写分离</p>
<p>做数据副本</p>
<p>扩展数据性能</p>
<p>一个maskter可以有多个slave</p>
<p>一个slave只能有一个master</p>
<p>数据流向是单向的，从master到slave</p>
<h2 id="二-复制的-配置"><a href="#二-复制的-配置" class="headerlink" title="二 复制的 配置"></a>二 复制的 配置</h2><h3 id="2-1-slave-命令"><a href="#2-1-slave-命令" class="headerlink" title="2.1 slave 命令"></a>2.1 slave 命令</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">6380</span>是从，<span class="number">6379</span>是主</span><br><span class="line"></span><br><span class="line">在<span class="number">6380</span>上执行（去从库配置，配置主库）</span><br><span class="line"></span><br><span class="line">slaveof <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> <span class="number">6379</span> <span class="comment">#异步</span></span><br><span class="line">slaveof no one <span class="comment">#取消复制，不会把之前的数据清除</span></span><br></pre></td></tr></table></figure>

<h3 id="2-2-配置文件"><a href="#2-2-配置文件" class="headerlink" title="2.2 配置文件"></a>2.2 配置文件</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">slaveof ip port <span class="comment">#配置从节点ip和端口</span></span><br><span class="line">slave-read-only yes <span class="comment">#从节点只读，因为可读可写，数据会乱</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">mkdir -p redis1/conf redis1/data redis2/conf redis2/data redis3/conf redis3/data</span></span><br><span class="line"><span class="string">vim redis.conf</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">daemonize no</span></span><br><span class="line"><span class="string">pidfile redis.pid</span></span><br><span class="line"><span class="string">bind 0.0.0.0</span></span><br><span class="line"><span class="string">protected-mode no</span></span><br><span class="line"><span class="string">port 6379</span></span><br><span class="line"><span class="string">timeout 0</span></span><br><span class="line"><span class="string">logfile redis.log</span></span><br><span class="line"><span class="string">dbfilename dump.rdb</span></span><br><span class="line"><span class="string">dir /data</span></span><br><span class="line"><span class="string">slaveof 10.0.0.101 6379</span></span><br><span class="line"><span class="string">slave-read-only yes</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">cp redis.conf /home/redis2/conf/</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">docker run -p 6379:6379 --name redis_6379 -v /home/redis1/conf/redis.conf:/etc/redis/redis.conf -v /home/redis1/data:/data -d redis redis-server /etc/redis/redis.conf</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">docker run -p 6378:6379 --name redis_6378 -v /home/redis2/conf/redis.conf:/etc/redis/redis.conf -v /home/redis2/data:/data -d redis redis-server /etc/redis/redis.conf</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">docker run -p 6377:6379 --name redis_6377 -v /home/redis3/conf/redis.conf:/etc/redis/redis.conf -v /home/redis3/data:/data -d redis redis-server /etc/redis/redis.conf</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">info replication</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure>



<h2 id="四-故障处理"><a href="#四-故障处理" class="headerlink" title="四 故障处理"></a>四 故障处理</h2><p>slave故障</p>
<p>master故障</p>
<h2 id="五-复制常见问题"><a href="#五-复制常见问题" class="headerlink" title="五 复制常见问题"></a>五 复制常见问题</h2><p>1 读写分离</p>
<p>读流量分摊到从节点</p>
<p>可能遇到问题：复制数据延迟，读到过期数据，从节点故障</p>
<p>2 主从配置不一致</p>
<p>maxmemory不一致：丢失数据</p>
<p>数据结构优化参数：主节点做了优化，从节点没有设置优化，会出现一些问题</p>
<p>3 规避全量复制</p>
<p>第一次全量复制，不可避免：小主节点，低峰(夜间)</p>
<p>节点运行id不匹配：主节点重启(运行id变化)</p>
<p>复制挤压缓冲区不足：增大复制缓冲区大小，rel_backlog_size</p>
<p>4 规避复制风暴</p>
<p>单主节点复制风暴，主节点重启，所有从节点复制</p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>[前端Vue框架]</title>
    <url>/2020/04/01/%E5%89%8D%E7%AB%AFVue%E6%A1%86%E6%9E%B6/</url>
    <content><![CDATA[<h1 id="Vue框架"><a href="#Vue框架" class="headerlink" title="Vue框架"></a>Vue框架</h1><p>Vue.js是一款流行的JavaScript前端框架，旨在更好地组织与简化Web开发。Vue所关注的核心是MVC模式中的视图层，同时，它也能方便地取得资料更新，并通过组件内部特定的方法实现视图与模型的互动。</p>
<p><a href="https://rogerxs80.github.io/2020/02/22/vue%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8/" target="_blank" rel="noopener">1.vue快速入门使用</a></p>
<p><a href="https://rogerxs80.github.io/2020/02/23/vue%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%B1%9E%E6%80%A7%E5%8A%9F%E8%83%BD/" target="_blank" rel="noopener">2.vue对象的属性功能</a></p>
<p><a href="https://rogerxs80.github.io/2020/02/23/axios%E4%B8%8E%E7%BB%84%E4%BB%B6%E5%8C%96%E5%BC%80%E5%8F%91/" target="_blank" rel="noopener">3.axios与组件化开发</a></p>
<p><a href="https://rogerxs80.github.io/2020/02/25/Vue%E8%87%AA%E5%8A%A8%E5%8C%96%E5%B7%A5%E5%85%B7%EF%BC%88Vue-cli%EF%BC%89/" target="_blank" rel="noopener">4.Vue自动化工具（Vue-cli）</a></p>
<p><a href="https://rogerxs80.github.io/2020/02/26/vue%E5%AE%A2%E6%88%B7%E7%AB%AF%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/" target="_blank" rel="noopener">5.vue客户端项目搭建</a></p>
]]></content>
      <categories>
        <category>前端框架</category>
      </categories>
      <tags>
        <tag>vue框架</tag>
      </tags>
  </entry>
  <entry>
    <title>[前端开发]</title>
    <url>/2019/07/12/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<h1 id="前端开发"><a href="#前端开发" class="headerlink" title="前端开发"></a>前端开发</h1><p>前端开发是创建Web页面或app等前端界面呈现给用户的过程，通过HTML，CSS及JavaScript以及衍生出来的各种技术、框架、解决方案，来实现互联网产品的用户界面交互 。它从网页制作演变而来，名称上有很明显的时代特征。在互联网的演化进程中，网页制作是Web1.0时代的产物，早期网站主要内容都是静态，以图片和文字为主，用户使用网站的行为也以浏览为主。随着互联网技术的发展和HTML5、CSS3的应用，现代网页更加美观，交互效果显著，功能更加强大。</p>
<p><a href="https://rogerxs80.github.io/2019/07/12/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8%E4%B8%8E%E6%A0%87%E7%AD%BE%E4%BD%BF%E7%94%A8/" target="_blank" rel="noopener">1.前端入门与标签使用</a></p>
<p><a href="https://rogerxs80.github.io/2019/07/12/CSS%E9%80%89%E6%8B%A9%E5%99%A8%E4%B8%8E%E5%B1%9E%E6%80%A7/" target="_blank" rel="noopener">2.CSS选择器与属性</a></p>
<p><a href="https://rogerxs80.github.io/2019/07/12/JavaScript%E5%85%A5%E9%97%A8/" target="_blank" rel="noopener">3.JavaScript入门</a></p>
<p><a href="https://rogerxs80.github.io/2019/07/12/JQuery%E5%85%A5%E9%97%A8/" target="_blank" rel="noopener">4.JQury入门</a></p>
<p><a href="https://rogerxs80.github.io/2019/07/13/Bootstrap%E6%A1%86%E6%9E%B6/" target="_blank" rel="noopener">5.BootStrap框架</a></p>
]]></content>
      <categories>
        <category>前端开发</category>
      </categories>
      <tags>
        <tag>前端入门</tag>
      </tags>
  </entry>
  <entry>
    <title>[初识Django框架]</title>
    <url>/2020/02/10/%E5%88%9D%E8%AF%86Django%E6%A1%86%E6%9E%B6/</url>
    <content><![CDATA[<h3 id="纯手撸web框架"><a href="#纯手撸web框架" class="headerlink" title="纯手撸web框架"></a>纯手撸web框架</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># HTTP协议</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">网络协议</span></span><br><span class="line"><span class="string">HTTP协议				数据传输是明文</span></span><br><span class="line"><span class="string">HTTPS协议				数据传输是密文</span></span><br><span class="line"><span class="string">websocket协议		数据传输是密文</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">四大特性</span></span><br><span class="line"><span class="string">	1.基于请求响应</span></span><br><span class="line"><span class="string">	2.基于TCP、IP作用于应用层之上的协议</span></span><br><span class="line"><span class="string">	3.无状态</span></span><br><span class="line"><span class="string">	4.短/无链接</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">数据格式</span></span><br><span class="line"><span class="string">	请求首行</span></span><br><span class="line"><span class="string">	请求头</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">	请求体</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">响应状态码</span></span><br><span class="line"><span class="string">	1XX</span></span><br><span class="line"><span class="string">	2XX			200</span></span><br><span class="line"><span class="string">	3XX			</span></span><br><span class="line"><span class="string">	4XX			403 404</span></span><br><span class="line"><span class="string">	5XX			500</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment"># 如何做到后缀的不同返回不同的内容</span></span><br><span class="line">	<span class="comment"># 拿到用户输入的后缀 做判断 </span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 不足之处</span></span><br><span class="line">	<span class="number">1.</span>代码重复(服务端代码所有人都要重复写)</span><br><span class="line">  <span class="number">2.</span>手动处理http格式的数据 并且只能拿到url后缀 其他数据获取繁琐(数据格式一样处理的代码其实也大致一样 重复写)</span><br><span class="line">  <span class="number">3.</span>并发的问题</span><br></pre></td></tr></table></figure>

<h3 id="借助于wsgiref模块"><a href="#借助于wsgiref模块" class="headerlink" title="借助于wsgiref模块"></a>借助于wsgiref模块</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">urls.py						路由与视图函数对应关系</span></span><br><span class="line"><span class="string">views.py					视图函数(后端业务逻辑)</span></span><br><span class="line"><span class="string">templates文件夹		专门用来存储html文件</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment"># 按照功能的不同拆分之后 后续添加功能只需要在urls.py书写对应关系然后取views.py书写业务逻辑即可</span></span><br></pre></td></tr></table></figure>

<h3 id="动静态网页"><a href="#动静态网页" class="headerlink" title="动静态网页"></a>动静态网页</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">静态网页</span></span><br><span class="line"><span class="string">	页面上的数据是直接写死的 万年不变</span></span><br><span class="line"><span class="string">动态网页</span></span><br><span class="line"><span class="string">	数据是实时获取的</span></span><br><span class="line"><span class="string">	eg:</span></span><br><span class="line"><span class="string">		1.后端获取当前时间展示到html页面上</span></span><br><span class="line"><span class="string">		2.数据是从数据库中获取的展示到html页面上</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 动态网页制作</span></span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_time</span><span class="params">(env)</span>:</span></span><br><span class="line">    current_time = datetime.datetime.now().strftime(<span class="string">'%Y-%m-%d %X'</span>)</span><br><span class="line">    <span class="comment"># 如何将后端获取到的数据"传递"给html文件？</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">r'templates/03 mytime.html'</span>,<span class="string">'r'</span>,encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        data = f.read()</span><br><span class="line">        <span class="comment"># data就是一堆字符串</span></span><br><span class="line">    data = data.replace(<span class="string">'dwadasdsadsadasdas'</span>,current_time)   <span class="comment"># 在后端将html页面处理好之后再返回给前端</span></span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将一个字典传递给html文件 并且可以在文件上方便快捷的操作字典数据</span></span><br><span class="line"><span class="keyword">from</span> jinja2 <span class="keyword">import</span> Template</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_dict</span><span class="params">(env)</span>:</span></span><br><span class="line">    user_dic = &#123;<span class="string">'username'</span>:<span class="string">'jason'</span>,<span class="string">'age'</span>:<span class="number">18</span>,<span class="string">'hobby'</span>:<span class="string">'read'</span>&#125;</span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">r'templates/04 get_dict.html'</span>,<span class="string">'r'</span>,encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        data = f.read()</span><br><span class="line">    tmp = Template(data)</span><br><span class="line">    res = tmp.render(user=user_dic)</span><br><span class="line">    <span class="comment"># 给get_dict.html传递了一个值 页面上通过变量名user就能够拿到user_dict</span></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="comment"># 后端获取数据库中数据展示到前端页面</span></span><br></pre></td></tr></table></figure>

<h3 id="模版语法之Jinja2模块"><a href="#模版语法之Jinja2模块" class="headerlink" title="模版语法之Jinja2模块"></a>模版语法之Jinja2模块</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip3 install jinja2</span><br><span class="line"><span class="string">"""模版语法是在后端起作用的"""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 模版语法(非常贴近python语法)</span></span><br><span class="line">&#123;&#123; user &#125;&#125;</span><br><span class="line">&#123;&#123; user.get(<span class="string">'username'</span>)&#125;&#125;</span><br><span class="line">&#123;&#123; user.age &#125;&#125;</span><br><span class="line">&#123;&#123; user[<span class="string">'hobby'</span>] &#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;% <span class="keyword">for</span> user_dict <span class="keyword">in</span> user_list %&#125;</span><br><span class="line">                        &lt;tr&gt;</span><br><span class="line">                            &lt;td&gt;&#123;&#123; user_dict.id&#125;&#125;&lt;/td&gt;</span><br><span class="line">                            &lt;td&gt;&#123;&#123; user_dict.username&#125;&#125;&lt;/td&gt;</span><br><span class="line">                            &lt;td&gt;&#123;&#123; user_dict.password&#125;&#125;&lt;/td&gt;</span><br><span class="line">                            &lt;td&gt;&#123;&#123; user_dict.hobby&#125;&#125;&lt;/td&gt;</span><br><span class="line">                        &lt;/tr&gt;</span><br><span class="line">&#123;% endfor%&#125;</span><br></pre></td></tr></table></figure>

<h3 id="自定义简易版本web框架请求流程图"><a href="#自定义简易版本web框架请求流程图" class="headerlink" title="自定义简易版本web框架请求流程图"></a>自定义简易版本web框架请求流程图</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">wsgiref模块</span></span><br><span class="line"><span class="string">	1.请求来的时候解析http格式的数据 封装成大字典</span></span><br><span class="line"><span class="string">	2.响应走的时候给数据打包成符合http格式 再返回给浏览器</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<h3 id="python三大主流web框架"><a href="#python三大主流web框架" class="headerlink" title="python三大主流web框架"></a>python三大主流web框架</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">django</span></span><br><span class="line"><span class="string">	特点:大而全 自带的功能特别特别特别的多 类似于航空母舰</span></span><br><span class="line"><span class="string">	不足之处:</span></span><br><span class="line"><span class="string">		有时候过于笨重</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">flask</span></span><br><span class="line"><span class="string">	特点:小而精  自带的功能特别特别特别的少 类似于游骑兵</span></span><br><span class="line"><span class="string">	第三方的模块特别特别特别的多，如果将flask第三方的模块加起来完全可以盖过django</span></span><br><span class="line"><span class="string">	并且也越来越像django</span></span><br><span class="line"><span class="string">	不足之处:</span></span><br><span class="line"><span class="string">		比较依赖于第三方的开发者</span></span><br><span class="line"><span class="string">		</span></span><br><span class="line"><span class="string">tornado</span></span><br><span class="line"><span class="string">	特点:异步非阻塞 支持高并发</span></span><br><span class="line"><span class="string">		牛逼到甚至可以开发游戏服务器</span></span><br><span class="line"><span class="string">	不足之处:</span></span><br><span class="line"><span class="string">		暂时你不会</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">A:socket部分</span><br><span class="line">B:路由与视图函数对应关系(路由匹配)</span><br><span class="line">C:模版语法</span><br><span class="line"></span><br><span class="line">django</span><br><span class="line">	A用的是别人的		wsgiref模块</span><br><span class="line">  B用的是自己的</span><br><span class="line">  C用的是自己的(没有jinja2好用 但是也很方便)</span><br><span class="line"></span><br><span class="line">flask</span><br><span class="line">	A用的是别人的		werkzeug(内部还是wsgiref模块)</span><br><span class="line">  B自己写的</span><br><span class="line">  C用的别人的(jinja2)</span><br><span class="line"></span><br><span class="line">tornado</span><br><span class="line">	A，B，C都是自己写的</span><br></pre></td></tr></table></figure>

<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 如何让你的计算机能够正常的启动django项目</span></span><br><span class="line">	<span class="number">1.</span>计算机的名称不能有中文</span><br><span class="line">  <span class="number">2.</span>一个pycharm窗口只开一个项目</span><br><span class="line">  <span class="number">3.</span>项目里面所有的文件也尽量不要出现中文</span><br><span class="line">  <span class="number">4.</span>python解释器尽量使用<span class="number">3.4</span>~<span class="number">3.6</span>之间的版本</span><br><span class="line">  	(如果你的项目报错 你点击最后一个报错信息</span><br><span class="line">    去源码中把逗号删掉)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># django版本问题</span></span><br><span class="line">	<span class="number">1.</span>X <span class="number">2.</span>X <span class="number">3.</span>X(直接忽略)</span><br><span class="line">  <span class="number">1.</span>X和<span class="number">2.</span>X本身差距也不大 我们讲解主要以<span class="number">1.</span>X为例 会讲解<span class="number">2.</span>X区别</span><br><span class="line">  公司之前用的<span class="number">1.8</span> 满满过渡到了<span class="number">1.11</span>版本 有一些项目用的<span class="number">2.0</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># django安装</span></span><br><span class="line">	pip3 install django==<span class="number">1.11</span><span class="number">.11</span></span><br><span class="line">  如果已经安装了其他版本 无需自己卸载</span><br><span class="line">  直接重新装 会自动卸载安装新的</span><br><span class="line">  </span><br><span class="line">  如果报错 看看是不是timeout 如果是 那么只是网速波动</span><br><span class="line">  重新安装即可</span><br><span class="line">  </span><br><span class="line">  验证是否安装成功的方式<span class="number">1</span></span><br><span class="line">  	终端输入django-admin看看有没有反应</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看django版本：python -m django --version</span></span><br></pre></td></tr></table></figure>

<h3 id="django基本操作"><a href="#django基本操作" class="headerlink" title="django基本操作"></a>django基本操作</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 命令行操作</span></span><br><span class="line">	<span class="comment"># 1.创建django项目</span></span><br><span class="line">  	<span class="string">"""</span></span><br><span class="line"><span class="string">  	你可以先切换到对应的D盘 然后再创建</span></span><br><span class="line"><span class="string">  	"""</span></span><br><span class="line">  	django-admin startproject mysite</span><br><span class="line">    </span><br><span class="line">    	mysite文件夹</span><br><span class="line">      	manage.py</span><br><span class="line">      	mysite文件夹</span><br><span class="line">        	__init__.py</span><br><span class="line">        	settings.py</span><br><span class="line">          urls.py</span><br><span class="line">          wsgi.py</span><br><span class="line"> <span class="comment"># 2.启动django项目</span></span><br><span class="line">	<span class="string">"""</span></span><br><span class="line"><span class="string">		一定要先切换到项目目录下	</span></span><br><span class="line"><span class="string">		cd /mysite</span></span><br><span class="line"><span class="string">	"""</span></span><br><span class="line">  python3 manage.py runserver</span><br><span class="line">  <span class="comment"># http://127.0.0.1:8000/</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 3.创建应用</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">Next, start your first app by running python manage.py startapp [app_label].</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">	python3 manage.py startapp app01</span><br><span class="line">    应用名应该做到见名知意</span><br><span class="line">      user</span><br><span class="line">      order</span><br><span class="line">      web</span><br><span class="line">      ...</span><br><span class="line">      但是我们教学统一就用app01/<span class="number">02</span>/<span class="number">03</span>/<span class="number">04</span></span><br><span class="line">      </span><br><span class="line">	有很多文件</span><br><span class="line">  </span><br><span class="line"><span class="comment"># pycharm操作</span></span><br><span class="line">	<span class="comment"># 1 new project 选择左侧第二个django即可</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment"># 2 启动</span></span><br><span class="line">  		<span class="number">1.</span>还是用命令行启动</span><br><span class="line">    	<span class="number">2.</span>点击绿色小箭头即可</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 3 创建应用</span></span><br><span class="line">  		<span class="number">1.</span>pycharm提供的终端直接输入完整命令</span><br><span class="line">    	<span class="number">2.</span>pycharm </span><br><span class="line">      		tools </span><br><span class="line">        		run manage.py task提示(前期不要用 给我背完整命令)</span><br><span class="line"> <span class="comment"># 4 修改端口号以及创建server	</span></span><br><span class="line">		edit confi....</span><br></pre></td></tr></table></figure>

<h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">django是一款专门用来开发app的web框架</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">django框架就类似于是一所大学(空壳子)</span></span><br><span class="line"><span class="string">app就类似于大学里面各个学院(具体功能的app)</span></span><br><span class="line"><span class="string">	比如开发淘宝</span></span><br><span class="line"><span class="string">		订单相关</span></span><br><span class="line"><span class="string">		用户相关</span></span><br><span class="line"><span class="string">		投诉相关</span></span><br><span class="line"><span class="string">		创建不同的app对应不同的功能</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">	选课系统</span></span><br><span class="line"><span class="string">		学生功能</span></span><br><span class="line"><span class="string">		老师功能</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">一个app就是一个独立的功能模块</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">***********************创建的应用一定要去配置文件中注册**********************</span><br><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">'django.contrib.admin'</span>,</span><br><span class="line">    <span class="string">'django.contrib.auth'</span>,</span><br><span class="line">    <span class="string">'django.contrib.contenttypes'</span>,</span><br><span class="line">    <span class="string">'django.contrib.sessions'</span>,</span><br><span class="line">    <span class="string">'django.contrib.messages'</span>,</span><br><span class="line">    <span class="string">'django.contrib.staticfiles'</span>,</span><br><span class="line">    <span class="string">'app01.apps.App01Config'</span>,  <span class="comment"># 全写</span></span><br><span class="line">  	<span class="string">'app01'</span>,			 <span class="comment"># 简写</span></span><br><span class="line">]</span><br><span class="line"><span class="comment"># 创建出来的的应用第一步先去配置文件中注册 其他的先不要给我干</span></span><br><span class="line">ps:你在用pycharm创建项目的时候 pycharm可以帮你创建一个app并且自动注册</span><br><span class="line">***********************************************************************</span><br></pre></td></tr></table></figure>

<h3 id="主要文件介绍"><a href="#主要文件介绍" class="headerlink" title="主要文件介绍"></a>主要文件介绍</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">-mysite项目文件夹</span><br><span class="line">	--mysite文件夹</span><br><span class="line">  	---settings.py	配置文件</span><br><span class="line">    ---urls.py			路由与视图函数对应关系(路由层)</span><br><span class="line">    ---wsgi.py			wsgiref模块(不考虑)</span><br><span class="line">  --manage.py				django的入口文件</span><br><span class="line">  --db.sqlite3			django自带的sqlite3数据库(小型数据库 功能不是很多还有bug)</span><br><span class="line">  --app01文件夹</span><br><span class="line">  	---admin.py			django后台管理</span><br><span class="line">    ---apps.py			注册使用</span><br><span class="line">    ---migrations文件夹		数据库迁移记录</span><br><span class="line">    ---models.py		数据库相关的 模型类(orm)</span><br><span class="line">  	---tests.py			测试文件</span><br><span class="line">    ---views.py			视图函数(视图层)</span><br></pre></td></tr></table></figure>

<h3 id="命令行与pycharm创建的区别"><a href="#命令行与pycharm创建的区别" class="headerlink" title="命令行与pycharm创建的区别"></a>命令行与pycharm创建的区别</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1 命令行创建不会自动有templatew文件夹 需要你自己手动创建而pycharm会自动帮你创建并且还会自动在配置文件中配置对应的路径</span></span><br><span class="line"><span class="comment"># pycharm创建</span></span><br><span class="line">TEMPLATES = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">'BACKEND'</span>: <span class="string">'django.template.backends.django.DjangoTemplates'</span>,</span><br><span class="line">        <span class="string">'DIRS'</span>: [os.path.join(BASE_DIR, <span class="string">'templates'</span>)]</span><br><span class="line">]</span><br><span class="line"><span class="comment"># 命令行创建</span></span><br><span class="line">TEMPLATES = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">'BACKEND'</span>: <span class="string">'django.template.backends.django.DjangoTemplates'</span>,</span><br><span class="line">        <span class="string">'DIRS'</span>: [],</span><br><span class="line">]</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">也就意味着你在用命令创建django项目的时候不单单需要创建templates文件夹还需要去配置文件中配置路径</span></span><br><span class="line"><span class="string">'DIRS': [os.path.join(BASE_DIR, 'templates')]</span></span><br></pre></td></tr></table></figure>

<h3 id="django小白必会三板斧"><a href="#django小白必会三板斧" class="headerlink" title="django小白必会三板斧"></a>django小白必会三板斧</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">HttpResponse</span></span><br><span class="line"><span class="string">	返回字符串类型的数据</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">render</span></span><br><span class="line"><span class="string">	返回html文件的</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">redirect</span></span><br><span class="line"><span class="string">	重定向</span></span><br><span class="line"><span class="string">	  return redirect('https://www.mzitu.com/')</span></span><br><span class="line"><span class="string">    return redirect('/home/')</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>django框架</tag>
      </tags>
  </entry>
  <entry>
    <title>[前端入门与标签使用]</title>
    <url>/2019/07/12/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8%E4%B8%8E%E6%A0%87%E7%AD%BE%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="什么是前端"><a href="#什么是前端" class="headerlink" title="什么是前端"></a>什么是前端</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;&quot;&quot;</span><br><span class="line">任何与用户直接打交道的操作界面都可以称之为前端</span><br><span class="line">比如:电脑界面 手机界面 平板界面</span><br><span class="line"></span><br><span class="line">什么是后端</span><br><span class="line">  后端类似于幕后操作者(一堆让人头皮发麻的代码)</span><br><span class="line">  不直接跟用户打交道</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>

<h2 id="为什么学前端"><a href="#为什么学前端" class="headerlink" title="为什么学前端"></a>为什么学前端</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;&quot;&quot;</span><br><span class="line">因为我们是全栈开发工程师</span><br><span class="line">  但是前端这一块我们不会学的很详细</span><br><span class="line">  只要求做到能够看得懂基本的前端代码以及能够搭建一些简单的页面即可</span><br><span class="line">  先打下前端的基础 为后续可能需要扩展做准备</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>

<h2 id="前端学习历程"><a href="#前端学习历程" class="headerlink" title="前端学习历程"></a>前端学习历程</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">HTML:网页的骨架 没有任何的样式 </span><br><span class="line">CSS:给骨架添加各种样式 变得好看</span><br><span class="line">JS:控制网页的动态效果</span><br><span class="line"></span><br><span class="line">前端框架:BOOTSTRAP、JQuery、Vue</span><br><span class="line">  提前给你封装好了很多操作 你只需要按照固定的语法调用即可</span><br></pre></td></tr></table></figure>

<h3 id="软件开发架构"><a href="#软件开发架构" class="headerlink" title="软件开发架构"></a>软件开发架构</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cs  客户端 服务端</span><br><span class="line">bs  浏览器 服务端</span><br><span class="line">ps:bs本质也是cs</span><br></pre></td></tr></table></figure>

<h3 id="浏览器窗口输入网址回车发生了几件事"><a href="#浏览器窗口输入网址回车发生了几件事" class="headerlink" title="浏览器窗口输入网址回车发生了几件事"></a>浏览器窗口输入网址回车发生了几件事</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;&quot;&quot;</span><br><span class="line">1 浏览器朝服务端发送请求</span><br><span class="line">2 服务端接受请求(eg:请求百度首页)</span><br><span class="line">3 服务端返回相应的响应(eg:返回一个百度首页)</span><br><span class="line">4 浏览器接收响应 根据特定的规则渲染页面展示给用户看</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">浏览器可以充当很多服务端的客户端</span><br><span class="line">	百度 腾讯视频 优酷视频....</span><br><span class="line"> </span><br><span class="line">如何做到浏览器能够跟多个不同的客户端之间进行数据交互？</span><br><span class="line">  1.浏览器很牛逼 能够自动识别不同服务端做不同处理</span><br><span class="line">  2.制定一个统一的标准 如果你想要让你写的服务端能够跟客户端之间做正常的数据交互</span><br><span class="line">  那么你就必须要遵循一些规则</span><br></pre></td></tr></table></figure>

<h2 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">超文本传输协议 用来规定服务端和浏览器之间的数据交互的格式...</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">该协议你可以不遵循 但是你写的服务端就不能被浏览器正常访问 你就自己跟自己玩</span></span><br><span class="line"><span class="string">你就自己写客户端 用户想要使用 就下载你专门的app即可</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment"># 四大特性</span></span><br><span class="line">  <span class="number">1.</span>基于请求响应</span><br><span class="line">  <span class="number">2.</span>基于TCP/IP作用于应用层之上的协议</span><br><span class="line">  <span class="number">3.</span>无状态</span><br><span class="line">  	不保存用户的信息</span><br><span class="line">    eg:一个人来了一千次 你都记不住 每次都当他如初见</span><br><span class="line">    由于HTTP协议是无状态的 所以后续出现了一些专门用来记录用户状态的技术</span><br><span class="line">    	cookie、session、token...</span><br><span class="line">  <span class="number">4.</span>无/短链接</span><br><span class="line">  	请求来一次我响应一次 之后我们两个就没有任何链接和关系了</span><br><span class="line">    	长链接:双方建立连接之后默认不断开 websocket(后面讲项目的时候会讲)</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line"><span class="comment"># 请求数据格式</span></span><br><span class="line">  请求首行(标识HTTP协议版本，当前请求方式)</span><br><span class="line">  请求头(一大堆k,v键值对)</span><br><span class="line">  </span><br><span class="line">  请求体(并不是所有的请求方式都有get没有post有 存放的是post请求提交的敏感数据)</span><br><span class="line"><span class="comment"># 响应数据格式</span></span><br><span class="line">  响应首行(标识HTTP协议版本，响应状态码)</span><br><span class="line">  响应头(一大堆k,v键值对)</span><br><span class="line">  </span><br><span class="line">  响应体(返回给浏览器展示给用户看的数据)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 响应状态码</span></span><br><span class="line">  用一串简单的数字来表示一些复杂的状态或者描述性信息  <span class="number">404</span>:请求资源不存在</span><br><span class="line">  <span class="number">1</span>XX:服务端已经成功接收到了你的数据正在处理，你可以继续提交额外的数据</span><br><span class="line">  <span class="number">2</span>XX:服务端成功响应了你想要的数据(<span class="number">200</span> OK请求成功)</span><br><span class="line">  <span class="number">3</span>XX:重定向(当你在访问一个需要登陆之后才能看的页面 你会发现会自动跳转到登陆页面)</span><br><span class="line">  <span class="number">4</span>XX:请求错误</span><br><span class="line">      <span class="number">404</span>:请求资源不存在</span><br><span class="line">      <span class="number">403</span>:当前请求不合法或者不符合访问资源的条件</span><br><span class="line">  <span class="number">5</span>XX:服务器内部错误(<span class="number">500</span>)</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 请求方式</span></span><br><span class="line">  <span class="number">1.</span>get请求</span><br><span class="line">  	朝服务端要数据</span><br><span class="line">    eg:输入网址获取对应的内容</span><br><span class="line">  <span class="number">2.</span>post请求</span><br><span class="line">  	朝服务端提交数据</span><br><span class="line">    eg:用户登陆 输入用户名和密码之后 提交到服务端后端做身份校验</span><br><span class="line"></span><br><span class="line"><span class="comment"># url:统一资源定位符(大白话 网址)</span></span><br></pre></td></tr></table></figure>

<h2 id="HTML简介"><a href="#HTML简介" class="headerlink" title="HTML简介"></a>HTML简介</h2><p>超文本标记语言</p>
<p>如果你想要让浏览器能够渲染出你写的页面。你就必须遵循HTML语法</p>
<p>我们浏览器看到的页面，内部其实都是HTML代码(所有的网站内部都是HTML代码)</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>hello big baby~<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://www.mzitu.com/"</span>&gt;</span>click me！give you some color to see see！<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"https://dss1.bdstatic.com/70cFuXSh_Q1YnxGkpoWK1HF6hhy/it/u=2159057472,1466656787&amp;fm=26&amp;gp=0.jpg"</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>HTML就是书写网页的一套标准</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"># 注释:注释是代码之母</span><br><span class="line"><span class="comment">&lt;!--单行注释--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">多行注释1</span></span><br><span class="line"><span class="comment">多行注释2</span></span><br><span class="line"><span class="comment">多行注释3</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">由于HTML代码非常的杂乱无章并且很多，所以我们习惯性的用注释来划定区域方便后续的查找</span><br><span class="line"><span class="comment">&lt;!--导航条开始--&gt;</span></span><br><span class="line">导航条所有的html代码</span><br><span class="line"><span class="comment">&lt;!--导航条结束--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--左侧菜单栏开始--&gt;</span></span><br><span class="line">左侧菜单栏的HTMl代码</span><br><span class="line"><span class="comment">&lt;!--左侧菜单栏结束--&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="HTML文档结构"><a href="#HTML文档结构" class="headerlink" title="HTML文档结构"></a>HTML文档结构</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span>:head内的标签不是给用户看的 而是定义一些配置主要是给浏览器看的</span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span>:body内的标签 写什么浏览器就渲染什么 用户就能看到什么</span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>PS:文件的后缀名其实是给用户看到的，只不过对应不同的 文件后缀名有不同的软件来处理并添加很多功能</p>
<p>注意:HTML代码是没有格式的，可以全部写在一行都没有问题，只不过我们习惯了缩进来表示代码</p>
<h3 id="两种打开HTML文件的方式"><a href="#两种打开HTML文件的方式" class="headerlink" title="两种打开HTML文件的方式"></a>两种打开HTML文件的方式</h3><ul>
<li>找到文件所在的位置右键选择浏览器打开</li>
<li>在pycharm内部，集成了自动调用浏览器的功能，直接点击即可(前提是你的电脑上安装了对应的浏览器) 直接全部使用谷歌浏览器</li>
</ul>
<h3 id="标签的分类1"><a href="#标签的分类1" class="headerlink" title="标签的分类1"></a>标签的分类1</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://www.mzitu.com/"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">1  双标签</span><br><span class="line">2  单标签(自闭和标签)</span><br></pre></td></tr></table></figure>

<h3 id="head内常用标签"><a href="#head内常用标签" class="headerlink" title="head内常用标签"></a>head内常用标签</h3><p>在书写HTML代码的时候 你只需要写标签名 然后tab就能自动补全</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span>  网页标题</span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        h1 &#123;</span><br><span class="line">            color: greenyellow;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span>  内部用来书写css代码</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">        alert(123)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span>  内部用来书写js代码</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"myjs.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>  还可以引入外部js文件</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"mycss.css"</span>&gt;</span>  引入外部css文件</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"keywords"</span> <span class="attr">content</span>=<span class="string">"老男孩教育,老男孩,老男孩培训,Python培训,Linux培训,网络安全培训,Go语言培训,人工智能培训,云计算培训,Linux运维培训,Python自动化运维,Python全栈开发,IT培训"</span>&gt;</span>  当你在用浏览器搜索的时候 只要输入了keywords后面指定的关键字那么该网页都有可能被百度搜索出来展示给用户</span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"keyword"</span> <span class="attr">content</span>=<span class="string">"淘宝,掏宝,网上购物,C2C,在线交易,交易市场,网上交易,交易市场,网上买,网上卖,购物网站,团购,网上贸易,安全购物,电子商务,放心买,供应,买卖信息,网店,一口价,拍卖,网上开店,网络购物,打折,免费开店,网购,频道,店铺"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"description"</span> <span class="attr">content</span>=<span class="string">"淘宝网 - 亚洲较大的网上交易平台，提供各类服饰、美容、家居、数码、话费/点卡充值… 数亿优质商品，同时提供担保交易(先收货后付款)等安全交易保障服务，并由商家提供退货承诺、破损补寄等消费者保障服务，让你安心享受网上购物乐趣！"</span>&gt;</span>  网页的描述性信息</span><br></pre></td></tr></table></figure>

<h2 id="body内常用标签"><a href="#body内常用标签" class="headerlink" title="body内常用标签"></a>body内常用标签</h2><p>你肉眼能够在浏览器上面看到的花里胡哨的页面。内部都是HTML代码</p>
<h3 id="基本标签"><a href="#基本标签" class="headerlink" title="基本标签"></a>基本标签</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>我是h1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>  标题标签 1～6级标题</span><br><span class="line"><span class="tag">&lt;<span class="name">b</span>&gt;</span>加粗<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">i</span>&gt;</span>斜体<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">u</span>&gt;</span>下划线<span class="tag">&lt;/<span class="name">u</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">s</span>&gt;</span>删除线<span class="tag">&lt;/<span class="name">s</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span>换行</span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span>水平分割线</span><br></pre></td></tr></table></figure>

<h3 id="标签的分类2"><a href="#标签的分类2" class="headerlink" title="标签的分类2"></a>标签的分类2</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1 块儿级标签:独占一行</span></span><br><span class="line">		h1~h6	p div</span><br><span class="line">  	<span class="number">1</span> 块儿级标签可以修改长宽 行内标签不可以 修改了也不会变化</span><br><span class="line">    <span class="number">2</span> 块儿级标签内部可以嵌套任意的块儿级标签和行内标签</span><br><span class="line">    	但是p标签虽然是块儿级标签 但是它只能嵌套行内标签 不能嵌套块儿级标签</span><br><span class="line">      	如果你套了 问题也不大 因为浏览器会自动帮你解开(浏览器是直接面向用户的 不会轻易的报错 哪怕有报错用户也基本感觉不出来)</span><br><span class="line">       </span><br><span class="line">    总结:</span><br><span class="line">      只要是块儿级标签都可以嵌套任意的块儿级标签和行内标签</span><br><span class="line">      但是p标签只能嵌套行内标签（HTML书写规范）</span><br><span class="line"><span class="comment"># 2 行内标签:自身文本多大就占多大</span></span><br><span class="line">		i u s b span</span><br><span class="line">  	行内标签不能嵌套块儿级标签 可以嵌套行内标签</span><br></pre></td></tr></table></figure>

<h3 id="特殊符号"><a href="#特殊符号" class="headerlink" title="特殊符号"></a>特殊符号</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="symbol">&amp;nbsp;</span>  空格</span><br><span class="line"><span class="symbol">&amp;gt;</span>   大于号</span><br><span class="line"><span class="symbol">&amp;lt;</span>   小于号</span><br><span class="line"><span class="symbol">&amp;amp;</span>  &amp;</span><br><span class="line"><span class="symbol">&amp;yen;</span>  ¥</span><br><span class="line"><span class="symbol">&amp;copy;</span> ©</span><br><span class="line">商标<span class="symbol">&amp;reg;</span> ®</span><br></pre></td></tr></table></figure>

<h3 id="常用标签"><a href="#常用标签" class="headerlink" title="常用标签"></a>常用标签</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">div   #块儿级标签</span><br><span class="line">span  #行内标签</span><br><span class="line">上述的两个标签是在构造页面初期最常使用的 页面的布局一般先用div和span占位之后再去调整样式 尤其是div使用非常的频繁</span><br><span class="line">div你可以把它看成是一块区域 也就意味着用div来提前规定所有的区域</span><br><span class="line">之后往该区域内部填写内容即可</span><br><span class="line">而普通的文本先用span标签</span><br></pre></td></tr></table></figure>

<h3 id="img标签"><a href="#img标签" class="headerlink" title="img标签"></a>img标签</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"># 图片标签</span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">""</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line"></span><br><span class="line">src	</span><br><span class="line">	1.图片的路径 可以是本地的也可以是网上的</span><br><span class="line">  	2.url 自动朝该url发送get请求获取数据</span><br><span class="line"></span><br><span class="line">alt="这是我的前女友"</span><br><span class="line">	当图片加载不出来的时候 给图片的描述性信息</span><br><span class="line"></span><br><span class="line">title="新垣结衣"</span><br><span class="line">	当鼠标悬浮到图片上之后 自动展示的提示信息</span><br><span class="line"></span><br><span class="line">height="800px" </span><br><span class="line">		</span><br><span class="line">width=""</span><br><span class="line">	高度和宽度当你只修改一个的时候 另外一个参数会等比例缩放</span><br><span class="line">  	如果你修改了两个参数 并且没有考虑比例的问题 那么图片就会失真</span><br></pre></td></tr></table></figure>

<h3 id="a标签"><a href="#a标签" class="headerlink" title="a标签"></a>a标签</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"># 链接标签</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">"""</span><br><span class="line">当a标签指定的网址从来没有被点击过 那么a标签的字体颜色是蓝色</span><br><span class="line">如果点击过了就会是紫色（浏览器给你记忆了）</span><br><span class="line">"""</span><br><span class="line"></span><br><span class="line">href</span><br><span class="line">	1.放url，用户点击就会跳转到该url页面</span><br><span class="line">  	2.放其他标签的id值 点击即可跳转到对应的标签位置</span><br><span class="line"></span><br><span class="line">target</span><br><span class="line">	默认a标签是在当前页面完成跳转  _self</span><br><span class="line">  	你也可以修改为新建页面跳转	 _blank</span><br><span class="line"></span><br><span class="line"># a标签的锚点功能</span><br><span class="line">"""eg:点击一个文本标题 页面自动跳转到标题对应的内容区域"""</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">"d1"</span>&gt;</span>顶部<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">"d111"</span>&gt;</span>hello world<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"height: 1000px;background-color: red"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">"d2"</span>&gt;</span>中间<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"height: 1000px;background-color: greenyellow"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#d1"</span>&gt;</span>底部<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#d2"</span>&gt;</span>回到中间<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#d111"</span>&gt;</span>回到中间<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="标签具有的两个重要属性"><a href="#标签具有的两个重要属性" class="headerlink" title="标签具有的两个重要属性"></a>标签具有的两个重要属性</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>id值</span><br><span class="line">	类似于标签的身份证号 在同一个html页面上id值不能重复</span><br><span class="line"><span class="number">2.</span><span class="class"><span class="keyword">class</span>值</span></span><br><span class="line"><span class="class">	该值有点类似于面向对象里面的继承 一个标签可以继承多个<span class="title">class</span>值</span></span><br></pre></td></tr></table></figure>

<p>标签既可以有默认的书写也可以有自定义的书写</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"d1"</span> <span class="attr">class</span>=<span class="string">"c1"</span> <span class="attr">username</span>=<span class="string">"jason"</span> <span class="attr">password</span>=<span class="string">"123"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="列表标签"><a href="#列表标签" class="headerlink" title="列表标签"></a>列表标签</h3><ul>
<li><p>无序列表(较多)</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">li</span>&gt;</span>第一项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">li</span>&gt;</span>第二项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">li</span>&gt;</span>第二项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">li</span>&gt;</span>第二项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">虽然ul标签很丑 但是在页面布局的时候 只要是排版一致的几行数据基本上用的都是ul标签</span><br></pre></td></tr></table></figure>
</li>
<li><p>有序列表(了解)</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span> <span class="attr">type</span>=<span class="string">"1"</span> <span class="attr">start</span>=<span class="string">"5"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>111<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>222<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>333<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"></span><br><span class="line">1 A I a ... 参考博客了机即可</span><br></pre></td></tr></table></figure>
</li>
<li><p>标题列表(了解)</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dt</span>&gt;</span>标题1<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dd</span>&gt;</span>内容1<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dt</span>&gt;</span>标题2<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dd</span>&gt;</span>内容2<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dt</span>&gt;</span>标题3<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dd</span>&gt;</span>内容3<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="表格标签"><a href="#表格标签" class="headerlink" title="表格标签"></a>表格标签</h3></li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">jason 123 read</span><br><span class="line">egon  123 dbj</span><br><span class="line">tank  123 hecha</span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tr</span>&gt;</span>  一个tr就表示一行</span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>username<span class="tag">&lt;/<span class="name">th</span>&gt;</span>  加粗文本</span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>username<span class="tag">&lt;/<span class="name">td</span>&gt;</span>  正常文本</span><br><span class="line">      <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">thead</span>&gt;</span>  表头(字段信息)</span><br><span class="line">  <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>jason<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>123<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>read<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span>	 表单(数据信息)</span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1"</span>&gt;</span>  加外边宽</span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"2"</span>&gt;</span>egon<span class="tag">&lt;/<span class="name">td</span>&gt;</span>  水平方向占多行</span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span>=<span class="string">"2"</span>&gt;</span>DBJ<span class="tag">&lt;/<span class="name">td</span>&gt;</span>   垂直方向占多行</span><br><span class="line"></span><br><span class="line">ps：原生的表格标签很丑，但是后续我们一般都是使用框架封装好的，很好看</span><br></pre></td></tr></table></figure>

<h3 id="表单标签"><a href="#表单标签" class="headerlink" title="表单标签"></a>表单标签</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">"""</span><br><span class="line">能够获取前端用户数据(用户输入的、用户选择、用户上传...)基于网络发送给后端服务器</span><br><span class="line">"""</span><br><span class="line">#写一个注册功能</span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span>  在该form标签内部书写的获取用户的数据都会被form标签提交到后端</span><br><span class="line"></span><br><span class="line">action:控制数据提交的后端路径(给哪个服务端提交数据)</span><br><span class="line">  	1.什么都不写  默认就是朝当前页面所在的url提交数据</span><br><span class="line">    2.写全路径:https://www.baidu.com  朝百度服务端提交</span><br><span class="line">    3.只写路径后缀action='/index/'  </span><br><span class="line">    	自动识别出当前服务端的ip和port拼接到前面</span><br><span class="line">        host:port/index/</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"d1"</span>&gt;</span>  第一种 直接讲input框写在label内</span><br><span class="line">	username:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"d1"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span>					第二种 通过id链接即可 无需嵌套</span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"d2"</span>&gt;</span>password:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"d2"</span>&gt;</span></span><br><span class="line">ps:input不跟label关联也没有问题</span><br><span class="line">  </span><br><span class="line">"""</span><br><span class="line">label 和 input都是行内标签</span><br><span class="line">"""</span><br><span class="line"></span><br><span class="line">input标签 就类似于前端的变形金刚  通过type属性变形</span><br><span class="line">text:普通文本</span><br><span class="line">password:密文</span><br><span class="line">date:日期	</span><br><span class="line">submit:用来触发form表单提交数据的动作</span><br><span class="line">button:就是一个普普通通的按钮 本身没有任何的功能 但是它是最有用的，学完js之后可以给它自定义各种功能</span><br><span class="line">reset:重置内容</span><br><span class="line">radio:单选</span><br><span class="line">默认选中要加checked='checked'</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"gender"</span> <span class="attr">checked</span>=<span class="string">'checked'</span>&gt;</span>男</span><br><span class="line">当标签的属性名和属性值一样的时候可以简写</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"gender"</span> <span class="attr">checked</span>&gt;</span>女</span><br><span class="line">checkbox:多选</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">checked</span>&gt;</span>DBJ</span><br><span class="line">  </span><br><span class="line">file:获取文件  也可以一次性获取多个</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">multiple</span>&gt;</span></span><br><span class="line">hidden:隐藏当前input框  #钓鱼网站</span><br><span class="line">      	</span><br><span class="line"></span><br><span class="line">select标签 默认是单选 可以加mutiple参数变多选 默认选中selected</span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">multiple</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">""</span> <span class="attr">selected</span>&gt;</span>新垣结衣<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">""</span> <span class="attr">selected</span>&gt;</span>斯佳丽<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span>明老师<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">textarea标签  获取大段文本</span><br><span class="line">	  <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">cols</span>=<span class="string">"30"</span> <span class="attr">rows</span>=<span class="string">"10"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line"></span><br><span class="line">#能够触发form表单提交数据的按钮有哪些(一定要记住)</span><br><span class="line">		1、<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"注册"</span>&gt;</span></span><br><span class="line">		2、<span class="tag">&lt;<span class="name">button</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">#所有获取用户输入的标签 都应该有name属性，</span><br><span class="line">#name就类似于字典的key</span><br><span class="line">#用户的数据就类似于字典的value</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>gender:</span><br><span class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"gender"</span>&gt;</span>男</span><br><span class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"gender"</span>&gt;</span>女</span><br><span class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"gender"</span>&gt;</span>其他</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="验证form表单提交数据"><a href="#验证form表单提交数据" class="headerlink" title="验证form表单提交数据"></a>验证form表单提交数据</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">#接下来的框架代码无需掌握  看一下效果即可</span><br><span class="line">pip3 install FLASK</span><br><span class="line"></span><br><span class="line">form表单默认提交数据的方式 是get请求  数据是直接放在url后面的</span><br><span class="line">	http://127.0.0.1:5000/index/?username=sdadasdsda&amp;gender=on</span><br><span class="line">你可以通过method指定提交方式</span><br><span class="line">	<span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"http://127.0.0.1:5000/index/"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">针对用户选择的标签 用户不需要输入内容 但是你需要提前给这些标签添加内容value值</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>gender:</span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"gender"</span> <span class="attr">value</span>=<span class="string">"male"</span>&gt;</span>男</span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"gender"</span> <span class="attr">checked</span> <span class="attr">value</span>=<span class="string">"female"</span>&gt;</span>女</span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"gender"</span> <span class="attr">value</span>=<span class="string">"others"</span>&gt;</span>其他</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>hobby:</span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"hobby"</span> <span class="attr">value</span>=<span class="string">"basketball"</span>&gt;</span>篮球</span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">checked</span> <span class="attr">name</span>=<span class="string">"hobby"</span> <span class="attr">value</span>=<span class="string">"football"</span>&gt;</span>足球</span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">checked</span> <span class="attr">name</span>=<span class="string">"hobby"</span> <span class="attr">value</span>=<span class="string">"doublecolorball"</span>&gt;</span>双色球</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>province：</span><br><span class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">"province"</span> <span class="attr">id</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"sh"</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"bj"</span> <span class="attr">selected</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"sz"</span>&gt;</span>深圳<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">"""html</span><br><span class="line">form表单提交文件需要注意</span><br><span class="line">	1.method必须是post</span><br><span class="line">	2.enctype="multipart/form-data"</span><br><span class="line">		enctype类似于数据提交的编码格式</span><br><span class="line">			默认是urlencoded 只能够提交普通的文本数据</span><br><span class="line">			formdata 就可以支持提交文件数据</span><br><span class="line">"""</span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"http://127.0.0.1:5000/index/"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">"""下面的代码无需掌握 你只需要关心form表单即可"""</span><br><span class="line">from flask import Flask, request</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">#当前url既可以支持get请求也可以支持post请求  如果不写默认只能支持get请求</span><br><span class="line">@app.route('/index/',methods=['GET','POST'])</span><br><span class="line">def index():</span><br><span class="line">    print(request.form)  # 获取form表单提交过来的非文件数据</span><br><span class="line">    # ImmutableMultiDict([('username', 'jason'), ('password', '123132131231233'), ('gender', 'on')])</span><br><span class="line">    print(request.files)  # 获取文件数据</span><br><span class="line">    file_obj = request.files.get('myfile.png')</span><br><span class="line">    file_obj.save(file_obj.name)</span><br><span class="line">    return 'OK'</span><br><span class="line"></span><br><span class="line">app.run()</span><br><span class="line"></span><br><span class="line">#针对用户输入的标签。如果你加了value 那就是默认值</span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"d1"</span>&gt;</span>username:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"d1"</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"默认值"</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">disable 禁用</span><br><span class="line">readonly只读</span><br></pre></td></tr></table></figure>

<p>前端参考博客:<a href="https://www.cnblogs.com/Dominic-Ji/p/10864457.html" target="_blank" rel="noopener">https://www.cnblogs.com/Dominic-Ji/p/10864457.html</a></p>
]]></content>
      <categories>
        <category>前端开发</category>
      </categories>
      <tags>
        <tag>前端入门</tag>
      </tags>
  </entry>
  <entry>
    <title>[客户端使用]</title>
    <url>/2020/06/22/%E5%AE%A2%E6%88%B7%E7%AB%AF%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="一-Python客户端"><a href="#一-Python客户端" class="headerlink" title="一 Python客户端"></a>一 Python客户端</h2><h3 id="1-Python操作Redis之普通连接"><a href="#1-Python操作Redis之普通连接" class="headerlink" title="1 Python操作Redis之普通连接"></a>1 Python操作Redis之普通连接</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1 pip3 install redis</span></span><br><span class="line"><span class="comment"># 简单使用</span></span><br><span class="line"><span class="keyword">from</span> redis <span class="keyword">import</span> Redis</span><br><span class="line"><span class="comment"># conn=Redis()</span></span><br><span class="line"><span class="comment"># 连接对象</span></span><br><span class="line">conn=Redis(host=<span class="string">'127.0.0.1'</span>, port=<span class="number">6379</span>)</span><br><span class="line">ret=conn.get(<span class="string">'name'</span>)</span><br><span class="line">print(ret)</span><br></pre></td></tr></table></figure>

<h3 id="2-Python操作Redis之连接池"><a href="#2-Python操作Redis之连接池" class="headerlink" title="2 Python操作Redis之连接池"></a>2 Python操作Redis之连接池</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># t_redis_pool.py</span></span><br><span class="line"><span class="comment"># redis连接池</span></span><br><span class="line"><span class="keyword">import</span> redis</span><br><span class="line"><span class="comment"># pool必须是单例的</span></span><br><span class="line">POOL = redis.ConnectionPool(host=<span class="string">'127.0.0.1'</span>, port=<span class="number">6379</span>,max_connections=<span class="number">100</span>)  <span class="comment"># 造一个池子,最多能放100个连接</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># t_redis_conn.py</span></span><br><span class="line"><span class="comment"># redis连接池</span></span><br><span class="line"><span class="comment"># import redis</span></span><br><span class="line"><span class="comment"># pool必须是单例的</span></span><br><span class="line"><span class="comment"># pool = redis.ConnectionPool(host='127.0.0.1', port=6379,max_connections=100)  # 造一个池子,最多能放100个连接</span></span><br><span class="line"><span class="keyword">import</span> redis</span><br><span class="line"><span class="comment"># 包内的py文件，如果想右键运行，导包的时候不能带点</span></span><br><span class="line"><span class="keyword">from</span> t_redis_pool <span class="keyword">import</span> POOL  <span class="comment"># pycharm提示的错</span></span><br><span class="line">r = redis.Redis(connection_pool=POOL)  <span class="comment"># 只要执行这一句话，就是从池中拿出一个连接</span></span><br><span class="line">ret=r.get(<span class="string">'name'</span>)</span><br><span class="line">print(ret)</span><br></pre></td></tr></table></figure>

<h3 id="3-操作之String操作"><a href="#3-操作之String操作" class="headerlink" title="3 操作之String操作"></a>3 操作之String操作</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 字符串操作</span></span><br><span class="line"><span class="comment"># 1 set的用法</span></span><br><span class="line"><span class="comment"># conn.set('height',180) #基本使用</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># conn.set('height','190',nx=True)</span></span><br><span class="line"><span class="comment"># conn.set('height','190',xx=True)</span></span><br><span class="line"><span class="comment"># conn.set('height1','190',xx=True)</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">ex，过期时间（秒）</span></span><br><span class="line"><span class="string">     px，过期时间（毫秒）</span></span><br><span class="line"><span class="string">     nx，如果设置为True，则只有name不存在时，当前set操作才执行,值存在，就修改不了，执行没效果</span></span><br><span class="line"><span class="string">     xx，如果设置为True，则只有name存在时，当前set操作才执行，值存在才能修改，值不存在，不会设置新值</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2</span></span><br><span class="line"><span class="comment"># setnx(name, value)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置值，只有name不存在时，执行设置操作（添加）,如果存在，不会修改</span></span><br><span class="line"><span class="comment"># setex(name, value, time)</span></span><br><span class="line"><span class="comment"># 设置值</span></span><br><span class="line"><span class="comment"># 参数：</span></span><br><span class="line"><span class="comment"># time，过期时间（数字秒 或 timedelta对象）</span></span><br><span class="line"><span class="comment"># psetex(name, time_ms, value)</span></span><br><span class="line"><span class="comment"># 设置值</span></span><br><span class="line"><span class="comment"># 参数：</span></span><br><span class="line"><span class="comment"># time_ms，过期时间（数字毫秒 或 timedelta对象）</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># mset</span></span><br><span class="line"><span class="comment"># conn.mset(&#123;'name1':'11','name3':'dasfd'&#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ret=conn.mget(['name1','name','name3'])</span></span><br><span class="line"><span class="comment"># print(ret)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ret=conn.getset('name1', '999')</span></span><br><span class="line"><span class="comment"># print(ret)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ret=conn.getrange('name1',0,0) # 前闭后闭区间</span></span><br><span class="line"><span class="comment"># print(ret)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># conn.setrange('name1',1,88888)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ret=conn.getbit('name1',9)</span></span><br><span class="line"><span class="comment"># print(ret)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#incr ：统计网站访问量，页面访问量，接口访问量</span></span><br><span class="line"><span class="comment"># conn.incr('name1')  # 只要一执行，数字加1</span></span><br><span class="line"><span class="comment"># conn.incr('name1')  # 只要一执行，数字加1</span></span><br><span class="line"><span class="comment"># conn.incr('name1')  # 只要一执行，数字加1</span></span><br><span class="line"><span class="comment"># conn.incr('name1')  # 只要一执行，数字加1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#decr</span></span><br><span class="line"><span class="comment"># conn.incr('name1',-2)</span></span><br><span class="line"><span class="comment"># conn.decr('name1',3)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># conn.append('name1','oo')</span></span><br><span class="line"><span class="comment"># conn.incr('name1')</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##重点：</span></span><br><span class="line"><span class="comment">#set :很多参数</span></span><br><span class="line"><span class="comment">#get</span></span><br><span class="line"><span class="comment">#mset</span></span><br><span class="line"><span class="comment">#mget</span></span><br><span class="line"><span class="comment">#incr</span></span><br><span class="line"><span class="comment">#decr</span></span><br><span class="line"><span class="comment">#append</span></span><br></pre></td></tr></table></figure>

<h3 id="4-操作之Hash操作"><a href="#4-操作之Hash操作" class="headerlink" title="4 操作之Hash操作"></a>4 操作之Hash操作</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># hash操作</span></span><br><span class="line"><span class="comment"># conn.hset('hash1','name','lqz')</span></span><br><span class="line"><span class="comment"># conn.hset('hash1','name2','lqz')</span></span><br><span class="line"><span class="comment"># conn.hset('hash1','name','lqz444')  # key不可以重复，</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ret=conn.hget('hash1','name')  #只能取一个</span></span><br><span class="line"><span class="comment"># print(ret)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># conn.hmset('hash2',&#123;'key1':'value1','key2':'value2'&#125;)</span></span><br><span class="line"><span class="comment"># ret=conn.hmget('hash1','name','name2')</span></span><br><span class="line"><span class="comment"># ret=conn.hmget('hash1',['name','name2'])</span></span><br><span class="line"><span class="comment"># print(ret)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ret=conn.hgetall('hash1')  # 尽量少用</span></span><br><span class="line"><span class="comment"># print(ret)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ret=conn.hlen('hash1')</span></span><br><span class="line"><span class="comment"># ret=conn.hkeys('hash1')</span></span><br><span class="line"><span class="comment"># ret=conn.hexists('hash1','name1')</span></span><br><span class="line"><span class="comment"># ret=conn.hdel('hash1','name')</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># conn.hset('hash1','name',12)</span></span><br><span class="line"><span class="comment"># ret=conn.hincrby('hash1','name')</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># print(ret)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 以后想取出hash类型内所有的数据，不建议用hgetall，建议用hscan_iter</span></span><br><span class="line"><span class="comment"># 一次性先取一部分回来（假设有1w条，先取回100条，把这100条做成了生成器）</span></span><br><span class="line"><span class="comment"># ret=conn.hscan_iter('hash1')</span></span><br><span class="line"><span class="comment"># print(ret)</span></span><br><span class="line"><span class="comment"># for i in ret:</span></span><br><span class="line"><span class="comment">#     print(i)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##重点掌握</span></span><br><span class="line"><span class="comment"># hset</span></span><br><span class="line"><span class="comment"># hget</span></span><br><span class="line"><span class="comment">#hmset</span></span><br><span class="line"><span class="comment">#hmget</span></span><br><span class="line"><span class="comment"># hincrby</span></span><br><span class="line"><span class="comment"># 区分hgetall和hscan_iter</span></span><br></pre></td></tr></table></figure>

<h3 id="5-操作之List操作"><a href="#5-操作之List操作" class="headerlink" title="5 操作之List操作"></a>5 操作之List操作</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">### 列表操作</span></span><br><span class="line"><span class="comment"># ret=conn.lpush('list1',1,2,3,4,5)</span></span><br><span class="line"><span class="comment"># ret=conn.rpush('list1',999)</span></span><br><span class="line"><span class="comment"># ret=conn.lpushx('list2',1)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ret=conn.lpushx('list1',888)  # 必须有这个key才能放</span></span><br><span class="line"><span class="comment"># ret=conn.rpushx('list1',666)  # 我们猜，返回总长度</span></span><br><span class="line"><span class="comment"># ret=conn.llen('list1')</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ret=conn.linsert('list1','before','3','77777777')</span></span><br><span class="line"><span class="comment"># ret=conn.linsert('list1','after','3','66666666')</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ret=conn.lset('list1',3,'22222')  #从0开始计数</span></span><br><span class="line"><span class="comment"># ret=conn.lset('list1',0,'11111')</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ret=conn.lrem('list1',2,'5')  # 从前往后删除两个5</span></span><br><span class="line"><span class="comment"># ret=conn.lrem('list1',-1,'5') # 从后往前删除1个5</span></span><br><span class="line"><span class="comment"># ret=conn.lrem('list1',0,'5')   # 删除所有5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ret=conn.lpop('list1')</span></span><br><span class="line"><span class="comment"># ret=conn.rpop('list1')</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ret=conn.lindex('list1',0)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ret=conn.lrange('list1',0,2)  # 前闭后闭</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ret=conn.ltrim('list1',1,2)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重点block,阻塞,可以写一个超时时间</span></span><br><span class="line"><span class="comment"># ret=conn.blpop('list1',timeout=10)</span></span><br><span class="line"><span class="comment"># print(ret)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 自定制分批取列表的数据</span></span><br><span class="line"><span class="comment"># conn.lpush('test',*[1,2,3,4,45,5,6,7,7,8,43,5,6,768,89,9,65,4,23,54,6757,8,68])</span></span><br><span class="line"><span class="comment"># conn.flushall()</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">scan_list</span><span class="params">(name,count=<span class="number">2</span>)</span>:</span></span><br><span class="line">    index=<span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        data_list=conn.lrange(name,index,count+index<span class="number">-1</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> data_list:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        index+=count</span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> data_list:</span><br><span class="line">            <span class="keyword">yield</span> item</span><br><span class="line"><span class="comment"># print(conn.lrange('test',0,100))</span></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> scan_list(<span class="string">'test'</span>,<span class="number">5</span>):</span><br><span class="line">    print(<span class="string">'---'</span>)</span><br><span class="line">    print(item)</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 重点</span></span><br><span class="line">lpush</span><br><span class="line">lpop</span><br><span class="line">blpop</span><br><span class="line">lrange</span><br><span class="line">llen</span><br></pre></td></tr></table></figure>

<h3 id="5-redsi的其他使用"><a href="#5-redsi的其他使用" class="headerlink" title="5 redsi的其他使用"></a>5 redsi的其他使用</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 其他操作</span></span><br><span class="line"><span class="comment"># conn.delete('list1')</span></span><br><span class="line"><span class="comment"># ret=conn.delete('hash1')</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ret=conn.exists('hash2')</span></span><br><span class="line"><span class="comment"># ret=conn.keys('cache*')  #查询以cache开头的所有key</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ret=conn.expire('hash2',2)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ret=conn.type('name3')</span></span><br><span class="line"><span class="comment"># ret=conn.type('test')</span></span><br><span class="line"><span class="comment"># ret=conn.type('test')</span></span><br><span class="line">print(ret)</span><br></pre></td></tr></table></figure>



<h2 id="二-Go客户端"><a href="#二-Go客户端" class="headerlink" title="二 Go客户端"></a>二 Go客户端</h2>]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>[存储引擎与数据类型]</title>
    <url>/2020/03/09/%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<h3 id="存储引擎"><a href="#存储引擎" class="headerlink" title="存储引擎"></a>存储引擎</h3><p>日常生活中文件格式有很多中，并且针对不同的文件格式会有对应不同存储方式和处理机制(txt,pdf,word,mp4…)</p>
<p>针对不同的数据应该有对应的不同的处理机制来存储</p>
<p>存储引擎就是不同的处理机制</p>
<p><strong>MySQL主要存储引擎</strong></p>
<ul>
<li><p>Innodb</p>
<p>是MySQL5.5版本及之后默认的存储引擎</p>
<p>存储数据更加的安全</p>
</li>
<li><p>myisam</p>
<p>是MySQL5.5版本之前默认的存储引擎</p>
<p>速度要比Innodb更快 但是我们更加注重的是数据的安全</p>
</li>
<li><p>memory</p>
<p>内存引擎(数据全部存放在内存中) 断电数据丢失</p>
</li>
<li><p>blackhole</p>
<p>无论存什么，都立刻消失(黑洞)</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string"># 查看所有的存储引擎</span></span><br><span class="line"><span class="string">show engines;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 不同的存储引擎在存储表的时候 异同点</span></span><br><span class="line"><span class="string">create table t1(id int) engine=innodb;</span></span><br><span class="line"><span class="string">create table t2(id int) engine=myisam;</span></span><br><span class="line"><span class="string">create table t3(id int) engine=blackhole;</span></span><br><span class="line"><span class="string">create table t4(id int) engine=memory;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 存数据</span></span><br><span class="line"><span class="string">insert into t1 values(1);</span></span><br><span class="line"><span class="string">insert into t2 values(1);</span></span><br><span class="line"><span class="string">insert into t3 values(1);</span></span><br><span class="line"><span class="string">insert into t4 values(1);</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<p><img src="https://images.cnblogs.com/cnblogs_com/wjxyzs/1693949/o_200513125145%E5%82%A8%E5%AD%98%E5%BC%95%E6%93%8E.png" alt="https://images.cnblogs.com/cnblogs_com/wjxyzs/1693949/o_200513125145%E5%82%A8%E5%AD%98%E5%BC%95%E6%93%8E.png"></p>
<h3 id="创建表的完整语法"><a href="#创建表的完整语法" class="headerlink" title="创建表的完整语法"></a>创建表的完整语法</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 语法</span></span><br><span class="line">create table 表名(</span><br><span class="line">	字段名<span class="number">1</span> 类型(宽度) 约束条件,</span><br><span class="line">    字段名<span class="number">2</span> 类型(宽度) 约束条件,</span><br><span class="line">    字段名<span class="number">3</span> 类型(宽度) 约束条件</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意</span></span><br><span class="line"><span class="number">1</span> 在同一张表中字段名不能重复</span><br><span class="line"><span class="number">2</span> 宽度和约束条件是可选的(可写可不写) 而字段名和字段类型是必须的</span><br><span class="line">	约束条件写的话 也支持写多个</span><br><span class="line">    字段名<span class="number">1</span> 类型(宽度) 约束条件<span class="number">1</span> 约束条件<span class="number">2.</span>..,</span><br><span class="line">	create table t5(id);  报错</span><br><span class="line"><span class="number">3</span> 最后一行不能有逗号</span><br><span class="line">	create table t6(</span><br><span class="line">        id int,</span><br><span class="line">        name char,</span><br><span class="line">    );   报错</span><br><span class="line"></span><br><span class="line"><span class="string">"""补充"""</span></span><br><span class="line"><span class="comment"># 宽度</span></span><br><span class="line">	一般情况下指的是对存储数据的限制</span><br><span class="line">	create table t7(name char);  默认宽度是<span class="number">1</span></span><br><span class="line">    insert into t7 values(<span class="string">'jason'</span>);</span><br><span class="line">    insert into t7 values(null);  关键字NULL</span><br><span class="line">    针对不同的版本会出现不同的效果</span><br><span class="line">    <span class="number">5.6</span>版本默认没有开启严格模式 规定只能存一个字符你给了多个字符，那么我会自动帮你截取</span><br><span class="line">    <span class="number">5.7</span>版本及以上或者开启了严格模式 那么规定只能存几个 就不能超，一旦超出范围立刻报错 Data too long <span class="keyword">for</span> ....</span><br><span class="line"><span class="string">"""严格模式到底开不开呢？"""</span></span><br><span class="line">MySQL5<span class="number">.7</span>之后的版本默认都是开启严格模式的</span><br><span class="line">使用数据库的准则:</span><br><span class="line">	能尽量少的让数据库干活就尽量少 不要给数据库增加额外的压力</span><br><span class="line"></span><br><span class="line"><span class="comment"># 约束条件 null  not null不能插入null</span></span><br><span class="line">create table t8(id int,name char <span class="keyword">not</span> null);</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">宽度和约束条件到底是什么关系</span></span><br><span class="line"><span class="string">	宽度是用来限制数据的存储</span></span><br><span class="line"><span class="string">	约束条件是在宽度的基础之上增加的额外的约束</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<h3 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h3><p>整型</p>
<ul>
<li><p>分类</p>
<p>TINYINT SMALLINT MEDUIMINT INT BIGINT</p>
</li>
<li><p>作用</p>
<p>存储年龄、等级、id、号码等等</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">以TINYINT </span></span><br><span class="line"><span class="string">	是否有符号</span></span><br><span class="line"><span class="string">		默认情况下是带符号的</span></span><br><span class="line"><span class="string">	超出会如何</span></span><br><span class="line"><span class="string">		超出限制只存最大可接受值</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">create table t9(id tinyint);</span><br><span class="line">insert into t9 values(<span class="number">-129</span>),(<span class="number">256</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment"># 约束条件之unsigned 无符号</span></span><br><span class="line">create table t10(id tinyint unsigned);</span><br><span class="line"></span><br><span class="line">create table t11(id int);</span><br><span class="line"><span class="comment"># int默认也是带符号的  </span></span><br><span class="line"><span class="comment"># 整型默认情况下都是带有符号的</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 针对整型 括号内的宽度到底是干嘛的</span></span><br><span class="line">create table t12(id int(<span class="number">8</span>));</span><br><span class="line">insert into t12 values(<span class="number">123456789</span>);</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">特例:只有整型括号里面的数字不是表示限制位数</span></span><br><span class="line"><span class="string">id int(8)</span></span><br><span class="line"><span class="string">	如果数字没有超出8位 那么默认用空格填充至8位</span></span><br><span class="line"><span class="string">	如果数字超出了8位 那么有几位就存几位(但是还是要遵守最大范围)</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">create table t13(id int(<span class="number">8</span>) unsigned zerofill);</span><br><span class="line"><span class="comment"># 用0填充至8位</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 总结:</span></span><br><span class="line">针对整型字段 括号内无需指定宽度 因为它默认的宽度以及足够显示所有的数据了</span><br></pre></td></tr></table></figure>

<h3 id="严格模式"><a href="#严格模式" class="headerlink" title="严格模式"></a>严格模式</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 如何查看严格模式</span></span><br><span class="line">show variables like <span class="string">"%mode"</span>;</span><br><span class="line"></span><br><span class="line">模糊匹配/查询</span><br><span class="line">	关键字 like</span><br><span class="line">		%:匹配任意多个字符</span><br><span class="line">        _:匹配任意单个字符</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改严格模式</span></span><br><span class="line">	set session  只在当前窗口有效</span><br><span class="line">    set <span class="keyword">global</span>   全局有效</span><br><span class="line">    </span><br><span class="line">    set <span class="keyword">global</span> sql_mode = <span class="string">'STRICT_TRANS_TABLES'</span>;</span><br><span class="line">    </span><br><span class="line">    修改完之后 重新进入服务端即可</span><br></pre></td></tr></table></figure>

<h3 id="浮点型"><a href="#浮点型" class="headerlink" title="浮点型"></a>浮点型</h3><ul>
<li><p>分类</p>
<p>FLOAT、DOUBLE、DECIMAL</p>
</li>
<li><p>作用</p>
<p>身高、体重、薪资</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 存储限制</span></span><br><span class="line">float(<span class="number">255</span>,<span class="number">30</span>)  <span class="comment"># 总共255位 小数部分占30位</span></span><br><span class="line">double(<span class="number">255</span>,<span class="number">30</span>)  <span class="comment"># 总共255位 小数部分占30位</span></span><br><span class="line">decimal(<span class="number">65</span>,<span class="number">30</span>)  <span class="comment"># 总共65位 小数部分占30位</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 精确度验证</span></span><br><span class="line">create table t15(id float(<span class="number">255</span>,<span class="number">30</span>));</span><br><span class="line">create table t16(id double(<span class="number">255</span>,<span class="number">30</span>));</span><br><span class="line">create table t17(id decimal(<span class="number">65</span>,<span class="number">30</span>));</span><br><span class="line"><span class="string">"""你们在前期不要给我用反向键 所有的命令全部手敲！！！增加熟练度"""</span></span><br><span class="line"></span><br><span class="line">insert into t15 values(<span class="number">1.111111111111111111111111111111</span>);</span><br><span class="line">insert into t16 values(<span class="number">1.111111111111111111111111111111</span>);</span><br><span class="line">insert into t17 values(<span class="number">1.111111111111111111111111111111</span>);</span><br><span class="line"></span><br><span class="line">float &lt; double &lt; decimal</span><br><span class="line"><span class="comment"># 要结合实际应用场景 三者都能使用</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="字符类型"><a href="#字符类型" class="headerlink" title="字符类型"></a>字符类型</h3><ul>
<li><p>分类</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">char</span></span><br><span class="line"><span class="string">	定长</span></span><br><span class="line"><span class="string">	char(4)	 数据超过四个字符直接报错 不够四个字符空格补全</span></span><br><span class="line"><span class="string">varchar</span></span><br><span class="line"><span class="string">	变长</span></span><br><span class="line"><span class="string">	varchar(4)  数据超过四个字符直接报错 不够有几个存几个</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">create table t18(name char(<span class="number">4</span>));</span><br><span class="line">create table t19(name varchar(<span class="number">4</span>));</span><br><span class="line"></span><br><span class="line">insert into t18 values(<span class="string">'a'</span>);</span><br><span class="line">insert into t19 values(<span class="string">'a'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment"># 介绍一个小方法 char_length统计字段长度</span></span><br><span class="line">select char_length(name) <span class="keyword">from</span> t18;</span><br><span class="line">select char_length(name) <span class="keyword">from</span> t19;</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">首先可以肯定的是 char硬盘上存的绝对是真正的数据 带有空格的</span></span><br><span class="line"><span class="string">但是在显示的时候MySQL会自动将多余的空格剔除</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 再次修改sql_mode 让MySQL不要做自动剔除操作</span></span><br><span class="line">set <span class="keyword">global</span> sql_mode = <span class="string">'STRICT_TRANS_TABLES,PAD_CHAR_TO_FULL_LENGTH'</span>;</span><br></pre></td></tr></table></figure>

<h3 id="char与varchar对比"><a href="#char与varchar对比" class="headerlink" title="char与varchar对比"></a>char与varchar对比</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">char</span></span><br><span class="line"><span class="string">	缺点:浪费空间</span></span><br><span class="line"><span class="string">	优点:存取都很简单</span></span><br><span class="line"><span class="string">		直接按照固定的字符存取数据即可</span></span><br><span class="line"><span class="string">		jason egon alex wusir tank </span></span><br><span class="line"><span class="string">		存按照五个字符存 取也直接按照五个字符取</span></span><br><span class="line"><span class="string">		</span></span><br><span class="line"><span class="string">varchar</span></span><br><span class="line"><span class="string">	优点:节省空间</span></span><br><span class="line"><span class="string">	缺点:存取较为麻烦</span></span><br><span class="line"><span class="string">		1bytes+jason 1bytes+egon 1bytes+alex 1bytes+tank </span></span><br><span class="line"><span class="string">		</span></span><br><span class="line"><span class="string">		存的时候需要制作报头</span></span><br><span class="line"><span class="string">		取的时候也需要先读取报头 之后才能读取真实数据</span></span><br><span class="line"><span class="string">		</span></span><br><span class="line"><span class="string">以前基本上都是用的char 其实现在用varchar的也挺多</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">补充:</span><br><span class="line">    进来公司之后你完全不需要考虑字段类型和字段名</span><br><span class="line">    因为产品经理给你发的邮件上已经全部指明了</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="时间类型"><a href="#时间类型" class="headerlink" title="时间类型"></a>时间类型</h3><ul>
<li><p>分类</p>
<p>date:年月日 2020-5-4</p>
<p>datetime:年月日时分秒 2020-5-4 11:11:11</p>
<p>time:时分秒11:11:11</p>
<p>Year:2020</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">create table student(</span><br><span class="line">	id int,</span><br><span class="line">    name varchar(<span class="number">16</span>),</span><br><span class="line">    born_year year,</span><br><span class="line">    birth date,</span><br><span class="line">    study_time time,</span><br><span class="line">    reg_time datetime</span><br><span class="line">);</span><br><span class="line">insert into student values(<span class="number">1</span>,<span class="string">'egon'</span>,<span class="string">'1880'</span>,<span class="string">'1880-11-11'</span>,<span class="string">'11:11:11'</span>,<span class="string">'2020-11-11 11:11:11'</span>);</span><br><span class="line"></span><br><span class="line">ps:插入的时间是有限制的<span class="number">1900</span>年前不能添加</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="枚举与集合类型"><a href="#枚举与集合类型" class="headerlink" title="枚举与集合类型"></a>枚举与集合类型</h3><ul>
<li><p>分类</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">枚举(enum)  多选一</span></span><br><span class="line"><span class="string">集合(set)   多选多</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>具体使用</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">create table user(</span><br><span class="line">	id int,</span><br><span class="line">    name char(<span class="number">16</span>),</span><br><span class="line">    gender enum(<span class="string">'male'</span>,<span class="string">'female'</span>,<span class="string">'others'</span>)</span><br><span class="line">);</span><br><span class="line">insert into user values(<span class="number">1</span>,<span class="string">'jason'</span>,<span class="string">'male'</span>);  正常</span><br><span class="line">insert into user values(<span class="number">2</span>,<span class="string">'egon'</span>,<span class="string">'xxxxooo'</span>);  报错</span><br><span class="line"><span class="comment"># 枚举字段 后期在存数据的时候只能从枚举里面选择一个存储 </span></span><br><span class="line"></span><br><span class="line">create table teacher(</span><br><span class="line">	id int,</span><br><span class="line">    name char(<span class="number">16</span>),</span><br><span class="line">    gender enum(<span class="string">'male'</span>,<span class="string">'female'</span>,<span class="string">'others'</span>),</span><br><span class="line">    hobby set(<span class="string">'read'</span>,<span class="string">'DBJ'</span>,<span class="string">'hecha'</span>)</span><br><span class="line">);</span><br><span class="line">insert into teacher values(<span class="number">1</span>,<span class="string">'jason'</span>,<span class="string">'male'</span>,<span class="string">'read'</span>);  正常</span><br><span class="line">insert into teacher values(<span class="number">2</span>,<span class="string">'egon'</span>,<span class="string">'female'</span>,<span class="string">'DBJ,hecha'</span>);  正常</span><br><span class="line">insert into teacher values(<span class="number">3</span>,<span class="string">'tank'</span>,<span class="string">'others'</span>,<span class="string">'生蚝'</span>); 报错</span><br><span class="line"><span class="comment"># 集合可以只写一个  但是不能写没有列举的</span></span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>[批量插入与分页器]</title>
    <url>/2020/02/15/%E6%89%B9%E9%87%8F%E6%8F%92%E5%85%A5%E4%B8%8E%E5%88%86%E9%A1%B5%E5%99%A8/</url>
    <content><![CDATA[<h3 id="批量插入"><a href="#批量插入" class="headerlink" title="批量插入"></a>批量插入</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ab_pl</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="comment"># 先给Book插入一万条数据</span></span><br><span class="line">    <span class="comment"># for i in range(10000):</span></span><br><span class="line">    <span class="comment">#     models.Book.objects.create(title='第%s本书'%i)</span></span><br><span class="line">    <span class="comment"># # 再将所有的数据查询并展示到前端页面</span></span><br><span class="line">    book_queryset = models.Book.objects.all()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 批量插入</span></span><br><span class="line">    <span class="comment"># book_list = []</span></span><br><span class="line">    <span class="comment"># for i in range(100000):</span></span><br><span class="line">    <span class="comment">#     book_obj = models.Book(title='第%s本书'%i)</span></span><br><span class="line">    <span class="comment">#     book_list.append(book_obj)</span></span><br><span class="line">    <span class="comment"># models.Book.objects.bulk_create(book_list)</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    当你想要批量插入数据的时候 使用orm给你提供的bulk_create能够大大的减少操作时间</span></span><br><span class="line"><span class="string">    :param request: </span></span><br><span class="line"><span class="string">    :return: </span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">'ab_pl.html'</span>,locals())</span><br></pre></td></tr></table></figure>

<h3 id="分页器"><a href="#分页器" class="headerlink" title="分页器"></a>分页器</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">总数据100 每页展示10 需要10</span></span><br><span class="line"><span class="string">总数据101 每页展示10 需要11</span></span><br><span class="line"><span class="string">总数据99 每页展示10  需要10</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">如何通过代码动态的计算出到底需要多少页？</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">在制作页码个数的时候 一般情况下都是奇数个		符合中国人对称美的标准</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment"># 分页</span></span><br><span class="line">    book_list = models.Book.objects.all()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 想访问哪一页</span></span><br><span class="line">    current_page = request.GET.get(<span class="string">'page'</span>,<span class="number">1</span>)  <span class="comment"># 如果获取不到当前页码 就展示第一页</span></span><br><span class="line">    <span class="comment"># 数据类型转换</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        current_page = int(current_page)</span><br><span class="line">    <span class="keyword">except</span> Exception:</span><br><span class="line">        current_page = <span class="number">1</span></span><br><span class="line">    <span class="comment"># 每页展示多少条</span></span><br><span class="line">    per_page_num = <span class="number">10</span></span><br><span class="line">    <span class="comment"># 起始位置</span></span><br><span class="line">    start_page = (current_page - <span class="number">1</span>) * per_page_num</span><br><span class="line">    <span class="comment"># 终止位置</span></span><br><span class="line">    end_page = current_page * per_page_num</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 计算出到底需要多少页</span></span><br><span class="line">    all_count = book_list.count()</span><br><span class="line"></span><br><span class="line">    page_count, more = divmod(all_count, per_page_num)</span><br><span class="line">    <span class="keyword">if</span> more:</span><br><span class="line">        page_count += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    page_html = <span class="string">''</span></span><br><span class="line">    xxx = current_page</span><br><span class="line">    <span class="keyword">if</span> current_page &lt; <span class="number">6</span>:</span><br><span class="line">        current_page = <span class="number">6</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(current_page<span class="number">-5</span>,current_page+<span class="number">6</span>):</span><br><span class="line">        <span class="keyword">if</span> xxx == i:</span><br><span class="line">            page_html += <span class="string">'&lt;li class="active"&gt;&lt;a href="?page=%s"&gt;%s&lt;/a&gt;&lt;/li&gt;'</span>%(i,i)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            page_html += <span class="string">'&lt;li&gt;&lt;a href="?page=%s"&gt;%s&lt;/a&gt;&lt;/li&gt;'</span>%(i,i)</span><br><span class="line"></span><br><span class="line">    book_queryset =  book_list[start_page:end_page]</span><br><span class="line">    </span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">django中有自带的分页器模块 但是书写起来很麻烦并且功能太简单</span></span><br><span class="line"><span class="string">所以我们自己想法和设法的写自定义分页器</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">上述推导代码你无需掌握 只需要知道内部逻辑即可</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">我们基于上述的思路 已经封装好了我们自己的自定义分页器 </span></span><br><span class="line"><span class="string">之后需要使用直接拷贝即可</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<h3 id="自定义分页器的拷贝及使用"><a href="#自定义分页器的拷贝及使用" class="headerlink" title="自定义分页器的拷贝及使用"></a>自定义分页器的拷贝及使用</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">当我们需要使用到非django内置的第三方功能或者组件代码的时候</span></span><br><span class="line"><span class="string">我们一般情况下会创建一个名为utils文件夹 在该文件夹内对模块进行功能性划分</span></span><br><span class="line"><span class="string">	utils可以在每个应用下创建 具体结合实际情况</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">我们到了后期封装代码的时候 不再局限于函数</span></span><br><span class="line"><span class="string">还是尽量朝面向对象去封装</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">我们自定义的分页器是基于bootstrap样式来的 所以你需要提前导入bootstrap</span></span><br><span class="line"><span class="string">	bootstrap 版本 v3</span></span><br><span class="line"><span class="string">	jQuery		版本 v3</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment"># 后端</span></span><br><span class="line">book_queryset = models.Book.objects.all()</span><br><span class="line">current_page = request.GET.get(<span class="string">'page'</span>,<span class="number">1</span>)</span><br><span class="line">all_count = book_queryset.count()</span><br><span class="line"><span class="comment"># 1 传值生成对象</span></span><br><span class="line">page_obj = Pagination(current_page=current_page,all_count=all_count)</span><br><span class="line"><span class="comment"># 2 直接对总数据进行切片操作</span></span><br><span class="line">page_queryset = book_queryset[page_obj.start:page_obj.end]</span><br><span class="line"><span class="comment"># 3 将page_queryset传递到页面 替换之前的book_queryset</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 前端</span></span><br><span class="line">&#123;% <span class="keyword">for</span> book_obj <span class="keyword">in</span> page_queryset %&#125;</span><br><span class="line">    &lt;p&gt;&#123;&#123; book_obj.title &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;nav aria-label=<span class="string">"Page navigation"</span>&gt;</span><br><span class="line">&lt;/nav&gt;</span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line">&#123;<span class="comment">#利用自定义分页器直接显示分页器样式#&#125;</span></span><br><span class="line">&#123;&#123; page_obj.page_html|safe &#125;&#125;</span><br><span class="line">  </span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">你们只需要掌握如何拷贝使用 以及大致的推导思路即可</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>django框架</tag>
      </tags>
  </entry>
  <entry>
    <title>[序列化器-Serializer]</title>
    <url>/2020/04/22/%E5%BA%8F%E5%88%97%E5%8C%96%E5%99%A8-Serializer/</url>
    <content><![CDATA[<h1 id="7-序列化器-Serializer"><a href="#7-序列化器-Serializer" class="headerlink" title="7. 序列化器-Serializer"></a>7. 序列化器-Serializer</h1><p>作用：</p>
<ol>
<li>序列化,序列化器会把模型对象转换成字典,将来提供给视图经过response以后变成json字符串</li>
<li>反序列化,把客户端发送过来的数据,经过视图调用request以后变成python字典,序列化器可以把字典转成模型</li>
<li>反序列化,完成数据校验功能和操作数据库</li>
</ol>
<h2 id="7-1-定义序列化器"><a href="#7-1-定义序列化器" class="headerlink" title="7.1 定义序列化器"></a>7.1 定义序列化器</h2><p>Django REST framework中的Serializer使用类来定义，须继承自rest_framework.serializers.Serializer。</p>
<p>接下来，为了方便演示序列化器的使用，我们另外创建一个新的子应用sers</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python manage.py startapp sers</span><br></pre></td></tr></table></figure>

<p>先注册子应用到项目中，settings.py，代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">'django.contrib.admin'</span>,</span><br><span class="line">    <span class="string">'django.contrib.auth'</span>,</span><br><span class="line">    <span class="string">'django.contrib.contenttypes'</span>,</span><br><span class="line">    <span class="string">'django.contrib.sessions'</span>,</span><br><span class="line">    <span class="string">'django.contrib.messages'</span>,</span><br><span class="line">    <span class="string">'django.contrib.staticfiles'</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">'rest_framework'</span>, <span class="comment"># 把drf框架注册到django项目中</span></span><br><span class="line"></span><br><span class="line">    <span class="string">'students'</span>, <span class="comment"># 注册子应用</span></span><br><span class="line">    <span class="string">'sers'</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>因为我们已有了一个数据库模型类students/Student，我们直接在接下来的演示中使用这个模型。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="comment"># 模型字段</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">100</span>,verbose_name=<span class="string">"姓名"</span>)</span><br><span class="line">    sex = models.BooleanField(default=<span class="number">1</span>,verbose_name=<span class="string">"性别"</span>)</span><br><span class="line">    age = models.IntegerField(verbose_name=<span class="string">"年龄"</span>)</span><br><span class="line">    class_number = models.CharField(max_length=<span class="number">5</span>,verbose_name=<span class="string">"班级编号"</span>)</span><br><span class="line">    description = models.TextField(max_length=<span class="number">1000</span>,verbose_name=<span class="string">"个性签名"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        db_table=<span class="string">"tb_student"</span></span><br><span class="line">        verbose_name = <span class="string">"学生"</span></span><br><span class="line">        verbose_name_plural = verbose_name</span><br></pre></td></tr></table></figure>

<p>我们想为这个模型类提供一个序列化器，可以命名为<code>StudentSerializer</code>，</p>
<p>我们都会把序列化器代码保存到当前子应用下的serializers.py模块中，</p>
<p>可以定义如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"></span><br><span class="line"><span class="comment"># 声明序列化器，所有的序列化器都要直接或者间接继承于 Serializer</span></span><br><span class="line"><span class="comment"># 其中，ModelSerializer是Serializer的子类，ModelSerializer在Serializer的基础上进行了代码简化</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentSerializer</span><span class="params">(serializers.Serializer)</span>:</span></span><br><span class="line">    <span class="string">"""学生信息序列化器"""</span></span><br><span class="line">    <span class="comment"># 1. 需要进行数据转换的字段</span></span><br><span class="line">    id = serializers.IntegerField()</span><br><span class="line">    name = serializers.CharField()</span><br><span class="line">    age = serializers.IntegerField()</span><br><span class="line">    sex = serializers.BooleanField()</span><br><span class="line">    description = serializers.CharField()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2. 如果序列化器集成的是ModelSerializer，则需要声明调用的模型信息</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 3. 验证代码</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 4. 编写添加和更新模型的代码</span></span><br></pre></td></tr></table></figure>

<p><strong>注意：serializer不是只能为数据库模型类定义，也可以为非数据库模型类的数据定义。</strong>serializer是独立于数据库之外的存在。</p>
<p><strong>常用字段类型</strong>：</p>
<table>
<thead>
<tr>
<th>字段</th>
<th>字段构造方式</th>
</tr>
</thead>
<tbody><tr>
<td><strong>BooleanField</strong></td>
<td>BooleanField()</td>
</tr>
<tr>
<td><strong>NullBooleanField</strong></td>
<td>NullBooleanField()</td>
</tr>
<tr>
<td><strong>CharField</strong></td>
<td>CharField(max_length=None, min_length=None, allow_blank=False, trim_whitespace=True)</td>
</tr>
<tr>
<td><strong>EmailField</strong></td>
<td>EmailField(max_length=None, min_length=None, allow_blank=False)</td>
</tr>
<tr>
<td><strong>RegexField</strong></td>
<td>RegexField(regex, max_length=None, min_length=None, allow_blank=False)</td>
</tr>
<tr>
<td><strong>SlugField</strong></td>
<td>SlugField(max<em>length=50, min_length=None, allow_blank=False) 正则字段，验证正则模式 [a-zA-Z0-9</em>-]+</td>
</tr>
<tr>
<td><strong>URLField</strong></td>
<td>URLField(max_length=200, min_length=None, allow_blank=False)</td>
</tr>
<tr>
<td><strong>UUIDField</strong></td>
<td>UUIDField(format=’hex_verbose’)  format:  1) <code>&#39;hex_verbose&#39;</code> 如<code>&quot;5ce0e9a5-5ffa-654b-cee0-1238041fb31a&quot;</code>  2） <code>&#39;hex&#39;</code> 如 <code>&quot;5ce0e9a55ffa654bcee01238041fb31a&quot;</code>  3）<code>&#39;int&#39;</code> - 如: <code>&quot;123456789012312313134124512351145145114&quot;</code>  4）<code>&#39;urn&#39;</code> 如: <code>&quot;urn:uuid:5ce0e9a5-5ffa-654b-cee0-1238041fb31a&quot;</code></td>
</tr>
<tr>
<td><strong>IPAddressField</strong></td>
<td>IPAddressField(protocol=’both’, unpack_ipv4=False, **options)</td>
</tr>
<tr>
<td><strong>IntegerField</strong></td>
<td>IntegerField(max_value=None, min_value=None)</td>
</tr>
<tr>
<td><strong>FloatField</strong></td>
<td>FloatField(max_value=None, min_value=None)</td>
</tr>
<tr>
<td><strong>DecimalField</strong></td>
<td>DecimalField(max_digits, decimal_places, coerce_to_string=None, max_value=None, min_value=None) max_digits: 最多位数 decimal_palces: 小数点位置</td>
</tr>
<tr>
<td><strong>DateTimeField</strong></td>
<td>DateTimeField(format=api_settings.DATETIME_FORMAT, input_formats=None)</td>
</tr>
<tr>
<td><strong>DateField</strong></td>
<td>DateField(format=api_settings.DATE_FORMAT, input_formats=None)</td>
</tr>
<tr>
<td><strong>TimeField</strong></td>
<td>TimeField(format=api_settings.TIME_FORMAT, input_formats=None)</td>
</tr>
<tr>
<td><strong>DurationField</strong></td>
<td>DurationField()</td>
</tr>
<tr>
<td><strong>ChoiceField</strong></td>
<td>ChoiceField(choices) choices与Django的用法相同</td>
</tr>
<tr>
<td><strong>MultipleChoiceField</strong></td>
<td>MultipleChoiceField(choices)</td>
</tr>
<tr>
<td><strong>FileField</strong></td>
<td>FileField(max_length=None, allow_empty_file=False, use_url=UPLOADED_FILES_USE_URL)</td>
</tr>
<tr>
<td><strong>ImageField</strong></td>
<td>ImageField(max_length=None, allow_empty_file=False, use_url=UPLOADED_FILES_USE_URL)</td>
</tr>
<tr>
<td><strong>ListField</strong></td>
<td>ListField(child=, min_length=None, max_length=None)</td>
</tr>
<tr>
<td><strong>DictField</strong></td>
<td>DictField(child=)</td>
</tr>
</tbody></table>
<p><strong>选项参数：</strong></p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td><strong>max_length</strong></td>
<td>最大长度[适用于字符串，列表，文件]</td>
</tr>
<tr>
<td><strong>min_lenght</strong></td>
<td>最小长度[适用于字符串，列表，文件]</td>
</tr>
<tr>
<td><strong>allow_blank</strong></td>
<td>是否允许数据的值为空，如果使用这个选项，则前端传递过来的数据必须有这个属性。</td>
</tr>
<tr>
<td><strong>trim_whitespace</strong></td>
<td>是否截断空白字符</td>
</tr>
<tr>
<td><strong>max_value</strong></td>
<td>【数值】最小值</td>
</tr>
<tr>
<td><strong>min_value</strong></td>
<td>【数值】最大值</td>
</tr>
</tbody></table>
<p>通用参数：</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><strong>read_only</strong></td>
<td>表明该字段仅用于序列化输出，默认False</td>
</tr>
<tr>
<td><strong>write_only</strong></td>
<td>表明该字段仅用于反序列化输入，默认False</td>
</tr>
<tr>
<td><strong>required</strong></td>
<td>表明该字段在反序列化时必须输入，默认True</td>
</tr>
<tr>
<td><strong>default</strong></td>
<td>反序列化时使用的默认值</td>
</tr>
<tr>
<td><strong>allow_null</strong></td>
<td>表明该字段是否允许传入None，默认False</td>
</tr>
<tr>
<td><strong>validators</strong></td>
<td>该字段使用的验证器</td>
</tr>
<tr>
<td><strong>error_messages</strong></td>
<td>包含错误编号与错误信息的字典</td>
</tr>
<tr>
<td><strong>label</strong></td>
<td>用于HTML展示API页面时，显示的字段名称</td>
</tr>
<tr>
<td><strong>help_text</strong></td>
<td>用于HTML展示API页面时，显示的字段帮助提示信息</td>
</tr>
</tbody></table>
<h2 id="7-2-创建Serializer对象"><a href="#7-2-创建Serializer对象" class="headerlink" title="7.2 创建Serializer对象"></a>7.2 创建Serializer对象</h2><p>定义好Serializer类后，就可以创建Serializer对象了。</p>
<p>Serializer的构造方法为：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Serializer(instance=<span class="literal">None</span>, data=empty, **kwarg)</span><br></pre></td></tr></table></figure>

<p>说明：</p>
<p>1）用于序列化时，将模型类对象传入<strong>instance</strong>参数</p>
<p>2）用于反序列化时，将要被反序列化的数据传入<strong>data</strong>参数</p>
<p>3）除了instance和data参数外，在构造Serializer对象时，还可通过<strong>context</strong>参数额外添加数据，如</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">serializer = StudentSerializer(student, context=&#123;<span class="string">'request'</span>: request&#125;,many=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure>

<p><strong>通过context参数附加的数据，可以通过Serializer对象的self.context属性获取。</strong></p>
<ol>
<li>使用序列化器的时候一定要注意，序列化器声明了以后，不会自动执行，需要我们在视图中进行调用才可以。</li>
<li>序列化器无法直接接收客户端的请求数据，需要我们在视图中创建序列化器对象时把使用的数据传递过来。</li>
<li>序列化器的字段声明类似于我们前面使用过的表单系统。</li>
<li>开发restful api时，序列化器会帮我们把模型数据转换成字典.</li>
<li>drf提供的视图会帮我们把字典转换成json,或者把客户端发送过来的数据转换字典.</li>
</ol>
<h2 id="7-3-序列化器的使用"><a href="#7-3-序列化器的使用" class="headerlink" title="7.3 序列化器的使用"></a>7.3 序列化器的使用</h2><p>序列化器的使用分两个阶段：</p>
<ol>
<li>在客户端请求时，使用序列化器可以完成对数据的反序列化。</li>
<li>在服务器响应时，使用序列化器可以完成对数据的序列化。</li>
</ol>
<h3 id="7-3-1-序列化"><a href="#7-3-1-序列化" class="headerlink" title="7.3.1 序列化"></a>7.3.1 序列化</h3><h3 id="7-3-1-1-基本使用"><a href="#7-3-1-1-基本使用" class="headerlink" title="7.3.1.1 基本使用"></a>7.3.1.1 基本使用</h3><p>1） 先查询出一个学生对象</p>
<p>视图中获取模型对象，代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> students.models <span class="keyword">import</span> Student</span><br><span class="line"></span><br><span class="line">student = Student.objects.get(pk=<span class="number">3</span>)</span><br></pre></td></tr></table></figure>

<p>2） 构造序列化器对象</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> .serializers <span class="keyword">import</span> StudentSerializer</span><br><span class="line"></span><br><span class="line">serializer = StudentSerializer(instance=student)</span><br></pre></td></tr></table></figure>

<p>3）获取序列化数据</p>
<p>通过data属性可以获取序列化后的数据</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">serializer.data</span><br><span class="line"><span class="comment"># &#123;'id': 4, 'name': '小张', 'age': 18, 'sex': True, 'description': '猴赛雷'&#125;</span></span><br></pre></td></tr></table></figure>

<p>完整视图代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student2APIView</span><span class="params">(View)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self,request)</span>:</span></span><br><span class="line">        <span class="string">"""返回一个学生信息"""</span></span><br><span class="line">        <span class="comment"># 读取模型对象</span></span><br><span class="line">        student = Student.objects.get(pk=<span class="number">1</span>)</span><br><span class="line">        <span class="comment"># 实例化序列化器</span></span><br><span class="line">        serializer = StudentSerializer(instance=student)</span><br><span class="line">        print( serializer.data )</span><br><span class="line">        <span class="string">"""打印效果：</span></span><br><span class="line"><span class="string">        &#123;'id': 1, 'name': '张三', 'sex': True, 'age': 18&#125;</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">return</span> JsonResponse(serializer.data)</span><br></pre></td></tr></table></figure>

<p>4）如果要被序列化的是包含多条数据的查询集QuerySet，可以通过添加<strong>many=True</strong>参数补充说明</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">目前我们先学习序列化器，所以我们还是使用原来django内置的视图类和路由。</span></span><br><span class="line"><span class="string">使用序列化器对数据进行序列化器，一般用于返回数据给客户端。</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">from</span> django.views <span class="keyword">import</span> View</span><br><span class="line"><span class="keyword">from</span> .serializers <span class="keyword">import</span> StudentSerializer</span><br><span class="line"><span class="keyword">from</span> students.models <span class="keyword">import</span> Student</span><br><span class="line"><span class="keyword">from</span> django.http.response <span class="keyword">import</span> JsonResponse</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student1APIView</span><span class="params">(View)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self,request)</span>:</span></span><br><span class="line">        <span class="string">"""返回所有学生给客户端"""</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        序列化器对象初始化有３个参数:</span></span><br><span class="line"><span class="string">        1. instance，模型对象或者模型对象组成的列表，用于对数据进行序列化，把模型转换成字典</span></span><br><span class="line"><span class="string">        2. data，字典，用于对数据进行反序列化，把数据进行验证和保存到数据库</span></span><br><span class="line"><span class="string">        3. context，字典，用于把路由或者视图的自定义参数传递到序列化器里面使用</span></span><br><span class="line"><span class="string">                 context将来作为序列化器对象的子属性</span></span><br><span class="line"><span class="string">        4. many，当序列化器进行序列化时，如果模型有多个，则many必须为True</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        student_list = Student.objects.all()</span><br><span class="line">        serializer = StudentSerializer(instance=student_list, many=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">        print(<span class="string">'student_list===&gt;'</span>,student_list)</span><br><span class="line">        print(<span class="string">'serializer===&gt;'</span>, serializer)</span><br><span class="line">        print(<span class="string">'转换的结果===&gt;'</span>, serializer.data)</span><br><span class="line">        <span class="string">"""打印效果：</span></span><br><span class="line"><span class="string">        [</span></span><br><span class="line"><span class="string">            OrderedDict([('name', '张三'), ('sex', True), ('age', 18), ('class_null', '3011')]), </span></span><br><span class="line"><span class="string">            OrderedDict([('name', '张三'), ('sex', True), ('age', 18), ('class_null', '309')]), </span></span><br><span class="line"><span class="string">            OrderedDict([('name', '张三'), ('sex', True), ('age', 18), ('class_null', '309')]), </span></span><br><span class="line"><span class="string">            ....    </span></span><br><span class="line"><span class="string">        ]</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        说明：</span></span><br><span class="line"><span class="string">        OrderedDict是python内置的高级数据类型，表示有序字典，因为普通数据类型中的字典是无序的.</span></span><br><span class="line"><span class="string">        有序字典的成员读取方式，和无序字典一样</span></span><br><span class="line"><span class="string">        导入路径：</span></span><br><span class="line"><span class="string">        from collections import OrderedDict</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># jsonResponse的第一个参数如果是列表则必须声明safe=False，否则报错如下：</span></span><br><span class="line">        <span class="comment"># In order to allow non-dict objects to be serialized set the safe parameter to False.</span></span><br><span class="line">        <span class="keyword">return</span> JsonResponse(serializer.data, safe=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure>

<h3 id="7-3-2-反序列化"><a href="#7-3-2-反序列化" class="headerlink" title="7.3.2 反序列化"></a>7.3.2 反序列化</h3><h3 id="7-3-2-1-数据验证"><a href="#7-3-2-1-数据验证" class="headerlink" title="7.3.2.1 数据验证"></a>7.3.2.1 数据验证</h3><p>开发中，用户的数据都是不可信任的。</p>
<p>使用序列化器进行反序列化时，需要对数据进行验证后，才能获取验证成功的数据或保存成模型类对象。</p>
<p>在获取反序列化的客户端数据前，必须在视图中调用序列化对象的<strong>is_valid()</strong>方法，序列化器内部是在<strong>is_valid</strong>方法内部调用验证选项和验证方法进行验证，验证成功返回True，否则返回False。</p>
<p>验证失败，可以通过序列化器对象的<strong>errors</strong>属性获取错误信息，返回字典，包含了字段和字段的错误提示。如果是非字段错误，可以通过修改REST framework配置中的<strong>NON_FIELD_ERRORS_KEY</strong>来控制错误字典中的键名。</p>
<p>验证成功，可以通过序列化器对象的<strong>validated_data</strong>属性获取数据。</p>
<p>在定义序列化器时，指明每个字段的序列化类型和选项参数，本身就是一种验证行为。</p>
<p>为了方便演示，我们这里采用另一个图书模型来完成反序列化的学习。当然也创建一个新的子应用unsers。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python manage.py startapp unsers</span><br></pre></td></tr></table></figure>

<p>注册子应用，setting.py注册子应用，代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">'django.contrib.admin'</span>,</span><br><span class="line">    <span class="string">'django.contrib.auth'</span>,</span><br><span class="line">    <span class="string">'django.contrib.contenttypes'</span>,</span><br><span class="line">    <span class="string">'django.contrib.sessions'</span>,</span><br><span class="line">    <span class="string">'django.contrib.messages'</span>,</span><br><span class="line">    <span class="string">'django.contrib.staticfiles'</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">'rest_framework'</span>, <span class="comment"># 把drf框架注册到django项目中</span></span><br><span class="line"></span><br><span class="line">    <span class="string">'students'</span>, <span class="comment"># 注册子应用</span></span><br><span class="line">    <span class="string">'sers'</span>,     <span class="comment"># 演示序列化</span></span><br><span class="line">    <span class="string">'unsers'</span>,     <span class="comment"># 演示反序列化</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>注意：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">接下来的内容涉及到postman post提交数据，所以在此时我们没有学习到drf视图方法时，我i们把settings.py中的中间件的csrf关闭.</span><br><span class="line"></span><br><span class="line">MIDDLEWARE = [</span><br><span class="line">    <span class="string">'django.middleware.security.SecurityMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.contrib.sessions.middleware.SessionMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.middleware.common.CommonMiddleware'</span>,</span><br><span class="line">    <span class="comment"># 'django.middleware.csrf.CsrfViewMiddleware',</span></span><br><span class="line">    <span class="string">'django.contrib.auth.middleware.AuthenticationMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.contrib.messages.middleware.MessageMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.middleware.clickjacking.XFrameOptionsMiddleware'</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>模型代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your models here.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookInfo</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="string">"""图书信息"""</span></span><br><span class="line">    title = models.CharField(max_length=<span class="number">20</span>, verbose_name=<span class="string">'标题'</span>)</span><br><span class="line">    pub_date = models.DateField(verbose_name=<span class="string">'发布日期'</span>)</span><br><span class="line">    image = models.ImageField(verbose_name=<span class="string">'图书封面'</span>)</span><br><span class="line">    price = models.DecimalField(max_digits=<span class="number">8</span>, decimal_places=<span class="number">2</span>, verbose_name=<span class="string">"价格"</span>)</span><br><span class="line">    read = models.IntegerField(verbose_name=<span class="string">'阅读量'</span>)</span><br><span class="line">    comment = models.IntegerField(verbose_name=<span class="string">'评论量'</span>)</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        <span class="comment"># db_table = "表名"</span></span><br><span class="line">        db_table = <span class="string">"tb_book_info"</span></span><br><span class="line">        verbose_name = <span class="string">"图书"</span></span><br><span class="line">        verbose_name_plural = verbose_name</span><br></pre></td></tr></table></figure>

<p>注意：因为当前模型中， 设置到图片上传处理，所以我们需要安装<code>PIL</code>库</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip install Pillow</span><br></pre></td></tr></table></figure>

<p>数据迁移</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python manage.py makemigrationspython manage.py migrate</span><br></pre></td></tr></table></figure>

<p>经过上面的准备工作，我们接下来就可以给图书信息增加图书的功能，那么我们需要对来自客户端的数据进行处理，例如，验证和保存到数据库中，此时，我们就可以使用序列化器的反序列化器，接下来，我们就可以参考之前定义学生信息的序列化器那样，定义一个图书的序列化器，当然，不同的是，接下来的序列化器主要用于反序列化器阶段，在unsers子应用，创建serializers.py，代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookInfoSerializer</span><span class="params">(serializers.Serializer)</span>:</span></span><br><span class="line">    <span class="comment"># 这里声明的字段用于进行反序列化器</span></span><br><span class="line">    <span class="comment"># 字段名 = serializers.字段类型(验证选项)</span></span><br><span class="line">    title = serializers.CharField(max_length=<span class="number">20</span>, label=<span class="string">"标题"</span>, help_text=<span class="string">"标题"</span>)</span><br><span class="line">    <span class="comment"># required=True 当前字段必填</span></span><br><span class="line">    pub_date = serializers.DateField(required=<span class="literal">True</span>,label=<span class="string">"发布日期"</span>, help_text=<span class="string">"发布日期"</span>)</span><br><span class="line">    image = serializers.ImageField(max_length=<span class="number">3</span>*<span class="number">1024</span>*<span class="number">1024</span>, label=<span class="string">"图书封面"</span>, help_text=<span class="string">"图书封面"</span>)</span><br><span class="line">    price = serializers.DecimalField(max_digits=<span class="number">8</span>, decimal_places=<span class="number">2</span>, required=<span class="literal">True</span>, label=<span class="string">"价格"</span>, help_text=<span class="string">"价格"</span>)</span><br><span class="line">    read  = serializers.IntegerField(min_value=<span class="number">0</span>, default=<span class="number">0</span>, label=<span class="string">"阅读量"</span>, help_text=<span class="string">"阅读量"</span>)</span><br><span class="line">    comment = serializers.IntegerField(min_value=<span class="number">0</span>, default=<span class="number">0</span>, label=<span class="string">"评论量"</span>, help_text=<span class="string">"评论量"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 关于继承数据库选项</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 验证部分的代码</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 数据库</span></span><br></pre></td></tr></table></figure>

<p>通过构造序列化器对象，并将要反序列化的数据传递给data构造参数，进而进行验证</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"><span class="keyword">from</span> django.views <span class="keyword">import</span> View</span><br><span class="line"><span class="keyword">from</span> django.http.response <span class="keyword">import</span> HttpResponse</span><br><span class="line"><span class="keyword">from</span> .serializers <span class="keyword">import</span> BookInfoSerializer</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookInfoView</span><span class="params">(View)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self,request)</span>:</span></span><br><span class="line">        <span class="string">"""模拟客户端发送过来的数据"""</span></span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">"title"</span>:<span class="string">"西厢记"</span>,</span><br><span class="line">            <span class="string">"pub_date"</span>:<span class="string">"1980-10-10"</span>,</span><br><span class="line">            <span class="string">"price"</span>: <span class="number">19.80</span>,</span><br><span class="line">            <span class="string">"read"</span>: <span class="number">100</span>,</span><br><span class="line">            <span class="string">"comment"</span>: <span class="number">-1</span>,</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 对上面的数据进行反序列化器处理</span></span><br><span class="line">        <span class="comment"># 1. 初始化，填写data属性</span></span><br><span class="line">        serializer = BookInfoSerializer(data=data)</span><br><span class="line">        <span class="comment"># 2. 调用序列化器提供的is_valid方法进行验证</span></span><br><span class="line">        <span class="comment"># raise_exception=True 表示终断程序，直接抛出错误</span></span><br><span class="line">        ret = serializer.is_valid(raise_exception=<span class="literal">True</span>)</span><br><span class="line">        print(ret) <span class="comment"># is_valid的方法值就是验证结果，只会是True/False</span></span><br><span class="line">        <span class="keyword">if</span> ret:</span><br><span class="line">            <span class="comment"># 3.1 验证通过后，可以通过validated_data得到数据</span></span><br><span class="line">            print(<span class="string">"验证成功，ret=%s"</span> % ret)</span><br><span class="line">            print(serializer.validated_data)  <span class="comment"># 验证处理后的数据</span></span><br><span class="line">            <span class="string">"""打印结果：</span></span><br><span class="line"><span class="string">            OrderedDict([('title', '西厢记'), ('pub_date', datetime.date(1980, 10, 10)), ('price', Decimal('19.80')), ('read', 100), ('comment', 15)])</span></span><br><span class="line"><span class="string">            """</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"验证失败，ret=%s"</span> % ret)</span><br><span class="line">            <span class="comment"># 3.1 验证没通过，可以通过</span></span><br><span class="line">            print( serializer.errors )</span><br><span class="line">            <span class="string">"""打印结果：</span></span><br><span class="line"><span class="string">            &#123;'comment': [ErrorDetail(string='Ensure this value is greater than or equal to 0.', code='min_value')]&#125;</span></span><br><span class="line"><span class="string">            """</span></span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">"ok"</span>)</span><br></pre></td></tr></table></figure>

<p>is_valid()方法还可以在验证失败时抛出异常serializers.ValidationError，可以通过传递<strong>raise_exception=True</strong>参数开启，REST framework接收到此异常，会向前端返回HTTP 400 Bad Request响应。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Return a 400 response if the data was invalid.</span></span><br><span class="line">serializer.is_valid(raise_exception=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>

<p>如果觉得这些还不够，需要再补充定义验证行为，可以使用以下三种方法：</p>
<h3 id="1-validate-字段名"><a href="#1-validate-字段名" class="headerlink" title="1) validate_字段名"></a>1) validate_字段名</h3><p>对<code>&lt;field_name&gt;</code>字段进行验证，如</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookInfoSerializer</span><span class="params">(serializers.Serializer)</span>:</span></span><br><span class="line">    <span class="string">"""图书数据序列化器"""</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 单个字段的验证，方法名必须： validate_&lt;字段名&gt;(self,data)    # data 就是当前字段中客户端提交的数据</span></span><br><span class="line">    <span class="comment"># validate_price 会被is_valid调用</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">validate_price</span><span class="params">(self, data)</span>:</span></span><br><span class="line">        <span class="string">""""""</span></span><br><span class="line">        <span class="keyword">if</span> data &lt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">raise</span> serializers.ValidationError(<span class="string">"对不起，价格不能低于0元"</span>)</span><br><span class="line">        <span class="comment"># 验证通过以后，必须要返回验证的结果数据，否则序列化器的validated_data无法得到当前字段的结果</span></span><br><span class="line">        <span class="keyword">return</span> data</span><br></pre></td></tr></table></figure>

<p>把前面的例子的price改为-19.80，运行就可以测试了。</p>
<h3 id="2-validate"><a href="#2-validate" class="headerlink" title="2) validate"></a>2) validate</h3><p>在序列化器中需要同时对多个字段进行比较验证时，可以定义validate方法来验证，如</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookInfoSerializer</span><span class="params">(serializers.Serializer)</span>:</span></span><br><span class="line">    <span class="string">"""图书数据序列化器"""</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 多个字段的验证，必须方法名叫 "validate"</span></span><br><span class="line">    <span class="comment"># data 表示客户端发送过来的所有数据，字典格式</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">validate</span><span class="params">(self, data)</span>:</span></span><br><span class="line">        <span class="comment"># 判断图书的阅读量不能低于评论量</span></span><br><span class="line">        read = data.get(<span class="string">"read"</span>)</span><br><span class="line">        comment = data.get(<span class="string">"comment"</span>)</span><br><span class="line">        <span class="keyword">if</span> read &lt; comment:</span><br><span class="line">            <span class="keyword">raise</span> serializers.ValidationError(<span class="string">"对不起，阅读量不能低于评论量"</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> data</span><br></pre></td></tr></table></figure>

<p>运行之前的例子，把read改为1，comment改为100，访问测试。</p>
<h3 id="3-validators验证器"><a href="#3-validators验证器" class="headerlink" title="3) validators验证器"></a>3) validators验证器</h3><p>验证器类似于验证方法，但是验证方法只属于当前序列化器，如果有多个序列化器共用同样的验证功能，则可以把验证代码分离到序列化器外部，作为一个普通函数，由validators加载到序列化器中使用。</p>
<p>在字段中添加validators选项参数，也可以补充验证行为，如</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以把验证函数进行多次使用，提供不用的字段或者不同的序列化器里面使用</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">about_django</span><span class="params">(data)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">"django"</span> <span class="keyword">in</span> data:</span><br><span class="line">        <span class="keyword">raise</span> serializers.ValidationError(<span class="string">"对不起，图书标题不能出现关键字django"</span>)</span><br><span class="line">    <span class="comment"># 返回验证以后的数据</span></span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookInfoSerializer</span><span class="params">(serializers.Serializer)</span>:</span></span><br><span class="line">    <span class="comment"># 这里声明的字段用于进行反序列化器</span></span><br><span class="line">    <span class="comment"># 字段名 = serializers.字段类型(验证选项)</span></span><br><span class="line">    title = serializers.CharField(max_length=<span class="number">20</span>,validators=[about_django], label=<span class="string">"标题"</span>, help_text=<span class="string">"标题"</span>)</span><br><span class="line">    <span class="comment"># required=True 当前字段必填</span></span><br><span class="line">    pub_date = serializers.DateField(required=<span class="literal">True</span>, label=<span class="string">"发布日期"</span>, help_text=<span class="string">"发布日期"</span>)</span><br><span class="line">    <span class="comment"># max_length 文件的大小</span></span><br><span class="line">    <span class="comment"># allow_null=True 允许传递的image数据为None</span></span><br><span class="line">    image = serializers.ImageField(required=<span class="literal">False</span>, allow_null=<span class="literal">True</span>, max_length=<span class="number">3</span>*<span class="number">1024</span>*<span class="number">1024</span>, label=<span class="string">"图书封面"</span>, help_text=<span class="string">"图书封面"</span>)</span><br><span class="line">    price = serializers.DecimalField(max_digits=<span class="number">8</span>, decimal_places=<span class="number">2</span>, required=<span class="literal">True</span>, label=<span class="string">"价格"</span>, help_text=<span class="string">"价格"</span>)</span><br><span class="line">    <span class="comment"># min_value 数值大小</span></span><br><span class="line">    <span class="comment"># default 设置默认值</span></span><br><span class="line">    read  = serializers.IntegerField(min_value=<span class="number">0</span>, default=<span class="number">0</span>, label=<span class="string">"阅读量"</span>, help_text=<span class="string">"阅读量"</span>)</span><br><span class="line">    comment = serializers.IntegerField(min_value=<span class="number">0</span>, default=<span class="number">0</span>, label=<span class="string">"评论量"</span>, help_text=<span class="string">"评论量"</span>)</span><br></pre></td></tr></table></figure>

<p>把前面的例子修改成title=“西厢记django版本”，然后运行测试</p>
<p>视图代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"><span class="keyword">from</span> django.views <span class="keyword">import</span> View</span><br><span class="line"><span class="keyword">from</span> django.http.response <span class="keyword">import</span> HttpResponse</span><br><span class="line"><span class="keyword">from</span> .serializers <span class="keyword">import</span> BookInfoSerializer</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookInfoView</span><span class="params">(View)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self,request)</span>:</span></span><br><span class="line">        <span class="string">"""模拟客户端发送过来的数据"""</span></span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">"title"</span>:<span class="string">"西厢记django版本"</span>,</span><br><span class="line">            <span class="string">"pub_date"</span>:<span class="string">"1980-10-10"</span>,</span><br><span class="line">            <span class="string">"price"</span>: <span class="number">19.80</span>,</span><br><span class="line">            <span class="string">"read"</span>: <span class="number">10000</span>,</span><br><span class="line">            <span class="string">"comment"</span>: <span class="number">100</span>,</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 对上面的数据进行反序列化器处理</span></span><br><span class="line">        <span class="comment"># 1. 初始化，填写data属性</span></span><br><span class="line">        serializer = BookInfoSerializer(data=data)</span><br><span class="line">        <span class="comment"># 2. 调用序列化器提供的is_valid方法进行验证</span></span><br><span class="line">        <span class="comment"># raise_exception=True 表示终断程序，直接抛出错误</span></span><br><span class="line">        ret = serializer.is_valid(raise_exception=<span class="literal">True</span>)</span><br><span class="line">        print(ret) <span class="comment"># is_valid的方法值就是验证结果，只会是True/False</span></span><br><span class="line">        <span class="keyword">if</span> ret:</span><br><span class="line">            <span class="comment"># 3.1 验证通过后，可以通过validated_data得到数据</span></span><br><span class="line">            print(<span class="string">"验证成功，ret=%s"</span> % ret)</span><br><span class="line">            print(serializer.validated_data)  <span class="comment"># 验证处理后的数据</span></span><br><span class="line">            <span class="string">"""打印结果：</span></span><br><span class="line"><span class="string">            OrderedDict([('title', '西厢记'), ('pub_date', datetime.date(1980, 10, 10)), ('price', Decimal('19.80')), ('read', 100), ('comment', 15)])</span></span><br><span class="line"><span class="string">            """</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"验证失败，ret=%s"</span> % ret)</span><br><span class="line">            <span class="comment"># 3.1 验证没通过，可以通过</span></span><br><span class="line">            print( serializer.errors )</span><br><span class="line">            <span class="string">"""打印结果：</span></span><br><span class="line"><span class="string">            &#123;'comment': [ErrorDetail(string='Ensure this value is greater than or equal to 0.', code='min_value')]&#125;</span></span><br><span class="line"><span class="string">            """</span></span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">"ok"</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">is_valid实际上内部执行了三种不同的验证方式：</span><br><span class="line"><span class="number">1.</span> 先执行了字段内置的验证选项</span><br><span class="line"><span class="number">2.</span> 在执行了validators自定义选项</span><br><span class="line"><span class="number">3.</span> 最后执行了validate自定义验证方法[包含了validate_&lt;字段&gt;, validate]</span><br></pre></td></tr></table></figure>

<h3 id="7-3-2-2-数据保存"><a href="#7-3-2-2-数据保存" class="headerlink" title="7.3.2.2 数据保存"></a>7.3.2.2 数据保存</h3><p>通过序列化器来完成数据的更新或者添加，把视图中对于模型中的操作代码移出视图中，放入到序列化器。</p>
<p>前面的验证数据成功后,我们可以使用序列化器来完成数据反序列化的过程.这个过程可以把数据转成模型类对象.</p>
<p>可以通过实现create()和update()两个方法来实现。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以把验证函数进行多次使用，提供不用的字段或者不同的序列化器里面使用</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">about_django</span><span class="params">(data)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">"django"</span> <span class="keyword">in</span> data:</span><br><span class="line">        <span class="keyword">raise</span> serializers.ValidationError(<span class="string">"对不起，图书标题不能出现关键字django"</span>)</span><br><span class="line">    <span class="comment"># 返回验证以后的数据</span></span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookInfoSerializer</span><span class="params">(serializers.Serializer)</span>:</span></span><br><span class="line">    <span class="comment"># 这里声明的字段用于进行反序列化器</span></span><br><span class="line">    <span class="comment"># 字段名 = serializers.字段类型(验证选项)</span></span><br><span class="line">    title = serializers.CharField(max_length=<span class="number">20</span>,validators=[about_django], label=<span class="string">"标题"</span>, help_text=<span class="string">"标题"</span>)</span><br><span class="line">    <span class="comment"># required=True 当前字段必填</span></span><br><span class="line">    pub_date = serializers.DateField(required=<span class="literal">True</span>, label=<span class="string">"发布日期"</span>, help_text=<span class="string">"发布日期"</span>)</span><br><span class="line">    <span class="comment"># max_length 文件的大小</span></span><br><span class="line">    <span class="comment"># allow_null=True 允许传递的image数据为None</span></span><br><span class="line">    image = serializers.ImageField(required=<span class="literal">False</span>, allow_null=<span class="literal">True</span>, max_length=<span class="number">3</span>*<span class="number">1024</span>*<span class="number">1024</span>, label=<span class="string">"图书封面"</span>, help_text=<span class="string">"图书封面"</span>)</span><br><span class="line">    price = serializers.DecimalField(max_digits=<span class="number">8</span>, decimal_places=<span class="number">2</span>, required=<span class="literal">True</span>, label=<span class="string">"价格"</span>, help_text=<span class="string">"价格"</span>)</span><br><span class="line">    <span class="comment"># min_value 数值大小</span></span><br><span class="line">    <span class="comment"># default 设置默认值</span></span><br><span class="line">    read  = serializers.IntegerField(min_value=<span class="number">0</span>, default=<span class="number">0</span>, label=<span class="string">"阅读量"</span>, help_text=<span class="string">"阅读量"</span>)</span><br><span class="line">    comment = serializers.IntegerField(min_value=<span class="number">0</span>, default=<span class="number">0</span>, label=<span class="string">"评论量"</span>, help_text=<span class="string">"评论量"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 关于继承数据库选项</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 自定义验证的代码</span></span><br><span class="line">    <span class="comment"># 单个字段的验证，方法名必须： validate_&lt;字段名&gt;(self,data)    # data 就是当前字段中客户端提交的数据</span></span><br><span class="line">    <span class="comment"># validate_price 会被is_valid调用</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">validate_price</span><span class="params">(self, data)</span>:</span></span><br><span class="line">        <span class="string">""""""</span></span><br><span class="line">        <span class="keyword">if</span> data &lt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">raise</span> serializers.ValidationError(<span class="string">"对不起，价格不能低于0元"</span>)</span><br><span class="line">        <span class="comment"># 验证通过以后，必须要返回验证的结果数据，否则序列化器的validated_data无法得到当前字段的结果</span></span><br><span class="line">        <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 多个字段的验证，必须方法名叫 "validate"</span></span><br><span class="line">    <span class="comment"># data 表示客户端发送过来的所有数据，字典格式</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">validate</span><span class="params">(self, data)</span>:</span></span><br><span class="line">        <span class="comment"># 判断图书的阅读量不能低于评论量</span></span><br><span class="line">        read = data.get(<span class="string">"read"</span>)</span><br><span class="line">        comment = data.get(<span class="string">"comment"</span>)</span><br><span class="line">        <span class="keyword">if</span> read &lt; comment:</span><br><span class="line">            <span class="keyword">raise</span> serializers.ValidationError(<span class="string">"对不起，阅读量不能低于评论量"</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 数据库操作</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">create</span><span class="params">(self, validated_data)</span>:</span> <span class="comment"># 这里会在调用时，由序列化器补充验证成功以后的数据进来</span></span><br><span class="line">        <span class="string">"""完成添加操作"""</span></span><br><span class="line">        print(validated_data) <span class="comment"># 字典</span></span><br><span class="line">        <span class="comment"># 导入模型</span></span><br><span class="line">        <span class="keyword">from</span> .models <span class="keyword">import</span> BookInfo</span><br><span class="line">        <span class="comment"># 添加数据</span></span><br><span class="line">        book = BookInfo.objects.create(</span><br><span class="line">            title=validated_data.get(<span class="string">"title"</span>),</span><br><span class="line">            price=validated_data.get(<span class="string">"price"</span>),</span><br><span class="line">            pub_date=validated_data.get(<span class="string">"pub_date"</span>),</span><br><span class="line">            read=validated_data.get(<span class="string">"read"</span>),</span><br><span class="line">            comment=validated_data.get(<span class="string">"comment"</span>),</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> book</span><br><span class="line"></span><br><span class="line">    <span class="comment"># instance就是要修改的模型，系统会自动从对象初始化时的instance提取过来</span></span><br><span class="line">    <span class="comment"># validated_data 就是经过验证以后的客户端提交的数据</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update</span><span class="params">(self, instance, validated_data)</span>:</span></span><br><span class="line">        <span class="string">"""更新操作"""</span></span><br><span class="line">        instance.title = validated_data.get(<span class="string">'title'</span>)</span><br><span class="line">        instance.pub_date = validated_data.get(<span class="string">'pub_date'</span>)</span><br><span class="line">        instance.comment = validated_data.get(<span class="string">'comment'</span>)</span><br><span class="line">        instance.price = validated_data.get(<span class="string">'price'</span>)</span><br><span class="line">        instance.read = validated_data.get(<span class="string">'read'</span>)</span><br><span class="line">        instance.save()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> instance</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编写的create和update方法都是对于数据库的操作，所以不能保证百分百的操作成功,那么此时我们应该在数据库操作中进行容错处理</span></span><br><span class="line"><span class="comment"># try...except...，当然自然也需要抛出异常提供给视图,由视图转发给客户端,抛出异常则使用raise serializers.ValidationError</span></span><br></pre></td></tr></table></figure>

<p>视图代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"><span class="keyword">from</span> django.views <span class="keyword">import</span> View</span><br><span class="line"><span class="keyword">from</span> django.http.response <span class="keyword">import</span> HttpResponse</span><br><span class="line"><span class="keyword">from</span> .serializers <span class="keyword">import</span> BookInfoSerializer</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookInfoView</span><span class="params">(View)</span>:</span></span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self,request)</span>:</span></span><br><span class="line">        <span class="string">"""保存数据[更新]"""</span></span><br><span class="line">        <span class="comment"># 客户端提交数据过来</span></span><br><span class="line">        id = <span class="number">2</span></span><br><span class="line">        data = &#123; <span class="comment"># 模拟客户端发送过来的数据</span></span><br><span class="line">            <span class="string">"title"</span>: <span class="string">"东游记"</span>,</span><br><span class="line">            <span class="string">"pub_date"</span>: <span class="string">"1998-10-01"</span>,</span><br><span class="line">            <span class="string">"price"</span>: <span class="number">19.98</span>,</span><br><span class="line">            <span class="string">"read"</span>: <span class="number">330</span>,</span><br><span class="line">            <span class="string">"comment"</span>: <span class="number">100</span>,</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">from</span> .models <span class="keyword">import</span> BookInfo</span><br><span class="line">        book = BookInfo.objects.get(pk=id)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 使用序列化器验证数据[如果是更新操作，需要传入2个参数，分别是instance和data]</span></span><br><span class="line">        serializer = BookInfoSerializer(instance=book,data=data)</span><br><span class="line">        serializer.is_valid()</span><br><span class="line">        book = serializer.save() <span class="comment"># 此时，我们必须在序列化器中预先声明update方法</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        serailzier对象调用的save方法是什么？怎么做到自动调用update和create?</span></span><br><span class="line"><span class="string">        1. 这里的save不是数据库ORM模型对象的save，是BaseSerializer定义的。</span></span><br><span class="line"><span class="string">        2. save方法中根据实例化serializer时是否传入instance参数来判断执行update还是create的</span></span><br><span class="line"><span class="string">           当传入instance时，则instance.save调用的就是update方法</span></span><br><span class="line"><span class="string">           没有传入instance，则instance.save调用的就是create方法</span></span><br><span class="line"><span class="string">        3. serializer.save使用前提是必须在序列化器中声明create或者update方法，否则报错！！！</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        print(book)</span><br><span class="line">        <span class="string">"""打印结果：</span></span><br><span class="line"><span class="string">        BookInfo object (2)</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">"ok"</span>)</span><br></pre></td></tr></table></figure>

<p>在序列化器实现了create和update两个方法后，在反序列化数据的时候，就可以通过save()方法返回一个数据对象实例了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">book = serializer.save()</span><br></pre></td></tr></table></figure>

<p>如果创建序列化器对象的时候，没有传递instance实例，则调用save()方法的时候，create()被调用，相反，如果传递了instance实例，则调用save()方法的时候，update()被调用。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">serailzier对象调用的save方法是什么？怎么做到自动调用update和create?</span><br><span class="line"><span class="number">1.</span> 这里的save不是数据库ORM模型对象的save，是BaseSerializer定义的。</span><br><span class="line"><span class="number">2.</span> save方法中根据实例化serializer时是否传入instance参数来判断执行update还是create的</span><br><span class="line">当传入instance时，则instance.save调用的就是update方法</span><br><span class="line">没有传入instance，则instance.save调用的就是create方法</span><br><span class="line"><span class="number">3.</span> serializer.save使用前提是必须在序列化器中声明create或者update方法，否则报错！！！</span><br></pre></td></tr></table></figure>

<p>BaseSerializer中定义的save方法源码：</p>
<p><img src="/images/1582086563954.png" alt=""></p>
<h3 id="7-3-2-3-附加参数说明"><a href="#7-3-2-3-附加参数说明" class="headerlink" title="7.3.2.3 附加参数说明"></a>7.3.2.3 附加参数说明</h3><p>1） 在对序列化器进行save()保存时，可以额外传递数据，这些数据可以在create()和update()中的validated_data参数获取到</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 可以传递任意参数到数据保存方法中</span></span><br><span class="line"><span class="comment"># 例如：request.user 是django中记录当前登录用户的模型对象</span></span><br><span class="line">serializer.save(owner=request.user)</span><br></pre></td></tr></table></figure>

<p>2）默认序列化器必须传递所有必填字段[required=True]，否则会抛出验证异常。但是我们可以使用partial参数来允许部分字段更新</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Update `BookInfo` with partial data</span></span><br><span class="line"><span class="comment"># partial=True 设置序列化器只是针对客户端提交的字段进行验证，没有提交的字段，即便有验证选项或方法也不进行验证。</span></span><br><span class="line">serializer = BookInfoSerializer(book, data=data, partial=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>

<h3 id="7-3-3-模型类序列化器"><a href="#7-3-3-模型类序列化器" class="headerlink" title="7.3.3 模型类序列化器"></a>7.3.3 模型类序列化器</h3><p>如果我们想要使用序列化器对应的是Django的模型类，DRF为我们提供了ModelSerializer模型类序列化器来帮助我们快速创建一个Serializer类。</p>
<p>ModelSerializer与常规的Serializer相同，但提供了：</p>
<ul>
<li>基于模型类自动生成一系列序列化器字段</li>
<li>基于模型类自动为Serializer生成validators，比如unique_together</li>
<li>包含默认的create()和update()的实现</li>
</ul>
<h3 id="7-3-3-1-定义"><a href="#7-3-3-1-定义" class="headerlink" title="7.3.3.1 定义"></a>7.3.3.1 定义</h3><p>比如我们创建一个BookInfoSerializer</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookInfoSerializer</span><span class="params">(serializers.ModelSerializer)</span>:</span></span><br><span class="line">    <span class="string">"""图书数据序列化器"""</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = BookInfo</span><br><span class="line">        fields = <span class="string">'__all__'</span></span><br></pre></td></tr></table></figure>

<ul>
<li>model 指明参照哪个模型类</li>
<li>fields 指明为模型类的哪些字段生成</li>
</ul>
<p>我们可以在python manage.py shell中查看自动生成的BookInfoSerializer的具体实现</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> booktest.serializers <span class="keyword">import</span> BookInfoSerializer</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>serializer = BookInfoSerializer()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>serializer</span><br><span class="line">BookInfoSerializer():</span><br><span class="line">    id = IntegerField(label=<span class="string">'ID'</span>, read_only=<span class="literal">True</span>)</span><br><span class="line">    btitle = CharField(label=<span class="string">'名称'</span>, max_length=<span class="number">20</span>)</span><br><span class="line">    bpub_date = DateField(allow_null=<span class="literal">True</span>, label=<span class="string">'发布日期'</span>, required=<span class="literal">False</span>)</span><br><span class="line">    bread = IntegerField(label=<span class="string">'阅读量'</span>, max_value=<span class="number">2147483647</span>, min_value=<span class="number">-2147483648</span>, required=<span class="literal">False</span>)</span><br><span class="line">    bcomment = IntegerField(label=<span class="string">'评论量'</span>, max_value=<span class="number">2147483647</span>, min_value=<span class="number">-2147483648</span>, required=<span class="literal">False</span>)</span><br><span class="line">    image = ImageField(allow_null=<span class="literal">True</span>, label=<span class="string">'图片'</span>, max_length=<span class="number">100</span>, required=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure>

<h3 id="7-3-3-2-指定字段"><a href="#7-3-3-2-指定字段" class="headerlink" title="7.3.3.2 指定字段"></a>7.3.3.2 指定字段</h3><ul>
<li>使用<strong>fields</strong>来明确字段，<code>__all__</code>表名包含所有字段，也可以写明具体哪些字段，如</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookInfoSerializer</span><span class="params">(serializers.ModelSerializer)</span>:</span></span><br><span class="line">    <span class="string">"""图书数据序列化器"""</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = BookInfo</span><br><span class="line">        fields = (<span class="string">'id'</span>, <span class="string">'btitle'</span>, <span class="string">'bpub_date'</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>使用<strong>exclude</strong>可以明确排除掉哪些字段</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookInfoSerializer</span><span class="params">(serializers.ModelSerializer)</span>:</span></span><br><span class="line">    <span class="string">"""图书数据序列化器"""</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = BookInfo</span><br><span class="line">        exclude = (<span class="string">'image'</span>,)</span><br></pre></td></tr></table></figure>

<ul>
<li>显示指明字段，如：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HeroInfoSerializer</span><span class="params">(serializers.ModelSerializer)</span>:</span></span><br><span class="line">    hbook = BookInfoSerializer()</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = HeroInfo</span><br><span class="line">        fields = (<span class="string">'id'</span>, <span class="string">'hname'</span>, <span class="string">'hgender'</span>, <span class="string">'hcomment'</span>, <span class="string">'hbook'</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>指明只读字段</li>
</ul>
<p>可以通过<strong>read_only_fields</strong>指明只读字段，即仅用于序列化输出的字段</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookInfoSerializer</span><span class="params">(serializers.ModelSerializer)</span>:</span></span><br><span class="line">    <span class="string">"""图书数据序列化器"""</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = BookInfo</span><br><span class="line">        fields = (<span class="string">'id'</span>, <span class="string">'title'</span>, <span class="string">'pub_date'</span>， <span class="string">'read'</span>, <span class="string">'comment'</span>)</span><br><span class="line">        read_only_fields = (<span class="string">'id'</span>, <span class="string">'read'</span>, <span class="string">'comment'</span>)</span><br></pre></td></tr></table></figure>

<h3 id="7-3-3-3-添加额外参数"><a href="#7-3-3-3-添加额外参数" class="headerlink" title="7.3.3.3 添加额外参数"></a>7.3.3.3 添加额外参数</h3><p>我们可以使用<strong>extra_kwargs</strong>参数为ModelSerializer添加或修改原有的选项参数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookInfoSerializer</span><span class="params">(serializers.ModelSerializer)</span>:</span></span><br><span class="line">    <span class="string">"""图书数据序列化器"""</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = BookInfo</span><br><span class="line">        fields = (<span class="string">'id'</span>, <span class="string">'btitle'</span>, <span class="string">'bpub_date'</span>, <span class="string">'bread'</span>, <span class="string">'bcomment'</span>)</span><br><span class="line">        extra_kwargs = &#123;</span><br><span class="line">            <span class="string">'bread'</span>: &#123;<span class="string">'min_value'</span>: <span class="number">0</span>, <span class="string">'required'</span>: <span class="literal">True</span>&#125;,</span><br><span class="line">            <span class="string">'bcomment'</span>: &#123;<span class="string">'min_value'</span>: <span class="number">0</span>, <span class="string">'required'</span>: <span class="literal">True</span>&#125;,</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># BookInfoSerializer():</span></span><br><span class="line"><span class="comment">#    id = IntegerField(label='ID', read_only=True)</span></span><br><span class="line"><span class="comment">#    btitle = CharField(label='名称', max_length=20)</span></span><br><span class="line"><span class="comment">#    bpub_date = DateField(allow_null=True, label='发布日期', required=False)</span></span><br><span class="line"><span class="comment">#    bread = IntegerField(label='阅读量', max_value=2147483647, min_value=0, required=True)</span></span><br><span class="line"><span class="comment">#    bcomment = IntegerField(label='评论量', max_value=2147483647, min_value=0, required=True)</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>Django Rest_Framework</tag>
      </tags>
  </entry>
  <entry>
    <title>[「直击面试」搞定计算机网络]</title>
    <url>/2020/06/22/%E6%90%9E%E5%AE%9A%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</url>
    <content><![CDATA[<blockquote>
<p>在浏览器中输入一个 URL 至页面呈现，网络上都发生了什么事？</p>
<p>能说说 ISO 七层模型和 TCP/IP 四层模型吗？</p>
<p>TCP/IP 与 HTTP 有什么关系吗？</p>
<p>TCP协议与UDP协议的区别？</p>
<p>请详细介绍一下 TCP 的三次握手机制，为什么要三次握手？挥手却又是四次呢？</p>
<p>详细讲一下TCP的滑动窗口？知道流量控制和拥塞控制吗？</p>
<p>说一下对称加密与非对称加密？</p>
<p>状态码 206 是什么意思？</p>
<p>你们用的 https 是吧，https 工作原理是什么？</p>
<p>……</p>
</blockquote>
<blockquote>
<p>成长手册，<strong>GitHub</strong> <a href="https://github.com/rogerXS80/roger" target="_blank" rel="noopener">Lupinus</a> ，N线互联网开发必备技能兵器谱</p>
</blockquote>
<h2 id="一、计算机网络"><a href="#一、计算机网络" class="headerlink" title="一、计算机网络"></a>一、计算机网络</h2><h3 id="通信协议"><a href="#通信协议" class="headerlink" title="通信协议"></a>通信协议</h3><p>通信协议（communications protocol）是指双方实体完成通信或服务所必须遵循的规则和约定。通过通信信道和设备互连起来的多个不同地理位置的数据通信系统，要使其能协同工作实现信息交换和资源共享，它们之间必须具有共同的语言。交流什么、怎样交流及何时交流，都必须遵循某种互相都能接受的规则。这个规则就是通信协议。</p>
<h3 id="网络模型"><a href="#网络模型" class="headerlink" title="网络模型"></a>网络模型</h3><p>随着技术的发展，计算机的应用越来越广泛，计算机之间的通信开始了百花齐放的状态，每个具有独立计算服务体系的信息技术公司都会建立自己的计算机通信规则，而这种情况会导致异构计算机之间无法通信，极大的阻碍了网络通信的发展，至此为了解决这个问题，国际标准化组织（ISO）制定了OSI模型，该模型定义了不同计算机互联的标准，OSI模型把网络通信的工作分为7层，分别是<strong>物理层、数据链路层、网络层、传输层、会话层、表示层和应用层</strong>。</p>
<p>这七层模型是设计层面的概念，每一层都有固定要完成的职责和功能，分层的好处在于清晰和功能独立性，但分层过多会使层次变的更加复杂，虽然不需要实现本层的功能，但是也需要构造本层的上下文，空耗系统资源，所以在落地实施网络通信模型的时候将这七层模型简化合并为四层模型分别是<strong>应用层、传输层、网络层、网络接口层</strong>（各层之间的模型、协议统称为：<strong>TCP/IP协议簇</strong>）。</p>
<p><img src="https://gitee.com/wjxyzs/img/raw/master/img/17180bed7719799d.jpg" alt=""></p>
<p>从上图可以看到，TCP/IP模型合并了OSI模型的应用层、表示层和会话层，将OSI模型的数据链路层和物理层合并为网络访问层。</p>
<p>上图还列出了各层模型对应TCP/IP协议栈中的协议以及各层协议之间的关系。比如DNS协议是建立在TCP和UDP协议的基础上，FTP、HTTP、TELNET协议建立在TCP协议的基础上，NTP、TFTP、SNMP建立在UDP协议的基础上，而TCP、UDP协议又建立在IP协议的基础上，以此类推….</p>
<table>
<thead>
<tr>
<th align="left">OSI中的层</th>
<th>功能</th>
<th align="left">TCP/IP协议族</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><strong>应用层</strong></td>
<td>文件传输，电子邮件，文件服务，虚拟终端</td>
<td align="left">TFTP，HTTP，SNMP，FTP，SMTP，DNS，RIP，Telnet</td>
</tr>
<tr>
<td align="left"><strong>表示层</strong></td>
<td>数据格式化，代码转换，数据加密</td>
<td align="left">无</td>
</tr>
<tr>
<td align="left"><strong>会话层</strong></td>
<td>控制应用程序之间会话能力；如不同软件数据分发给不同软件</td>
<td align="left">ASAP、TLS、SSH、ISO 8327 / CCITT X.225、RPC、NetBIOS、ASP、Winsock、BSD sockets</td>
</tr>
<tr>
<td align="left"><strong>传输层</strong></td>
<td>端到端传输数据的基本功能</td>
<td align="left">TCP、UDP</td>
</tr>
<tr>
<td align="left"><strong>网络层</strong></td>
<td>定义IP编址，定义路由功能；如不同设备的数据转发</td>
<td align="left">IP，ICMP，RIP，OSPF，BGP，IGMP</td>
</tr>
<tr>
<td align="left"><strong>数据链路层</strong></td>
<td>定义数据的基本格式，如何传输，如何标识</td>
<td align="left">SLIP，CSLIP，PPP，ARP，RARP，MTU</td>
</tr>
<tr>
<td align="left"><strong>物理层</strong></td>
<td>以<strong>二进制</strong>数据形式在物理媒体上传输数据</td>
<td align="left">ISO2110，IEEE802</td>
</tr>
</tbody></table>
<p>当我们某一个网站上不去的时候。通常会ping一下这个网站</p>
<p><code>ping</code> 可以说是ICMP的最著名的应用，是TCP/IP协议的一部分。利用<code>ping</code>命令可以检查网络是否连通，可以很好地帮助我们分析和判定网络故障。</p>
<h2 id="二、TCP-IP"><a href="#二、TCP-IP" class="headerlink" title="二、TCP/IP"></a>二、TCP/IP</h2><p>数据在网络中传输最终一定是通过物理介质传输。物理介质就是把电脑连接起来的物理手段，常见的有光纤、双绞线，以及无线电波，它决定了电信号(0和1)的传输方式，物理介质的不同决定了电信号的传输带宽、速率、传输距离以及抗干扰性等等。网络数据传输就像快递邮寄，数据就是快件。只有路打通了，你的”快递”才能送到，因此物理介质是网络通信的基石。</p>
<p>寄快递首先得称重、确认体积(确认数据大小)，贵重物品还得层层包裹填充物确保安全，封装，然后填写发件地址(源主机地址)和收件地址(目标主机地址)，确认快递方式。对于偏远地区，快递不能直达，还需要中途转发。网络通信也是一样的道理，只不过把这些步骤都规定成了各种协议。</p>
<p>TCP/IP的模型的每一层都需要下一层所提供的协议来完成自己的目的。我们来看下数据是怎么通过TCP/IP协议模型从一台主机发送到另一台主机的。</p>
<p><img src="https://gitee.com/wjxyzs/img/raw/master/img/17180bed76faefb0.jpg" alt=""></p>
<p>当用户通过HTTP协议发起一个请求，应用层、传输层、网络互联层和网络访问层的相关协议依次对该请求进行包装并携带对应的首部，最终在网络访问层生成以太网数据包，以太网数据包通过物理介质传输给对方主机，对方接收到数据包以后，然后再一层一层采用对应的协议进行拆包，最后把应用层数据交给应用程序处理。</p>
<h3 id="TCP-IP-与-HTTP"><a href="#TCP-IP-与-HTTP" class="headerlink" title="TCP/IP 与 HTTP"></a>TCP/IP 与 HTTP</h3><p>TCP/IP（Transmission Control Protocol/Internet Protocol，传输控制协议/网际协议）是指能够在多个不同网络间实现信息传输的协议簇。TCP/IP 协议不仅仅指的是 TCP 和 IP 两个协议，而是指一个由FTP、SMTP、TCP、UDP、IP等协议构成的协议簇， 只是因为在TCP/IP协议中TCP协议和IP协议最具代表性，所以被称为TCP/IP协议。</p>
<p><strong>而HTTP是应用层协议，主要解决如何包装数据。</strong></p>
<p>“IP”代表网际协议，TCP 和 UDP 使用该协议从一个网络传送数据包到另一个网络。把<strong>IP想像成一种高速公路</strong>，它允许其它协议在上面行驶并找到到其它电脑的出口。<strong>TCP和UDP是高速公路上的“卡车”，它们携带的货物就是像HTTP</strong>，文件传输协议FTP这样的协议等。</p>
<h3 id="TCP-与-UDP"><a href="#TCP-与-UDP" class="headerlink" title="TCP 与 UDP"></a>TCP 与 UDP</h3><p>都属于传输层协议。</p>
<p>TCP（Transmission Control Protocol，传输控制协议）是面向连接的协议，也就是说，在收发数据前，必须和对方建立可靠的连接。一个TCP连接必须有三次握手、四次挥手。</p>
<p>UDP（User Data Protocol，用户数据报协议）是一个非连接的协议，传输数据之前源端和终端不建立连接， 当它想传送时就简单地去抓取来自应用程序的数据，并尽可能快地把它扔到网络上</p>
<table>
<thead>
<tr>
<th align="left"></th>
<th align="left">TCP</th>
<th align="left">UDP</th>
</tr>
</thead>
<tbody><tr>
<td align="left">连接性</td>
<td align="left">面向连接</td>
<td align="left">面向非连接</td>
</tr>
<tr>
<td align="left">传输可靠性</td>
<td align="left">可靠</td>
<td align="left">不可靠</td>
</tr>
<tr>
<td align="left">报文</td>
<td align="left">面向字节流</td>
<td align="left">面向报文</td>
</tr>
<tr>
<td align="left">效率</td>
<td align="left">传输效率低</td>
<td align="left">传输效率高</td>
</tr>
<tr>
<td align="left">流量控制</td>
<td align="left">滑动窗口</td>
<td align="left">无</td>
</tr>
<tr>
<td align="left">拥塞控制</td>
<td align="left">慢开始、拥塞避免、快重传、快恢复</td>
<td align="left">无</td>
</tr>
<tr>
<td align="left">传输速度</td>
<td align="left">慢</td>
<td align="left">快</td>
</tr>
<tr>
<td align="left">应用场合</td>
<td align="left">对效率要求低，对准确性要求高或要求有连接的场景</td>
<td align="left">对效率要求高，对准确性要求低</td>
</tr>
</tbody></table>
<p>TCP和UDP协议的一些应用</p>
<p><img src="https://gitee.com/wjxyzs/img/raw/master/img/17180bed76fa926f.jpg" alt=""></p>
<h3 id="TCP连接的建立与终止"><a href="#TCP连接的建立与终止" class="headerlink" title="TCP连接的建立与终止"></a>TCP连接的建立与终止</h3><p>TCP虽然是面向字节流的，但TCP传送的数据单元却是报文段。一个TCP报文段分为首部和数据两部分，而TCP的全部功能体现在它首部中的各字段的作用。</p>
<p>TCP报文段首部的前20个字节是固定的（下图），后面有4n字节是根据需要而增加的选项（n是整数）。因此TCP首部的最小长度是20字节。</p>
<p><img src="https://gitee.com/wjxyzs/img/raw/master/img/17180bed764405fc.jpg" alt=""></p>
<h4 id="TCP报文首部"><a href="#TCP报文首部" class="headerlink" title="TCP报文首部"></a>TCP报文首部</h4><ul>
<li><p>源端口和目的端口，各占2个字节，分别写入源端口和目的端口；</p>
</li>
<li><p><strong>序列号</strong>（Sequence number），占4字节。序号范围是【0，2^32 - 1】，共2^32个序号。序号增加到 2^32-1后，下一个序号就又回到 0。TCP是面向字节流的。在一个TCP连接中传送的字节流中的每一个字节都按顺序编号。整个要传送的字节流的起始序号必须在连接建立时设置。首部中的序号字段值则是指的是本报文段所发送的数据的第一个字节的序号。例如，一报文段的序号是301，而接待的数据共有100字节。这就表明：本报文段的数据的第一个字节的序号是301，最后一个字节的序号是400。显然，下一个报文段（如果还有的话）的数据序号应当从401开始，即下一个报文段的序号字段值应为401。这个字段的序号也叫“报文段序号”;</p>
</li>
<li><p><strong>确认号</strong>（Acknowledge number），占4个字节，是期望收到对方下一个报文的第一个数据字节的序号。例如，B收到了A发送过来的报文，其序列号字段是501，而数据长度是200字节，这表明B正确的收到了A发送的到序号700为止的数据。因此，B期望收到A的下一个数据序号是701，于是B在发送给A的确认报文段中把确认号置为701；</p>
</li>
<li><p>数据偏移，占4位，它指出TCP报文段的数据起始处距离TCP报文段的起始处有多远。</p>
</li>
<li><p>保留，占6位，保留为今后使用，但目前应置为0；</p>
</li>
<li><p>紧急URG（URGent），当URG=1，表明紧急指针字段有效。告诉系统此报文段中有紧急数据；</p>
</li>
<li><p>确认ACK（ACKnowledgment），仅当ACK=1时，确认号字段才有效。<strong>TCP规定，在连接建立后所有报文的传输都必须把ACK置1</strong>；</p>
</li>
<li><p>推送PSH（PuSH） ，当两个应用进程进行交互式通信时，有时在一端的应用进程希望在键入一个命令后立即就能收到对方的响应，这时候就将PSH=1；</p>
</li>
<li><p>复位RST（ReSeT），当RST=1，表明TCP连接中出现严重差错，必须释放连接，然后再重新建立连接；</p>
</li>
<li><p>同步SYN（SYNchronization），在连接建立时用来同步序号。<strong>当SYN=1，ACK=0，表明是连接请求报文，若同意连接，则响应报文中应该使SYN=1，ACK=1</strong>；</p>
</li>
<li><p>终止FIN（FINis），用来释放连接。</p>
<p>当FIN=1，表明此报文的发送方的数据已经发送完毕，并且要求释放</p>
<p>；</p>
<ul>
<li>窗口，占2字节，指的是通知接收方，发送本报文你需要有多大的空间来接受；</li>
</ul>
</li>
<li><p>检验和，占2字节，校验首部和数据这两部分；</p>
</li>
<li><p>紧急指针，占2字节，指出本报文段中的紧急数据的字节数；</p>
</li>
<li><p>选项，长度可变，定义一些其他的可选的参数</p>
</li>
</ul>
<p>TCP是一种面向连接的单播协议，在发送数据前，通信双方必须在彼此间建立一条连接。所谓的“连接”，其实是客户端和服务器的内存里保存的一份关于对方的信息，如ip地址、端口号等。</p>
<h4 id="TCP-三次握手"><a href="#TCP-三次握手" class="headerlink" title="TCP 三次握手"></a>TCP 三次握手</h4><p>所谓三次握手(Three-way Handshake)，是指建立一个 TCP 连接时，需要客户端和服务器总共发送3个包。</p>
<p>三次握手的目的是连接服务器指定端口，建立 TCP 连接，并同步连接双方的序列号和确认号，交换 TCP 窗口大小信息。</p>
<p><img src="https://user-gold-cdn.xitu.io/2020/4/16/17180bed7721f0c0?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"></p>
<ul>
<li><p><strong>第一次握手</strong>(SYN=1, seq=x)</p>
<p>建立连接。客户端发送连接请求报文段，这是报文首部中的同步位SYN=1，同时选择一个初始序列号 seq=x ，此时，客户端进程进入了 SYN-SENT（同步已发送状态）状态。TCP规定，SYN报文段（SYN=1的报文段）不能携带数据，但需要消耗掉一个序号；</p>
</li>
<li><p><strong>第二次握手</strong>(SYN=1, ACK=1, seq=y, ACKnum=x+1)</p>
<p>服务器收到客户端的SYN报文段，如果同意连接，则发出确认报文。确认报文中应该 ACK=1，SYN=1，确认号ACKnum=x+1，同时，自己还要发送SYN请求信息，SYN=1，为自己初始化一个序列号 seq=y，服务器端将上述所有信息放到一个报文段（即SYN+ACK报文段）中，一并发送给客户端，此时，TCP服务器进程进入了SYN-RCVD（同步收到）状态。这个报文也不能携带数据，但是同样要消耗一个序号</p>
</li>
<li><p><strong>第三次握手</strong>(ACK=1，ACKnum=y+1)</p>
<p>客户端收到服务器的SYN+ACK报文段，再次发送确认包(ACK)，<strong>SYN 标志位为0</strong>，ACK 标志位为1，确认号 ACKnum = y+1，这个报文段发送完毕以后，客户端和服务器端都进入ESTABLISHED（已建立连接）状态，完成TCP三次握手。</p>
</li>
</ul>
<blockquote>
<p>为什么需要三次握手呢？两次不行吗？</p>
</blockquote>
<p>为了防止已失效的连接请求报文段突然又传送到了服务端，因而产生错误。</p>
<p>具体例子：“已失效的连接请求报文段”的产生在这样一种情况下：client发出的第一个连接请求报文段并没有丢失，而是在某个网络结点长时间的滞留了，以致延误到连接释放以后的某个时间才到达server。本来这是一个早已失效的报文段。但server收到此失效的连接请求报文段后，就误认为是client再次发出的一个新的连接请求。于是就向client发出确认报文段，同意建立连接。假设不采用“三次握手”，那么只要server发出确认，新的连接就建立了。由于现在client并没有发出建立连接的请求，因此不会理睬server的确认，也不会向server发送数据。但server却以为新的运输连接已经建立，并一直等待client发来数据。这样，server的很多资源就白白浪费掉了。采用“三次握手”的办法可以防止上述现象发生。例如刚才那种情况，client不会向server的确认发出确认。server由于收不到确认，就知道client并没有要求建立连接。”</p>
<h4 id="TCP-四次挥手"><a href="#TCP-四次挥手" class="headerlink" title="TCP 四次挥手"></a>TCP 四次挥手</h4><p>TCP 的连接的拆除需要发送四个包，因此称为四次挥手(Four-way handshake)，也叫做改进的三次握手。<strong>客户端或服务器均可主动发起挥手动作</strong>。</p>
<p><img src="https://gitee.com/wjxyzs/img/raw/master/img/17180bed772ce689.jpg" alt=""></p>
<ul>
<li><p>第一次挥手(FIN=1，seq=x)red</p>
<p>主机1（可以使客户端，也可以是服务器端），设置seq=x，向主机2发送一个FIN报文段；此时，主机1进入<font color=red size=4><code>FIN_WAIT_1</code></font>状态；这表示主机1没有数据要发送给主机2了；</p>
</li>
<li><p>第二次挥手(ACK=1，ACKnum=x+1)</p>
<p>主机2收到了主机1发送的FIN报文段，向主机1回一个ACK报文段，Acknnum=x+1，主机1进入<font color=red size=4><code>FIN_WAIT_2</code></font>状态；主机2告诉主机1，我“同意”你的关闭请求；</p>
</li>
<li><p>第三次挥手(FIN=1，seq=y)</p>
<p>主机2向主机1发送FIN报文段，请求关闭连接，同时主机2进入<code>LAST_ACK</code> 状态</p>
</li>
<li><p>第四次挥手(ACK=1，ACKnum=y+1)</p>
<p>主机1收到主机2发送的FIN报文段，向主机2发送ACK报文段，然后主机1进入<font color=red size=4><code>TIME_WAIT</code></font>状态；主机2收到主机1的ACK报文段以后，就关闭连接；此时，<strong>主机1等待2MSL后依然没有收到回复</strong>，则证明Server端已正常关闭，那好，主机1也可以关闭连接了，进入 <font color=red size=4><code>CLOSED</code></font> 状态。</p>
<p>主机 1 等待了某个固定时间（两个最大段生命周期，2MSL，2 Maximum Segment Lifetime）之后，没有收到服务器端的 ACK ，认为服务器端已经正常关闭连接，于是自己也关闭连接，进入 <font color=red size=4><code>CLOSED</code></font>  状态。</p>
</li>
</ul>
<blockquote>
<p>为什么连接的时候是三次握手，关闭的时候却是四次握手？</p>
</blockquote>
<p>因为当Server端收到Client端的SYN连接请求报文后，可以直接发送SYN+ACK报文。其中ACK报文是用来应答的，SYN报文是用来同步的。但是关闭连接时，当Server端收到FIN报文时，很可能并不会立即关闭SOCKET，所以只能先回复一个ACK报文，告诉Client端，”你发的FIN报文我收到了”。只有等到我Server端所有的报文都发送完了，我才能发送FIN报文，因此不能一起发送。故需要四步握手。</p>
<p>由于 TCP 协议是全双工的，也就是说客户端和服务端都可以发起断开连接。两边各发起一次断开连接的申请，加上各自的两次确认，看起来就像执行了四次挥手。</p>
<blockquote>
<p><strong>为什么TIME_WAIT状态需要经过2MSL(最大报文段生存时间)才能返回到CLOSE状态？</strong></p>
</blockquote>
<p>虽然按道理，四个报文都发送完毕，我们可以直接进入CLOSE状态了，但是我们必须假象网络是不可靠的，有可以最后一个ACK丢失。所以TIME_WAIT状态就是用来重发可能丢失的ACK报文。</p>
<p>还有一个原因，防止类似与“三次握手”中提到了的“已经失效的连接请求报文段”出现在本连接中。客户端发送完最后一个确认报文后，在这个2MSL时间中，就可以使本连接持续的时间内所产生的所有报文段都从网络中消失。这样新的连接中不会出现旧连接的请求报文。</p>
<h3 id="TCP协议如何来保证传输的可靠性"><a href="#TCP协议如何来保证传输的可靠性" class="headerlink" title="TCP协议如何来保证传输的可靠性"></a>TCP协议如何来保证传输的可靠性</h3><p>对于可靠性，TCP通过以下方式进行保证：</p>
<ul>
<li>数据包校验：目的是检测数据在传输过程中的任何变化，若校验出包有错，则丢弃报文段并且不给出响应，这时TCP发送数据端超时后会重发数据；</li>
<li>对失序数据包重排序：既然TCP报文段作为IP数据报来传输，而IP数据报的到达可能会失序，因此TCP报文段的到达也可能会失序。TCP将对失序数据进行重新排序，然后才交给应用层；</li>
<li>丢弃重复数据：对于重复数据，能够丢弃重复数据；</li>
<li>应答机制：当TCP收到发自TCP连接另一端的数据，它将发送一个确认。这个确认不是立即发送，通常将推迟几分之一秒；</li>
<li>超时重发：当TCP发出一个段后，它启动一个定时器，等待目的端确认收到这个报文段。如果不能及时收到一个确认，将重发这个报文段；</li>
<li>流量控制：TCP连接的每一方都有固定大小的缓冲空间。TCP的接收端只允许另一端发送接收端缓冲区所能接纳的数据，这可以防止较快主机致使较慢主机的缓冲区溢出，这就是流量控制。TCP使用的流量控制协议是可变大小的滑动窗口协议。</li>
</ul>
<blockquote>
<p>详细讲一下TCP的滑动窗口</p>
</blockquote>
<h3 id="滑动窗口机制"><a href="#滑动窗口机制" class="headerlink" title="滑动窗口机制"></a>滑动窗口机制</h3><p>如果发送方把数据发送得过快，接收方可能会来不及接收，这就会造成数据的丢失。所谓<strong>流量控制</strong>就是让发送方的发送速率不要太快，要让接收方来得及接收。</p>
<p>利用<strong>滑动窗口机制</strong>可以很方便地在TCP连接上实现对发送方的流量控制。</p>
<p><img src="https://gitee.com/wjxyzs/img/raw/master/img/17180bed9bb2cb0c.jpg" alt=""></p>
<p>从上面的图可以看到滑动窗口左边的是已发送并且被确认的分组，滑动窗口右边是还没有轮到的分组。滑动窗口里面也分为两块，一块是已经发送但是未被确认的分组，另一块是窗口内等待发送的分组。随着已发送的分组不断被确认，窗口内等待发送的分组也会不断被发送。整个窗口就会往右移动，让还没轮到的分组进入窗口内。</p>
<p>可以看到滑动窗口起到了一个限流的作用，也就是说当前滑动窗口的大小决定了当前 TCP 发送包的速率，而滑动窗口的大小取决于拥塞控制窗口和流量控制窗口的两者间的最小值。</p>
<h4 id="流量控制"><a href="#流量控制" class="headerlink" title="流量控制"></a>流量控制</h4><p>TCP 是全双工的，客户端和服务器均可作为发送方或接收方，我们现在假设一个发送方向接收方发送数据的场景来讲解流量控制。首先我们的接收方有一块接收缓存，当数据来到时会先把数据放到缓存中，上层应用等缓存中有数据时就会到缓存中取数据。假如发送方没有限制地不断地向接收方发送数据，接收方的应用程序又没有及时把接收缓存中的数据读走，就会出现缓存溢出，数据丢失的现象，为了解决这个问题，我们引入流量控制窗口。</p>
<p>假设应用程序最后读走的数据序号是 lastByteRead，接收缓存中接收到的最后一个数据序号是 lastByteRcv，接收缓存的大小为 RcvSize，那么必须要满足 lastByteRcv - lastByteRead &lt;= RcvSize 才能保证接收缓存不会溢出，所以我们定义流量窗口为接收缓存剩余的空间，也就是Rcv = RcvSize - (lastByteRcv - lastByteRead)。只要接收方在响应 ACK 的时候把这个窗口的值带给发送方，发送方就能知道接收方的接收缓存还有多大的空间，进而设置滑动窗口的大小。</p>
<h4 id="拥塞控制"><a href="#拥塞控制" class="headerlink" title="拥塞控制"></a>拥塞控制</h4><p>拥塞控制是指发送方先设置一个小的窗口值作为发送速率，当成功发包并接收到ACK时，便以指数速率增大发送窗口的大小，直到遇到丢包（超时/三个冗余ACK），才停止并调整窗口的大小。这么做能最大限度地利用带宽，又不至于让网络环境变得太过拥挤。</p>
<p>最终滑动窗口的值将设置为流量控制窗口和拥塞控制窗口中的较小值。</p>
<h3 id="TCP的拥塞处理"><a href="#TCP的拥塞处理" class="headerlink" title="TCP的拥塞处理"></a>TCP的拥塞处理</h3><p>计算机网络中的带宽、交换结点中的缓存及处理机等都是网络的资源。在某段时间，若对网络中某一资源的需求超过了该资源所能提供的可用部分，网络的性能就会变坏，这种情况就叫做拥塞。拥塞控制就是防止过多的数据注入网络中，这样可以使网络中的路由器或链路不致过载。注意，拥塞控制和流量控制不同，前者是一个全局性的过程，而后者指点对点通信量的控制。拥塞控制的方法主要有以下四种：</p>
<ol>
<li>慢启动：不要一开始就发送大量的数据，先探测一下网络的拥塞程度，也就是说由小到大逐渐增加拥塞窗口的大小;</li>
<li>拥塞避免：拥塞避免算法让拥塞窗口缓慢增长，即每经过一个往返时间RTT就把发送方的拥塞窗口cwnd加1，而不是加倍，这样拥塞窗口按线性规律缓慢增长。          </li>
<li>快重传：快重传要求接收方在收到一个 失序的报文段 后就立即发出 重复确认（为的是使发送方及早知道有报文段没有到达对方）而不要等到自己发送数据时捎带确认。快重传算法规定，发送方只要一连收到三个重复确认就应当立即重传对方尚未收到的报文段，而不必继续等待设置的重传计时器时间到期。         </li>
<li>快恢复：快重传配合使用的还有快恢复算法，当发送方连续收到三个重复确认时，就执行“乘法减小”算法，把ssthresh门限减半，但是接下去并不执行慢开始算法：因为如果网络出现拥塞的话就不会收到好几个重复的确认，所以发送方现在认为网络可能没有出现拥塞。所以此时不执行慢开始算法，而是将cwnd设置为ssthresh的大小，然后执行拥塞避免算法。</li>
</ol>
<h3 id="服务器出现了大量CLOSE-WAIT状态如何解决"><a href="#服务器出现了大量CLOSE-WAIT状态如何解决" class="headerlink" title="服务器出现了大量CLOSE_WAIT状态如何解决"></a>服务器出现了大量CLOSE_WAIT状态如何解决</h3><p>大量 CLOSE_WAIT 表示程序出现了问题，对方的 socket 已经关闭连接，而我方忙于读或写没有及时关闭连接，需要检查代码，特别是释放资源的代码，或者是处理请求的线程配置。</p>
<h3 id="讲一讲SYN超时，洪泛攻击，以及解决策略"><a href="#讲一讲SYN超时，洪泛攻击，以及解决策略" class="headerlink" title="讲一讲SYN超时，洪泛攻击，以及解决策略"></a>讲一讲SYN超时，洪泛攻击，以及解决策略</h3><p>什么 SYN 是洪泛攻击？ 在 TCP 的三次握手机制的第一步中，客户端会向服务器发送 SYN 报文段。服务器接收到 SYN 报文段后会为该TCP分配缓存和变量，如果攻击分子大量地往服务器发送 SYN 报文段，服务器的连接资源终将被耗尽，导致内存溢出无法继续服务。</p>
<p>解决策略： 当服务器接受到 SYN 报文段时，不直接为该 TCP 分配资源，而只是打开一个半开的套接字。接着会使用 SYN 报文段的源Id，目的Id，端口号以及只有服务器自己知道的一个秘密函数生成一个 cookie，并把 cookie 作为序列号响应给客户端。</p>
<p>如果客户端是正常建立连接，将会返回一个确认字段为 cookie + 1 的报文段。接下来服务器会根据确认报文的源Id，目的Id，端口号以及秘密函数计算出一个结果，如果结果的值 + 1等于确认字段的值，则证明是刚刚请求连接的客户端，这时候才为该 TCP 分配资源</p>
<p>这样一来就不会为恶意攻击的 SYN 报文段分配资源空间，避免了攻击。</p>
<h2 id="三、HTTP"><a href="#三、HTTP" class="headerlink" title="三、HTTP"></a>三、HTTP</h2><blockquote>
<p>HTTP1.0、HTTP1.1、HTTP2.0 的区别</p>
<p>post 和 get 的区别</p>
</blockquote>
<p>HTTP全称是 HyperText Transfer Protocal，即：超文本传输协议。是互联网上应用最为广泛的一种<strong>网络通信协议</strong>，它允许将超文本标记语言（HTML）文档从Web服务器传送到客户端的浏览器。目前我们使用的是<strong>HTTP/1.1 版本</strong>。所有的WWW文件都必须遵守这个标准。设计HTTP最初的目的是为了提供一种发布和接收HTML页面的方法。1960年美国人 Ted Nelson 构思了一种通过计算机处理文本信息的方法，并称之为超文本（hypertext），这成为了HTTP超文本传输协议标准架构的发展根基。</p>
<h3 id="URI-和-URL"><a href="#URI-和-URL" class="headerlink" title="URI 和 URL"></a>URI 和 URL</h3><p>每个Web 服务器资源都有一个名字，这样客户端就可以说明他们感兴趣的资源是什么了，服务器资源名被称为统一资源标识符（Uniform Resource Identifier,URI）。URI 就像因特网上的邮政地址一样，在世界范围内唯一标识并定位信息资源。</p>
<p>统一资源定位符（URL）是资源标识符最常见的形式。 URL 描述了一台特定服务器上某资源的特定位置。</p>
<p>现在几乎所有的 URI 都是 URL。</p>
<p>URI 的第二种形式就是统一资源名（URN）。URN 是作为特定内容的唯一名称使用的，与目前的资源所在地无关。 </p>
<h3 id="HTTP消息的结构"><a href="#HTTP消息的结构" class="headerlink" title="HTTP消息的结构"></a>HTTP消息的结构</h3><p><strong>事务和报文</strong></p>
<p>客户端是怎样通过HTTP与Web服务器及其资源进行事务处理的呢？一个<strong>HTTP事务</strong>由一条请求命令（从客户端发往服务器）和一个响应（从服务器发回客户端）结果组成。这种通信是通过名为<strong>HTTP报文</strong>（HTTP Message）的格式化数据块进行的。</p>
<h4 id="HTTP事务："><a href="#HTTP事务：" class="headerlink" title="HTTP事务："></a>HTTP事务：</h4><p><img src="https://gitee.com/wjxyzs/img/raw/master/img/17180bed9d208228.jpg" alt=""></p>
<h4 id="报文："><a href="#报文：" class="headerlink" title="报文："></a>报文：</h4><p>HTTP 报文是纯文本，不是二进制代码。从 Web 客户端发往 Web 服务器的 HTTP 报文称为请求报文（request message）。从服务器发往客户端的报文称为响应报文。</p>
<p><img src="https://gitee.com/wjxyzs/img/raw/master/img/17180beda8938bd4.jpg" alt=""></p>
<p>HTTP 报文包括三部分：</p>
<ul>
<li>起始行</li>
<li>首部字段</li>
<li>主体</li>
</ul>
<h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><p>Http协议定义了很多与服务器交互的方法，最基本的有4种，分别是<strong>GET,POST,PUT,DELETE</strong>. 一个URL地址用于描述一个网络上的资源，而HTTP中的GET, POST, PUT, DELETE就对应着对这个资源的查，改，增，删4个操作。 我们最常见的就是GET和POST了。GET一般用于获取/查询资源信息，而POST一般用于更新资源信息。</p>
<ul>
<li>GET</li>
<li>HEAD</li>
<li>PUT</li>
<li>POST</li>
<li>TRACE</li>
<li>OPTIONS</li>
<li>DELETE</li>
</ul>
<h3 id="Get与POST的区别"><a href="#Get与POST的区别" class="headerlink" title="Get与POST的区别"></a>Get与POST的区别</h3><p>GET与POST是我们常用的两种HTTP Method，二者之间的区别主要包括如下五个方面：</p>
<ol>
<li>从功能上讲，GET一般用来从服务器上获取资源，POST一般用来更新服务器上的资源；</li>
<li>从REST服务角度上说，GET是幂等的，即读取同一个资源，总是得到相同的数据，而POST不是幂等的，因为每次请求对资源的改变并不是相同的；进一步地，GET不会改变服务器上的资源，而POST会对服务器资源进行改变；</li>
<li>从请求参数形式上看，GET请求的数据会附在URL之后，即将请求数据放置在HTTP报文的 请求头 中，以?分割URL和传输数据，参数之间以&amp;相连。特别地，如果数据是英文字母/数字，原样发送；否则，会将其编码为 application/x-www-form-urlencoded MIME 字符串(如果是空格，转换为+，如果是中文/其他字符，则直接把字符串用BASE64加密，得出如：%E4%BD%A0%E5%A5%BD，其中％XX中的XX为该符号以16进制表示的ASCII)；而POST请求会把提交的数据则放置在是HTTP请求报文的 请求体 中。</li>
<li>就安全性而言，POST的安全性要比GET的安全性高，因为GET请求提交的数据将明文出现在URL上，而且POST请求参数则被包装到请求体中，相对更安全。</li>
<li>从请求的大小看，GET请求的长度受限于浏览器或服务器对URL长度的限制，允许发送的数据量比较小，而POST请求则是没有大小限制的。</li>
</ol>
<p>HTTP请求结构： 请求方式 + 请求URI + 协议及其版本</p>
<p>HTTP响应结构： 状态码 + 原因短语 + 协议及其版本</p>
<h3 id="状态码"><a href="#状态码" class="headerlink" title="状态码"></a>状态码</h3><p>每条HTTP响应报文返回时都会携带一个状态码。状态码是一个三位数字的代码，告知客户端请求是否成功，或者是都需要采取其他动作。</p>
<ul>
<li>1xx：表明服务端接收了客户端请求，客户端继续发送请求；</li>
<li>2xx：客户端发送的请求被服务端成功接收并成功进行了处理；</li>
<li>3xx：服务端给客户端返回用于重定向的信息；</li>
<li>4xx：客户端的请求有非法内容；</li>
<li>5xx：服务端未能正常处理客户端的请求而出现意外错误。</li>
<li><strong>200 OK</strong>：表示从客户端发送给服务器的请求被正常处理并返回；</li>
<li><strong>204 No Content</strong>：表示客户端发送给客户端的请求得到了成功处理，但在返回的响应报文中不含实体的主体部分（没有资源可以返回）</li>
<li><strong>206 Patial Content</strong>：表示客户端进行了范围请求，并且服务器成功执行了这部分的GET请求，响应报文中包含由Content-Range指定范围的实体内容。</li>
<li><strong>301 Moved Permanently</strong>：永久性重定向，表示请求的资源被分配了新的URL，之后应使用更改的URL；</li>
<li><strong>302 Found</strong>：临时性重定向，表示请求的资源被分配了新的URL，希望本次访问使用新的URL；</li>
<li><strong>303 See Other</strong>：表示请求的资源被分配了新的URL，应使用GET方法定向获取请求的资源</li>
<li>304 Not Modified：表示客户端发送附带条件（是指采用GET方法的请求报文中包含if-Match、If-Modified-Since、If-None-Match、If-Range、If-Unmodified-Since中任一首部）的请求时，服务器端允许访问资源，但是请求为满足条件的情况下返回改状态码；</li>
<li><strong>400 Bad Request</strong>:表示请求报文中存在语法错误；</li>
<li><strong>401 Unauthorized</strong>：经许可，需要通过HTTP认证；</li>
<li><strong>403 Forbidden</strong>：服务器拒绝该次访问（访问权限出现问题）</li>
<li><strong>404 Not Found</strong>：表示服务器上无法找到请求的资源，除此之外，也可以在服务器拒绝请求但不想给拒绝原因时使用；</li>
<li><strong>500 Inter Server Error</strong>：表示服务器在执行请求时发生了错误，也有可能是web应用存在的bug或某些临时的错误时；</li>
<li><strong>503 Server Unavailable</strong>：表示服务器暂时处于超负载或正在进行停机维护，无法处理请求；</li>
</ul>
<p>HTTP 是个应用层协议。HTTP 无需操心网络通信的具体细节，而是把这些细节都交给了通用可靠的因特网传输协议 TCP/IP。</p>
<p>在 HTTP 客户端向服务器发送报文之前，需要用网络协议（Internet Protocol，IP）地址和端口号在客户端和服务器之间建立一条 TCP/IP 协议。而 IP 地址就是通过 URL 提供的，像<font color=red size=4><code>http://207.200.21.11:80/index.html</code></font> ，还有使用域名服务（Domain Name Services，DNS）的 <font color=red size=4><code>http://www.lazyegg.net</code></font>。</p>
<p><img src="https://gitee.com/wjxyzs/img/raw/master/img/17180bed9f762409.jpg" alt=""></p>
<h3 id="协议版本"><a href="#协议版本" class="headerlink" title="协议版本"></a>协议版本</h3><ul>
<li><p><strong>HTTP/0.9</strong></p>
<p>HTTP协议的最初版本，功能简陋，仅支持 GET 方法，并且仅能请求访问 HTML 格式的资源</p>
</li>
<li><p><strong>HTTP/1.0</strong></p>
<ul>
<li>增加了请求方式 POST 和 HEAD</li>
<li>不再局限于0.9版本的HTML格式，根据Content-Type可以支持多种数据格式，即MIME多用途互联网邮件扩展，例如text/html、image/jpeg等</li>
<li>同时也开始支持 cache，就是当客户端在规定时间内访问统一网站，直接访问cache即可</li>
<li>HTTP请求和回应的格式也变了。除了数据部分，每次通信都必须包括头信息（HTTP header），用来描述一些元数据。其他的新增功能还包括状态码（status code）、多字符集支持、多部分发送（multi-part type）、权限（authorization）、缓存（cache）、内容编码（content encoding）等</li>
<li>但是1.0版本的工作方式是每次TCP连接只能发送一个请求，当服务器响应后就会关闭这次连接，下一个请求需要再次建立TCP连接，就是不支持keepalive</li>
</ul>
</li>
<li><p><strong>HTTP/1.0+</strong></p>
<p>在20世纪90年代中叶，为满足飞快发展的万维网，很多流行的 Web 客户端和服务器飞快的向 HTTP 中添加各种特性，包括持久的 keep-alive 连接、虚拟主机支持，以及代理连接支持都被假如到 HTTP 中，并称为非官方的事实标准。这种非正式的 HTTP 扩展版本通常称为 HTTP/1.0+</p>
</li>
<li><p><strong>HTTP/1.1</strong></p>
<ul>
<li>http1.1是目前最为主流的http协议版本，从1997年发布至今，仍是主流的http协议版本。</li>
<li>引入了持久连接，或叫长连接（ persistent connection），即TCP连接默认不关闭，可以被多个请求复用，不用声明Connection: keep-alive。</li>
<li>引入了管道机制（ pipelining），即在同一个TCP连接里，客户端可以同时发送多个请求，进一步改进了HTTP协议的效率。</li>
<li>新增方法：PUT、 PATCH、 OPTIONS、 DELETE。</li>
<li>http协议不带有状态，每次请求都必须附上所有信息。请求的很多字段都是重复的，浪费带宽，影响速度。</li>
</ul>
</li>
<li><p><strong>HTTP/2.0（又名 HTTP-NG）</strong></p>
<ul>
<li>http/2发布于2015年，目前应用还比较少。</li>
<li>http/2是一个彻底的二进制协议，头信息和数据体都是二进制，并且统称为”帧”（frame）：头信息帧和数据帧。</li>
<li>复用TCP连接，在一个连接里，客户端和浏览器都可以同时发送多个请求或回应，且不用按顺序一一对应，避免了队头堵塞的问题,此双向的实时通信称为多工（ Multiplexing）。</li>
<li>HTTP/2 允许服务器未经请求，主动向客户端发送资源，即服务器推送。</li>
<li>引入头信息压缩机制（ header compression） ,头信息使用gzip或compress压缩后再发送。</li>
</ul>
</li>
</ul>
<h2 id="四、HTTPS"><a href="#四、HTTPS" class="headerlink" title="四、HTTPS"></a>四、HTTPS</h2><p>HTTP缺点：</p>
<ol>
<li>通信使用明文不对数据进行加密（内容容易被窃听）</li>
<li>不验证通信方身份（容易伪装）</li>
<li>无法确定报文完整性（内容易被篡改）</li>
</ol>
<p>因此，HTTP协议不适合传输一些敏感信息，比如：信用卡号、密码等支付信息。</p>
<p>为了解决HTTP协议的这一缺陷，需要使用另一种协议：安全套接字层超文本传输协议 HTTPS，为了数据传输的安全，HTTPS在HTTP的基础上加入了SSL（安全套接层）协议，SSL依靠证书来验证服务器的身份，并为浏览器和服务器之间的通信加密。</p>
<p><strong>与 SSL（安全套接层）组合使用的 HTTP 就是 HTTPS</strong></p>
<p><img src="https://gitee.com/wjxyzs/img/raw/master/img/17180bedb27f3f29.jpg" alt=""></p>
<p><img src="https://gitee.com/wjxyzs/img/raw/master/img/17180bedb8848bf2.jpg" alt=""></p>
<h3 id="HTTP和HTTPS对比"><a href="#HTTP和HTTPS对比" class="headerlink" title="HTTP和HTTPS对比"></a>HTTP和HTTPS对比</h3><p>HTTP协议传输的数据都是未加密的，也就是明文的，因此使用HTTP协议传输隐私信息非常不安全，为了保证这些隐私数据能加密传输，于是网景公司设计了SSL（Secure Sockets Layer）协议用于对HTTP协议传输的数据进行加密，从而就诞生了HTTPS。简单来说，HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议，要比http协议安全。</p>
<p>HTTPS和HTTP的区别主要如下：</p>
<ol>
<li>https协议需要到ca申请证书，一般免费证书较少，因而需要一定费用。</li>
<li>http是超文本传输协议，信息是明文传输，https则是具有安全性的ssl加密传输协议。</li>
<li>http和https使用的是完全不同的连接方式，用的端口也不一样，前者是80，后者是443。</li>
<li>http的连接很简单，是无状态的；HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议，比http协议安全。</li>
</ol>
<h3 id="对称加密与非对称加密"><a href="#对称加密与非对称加密" class="headerlink" title="对称加密与非对称加密"></a>对称加密与非对称加密</h3><p>主要的加密方法分为两种：一种是共享密钥加密（对称密钥加密），一种是公开密钥加密（非对称密钥加密）</p>
<h4 id="共享密钥加密-对称秘钥加密"><a href="#共享密钥加密-对称秘钥加密" class="headerlink" title="共享密钥加密(对称秘钥加密)"></a>共享密钥加密(对称秘钥加密)</h4><p>加密与解密使用同一个密钥，常见的对称加密算法：DES，AES，3DES等。</p>
<p><img src="https://gitee.com/wjxyzs/img/raw/master/img/17180bedbd853fe2.jpg" alt=""></p>
<p>也就是说在加密的同时，也会把密钥发送给对方。在发送密钥过程中可能会造成密钥被窃取，那么如何解决这一问题呢？</p>
<h4 id="公开密钥（非对称密钥）"><a href="#公开密钥（非对称密钥）" class="headerlink" title="公开密钥（非对称密钥）"></a>公开密钥（非对称密钥）</h4><p>公开密钥使用一对非对称密钥。一把叫私有密钥，另一把叫公开密钥。私有密钥不让任何人知道，公有密钥随意发送。公钥加密的信息，只有私钥才能解密。常见的非对称加密算法：RSA，ECC等。</p>
<p>也就是说，发送密文方使用对方的公开密钥进行加密，对方接受到信息后，使用私有密钥进行解密。</p>
<p><img src="https://gitee.com/wjxyzs/img/raw/master/img/17180bede10f9420.jpg" alt=""></p>
<p>对称加密加密与解密使用的是同样的密钥，所以速度快，但由于需要将密钥在网络传输，所以安全性不高。</p>
<p>非对称加密使用了一对密钥，公钥与私钥，所以安全性高，但加密与解密速度慢。</p>
<p>为了解决这一问题，https采用对称加密与非对称加密的混合加密方式。</p>
<h3 id="SSL-TSL"><a href="#SSL-TSL" class="headerlink" title="SSL/TSL"></a>SSL/TSL</h3><p>SSL（Secure Sockets Layer），中文叫做“安全套接层”。它是在上世纪90年代中期，由网景公司设计的。</p>
<p>SSL 协议就是用来解决 HTTP 传输过程的不安全问题，到了1999年，SSL 因为应用广泛，已经成为互联网上的事实标准。IETF 就在那年把 SSL 标准化。标准化之后的名称改为 TLS（是“Transport Layer Security”的缩写），中文叫做“传输层安全协议”。</p>
<p>很多相关的文章都把这两者并列称呼（SSL/TLS），因为这两者可以视作同一个东西的不同阶段。</p>
<p>SSL/TLS协议的基本思路是采用<a href="http://en.wikipedia.org/wiki/Public-key_cryptography" target="_blank" rel="noopener">公钥加密法</a>，也就是说，客户端先向服务器端索要公钥，然后用公钥加密信息，服务器收到密文后，用自己的私钥解密。</p>
<p>但是，这里有两个问题。</p>
<ul>
<li><p><strong>如何保证公钥不被篡改？</strong></p>
<p>解决方法：将公钥放在数字证书中。只要证书是可信的，公钥就是可信的。</p>
</li>
<li><p><strong>公钥加密计算量太大，如何减少耗用的时间？</strong></p>
<p>每一次对话（session），客户端和服务器端都生成一个”对话密钥”（session key），用它来加密信息。由于”对话密钥”是对称加密，所以运算速度非常快，而服务器公钥只用于加密”对话密钥”本身，这样就减少了加密运算的消耗时间。</p>
</li>
</ul>
<p>因此，SSL/TLS协议的基本过程是这样的：</p>
<ol>
<li>服务端将非对称加密的公钥发送给客户端；</li>
<li>客户端拿着服务端发来的公钥，对对称加密的key做加密并发给服务端；</li>
<li>服务端拿着自己的私钥对发来的密文解密，从来获取到对称加密的key；</li>
<li>二者利用对称加密的key对需要传输的消息做加解密传输。</li>
</ol>
<p>HTTPS相比HTTP，在请求前多了一个「握手」的环节。</p>
<p>握手过程中确定了数据加密的密码。在握手过程中，网站会向浏览器发送 SSL 证书，SSL 证书和我们日常用的身份证类似，是一个支持 HTTPS 网站的身份证明，SSL 证书里面包含了网站的域名，证书有效期，证书的颁发机构以及用于加密传输密码的公钥等信息，由于公钥加密的密码只能被在申请证书时生成的私钥解密，因此浏览器在生成密码之前需要先核对当前访问的域名与证书上绑定的域名是否一致，同时还要对证书的颁发机构进行验证，如果验证失败浏览器会给出证书错误的提示。</p>
<h3 id="证书"><a href="#证书" class="headerlink" title="证书"></a>证书</h3><p><img src="https://gitee.com/wjxyzs/img/raw/master/img/17180bedc063a776.jpg" alt=""></p>
<p>实际上，我们使用的证书分很多种类型，SSL证书只是其中的一种。证书的格式是由 X.509 标准定义。SSL 证书负责传输公钥，是一种PKI（Public Key Infrastructure，公钥基础结构）证书。</p>
<p>我们常见的证书根据用途不同大致有以下几种：</p>
<ol>
<li>SSL证书，用于加密HTTP协议，也就是HTTPS。</li>
<li>代码签名证书，用于签名二进制文件，比如Windows内核驱动，Firefox插件，Java代码签名等等。</li>
<li>客户端证书，用于加密邮件。</li>
<li>双因素证书，网银专业版使用的USB Key里面用的就是这种类型的证书。</li>
</ol>
<p>这些证书都是由受认证的证书颁发机构——我们称之为CA（Certificate Authority）机构来颁发，针对企业与个人的不同，可申请的证书的类型也不同，价格也不同。CA机构颁发的证书都是受信任的证书，对于 SSL 证书来说，如果访问的网站与证书绑定的网站一致就可以通过浏览器的验证而不会提示错误。</p>
<p><strong>为什么服务端要发送证书给客户端</strong></p>
<p>互联网有太多的服务需要使用证书来验证身份，以至于客户端(操作系统或浏览器等)无法内置所有证书，需要通过服务端将证书发送给客户端。</p>
<p><strong>客户端为什么要验证接收到的证书</strong></p>
<p>中间人攻击</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">客户端&lt;------------攻击者&lt;------------服务端</span><br><span class="line">        伪造证书            拦截请求</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>

<p><strong>客户端如何验证接收到的证书</strong></p>
<p>为了回答这个问题，需要引入数字签名(Digital Signature)。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+---------------------+</span><br><span class="line">| A digital signature |</span><br><span class="line">|(not to be confused  |</span><br><span class="line">|with a digital       |</span><br><span class="line">|certificate)         |            +---------+              +--------+</span><br><span class="line">| is a mathematical   |----哈希---&gt;| 消息摘要  |---私钥加密---&gt;| 数字签名 |</span><br><span class="line">|technique used       |            +---------+              +--------+</span><br><span class="line">|to validate the      |</span><br><span class="line">|authenticity and     |</span><br><span class="line">|integrity of a       |</span><br><span class="line">|message, software    |</span><br><span class="line">|or digital document. |</span><br><span class="line">+---------------------+</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>

<p>将一段文本通过哈希（hash）和私钥加密处理后生成数字签名。</p>
<p>假设消息传递在Bob，Susan和Pat三人之间发生。Susan将消息连同数字签名一起发送给Bob，Bob接收到消息后，可以这样验证接收到的消息就是Susan发送的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+---------------------+</span><br><span class="line">| A digital signature |</span><br><span class="line">|(not to be confused  |</span><br><span class="line">|with a digital       |</span><br><span class="line">|certificate)         |            +---------+</span><br><span class="line">| is a mathematical   |----哈希---&gt;|  消息摘要 |</span><br><span class="line">|technique used       |            +---------+</span><br><span class="line">|to validate the      |                 |</span><br><span class="line">|authenticity and     |                 |</span><br><span class="line">|integrity of a       |                 |</span><br><span class="line">|message, software    |                 对</span><br><span class="line">|or digital document. |                 比</span><br><span class="line">+---------------------+                 |</span><br><span class="line">                                        |</span><br><span class="line">                                        |</span><br><span class="line">          +--------+               +---------+</span><br><span class="line">          | 数字签名 |---公钥解密---&gt;|  消息摘要 |</span><br><span class="line">          +--------+               +---------+</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>

<p>当然，这个前提是Bob知道Susan的公钥。更重要的是，和消息本身一样，公钥不能在不安全的网络中直接发送给Bob。此时就引入了<a href="https://en.wikipedia.org/wiki/Certificate_authority" target="_blank" rel="noopener">证书颁发机构</a>（Certificate Authority，简称CA），CA数量并不多，Bob客户端内置了所有受信任CA的证书。CA对Susan的公钥（和其他信息）数字签名后生成证书。</p>
<p>Susan将证书发送给Bob后，Bob通过CA证书的公钥验证证书签名。</p>
<p>Bob信任CA，CA信任Susan 使得 Bob信任Susan，<a href="https://en.wikipedia.org/wiki/Chain_of_trust" target="_blank" rel="noopener">信任链</a>（Chain Of Trust）就是这样形成的。</p>
<p>事实上，Bob客户端内置的是CA的根证书(Root Certificate)，HTTPS协议中服务器会发送证书链（Certificate Chain）给客户端。</p>
<h3 id="HTTPS的工作原理"><a href="#HTTPS的工作原理" class="headerlink" title="HTTPS的工作原理"></a>HTTPS的工作原理</h3><ol>
<li>Client 使用https的URL访问 Server，要求与 Server 建立 SSL 连接</li>
<li>Server 把事先配置好的公钥证书返回给客户端。</li>
<li>Client验证公钥证书：比如是否在有效期内，证书的用途是不是匹配Client请求的站点，是不是在CRL吊销列表里面，它的上一级证书是否有效，这是一个递归的过程，直到验证到根证书（操作系统内置的Root证书或者Client内置的Root证书）。如果验证通过则继续，不通过则显示警告信息。</li>
<li>Client使用伪随机数生成器生成加密所使用的对称密钥，然后用证书的公钥加密这个对称密钥，发给Server。</li>
<li>Server使用自己的私钥（private key）解密这个消息，得到对称密钥。至此，Client和Server双方都持有了相同的对称密钥。</li>
<li>Server使用对称密钥加密“明文内容A”，发送给Client。</li>
<li>Client使用对称密钥解密响应的密文，得到“明文内容A”。</li>
<li>Client再次发起HTTPS的请求，使用对称密钥加密请求的“明文内容B”，然后Server使用对称密钥解密密文，得到“明文内容B”。</li>
</ol>
<p><img src="https://gitee.com/wjxyzs/img/raw/master/img/17180bedeeb2c715.jpg" alt=""></p>
<h3 id="HTTPS的优点"><a href="#HTTPS的优点" class="headerlink" title="HTTPS的优点"></a>HTTPS的优点</h3><p>尽管HTTPS并非绝对安全，掌握根证书的机构、掌握加密算法的组织同样可以进行中间人形式的攻击，但HTTPS仍是现行架构下最安全的解决方案，主要有以下几个好处：</p>
<ol>
<li>使用HTTPS协议可认证用户和服务器，确保数据发送到正确的客户机和服务器；</li>
<li>HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议，要比http协议安全，可防止数据在传输过程中不被窃取、改变，确保数据的完整性。</li>
<li>HTTPS是现行架构下最安全的解决方案，虽然不是绝对安全，但它大幅增加了中间人攻击的成本。</li>
<li>谷歌曾在2014年8月份调整搜索引擎算法，并称“比起同等HTTP网站，采用HTTPS加密的网站在搜索结果中的排名将会更高”。</li>
</ol>
<h3 id="HTTPS的缺点"><a href="#HTTPS的缺点" class="headerlink" title="HTTPS的缺点"></a>HTTPS的缺点</h3><p>虽然说HTTPS有很大的优势，但其相对来说，还是存在不足之处的：</p>
<ol>
<li>HTTPS协议握手阶段比较费时，会使页面的加载时间延长近50%，增加10%到20%的耗电；</li>
<li>HTTPS连接缓存不如HTTP高效，会增加数据开销和功耗，甚至已有的安全措施也会因此而受到影响；</li>
<li>SSL证书需要钱，功能越强大的证书费用越高，个人网站、小网站没有必要一般不会用。</li>
<li>SSL证书通常需要绑定IP，不能在同一IP上绑定多个域名，IPv4资源不可能支撑这个消耗。</li>
<li>HTTPS协议的加密范围也比较有限，在黑客攻击、拒绝服务攻击、服务器劫持等方面几乎起不到什么作用。最关键的，SSL证书的信用链体系并不安全，特别是在某些国家可以控制CA根证书的情况下，中间人攻击一样可行。</li>
</ol>
<h3 id="HTTP-切换到-HTTPS"><a href="#HTTP-切换到-HTTPS" class="headerlink" title="HTTP 切换到 HTTPS"></a>HTTP 切换到 HTTPS</h3><p>如果需要将网站从http切换到https到底该如何实现呢？</p>
<p>这里需要将页面中所有的链接，例如js，css，图片等等链接都由http改为https。例如：<a href="http://www.baidu.com改为https://www.baidu.com" target="_blank" rel="noopener">www.baidu.com改为https://www.baidu.com</a></p>
<p>BTW，这里虽然将http切换为了https，还是建议保留http。所以我们在切换的时候可以做http和https的兼容，具体实现方式是，去掉页面链接中的http头部，这样可以自动匹配http头和https头。例如：将 <a href="http://www.baidu.com改为//www.baidu.com。然后当用户从http的入口进入访问页面时，页面就是http，如果用户是从https的入口进入访问页面，页面即使https的。" target="_blank" rel="noopener">http://www.baidu.com改为//www.baidu.com。然后当用户从http的入口进入访问页面时，页面就是http，如果用户是从https的入口进入访问页面，页面即使https的。</a></p>
<h3 id="什么是Cookie，Cookie的使用过程是怎么样的？"><a href="#什么是Cookie，Cookie的使用过程是怎么样的？" class="headerlink" title="什么是Cookie，Cookie的使用过程是怎么样的？"></a>什么是Cookie，Cookie的使用过程是怎么样的？</h3><p>由于 http 协议是无状态协议，如果客户通过浏览器访问 web 应用时没有一个保存用户访问状态的机制，那么将不能持续跟踪应用的操作。比如当用户往购物车中添加了商品，web 应用必须在用户浏览别的商品的时候仍保存购物车的状态，以便用户继续往购物车中添加商品。</p>
<p>cookie 是浏览器的一种缓存机制，它可用于维持客户端与服务器端之间的会话。由于下面一题会讲到session，所以这里要强调cookie会将会话保存在客户端（session则是把会话保存在服务端）</p>
<p>这里以最常见的登陆案例讲解cookie的使用过程：</p>
<ol>
<li>首先用户在客户端浏览器向服务器发起登陆请求</li>
<li>登陆成功后，服务端会把登陆的用户信息设置 cookie 中，返回给客户端浏览器</li>
<li>客户端浏览器接收到 cookie 请求后，会把 cookie 保存到本地（可能是内存，也可能是磁盘，看具体使用情况而定）</li>
<li>以后再次访问该 web 应用时，客户端浏览器就会把本地的 cookie 带上，这样服务端就能根据 cookie 获得用户信息了</li>
</ol>
<h3 id="什么是session，有哪些实现session的机制？"><a href="#什么是session，有哪些实现session的机制？" class="headerlink" title="什么是session，有哪些实现session的机制？"></a>什么是session，有哪些实现session的机制？</h3><p>session 是一种维持客户端与服务器端会话的机制。但是与 <strong>cookie 把会话信息保存在客户端本地不一样，session 把会话保留在浏览器端。</strong></p>
<p>我们同样以登陆案例为例子讲解 session 的使用过程：</p>
<ol>
<li>首先用户在客户端浏览器发起登陆请求</li>
<li>登陆成功后，服务端会把用户信息保存在服务端，并返回一个唯一的 session 标识给客户端浏览器。</li>
<li>客户端浏览器会把这个唯一的 session 标识保存在起来</li>
<li>以后再次访问 web 应用时，客户端浏览器会把这个唯一的 session 标识带上，这样服务端就能根据这个唯一标识找到用户信息。</li>
</ol>
<p>看到这里可能会引起疑问：把唯一的 session 标识返回给客户端浏览器，然后保存起来，以后访问时带上，这难道不是 cookie 吗？</p>
<p>没错，<strong>session 只是一种会话机制，在许多 web 应用中，session 机制就是通过 cookie 来实现的</strong>。也就是说它只是使用了 cookie 的功能，并不是使用 cookie 完成会话保存。与 cookie 在保存客户端保存会话的机制相反，session 通过 cookie 的功能把会话信息保存到了服务端。</p>
<p>进一步地说，session 是一种维持服务端与客户端之间会话的机制，它可以有不同的实现。以现在比较流行的小程序为例，阐述一个 session 的实现方案：</p>
<ol>
<li>首先用户登陆后，需要把用户登陆信息保存在服务端，这里我们可以采用 redis。比如说给用户生成一个 userToken，然后以 userId 作为键，以 userToken 作为值保存到 redis 中，并在返回时把 userToken 带回给小程序端。</li>
<li>小程序端接收到 userToken 后把它缓存起来，以后每当访问后端服务时就把 userToken 带上。</li>
<li>在后续的服务中服务端只要拿着小程序端带来的 userToken 和 redis 中的 userToken 进行比对，就能确定用户的登陆状态了。</li>
</ol>
<h3 id="session和cookie有什么区别"><a href="#session和cookie有什么区别" class="headerlink" title="session和cookie有什么区别"></a>session和cookie有什么区别</h3><p>经过上面两道题的阐述，这道题就很清晰了</p>
<ol>
<li>cookie 是浏览器提供的一种缓存机制，它可以用于维持客户端与服务端之间的会话</li>
<li>session 指的是维持客户端与服务端会话的一种机制，它可以通过 cookie 实现，也可以通过别的手段实现。</li>
<li>如果用 cookie 实现会话，那么会话会保存在客户端浏览器中</li>
<li>而 session 机制提供的会话是保存在服务端的。</li>
</ol>
<h2 id="Other-FAQ"><a href="#Other-FAQ" class="headerlink" title="Other FAQ     "></a>Other FAQ     </h2><h3 id="从输入网址到获得页面的过程"><a href="#从输入网址到获得页面的过程" class="headerlink" title="从输入网址到获得页面的过程"></a>从输入网址到获得页面的过程</h3><ol>
<li>浏览器查询 DNS，获取域名对应的IP地址:具体过程包括浏览器搜索自身的DNS缓存、搜索操作系统的DNS缓存、读取本地的Host文件和向本地DNS服务器进行查询等。对于向本地DNS服务器进行查询，如果要查询的域名包含在本地配置区域资源中，则返回解析结果给客户机，完成域名解析(此解析具有权威性)；如果要查询的域名不由本地DNS服务器区域解析，但该服务器已缓存了此网址映射关系，则调用这个IP地址映射，完成域名解析（此解析不具有权威性）。如果本地域名服务器并未缓存该网址映射关系，那么将根据其设置发起递归查询或者迭代查询；</li>
<li>浏览器获得域名对应的IP地址以后，浏览器向服务器请求建立链接，发起三次握手；</li>
<li>TCP/IP链接建立起来后，浏览器向服务器发送HTTP请求；</li>
<li>服务器接收到这个请求，并根据路径参数映射到特定的请求处理器进行处理，并将处理结果及相应的视图返回给浏览器；</li>
<li>浏览器解析并渲染视图，若遇到对js文件、css文件及图片等静态资源的引用，则重复上述步骤并向服务器请求这些资源；</li>
<li>浏览器根据其请求到的资源、数据渲染页面，最终向用户呈现一个完整的页面。</li>
</ol>
<h3 id="XSS-攻击"><a href="#XSS-攻击" class="headerlink" title="XSS 攻击"></a>XSS 攻击</h3><p>XSS 是一种经常出现在web应用中的计算机安全漏洞，与SQL注入一起成为web中最主流的攻击方式。XSS是指恶意攻击者利用网站没有对用户提交数据进行转义处理或者过滤不足的缺点，进而添加一些脚本代码嵌入到web页面中去，使别的用户访问都会执行相应的嵌入代码，从而盗取用户资料、利用用户身份进行某种动作或者对访问者进行病毒侵害的一种攻击方式。</p>
<p>          </p>
<h3 id="IP地址的分类"><a href="#IP地址的分类" class="headerlink" title="IP地址的分类"></a>IP地址的分类</h3><p>IP地址是指互联网协议地址，是IP协议提供的一种统一的地址格式，它为互联网上的每一个网络和每一台主机分配一个逻辑地址，以此来屏蔽物理地址的差异。IP地址编址方案将IP地址空间划分为A、B、C、D、E五类，其中A、B、C是基本类，D、E类作为多播和保留使用，为特殊地址。</p>
<p>每个IP地址包括两个标识码（ID），即网络ID和主机ID。同一个物理网络上的所有主机都使用同一个网络ID，网络上的一个主机（包括网络上工作站，服务器和路由器等）有一个主机ID与其对应。A~E类地址的特点如下：</p>
<p>A类地址：以0开头，第一个字节范围：0~127；</p>
<p>B类地址：以10开头，第一个字节范围：128~191；</p>
<p>C类地址：以110开头，第一个字节范围：192~223；</p>
<p>D类地址：以1110开头，第一个字节范围为224~239；</p>
<p>E类地址：以1111开头，保留地址</p>
<p><img src="https://gitee.com/wjxyzs/img/raw/master/img/17180bedf2021893.jpg" alt=""></p>
<h2 id="参考与感谢"><a href="#参考与感谢" class="headerlink" title="参考与感谢"></a>参考与感谢</h2><ul>
<li>《HTTP 权威指南》</li>
<li><a href="https://arch-long.cn/articles/network/OSI模型TCPIP协议栈.html" target="_blank" rel="noopener">arch-long.cn/articles/ne…</a></li>
<li><a href="https://blog.csdn.net/qq_32998153/article/details/79680704" target="_blank" rel="noopener">blog.csdn.net/qq_32998153…</a></li>
</ul>
]]></content>
      <categories>
        <category>直击面试</category>
      </categories>
      <tags>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title>[数据编辑、orm表关系和路由层]</title>
    <url>/2020/02/11/%E6%95%B0%E6%8D%AE%E7%BC%96%E8%BE%91%E3%80%81orm%E8%A1%A8%E5%85%B3%E7%B3%BB%E5%92%8C%E8%B7%AF%E7%94%B1%E5%B1%82/</url>
    <content><![CDATA[<h3 id="数据的查，改，删"><a href="#数据的查，改，删" class="headerlink" title="数据的查，改，删"></a>数据的查，改，删</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 先讲数据库中的数据全部展示到前端 然后给每一个数据两个按钮 一个编辑一个删除</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">userlist</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="comment"># 查询出用户表里面所有的数据</span></span><br><span class="line">    <span class="comment"># 方式1</span></span><br><span class="line">    <span class="comment"># data = models.User.objects.filter()</span></span><br><span class="line">    <span class="comment"># print(data)</span></span><br><span class="line">    <span class="comment"># 方式2</span></span><br><span class="line">    user_queryset = models.User.objects.all()</span><br><span class="line">    <span class="comment"># return render(request,'userlist.html',&#123;'user_queryset':user_queryset&#125;)</span></span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">'userlist.html'</span>,locals())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编辑功能</span></span><br><span class="line">	<span class="comment"># 点击编辑按钮朝后端发送编辑数据的请求</span></span><br><span class="line">  <span class="string">"""</span></span><br><span class="line"><span class="string">  如何告诉后端用户想要编辑哪条数据?</span></span><br><span class="line"><span class="string">  	将编辑按钮所在的那一行数据的主键值发送给后端</span></span><br><span class="line"><span class="string">  	利用url问号后面携带参数的方式</span></span><br><span class="line"><span class="string">  	</span></span><br><span class="line"><span class="string">  	&#123;% for user_obj in user_queryset %&#125;</span></span><br><span class="line"><span class="string">                        &lt;tr&gt;</span></span><br><span class="line"><span class="string">                            &lt;td&gt;&#123;&#123; user_obj.id &#125;&#125;&lt;/td&gt;</span></span><br><span class="line"><span class="string">                            &lt;td&gt;&#123;&#123; user_obj.username &#125;&#125;&lt;/td&gt;</span></span><br><span class="line"><span class="string">                            &lt;td&gt;&#123;&#123; user_obj.password &#125;&#125;&lt;/td&gt;</span></span><br><span class="line"><span class="string">                            &lt;td&gt;</span></span><br><span class="line"><span class="string">                                &lt;a href="/edit_user/?user_id=&#123;&#123; user_obj.id &#125;&#125;" class="btn btn-primary btn-xs"&gt;编辑&lt;/a&gt;</span></span><br><span class="line"><span class="string">                                &lt;a href="" class="btn btn-danger btn-xs"&gt;删除&lt;/a&gt;</span></span><br><span class="line"><span class="string">                            &lt;/td&gt;</span></span><br><span class="line"><span class="string">                        &lt;/tr&gt;</span></span><br><span class="line"><span class="string">                    &#123;% endfor %&#125;</span></span><br><span class="line"><span class="string">  """</span></span><br><span class="line">  <span class="comment"># 后端查询出用户想要编辑的数据对象 展示到前端页面供用户查看和编辑</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">edit_user</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="comment"># 获取url问号后面的参数</span></span><br><span class="line">    edit_id = request.GET.get(<span class="string">'user_id'</span>)</span><br><span class="line">    <span class="comment"># 查询当前用户想要编辑的数据对象</span></span><br><span class="line">    edit_obj = models.User.objects.filter(id=edit_id).first()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">"POST"</span>:</span><br><span class="line">        username = request.POST.get(<span class="string">'username'</span>)</span><br><span class="line">        password = request.POST.get(<span class="string">'password'</span>)</span><br><span class="line">        <span class="comment"># 去数据库中修改对应的数据内容</span></span><br><span class="line">        <span class="comment"># 修改数据方式1</span></span><br><span class="line">        <span class="comment"># models.User.objects.filter(id=edit_id).update(username=username,password=password)</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">            将filter查询出来的列表中所有的对象全部更新            批量更新操作</span></span><br><span class="line"><span class="string">            只修改被修改的字段</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 修改数据方式2</span></span><br><span class="line">        edit_obj.username = username</span><br><span class="line">        edit_obj.password= password</span><br><span class="line">        edit_obj.save()</span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">            上述方法当字段特别多的时候效率会非常的低</span></span><br><span class="line"><span class="string">            从头到尾将数据的所有字段全部更新一边 无论该字段是否被修改</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 跳转到数据的展示页面</span></span><br><span class="line">        <span class="keyword">return</span> redirect(<span class="string">'/userlist/'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将数据对象展示到页面上</span></span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">'edit_user.html'</span>,locals())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除功能</span></span><br><span class="line">	<span class="string">"""</span></span><br><span class="line"><span class="string">	跟编辑功能逻辑类似</span></span><br><span class="line"><span class="string">	def delete_user(request):</span></span><br><span class="line"><span class="string">    # 获取用户想要删除的数据id值</span></span><br><span class="line"><span class="string">    delete_id = request.GET.get('user_id')</span></span><br><span class="line"><span class="string">    # 直接去数据库中找到对应的数据删除即可</span></span><br><span class="line"><span class="string">    models.User.objects.filter(id=delete_id).delete()</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">        批量删除</span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    # 跳转到展示页面</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    return redirect('/userlist/')	</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">	"""</span></span><br><span class="line"><span class="comment"># 真正的删除功能应该需要二次确认 我们这里先不做后面会讲</span></span><br><span class="line"><span class="comment"># 删除数据内部其实并不是真正的删除 我们会给数据添加一个标识字段用来表示当前数据是否被删除了，如果数据被删了仅仅只是讲字段修改一个状态</span></span><br><span class="line">	username password	is_delete</span><br><span class="line">  jason			<span class="number">123</span>				<span class="number">0</span></span><br><span class="line">  egon			<span class="number">123</span>				<span class="number">1</span></span><br></pre></td></tr></table></figure>

<h3 id="django-orm中如何创建表关系"><a href="#django-orm中如何创建表关系" class="headerlink" title="django orm中如何创建表关系"></a>django orm中如何创建表关系</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">表与表之间的关系</span></span><br><span class="line"><span class="string">	一对多</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">	多对多</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">	一对一</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">	没有关系</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">判断表关系的方法:换位思考</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">图书表</span><br><span class="line"></span><br><span class="line">出版社表</span><br><span class="line"></span><br><span class="line">作者表</span><br><span class="line"></span><br><span class="line">作者详情表</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">图书和出版社是一对多的关系 外键字段建在多的那一方 book</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">图书和作者是多对多的关系 需要创建第三张表来专门存储</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">作者与作者详情表是一对一</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your models here.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建表关系  先将基表创建出来 然后再添加外键字段</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    title = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    price = models.DecimalField(max_digits=<span class="number">8</span>,decimal_places=<span class="number">2</span>)</span><br><span class="line">    <span class="comment"># 总共八位 小数点后面占两位</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    图书和出版社是一对多 并且书是多的一方 所以外键字段放在书表里面</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    publish = models.ForeignKey(to=<span class="string">'Publish'</span>)  <span class="comment"># 默认就是与出版社表的主键字段做外键关联</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    如果字段对应的是ForeignKey 那么会orm会自动在字段的后面加_id</span></span><br><span class="line"><span class="string">    如果你自作聪明的加了_id那么orm还是会在后面继续加_id</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    后面在定义ForeignKey的时候就不要自己加_id</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    图书和作者是多对多的关系 外键字段建在任意一方均可 但是推荐你建在查询频率较高的一方</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    authors = models.ManyToManyField(to=<span class="string">'Author'</span>)</span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    authors是一个虚拟字段 主要是用来告诉orm 书籍表和作者表是多对多关系</span></span><br><span class="line"><span class="string">    让orm自动帮你创建第三张关系表</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Publish</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    addr = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Author</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    age = models.IntegerField()</span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    作者与作者详情是一对一的关系 外键字段建在任意一方都可以 但是推荐你建在查询频率较高的表中</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    author_detail = models.OneToOneField(to=<span class="string">'AuthorDetail'</span>)</span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    OneToOneField也会自动给字段加_id后缀</span></span><br><span class="line"><span class="string">    所以你也不要自作聪明的自己加_id</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AuthorDetail</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    phone = models.BigIntegerField()  <span class="comment"># 或者直接字符类型</span></span><br><span class="line">    addr = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">	orm中如何定义三种关系</span></span><br><span class="line"><span class="string">		publish = models.ForeignKey(to='Publish')  # 默认就是与出版社表的主键字段做外键关联</span></span><br><span class="line"><span class="string">		</span></span><br><span class="line"><span class="string">		authors = models.ManyToManyField(to='Author')</span></span><br><span class="line"><span class="string">		</span></span><br><span class="line"><span class="string">		author_detail = models.OneToOneField(to='AuthorDetail')</span></span><br><span class="line"><span class="string">		</span></span><br><span class="line"><span class="string">		</span></span><br><span class="line"><span class="string">		ForeignKey</span></span><br><span class="line"><span class="string">		OneToOneField</span></span><br><span class="line"><span class="string">			会自动在字段后面加_id后缀</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在django1.X版本中外键默认都是级联更新删除的</span></span><br><span class="line"><span class="comment"># 多对多的表关系可以有好几种创建方式 这里暂且先介绍一种</span></span><br><span class="line"><span class="comment"># 针对外键字段里面的其他参数 暂时不要考虑 如果感兴趣自己可以百度试试看</span></span><br></pre></td></tr></table></figure>

<h3 id="django请求生命周期流程图-必会"><a href="#django请求生命周期流程图-必会" class="headerlink" title="django请求生命周期流程图(必会)"></a>django请求生命周期流程图(必会)</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 每个人都要会画 这个图是你们后期复习django最好的一个梳理方式</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 扩展知识点</span></span><br><span class="line">	<span class="string">"""</span></span><br><span class="line"><span class="string">	缓存数据库</span></span><br><span class="line"><span class="string">		提前已经将你想要的数据准备好了 你来直接拿就可以</span></span><br><span class="line"><span class="string">		提高效率和响应时间</span></span><br><span class="line"><span class="string">		</span></span><br><span class="line"><span class="string">	当你在修改你的数据的时候 你会发现数据并不是立刻修改完成的</span></span><br><span class="line"><span class="string">	而是需要经过一段时间才会修改</span></span><br><span class="line"><span class="string">		博客园</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">	了解即可</span></span><br><span class="line"><span class="string">	"""</span></span><br></pre></td></tr></table></figure>

<h1 id="路由层"><a href="#路由层" class="headerlink" title="路由层"></a>路由层</h1><h3 id="路由匹配"><a href="#路由匹配" class="headerlink" title="路由匹配"></a>路由匹配</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 路由匹配</span></span><br><span class="line">url(<span class="string">r'test'</span>,views.test),</span><br><span class="line">url(<span class="string">r'testadd'</span>,views.testadd)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">url方法第一个参数是正则表达式</span></span><br><span class="line"><span class="string">	只要第一个参数正则表达式能够匹配到内容 那么就会立刻停止往下匹配</span></span><br><span class="line"><span class="string">	直接执行对应的视图函数</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">你在输入url的时候会默认加斜杠</span></span><br><span class="line"><span class="string">	django内部帮你做到重定向</span></span><br><span class="line"><span class="string">		一次匹配不行</span></span><br><span class="line"><span class="string">		url后面加斜杠再来一次</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment"># 取消自动加斜杠</span></span><br><span class="line">APPEND_SLASH = <span class="literal">False</span>/<span class="literal">True</span>	<span class="comment"># 默认是自动加斜杠的</span></span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r'^admin/'</span>, admin.site.urls),</span><br><span class="line">    <span class="comment"># 首页</span></span><br><span class="line">    url(<span class="string">r'^$'</span>,views.home),</span><br><span class="line">    <span class="comment"># 路由匹配</span></span><br><span class="line">    url(<span class="string">r'^test/$'</span>,views.test),</span><br><span class="line">    url(<span class="string">r'^testadd/$'</span>,views.testadd),</span><br><span class="line">    <span class="comment"># 尾页(了解)</span></span><br><span class="line">    url(<span class="string">r''</span>,views.error),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h3 id="无名分组"><a href="#无名分组" class="headerlink" title="无名分组"></a>无名分组</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">分组:就是给某一段正则表达式用小括号扩起来</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">url(<span class="string">r'^test/(\d+)/'</span>,views.test)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(request,xx)</span>:</span></span><br><span class="line">    print(xx)</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">'test'</span>)</span><br><span class="line">  </span><br><span class="line"><span class="comment"># 无名分组就是将括号内正则表达式匹配到的内容当作位置参数传递给后面的视图函数</span></span><br></pre></td></tr></table></figure>

<h3 id="有名分组"><a href="#有名分组" class="headerlink" title="有名分组"></a>有名分组</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">可以给正则表达式起一个别名</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">url(<span class="string">r'^testadd/(?P&lt;year&gt;\d+)'</span>,views.testadd)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">testadd</span><span class="params">(request,year)</span>:</span></span><br><span class="line">    print(year)</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">'testadd'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 有名分组就是将括号内正则表达式匹配到的内容当作关键字参数传递给后面的视图函数</span></span><br></pre></td></tr></table></figure>

<h3 id="无名有名是否可以混合使用"><a href="#无名有名是否可以混合使用" class="headerlink" title="无名有名是否可以混合使用"></a>无名有名是否可以混合使用</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">嘻嘻 不能混用</span></span><br><span class="line"><span class="string">但是同一个分组可以使用N多次</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 单个的分组可以使用多次</span></span><br><span class="line">url(<span class="string">r'^index/(\d+)/(\d+)/(\d+)/'</span>,views.index),</span><br><span class="line">url(<span class="string">r'^index/(?P&lt;year&gt;\d+)/(?P&lt;age&gt;\d+)/(?P&lt;month&gt;\d+)/'</span>,views.index),</span><br></pre></td></tr></table></figure>

<h3 id="反向解析"><a href="#反向解析" class="headerlink" title="反向解析"></a>反向解析</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 通过一些方法得到一个结果 该结果可以直接访问对应的url触发视图函数</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 先给路由与视图函数起一个别名</span></span><br><span class="line">	url(<span class="string">r'^func_kkk/'</span>,views.func,name=<span class="string">'ooo'</span>)</span><br><span class="line"><span class="comment"># 反向解析</span></span><br><span class="line">	<span class="comment"># 后端反向解析</span></span><br><span class="line">  	<span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render,HttpResponse,redirect,reverse</span><br><span class="line">  	reverse(<span class="string">'ooo'</span>)</span><br><span class="line">  <span class="comment"># 前端反向解析</span></span><br><span class="line">  	&lt;a href="&#123;% url 'ooo' %&#125;"&gt;111&lt;/a&gt;</span><br></pre></td></tr></table></figure>

<h3 id="无名有名分组反向解析"><a href="#无名有名分组反向解析" class="headerlink" title="无名有名分组反向解析"></a>无名有名分组反向解析</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 无名分组反向解析</span></span><br><span class="line">	url(<span class="string">r'^index/(\d+)/'</span>,views.index,name=<span class="string">'xxx'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 前端</span></span><br><span class="line">	&#123;% url <span class="string">'xxx'</span> <span class="number">123</span> %&#125;</span><br><span class="line"><span class="comment"># 后端</span></span><br><span class="line">	reverse(<span class="string">'xxx'</span>, args=(<span class="number">1</span>,))</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">这个数字写代码的时候应该放什么</span></span><br><span class="line"><span class="string">	数字一般情况下放的是数据的主键值  数据的编辑和删除</span></span><br><span class="line"><span class="string">	url(r'^edit/(\d+)/',views.edit,name='xxx')</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">	def edit(request,edit_id):</span></span><br><span class="line"><span class="string">		reverse('xxx',args=(edit_id,))</span></span><br><span class="line"><span class="string">		</span></span><br><span class="line"><span class="string">	&#123;%for user_obj in user_queryset%&#125;</span></span><br><span class="line"><span class="string">		&lt;a href="&#123;% url 'xxx' user_obj.id %&#125;"&gt;编辑&lt;/a&gt;</span></span><br><span class="line"><span class="string">	&#123;%endfor%&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">今天每个人都必须完成的作业(*******)</span></span><br><span class="line"><span class="string">	利用无名有名 反向解析 完成数据的增删改查</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 有名分组反向解析</span></span><br><span class="line">   url(<span class="string">r'^func/(?P&lt;year&gt;\d+)/'</span>,views.func,name=<span class="string">'ooo'</span>)</span><br><span class="line"><span class="comment"># 前端</span></span><br><span class="line">	&lt;a href="&#123;% url 'ooo' year=123 %&#125;"&gt;111&lt;/a&gt;  了解</span><br><span class="line">	&lt;a href="&#123;% url 'ooo' 123 %&#125;"&gt;222&lt;/a&gt;  		记忆</span><br><span class="line"></span><br><span class="line"><span class="comment"># 后端	</span></span><br><span class="line">	<span class="comment"># 有名分组反向解析 写法1  了解</span></span><br><span class="line">    print(reverse(<span class="string">'ooo'</span>,kwargs=&#123;<span class="string">'year'</span>:<span class="number">123</span>&#125;))</span><br><span class="line">    <span class="comment"># 简便的写法  减少你的脑容量消耗 记跟无名一样的操作即可</span></span><br><span class="line">    print(reverse(<span class="string">'ooo'</span>,args=(<span class="number">111</span>,)))</span><br></pre></td></tr></table></figure>

<h3 id="路由分发"><a href="#路由分发" class="headerlink" title="路由分发"></a>路由分发</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">django的每一个应用都可以有自己的templates文件夹 urls.py static文件夹</span></span><br><span class="line"><span class="string">正是基于上述的特点 django能够非常好的做到分组开发(每个人只写自己的app)</span></span><br><span class="line"><span class="string">作为组长 只需要将手下书写的app全部拷贝到一个新的django项目中 然后在配置文件里面注册所有的app再利用路由分发的特点将所有的app整合起来</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">当一个django项目中的url特别多的时候 总路由urls.py代码非常冗余不好维护</span></span><br><span class="line"><span class="string">这个时候也可以利用路由分发来减轻总路由的压力</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">利用路由分发之后 总路由不再干路由与视图函数的直接对应关系</span></span><br><span class="line"><span class="string">而是做一个分发处理</span></span><br><span class="line"><span class="string">	识别当前url是属于哪个应用下的 直接分发给对应的应用去处理</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 总路由</span></span><br><span class="line"><span class="keyword">from</span> app01 <span class="keyword">import</span> urls <span class="keyword">as</span> app01_urls</span><br><span class="line"><span class="keyword">from</span> app02 <span class="keyword">import</span> urls <span class="keyword">as</span> app02_urls</span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r'^admin/'</span>, admin.site.urls),</span><br><span class="line">    <span class="comment"># 1.路由分发</span></span><br><span class="line">    url(<span class="string">r'^app01/'</span>,include(app01_urls)),  <span class="comment"># 只要url前缀是app01开头 全部交给app01处理</span></span><br><span class="line">    url(<span class="string">r'^app02/'</span>,include(app02_urls))   <span class="comment"># 只要url前缀是app02开头 全部交给app02处理</span></span><br><span class="line">  </span><br><span class="line">    <span class="comment"># 2.终极写法  推荐使用</span></span><br><span class="line">    url(<span class="string">r'^app01/'</span>,include(<span class="string">'app01.urls'</span>)),</span><br><span class="line">    url(<span class="string">r'^app02/'</span>,include(<span class="string">'app02.urls'</span>))</span><br><span class="line">    <span class="comment"># 注意事项:总路由里面的url千万不能加$结尾</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 子路由</span></span><br><span class="line">	<span class="comment"># app01 urls.py</span></span><br><span class="line">  <span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url</span><br><span class="line">  <span class="keyword">from</span> app01 <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">  urlpatterns = [</span><br><span class="line">      url(<span class="string">r'^reg/'</span>,views.reg)</span><br><span class="line">  ]</span><br><span class="line">  <span class="comment"># app02 urls.py</span></span><br><span class="line">  <span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url</span><br><span class="line">  <span class="keyword">from</span> app02 <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">  urlpatterns = [</span><br><span class="line">      url(<span class="string">r'^reg/'</span>,views.reg)</span><br><span class="line">  ]</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>django框架</tag>
      </tags>
  </entry>
  <entry>
    <title>[持久化]</title>
    <url>/2020/06/21/%E6%8C%81%E4%B9%85%E5%8C%96/</url>
    <content><![CDATA[<h2 id="一-持久化的作用"><a href="#一-持久化的作用" class="headerlink" title="一 持久化的作用"></a>一 持久化的作用</h2><h3 id="1-1-什么是持久化"><a href="#1-1-什么是持久化" class="headerlink" title="1.1 什么是持久化"></a>1.1 什么是持久化</h3><p>redis的所有数据保存在内存中，对数据的更新将异步的保存到硬盘上</p>
<h3 id="1-2-持久化的实现方式"><a href="#1-2-持久化的实现方式" class="headerlink" title="1.2 持久化的实现方式"></a>1.2 持久化的实现方式</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">快照：某时某刻数据的一个完成备份，</span><br><span class="line">	-mysql的Dump</span><br><span class="line">    -redis的RDB</span><br><span class="line">写日志：任何操作记录日志，要恢复数据，只要把日志重新走一遍即可</span><br><span class="line">	-mysql的 Binlog</span><br><span class="line">    -Hhase的 HLog</span><br><span class="line">    -Redis的 AOF</span><br></pre></td></tr></table></figure>

<h2 id="二-RDB"><a href="#二-RDB" class="headerlink" title="二 RDB"></a>二 RDB</h2><h3 id="2-1-什么是RDB"><a href="#2-1-什么是RDB" class="headerlink" title="2.1 什么是RDB"></a>2.1 什么是RDB</h3><p><img src="https://tva1.sinaimg.cn/large/006tNbRwgy1ga9zt9svljj30oo0d644s.jpg" alt="image-20191226120500154"></p>
<h3 id="2-2-触发机制-主要三种方式"><a href="#2-2-触发机制-主要三种方式" class="headerlink" title="2.2 触发机制-主要三种方式"></a>2.2 触发机制-主要三种方式</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">save(同步)</span></span><br><span class="line"><span class="string">1 客户端执行save命令----》redis服务端----》同步创建RDB二进制文件</span></span><br><span class="line"><span class="string">2 会造成redis的阻塞（数据量非常大的时候）</span></span><br><span class="line"><span class="string">3 文件策略：如果老的RDB存在，会替换老的</span></span><br><span class="line"><span class="string">4 复杂度 o(n)</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">bgsave(异步，Backgroud saving started)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">1 客户端执行save命令----》redis服务端----》异步创建RDB二进制文件（fork函数生成一个子进程（fork会阻塞reids），执行createRDB，执行成功，返回给reids消息）</span></span><br><span class="line"><span class="string">2 此时访问redis，会正常响应客户端</span></span><br><span class="line"><span class="string">3 文件策略：跟save相同，如果老的RDB存在，会替换老的</span></span><br><span class="line"><span class="string">4 复杂度 o(n)</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">自动（通过配置）</span></span><br><span class="line"><span class="string">配置   seconds   changes</span></span><br><span class="line"><span class="string">save   900        1</span></span><br><span class="line"><span class="string">save   300        10</span></span><br><span class="line"><span class="string">save   60         10000</span></span><br><span class="line"><span class="string">如果60s中改变了1w条数据，自动生成rdb</span></span><br><span class="line"><span class="string">如果300s中改变了10条数据，自动生成rdb</span></span><br><span class="line"><span class="string">如果900s中改变了1条数据，自动生成rdb</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">以上三条符合任意一条，就自动生成rdb，内部使用bgsave</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#配置：</span></span><br><span class="line">save <span class="number">900</span> <span class="number">1</span> <span class="comment">#配置一条</span></span><br><span class="line">save <span class="number">300</span> <span class="number">10</span> <span class="comment">#配置一条</span></span><br><span class="line">save <span class="number">60</span> <span class="number">10000</span> <span class="comment">#配置一条</span></span><br><span class="line">dbfilename dump.rdb  <span class="comment">#rdb文件的名字，默认为dump.rdb</span></span><br><span class="line">dir ./ <span class="comment">#rdb文件存在当前目录</span></span><br><span class="line"></span><br><span class="line">stop-writes-on-bgsave-error yes <span class="comment">#如果bgsave出现错误，是否停止写入，默认为yes</span></span><br><span class="line">rdbcompression yes <span class="comment">#采用压缩格式</span></span><br><span class="line">rdbchecksum yes <span class="comment">#是否对rdb文件进行校验和检验</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#最佳配置</span></span><br><span class="line">save <span class="number">900</span> <span class="number">1</span> </span><br><span class="line">save <span class="number">300</span> <span class="number">10</span> </span><br><span class="line">save <span class="number">60</span> <span class="number">10000</span> </span><br><span class="line">dbfilename dump-$&#123;port&#125;.rdb  <span class="comment">#以端口号作为文件名，可能一台机器上很多reids，不会乱</span></span><br><span class="line">dir /bigdiskpath <span class="comment">#保存路径放到一个大硬盘位置目录</span></span><br><span class="line">stop-writes-on-bgsave-error yes <span class="comment">#出现错误停止</span></span><br><span class="line">rdbcompression yes <span class="comment">#压缩</span></span><br><span class="line">rdbchecksum yes <span class="comment">#校验</span></span><br></pre></td></tr></table></figure>

<h3 id="2-3-触发机制-不容忽略的方式"><a href="#2-3-触发机制-不容忽略的方式" class="headerlink" title="2.3 触发机制-不容忽略的方式"></a>2.3 触发机制-不容忽略的方式</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> 全量复制 <span class="comment">#没有执行save和bgsave没有添加rdb策略，还会生成rdb文件，如果开启主从复制，主会自动生成rdb</span></span><br><span class="line"><span class="number">2</span> debug reload <span class="comment">#debug级别的重启，不会将内存中的数据清空</span></span><br><span class="line"><span class="number">3</span> shutdown save<span class="comment">#关闭会出发rdb的生成</span></span><br></pre></td></tr></table></figure>

<h3 id="2-4-试验"><a href="#2-4-试验" class="headerlink" title="2.4 试验"></a>2.4 试验</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="三-AOF"><a href="#三-AOF" class="headerlink" title="三 AOF"></a>三 AOF</h3><h3 id="3-1-RDB问题"><a href="#3-1-RDB问题" class="headerlink" title="3.1 RDB问题"></a>3.1 RDB问题</h3><p>耗时，耗性能：</p>
<p>不可控，可能会丢失数据</p>
<h3 id="3-2-AOF介绍"><a href="#3-2-AOF介绍" class="headerlink" title="3.2 AOF介绍"></a>3.2 AOF介绍</h3><p>客户端每写入一条命令，都记录一条日志，放到日志文件中，如果出现宕机，可以将数据完全恢复</p>
<h3 id="3-3-AOF的三种策略"><a href="#3-3-AOF的三种策略" class="headerlink" title="3.3 AOF的三种策略"></a>3.3 AOF的三种策略</h3><p>日志不是直接写到硬盘上，而是先放在缓冲区，缓冲区根据一些策略，写到硬盘上</p>
<p>always：redis–》写命令刷新的缓冲区—》每条命令fsync到硬盘—》AOF文件</p>
<p>everysec（默认值）：redis——》写命令刷新的缓冲区—》每秒把缓冲区fsync到硬盘–》AOF文件</p>
<p>no:redis——》写命令刷新的缓冲区—》操作系统决定，缓冲区fsync到硬盘–》AOF文件</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>always</th>
<th>everysec</th>
<th>no</th>
</tr>
</thead>
<tbody><tr>
<td>优点</td>
<td>不丢失数据</td>
<td>每秒一次fsync，丢失1秒数据</td>
<td>不用管</td>
</tr>
<tr>
<td>缺点</td>
<td>IO开销大，一般的sata盘只有几百TPS</td>
<td>丢1秒数据</td>
<td>不可控</td>
</tr>
</tbody></table>
<h3 id="3-4-AOF-重写"><a href="#3-4-AOF-重写" class="headerlink" title="3.4 AOF 重写"></a>3.4 AOF 重写</h3><p>随着命令的逐步写入，并发量的变大， AOF文件会越来越大，通过AOF重写来解决该问题</p>
<table>
<thead>
<tr>
<th>原生AOF</th>
<th>AOF重写</th>
</tr>
</thead>
<tbody><tr>
<td>set hello world<br/>set hello java<br/>set hello hehe<br/>incr counter<br/>incr counter<br/>rpush mylist a<br/>rpush mylist b<br/>rpush mylist c<br/>过期数据</td>
<td>set hello hehe<br/>set counter 2<br/>rpush mylist a b c</td>
</tr>
</tbody></table>
<p>本质就是把过期的，无用的，重复的，可以优化的命令，来优化</p>
<p>这样可以减少磁盘占用量，加速恢复速度</p>
<h4 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h4><p>bgrewriteaof：</p>
<p>客户端向服务端发送bgrewriteaof命令，服务端会起一个fork进程，完成AOF重写</p>
<h4 id="AOF重写配置："><a href="#AOF重写配置：" class="headerlink" title="AOF重写配置："></a>AOF重写配置：</h4><table>
<thead>
<tr>
<th>配置名</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>auto-aof-rewrite-min-size</td>
<td>AOF文件重写需要尺寸</td>
</tr>
<tr>
<td>auto-aof-rewrite-percentage</td>
<td>AOF文件增长率</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>统计名</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>aof_current_size</td>
<td>AOF当前尺寸（单位：字节）</td>
</tr>
<tr>
<td>aof_base_size</td>
<td>AOF上次启动和重写的尺寸（单位：字节）</td>
</tr>
</tbody></table>
<p>自动触发时机（两个条件同时满足）：</p>
<p>aof_current_size&gt;auto-aof-rewrite-min-size：当前尺寸大于重写需要尺寸</p>
<p>(aof_current_size-aof_base_size)/aof_base_size&gt;auto-aof-rewrite-percentage:（增长率）当前尺寸减去上次重写的尺寸，除以上次重写的尺寸如果大于配置中的增长率</p>
<h4 id="重写流程"><a href="#重写流程" class="headerlink" title="重写流程"></a>重写流程</h4><p><img src="https://tva1.sinaimg.cn/large/006tNbRwgy1gadsmknx2sj30fy0hw78l.jpg" alt="image-20191229185839519"></p>
<h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">appendonly yes <span class="comment">#将该选项设置为yes，打开</span></span><br><span class="line">appendfilename <span class="string">"appendonly-$&#123;port&#125;.aof"</span> <span class="comment">#文件保存的名字</span></span><br><span class="line">appendfsync everysec <span class="comment">#采用第二种策略</span></span><br><span class="line">dir /bigdiskpath <span class="comment">#存放的路径</span></span><br><span class="line">no-appendfsync-on-rewrite yes <span class="comment">#在aof重写的时候，是否要做aof的append操作，因为aof重写消耗性能，磁盘消耗，正常aof写磁盘有一定的冲突，这段期间的数据，允许丢失</span></span><br></pre></td></tr></table></figure>

<h3 id="3-5-AOF-重写演示"><a href="#3-5-AOF-重写演示" class="headerlink" title="3.5 AOF 重写演示"></a>3.5 AOF 重写演示</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="四-RDB和AOF的选择"><a href="#四-RDB和AOF的选择" class="headerlink" title="四 RDB和AOF的选择"></a>四 RDB和AOF的选择</h2><h3 id="4-1-rdb和aof的比较"><a href="#4-1-rdb和aof的比较" class="headerlink" title="4.1 rdb和aof的比较"></a>4.1 rdb和aof的比较</h3><table>
<thead>
<tr>
<th>命令</th>
<th>rdb</th>
<th>aof</th>
</tr>
</thead>
<tbody><tr>
<td>启动优先级</td>
<td>低</td>
<td>高(挂掉重启，会加载aof的数据)</td>
</tr>
<tr>
<td>体积</td>
<td>小</td>
<td>大</td>
</tr>
<tr>
<td>恢复速度</td>
<td>快</td>
<td>慢</td>
</tr>
<tr>
<td>数据安全性</td>
<td>丢数据</td>
<td>根据策略决定</td>
</tr>
<tr>
<td>轻重</td>
<td>重</td>
<td>轻</td>
</tr>
</tbody></table>
<h3 id="4-2-rdb最佳策略"><a href="#4-2-rdb最佳策略" class="headerlink" title="4.2  rdb最佳策略"></a>4.2  rdb最佳策略</h3><p>rdb关掉，主从操作时</p>
<p>集中管理：按天，按小时备份数据</p>
<p>主从配置，从节点打开</p>
<h3 id="4-3-aof最佳策略"><a href="#4-3-aof最佳策略" class="headerlink" title="4.3 aof最佳策略"></a>4.3 aof最佳策略</h3><p>开：缓存和存储，大部分情况都打开，</p>
<p>aof重写集中管理</p>
<p>everysec：通过每秒刷新的策略</p>
<h3 id="4-4-最佳策略"><a href="#4-4-最佳策略" class="headerlink" title="4.4 最佳策略"></a>4.4 最佳策略</h3><p>小分片：每个redis的最大内存为4g</p>
<p>缓存或存储：根据特性，使用不通策略</p>
<p>时时监控硬盘，内存，负载网络等</p>
<p>有足够内存</p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>[用Hexo+Github搭建个人博客]</title>
    <url>/2020/07/08/%E7%94%A8Hexo-Github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h1 id="hexo框架搭建个人博客"><a href="#hexo框架搭建个人博客" class="headerlink" title="hexo框架搭建个人博客"></a>hexo框架搭建个人博客</h1><h2 id="1-github配置"><a href="#1-github配置" class="headerlink" title="1. github配置"></a>1. github配置</h2><h3 id="下载安装git"><a href="#下载安装git" class="headerlink" title="下载安装git"></a>下载安装git</h3><h3 id="https-git-scm-com"><a href="#https-git-scm-com" class="headerlink" title="https://git-scm.com/"></a><a href="https://git-scm.com/" target="_blank" rel="noopener">https://git-scm.com/</a></h3><h3 id="桌面右击打开Git-Bash-Here"><a href="#桌面右击打开Git-Bash-Here" class="headerlink" title="桌面右击打开Git Bash Here"></a>桌面右击打开Git Bash Here</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git config --global user.name <span class="string">"用户名"</span></span><br><span class="line"></span><br><span class="line">$ git config --global user.email <span class="string">"邮箱"</span></span><br></pre></td></tr></table></figure>

<h3 id="登录github"><a href="#登录github" class="headerlink" title="登录github"></a>登录github</h3><p><img src="/images/github.png" alt="github.png"></p>
<h3 id="创建新仓库"><a href="#创建新仓库" class="headerlink" title="创建新仓库"></a>创建新仓库</h3><p><img src="/images/hexo%20b6a26e944b45432b84f717029640e041.png" alt="hexo%20b6a26e944b45432b84f717029640e041.png"></p>
<h3 id="仓库名是固定的，用户名-github-io，这边已经创建过，所以飘红"><a href="#仓库名是固定的，用户名-github-io，这边已经创建过，所以飘红" class="headerlink" title="仓库名是固定的，用户名+github.io，这边已经创建过，所以飘红"></a>仓库名是固定的，用户名+github.io，这边已经创建过，所以飘红</h3><p><img src="/images/2.png" alt="2.png"></p>
<h3 id="生成key，在到ssh-key位置"><a href="#生成key，在到ssh-key位置" class="headerlink" title="生成key，在到ssh-key位置"></a>生成key，在到ssh-key位置</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ssh-keygen -t -rsa -C <span class="string">"fastsword66@gmail.com"</span></span><br></pre></td></tr></table></figure>

<p><img src="/images/ssh-keygen.png" alt="ssh-keygen.png"></p>
<h3 id="找到ssh-keygen目录，复制id-rsa-pub中的内容"><a href="#找到ssh-keygen目录，复制id-rsa-pub中的内容" class="headerlink" title="找到ssh-keygen目录，复制id_rsa.pub中的内容"></a>找到ssh-keygen目录，复制id_rsa.pub中的内容</h3><p><img src="/images/ssh-keygen%201.png" alt="ssh-keygen%201.png"></p>
<h3 id="到github的settings中设置ssh-keys，把复制的内容copy进去"><a href="#到github的settings中设置ssh-keys，把复制的内容copy进去" class="headerlink" title="到github的settings中设置ssh-keys，把复制的内容copy进去"></a>到github的settings中设置ssh-keys，把复制的内容copy进去</h3><p><img src="/images/ssh.png" alt="ssh.png"></p>
<p><img src="/images/copy-key.png" alt="copy-key.png"></p>
<h3 id="确认key是否能够使用"><a href="#确认key是否能够使用" class="headerlink" title="确认key是否能够使用"></a>确认key是否能够使用</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ssh -T git@github.com</span><br></pre></td></tr></table></figure>

<h2 id="2-hexo框架"><a href="#2-hexo框架" class="headerlink" title="2. hexo框架"></a>2. hexo框架</h2><h3 id="查看npm版本号"><a href="#查看npm版本号" class="headerlink" title="查看npm版本号"></a>查看npm版本号</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm -v</span><br></pre></td></tr></table></figure>

<h3 id="如果有就通过npm安装hexo"><a href="#如果有就通过npm安装hexo" class="headerlink" title="如果有就通过npm安装hexo"></a>如果有就通过npm安装hexo</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g hexo</span><br></pre></td></tr></table></figure>

<p><img src="/images/hexo.png" alt="hexo.png"></p>
<h3 id="选个位置创建个新文件夹myblog，在文件夹中右键打开Git-Bash-Here，初始化hexo"><a href="#选个位置创建个新文件夹myblog，在文件夹中右键打开Git-Bash-Here，初始化hexo" class="headerlink" title="选个位置创建个新文件夹myblog，在文件夹中右键打开Git Bash Here，初始化hexo"></a>选个位置创建个新文件夹myblog，在文件夹中右键打开Git Bash Here，初始化hexo</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo init</span><br></pre></td></tr></table></figure>

<h3 id="安装hexo-deploy-git，方便以后用hexo-deoloy去部署网站"><a href="#安装hexo-deploy-git，方便以后用hexo-deoloy去部署网站" class="headerlink" title="安装hexo-deploy-git，方便以后用hexo-deoloy去部署网站"></a>安装hexo-deploy-git，方便以后用hexo-deoloy去部署网站</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<h3 id="本地测试是否能预览博客，复制地址"><a href="#本地测试是否能预览博客，复制地址" class="headerlink" title="本地测试是否能预览博客，复制地址"></a>本地测试是否能预览博客，复制地址</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p><img src="/images/hexo%20b6a26e944b45432b84f717029640e041%201.png" alt="hexo%20b6a26e944b45432b84f717029640e041%201.png"></p>
<h3 id="打开-config设置deployment"><a href="#打开-config设置deployment" class="headerlink" title="打开_config设置deployment"></a>打开_config设置deployment</h3><p><img src="/images/deployment.png" alt="deployment.png"></p>
<h3 id="repository从你的仓库中copy"><a href="#repository从你的仓库中copy" class="headerlink" title="repository从你的仓库中copy"></a>repository从你的仓库中copy</h3><p><img src="/images/1593523025(1).png" alt="1593523025(1).png"></p>
<h3 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ctrl+c 退出server</span><br><span class="line"></span><br><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<h2 id="3-更换主题"><a href="#3-更换主题" class="headerlink" title="3. 更换主题"></a>3. 更换主题</h2><h3 id="到hexo官网：-https-hexo-io-zh-cn"><a href="#到hexo官网：-https-hexo-io-zh-cn" class="headerlink" title="到hexo官网： https://hexo.io/zh-cn/"></a>到hexo官网： <a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">https://hexo.io/zh-cn/</a></h3><p><img src="/images/hexo%20b6a26e944b45432b84f717029640e041%202.png" alt="hexo%20b6a26e944b45432b84f717029640e041%202.png"></p>
<p><img src="/images/2%201.png" alt="2%201.png"></p>
<h3 id="下载主题"><a href="#下载主题" class="headerlink" title="下载主题"></a>下载主题</h3><p><img src="/images/hexo%20b6a26e944b45432b84f717029640e041%203.png" alt="hexo%20b6a26e944b45432b84f717029640e041%203.png"></p>
<h3 id="解压后放到myblog中的themes"><a href="#解压后放到myblog中的themes" class="headerlink" title="解压后放到myblog中的themes"></a>解压后放到myblog中的themes</h3><p><img src="/images/1593525431(1).png" alt="1593525431(1).png"></p>
<h3 id="打开-config设置主题，名称是主题文件夹名字，可以更改"><a href="#打开-config设置主题，名称是主题文件夹名字，可以更改" class="headerlink" title="打开_config设置主题，名称是主题文件夹名字，可以更改"></a>打开_config设置主题，名称是主题文件夹名字，可以更改</h3><p><img src="/images/hexo%20b6a26e944b45432b84f717029640e041%204.png" alt="hexo%20b6a26e944b45432b84f717029640e041%204.png"></p>
<h3 id="生成静态文件-1"><a href="#生成静态文件-1" class="headerlink" title="生成静态文件"></a>生成静态文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<h3 id="部署发布"><a href="#部署发布" class="headerlink" title="部署发布"></a>部署发布</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<h3 id="完成，是不是非常简单"><a href="#完成，是不是非常简单" class="headerlink" title="完成，是不是非常简单"></a>完成，是不是非常简单</h3><p><img src="/images/hexo%20b6a26e944b45432b84f717029640e041%205.png" alt="hexo%20b6a26e944b45432b84f717029640e041%205.png"></p>
<h2 id="Ending…"><a href="#Ending…" class="headerlink" title="Ending…"></a>Ending…</h2>]]></content>
      <categories>
        <category>技能get</category>
      </categories>
      <tags>
        <tag>博客搭建</tag>
      </tags>
  </entry>
  <entry>
    <title>[模型层]</title>
    <url>/2020/02/12/%E6%A8%A1%E5%9E%8B%E5%B1%82/</url>
    <content><![CDATA[<h3 id="单表操作"><a href="#单表操作" class="headerlink" title="单表操作"></a>单表操作</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    age = models.IntegerField()</span><br><span class="line">    register_time = models.DateField()  <span class="comment"># 年月日</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    DateField</span></span><br><span class="line"><span class="string">    DateTimeField</span></span><br><span class="line"><span class="string">        两个重要参数 </span></span><br><span class="line"><span class="string">        auto_now:每次操作数据的时候 该字段会自动将当前时间更新</span></span><br><span class="line"><span class="string">        auto_now_add:在创建数据的时候会自动将当前创建时间记录下来 之后只要不认为的修改 那么就一直不变</span></span><br><span class="line"><span class="string">    """</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># django自带的sqlite3数据库对日期格式不是很敏感 处理的时候容易出错</span></span><br><span class="line"><span class="comment"># 增</span></span><br><span class="line">    <span class="comment"># res = models.User.objects.create(name='jason',age=18,register_time='2002-1-21')</span></span><br><span class="line">    <span class="comment"># print(res)</span></span><br><span class="line">    <span class="comment"># import datetime</span></span><br><span class="line">    <span class="comment"># ctime = datetime.datetime.now()</span></span><br><span class="line">    <span class="comment"># user_obj = models.User(name='egon',age=84,register_time=ctime)</span></span><br><span class="line">    <span class="comment"># user_obj.save()</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 删</span></span><br><span class="line">    <span class="comment"># res = models.User.objects.filter(pk=2).delete()</span></span><br><span class="line">    <span class="comment"># print(res)</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    pk会自动查找到当前表的主键字段 指代的就是当前表的主键字段</span></span><br><span class="line"><span class="string">    用了pk之后 你就不需要指代当前表的主键字段到底叫什么了</span></span><br><span class="line"><span class="string">        uid</span></span><br><span class="line"><span class="string">        pid</span></span><br><span class="line"><span class="string">        sid</span></span><br><span class="line"><span class="string">        ...</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="comment"># user_obj = models.User.objects.filter(pk=1).first()</span></span><br><span class="line">    <span class="comment"># user_obj.delete()</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 修改</span></span><br><span class="line">    <span class="comment"># models.User.objects.filter(pk=4).update(name='egonDSB')</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># user_obj = models.User.objects.get(pk=4)</span></span><br><span class="line">    <span class="comment"># user_obj = models.User.objects.filter(pk=6)</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    get方法返回的直接就是当前数据对象</span></span><br><span class="line"><span class="string">    但是该方法不推荐使用</span></span><br><span class="line"><span class="string">        一旦数据不存在该方法会直接报错</span></span><br><span class="line"><span class="string">        而filter则不会</span></span><br><span class="line"><span class="string">        所以我们还是用filter</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="comment"># user_obj.name = 'egonPPP'</span></span><br><span class="line">    <span class="comment"># user_obj.save()</span></span><br></pre></td></tr></table></figure>

<h3 id="必知必会13条"><a href="#必知必会13条" class="headerlink" title="必知必会13条"></a>必知必会13条</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 必知必会13条</span></span><br><span class="line">    <span class="comment"># 1.all()  查询所有数据</span></span><br><span class="line">    <span class="comment"># 2.filter()     带有过滤条件的查询</span></span><br><span class="line">    <span class="comment"># 3.get()        直接拿数据对象 但是条件不存在直接报错</span></span><br><span class="line">    <span class="comment"># 4.first()      拿queryset里面第一个元素</span></span><br><span class="line">    <span class="comment"># res = models.User.objects.all().first()</span></span><br><span class="line">    <span class="comment"># print(res)</span></span><br><span class="line">    <span class="comment"># 5.last()</span></span><br><span class="line">    <span class="comment"># res = models.User.objects.all().last()</span></span><br><span class="line">    <span class="comment"># print(res)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 6.values()  可以指定获取的数据字段  select name,age from ...     列表套字典</span></span><br><span class="line">    <span class="comment"># res = models.User.objects.values('name','age')  # &lt;QuerySet [&#123;'name': 'jason', 'age': 18&#125;, &#123;'name': 'egonPPP', 'age': 84&#125;]&gt;</span></span><br><span class="line">    <span class="comment"># print(res)</span></span><br><span class="line">    <span class="comment"># 7.values_list()  列表套元祖</span></span><br><span class="line">    <span class="comment"># res = models.User.objects.values_list('name','age')  # &lt;QuerySet [('jason', 18), ('egonPPP', 84)]&gt;</span></span><br><span class="line">    <span class="comment"># print(res)</span></span><br><span class="line">    <span class="comment"># """</span></span><br><span class="line">    <span class="comment">#  # 查看内部封装的sql语句</span></span><br><span class="line">    <span class="comment">#  上述查看sql语句的方式  只能用于queryset对象</span></span><br><span class="line">    <span class="comment">#  只有queryset对象才能够点击query查看内部的sql语句</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment"># """</span></span><br><span class="line">    <span class="comment"># 8.distinct()  去重</span></span><br><span class="line">    <span class="comment"># res = models.User.objects.values('name','age').distinct()</span></span><br><span class="line">    <span class="comment"># print(res)</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    去重一定要是一模一样的数据</span></span><br><span class="line"><span class="string">    如果带有主键那么肯定不一样 你在往后的查询中一定不要忽略主键</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="comment"># 9.order_by()</span></span><br><span class="line">    <span class="comment"># res = models.User.objects.order_by('age')  # 默认升序</span></span><br><span class="line">    <span class="comment"># res = models.User.objects.order_by('-age')  # 降序</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment"># print(res)</span></span><br><span class="line">    <span class="comment"># 10.reverse()  反转的前提是 数据已经排过序了  order_by()</span></span><br><span class="line">    <span class="comment"># res = models.User.objects.all()</span></span><br><span class="line">    <span class="comment"># res1 = models.User.objects.order_by('age').reverse()</span></span><br><span class="line">    <span class="comment"># print(res,res1)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 11.count()  统计当前数据的个数</span></span><br><span class="line">    <span class="comment"># res = models.User.objects.count()</span></span><br><span class="line">    <span class="comment"># print(res)</span></span><br><span class="line">    <span class="comment"># 12.exclude()  排除在外</span></span><br><span class="line">    <span class="comment"># res = models.User.objects.exclude(name='jason')</span></span><br><span class="line">    <span class="comment"># print(res)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 13.exists()  基本用不到因为数据本身就自带布尔值  返回的是布尔值</span></span><br><span class="line">    <span class="comment"># res = models.User.objects.filter(pk=10).exists()</span></span><br><span class="line">    <span class="comment"># print(res)</span></span><br></pre></td></tr></table></figure>

<h3 id="测试脚本"><a href="#测试脚本" class="headerlink" title="测试脚本"></a>测试脚本</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">当你只是想测试django中的某一个py文件内容 那么你可以不用书写前后端交互的形式</span></span><br><span class="line"><span class="string">而是直接写一个测试脚本即可</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">脚本代码无论是写在应用下的tests.py还是自己单独开设py文件都可以</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment"># 测试环境的准备 去manage.py中拷贝前四行代码 然后自己写两行</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    os.environ.setdefault(<span class="string">"DJANGO_SETTINGS_MODULE"</span>, <span class="string">"day64.settings"</span>)</span><br><span class="line">    <span class="keyword">import</span> django</span><br><span class="line">    django.setup()</span><br><span class="line">    <span class="comment"># 在这个代码块的下面就可以测试django里面的单个py文件了</span></span><br></pre></td></tr></table></figure>

<h3 id="查看内部sql语句的方式"><a href="#查看内部sql语句的方式" class="headerlink" title="查看内部sql语句的方式"></a>查看内部sql语句的方式</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 方式1</span></span><br><span class="line">res = models.User.objects.values_list(<span class="string">'name'</span>,<span class="string">'age'</span>)  <span class="comment"># &lt;QuerySet [('jason', 18), ('egonPPP', 84)]&gt;</span></span><br><span class="line">print(res.query)</span><br><span class="line">queryset对象才能够点击query查看内部的sql语句</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方式2:所有的sql语句都能查看</span></span><br><span class="line"><span class="comment"># 去配置文件中配置一下即可</span></span><br><span class="line">LOGGING = &#123;</span><br><span class="line">    <span class="string">'version'</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">'disable_existing_loggers'</span>: <span class="literal">False</span>,</span><br><span class="line">    <span class="string">'handlers'</span>: &#123;</span><br><span class="line">        <span class="string">'console'</span>:&#123;</span><br><span class="line">            <span class="string">'level'</span>:<span class="string">'DEBUG'</span>,</span><br><span class="line">            <span class="string">'class'</span>:<span class="string">'logging.StreamHandler'</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'loggers'</span>: &#123;</span><br><span class="line">        <span class="string">'django.db.backends'</span>: &#123;</span><br><span class="line">            <span class="string">'handlers'</span>: [<span class="string">'console'</span>],</span><br><span class="line">            <span class="string">'propagate'</span>: <span class="literal">True</span>,</span><br><span class="line">            <span class="string">'level'</span>:<span class="string">'DEBUG'</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="神奇的双下划线查询"><a href="#神奇的双下划线查询" class="headerlink" title="神奇的双下划线查询"></a>神奇的双下划线查询</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 一对多外键增删改查</span></span><br><span class="line">    <span class="comment"># 增</span></span><br><span class="line">    <span class="comment"># 1  直接写实际字段 id</span></span><br><span class="line">    <span class="comment"># models.Book.objects.create(title='论语',price=899.23,publish_id=1)</span></span><br><span class="line">    <span class="comment"># models.Book.objects.create(title='聊斋',price=444.23,publish_id=2)</span></span><br><span class="line">    <span class="comment"># models.Book.objects.create(title='老子',price=333.66,publish_id=1)</span></span><br><span class="line">    <span class="comment"># 2  虚拟字段 对象</span></span><br><span class="line">    <span class="comment"># publish_obj = models.Publish.objects.filter(pk=2).first()</span></span><br><span class="line">    <span class="comment"># models.Book.objects.create(title='红楼梦',price=666.23,publish=publish_obj)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 删</span></span><br><span class="line">    <span class="comment"># models.Publish.objects.filter(pk=1).delete()  # 级联删除</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 修改</span></span><br><span class="line">    <span class="comment"># models.Book.objects.filter(pk=1).update(publish_id=2)</span></span><br><span class="line">    <span class="comment"># publish_obj = models.Publish.objects.filter(pk=1).first()</span></span><br><span class="line">    <span class="comment"># models.Book.objects.filter(pk=1).update(publish=publish_obj)</span></span><br></pre></td></tr></table></figure>

<h3 id="一对多外键增删改查"><a href="#一对多外键增删改查" class="headerlink" title="一对多外键增删改查"></a>一对多外键增删改查</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 如何给书籍添加作者？</span></span><br><span class="line">    book_obj = models.Book.objects.filter(pk=<span class="number">1</span>).first()</span><br><span class="line">    <span class="comment"># print(book_obj.authors)  # 就类似于你已经到了第三张关系表了</span></span><br><span class="line">    <span class="comment"># book_obj.authors.add(1)  # 书籍id为1的书籍绑定一个主键为1 的作者</span></span><br><span class="line">    <span class="comment"># book_obj.authors.add(2,3)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># author_obj = models.Author.objects.filter(pk=1).first()</span></span><br><span class="line">    <span class="comment"># author_obj1 = models.Author.objects.filter(pk=2).first()</span></span><br><span class="line">    <span class="comment"># author_obj2 = models.Author.objects.filter(pk=3).first()</span></span><br><span class="line">    <span class="comment"># book_obj.authors.add(author_obj)</span></span><br><span class="line">    <span class="comment"># book_obj.authors.add(author_obj1,author_obj2)</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    add给第三张关系表添加数据</span></span><br><span class="line"><span class="string">        括号内既可以传数字也可以传对象 并且都支持多个</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 删</span></span><br><span class="line">    <span class="comment"># book_obj.authors.remove(2)</span></span><br><span class="line">    <span class="comment"># book_obj.authors.remove(1,3)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># author_obj = models.Author.objects.filter(pk=2).first()</span></span><br><span class="line">    <span class="comment"># author_obj1 = models.Author.objects.filter(pk=3).first()</span></span><br><span class="line">    <span class="comment"># book_obj.authors.remove(author_obj,author_obj1)</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    remove</span></span><br><span class="line"><span class="string">        括号内既可以传数字也可以传对象 并且都支持多个</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 修改</span></span><br><span class="line">    <span class="comment"># book_obj.authors.set([1,2])  # 括号内必须给一个可迭代对象</span></span><br><span class="line">    <span class="comment"># book_obj.authors.set([3])  # 括号内必须给一个可迭代对象</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># author_obj = models.Author.objects.filter(pk=2).first()</span></span><br><span class="line">    <span class="comment"># author_obj1 = models.Author.objects.filter(pk=3).first()</span></span><br><span class="line">    <span class="comment"># book_obj.authors.set([author_obj,author_obj1])  # 括号内必须给一个可迭代对象</span></span><br><span class="line"></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    set</span></span><br><span class="line"><span class="string">        括号内必须传一个可迭代对象，该对象内既可以数字也可以对象 并且都支持多个</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 清空</span></span><br><span class="line">    <span class="comment"># 在第三张关系表中清空某个书籍与作者的绑定关系</span></span><br><span class="line">    book_obj.authors.clear()</span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    clear</span></span><br><span class="line"><span class="string">        括号内不要加任何参数</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    """</span></span><br></pre></td></tr></table></figure>

<h3 id="多对多外键增删改查"><a href="#多对多外键增删改查" class="headerlink" title="多对多外键增删改查"></a>多对多外键增删改查</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 正向</span><br><span class="line"># 反向</span><br><span class="line">	外键字段在我手上那么，我查你就是正向</span><br><span class="line">  外键字段如果不在手上，我查你就是反向</span><br><span class="line">  </span><br><span class="line">  book &gt;&gt;&gt;外键字段在书那儿(正向)&gt;&gt;&gt; publish</span><br><span class="line">  publish	&gt;&gt;&gt;外键字段在书那儿(反向)&gt;&gt;&gt;book</span><br><span class="line">  </span><br><span class="line">  一对一和多对多正反向的判断也是如此</span><br><span class="line">  </span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">正向查询按字段</span><br><span class="line">反向查询按表名小写</span><br><span class="line">				_set</span><br><span class="line">				...</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>

<h3 id="正反向的概念"><a href="#正反向的概念" class="headerlink" title="正反向的概念"></a>正反向的概念</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 正向# 反向    外键字段在我手上那么，我查你就是正向  外键字段如果不在手上，我查你就是反向    book &gt;&gt;&gt;外键字段在书那儿(正向)&gt;&gt;&gt; publish  publish   &gt;&gt;&gt;外键字段在书那儿(反向)&gt;&gt;&gt;book    一对一和多对多正反向的判断也是如此  """正向查询按字段反向查询按表名小写                _set                ..."""</span></span><br></pre></td></tr></table></figure>

<h1 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h1><h3 id="子查询-基于对象的跨表查询"><a href="#子查询-基于对象的跨表查询" class="headerlink" title="子查询(基于对象的跨表查询)"></a>子查询(基于对象的跨表查询)</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1.查询书籍主键为1的出版社</span></span><br><span class="line">    <span class="comment"># book_obj = models.Book.objects.filter(pk=1).first()</span></span><br><span class="line">    <span class="comment"># # 书查出版社 正向</span></span><br><span class="line">    <span class="comment"># res = book_obj.publish</span></span><br><span class="line">    <span class="comment"># print(res)</span></span><br><span class="line">    <span class="comment"># print(res.name)</span></span><br><span class="line">    <span class="comment"># print(res.addr)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2.查询书籍主键为2的作者</span></span><br><span class="line">    <span class="comment"># book_obj = models.Book.objects.filter(pk=2).first()</span></span><br><span class="line">    <span class="comment"># # 书查作者 正向</span></span><br><span class="line">    <span class="comment"># # res = book_obj.authors  # app01.Author.None</span></span><br><span class="line">    <span class="comment"># res = book_obj.authors.all()  # &lt;QuerySet [&lt;Author: Author object&gt;, &lt;Author: Author object&gt;]&gt;</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment"># print(res)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 3.查询作者jason的电话号码</span></span><br><span class="line">    <span class="comment"># author_obj = models.Author.objects.filter(name='jason').first()</span></span><br><span class="line">    <span class="comment"># res = author_obj.author_detail</span></span><br><span class="line">    <span class="comment"># print(res)</span></span><br><span class="line">    <span class="comment"># print(res.phone)</span></span><br><span class="line">    <span class="comment"># print(res.addr)</span></span><br><span class="line"></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    在书写orm语句的时候跟写sql语句一样的</span></span><br><span class="line"><span class="string">    不要企图一次性将orm语句写完 如果比较复杂 就写一点看一点</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    正向什么时候需要加.all()</span></span><br><span class="line"><span class="string">        当你的结果可能有多个的时候就需要加.all()</span></span><br><span class="line"><span class="string">        如果是一个则直接拿到数据对象</span></span><br><span class="line"><span class="string">            book_obj.publish</span></span><br><span class="line"><span class="string">            book_obj.authors.all()</span></span><br><span class="line"><span class="string">            author_obj.author_detail</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="comment"># 4.查询出版社是东方出版社出版的书</span></span><br><span class="line">    <span class="comment"># publish_obj = models.Publish.objects.filter(name='东方出版社').first()</span></span><br><span class="line">    <span class="comment"># 出版社查书  反向</span></span><br><span class="line">    <span class="comment"># res = publish_obj.book_set  # app01.Book.None</span></span><br><span class="line">    <span class="comment"># res = publish_obj.book_set.all()</span></span><br><span class="line">    <span class="comment"># print(res)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 5.查询作者是jason写过的书</span></span><br><span class="line">    <span class="comment"># author_obj = models.Author.objects.filter(name='jason').first()</span></span><br><span class="line">    <span class="comment"># 作者查书      反向</span></span><br><span class="line">    <span class="comment"># res = author_obj.book_set  # app01.Book.None</span></span><br><span class="line">    <span class="comment"># res = author_obj.book_set.all()</span></span><br><span class="line">    <span class="comment"># print(res)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 6.查询手机号是110的作者姓名</span></span><br><span class="line">    <span class="comment"># author_detail_obj = models.AuthorDetail.objects.filter(phone=110).first()</span></span><br><span class="line">    <span class="comment"># res = author_detail_obj.author</span></span><br><span class="line">    <span class="comment"># print(res.name)</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    基于对象 </span></span><br><span class="line"><span class="string">        反向查询的时候</span></span><br><span class="line"><span class="string">            当你的查询结果可以有多个的时候 就必须加_set.all()</span></span><br><span class="line"><span class="string">            当你的结果只有一个的时候 不需要加_set.all()</span></span><br><span class="line"><span class="string">        自己总结出 自己方便记忆的即可 每个人都可以不一样</span></span><br><span class="line"><span class="string">    """</span></span><br></pre></td></tr></table></figure>

<h3 id="联表查询-基于双下划线的跨表查询"><a href="#联表查询-基于双下划线的跨表查询" class="headerlink" title="联表查询(基于双下划线的跨表查询)"></a>联表查询(基于双下划线的跨表查询)</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 基于双下划线的跨表查询</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 1.查询jason的手机号和作者姓名</span></span><br><span class="line">    <span class="comment"># res = models.Author.objects.filter(name='jason').values('author_detail__phone','name')</span></span><br><span class="line">    <span class="comment"># print(res)</span></span><br><span class="line">    <span class="comment"># 反向</span></span><br><span class="line">    <span class="comment"># res = models.AuthorDetail.objects.filter(author__name='jason')  # 拿作者姓名是jason的作者详情</span></span><br><span class="line">    <span class="comment"># res = models.AuthorDetail.objects.filter(author__name='jason').values('phone','author__name')</span></span><br><span class="line">    <span class="comment"># print(res)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2.查询书籍主键为1的出版社名称和书的名称</span></span><br><span class="line">    <span class="comment"># res = models.Book.objects.filter(pk=1).values('title','publish__name')</span></span><br><span class="line">    <span class="comment"># print(res)</span></span><br><span class="line">    <span class="comment"># 反向</span></span><br><span class="line">    <span class="comment"># res = models.Publish.objects.filter(book__id=1).values('name','book__title')</span></span><br><span class="line">    <span class="comment"># print(res)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 3.查询书籍主键为1的作者姓名</span></span><br><span class="line">    <span class="comment"># res = models.Book.objects.filter(pk=1).values('authors__name')</span></span><br><span class="line">    <span class="comment"># print(res)</span></span><br><span class="line">    <span class="comment"># 反向</span></span><br><span class="line">    <span class="comment"># res = models.Author.objects.filter(book__id=1).values('name')</span></span><br><span class="line">    <span class="comment"># print(res)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 查询书籍主键是1的作者的手机号</span></span><br><span class="line">    <span class="comment"># book author authordetail</span></span><br><span class="line">    <span class="comment"># res = models.Book.objects.filter(pk=1).values('authors__author_detail__phone')</span></span><br><span class="line">    <span class="comment"># print(res)</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    你只要掌握了正反向的概念</span></span><br><span class="line"><span class="string">    以及双下划线</span></span><br><span class="line"><span class="string">    那么你就可以无限制的跨表</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    """</span></span><br></pre></td></tr></table></figure>

<h3 id="聚合查询"><a href="#聚合查询" class="headerlink" title="聚合查询"></a>聚合查询</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 聚合查询      aggregate</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    聚合查询通常情况下都是配合分组一起使用的</span></span><br><span class="line"><span class="string">    只要是跟数据库相关的模块 </span></span><br><span class="line"><span class="string">        基本上都在django.db.models里面</span></span><br><span class="line"><span class="string">        如果上述没有那么应该在django.db里面</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">from</span> app01 <span class="keyword">import</span> models</span><br><span class="line">    <span class="keyword">from</span> django.db.models <span class="keyword">import</span> Max,Min,Sum,Count,Avg</span><br><span class="line">    <span class="comment"># 1 所有书的平均价格</span></span><br><span class="line">    <span class="comment"># res = models.Book.objects.aggregate(Avg('price'))</span></span><br><span class="line">    <span class="comment"># print(res)</span></span><br><span class="line">    <span class="comment"># 2.上述方法一次性使用</span></span><br><span class="line">    res = models.Book.objects.aggregate(Max(<span class="string">'price'</span>),Min(<span class="string">'price'</span>),Sum(<span class="string">'price'</span>),Count(<span class="string">'pk'</span>),Avg(<span class="string">'price'</span>))</span><br><span class="line">    print(res)</span><br></pre></td></tr></table></figure>

<h3 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 分组查询  annotate</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    MySQL分组查询都有哪些特点</span></span><br><span class="line"><span class="string">        分组之后默认只能获取到分组的依据 组内其他字段都无法直接获取了</span></span><br><span class="line"><span class="string">            严格模式</span></span><br><span class="line"><span class="string">                ONLY_FULL_GROUP_BY</span></span><br><span class="line"><span class="string">                </span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">from</span> django.db.models <span class="keyword">import</span> Max, Min, Sum, Count, Avg</span><br><span class="line">    <span class="comment"># 1.统计每一本书的作者个数</span></span><br><span class="line">    <span class="comment"># res = models.Book.objects.annotate()  # models后面点什么 就是按什么分组</span></span><br><span class="line">    <span class="comment"># res = models.Book.objects.annotate(author_num=Count('authors')).values('title','author_num')</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    author_num是我们自己定义的字段 用来存储统计出来的每本书对应的作者个数</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="comment"># res1 = models.Book.objects.annotate(author_num=Count('authors__id')).values('title','author_num')</span></span><br><span class="line">    <span class="comment"># print(res,res1)</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    代码没有补全 不要怕 正常写</span></span><br><span class="line"><span class="string">    补全给你是pycharm给你的 到后面在服务器上直接书写代码 什么补全都没有 颜色提示也没有</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2.统计每个出版社卖的最便宜的书的价格(作业:复习原生SQL语句 写出来)</span></span><br><span class="line">    <span class="comment"># res = models.Publish.objects.annotate(min_price=Min('book__price')).values('name','min_price')</span></span><br><span class="line">    <span class="comment"># print(res)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 3.统计不止一个作者的图书</span></span><br><span class="line">        <span class="comment"># 1.先按照图书分组 求每一本书对应的作者个数</span></span><br><span class="line">        <span class="comment"># 2.过滤出不止一个作者的图书</span></span><br><span class="line">    <span class="comment"># res = models.Book.objects.annotate(author_num=Count('authors')).filter(author_num__gt=1).values('title','author_num')</span></span><br><span class="line">    <span class="comment"># """</span></span><br><span class="line">    <span class="comment"># 只要你的orm语句得出的结果还是一个queryset对象</span></span><br><span class="line">    <span class="comment"># 那么它就可以继续无限制的点queryset对象封装的方法</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment"># """</span></span><br><span class="line">    <span class="comment"># print(res)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 4.查询每个作者出的书的总价格</span></span><br><span class="line">    <span class="comment"># res = models.Author.objects.annotate(sum_price=Sum('book__price')).values('name','sum_price')</span></span><br><span class="line">    <span class="comment"># print(res)</span></span><br><span class="line"></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    如果我想按照指定的字段分组该如何处理呢？</span></span><br><span class="line"><span class="string">        models.Book.objects.values('price').annotate()</span></span><br><span class="line"><span class="string">    后续BBS作业会使用</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    你们的机器上如果出现分组查询报错的情况</span></span><br><span class="line"><span class="string">        你需要修改数据库严格模式</span></span><br><span class="line"><span class="string">    """</span></span><br></pre></td></tr></table></figure>

<h3 id="F与Q查询"><a href="#F与Q查询" class="headerlink" title="F与Q查询"></a>F与Q查询</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># F查询</span><br><span class="line">    # 1.查询卖出数大于库存数的书籍</span><br><span class="line">    # F查询</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    能够帮助你直接获取到表中某个字段对应的数据</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    from django.db.models import F</span><br><span class="line">    # res &#x3D; models.Book.objects.filter(maichu__gt&#x3D;F(&#39;kucun&#39;))</span><br><span class="line">    # print(res)</span><br><span class="line"></span><br><span class="line">    # 2.将所有书籍的价格提升500块</span><br><span class="line">    # models.Book.objects.update(price&#x3D;F(&#39;price&#39;) + 500)</span><br><span class="line"></span><br><span class="line">    # 3.将所有书的名称后面加上爆款两个字</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    在操作字符类型的数据的时候 F不能够直接做到字符串的拼接</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    from django.db.models.functions import Concat</span><br><span class="line">    from django.db.models import Value</span><br><span class="line">    models.Book.objects.update(title&#x3D;Concat(F(&#39;title&#39;), Value(&#39;爆款&#39;)))</span><br><span class="line">    # models.Book.objects.update(title&#x3D;F(&#39;title&#39;) + &#39;爆款&#39;)  # 所有的名称会全部变成空白</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Q查询</span></span><br><span class="line">    <span class="comment"># 1.查询卖出数大于100或者价格小于600的书籍</span></span><br><span class="line">    <span class="comment"># res = models.Book.objects.filter(maichu__gt=100,price__lt=600)</span></span><br><span class="line">    <span class="string">"""filter括号内多个参数是and关系"""</span></span><br><span class="line">    <span class="keyword">from</span> django.db.models <span class="keyword">import</span> Q</span><br><span class="line">    <span class="comment"># res = models.Book.objects.filter(Q(maichu__gt=100),Q(price__lt=600))  # Q包裹逗号分割 还是and关系</span></span><br><span class="line">    <span class="comment"># res = models.Book.objects.filter(Q(maichu__gt=100)|Q(price__lt=600))  # | or关系</span></span><br><span class="line">    <span class="comment"># res = models.Book.objects.filter(~Q(maichu__gt=100)|Q(price__lt=600))  # ~ not关系</span></span><br><span class="line">    <span class="comment"># print(res)  # &lt;QuerySet []&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Q的高阶用法  能够将查询条件的左边也变成字符串的形式</span></span><br><span class="line">    q = Q()</span><br><span class="line">    q.connector = <span class="string">'or'</span></span><br><span class="line">    q.children.append((<span class="string">'maichu__gt'</span>,<span class="number">100</span>))</span><br><span class="line">    q.children.append((<span class="string">'price__lt'</span>,<span class="number">600</span>))</span><br><span class="line">    res = models.Book.objects.filter(q)  <span class="comment"># 默认还是and关系</span></span><br><span class="line">    print(res)</span><br></pre></td></tr></table></figure>

<h3 id="django中如何开启事务"><a href="#django中如何开启事务" class="headerlink" title="django中如何开启事务"></a>django中如何开启事务</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">事务</span></span><br><span class="line"><span class="string">	ACID</span></span><br><span class="line"><span class="string">		原子性</span></span><br><span class="line"><span class="string">			不可分割的最小单位</span></span><br><span class="line"><span class="string">		一致性</span></span><br><span class="line"><span class="string">			跟原子性是相辅相成</span></span><br><span class="line"><span class="string">		隔离性</span></span><br><span class="line"><span class="string">			事务之间互相不干扰</span></span><br><span class="line"><span class="string">		持久性</span></span><br><span class="line"><span class="string">			事务一旦确认永久生效</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">	事务的回滚 </span></span><br><span class="line"><span class="string">		rollback</span></span><br><span class="line"><span class="string">	事务的确认</span></span><br><span class="line"><span class="string">		commit</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment"># 目前你只需要掌握Django中如何简单的开启事务</span></span><br><span class="line"><span class="comment"># 事务</span></span><br><span class="line">    <span class="keyword">from</span> django.db <span class="keyword">import</span> transaction</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> transaction.atomic():</span><br><span class="line">            <span class="comment"># sql1</span></span><br><span class="line">            <span class="comment"># sql2</span></span><br><span class="line">            ...</span><br><span class="line">            <span class="comment"># 在with代码快内书写的所有orm操作都是属于同一个事务</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(e)</span><br><span class="line">    print(<span class="string">'执行其他操作'</span>)</span><br></pre></td></tr></table></figure>

<h3 id="orm中常用字段及参数"><a href="#orm中常用字段及参数" class="headerlink" title="orm中常用字段及参数"></a>orm中常用字段及参数</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">AutoField</span><br><span class="line">	主键字段 primary_key=<span class="literal">True</span></span><br><span class="line">  </span><br><span class="line">CharField			varchar</span><br><span class="line">	verbose_name	字段的注释</span><br><span class="line">    max_length		长度</span><br><span class="line">  </span><br><span class="line">IntegerField		int</span><br><span class="line">BigIntegerField		bigint</span><br><span class="line"></span><br><span class="line">DecimalField</span><br><span class="line">	max_digits=<span class="number">8</span></span><br><span class="line">  decimal_places=<span class="number">2</span></span><br><span class="line"></span><br><span class="line">EmailFiled				varchar(<span class="number">254</span>)</span><br><span class="line"></span><br><span class="line">DateField				date</span><br><span class="line">DateTimeField			datetime</span><br><span class="line">	auto_now:每次修改数据的时候都会自动更新当前时间</span><br><span class="line">    auto_now_add:只在创建数据的时候记录创建时间后续不会自动修改了</span><br><span class="line">    </span><br><span class="line">BooleanField(Field)				- 布尔值类型</span><br><span class="line">	该字段传布尔值(<span class="literal">False</span>/<span class="literal">True</span>) 	数据库里面存<span class="number">0</span>/<span class="number">1</span></span><br><span class="line"></span><br><span class="line">TextField(Field)					- 文本类型</span><br><span class="line">	该字段可以用来存大段内容(文章、博客...)  没有字数限制</span><br><span class="line">    后面的bbs作业 文章字段用的就是TextField</span><br><span class="line"></span><br><span class="line">FileField(Field)					- 字符类型</span><br><span class="line">   upload_to = <span class="string">"/data"</span></span><br><span class="line">   给该字段传一个文件对象，会自动将文件保存到/data目录下然后将文件路径保存到数据库中</span><br><span class="line">   /data/a.txt</span><br><span class="line">   后面bbs作业也会涉及</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更多字段</span></span><br><span class="line">直接参考博客:https://www.cnblogs.com/Dominic-Ji/p/<span class="number">9203990.</span>html</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="comment"># django除了给你提供了很多字段类型之外 还支持你自定义字段</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyCharField</span><span class="params">(models.Field)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,max_length,*args,**kwargs)</span>:</span></span><br><span class="line">        self.max_length = max_length</span><br><span class="line">        <span class="comment"># 调用父类的init方法</span></span><br><span class="line">        super().__init__(max_length=max_length,*args,**kwargs)  <span class="comment"># 一定要是关键字的形式传入</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">db_type</span><span class="params">(self, connection)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        返回真正的数据类型及各种约束条件</span></span><br><span class="line"><span class="string">        :param connection:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'char(%s)'</span>%self.max_length</span><br><span class="line"></span><br><span class="line"><span class="comment"># 自定义字段使用</span></span><br><span class="line">myfield = MyCharField(max_length=<span class="number">16</span>,null=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 外键字段及参数</span></span><br><span class="line">unique=<span class="literal">True</span></span><br><span class="line">	ForeignKey(unique=<span class="literal">True</span>)   ===	OneToOneField()</span><br><span class="line">  <span class="comment"># 你在用前面字段创建一对一 orm会有一个提示信息 orm推荐你使用后者但是前者也能用</span></span><br><span class="line">  </span><br><span class="line">db_index</span><br><span class="line">	如果db_index=<span class="literal">True</span> 则代表着为此字段设置索引</span><br><span class="line">  (复习索引是什么)</span><br><span class="line"></span><br><span class="line">to_field</span><br><span class="line">	设置要关联的表的字段  默认不写关联的就是另外一张的主键字段</span><br><span class="line"></span><br><span class="line">on_delete</span><br><span class="line">	当删除关联表中的数据时，当前表与其关联的行的行为。</span><br><span class="line">  <span class="string">"""</span></span><br><span class="line"><span class="string">  django2.X及以上版本 需要你自己指定外键字段的级联更新级联删除</span></span><br><span class="line"><span class="string">  """</span></span><br></pre></td></tr></table></figure>

<h3 id="数据库查询优化"><a href="#数据库查询优化" class="headerlink" title="数据库查询优化"></a>数据库查询优化</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">only与defer	</span><br><span class="line">select_related与prefetch_related</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">orm语句的特点:</span></span><br><span class="line"><span class="string">	惰性查询</span></span><br><span class="line"><span class="string">		如果你仅仅只是书写了orm语句 在后面根本没有用到该语句所查询出来的参数</span></span><br><span class="line"><span class="string">		那么orm会自动识别 直接不执行</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment"># only与defer</span></span><br><span class="line"><span class="comment"># res = models.Book.objects.all()</span></span><br><span class="line">    <span class="comment"># print(res)  # 要用数据了才会走数据库</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 想要获取书籍表中所有数的名字</span></span><br><span class="line">    <span class="comment"># res = models.Book.objects.values('title')</span></span><br><span class="line">    <span class="comment"># for d in res:</span></span><br><span class="line">    <span class="comment">#     print(d.get('title'))</span></span><br><span class="line">    <span class="comment"># 你给我实现获取到的是一个数据对象 然后点title就能够拿到书名 并且没有其他字段</span></span><br><span class="line">    <span class="comment"># res = models.Book.objects.only('title')</span></span><br><span class="line">    <span class="comment"># res = models.Book.objects.all()</span></span><br><span class="line">    <span class="comment"># print(res)  # &lt;QuerySet [&lt;Book: 三国演义爆款&gt;, &lt;Book: 红楼梦爆款&gt;, &lt;Book: 论语爆款&gt;, &lt;Book: 聊斋爆款&gt;, &lt;Book: 老子爆款&gt;]&gt;</span></span><br><span class="line">    <span class="comment"># for i in res:</span></span><br><span class="line">        <span class="comment"># print(i.title)  # 点击only括号内的字段 不会走数据库</span></span><br><span class="line">        <span class="comment"># print(i.price)  # 点击only括号内没有的字段 会重新走数据库查询而all不需要走了</span></span><br><span class="line"></span><br><span class="line">    res = models.Book.objects.defer(<span class="string">'title'</span>)  <span class="comment"># 对象除了没有title属性之外其他的都有</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> res:</span><br><span class="line">        print(i.price)</span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    defer与only刚好相反</span></span><br><span class="line"><span class="string">        defer括号内放的字段不在查询出来的对象里面 查询该字段需要重新走数据</span></span><br><span class="line"><span class="string">        而如果查询的是非括号内的字段 则不需要走数据库了</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># select_related与prefetch_related  跟跨表操作有关</span></span><br><span class="line">    <span class="comment"># res = models.Book.objects.all()</span></span><br><span class="line">    <span class="comment"># for i in res:</span></span><br><span class="line">    <span class="comment">#     print(i.publish.name)  # 每循环一次就要走一次数据库查询</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># res = models.Book.objects.select_related('authors')  # INNER JOIN</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    select_related内部直接先将book与publish连起来 然后一次性将大表里面的所有数据</span></span><br><span class="line"><span class="string">    全部封装给查询出来的对象</span></span><br><span class="line"><span class="string">        这个时候对象无论是点击book表的数据还是publish的数据都无需再走数据库查询了</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    select_related括号内只能放外键字段    一对多 一对一</span></span><br><span class="line"><span class="string">        多对多也不行</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="comment"># for i in res:</span></span><br><span class="line">    <span class="comment">#     print(i.publish.name)  # 每循环一次就要走一次数据库查询</span></span><br><span class="line"></span><br><span class="line">    res = models.Book.objects.prefetch_related(<span class="string">'publish'</span>)  <span class="comment"># 子查询</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    prefetch_related该方法内部其实就是子查询</span></span><br><span class="line"><span class="string">        将子查询查询出来的所有结果也给你封装到对象中</span></span><br><span class="line"><span class="string">        给你的感觉好像也是一次性搞定的</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> res:</span><br><span class="line">        print(i.publish.name)</span><br><span class="line">        </span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    看情况使用：拼表数据量大的话用子查询效率更高</span></span><br><span class="line"><span class="string">    """</span></span><br></pre></td></tr></table></figure>

<h3 id="choices参数-数据库字段设计常见"><a href="#choices参数-数据库字段设计常见" class="headerlink" title="choices参数(数据库字段设计常见)"></a>choices参数(数据库字段设计常见)</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">用户表	</span></span><br><span class="line"><span class="string">	性别</span></span><br><span class="line"><span class="string">	学历</span></span><br><span class="line"><span class="string">	工作经验</span></span><br><span class="line"><span class="string">	是否结婚</span></span><br><span class="line"><span class="string">	是否生子</span></span><br><span class="line"><span class="string">	客户来源</span></span><br><span class="line"><span class="string">	...</span></span><br><span class="line"><span class="string">针对某个可以列举完全的可能性字段，我们应该如何存储</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">只要某个字段的可能性是可以列举完全的，那么一般情况下都会采用choices参数</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    username = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    age = models.IntegerField()</span><br><span class="line">    <span class="comment"># 性别</span></span><br><span class="line">    gender_choices = (</span><br><span class="line">        (<span class="number">1</span>,<span class="string">'男'</span>),</span><br><span class="line">        (<span class="number">2</span>,<span class="string">'女'</span>),</span><br><span class="line">        (<span class="number">3</span>,<span class="string">'其他'</span>),</span><br><span class="line">    )</span><br><span class="line">    gender = models.IntegerField(choices=gender_choices)</span><br><span class="line">    </span><br><span class="line">    score_choices = (</span><br><span class="line">        (<span class="string">'A'</span>,<span class="string">'优秀'</span>),</span><br><span class="line">        (<span class="string">'B'</span>,<span class="string">'良好'</span>),</span><br><span class="line">        (<span class="string">'C'</span>,<span class="string">'及格'</span>),</span><br><span class="line">        (<span class="string">'D'</span>,<span class="string">'不合格'</span>),</span><br><span class="line">    )</span><br><span class="line">    <span class="comment"># 保证字段类型跟列举出来的元祖第一个数据类型一致即可</span></span><br><span class="line">    score = models.CharField(choices=score_choices,null=<span class="literal">True</span>)</span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    该gender字段存的还是数字 但是如果存的数字在上面元祖列举的范围之内</span></span><br><span class="line"><span class="string">    那么可以非常轻松的获取到数字对应的真正的内容</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    1.gender字段存的数字不在上述元祖列举的范围内容</span></span><br><span class="line"><span class="string">    2.如果在 如何获取对应的中文信息</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    </span><br><span class="line">      </span><br><span class="line">    <span class="keyword">from</span> app01 <span class="keyword">import</span> models</span><br><span class="line">    <span class="comment"># models.User.objects.create(username='jason',age=18,gender=1)</span></span><br><span class="line">    <span class="comment"># models.User.objects.create(username='egon',age=85,gender=2)</span></span><br><span class="line">    <span class="comment"># models.User.objects.create(username='tank',age=40,gender=3)</span></span><br><span class="line">    <span class="comment"># 存的时候 没有列举出来的数字也能存（范围还是按照字段类型决定）</span></span><br><span class="line">    <span class="comment"># models.User.objects.create(username='tony',age=45,gender=4)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 取</span></span><br><span class="line">    <span class="comment"># user_obj = models.User.objects.filter(pk=1).first()</span></span><br><span class="line">    <span class="comment"># print(user_obj.gender)</span></span><br><span class="line">    <span class="comment"># 只要是choices参数的字段 如果你想要获取对应信息 固定写法 get_字段名_display()</span></span><br><span class="line">    <span class="comment"># print(user_obj.get_gender_display())</span></span><br><span class="line"></span><br><span class="line">    user_obj = models.User.objects.filter(pk=<span class="number">4</span>).first()</span><br><span class="line">    <span class="comment"># 如果没有对应关系 那么字段是什么还是展示什么</span></span><br><span class="line">    print(user_obj.get_gender_display())  <span class="comment"># 4</span></span><br><span class="line">         </span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">chocies参数使用场景是非常广泛的</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<h3 id="多对多三种创建方式"><a href="#多对多三种创建方式" class="headerlink" title="多对多三种创建方式"></a>多对多三种创建方式</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 全自动:利用orm自动帮我们创建第三张关系表</span></span><br><span class="line">	<span class="class"><span class="keyword">class</span> <span class="title">Book</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    authors = models.ManyToManyField(to=<span class="string">'Author'</span>)</span><br><span class="line">	<span class="class"><span class="keyword">class</span> <span class="title">Author</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">	<span class="string">"""</span></span><br><span class="line"><span class="string">	优点:代码不需要你写 非常的方便 还支持orm提供操作第三张关系表的方法...</span></span><br><span class="line"><span class="string">	不足之处:第三张关系表的扩展性极差(没有办法额外添加字段...)</span></span><br><span class="line"><span class="string">	"""</span></span><br><span class="line"><span class="comment"># 纯手动</span></span><br><span class="line">	<span class="class"><span class="keyword">class</span> <span class="title">Book</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    </span><br><span class="line">	<span class="class"><span class="keyword">class</span> <span class="title">Author</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">  </span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Book2Author</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    book_id = models.ForeignKey(to=<span class="string">'Book'</span>)</span><br><span class="line">    author_id = models.ForeignKey(to=<span class="string">'Author'</span>)</span><br><span class="line">  <span class="string">'''</span></span><br><span class="line"><span class="string">  优点:第三张表完全取决于你自己进行额外的扩展</span></span><br><span class="line"><span class="string">  不足之处:需要写的代码较多，不能够再使用orm提供的简单的方法</span></span><br><span class="line"><span class="string">  不建议你用该方式</span></span><br><span class="line"><span class="string">  '''</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 半自动</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    authors = models.ManyToManyField(to=<span class="string">'Author'</span>,</span><br><span class="line">                                     through=<span class="string">'Book2Author'</span>,</span><br><span class="line">                                     through_fields=(<span class="string">'book'</span>,<span class="string">'author'</span>)</span><br><span class="line">                                     )</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Author</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    <span class="comment"># books = models.ManyToManyField(to='Book',</span></span><br><span class="line">    <span class="comment">#                                  through='Book2Author',</span></span><br><span class="line">    <span class="comment">#                                  through_fields=('author','book')</span></span><br><span class="line">    <span class="comment">#                                  )</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book2Author</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    book = models.ForeignKey(to=<span class="string">'Book'</span>)</span><br><span class="line">    author = models.ForeignKey(to=<span class="string">'Author'</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">through_fields字段先后顺序</span></span><br><span class="line"><span class="string">    判断的本质：</span></span><br><span class="line"><span class="string">        通过第三张表查询对应的表 需要用到哪个字段就把哪个字段放前面</span></span><br><span class="line"><span class="string">    你也可以简化判断</span></span><br><span class="line"><span class="string">        当前表是谁 就把对应的关联字段放前面</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">半自动:可以使用orm的正反向查询 但是没法使用add,set,remove,clear这四个方法</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 总结:你需要掌握的是全自动和半自动 为了扩展性更高 一般我们都会采用半自动(写代码要给自己留一条后路)</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>django框架</tag>
      </tags>
  </entry>
  <entry>
    <title>[用PicGo+Gitee（码云）搭建Markdown图床]</title>
    <url>/2020/07/08/%E7%94%A8PicGo-Gitee%EF%BC%88%E7%A0%81%E4%BA%91%EF%BC%89%E6%90%AD%E5%BB%BAMarkdown%E5%9B%BE%E5%BA%8A/</url>
    <content><![CDATA[<h1 id="用PicGo-Gitee（码云）搭建Markdown图床"><a href="#用PicGo-Gitee（码云）搭建Markdown图床" class="headerlink" title="用PicGo+Gitee（码云）搭建Markdown图床"></a>用PicGo+Gitee（码云）搭建Markdown图床</h1><h2 id="一：引言"><a href="#一：引言" class="headerlink" title="一：引言"></a>一：引言</h2><p>图床一般是指储存图片的服务器，有国内和国外之分。国外的图床由于有空间距离等因素决定访问速度很慢影响图片显示速度。国内也分为单线空间、多线空间和cdn加速三种。</p>
<p>简单来说，图床就是自动把本地图片转换成链接的一款工具，网络上有很多图床工具，就目前使用种类而言，PicGo 算得上一款比较优秀的图床工具。它是一款用 Electron-vue 开发的软件，可以支持微博，七牛云，腾讯云COS，又拍云，GitHub，阿里云OSS，<a href="http://sm.ms/" target="_blank" rel="noopener">SM.MS</a>，imgur 等8种常用图床，功能强大，简单易用，同时，它也支持Gitee（码云）。</p>
<h2 id="二：需要用到的软件"><a href="#二：需要用到的软件" class="headerlink" title="二：需要用到的软件"></a>二：需要用到的软件</h2><h3 id="1-Typora（Markdown文本编辑软件）"><a href="#1-Typora（Markdown文本编辑软件）" class="headerlink" title="1.Typora（Markdown文本编辑软件）"></a><strong>1.Typora（Markdown文本编辑软件）</strong></h3><h3 id="Typora-是一款支持实时预览的-Markdown-文本编辑器，并且完全免费。"><a href="#Typora-是一款支持实时预览的-Markdown-文本编辑器，并且完全免费。" class="headerlink" title="Typora 是一款支持实时预览的 Markdown 文本编辑器，并且完全免费。"></a><strong>Typora 是一款支持实时预览的 Markdown 文本编辑器，并且完全免费。</strong></h3><h3 id="下载地址：https-www-typora-io"><a href="#下载地址：https-www-typora-io" class="headerlink" title="下载地址：https://www.typora.io/"></a><strong>下载地址：<a href="https://www.typora.io/" target="_blank" rel="noopener">https://www.typora.io/</a></strong></h3><h3 id="使用教程：https-www-cnblogs-com-xuexianqi-p-13260516-html"><a href="#使用教程：https-www-cnblogs-com-xuexianqi-p-13260516-html" class="headerlink" title="使用教程：https://www.cnblogs.com/xuexianqi/p/13260516.html"></a><strong>使用教程：<a href="https://www.cnblogs.com/xuexianqi/p/13260516.html" target="_blank" rel="noopener">https://www.cnblogs.com/xuexianqi/p/13260516.html</a></strong></h3><h3 id="进入下载地址后，根据系统来选择安装包，下载完成后，直接无脑下一步即可，路径默认"><a href="#进入下载地址后，根据系统来选择安装包，下载完成后，直接无脑下一步即可，路径默认" class="headerlink" title="进入下载地址后，根据系统来选择安装包，下载完成后，直接无脑下一步即可，路径默认"></a><strong>进入下载地址后，根据系统来选择安装包，下载完成后，直接无脑下一步即可，路径默认</strong></h3><p><img src="/images/o_20070611481801.png" alt="o_20070611481801.png"></p>
<h3 id="2-PicGo（图床软件）"><a href="#2-PicGo（图床软件）" class="headerlink" title="2.PicGo（图床软件）"></a><strong>2.PicGo（图床软件）</strong></h3><h3 id="一个图床，一个用于快速上传图片并获取图片URL链接的工具，也完全免费。"><a href="#一个图床，一个用于快速上传图片并获取图片URL链接的工具，也完全免费。" class="headerlink" title="一个图床，一个用于快速上传图片并获取图片URL链接的工具，也完全免费。"></a><strong>一个图床，一个用于快速上传图片并获取图片URL链接的工具，也完全免费。</strong></h3><h3 id="官方指南：https-picgo-github-io-PicGo-Doc-zh-guide"><a href="#官方指南：https-picgo-github-io-PicGo-Doc-zh-guide" class="headerlink" title="官方指南：https://picgo.github.io/PicGo-Doc/zh/guide/"></a><strong>官方指南：<a href="https://picgo.github.io/PicGo-Doc/zh/guide/" target="_blank" rel="noopener">https://picgo.github.io/PicGo-Doc/zh/guide/</a></strong></h3><h3 id="下载地址：https-github-com-Molunerfinn-PicGo-releases"><a href="#下载地址：https-github-com-Molunerfinn-PicGo-releases" class="headerlink" title="下载地址：https://github.com/Molunerfinn/PicGo/releases"></a><strong>下载地址：<a href="https://github.com/Molunerfinn/PicGo/releases" target="_blank" rel="noopener">https://github.com/Molunerfinn/PicGo/releases</a></strong></h3><h3 id="GitHub网站进不去的点这里：https-www-cnblogs-com-xuexianqi-p-13219719-html"><a href="#GitHub网站进不去的点这里：https-www-cnblogs-com-xuexianqi-p-13219719-html" class="headerlink" title="GitHub网站进不去的点这里：https://www.cnblogs.com/xuexianqi/p/13219719.html"></a><strong>GitHub网站进不去的点这里：<a href="https://www.cnblogs.com/xuexianqi/p/13219719.html" target="_blank" rel="noopener">https://www.cnblogs.com/xuexianqi/p/13219719.html</a></strong></h3><h3 id="进入下载地址后，选择最新版本，Windows系统点击-exe文件进行下载，安装直接无脑下一步，路径默认即可（MacOS系统点击-dmg文件，Linux系统点击tar-gz下载）"><a href="#进入下载地址后，选择最新版本，Windows系统点击-exe文件进行下载，安装直接无脑下一步，路径默认即可（MacOS系统点击-dmg文件，Linux系统点击tar-gz下载）" class="headerlink" title="进入下载地址后，选择最新版本，Windows系统点击.exe文件进行下载，安装直接无脑下一步，路径默认即可（MacOS系统点击.dmg文件，Linux系统点击tar.gz下载）"></a><strong>进入下载地址后，选择最新版本，Windows系统点击.exe文件进行下载，安装直接无脑下一步，路径默认即可（MacOS系统点击.dmg文件，Linux系统点击tar.gz下载）</strong></h3><p><img src="/images/o_20070611482102.png" alt="o_20070611482102.png"></p>
<h3 id="3-Gitee（码云）"><a href="#3-Gitee（码云）" class="headerlink" title="3.Gitee（码云）"></a><strong>3.Gitee（码云）</strong></h3><h3 id="码云，一款基于-Git-的代码托管和研发协作平台官方，又称为国内的github。"><a href="#码云，一款基于-Git-的代码托管和研发协作平台官方，又称为国内的github。" class="headerlink" title="码云，一款基于 Git 的代码托管和研发协作平台官方，又称为国内的github。"></a><strong>码云，一款基于 Git 的代码托管和研发协作平台官方，又称为国内的github。</strong></h3><h3 id="官方网站：https-gitee-com"><a href="#官方网站：https-gitee-com" class="headerlink" title="官方网站：https://gitee.com/"></a><strong>官方网站：<a href="https://gitee.com/" target="_blank" rel="noopener">https://gitee.com/</a></strong></h3><h3 id="注册网址：https-gitee-com-signup"><a href="#注册网址：https-gitee-com-signup" class="headerlink" title="注册网址：https://gitee.com/signup"></a><strong>注册网址：<a href="http://www.baidu.com/link?url=Q9yIAdEvisuJfrmu8LQ_LZt3jRfQICY7Q4jyCEKyPdkDfh2x1FcKkIfyg-7bkdLc" target="_blank" rel="noopener">https://gitee.com/signup</a></strong></h3><h1 id="三：搭建教程"><a href="#三：搭建教程" class="headerlink" title="三：搭建教程"></a><strong>三：搭建教程</strong></h1><h3 id="1-创建好Gitee账号后，点击右上角加号-“-”，点击：新建仓库"><a href="#1-创建好Gitee账号后，点击右上角加号-“-”，点击：新建仓库" class="headerlink" title="1.创建好Gitee账号后，点击右上角加号 “+”，点击：新建仓库"></a>1.创建好Gitee账号后，点击右上角加号 “+”，点击：新建仓库</h3><h3 id="2-仓库名称（自定义）-路径（自定义）-公开-使用Readme文件初始化这个仓库-创建"><a href="#2-仓库名称（自定义）-路径（自定义）-公开-使用Readme文件初始化这个仓库-创建" class="headerlink" title="2.仓库名称（自定义） - 路径（自定义） - 公开 - 使用Readme文件初始化这个仓库 - 创建"></a>2.仓库名称（自定义） - 路径（自定义） - 公开 - 使用Readme文件初始化这个仓库 - 创建</h3><p><img src="/images/o_20070710300302.png" alt="o_20070710300302.png"></p>
<h3 id="3-点击右上角用户头像右边的下拉框，点击：设置"><a href="#3-点击右上角用户头像右边的下拉框，点击：设置" class="headerlink" title="3.点击右上角用户头像右边的下拉框，点击：设置"></a>3.点击右上角用户头像右边的下拉框，点击：设置</h3><h3 id="4-点击左侧-：私人令牌"><a href="#4-点击左侧-：私人令牌" class="headerlink" title="4.点击左侧 ：私人令牌"></a>4.点击左侧 ：私人令牌</h3><h3 id="5-点击：生成新令牌"><a href="#5-点击：生成新令牌" class="headerlink" title="5.点击：生成新令牌"></a>5.点击：生成新令牌</h3><h3 id="6-私人令牌描述（自定义）-选择-“peojects”-提交"><a href="#6-私人令牌描述（自定义）-选择-“peojects”-提交" class="headerlink" title="6.私人令牌描述（自定义） - 选择 “peojects” - 提交"></a>6.私人令牌描述（自定义） - 选择 “peojects” - 提交</h3><p><img src="/images/o_20070710303206.png" alt="o_20070710303206.png"></p>
<h3 id="7-Note-自定义一个名称，repo-打上-√"><a href="#7-Note-自定义一个名称，repo-打上-√" class="headerlink" title="7.Note 自定义一个名称，repo 打上 √"></a>7.Note 自定义一个名称，repo 打上 √</h3><h3 id="8-输入登录码云的密码，点击：验证"><a href="#8-输入登录码云的密码，点击：验证" class="headerlink" title="8.输入登录码云的密码，点击：验证"></a>8.输入登录码云的密码，点击：验证</h3><p><img src="/images/o_20070710303507.png" alt="o_20070710303507.png"></p>
<h3 id="9-现在生成的是一串Token，只会在现在显示一次，所以要妥善保管好，点击：复制-打勾“我已经了解…”-确认并关闭"><a href="#9-现在生成的是一串Token，只会在现在显示一次，所以要妥善保管好，点击：复制-打勾“我已经了解…”-确认并关闭" class="headerlink" title="9.现在生成的是一串Token，只会在现在显示一次，所以要妥善保管好，点击：复制 - 打勾“我已经了解…” - 确认并关闭"></a>9.现在生成的是一串Token，只会在现在显示一次，所以要妥善保管好，点击：复制 - 打勾“我已经了解…” - 确认并关闭</h3><p><img src="/images/o_20070710303808.png" alt="o_20070710303808.png"></p>
<h3 id="10-打开PicGo，点击左侧-插件设置-搜索框输入：gitee-点击右边的gitee-uploader：安装"><a href="#10-打开PicGo，点击左侧-插件设置-搜索框输入：gitee-点击右边的gitee-uploader：安装" class="headerlink" title="10.打开PicGo，点击左侧 - 插件设置 - 搜索框输入：gitee - 点击右边的gitee-uploader：安装"></a>10.打开PicGo，点击左侧 - 插件设置 - 搜索框输入：gitee - 点击右边的gitee-uploader：安装</h3><p><img src="/images/o_20070710304309.png" alt="o_20070710304309.png"></p>
<h3 id="11-点击左侧：图床设置-gitee，进行如下设置"><a href="#11-点击左侧：图床设置-gitee，进行如下设置" class="headerlink" title="11.点击左侧：图床设置 - gitee，进行如下设置"></a>11.点击左侧：图床设置 - gitee，进行如下设置</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">repo：  填写用户名/仓库名</span><br><span class="line"></span><br><span class="line">branch：  填写：master</span><br><span class="line"></span><br><span class="line">token：  填写刚才生成的那一串token</span><br><span class="line"></span><br><span class="line">path：  填写：img</span><br><span class="line"></span><br><span class="line">customPath：  默认即可，不用填写</span><br><span class="line"></span><br><span class="line">customUrl：  默认即可，不用填写</span><br></pre></td></tr></table></figure>

<p><img src="/images/1594124775(1).png" alt="1594124775(1).png"></p>
<h2 id="四：图片上传至图库的方法1（推荐）"><a href="#四：图片上传至图库的方法1（推荐）" class="headerlink" title="四：图片上传至图库的方法1（推荐）"></a><strong>四：图片上传至图库的方法1（推荐）</strong></h2><h3 id="1-打开Typora，点击左上角：文件-偏好设置"><a href="#1-打开Typora，点击左上角：文件-偏好设置" class="headerlink" title="1.打开Typora，点击左上角：文件 - 偏好设置"></a><strong>1.打开Typora，点击左上角：文件 - 偏好设置</strong></h3><h3 id="2-点击：图像-插入图片时（下拉选择：上传图片）-对网络位置的图片应用上述规则（可选可不选，选中就是图片也会复制到本地）-允许根据YAML设置自动上传图片-上传服务：下拉后选择-PicGo（app）-选择PicGo路径"><a href="#2-点击：图像-插入图片时（下拉选择：上传图片）-对网络位置的图片应用上述规则（可选可不选，选中就是图片也会复制到本地）-允许根据YAML设置自动上传图片-上传服务：下拉后选择-PicGo（app）-选择PicGo路径" class="headerlink" title="2.点击：图像 - 插入图片时（下拉选择：上传图片） - 对网络位置的图片应用上述规则（可选可不选，选中就是图片也会复制到本地） - 允许根据YAML设置自动上传图片 - 上传服务：下拉后选择 PicGo（app） - 选择PicGo路径"></a>2.点击：图像 - 插入图片时（下拉选择：上传图片） - 对网络位置的图片应用上述规则（可选可不选，选中就是图片也会复制到本地） - 允许根据YAML设置自动上传图片 - 上传服务：下拉后选择 PicGo（app） - 选择PicGo路径</h3><p><img src="/images/o_20070612482223.png" alt="o_20070612482223.png"></p>
<h3 id="3-找到PicGo的安装路径，默认是C-Program-Files-PicGo点击：打开"><a href="#3-找到PicGo的安装路径，默认是C-Program-Files-PicGo点击：打开" class="headerlink" title="3.找到PicGo的安装路径，默认是C:\Program Files\PicGo点击：打开"></a>3.找到PicGo的安装路径，默认是C:\Program Files\PicGo点击：打开</h3><p><img src="/images/o_20070612104519.png" alt="o_20070612104519.png"></p>
<h3 id="4-点击：验证图片上传选项，显示绿色字-“成功上床图片并获得新的URL”，点击：OK"><a href="#4-点击：验证图片上传选项，显示绿色字-“成功上床图片并获得新的URL”，点击：OK" class="headerlink" title="4.点击：验证图片上传选项，显示绿色字 “成功上床图片并获得新的URL”，点击：OK"></a>4.点击：验证图片上传选项，显示绿色字 “成功上床图片并获得新的URL”，点击：OK</h3><p><img src="/images/20200707184938.png" alt="20200707184938.png"></p>
<h3 id="5-此时，截完图之后，直接按粘贴快捷键（Ctrl-V）即可将图片上传到图库"><a href="#5-此时，截完图之后，直接按粘贴快捷键（Ctrl-V）即可将图片上传到图库" class="headerlink" title="5.此时，截完图之后，直接按粘贴快捷键（Ctrl+V）即可将图片上传到图库"></a>5.此时，截完图之后，直接按粘贴快捷键（Ctrl+V）即可将图片上传到图库</h3><h3 id="6-也成功显示出来了"><a href="#6-也成功显示出来了" class="headerlink" title="6.也成功显示出来了"></a>6.也成功显示出来了</h3><p><img src="/images/20200707185045.png" alt="20200707185045.png"></p>
<h1 id="五：图片上传至图库的方法2"><a href="#五：图片上传至图库的方法2" class="headerlink" title="五：图片上传至图库的方法2"></a><strong>五：图片上传至图库的方法2</strong></h1><h3 id="1-设置快捷键"><a href="#1-设置快捷键" class="headerlink" title="1.设置快捷键"></a>1.设置快捷键</h3><p><img src="/images/o_20070611485712.png" alt="o_20070611485712.png"></p>
<h3 id="2-点击：编辑"><a href="#2-点击：编辑" class="headerlink" title="2.点击：编辑"></a>2.点击：编辑</h3><p><img src="/images/o_20070611490013.png" alt="o_20070611490013.png"></p>
<h3 id="3-同时按住Ctrl、Shift、V-组合键（当然，也可以自定义），点击：确定"><a href="#3-同时按住Ctrl、Shift、V-组合键（当然，也可以自定义），点击：确定" class="headerlink" title="3.同时按住Ctrl、Shift、V 组合键（当然，也可以自定义），点击：确定"></a>3.同时按住Ctrl、Shift、V 组合键（当然，也可以自定义），点击：确定</h3><p><img src="/images/o_20070611490414.png" alt="o_20070611490414.png"></p>
<h3 id="4-我们截完图之后，直接按下快捷键（Ctrl-Shift-V）就把截图上传到图库了，并且自动复制了图片的外链，然后我们直接按下快捷键（Ctr-V）就可以粘贴了"><a href="#4-我们截完图之后，直接按下快捷键（Ctrl-Shift-V）就把截图上传到图库了，并且自动复制了图片的外链，然后我们直接按下快捷键（Ctr-V）就可以粘贴了" class="headerlink" title="4.我们截完图之后，直接按下快捷键（Ctrl+Shift+V）就把截图上传到图库了，并且自动复制了图片的外链，然后我们直接按下快捷键（Ctr+V）就可以粘贴了"></a>4.我们截完图之后，直接按下快捷键（Ctrl+Shift+V）就把截图上传到图库了，并且自动复制了图片的外链，然后我们直接按下快捷键（Ctr+V）就可以粘贴了</h3><p><img src="/images/20200707185135.png" alt="20200707185135.png"></p>
<h3 id="5-单击图片即可看到图片的外链"><a href="#5-单击图片即可看到图片的外链" class="headerlink" title="5.单击图片即可看到图片的外链"></a>5.单击图片即可看到图片的外链</h3><p><img src="/images/20200707185144.png" alt="20200707185144.png"></p>
<h2 id="Ending…"><a href="#Ending…" class="headerlink" title="Ending…."></a>Ending….</h2>]]></content>
      <categories>
        <category>技能get</category>
      </categories>
      <tags>
        <tag>图床制作</tag>
      </tags>
  </entry>
  <entry>
    <title>[模板层]</title>
    <url>/2020/02/12/%E6%A8%A1%E6%9D%BF%E5%B1%82/</url>
    <content><![CDATA[<h3 id="模版语法传值（又称DTL）"><a href="#模版语法传值（又称DTL）" class="headerlink" title="模版语法传值（又称DTL）"></a>模版语法传值（又称DTL）</h3> 
{{}}:变量相关

{%%}:逻辑相关

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="comment"># 模版语法可以传递的后端python数据类型</span></span><br><span class="line">    n = <span class="number">123</span></span><br><span class="line">    f = <span class="number">11.11</span></span><br><span class="line">    s = <span class="string">'我也想奔现'</span></span><br><span class="line">    b = <span class="literal">True</span></span><br><span class="line">    l = [<span class="string">'小红'</span>,<span class="string">'姗姗'</span>,<span class="string">'花花'</span>,<span class="string">'茹茹'</span>]</span><br><span class="line">    t = (<span class="number">111</span>,<span class="number">222</span>,<span class="number">333</span>,<span class="number">444</span>)</span><br><span class="line">    d = &#123;<span class="string">'username'</span>:<span class="string">'jason'</span>,<span class="string">'age'</span>:<span class="number">18</span>,<span class="string">'info'</span>:<span class="string">'这个人有点意思'</span>&#125;</span><br><span class="line">    se = &#123;<span class="string">'晶晶'</span>,<span class="string">'洋洋'</span>,<span class="string">'嘤嘤'</span>&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line">        print(<span class="string">'我被执行了'</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'你的另一半在等你'</span></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">MyClass</span><span class="params">(object)</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">get_self</span><span class="params">(self)</span>:</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">'self'</span></span><br><span class="line"></span><br><span class="line"><span class="meta">        @staticmethod</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">get_func</span><span class="params">()</span>:</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">'func'</span></span><br><span class="line"></span><br><span class="line"><span class="meta">        @classmethod</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">get_class</span><span class="params">(cls)</span>:</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">'cls'</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 对象被展示到html页面上 就类似于执行了打印操作也会触发__str__方法</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">'到底会不会？'</span>  </span><br><span class="line">        </span><br><span class="line">    obj = MyClass()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># return render(request,'index.html',&#123;&#125;)  # 一个个传</span></span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">'index.html'</span>,locals())</span><br><span class="line"></span><br><span class="line">&lt;p&gt;&#123;&#123; n &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;&#123;&#123; f &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;&#123;&#123; s &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;&#123;&#123; b &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;&#123;&#123; l &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;&#123;&#123; d &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;&#123;&#123; t &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;&#123;&#123; se &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;传递函数名会自动加括号调用 但是模版语法不支持给函数传额外的参数:&#123;&#123; func &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;传类名的时候也会自动加括号调用(实例化)&#123;&#123; MyClass &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;内部能够自动判断出当前的变量名是否可以加括号调用 如果可以就会自动执行  针对的是函数名和类名&lt;/p&gt;</span><br><span class="line">&lt;p&gt;&#123;&#123; obj &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;&#123;&#123; obj.get_self &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;&#123;&#123; obj.get_func &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;&#123;&#123; obj.get_class &#125;&#125;&lt;/p&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># django模版语法的取值 是固定的格式 只能采用“句点符” .</span></span><br><span class="line">&lt;p&gt;&#123;&#123; d.username &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;&#123;&#123; l.0 &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;&#123;&#123; d.hobby.3.info &#125;&#125;&lt;/p&gt;</span><br><span class="line"><span class="comment"># 即可以点键也可以点索引 还可以两者混用</span></span><br></pre></td></tr></table></figure>

<h3 id="过滤器-过滤器只能最多有两个参数"><a href="#过滤器-过滤器只能最多有两个参数" class="headerlink" title="过滤器(过滤器只能最多有两个参数)"></a>过滤器(过滤器只能最多有两个参数)</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 过滤器就类似于是模版语法内置的 内置方法</span></span><br><span class="line"><span class="comment"># django内置有60多个过滤器 我们不需要学这么多 了解10个左右就差不多了 后面碰到了再去记忆</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 基本语法</span></span><br><span class="line">&#123;&#123;数据|过滤器:参数&#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 转义</span></span><br><span class="line"><span class="comment"># 前端</span></span><br><span class="line">	|safe</span><br><span class="line"><span class="comment"># 后端</span></span><br><span class="line">	<span class="keyword">from</span> django.utils.safestring <span class="keyword">import</span> mark_safe</span><br><span class="line">	res = mark_safe(<span class="string">'&lt;h1&gt;新新&lt;/h1&gt;'</span>)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">以后你在全栈项目的时候 前端代码不一定非要在前端页面书写</span></span><br><span class="line"><span class="string">也可以现在先在后端写好 然后传递给前端页面</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">&lt;h1&gt;过滤器&lt;/h1&gt;</span><br><span class="line">&lt;p&gt;统计长度:&#123;&#123; s|length &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;默认值(第一个参数布尔值是True就展示第一个参数的值否在展示冒号后面的值):&#123;&#123; b|default:'啥也不是' &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;文件大小:&#123;&#123; file_size|filesizeformat &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;日期格式化:&#123;&#123; current_time|date:'Y-m-d H:i:s' &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;切片操作(支持步长):&#123;&#123; l|slice:'0:4:2' &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;切取字符(包含三个点):&#123;&#123; info|truncatechars:9 &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;切取单词(不包含三个点 按照空格切):&#123;&#123; egl|truncatewords:9 &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;切取单词(不包含三个点 按照空格切):&#123;&#123; info|truncatewords:9 &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;移除特定的字符:&#123;&#123; msg|cut:' ' &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;拼接操作:&#123;&#123; l|join:'$' &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;拼接操作(加法):&#123;&#123; n|add:10 &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;拼接操作(加法):&#123;&#123; s|add:msg &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;转义:&#123;&#123; hhh|safe &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;转义:&#123;&#123; sss|safe &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;转义:&#123;&#123; res &#125;&#125;&lt;/p&gt;</span><br></pre></td></tr></table></figure>

<h3 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># for循环</span></span><br><span class="line">	&#123;% <span class="keyword">for</span> foo <span class="keyword">in</span> l %&#125;</span><br><span class="line">    &lt;p&gt;&#123;&#123; forloop &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123; foo &#125;&#125;&lt;/p&gt;  一个个元素</span><br><span class="line">	&#123;% endfor %&#125;</span><br><span class="line">  &#123;<span class="string">'parentloop'</span>: &#123;&#125;, <span class="string">'counter0'</span>: <span class="number">0</span>, <span class="string">'counter'</span>: <span class="number">1</span>, <span class="string">'revcounter'</span>: <span class="number">6</span>, <span class="string">'revcounter0'</span>: 	<span class="number">5</span>, <span class="string">'first'</span>: <span class="literal">True</span>, <span class="string">'last'</span>: <span class="literal">False</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># if判断</span></span><br><span class="line">&#123;% <span class="keyword">if</span> b %&#125;</span><br><span class="line">    &lt;p&gt;baby&lt;/p&gt;</span><br><span class="line">&#123;% <span class="keyword">elif</span> s%&#125;</span><br><span class="line">    &lt;p&gt;都来把&lt;/p&gt;</span><br><span class="line">&#123;% <span class="keyword">else</span> %&#125;</span><br><span class="line">    &lt;p&gt;老baby&lt;/p&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># for与if混合使用</span></span><br><span class="line">&#123;% <span class="keyword">for</span> foo <span class="keyword">in</span> lll %&#125;</span><br><span class="line">    &#123;% <span class="keyword">if</span> forloop.first %&#125;</span><br><span class="line">        &lt;p&gt;这是我的第一次&lt;/p&gt;</span><br><span class="line">    &#123;% <span class="keyword">elif</span> forloop.last %&#125;</span><br><span class="line">        &lt;p&gt;这是最后一次啊&lt;/p&gt;</span><br><span class="line">    &#123;% <span class="keyword">else</span> %&#125;</span><br><span class="line">        &lt;p&gt;&#123;&#123; foo &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">    &#123;% empty %&#125;</span><br><span class="line">        &lt;p&gt;for循环的可迭代对象内部没有元素 根本没法循环&lt;/p&gt;</span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 处理字典其他方法</span></span><br><span class="line">&#123;% <span class="keyword">for</span> foo <span class="keyword">in</span> d.keys %&#125;</span><br><span class="line">    &lt;p&gt;&#123;&#123; foo &#125;&#125;&lt;/p&gt;</span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line">&#123;% <span class="keyword">for</span> foo <span class="keyword">in</span> d.values %&#125;</span><br><span class="line">    &lt;p&gt;&#123;&#123; foo &#125;&#125;&lt;/p&gt;</span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line">&#123;% <span class="keyword">for</span> foo <span class="keyword">in</span> d.items %&#125;</span><br><span class="line">    &lt;p&gt;&#123;&#123; foo &#125;&#125;&lt;/p&gt;</span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># with起别名</span></span><br><span class="line">&#123;% <span class="keyword">with</span> d.hobby<span class="number">.3</span>.info <span class="keyword">as</span> nb  %&#125;</span><br><span class="line">    &lt;p&gt;&#123;&#123; nb &#125;&#125;&lt;/p&gt;</span><br><span class="line">    在<span class="keyword">with</span>语法内就可以通过<span class="keyword">as</span>后面的别名快速的使用到前面非常复杂获取数据的方式</span><br><span class="line">    &lt;p&gt;&#123;&#123; d.hobby.3.info &#125;&#125;&lt;/p&gt;</span><br><span class="line">&#123;% endwith %&#125;</span><br></pre></td></tr></table></figure>

<h3 id="自定义过滤器、标签、inclusion-tag"><a href="#自定义过滤器、标签、inclusion-tag" class="headerlink" title="自定义过滤器、标签、inclusion_tag"></a>自定义过滤器、标签、inclusion_tag</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">先三步走</span></span><br><span class="line"><span class="string">	1.在应用下创建一个名字”必须“叫templatetags文件夹</span></span><br><span class="line"><span class="string">	2.在该文件夹内创建“任意”名称的py文件 eg:mytag.py</span></span><br><span class="line"><span class="string">	3.在该py文件内"必须"先书写下面两句话(单词一个都不能错)</span></span><br><span class="line"><span class="string">		from django import template</span></span><br><span class="line"><span class="string">		</span></span><br><span class="line"><span class="string">		register = template.Library()</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 自定义过滤器</span></span><br><span class="line"><span class="meta">@register.filter(name='baby')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_sum</span><span class="params">(v1, v2)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> v1 + v2</span><br><span class="line"><span class="comment"># 使用</span></span><br><span class="line">&#123;% load mytag %&#125;</span><br><span class="line">&lt;p&gt;&#123;&#123; n|baby:666 &#125;&#125;&lt;/p&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 自定义标签(参数可以有多个)			类似于自定义函数</span></span><br><span class="line"><span class="meta">@register.simple_tag(name='plus')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(a,b,c,d)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'%s-%s-%s-%s'</span>%(a,b,c,d)</span><br><span class="line"><span class="comment"># 使用</span></span><br><span class="line">标签多个参数彼此之间空格隔开</span><br><span class="line">&lt;p&gt;&#123;% plus 'jason' 123 123 123 %&#125;&lt;/p&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 自定义inclusion_tag</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">内部原理</span></span><br><span class="line"><span class="string">	先定义一个方法 </span></span><br><span class="line"><span class="string">	在页面上调用该方法 并且可以传值</span></span><br><span class="line"><span class="string">	该方法会生成一些数据然后传递给一个html页面</span></span><br><span class="line"><span class="string">	之后将渲染好的结果放到调用的位置</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="meta">@register.inclusion_tag('left_menu.html')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">left</span><span class="params">(n)</span>:</span></span><br><span class="line">    data = [<span class="string">'第&#123;&#125;项'</span>.format(i) <span class="keyword">for</span> i <span class="keyword">in</span> range(n)]</span><br><span class="line">    <span class="comment"># 第一种</span></span><br><span class="line">    <span class="comment"># return &#123;'data':data&#125;  # 将data传递给left_menu.html</span></span><br><span class="line">    <span class="comment"># 第二种</span></span><br><span class="line">    <span class="keyword">return</span> locals()  <span class="comment"># 将data传递给left_menu.html</span></span><br><span class="line">  </span><br><span class="line">&#123;% left <span class="number">5</span> %&#125;</span><br><span class="line"><span class="comment"># 总结:当html页面某一个地方的页面需要传参数才能够动态的渲染出来，并且在多个页面上都需要使用到该局部 那么就考虑将该局部页面做成inclusion_tag形式</span></span><br><span class="line">(在讲bbs的时候会使用到)</span><br></pre></td></tr></table></figure>

<h3 id="模版的继承"><a href="#模版的继承" class="headerlink" title="模版的继承"></a>模版的继承</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">你们有没有见过一些网站</span></span><br><span class="line"><span class="string">	这些网站页面整体都大差不差 只是某一些局部在做变化	</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment"># 模版的继承 你自己先选好一个你要想继承的模版页面</span></span><br><span class="line">&#123;% extends <span class="string">'home.html'</span> %&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 继承了之后子页面跟模版页面长的是一模一样的 你需要在模版页面上提前划定可以被修改的区域</span></span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line">	模版内容</span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 子页面就可以声明想要修改哪块划定了的区域</span></span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line">	子页面内容	</span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 一般情况下模版页面上应该至少有三块可以被修改的区域</span></span><br><span class="line">	<span class="number">1.</span>css区域</span><br><span class="line">  <span class="number">2.</span>html区域</span><br><span class="line">  <span class="number">3.j</span>s区域</span><br><span class="line">  &#123;% block css %&#125;</span><br><span class="line"></span><br><span class="line">	&#123;% endblock %&#125;</span><br><span class="line">  </span><br><span class="line">  &#123;% block content %&#125;</span><br><span class="line"></span><br><span class="line">	&#123;% endblock %&#125;</span><br><span class="line">  </span><br><span class="line">  &#123;% block js %&#125;</span><br><span class="line"></span><br><span class="line">	&#123;% endblock %&#125;</span><br><span class="line">  <span class="comment"># 每一个子页面就都可以有自己独有的css代码 html代码 js代码</span></span><br><span class="line">  </span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">一般情况下 模版的页面上划定的区域越多 那么该模版的扩展性就越高</span></span><br><span class="line"><span class="string">但是如果太多 那还不如自己直接写</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<h3 id="模版的导入"><a href="#模版的导入" class="headerlink" title="模版的导入"></a>模版的导入</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">将页面的某一个局部当成模块的形式</span></span><br><span class="line"><span class="string">哪个地方需要就可以直接导入使用即可</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">&#123;% include <span class="string">'wasai.html'</span> %&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>django框架</tag>
      </tags>
  </entry>
  <entry>
    <title>[约束条件与表关系]</title>
    <url>/2020/03/10/%E7%BA%A6%E6%9D%9F%E6%9D%A1%E4%BB%B6%E4%B8%8E%E8%A1%A8%E5%85%B3%E7%B3%BB/</url>
    <content><![CDATA[<h2 id="约束条件"><a href="#约束条件" class="headerlink" title="约束条件"></a>约束条件</h2><h3 id="default默认值"><a href="#default默认值" class="headerlink" title="default默认值"></a>default默认值</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 补充知识点  插入数据的时候可以指定字段</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t1(</span><br><span class="line">	<span class="keyword">id</span> <span class="built_in">int</span>,</span><br><span class="line">    <span class="keyword">name</span> <span class="built_in">char</span>(<span class="number">16</span>)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t1(<span class="keyword">name</span>,<span class="keyword">id</span>) <span class="keyword">values</span>(<span class="string">'jason'</span>,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t2(</span><br><span class="line">	<span class="keyword">id</span> <span class="built_in">int</span>,</span><br><span class="line">    <span class="keyword">name</span> <span class="built_in">char</span>(<span class="number">16</span>),</span><br><span class="line">    gender enum(<span class="string">'male'</span>,<span class="string">'female'</span>,<span class="string">'others'</span>) <span class="keyword">default</span> <span class="string">'male'</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t2(<span class="keyword">id</span>,<span class="keyword">name</span>) <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">'jason'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t2 <span class="keyword">values</span>(<span class="number">2</span>,<span class="string">'egon'</span>,<span class="string">'female'</span>);</span><br></pre></td></tr></table></figure>

<h3 id="unique唯一"><a href="#unique唯一" class="headerlink" title="unique唯一"></a>unique唯一</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 单列唯一</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t3(</span><br><span class="line">	<span class="keyword">id</span> <span class="built_in">int</span> <span class="keyword">unique</span>,</span><br><span class="line">    <span class="keyword">name</span> <span class="built_in">char</span>(<span class="number">16</span>)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t3 <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">'jason'</span>),(<span class="number">1</span>,<span class="string">'egon'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t3 <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">'jason'</span>),(<span class="number">2</span>,<span class="string">'egon'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment"># 联合唯一</span></span><br><span class="line">"""</span><br><span class="line">ip和port</span><br><span class="line">单个都可以重复 但是加载一起必须是唯一的</span><br><span class="line">"""</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t4(</span><br><span class="line">	<span class="keyword">id</span> <span class="built_in">int</span>,</span><br><span class="line">    ip <span class="built_in">char</span>(<span class="number">16</span>),</span><br><span class="line">    port <span class="built_in">int</span>,</span><br><span class="line">    <span class="keyword">unique</span>(ip,port)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t4 <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">'127.0.0.1'</span>,<span class="number">8080</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t4 <span class="keyword">values</span>(<span class="number">2</span>,<span class="string">'127.0.0.1'</span>,<span class="number">8081</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t4 <span class="keyword">values</span>(<span class="number">3</span>,<span class="string">'127.0.0.2'</span>,<span class="number">8080</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t4 <span class="keyword">values</span>(<span class="number">4</span>,<span class="string">'127.0.0.1'</span>,<span class="number">8080</span>);  报错</span><br></pre></td></tr></table></figure>

<h3 id="primary-key主键"><a href="#primary-key主键" class="headerlink" title="primary key主键"></a>primary key主键</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">"""</span><br><span class="line">1.单单从约束效果上来看primary key等价于not null + unique</span><br><span class="line">非空且唯一！！！</span><br><span class="line">"""</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t5(<span class="keyword">id</span> <span class="built_in">int</span> primary <span class="keyword">key</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t5 <span class="keyword">values</span>(<span class="literal">null</span>);  报错</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t5 <span class="keyword">values</span>(<span class="number">1</span>),(<span class="number">1</span>);  报错</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t5 <span class="keyword">values</span>(<span class="number">1</span>),(<span class="number">2</span>); </span><br><span class="line"></span><br><span class="line">"""</span><br><span class="line">2.它除了有约束效果之外 它还是Innodb存储引擎组织数据的依据</span><br><span class="line">Innodb存储引擎在创建表的时候必须要有primary key</span><br><span class="line">因为它类似于书的目录 能够帮助提示查询效率并且也是建表的依据</span><br><span class="line">"""</span><br><span class="line"><span class="comment"># 1 一张表中有且只有一个主键 如果你没有设置主键 那么会从上往下搜索直到遇到一个非空且唯一的字段将它自动升级为主键</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t6(</span><br><span class="line">	<span class="keyword">id</span> <span class="built_in">int</span>,</span><br><span class="line">    <span class="keyword">name</span> <span class="built_in">char</span>(<span class="number">16</span>),</span><br><span class="line">    age <span class="built_in">int</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">unique</span>,</span><br><span class="line">    addr <span class="built_in">char</span>(<span class="number">32</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">unique</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2 如果表中没有主键也没有其他任何的非空且唯一字段 那么Innodb会采用自己内部提供的一个隐藏字段作为主键，隐藏意味着你无法使用到它 就无法提示查询速度</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3 一张表中通常都应该有一个主键字段 并且通常将id/uid/sid字段作为主键</span></span><br><span class="line"><span class="comment"># 单个字段主键</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t5(</span><br><span class="line">    <span class="keyword">id</span> <span class="built_in">int</span> primary <span class="keyword">key</span></span><br><span class="line">	<span class="keyword">name</span> <span class="built_in">char</span>(<span class="number">16</span>)</span><br><span class="line">);</span><br><span class="line"><span class="comment"># 联合主键(多个字段联合起来作为表的主键 本质还是一个主键)</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t7(</span><br><span class="line">    ip <span class="built_in">char</span>(<span class="number">16</span>),</span><br><span class="line">    port <span class="built_in">int</span>,</span><br><span class="line">    primary <span class="keyword">key</span>(ip,port)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">"""</span><br><span class="line">也意味着 以后我们在创建表的时候id字段一定要加primary key</span><br><span class="line">"""</span><br></pre></td></tr></table></figure>

<h3 id="auto-increment自增"><a href="#auto-increment自增" class="headerlink" title="auto_increment自增"></a>auto_increment自增</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 当编号特别多的时候 人为的去维护太麻烦</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t8(</span><br><span class="line">	<span class="keyword">id</span> <span class="built_in">int</span> primary <span class="keyword">key</span> auto_increment,</span><br><span class="line">    <span class="keyword">name</span> <span class="built_in">char</span>(<span class="number">16</span>)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t8(<span class="keyword">name</span>) <span class="keyword">values</span>(<span class="string">'jason'</span>),(<span class="string">'egon'</span>),(<span class="string">'kevin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意auto_increment通常都是加在主键上的 不能给普通字段加</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t9(</span><br><span class="line">	<span class="keyword">id</span> <span class="built_in">int</span> primary <span class="keyword">key</span> auto_increment,</span><br><span class="line">    <span class="keyword">name</span> <span class="built_in">char</span>(<span class="number">16</span>),</span><br><span class="line">    cid <span class="built_in">int</span> auto_increment</span><br><span class="line">);</span><br><span class="line">ERROR 1075 (42000): Incorrect table definition; there can be only one auto column and it must be defined as a key</span><br></pre></td></tr></table></figure>

<p><strong>结论</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">"""以后在创建表的id(数据的唯一标识id、uid、sid)字段的时候id int primary key auto_increment"""</span><br></pre></td></tr></table></figure>

<p><strong>补充</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> t1  删除表中数据后 主键的自增不会停止<span class="keyword">truncate</span> t1  清空表数据并且重置主键</span><br></pre></td></tr></table></figure>

<h2 id="表与表之间建关系"><a href="#表与表之间建关系" class="headerlink" title="表与表之间建关系"></a>表与表之间建关系</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">"""</span><br><span class="line">定义一张员工表 表中有很多字段</span><br><span class="line">id name gender dep_name dep_desc</span><br><span class="line">"""</span><br><span class="line"><span class="comment"># 1 该表的组织结构不是很清晰(可忽视)</span></span><br><span class="line"><span class="comment"># 2 浪费硬盘空间(可忽视)</span></span><br><span class="line"><span class="comment"># 3 数据的扩展性极差(无法忽视的)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如何优化？</span></span><br><span class="line">"""上述问题就类似于你将所有的代码都写在了一个py文件中"""</span><br><span class="line">将员工表拆分  员工表和部门表</span><br></pre></td></tr></table></figure>

<h3 id="外键"><a href="#外键" class="headerlink" title="外键"></a>外键</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">"""</span><br><span class="line">外键就是用来帮助我们建立表与表之间关系的</span><br><span class="line">foreign key</span><br><span class="line">"""</span><br></pre></td></tr></table></figure>

<h3 id="表关系"><a href="#表关系" class="headerlink" title="表关系"></a>表关系</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;&quot;&quot;</span><br><span class="line">表与表之间最多只有四种关系</span><br><span class="line">	一对多关系</span><br><span class="line">		在MySQL的关系中没有多对一一说</span><br><span class="line">		一对多 多对一 都叫一对多！！！</span><br><span class="line">	多对多关系</span><br><span class="line">	一对一关系</span><br><span class="line">	没有关系</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>

<h3 id="一对多关系"><a href="#一对多关系" class="headerlink" title="一对多关系"></a>一对多关系</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">"""</span><br><span class="line">判断表与表之间关系的时候 前期不熟悉的情况下 一定要按照我给你的建议</span><br><span class="line">换位思考  分别站在两张表的角度考虑</span><br><span class="line"></span><br><span class="line">员工表与部门表为例</span><br><span class="line">	先站在员工表</span><br><span class="line">		思考一个员工能否对应多个部门(一条员工数据能否对应多条部门数据)</span><br><span class="line">			不能！！！</span><br><span class="line">			(不能直接得出结论 一定要两张表都考虑完全)</span><br><span class="line">	再站在部门表</span><br><span class="line">		思考一个部门能否对应多个员工(一个部门数据能否对应多条员工数据)</span><br><span class="line">			能！！！</span><br><span class="line">	得出结论</span><br><span class="line">		员工表与部门表示单向的一对多</span><br><span class="line">		所以表关系就是一对多</span><br><span class="line">"""</span><br><span class="line">foreign key</span><br><span class="line">	1 一对多表关系   外键字段建在多的一方</span><br><span class="line">    2 在创建表的时候 一定要先建被关联表 </span><br><span class="line">    3 在录入数据的时候 也必须先录入被关联表</span><br><span class="line"><span class="comment"># SQL语句建立表关系</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> dep(</span><br><span class="line">	<span class="keyword">id</span> <span class="built_in">int</span> primary <span class="keyword">key</span> auto_increment,</span><br><span class="line">    dep_name <span class="built_in">char</span>(<span class="number">16</span>),</span><br><span class="line">    dep_desc <span class="built_in">char</span>(<span class="number">32</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> emp(</span><br><span class="line">	<span class="keyword">id</span> <span class="built_in">int</span> primary <span class="keyword">key</span> auto_increment,</span><br><span class="line">    <span class="keyword">name</span> <span class="built_in">char</span>(<span class="number">16</span>),</span><br><span class="line">    gender enum(<span class="string">'male'</span>,<span class="string">'female'</span>,<span class="string">'others'</span>) <span class="keyword">default</span> <span class="string">'male'</span>,</span><br><span class="line">    dep_id <span class="built_in">int</span>,</span><br><span class="line">    <span class="keyword">foreign</span> <span class="keyword">key</span>(dep_id) <span class="keyword">references</span> dep(<span class="keyword">id</span>)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> dep(dep_name,dep_desc) <span class="keyword">values</span>(<span class="string">'sb教学部'</span>,<span class="string">'教书育人'</span>),(<span class="string">'外交部'</span>,<span class="string">'多人外交'</span>),(<span class="string">'nb技术部'</span>,<span class="string">'技术能力有限部门'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> emp(<span class="keyword">name</span>,dep_id) <span class="keyword">values</span>(<span class="string">'jason'</span>,<span class="number">2</span>),(<span class="string">'egon'</span>,<span class="number">1</span>),(<span class="string">'tank'</span>,<span class="number">1</span>),(<span class="string">'kevin'</span>,<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改dep表里面的id字段</span></span><br><span class="line"><span class="keyword">update</span> dep <span class="keyword">set</span> <span class="keyword">id</span>=<span class="number">200</span> <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">2</span>;  不行</span><br><span class="line"><span class="comment"># 删除dep表里面的数据</span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> dep;  不行</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1 先删除教学部对应的员工数据 之后再删除部门</span></span><br><span class="line">	操作太过繁琐</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 2 真正做到数据之间有关系</span></span><br><span class="line">	更新就同步更新</span><br><span class="line">    删除就同步删除</span><br><span class="line">"""</span><br><span class="line">级联更新   &gt;&gt;&gt;   同步更新</span><br><span class="line">级联删除   &gt;&gt;&gt;   同步删除</span><br><span class="line">"""</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> dep(</span><br><span class="line">	<span class="keyword">id</span> <span class="built_in">int</span> primary <span class="keyword">key</span> auto_increment,</span><br><span class="line">    dep_name <span class="built_in">char</span>(<span class="number">16</span>),</span><br><span class="line">    dep_desc <span class="built_in">char</span>(<span class="number">32</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> emp(</span><br><span class="line">	<span class="keyword">id</span> <span class="built_in">int</span> primary <span class="keyword">key</span> auto_increment,</span><br><span class="line">    <span class="keyword">name</span> <span class="built_in">char</span>(<span class="number">16</span>),</span><br><span class="line">    gender enum(<span class="string">'male'</span>,<span class="string">'female'</span>,<span class="string">'others'</span>) <span class="keyword">default</span> <span class="string">'male'</span>,</span><br><span class="line">    dep_id <span class="built_in">int</span>,</span><br><span class="line">    <span class="keyword">foreign</span> <span class="keyword">key</span>(dep_id) <span class="keyword">references</span> dep(<span class="keyword">id</span>) </span><br><span class="line">    <span class="keyword">on</span> <span class="keyword">update</span> <span class="keyword">cascade</span>  <span class="comment"># 同步更新</span></span><br><span class="line">    <span class="keyword">on</span> <span class="keyword">delete</span> <span class="keyword">cascade</span>  <span class="comment"># 同步删除</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> dep(dep_name,dep_desc) <span class="keyword">values</span>(<span class="string">'sb教学部'</span>,<span class="string">'教书育人'</span>),(<span class="string">'外交部'</span>,<span class="string">'多人外交'</span>),(<span class="string">'nb技术部'</span>,<span class="string">'技术能力有限部门'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> emp(<span class="keyword">name</span>,dep_id) <span class="keyword">values</span>(<span class="string">'jason'</span>,<span class="number">2</span>),(<span class="string">'egon'</span>,<span class="number">1</span>),(<span class="string">'tank'</span>,<span class="number">1</span>),(<span class="string">'kevin'</span>,<span class="number">3</span>);</span><br></pre></td></tr></table></figure>

<h3 id="多对多"><a href="#多对多" class="headerlink" title="多对多"></a>多对多</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">"""</span><br><span class="line">图书表和作者表</span><br><span class="line">"""</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> book(</span><br><span class="line">	<span class="keyword">id</span> <span class="built_in">int</span> primary <span class="keyword">key</span> auto_increment,</span><br><span class="line">    title <span class="built_in">varchar</span>(<span class="number">32</span>),</span><br><span class="line">    price <span class="built_in">int</span>,</span><br><span class="line">    author_id <span class="built_in">int</span>,</span><br><span class="line">    <span class="keyword">foreign</span> <span class="keyword">key</span>(author_id) <span class="keyword">references</span> author(<span class="keyword">id</span>) </span><br><span class="line">    <span class="keyword">on</span> <span class="keyword">update</span> <span class="keyword">cascade</span>  <span class="comment"># 同步更新</span></span><br><span class="line">    <span class="keyword">on</span> <span class="keyword">delete</span> <span class="keyword">cascade</span>  <span class="comment"># 同步删除</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> author(</span><br><span class="line">	<span class="keyword">id</span> <span class="built_in">int</span> primary <span class="keyword">key</span> auto_increment,</span><br><span class="line">    <span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">32</span>),</span><br><span class="line">    age <span class="built_in">int</span>,</span><br><span class="line">    book_id <span class="built_in">int</span>,</span><br><span class="line">    <span class="keyword">foreign</span> <span class="keyword">key</span>(book_id) <span class="keyword">references</span> book(<span class="keyword">id</span>) </span><br><span class="line">    <span class="keyword">on</span> <span class="keyword">update</span> <span class="keyword">cascade</span>  <span class="comment"># 同步更新</span></span><br><span class="line">    <span class="keyword">on</span> <span class="keyword">delete</span> <span class="keyword">cascade</span>  <span class="comment"># 同步删除</span></span><br><span class="line">);</span><br><span class="line">"""</span><br><span class="line">按照上述的方式创建 一个都别想成功！！！</span><br><span class="line">其实我们只是想记录书籍和作者的关系</span><br><span class="line">针对多对多字段表关系 不能在两张原有的表中创建外键</span><br><span class="line">需要你单独再开设一张 专门用来存储两张表数据之间的关系</span><br><span class="line">"""</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> book(</span><br><span class="line">	<span class="keyword">id</span> <span class="built_in">int</span> primary <span class="keyword">key</span> auto_increment,</span><br><span class="line">    title <span class="built_in">varchar</span>(<span class="number">32</span>),</span><br><span class="line">    price <span class="built_in">int</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> author(</span><br><span class="line">	<span class="keyword">id</span> <span class="built_in">int</span> primary <span class="keyword">key</span> auto_increment,</span><br><span class="line">    <span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">32</span>),</span><br><span class="line">    age <span class="built_in">int</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> book2author(</span><br><span class="line">	<span class="keyword">id</span> <span class="built_in">int</span> primary <span class="keyword">key</span> auto_increment,</span><br><span class="line">    author_id <span class="built_in">int</span>,</span><br><span class="line">    book_id <span class="built_in">int</span>,</span><br><span class="line">    <span class="keyword">foreign</span> <span class="keyword">key</span>(author_id) <span class="keyword">references</span> author(<span class="keyword">id</span>) </span><br><span class="line">    <span class="keyword">on</span> <span class="keyword">update</span> <span class="keyword">cascade</span>  <span class="comment"># 同步更新</span></span><br><span class="line">    <span class="keyword">on</span> <span class="keyword">delete</span> <span class="keyword">cascade</span>,  <span class="comment"># 同步删除</span></span><br><span class="line">    <span class="keyword">foreign</span> <span class="keyword">key</span>(book_id) <span class="keyword">references</span> book(<span class="keyword">id</span>) </span><br><span class="line">    <span class="keyword">on</span> <span class="keyword">update</span> <span class="keyword">cascade</span>  <span class="comment"># 同步更新</span></span><br><span class="line">    <span class="keyword">on</span> <span class="keyword">delete</span> <span class="keyword">cascade</span>  <span class="comment"># 同步删除</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h3 id="一对一"><a href="#一对一" class="headerlink" title="一对一"></a>一对一</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">"""</span><br><span class="line">id name age addr phone hobby email........</span><br><span class="line">如果一个表的字段特别多 每次查询又不是所有的字段都能用得到</span><br><span class="line">将表一分为二  </span><br><span class="line">	用户表</span><br><span class="line">		用户表</span><br><span class="line">			id name age</span><br><span class="line">		用户详情表</span><br><span class="line">			id addr phone hobby email........</span><br><span class="line">	</span><br><span class="line">	站在用户表</span><br><span class="line">		一个用户能否对应多个用户详情   不能！！！</span><br><span class="line">	站在详情表</span><br><span class="line">		一个详情能否属于多个用户      不能！！！</span><br><span class="line">	结论:单向的一对多都不成立 那么这个时候两者之间的表关系</span><br><span class="line">		就是一对一</span><br><span class="line">		或者没有关系(好判断)</span><br><span class="line"></span><br><span class="line">客户表和学生表</span><br><span class="line">	在你们报名之前你们是客户端</span><br><span class="line">	报名之后是学生(期间有一些客户不会报名)</span><br><span class="line">"""</span><br><span class="line"></span><br><span class="line">一对一 外键字段建在任意一方都可以 但是推荐你建在查询频率比较高的表中</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> authordetail(</span><br><span class="line">	<span class="keyword">id</span> <span class="built_in">int</span> primary <span class="keyword">key</span> auto_increment,</span><br><span class="line">    phone <span class="built_in">int</span>,</span><br><span class="line">    addr <span class="built_in">varchar</span>(<span class="number">64</span>)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> author(</span><br><span class="line">	<span class="keyword">id</span> <span class="built_in">int</span> primary <span class="keyword">key</span> auto_increment,</span><br><span class="line">    <span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">32</span>),</span><br><span class="line">    age <span class="built_in">int</span>,</span><br><span class="line">    authordetail_id <span class="built_in">int</span> <span class="keyword">unique</span>,</span><br><span class="line">    <span class="keyword">foreign</span> <span class="keyword">key</span>(authordetail_id) <span class="keyword">references</span> authordetail(<span class="keyword">id</span>) </span><br><span class="line">    <span class="keyword">on</span> <span class="keyword">update</span> <span class="keyword">cascade</span>  <span class="comment"># 同步更新</span></span><br><span class="line">    <span class="keyword">on</span> <span class="keyword">delete</span> <span class="keyword">cascade</span>  <span class="comment"># 同步删除</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p><strong>总结</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;&quot;&quot;</span><br><span class="line">表关系的建立需要用到foreign key</span><br><span class="line">	一对多</span><br><span class="line">		外键字段建在多的一方</span><br><span class="line">	多对多</span><br><span class="line">		自己开设第三张存储</span><br><span class="line">	一对一</span><br><span class="line">		建在任意一方都可以 但是推荐你建在查询频率较高的表中</span><br><span class="line"></span><br><span class="line">判断表之间关系的方式</span><br><span class="line">	换位思考！！！</span><br><span class="line">		员工与部门</span><br><span class="line">	</span><br><span class="line">		图书与作者</span><br><span class="line">	</span><br><span class="line">		作者与作者详情</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>

<h3 id="修改表-了解"><a href="#修改表-了解" class="headerlink" title="修改表(了解)"></a>修改表(了解)</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment"># MySQL对大小写是不敏感的</span></span><br><span class="line">"""</span><br><span class="line">1 修改表名</span><br><span class="line">	<span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">rename</span> 新表名;</span><br><span class="line"></span><br><span class="line">2 增加字段</span><br><span class="line">	<span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">add</span> 字段名 字段类型(宽度)  约束条件;</span><br><span class="line">	<span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">add</span> 字段名 字段类型(宽度)  约束条件 <span class="keyword">first</span>;</span><br><span class="line">	<span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">add</span> 字段名 字段类型(宽度)  约束条件 <span class="keyword">after</span> 字段名;</span><br><span class="line"></span><br><span class="line">3 删除字段</span><br><span class="line">	<span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">drop</span> 字段名;</span><br><span class="line"></span><br><span class="line">4 修改字段</span><br><span class="line">	<span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">modify</span> 字段名 字段类型(宽度) 约束条件;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">change</span> 旧字段名 新字段名 字段类型(宽度) 约束条件;</span><br><span class="line">	</span><br><span class="line">"""</span><br></pre></td></tr></table></figure>

<h3 id="复制表-了解"><a href="#复制表-了解" class="headerlink" title="复制表(了解)"></a>复制表(了解)</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">"""</span><br><span class="line">我们sql语句查询的结果其实也是一张虚拟表</span><br><span class="line">"""</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 表名 <span class="keyword">select</span> * <span class="keyword">from</span> 旧表;  不能复制主键 外键 ...</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> new_dep2 <span class="keyword">select</span> * <span class="keyword">from</span> dep <span class="keyword">where</span> <span class="keyword">id</span>&gt;<span class="number">3</span>;</span><br></pre></td></tr></table></figure>

<h3 id="练习："><a href="#练习：" class="headerlink" title="练习："></a>练习：</h3><p>练习：账号信息表，用户组，主机表，主机组</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#用户表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">user</span>(</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">int</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">unique</span> auto_increment,</span><br><span class="line">username <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line"><span class="keyword">password</span> <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">primary <span class="keyword">key</span>(username,<span class="keyword">password</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">#用户组表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> usergroup(</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">int</span> primary <span class="keyword">key</span> auto_increment,</span><br><span class="line">groupname <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">unique</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">#主机表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> host(</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">int</span> primary <span class="keyword">key</span> auto_increment,</span><br><span class="line">ip <span class="built_in">char</span>(<span class="number">15</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">unique</span> <span class="keyword">default</span> <span class="string">'127.0.0.1'</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">#业务线表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> business(</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">int</span> primary <span class="keyword">key</span> auto_increment,</span><br><span class="line">business <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">unique</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">#建关系：user与usergroup</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> user2usergroup(</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">int</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">unique</span> auto_increment,</span><br><span class="line">user_id <span class="built_in">int</span> <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line"><span class="keyword">group_id</span> <span class="built_in">int</span> <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">primary <span class="keyword">key</span>(user_id,<span class="keyword">group_id</span>),</span><br><span class="line"><span class="keyword">foreign</span> <span class="keyword">key</span>(user_id) <span class="keyword">references</span> <span class="keyword">user</span>(<span class="keyword">id</span>),</span><br><span class="line"><span class="keyword">foreign</span> <span class="keyword">key</span>(<span class="keyword">group_id</span>) <span class="keyword">references</span> usergroup(<span class="keyword">id</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">#建关系：host与business</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> host2business(</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">int</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">unique</span> auto_increment,</span><br><span class="line">host_id <span class="built_in">int</span> <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">business_id <span class="built_in">int</span> <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">primary <span class="keyword">key</span>(host_id,business_id),</span><br><span class="line"><span class="keyword">foreign</span> <span class="keyword">key</span>(host_id) <span class="keyword">references</span> host(<span class="keyword">id</span>),</span><br><span class="line"><span class="keyword">foreign</span> <span class="keyword">key</span>(business_id) <span class="keyword">references</span> business(<span class="keyword">id</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">#建关系：user与host</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> user2host(</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">int</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">unique</span> auto_increment,</span><br><span class="line">user_id <span class="built_in">int</span> <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">host_id <span class="built_in">int</span> <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">primary <span class="keyword">key</span>(user_id,host_id),</span><br><span class="line"><span class="keyword">foreign</span> <span class="keyword">key</span>(user_id) <span class="keyword">references</span> <span class="keyword">user</span>(<span class="keyword">id</span>),</span><br><span class="line"><span class="keyword">foreign</span> <span class="keyword">key</span>(host_id) <span class="keyword">references</span> host(<span class="keyword">id</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>练习:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 班级表</span></span><br><span class="line">cid	caption</span><br><span class="line"><span class="comment"># 学生表</span></span><br><span class="line">sid sname gender class_id</span><br><span class="line"><span class="comment"># 老师表</span></span><br><span class="line">tid	tname</span><br><span class="line"><span class="comment"># 课程表</span></span><br><span class="line">cid	cname	teacher_id</span><br><span class="line"><span class="comment"># 成绩表</span></span><br><span class="line">sid	student_id course_id number</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>[缓存的使用和优化]</title>
    <url>/2020/06/21/%E7%BC%93%E5%AD%98%E7%9A%84%E4%BD%BF%E7%94%A8%E5%92%8C%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<h2 id="一-缓存的收益与成本"><a href="#一-缓存的收益与成本" class="headerlink" title="一 缓存的收益与成本"></a>一 缓存的收益与成本</h2><h3 id="1-1-受益"><a href="#1-1-受益" class="headerlink" title="1.1 受益"></a>1.1 受益</h3><blockquote>
<p>1 加速读写</p>
<p>2 降低后端负载：后端服务器通过前端缓存降低负载，业务端使用redis降低后端mysql负载</p>
</blockquote>
<h3 id="1-2-成本"><a href="#1-2-成本" class="headerlink" title="1.2 成本"></a>1.2 成本</h3><blockquote>
<p>1 数据不一致：缓存层和数据层有时间窗口不一致，和更新策略有关</p>
<p>2 代码维护成本：多了一层缓存逻辑</p>
<p>3 运维成本：比如使用了Redis Cluster</p>
</blockquote>
<h3 id="1-3-使用场景"><a href="#1-3-使用场景" class="headerlink" title="1.3 使用场景"></a>1.3 使用场景</h3><blockquote>
<p>1 降低后端负载：对高消耗的sql，join结果集/分组统计的结果做缓存</p>
<p>2 加速请求响应：利用redis优化io响应时间</p>
<p>3 大量写合并为批量写：如计数器先redis累加再批量写入db</p>
</blockquote>
<h2 id="二-缓存更新策略"><a href="#二-缓存更新策略" class="headerlink" title="二 缓存更新策略"></a>二 缓存更新策略</h2><blockquote>
<p>1 LRU/LFU/FIFO算法剔除：例如maxmemory-policy(到了最大内存，对应的应对策略)</p>
<p>​        LRU -Least Recently Used,没有被使用时间最长的</p>
<p>​        LFU -Least Frequenty User,一定时间段内使用次数最少的</p>
<p>​        FIFO -First In First Out</p>
<p>​        LIRS (Low Inter-reference Recency  Set)是一个页替换算法，相比于LRU(Least Recently  Used)和很多其他的替换算法，LIRS具有较高的性能。这是通过使用两次访问同一页之间的距离（本距离指中间被访问了多少非重复块）作为一种尺度去动态地将访问页排序，从而去做一个替换的选择</p>
<p>配置文件中设置：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&gt;<span class="comment"># LRU配置</span></span><br><span class="line">&gt;maxmemory-policy:volatile-lru</span><br><span class="line">&gt;（<span class="number">1</span>）noeviction: 如果内存使用达到了maxmemory，client还要继续写入数据，那么就直接报错给客户端</span><br><span class="line">&gt;（<span class="number">2</span>）allkeys-lru: 就是我们常说的LRU算法，移除掉最近最少使用的那些keys对应的数据，ps最长用的策略</span><br><span class="line">&gt;（<span class="number">3</span>）volatile-lru: 也是采取LRU算法，但是仅仅针对那些设置了指定存活时间（TTL）的key才会清理掉</span><br><span class="line">&gt;（<span class="number">4</span>）allkeys-random: 随机选择一些key来删除掉</span><br><span class="line">&gt;（<span class="number">5</span>）volatile-random: 随机选择一些设置了TTL的key来删除掉</span><br><span class="line">&gt;（<span class="number">6</span>）volatile-ttl: 移除掉部分keys，选择那些TTL时间比较短的keys</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&gt;<span class="comment"># LFU配置 Redis4.0之后为maxmemory_policy淘汰策略添加了两个LFU模式：</span></span><br><span class="line">&gt;volatile-lfu：对有过期时间的key采用LFU淘汰算法</span><br><span class="line">&gt;allkeys-lfu：对全部key采用LFU淘汰算法</span><br><span class="line">&gt;<span class="comment"># 还有2个配置可以调整LFU算法：</span></span><br><span class="line">&gt;lfu-log-factor <span class="number">10</span></span><br><span class="line">&gt;lfu-decay-time <span class="number">1</span></span><br><span class="line">&gt;<span class="comment"># lfu-log-factor可以调整计数器counter的增长速度，lfu-log-factor越大，counter增长的越慢。</span></span><br><span class="line">&gt;<span class="comment"># lfu-decay-time是一个以分钟为单位的数值，可以调整counter的减少速度</span></span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<p>2 超时剔除：例如expire，设置过期时间</p>
<p>3 主动更新：开发控制生命周期</p>
</blockquote>
<table>
<thead>
<tr>
<th>策略</th>
<th>一致性</th>
<th>维护成本</th>
</tr>
</thead>
<tbody><tr>
<td>LRU/LIRS算法剔除</td>
<td>最差</td>
<td>低</td>
</tr>
<tr>
<td>超时剔除</td>
<td>较差</td>
<td>低</td>
</tr>
<tr>
<td>主动更新</td>
<td>强</td>
<td>高</td>
</tr>
</tbody></table>
<p>1 低一致性：最大内存和淘汰策略</p>
<p>2 高一致性：超时剔除和主动更新结合，最大内存和淘汰策略兜底</p>
<h2 id="三-缓存粒度控制"><a href="#三-缓存粒度控制" class="headerlink" title="三 缓存粒度控制"></a>三 缓存粒度控制</h2><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gduwyfg8mgj30bm0dsjt6.jpg" alt="image-20200416002406930" style="zoom:50%;" />

<blockquote>
<p>1 从mysql获取用户信息：select * from user where id=100</p>
<p>2 设置用户信息缓存：set user:100 <code>select * from user where id=100</code></p>
<p>3 缓存粒度：</p>
<p>​    缓存全部属性</p>
<p>​    缓存部分重要属性</p>
</blockquote>
<p>1 通用性：全量属性更好</p>
<p>2 占用空间：部分属性更好</p>
<p>3 代码维护：表面上全量属性更好</p>
<h2 id="四-缓存穿透，缓存击穿，缓存雪崩"><a href="#四-缓存穿透，缓存击穿，缓存雪崩" class="headerlink" title="四 缓存穿透，缓存击穿，缓存雪崩"></a>四 缓存穿透，缓存击穿，缓存雪崩</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">###  缓存穿透</span></span><br><span class="line"><span class="comment">#描述：</span></span><br><span class="line">缓存穿透是指缓存和数据库中都没有的数据，而用户不断发起请求，如发起为id为“<span class="number">-1</span>”的数据或id为特别大不存在的数据。这时的用户很可能是攻击者，攻击会导致数据库压力过大。</span><br><span class="line"><span class="comment">#解决方案：</span></span><br><span class="line"><span class="number">1</span> 接口层增加校验，如用户鉴权校验，id做基础校验，id&lt;=<span class="number">0</span>的直接拦截；</span><br><span class="line"><span class="number">2</span> 从缓存取不到的数据，在数据库中也没有取到，这时也可以将key-value对写为key-null，缓存有效时间可以设置短点，如<span class="number">30</span>秒（设置太长会导致正常情况也没法使用）。这样可以防止攻击用户反复用同一个id暴力攻击</span><br><span class="line"><span class="number">3</span> 通过布隆过滤器实现</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">### 缓存击穿</span></span><br><span class="line"><span class="comment">#描述：</span></span><br><span class="line">缓存击穿是指缓存中没有但数据库中有的数据（一般是缓存时间到期），这时由于并发用户特别多，同时读缓存没读到数据，又同时去数据库去取数据，引起数据库压力瞬间增大，造成过大压力</span><br><span class="line"><span class="comment">#解决方案：</span></span><br><span class="line">设置热点数据永远不过期。</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"><span class="comment">### 缓存雪崩</span></span><br><span class="line"><span class="comment">#描述：</span></span><br><span class="line">缓存雪崩是指缓存中数据大批量到过期时间，而查询数据量巨大，引起数据库压力过大甚至down机。和缓存击穿不同的是，        缓存击穿指并发查同一条数据，缓存雪崩是不同数据都过期了，很多数据都查不到从而查数据库。</span><br><span class="line"><span class="comment"># 解决方案：</span></span><br><span class="line"><span class="number">1</span> 缓存数据的过期时间设置随机，防止同一时间大量数据过期现象发生。</span><br><span class="line"><span class="number">2</span> 如果缓存数据库是分布式部署，将热点数据均匀分布在不同搞得缓存数据库中。</span><br><span class="line"><span class="number">3</span> 设置热点数据永远不过期。</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>[聚合函数]</title>
    <url>/2020/03/11/%E8%81%9A%E5%90%88%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h3 id="前期表准备"><a href="#前期表准备" class="headerlink" title="前期表准备"></a>前期表准备</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> emp(</span><br><span class="line">  <span class="keyword">id</span> <span class="built_in">int</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">unique</span> auto_increment,</span><br><span class="line">  <span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">  sex enum(<span class="string">'male'</span>,<span class="string">'female'</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="string">'male'</span>, <span class="comment">#大部分是男的</span></span><br><span class="line">  age <span class="built_in">int</span>(<span class="number">3</span>) <span class="keyword">unsigned</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="number">28</span>,</span><br><span class="line">  hire_date <span class="built_in">date</span> <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">  post <span class="built_in">varchar</span>(<span class="number">50</span>),</span><br><span class="line">  post_comment <span class="built_in">varchar</span>(<span class="number">100</span>),</span><br><span class="line">  salary <span class="keyword">double</span>(<span class="number">15</span>,<span class="number">2</span>),</span><br><span class="line">  office <span class="built_in">int</span>, <span class="comment">#一个部门一个屋子</span></span><br><span class="line">  depart_id <span class="built_in">int</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">#插入记录</span></span><br><span class="line"><span class="comment">#三个部门：教学，销售，运营</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> emp(<span class="keyword">name</span>,sex,age,hire_date,post,salary,office,depart_id) <span class="keyword">values</span></span><br><span class="line">(<span class="string">'jason'</span>,<span class="string">'male'</span>,<span class="number">18</span>,<span class="string">'20170301'</span>,<span class="string">'张江第一帅形象代言'</span>,<span class="number">7300.33</span>,<span class="number">401</span>,<span class="number">1</span>), <span class="comment">#以下是教学部</span></span><br><span class="line">(<span class="string">'tom'</span>,<span class="string">'male'</span>,<span class="number">78</span>,<span class="string">'20150302'</span>,<span class="string">'teacher'</span>,<span class="number">1000000.31</span>,<span class="number">401</span>,<span class="number">1</span>),</span><br><span class="line">(<span class="string">'kevin'</span>,<span class="string">'male'</span>,<span class="number">81</span>,<span class="string">'20130305'</span>,<span class="string">'teacher'</span>,<span class="number">8300</span>,<span class="number">401</span>,<span class="number">1</span>),</span><br><span class="line">(<span class="string">'tony'</span>,<span class="string">'male'</span>,<span class="number">73</span>,<span class="string">'20140701'</span>,<span class="string">'teacher'</span>,<span class="number">3500</span>,<span class="number">401</span>,<span class="number">1</span>),</span><br><span class="line">(<span class="string">'owen'</span>,<span class="string">'male'</span>,<span class="number">28</span>,<span class="string">'20121101'</span>,<span class="string">'teacher'</span>,<span class="number">2100</span>,<span class="number">401</span>,<span class="number">1</span>),</span><br><span class="line">(<span class="string">'jack'</span>,<span class="string">'female'</span>,<span class="number">18</span>,<span class="string">'20110211'</span>,<span class="string">'teacher'</span>,<span class="number">9000</span>,<span class="number">401</span>,<span class="number">1</span>),</span><br><span class="line">(<span class="string">'jenny'</span>,<span class="string">'male'</span>,<span class="number">18</span>,<span class="string">'19000301'</span>,<span class="string">'teacher'</span>,<span class="number">30000</span>,<span class="number">401</span>,<span class="number">1</span>),</span><br><span class="line">(<span class="string">'sank'</span>,<span class="string">'male'</span>,<span class="number">48</span>,<span class="string">'20101111'</span>,<span class="string">'teacher'</span>,<span class="number">10000</span>,<span class="number">401</span>,<span class="number">1</span>),</span><br><span class="line">(<span class="string">'哈哈'</span>,<span class="string">'female'</span>,<span class="number">48</span>,<span class="string">'20150311'</span>,<span class="string">'sale'</span>,<span class="number">3000.13</span>,<span class="number">402</span>,<span class="number">2</span>),<span class="comment">#以下是销售部门</span></span><br><span class="line">(<span class="string">'呵呵'</span>,<span class="string">'female'</span>,<span class="number">38</span>,<span class="string">'20101101'</span>,<span class="string">'sale'</span>,<span class="number">2000.35</span>,<span class="number">402</span>,<span class="number">2</span>),</span><br><span class="line">(<span class="string">'西西'</span>,<span class="string">'female'</span>,<span class="number">18</span>,<span class="string">'20110312'</span>,<span class="string">'sale'</span>,<span class="number">1000.37</span>,<span class="number">402</span>,<span class="number">2</span>),</span><br><span class="line">(<span class="string">'乐乐'</span>,<span class="string">'female'</span>,<span class="number">18</span>,<span class="string">'20160513'</span>,<span class="string">'sale'</span>,<span class="number">3000.29</span>,<span class="number">402</span>,<span class="number">2</span>),</span><br><span class="line">(<span class="string">'拉拉'</span>,<span class="string">'female'</span>,<span class="number">28</span>,<span class="string">'20170127'</span>,<span class="string">'sale'</span>,<span class="number">4000.33</span>,<span class="number">402</span>,<span class="number">2</span>),</span><br><span class="line">(<span class="string">'僧龙'</span>,<span class="string">'male'</span>,<span class="number">28</span>,<span class="string">'20160311'</span>,<span class="string">'operation'</span>,<span class="number">10000.13</span>,<span class="number">403</span>,<span class="number">3</span>), <span class="comment">#以下是运营部门</span></span><br><span class="line">(<span class="string">'程咬金'</span>,<span class="string">'male'</span>,<span class="number">18</span>,<span class="string">'19970312'</span>,<span class="string">'operation'</span>,<span class="number">20000</span>,<span class="number">403</span>,<span class="number">3</span>),</span><br><span class="line">(<span class="string">'程咬银'</span>,<span class="string">'female'</span>,<span class="number">18</span>,<span class="string">'20130311'</span>,<span class="string">'operation'</span>,<span class="number">19000</span>,<span class="number">403</span>,<span class="number">3</span>),</span><br><span class="line">(<span class="string">'程咬铜'</span>,<span class="string">'male'</span>,<span class="number">18</span>,<span class="string">'20150411'</span>,<span class="string">'operation'</span>,<span class="number">18000</span>,<span class="number">403</span>,<span class="number">3</span>),</span><br><span class="line">(<span class="string">'程咬铁'</span>,<span class="string">'female'</span>,<span class="number">18</span>,<span class="string">'20140512'</span>,<span class="string">'operation'</span>,<span class="number">17000</span>,<span class="number">403</span>,<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment"># 当表字段特别多 展示的时候错乱 可以使用\G分行展示</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp\G;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 个别的电脑在插入中文的时候还是会出现乱码或者空白的现象 你可以将字符编码统一设置成GBK</span></span><br></pre></td></tr></table></figure>

<h3 id="几个重要关键字的执行顺序"><a href="#几个重要关键字的执行顺序" class="headerlink" title="几个重要关键字的执行顺序"></a>几个重要关键字的执行顺序</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 书写顺序</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">id</span>,<span class="keyword">name</span> <span class="keyword">from</span> emp <span class="keyword">where</span> <span class="keyword">id</span> &gt; <span class="number">3</span>;</span><br><span class="line"><span class="comment"># 执行顺序</span></span><br><span class="line">from</span><br><span class="line">where</span><br><span class="line"><span class="keyword">select</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">虽然执行顺序和书写顺序不一致 你在写sql语句的时候可能不知道怎么写</span></span><br><span class="line"><span class="string">你就按照书写顺序的方式写sql</span></span><br><span class="line"><span class="string">	select * 先用*号占位</span></span><br><span class="line"><span class="string">	之后去补全后面的sql语句</span></span><br><span class="line"><span class="string">	最后将*号替换后你想要的具体字段</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<h3 id="where筛选条件"><a href="#where筛选条件" class="headerlink" title="where筛选条件"></a>where筛选条件</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 作用:是对整体数据的一个筛选操作</span></span><br><span class="line"><span class="comment"># 1.查询id大于等于3小于等于6的数据</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">id</span>,<span class="keyword">name</span>,age <span class="keyword">from</span> emp <span class="keyword">where</span> <span class="keyword">id</span>&gt;=<span class="number">3</span> <span class="keyword">and</span> <span class="keyword">id</span>&lt;=<span class="number">6</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">id</span>,<span class="keyword">name</span> <span class="keyword">from</span> emp <span class="keyword">where</span> <span class="keyword">id</span> <span class="keyword">between</span> <span class="number">3</span> <span class="keyword">and</span> <span class="number">6</span>;  两者等价</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.查询薪资是20000或者18000或者17000的数据</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> salary=<span class="number">20000</span> <span class="keyword">or</span> salary=<span class="number">18000</span> <span class="keyword">or</span> salary=<span class="number">17000</span>;</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> salary <span class="keyword">in</span> (<span class="number">20000</span>,<span class="number">18000</span>,<span class="number">17000</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.查询员工姓名中包含字母o的员工的姓名和薪资</span></span><br><span class="line">"""</span><br><span class="line">模糊查询</span><br><span class="line">	like</span><br><span class="line">		%  匹配任意多个字符</span><br><span class="line">		_  匹配任意单个字符</span><br><span class="line">"""</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">name</span>,salary <span class="keyword">from</span> emp <span class="keyword">where</span> <span class="keyword">name</span> <span class="keyword">like</span> <span class="string">'%o%'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.查询员工姓名是由四个字符组成的 姓名和薪资  char_length()   _</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">name</span>,salary <span class="keyword">from</span> emp <span class="keyword">where</span> <span class="keyword">name</span> <span class="keyword">like</span> <span class="string">'____'</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">name</span>,salary <span class="keyword">from</span> emp <span class="keyword">where</span> <span class="keyword">char_length</span>(<span class="keyword">name</span>) = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5.查询id小于3或者id大于6的数据</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> <span class="keyword">id</span> <span class="keyword">not</span> <span class="keyword">between</span> <span class="number">3</span> <span class="keyword">and</span> <span class="number">6</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 6.查询薪资不在20000,18000,17000范围的数据</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> salary <span class="keyword">not</span> <span class="keyword">in</span> (<span class="number">20000</span>,<span class="number">18000</span>,<span class="number">17000</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment"># 7.查询岗位描述为空的员工姓名和岗位名  针对null不用等号 用is</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">name</span>,post <span class="keyword">from</span> emp <span class="keyword">where</span> post_comment = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">name</span>,post <span class="keyword">from</span> emp <span class="keyword">where</span> post_comment <span class="keyword">is</span> <span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure>

<h3 id="group-by分组"><a href="#group-by分组" class="headerlink" title="group by分组"></a>group by分组</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 分组实际应用场景  分组应用场景非常的多</span></span><br><span class="line">	男女比例</span><br><span class="line">    部门平均薪资</span><br><span class="line">    部门秃头率</span><br><span class="line">    国家之间数据统计</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1	按照部门分组</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> post;</span><br><span class="line">"""</span><br><span class="line">分组之后 最小可操作单位应该是组 还不再是组内的单个数据</span><br><span class="line">	上述命令在你没有设置严格模式的时候是可正常执行的 返回的是分组之后 每个组的第一条数据 </span><br><span class="line">	但是这不符合分组的规范:分组之后不应该考虑单个数据 而应该以组为操作单位(分组之后 没办法直接获取组内单个数据)</span><br><span class="line">	如果设置了严格模式 那么上述命令会直接报错 </span><br><span class="line">"""</span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> sql_mode = <span class="string">'strict_trans_tables,only_full_group_by'</span>;</span><br><span class="line"></span><br><span class="line">设置严格模式之后  分组 默认只能拿到分组的依据</span><br><span class="line"><span class="keyword">select</span> post <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> post;  </span><br><span class="line">按照什么分组就只能拿到分组 其他字段不能直接获取 需要借助于一些方法(聚合函数)</span><br><span class="line"></span><br><span class="line">"""</span><br><span class="line">什么时候需要分组啊？？？</span><br><span class="line">	关键字 </span><br><span class="line">		每个 平均 最高 最低 </span><br><span class="line">	</span><br><span class="line">	聚合函数</span><br><span class="line">		max</span><br><span class="line">		min</span><br><span class="line">		sum</span><br><span class="line">		count</span><br><span class="line">		avg</span><br><span class="line">"""</span><br><span class="line"><span class="comment"># 1.获取每个部门的最高薪资</span></span><br><span class="line"><span class="keyword">select</span> post,<span class="keyword">max</span>(salary) <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> post;</span><br><span class="line"><span class="keyword">select</span> post <span class="keyword">as</span> <span class="string">'部门'</span>,<span class="keyword">max</span>(salary) <span class="keyword">as</span> <span class="string">'最高薪资'</span> <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> post;</span><br><span class="line"><span class="keyword">select</span> post <span class="string">'部门'</span>,<span class="keyword">max</span>(salary) <span class="string">'最高薪资'</span> <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> post;</span><br><span class="line"><span class="comment"># as可以给字段起别名 也可以直接省略不写 但是不推荐 因为省略的话语意不明确 容易错乱</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.获取每个部门的最低薪资</span></span><br><span class="line"><span class="keyword">select</span> post,<span class="keyword">min</span>(salary) <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> post;</span><br><span class="line"><span class="comment"># 3.获取每个部门的平均薪资</span></span><br><span class="line"><span class="keyword">select</span> post,<span class="keyword">avg</span>(salary) <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> post;</span><br><span class="line"><span class="comment"># 4.获取每个部门的工资总和</span></span><br><span class="line"><span class="keyword">select</span> post,<span class="keyword">sum</span>(salary) <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> post;</span><br><span class="line"><span class="comment"># 5.获取每个部门的人数</span></span><br><span class="line"><span class="keyword">select</span> post,<span class="keyword">count</span>(<span class="keyword">id</span>) <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> post;  <span class="comment"># 常用 符合逻辑</span></span><br><span class="line"><span class="keyword">select</span> post,<span class="keyword">count</span>(salary) <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> post;</span><br><span class="line"><span class="keyword">select</span> post,<span class="keyword">count</span>(age) <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> post;</span><br><span class="line"><span class="keyword">select</span> post,<span class="keyword">count</span>(post_comment) <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> post;  null不行</span><br><span class="line"></span><br><span class="line"><span class="comment"># 6.查询分组之后的部门名称和每个部门下所有的员工姓名 </span></span><br><span class="line"><span class="comment"># group_concat不单单可以支持你获取分组之后的其他字段值 还支持拼接操作</span></span><br><span class="line"><span class="keyword">select</span> post,<span class="keyword">group_concat</span>(<span class="keyword">name</span>) <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> post;</span><br><span class="line"><span class="keyword">select</span> post,<span class="keyword">group_concat</span>(<span class="keyword">name</span>,<span class="string">'_DSB'</span>) <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> post;</span><br><span class="line"><span class="keyword">select</span> post,<span class="keyword">group_concat</span>(<span class="keyword">name</span>,<span class="string">':'</span>,salary) <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> post;</span><br><span class="line"><span class="comment"># concat不分组的时候用 </span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">concat</span>(<span class="string">'NAME:'</span>,<span class="keyword">name</span>),<span class="keyword">concat</span>(<span class="string">'SAL:'</span>,salary) <span class="keyword">from</span> emp;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 补充 as语法不单单可以给字段起别名 还可以给表临时起别名</span></span><br><span class="line"><span class="keyword">select</span> emp.id,emp.name <span class="keyword">from</span> emp;  </span><br><span class="line"><span class="keyword">select</span> emp.id,emp.name <span class="keyword">from</span> emp <span class="keyword">as</span> t1;   报错</span><br><span class="line"><span class="keyword">select</span> t1.id,t1.name <span class="keyword">from</span> emp <span class="keyword">as</span> t1;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询每个人的年薪  12薪</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">name</span>,salary*<span class="number">12</span> <span class="keyword">from</span> emp;</span><br></pre></td></tr></table></figure>

<h3 id="分组注意事项"><a href="#分组注意事项" class="headerlink" title="分组注意事项"></a>分组注意事项</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 关键字where和group by同时出现的时候group by必须在where的后面</span></span><br><span class="line">where先对整体数据进行过滤之后再分组操作</span><br><span class="line">where筛选条件不能使用聚合函数</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">id</span>,<span class="keyword">name</span>,age <span class="keyword">from</span> emp <span class="keyword">where</span> <span class="keyword">max</span>(salary) &gt; <span class="number">3000</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">max</span>(salary) <span class="keyword">from</span> emp;  <span class="comment"># 不分组 默认整体就是一组</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 统计各部门年龄在30岁以上的员工平均薪资</span></span><br><span class="line">	1 先求所有年龄大于30岁的员工</span><br><span class="line">    	<span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> age&gt;<span class="number">30</span>;</span><br><span class="line">    2 再对结果进行分组</span><br><span class="line">     	<span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> age&gt;<span class="number">30</span> <span class="keyword">group</span> <span class="keyword">by</span> post;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">select</span> post,<span class="keyword">avg</span>(salary) <span class="keyword">from</span> emp <span class="keyword">where</span> age&gt;<span class="number">30</span> <span class="keyword">group</span> <span class="keyword">by</span> post;</span><br></pre></td></tr></table></figure>

<h3 id="having分组之后的筛选条件"><a href="#having分组之后的筛选条件" class="headerlink" title="having分组之后的筛选条件"></a>having分组之后的筛选条件</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">"""</span><br><span class="line">having的语法根where是一致的</span><br><span class="line">只不过having是在分组之后进行的过滤操作</span><br><span class="line">即having是可以直接使用聚合函数的</span><br><span class="line">"""</span><br><span class="line"><span class="comment"># 统计各部门年龄在30岁以上的员工平均工资并且保留平均薪资大于10000的部门</span></span><br><span class="line"><span class="keyword">select</span> post,<span class="keyword">avg</span>(salary) <span class="keyword">from</span> emp </span><br><span class="line">		<span class="keyword">where</span> age&gt;<span class="number">30</span> </span><br><span class="line">    	<span class="keyword">group</span> <span class="keyword">by</span> post</span><br><span class="line">        <span class="keyword">having</span> <span class="keyword">avg</span>(salary) &gt; <span class="number">10000</span></span><br><span class="line">        ;</span><br></pre></td></tr></table></figure>

<h3 id="distinct去重"><a href="#distinct去重" class="headerlink" title="distinct去重"></a>distinct去重</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">"""</span><br><span class="line">一定要注意 必须是完全一样的数据才可以去重！！！</span><br><span class="line">一定不要将逐渐忽视了 有逐渐存在的情况下 是不可能去重的</span><br><span class="line">[</span><br><span class="line">&#123;'id':1,'name':'jason','age':18&#125;,</span><br><span class="line">&#123;'id':2,'name':'jason','age':18&#125;,</span><br><span class="line">&#123;'id':3,'name':'egon','age':18&#125;</span><br><span class="line">]</span><br><span class="line">ORM  对象关系映射   让不懂SQL语句的人也能够非常牛逼的操作数据库</span><br><span class="line">表								类</span><br><span class="line">一条条的数据						对象</span><br><span class="line">字段对应的值						对象的属性</span><br><span class="line"></span><br><span class="line">你再写类 就意味着在创建表</span><br><span class="line">用类生成对象 就意味着再创建数据</span><br><span class="line">对象点属性 就是在获取数据字段对应的值</span><br><span class="line">目的就是减轻python程序员的压力 只需要会python面向对象的知识点就可以操作MySQL</span><br><span class="line">"""</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> <span class="keyword">id</span>,age <span class="keyword">from</span> emp;</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> age <span class="keyword">from</span> emp;</span><br></pre></td></tr></table></figure>

<h3 id="order-by排序"><a href="#order-by排序" class="headerlink" title="order by排序"></a>order by排序</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">order</span> <span class="keyword">by</span> salary;</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">order</span> <span class="keyword">by</span> salary <span class="keyword">asc</span>;</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">order</span> <span class="keyword">by</span> salary <span class="keyword">desc</span>;</span><br><span class="line">"""</span><br><span class="line">order by默认是升序  asc 该asc可以省略不写</span><br><span class="line">也可以修改为降序     desc</span><br><span class="line">"""</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">order</span> <span class="keyword">by</span> age <span class="keyword">desc</span>,salary <span class="keyword">asc</span>;</span><br><span class="line"><span class="comment"># 先按照age降序排  如果碰到age相同 则再按照salary升序排</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 统计各部门年龄在10岁以上的员工平均工资并且保留平均薪资大于1000的部门,然后对平均工资降序排序</span></span><br><span class="line">	<span class="keyword">select</span> post,<span class="keyword">avg</span>(salary) <span class="keyword">from</span> emp </span><br><span class="line">		<span class="keyword">where</span> age&gt;<span class="number">10</span> </span><br><span class="line">    	<span class="keyword">group</span> <span class="keyword">by</span> post</span><br><span class="line">        <span class="keyword">having</span> <span class="keyword">avg</span>(salary) &gt; <span class="number">1000</span></span><br><span class="line">        <span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">avg</span>(salary) <span class="keyword">desc</span></span><br><span class="line">        ;</span><br></pre></td></tr></table></figure>

<h3 id="limit限制展示条数"><a href="#limit限制展示条数" class="headerlink" title="limit限制展示条数"></a>limit限制展示条数</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp;</span><br><span class="line">"""针对数据过多的情况 我们通常都是做分页处理"""</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">limit</span> <span class="number">3</span>;  <span class="comment"># 只展示三条数据</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">limit</span> <span class="number">0</span>,<span class="number">5</span>;</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">limit</span> <span class="number">5</span>,<span class="number">5</span>;</span><br><span class="line">第一个参数是起始位置</span><br><span class="line">第二个参数是展示条数</span><br></pre></td></tr></table></figure>

<h3 id="正则"><a href="#正则" class="headerlink" title="正则"></a>正则</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> <span class="keyword">name</span> regexp <span class="string">'^j.*(n|y)$'</span>;</span><br></pre></td></tr></table></figure>

<h3 id="多表操作"><a href="#多表操作" class="headerlink" title="多表操作"></a>多表操作</h3><p>前期表准备</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#建表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> dep(</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">int</span>,</span><br><span class="line"><span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">20</span>) </span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> emp(</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">int</span> primary <span class="keyword">key</span> auto_increment,</span><br><span class="line"><span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">20</span>),</span><br><span class="line">sex enum(<span class="string">'male'</span>,<span class="string">'female'</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="string">'male'</span>,</span><br><span class="line">age <span class="built_in">int</span>,</span><br><span class="line">dep_id <span class="built_in">int</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">#插入数据</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> dep <span class="keyword">values</span></span><br><span class="line">(<span class="number">200</span>,<span class="string">'技术'</span>),</span><br><span class="line">(<span class="number">201</span>,<span class="string">'人力资源'</span>),</span><br><span class="line">(<span class="number">202</span>,<span class="string">'销售'</span>),</span><br><span class="line">(<span class="number">203</span>,<span class="string">'运营'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> emp(<span class="keyword">name</span>,sex,age,dep_id) <span class="keyword">values</span></span><br><span class="line">(<span class="string">'jason'</span>,<span class="string">'male'</span>,<span class="number">18</span>,<span class="number">200</span>),</span><br><span class="line">(<span class="string">'egon'</span>,<span class="string">'female'</span>,<span class="number">48</span>,<span class="number">201</span>),</span><br><span class="line">(<span class="string">'kevin'</span>,<span class="string">'male'</span>,<span class="number">18</span>,<span class="number">201</span>),</span><br><span class="line">(<span class="string">'nick'</span>,<span class="string">'male'</span>,<span class="number">28</span>,<span class="number">202</span>),</span><br><span class="line">(<span class="string">'owen'</span>,<span class="string">'male'</span>,<span class="number">18</span>,<span class="number">203</span>),</span><br><span class="line">(<span class="string">'jerry'</span>,<span class="string">'female'</span>,<span class="number">18</span>,<span class="number">204</span>);</span><br></pre></td></tr></table></figure>

<h3 id="表查询"><a href="#表查询" class="headerlink" title="表查询"></a>表查询</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> dep,emp;  <span class="comment"># 结果   笛卡尔积</span></span><br><span class="line">"""</span><br><span class="line">了解即可 不知道也没关系</span><br><span class="line">"""</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp,dep <span class="keyword">where</span> emp.dep_id = dep.id;</span><br><span class="line"></span><br><span class="line">"""</span><br><span class="line">MySQL也知道 你在后面查询数据过程中 肯定会经常用到拼表操作 </span><br><span class="line">所以特地给你开设了对应的方法</span><br><span class="line">	inner join  内连接</span><br><span class="line">	left join   左连接</span><br><span class="line">	right join  右连接</span><br><span class="line">	union		全连接</span><br><span class="line">"""</span><br><span class="line"><span class="comment"># inner join  内连接</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">inner</span> <span class="keyword">join</span> dep <span class="keyword">on</span> emp.dep_id = dep.id;</span><br><span class="line"><span class="comment"># 只拼接两张表中公有的数据部分</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># left join   左连接</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">left</span> <span class="keyword">join</span> dep <span class="keyword">on</span> emp.dep_id = dep.id;</span><br><span class="line"><span class="comment"># 左表所有的数据都展示出来 没有对应的项就用NULL</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># right join  右连接</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">right</span> <span class="keyword">join</span> dep <span class="keyword">on</span> emp.dep_id = dep.id;</span><br><span class="line"><span class="comment"># 右表所有的数据都展示出来 没有对应的项就用NULL</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># union		全连接  左右两表所有的数据都展示出来</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">left</span> <span class="keyword">join</span> dep <span class="keyword">on</span> emp.dep_id = dep.id</span><br><span class="line"><span class="keyword">union</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">right</span> <span class="keyword">join</span> dep <span class="keyword">on</span> emp.dep_id = dep.id;</span><br></pre></td></tr></table></figure>

<h3 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">"""</span><br><span class="line">子查询就是我们平时解决问题的思路</span><br><span class="line">	分步骤解决问题</span><br><span class="line">		第一步</span><br><span class="line">		第二步</span><br><span class="line">		...</span><br><span class="line">将一个查询语句的结果当做另外一个查询语句的条件去用</span><br><span class="line">"""</span><br><span class="line"><span class="comment"># 查询部门是技术或者人力资源的员工信息</span></span><br><span class="line">	1 先获取部门的id号</span><br><span class="line">    2 再去员工表里面筛选出对应的员工</span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">id</span> <span class="keyword">from</span> dep <span class="keyword">where</span> <span class="keyword">name</span>=<span class="string">'技术'</span> <span class="keyword">or</span> <span class="keyword">name</span> = <span class="string">'人力资源'</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">name</span> <span class="keyword">from</span> emp <span class="keyword">where</span> dep_id <span class="keyword">in</span> (<span class="number">200</span>,<span class="number">201</span>);</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> dep_id <span class="keyword">in</span> (<span class="keyword">select</span> <span class="keyword">id</span> <span class="keyword">from</span> dep <span class="keyword">where</span> <span class="keyword">name</span>=<span class="string">'技术'</span> <span class="keyword">or</span> <span class="keyword">name</span> = <span class="string">'人力资源'</span>);</span><br></pre></td></tr></table></figure>

<p><strong>总结</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">表的查询结果可以作为其他表的查询条件</span><br><span class="line">也可以通过起别名的方式把它作为一个张虚拟表根其他表关联</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">多表查询就两种方式</span><br><span class="line">	先拼接表再查询</span><br><span class="line">	子查询 一步一步来</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>[视图层]</title>
    <url>/2020/02/12/%E8%A7%86%E5%9B%BE%E5%B1%82/</url>
    <content><![CDATA[<h3 id="三板斧"><a href="#三板斧" class="headerlink" title="三板斧"></a>三板斧</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">HttpResponse</span></span><br><span class="line"><span class="string">	返回字符串类型</span></span><br><span class="line"><span class="string">render</span></span><br><span class="line"><span class="string">	返回html页面 并且在返回给浏览器之前还可以给html文件传值</span></span><br><span class="line"><span class="string">redirect</span></span><br><span class="line"><span class="string">	重定向</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment"># 视图函数必须要返回一个HttpResponse对象  正确   研究三者的源码即可得处结论</span></span><br><span class="line">The view app01.views.index didn<span class="string">'t return an HttpResponse object. It returned None instead.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># render简单内部原理</span></span><br><span class="line"><span class="string">	from django.template import Template,Context</span></span><br><span class="line">    res = Template('&lt;h1&gt;&#123;&#123; user &#125;&#125;&lt;/h1&gt;')</span><br><span class="line">    con = Context(&#123;<span class="string">'user'</span>:&#123;<span class="string">'username'</span>:<span class="string">'jason'</span>,<span class="string">'password'</span>:<span class="number">123</span>&#125;&#125;)</span><br><span class="line">    ret = res.render(con)</span><br><span class="line">    print(ret)</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(ret)</span><br></pre></td></tr></table></figure>

<h3 id="JsonResponse对象"><a href="#JsonResponse对象" class="headerlink" title="JsonResponse对象"></a>JsonResponse对象</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">json格式的数据有什么用？</span></span><br><span class="line"><span class="string">	前后端数据交互需要使用到json作为过渡 实现跨语言传输数据</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">前端序列化</span></span><br><span class="line"><span class="string">	JSON.stringify()					json.dumps()</span></span><br><span class="line"><span class="string">	JSON.parse()						json.loads()</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> JsonResponse</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ab_json</span><span class="params">(request)</span>:</span></span><br><span class="line">    user_dict = &#123;<span class="string">'username'</span>:<span class="string">'jason好帅哦,我好喜欢!'</span>,<span class="string">'password'</span>:<span class="string">'123'</span>,<span class="string">'hobby'</span>:<span class="string">'girl'</span>&#125;</span><br><span class="line"></span><br><span class="line">    l = [<span class="number">111</span>,<span class="number">222</span>,<span class="number">333</span>,<span class="number">444</span>,<span class="number">555</span>]</span><br><span class="line">    <span class="comment"># 先转成json格式字符串</span></span><br><span class="line">    <span class="comment"># json_str = json.dumps(user_dict,ensure_ascii=False)</span></span><br><span class="line">    <span class="comment"># 将该字符串返回</span></span><br><span class="line">    <span class="comment"># return HttpResponse(json_str)</span></span><br><span class="line">    <span class="comment"># 读源码掌握用法</span></span><br><span class="line">    <span class="comment"># return JsonResponse(user_dict,json_dumps_params=&#123;'ensure_ascii':False&#125;)</span></span><br><span class="line">    <span class="comment"># In order to allow non-dict objects to be serialized set the safe parameter to False.</span></span><br><span class="line">    <span class="comment"># return JsonResponse(l,safe=False)  </span></span><br><span class="line">    <span class="comment"># 默认只能序列化字典 序列化其他需要加safe参数</span></span><br></pre></td></tr></table></figure>

<h3 id="form表单上传文件及后端如何操作"><a href="#form表单上传文件及后端如何操作" class="headerlink" title="form表单上传文件及后端如何操作"></a>form表单上传文件及后端如何操作</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">form表单上传文件类型的数据</span></span><br><span class="line"><span class="string">	1.method必须指定成post</span></span><br><span class="line"><span class="string">	2.enctype必须换成formdata</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ab_file</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'POST'</span>:</span><br><span class="line">        <span class="comment"># print(request.POST)  # 只能获取普通的键值对数据 文件不行</span></span><br><span class="line">        print(request.FILES)  <span class="comment"># 获取文件数据</span></span><br><span class="line">        <span class="comment"># &lt;MultiValueDict: &#123;'file': [&lt;InMemoryUploadedFile: u=1288812541,1979816195&amp;fm=26&amp;gp=0.jpg (image/jpeg)&gt;]&#125;&gt;</span></span><br><span class="line">        file_obj = request.FILES.get(<span class="string">'file'</span>)  <span class="comment"># 文件对象</span></span><br><span class="line">        print(file_obj.name)</span><br><span class="line">        <span class="keyword">with</span> open(file_obj.name,<span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            <span class="keyword">for</span> line <span class="keyword">in</span> file_obj.chunks():  <span class="comment"># 推荐加上chunks方法 其实跟不加是一样的都是一行行的读取</span></span><br><span class="line">                f.write(line)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">'form.html'</span>)</span><br></pre></td></tr></table></figure>

<h3 id="request对象方法"><a href="#request对象方法" class="headerlink" title="request对象方法"></a>request对象方法</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">request.method</span></span><br><span class="line"><span class="string">request.POST</span></span><br><span class="line"><span class="string">request.GET</span></span><br><span class="line"><span class="string">request.FILES</span></span><br><span class="line"><span class="string">request.body  # 原生的浏览器发过来的二进制数据  后面详细的讲</span></span><br><span class="line"><span class="string">request.path </span></span><br><span class="line"><span class="string">request.path_info</span></span><br><span class="line"><span class="string">request.get_full_path()  能过获取完整的url及问号后面的参数 </span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">    print(request.path)  <span class="comment"># /app01/ab_file/</span></span><br><span class="line">    print(request.path_info)  <span class="comment"># /app01/ab_file/</span></span><br><span class="line">    print(request.get_full_path())  <span class="comment"># /app01/ab_file/?username=jason</span></span><br></pre></td></tr></table></figure>

<h3 id="FBV与CBV"><a href="#FBV与CBV" class="headerlink" title="FBV与CBV"></a>FBV与CBV</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 视图函数既可以是函数也可以是类</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></span><br><span class="line">  <span class="keyword">return</span> HttpResponse(<span class="string">'index'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># CBV</span></span><br><span class="line">    <span class="comment"># CBV路由</span></span><br><span class="line">    url(<span class="string">r'^login/'</span>,views.MyLogin.as_view())</span><br><span class="line"></span><br><span class="line">		<span class="keyword">from</span> django.views <span class="keyword">import</span> View</span><br><span class="line"></span><br><span class="line">		<span class="class"><span class="keyword">class</span> <span class="title">MyLogin</span><span class="params">(View)</span>:</span></span><br><span class="line">    	<span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self,request)</span>:</span></span><br><span class="line">        	<span class="keyword">return</span> render(request,<span class="string">'form.html'</span>)</span><br><span class="line"></span><br><span class="line">    	<span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self,request)</span>:</span></span><br><span class="line">        	<span class="keyword">return</span> HttpResponse(<span class="string">'post方法'</span>)</span><br><span class="line">      </span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">FBV和CBV各有千秋</span></span><br><span class="line"><span class="string">CBV特点</span></span><br><span class="line"><span class="string">	能够直接根据请求方式的不同直接匹配到对应的方法执行</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">	内部到底是怎么实现的？</span></span><br><span class="line"><span class="string">		CBV内部源码(******)</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<h3 id="CBV源码剖析"><a href="#CBV源码剖析" class="headerlink" title="CBV源码剖析"></a>CBV源码剖析</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 你自己不要修改源码 除了bug很难找</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 突破口在urls.py</span></span><br><span class="line">url(<span class="string">r'^login/'</span>,views.MyLogin.as_view())</span><br><span class="line"><span class="comment"># url(r'^login/',views.view)  FBV一模一样</span></span><br><span class="line"><span class="comment"># CBV与FBV在路由匹配上本质是一样的 都是路由 对应 函数内存地址</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">函数名/方法名 加括号执行优先级最高</span></span><br><span class="line"><span class="string">猜测</span></span><br><span class="line"><span class="string">    as_view()</span></span><br><span class="line"><span class="string">        要么是被@staicmethod修饰的静态方法</span></span><br><span class="line"><span class="string">        要么是被@classmethod修饰的类方法  正确</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">    @classonlymethod</span></span><br><span class="line"><span class="string">    def as_view(cls, **initkwargs):</span></span><br><span class="line"><span class="string">        pass</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @classonlymethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">as_view</span><span class="params">(cls, **initkwargs)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        cls就是我们自己写的类   MyCBV</span></span><br><span class="line"><span class="string">        Main entry point for a request-response process.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">view</span><span class="params">(request, *args, **kwargs)</span>:</span></span><br><span class="line">            self = cls(**initkwargs)  <span class="comment"># cls是我们自己写的类</span></span><br><span class="line">            <span class="comment"># self = MyLogin(**initkwargs)  产生一个我们自己写的类的对象</span></span><br><span class="line">            <span class="keyword">return</span> self.dispatch(request, *args, **kwargs)</span><br><span class="line">            <span class="string">"""</span></span><br><span class="line"><span class="string">            以后你们会经常需要看源码 但是在看python源码的时候 一定要时刻提醒自己面向对象属性方法查找顺序</span></span><br><span class="line"><span class="string">                先从对象自己找</span></span><br><span class="line"><span class="string">                再去产生对象的类里面找</span></span><br><span class="line"><span class="string">                之后再去父类找</span></span><br><span class="line"><span class="string">                ...</span></span><br><span class="line"><span class="string">            总结:看源码只要看到了self点一个东西 一定要问你自己当前这个self到底是谁</span></span><br><span class="line"><span class="string">            """</span></span><br><span class="line">        <span class="keyword">return</span> view</span><br><span class="line">      </span><br><span class="line">		<span class="comment"># CBV的精髓</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dispatch</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="comment"># 获取当前请求的小写格式 然后比对当前请求方式是否合法</span></span><br><span class="line">        <span class="comment"># get请求为例</span></span><br><span class="line">        <span class="comment"># post请求</span></span><br><span class="line">        <span class="keyword">if</span> request.method.lower() <span class="keyword">in</span> self.http_method_names:</span><br><span class="line">            handler = getattr(self, request.method.lower(), 		  						self.http_method_not_allowed)</span><br><span class="line">            <span class="string">"""</span></span><br><span class="line"><span class="string">            反射:通过字符串来操作对象的属性或者方法</span></span><br><span class="line"><span class="string">                handler = getattr(自己写的类产生的对象,'get',当找不到get属性或者方法的时候					就会用第三个参数)</span></span><br><span class="line"><span class="string">                handler = 我们自己写的类里面的get方法</span></span><br><span class="line"><span class="string">            """</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            handler = self.http_method_not_allowed</span><br><span class="line">        	<span class="keyword">return</span> handler(request, *args, **kwargs)</span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        自动调用get方法</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 要求掌握到不看源码也能够描述出CBV的内部执行流程(******)</span></span><br></pre></td></tr></table></figure>

<h3 id="CBV如何添加装饰器"><a href="#CBV如何添加装饰器" class="headerlink" title="CBV如何添加装饰器"></a>CBV如何添加装饰器</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.views <span class="keyword">import</span> View</span><br><span class="line"><span class="keyword">from</span> django.utils.decorators <span class="keyword">import</span> method_decorator</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">CBV中django不建议你直接给类的方法加装饰器</span></span><br><span class="line"><span class="string">无论该装饰器能都正常给你 都不建议直接加</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># @method_decorator(login_auth,name='get')  # 方式2(可以添加多个针对不同的方法加不同的装饰器)</span></span><br><span class="line"><span class="comment"># @method_decorator(login_auth,name='post')</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyLogin</span><span class="params">(View)</span>:</span></span><br><span class="line"><span class="meta">    @method_decorator(login_auth)  # 方式3:它会直接作用于当前类里面的所有的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dispatch</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> super().dispatch(request,*args,**kwargs)</span><br><span class="line">    <span class="comment"># @method_decorator(login_auth)  # 方式1:指名道姓</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self,request)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">"get请求"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self,request)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">'post请求'</span>)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>django框架</tag>
      </tags>
  </entry>
  <entry>
    <title>[视图View与路由Router]</title>
    <url>/2020/04/22/%E8%A7%86%E5%9B%BEView%E4%B8%8E%E8%B7%AF%E7%94%B1Router/</url>
    <content><![CDATA[<h1 id="1-视图"><a href="#1-视图" class="headerlink" title="1. 视图"></a>1. 视图</h1><p>Django REST framwork 提供的视图的主要作用：</p>
<ul>
<li>控制序列化器的执行（检验、保存、转换数据）</li>
<li>控制数据库查询的执行[数据库的删除/查询代码写在视图中，更新和添加写在序列化器]</li>
</ul>
<h2 id="1-2-视图"><a href="#1-2-视图" class="headerlink" title="1.2 视图"></a>1.2 视图</h2><p>REST framework 提供了众多的通用视图基类与扩展类，以简化视图的编写。</p>
<h3 id="1-2-1-2个视图基类"><a href="#1-2-1-2个视图基类" class="headerlink" title="1.2.1 2个视图基类"></a>1.2.1 2个视图基类</h3><h3 id="1-2-1-1-APIView"><a href="#1-2-1-1-APIView" class="headerlink" title="1.2.1.1 APIView"></a>1.2.1.1 APIView</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">rest_framework.views.APIView</span><br></pre></td></tr></table></figure>

<p><code>APIView</code>是REST framework提供的所有视图的基类，继承自Django的<code>View</code>父类。</p>
<p>drf的<code>APIView</code>与django<code>View</code>的不同之处在于：</p>
<ul>
<li>传入到视图方法中的是REST framework的<code>Request</code>对象，而不是Django的<code>HttpRequeset</code>对象；</li>
<li>视图方法可以返回REST framework的<code>Response</code>对象，视图会为响应数据设置（render）符合前端要求的格式；</li>
<li>任何<code>APIException</code>异常都会被捕获到，并且处理成合适的响应信息；</li>
<li>重写了as_view()，在进行dispatch()路由分发前，会对http请求进行身份认证、权限检查、访问流量控制。</li>
</ul>
<p>支持定义的类属性</p>
<ul>
<li><strong>authentication_classes</strong> 列表或元组，身份认证类</li>
<li><strong>permissoin_classes</strong> 列表或元组，权限检查类</li>
<li><strong>throttle_classes</strong> 列表或元祖，流量控制类</li>
</ul>
<p>在<code>APIView</code>中仍以常规的类视图定义方法来实现get() 、post() 或者其他请求方式的方法。</p>
<p>举例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"><span class="string">"""APIView是drf里面提供的所有视图类的父类</span></span><br><span class="line"><span class="string">   APIView提供的功能/属性/方法是最少的,所以使用APIView基本类似我们使用django的View</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">GET   /students/ 获取多个学生信息 </span></span><br><span class="line"><span class="string">POST  /students/ 添加一个学生信息</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">GET    /students/&lt;pk&gt;/  获取一个学生信息 </span></span><br><span class="line"><span class="string">PUT    /students/&lt;pk&gt;/  修改一个学生信息</span></span><br><span class="line"><span class="string">DELETE /students/&lt;pk&gt;/  删除一个学生信息</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> APIView</span><br><span class="line"><span class="keyword">from</span> students.models <span class="keyword">import</span> Student</span><br><span class="line"><span class="keyword">from</span> .serializers <span class="keyword">import</span> StudentModelSerializer</span><br><span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> status</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentAPIView</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self,request)</span>:</span></span><br><span class="line">        <span class="comment"># 1. 获取学生信息的数据模型</span></span><br><span class="line">        student_list = Student.objects.all()</span><br><span class="line">        <span class="comment"># 2. 调用序列化器</span></span><br><span class="line">        serializer = StudentModelSerializer(instance=student_list, many=<span class="literal">True</span>)</span><br><span class="line">        <span class="comment"># 3. 返回数据</span></span><br><span class="line">        <span class="keyword">return</span> Response(serializer.data)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self,request)</span>:</span></span><br><span class="line">        <span class="comment"># 1. 调用序列化器对用户提交的数据进行验证</span></span><br><span class="line">        serializer = StudentModelSerializer(data=request.data)</span><br><span class="line">        serializer.is_valid(raise_exception=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 2. 调用序列化器进行数据库操作</span></span><br><span class="line">        instance = serializer.save() <span class="comment"># save()方法返回的是添加成功以后的模型对象</span></span><br><span class="line"></span><br><span class="line">        serializer = StudentModelSerializer(instance=instance)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 3. 返回新增数据</span></span><br><span class="line">        <span class="keyword">return</span> Response(serializer.data, status=status.HTTP_201_CREATED)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student2APIView</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self,request,pk)</span>:</span></span><br><span class="line">        <span class="comment"># 1. 根据pk获取模型对象</span></span><br><span class="line">        student = Student.objects.get(pk=pk)</span><br><span class="line">        <span class="comment"># 2. 序列化器转换数据</span></span><br><span class="line">        serializer = StudentModelSerializer(instance=student)</span><br><span class="line">        <span class="comment"># 3. 响应数据</span></span><br><span class="line">        <span class="keyword">return</span> Response(serializer.data)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">put</span><span class="params">(self,request,pk)</span>:</span></span><br><span class="line">        <span class="comment"># 1. 通过pk查询学生信息</span></span><br><span class="line">        student = Student.objects.get(pk=pk)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 3. 调用序列化器对客户端发送过来的数据进行验证</span></span><br><span class="line">        serializer = StudentModelSerializer(instance=student, data=request.data)</span><br><span class="line">        serializer.is_valid(raise_exception=<span class="literal">True</span>)</span><br><span class="line">        <span class="comment"># 4. 保存数据</span></span><br><span class="line">        instance = serializer.save()</span><br><span class="line"></span><br><span class="line">        serializer = StudentModelSerializer(instance=instance)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 5. 返回结果</span></span><br><span class="line">        <span class="keyword">return</span> Response(serializer.data, status=status.HTTP_201_CREATED)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(self, request, pk)</span>:</span></span><br><span class="line">        <span class="comment"># 1. 通过pk查询学生信息</span></span><br><span class="line">        Student.objects.get(pk=pk).delete()</span><br><span class="line">        <span class="keyword">return</span> Response(&#123;<span class="string">"message"</span>:<span class="string">"ok"</span>&#125;, status=status.HTTP_204_NO_CONTENT)</span><br></pre></td></tr></table></figure>

<h3 id="1-2-1-2-GenericAPIView"><a href="#1-2-1-2-GenericAPIView" class="headerlink" title="1.2.1.2 GenericAPIView"></a>1.2.1.2 GenericAPIView</h3><p>通用视图类主要作用就是把视图中的独特的代码抽取出来，让视图方法中的代码更加通用，方便把通用代码进行简写。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">rest_framework.generics.GenericAPIView</span><br></pre></td></tr></table></figure>

<p>继承自<code>APIView</code>，<strong>主要增加了操作序列化器和数据库查询的类属性，作用是为下面Mixin视图扩展类的执行提供方法支持。通常在使用时，可搭配一个或多个Mixin扩展类。</strong></p>
<p>提供的关于序列化器使用的属性与方法</p>
<ul>
<li><p>属性：</p>
<ul>
<li><strong>serializer_class</strong> 指明视图使用的序列化器类</li>
</ul>
</li>
<li><p>方法：</p>
<ul>
<li><p><strong>get_serializer_class(self)</strong></p>
<p>当出现一个视图类中调用多个序列化器时,那么可以通过条件判断在get_serializer_class方法中通过返回不同的序列化器类名就可以让视图方法执行不同的序列化器对象了。</p>
<p>返回序列化器类，默认返回<code>serializer_class</code>，可以重写，例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_serializer_class</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> self.request.user.is_staff:</span><br><span class="line">        <span class="keyword">return</span> FullAccountSerializer</span><br><span class="line">    <span class="keyword">return</span> BasicAccountSerializer</span><br></pre></td></tr></table></figure>
</li>
<li><p>get_serializer(self, <em>args, *</em>kwargs)</p>
<p>返回序列化器对象，主要用来提供给Mixin扩展类使用，如果我们在视图中想要获取序列化器对象，也可以直接调用此方法。</p>
<p><strong>注意，该方法在提供序列化器对象的时候，会向序列化器对象的context属性补充三个数据：request、format、view，这三个数据对象可以在定义序列化器时使用。</strong></p>
<ul>
<li><strong>request</strong> 当前视图的请求对象</li>
<li><strong>view</strong> 当前请求的类视图对象</li>
<li>format 当前请求期望返回的数据格式</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>提供的关于数据库查询的属性与方法</p>
<ul>
<li><p>属性：</p>
<ul>
<li><strong>queryset</strong> 指明使用的数据查询集</li>
</ul>
</li>
<li><p>方法：</p>
<ul>
<li><p><strong>get_queryset(self)</strong></p>
<p>返回视图使用的查询集，主要用来提供给Mixin扩展类使用，是列表视图与详情视图获取数据的基础，默认返回<code>queryset</code>属性，可以重写，例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_queryset</span><span class="params">(self)</span>:</span></span><br><span class="line">    user = self.request.user</span><br><span class="line">    <span class="keyword">return</span> user.accounts.all()</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>get_object(self)</strong></p>
<p>返回详情视图所需的模型类数据对象，主要用来提供给Mixin扩展类使用。</p>
<p>在试图中可以调用该方法获取详情信息的模型类对象。</p>
<p><strong>若详情访问的模型类对象不存在，会返回404。</strong></p>
<p>该方法会默认使用APIView提供的check_object_permissions方法检查当前对象是否有权限被访问。</p>
<p>举例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># url(r'^books/(?P&lt;pk&gt;\d+)/$', views.BookDetailView.as_view()),</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookDetailView</span><span class="params">(GenericAPIView)</span>:</span></span><br><span class="line">    queryset = BookInfo.objects.all()</span><br><span class="line">    serializer_class = BookInfoSerializer</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request, pk)</span>:</span></span><br><span class="line">        book = self.get_object() <span class="comment"># get_object()方法根据pk参数查找queryset中的数据对象</span></span><br><span class="line">        serializer = self.get_serializer(book)</span><br><span class="line">        <span class="keyword">return</span> Response(serializer.data)</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<p>其他可以设置的属性</p>
<ul>
<li><strong>pagination_class</strong> 指明分页控制类</li>
<li><strong>filter_backends</strong> 指明过滤控制后端</li>
</ul>
<p>为了方便学习上面的GenericAPIView通用视图类，我们新建一个子应用。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python manage.py startapp gen</span><br></pre></td></tr></table></figure>

<p>代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.generics <span class="keyword">import</span> GenericAPIView</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> students.models <span class="keyword">import</span> Student</span><br><span class="line"><span class="keyword">from</span> .serializers <span class="keyword">import</span> StudentModelSerializer, StudentModel2Serializer</span><br><span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentsGenericAPIView</span><span class="params">(GenericAPIView)</span>:</span></span><br><span class="line">    <span class="comment"># 本次视图类中要操作的数据[必填]</span></span><br><span class="line">    queryset = Student.objects.all()</span><br><span class="line">    <span class="comment"># 本次视图类中要调用的默认序列化器[玄天]</span></span><br><span class="line">    serializer_class = StudentModelSerializer</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        <span class="string">"""获取所有学生信息"""</span></span><br><span class="line">        serializer = self.get_serializer(instance=self.get_queryset(), many=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Response(serializer.data)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self,request)</span>:</span></span><br><span class="line"></span><br><span class="line">        data = request.data</span><br><span class="line"></span><br><span class="line">        serializer = self.get_serializer(data=data)</span><br><span class="line"></span><br><span class="line">        serializer.is_valid(raise_exception=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">        instance = serializer.save()</span><br><span class="line"></span><br><span class="line">        serializer = self.get_serializer(instance=instance)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Response(serializer.data)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentGenericAPIView</span><span class="params">(GenericAPIView)</span>:</span></span><br><span class="line">    queryset = Student.objects.all()</span><br><span class="line">    serializer_class = StudentModelSerializer</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_serializer_class</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""重写获取序列化器类的方法"""</span></span><br><span class="line">        <span class="keyword">if</span> self.request.method == <span class="string">"GET"</span>:</span><br><span class="line">            <span class="keyword">return</span> StudentModel2Serializer</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> StudentModelSerializer</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 在使用GenericAPIView视图获取或操作单个数据时,视图方法中的代表主键的参数最好是pk</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self,request,pk)</span>:</span></span><br><span class="line">        <span class="string">"""获取一条数据"""</span></span><br><span class="line">        serializer = self.get_serializer(instance=self.get_object())</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Response(serializer.data)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">put</span><span class="params">(self,request,pk)</span>:</span></span><br><span class="line"></span><br><span class="line">        data = request.data</span><br><span class="line"></span><br><span class="line">        serializer = self.get_serializer(instance=self.get_object(),data=data)</span><br><span class="line"></span><br><span class="line">        serializer.is_valid(raise_exception=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">        serializer.save()</span><br><span class="line"></span><br><span class="line">        serializer = self.get_serializer(instance=self.get_object())</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Response(serializer.data)</span><br></pre></td></tr></table></figure>

<p>序列化器类：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> students.models <span class="keyword">import</span> Student</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentModelSerializer</span><span class="params">(serializers.ModelSerializer)</span>:</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model= Student</span><br><span class="line">        fields = <span class="string">"__all__"</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentModel2Serializer</span><span class="params">(serializers.ModelSerializer)</span>:</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model= Student</span><br><span class="line">        fields = (<span class="string">"name"</span>,<span class="string">"class_null"</span>)</span><br></pre></td></tr></table></figure>

<h3 id="1-2-2-5个视图扩展类"><a href="#1-2-2-5个视图扩展类" class="headerlink" title="1.2.2 5个视图扩展类"></a>1.2.2 5个视图扩展类</h3><p>作用：</p>
<p>提供了几种后端视图（对数据资源进行曾删改查）处理流程的实现，如果需要编写的视图属于这五种，则视图可以通过继承相应的扩展类来复用代码，减少自己编写的代码量。</p>
<p>这五个扩展类需要搭配GenericAPIView父类，因为五个扩展类的实现需要调用GenericAPIView提供的序列化器与数据库查询的方法。</p>
<h3 id="1）ListModelMixin"><a href="#1）ListModelMixin" class="headerlink" title="1）ListModelMixin"></a>1）ListModelMixin</h3><p>列表视图扩展类，提供<code>list(request, *args, **kwargs)</code>方法快速实现列表视图，返回200状态码。</p>
<p>该Mixin的list方法会对数据进行过滤和分页。</p>
<p>源代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListModelMixin</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    List a queryset.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">list</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="comment"># 过滤</span></span><br><span class="line">        queryset = self.filter_queryset(self.get_queryset())</span><br><span class="line">        <span class="comment"># 分页</span></span><br><span class="line">        page = self.paginate_queryset(queryset)</span><br><span class="line">        <span class="keyword">if</span> page <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            serializer = self.get_serializer(page, many=<span class="literal">True</span>)</span><br><span class="line">            <span class="keyword">return</span> self.get_paginated_response(serializer.data)</span><br><span class="line">        <span class="comment"># 序列化</span></span><br><span class="line">        serializer = self.get_serializer(queryset, many=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">return</span> Response(serializer.data)</span><br></pre></td></tr></table></figure>

<p>举例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.mixins <span class="keyword">import</span> ListModelMixin</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookListView</span><span class="params">(ListModelMixin, GenericAPIView)</span>:</span></span><br><span class="line">    queryset = BookInfo.objects.all()</span><br><span class="line">    serializer_class = BookInfoSerializer</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.list(request)</span><br></pre></td></tr></table></figure>

<h3 id="2）CreateModelMixin"><a href="#2）CreateModelMixin" class="headerlink" title="2）CreateModelMixin"></a>2）CreateModelMixin</h3><p>创建视图扩展类，提供<code>create(request, *args, **kwargs)</code>方法快速实现创建资源的视图，成功返回201状态码。</p>
<p>如果序列化器对前端发送的数据验证失败，返回400错误。</p>
<p>源代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CreateModelMixin</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Create a model instance.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">create</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="comment"># 获取序列化器</span></span><br><span class="line">        serializer = self.get_serializer(data=request.data)</span><br><span class="line">        <span class="comment"># 验证</span></span><br><span class="line">        serializer.is_valid(raise_exception=<span class="literal">True</span>)</span><br><span class="line">        <span class="comment"># 保存</span></span><br><span class="line">        self.perform_create(serializer)</span><br><span class="line">        headers = self.get_success_headers(serializer.data)</span><br><span class="line">        <span class="keyword">return</span> Response(serializer.data, status=status.HTTP_201_CREATED, headers=headers)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">perform_create</span><span class="params">(self, serializer)</span>:</span></span><br><span class="line">        serializer.save()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_success_headers</span><span class="params">(self, data)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">return</span> &#123;<span class="string">'Location'</span>: str(data[api_settings.URL_FIELD_NAME])&#125;</span><br><span class="line">        <span class="keyword">except</span> (TypeError, KeyError):</span><br><span class="line">            <span class="keyword">return</span> &#123;&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3）RetrieveModelMixin"><a href="#3）RetrieveModelMixin" class="headerlink" title="3）RetrieveModelMixin"></a>3）RetrieveModelMixin</h3><p>详情视图扩展类，提供<code>retrieve(request, *args, **kwargs)</code>方法，可以快速实现返回一个存在的数据对象。</p>
<p>如果存在，返回200， 否则返回404。</p>
<p>源代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RetrieveModelMixin</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Retrieve a model instance.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">retrieve</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="comment"># 获取对象，会检查对象的权限</span></span><br><span class="line">        instance = self.get_object()</span><br><span class="line">        <span class="comment"># 序列化</span></span><br><span class="line">        serializer = self.get_serializer(instance)</span><br><span class="line">        <span class="keyword">return</span> Response(serializer.data)</span><br></pre></td></tr></table></figure>

<p>举例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookDetailView</span><span class="params">(RetrieveModelMixin, GenericAPIView)</span>:</span></span><br><span class="line">    queryset = BookInfo.objects.all()</span><br><span class="line">    serializer_class = BookInfoSerializer</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request, pk)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.retrieve(request)</span><br></pre></td></tr></table></figure>

<h3 id="4）UpdateModelMixin"><a href="#4）UpdateModelMixin" class="headerlink" title="4）UpdateModelMixin"></a>4）UpdateModelMixin</h3><p>更新视图扩展类，提供<code>update(request, *args, **kwargs)</code>方法，可以快速实现更新一个存在的数据对象。</p>
<p>同时也提供<code>partial_update(request, *args, **kwargs)</code>方法，可以实现局部更新。</p>
<p>成功返回200，序列化器校验数据失败时，返回400错误。</p>
<p>源代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UpdateModelMixin</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Update a model instance.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        partial = kwargs.pop(<span class="string">'partial'</span>, <span class="literal">False</span>)</span><br><span class="line">        instance = self.get_object()</span><br><span class="line">        serializer = self.get_serializer(instance, data=request.data, partial=partial)</span><br><span class="line">        serializer.is_valid(raise_exception=<span class="literal">True</span>)</span><br><span class="line">        self.perform_update(serializer)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> getattr(instance, <span class="string">'_prefetched_objects_cache'</span>, <span class="literal">None</span>):</span><br><span class="line">            <span class="comment"># If 'prefetch_related' has been applied to a queryset, we need to</span></span><br><span class="line">            <span class="comment"># forcibly invalidate the prefetch cache on the instance.</span></span><br><span class="line">            instance._prefetched_objects_cache = &#123;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Response(serializer.data)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">perform_update</span><span class="params">(self, serializer)</span>:</span></span><br><span class="line">        serializer.save()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">partial_update</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        kwargs[<span class="string">'partial'</span>] = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> self.update(request, *args, **kwargs)</span><br></pre></td></tr></table></figure>

<h3 id="5）DestroyModelMixin"><a href="#5）DestroyModelMixin" class="headerlink" title="5）DestroyModelMixin"></a>5）DestroyModelMixin</h3><p>删除视图扩展类，提供<code>destroy(request, *args, **kwargs)</code>方法，可以快速实现删除一个存在的数据对象。</p>
<p>成功返回204，不存在返回404。</p>
<p>源代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DestroyModelMixin</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Destroy a model instance.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">destroy</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        instance = self.get_object()</span><br><span class="line">        self.perform_destroy(instance)</span><br><span class="line">        <span class="keyword">return</span> Response(status=status.HTTP_204_NO_CONTENT)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">perform_destroy</span><span class="params">(self, instance)</span>:</span></span><br><span class="line">        instance.delete()</span><br></pre></td></tr></table></figure>

<p>使用GenericAPIView和视图扩展类，实现api接口，代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""GenericAPIView结合视图扩展类实现api接口"""</span></span><br><span class="line"><span class="keyword">from</span> rest_framework.mixins <span class="keyword">import</span> ListModelMixin,CreateModelMixin</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Students2GenericAPIView</span><span class="params">(GenericAPIView,ListModelMixin,CreateModelMixin)</span>:</span></span><br><span class="line">    <span class="comment"># 本次视图类中要操作的数据[必填]</span></span><br><span class="line">    queryset = Student.objects.all()</span><br><span class="line">    <span class="comment"># 本次视图类中要调用的默认序列化器[玄天]</span></span><br><span class="line">    serializer_class = StudentModelSerializer</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        <span class="string">"""获取多个学生信息"""</span></span><br><span class="line">        <span class="keyword">return</span> self.list(request)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self,request)</span>:</span></span><br><span class="line">        <span class="string">"""添加学生信息"""</span></span><br><span class="line">        <span class="keyword">return</span> self.create(request)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> rest_framework.mixins <span class="keyword">import</span> RetrieveModelMixin,UpdateModelMixin,DestroyModelMixin</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student2GenericAPIView</span><span class="params">(GenericAPIView,RetrieveModelMixin,UpdateModelMixin,DestroyModelMixin)</span>:</span></span><br><span class="line">    queryset = Student.objects.all()</span><br><span class="line"></span><br><span class="line">    serializer_class = StudentModelSerializer</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 在使用GenericAPIView视图获取或操作单个数据时,视图方法中的代表主键的参数最好是pk</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self,request,pk)</span>:</span></span><br><span class="line">        <span class="string">"""获取一条数据"""</span></span><br><span class="line">        <span class="keyword">return</span> self.retrieve(request,pk)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">put</span><span class="params">(self,request,pk)</span>:</span></span><br><span class="line">        <span class="string">"""更新一条数据"""</span></span><br><span class="line">        <span class="keyword">return</span> self.update(request,pk)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(self,request,pk)</span>:</span></span><br><span class="line">        <span class="string">"""删除一条数据"""</span></span><br><span class="line">        <span class="keyword">return</span> self.destroy(request,pk)</span><br></pre></td></tr></table></figure>

<h3 id="1-2-3-GenericAPIView的视图子类"><a href="#1-2-3-GenericAPIView的视图子类" class="headerlink" title="1.2.3 GenericAPIView的视图子类"></a>1.2.3 GenericAPIView的视图子类</h3><h3 id="1）CreateAPIView"><a href="#1）CreateAPIView" class="headerlink" title="1）CreateAPIView"></a>1）CreateAPIView</h3><p>提供 post 方法</p>
<p>继承自： GenericAPIView、CreateModelMixin</p>
<h3 id="2）ListAPIView"><a href="#2）ListAPIView" class="headerlink" title="2）ListAPIView"></a>2）ListAPIView</h3><p>提供 get 方法</p>
<p>继承自：GenericAPIView、ListModelMixin</p>
<h3 id="3）RetrieveAPIView"><a href="#3）RetrieveAPIView" class="headerlink" title="3）RetrieveAPIView"></a>3）RetrieveAPIView</h3><p>提供 get 方法</p>
<p>继承自: GenericAPIView、RetrieveModelMixin</p>
<h3 id="4）DestoryAPIView"><a href="#4）DestoryAPIView" class="headerlink" title="4）DestoryAPIView"></a>4）DestoryAPIView</h3><p>提供 delete 方法</p>
<p>继承自：GenericAPIView、DestoryModelMixin</p>
<h3 id="5）UpdateAPIView"><a href="#5）UpdateAPIView" class="headerlink" title="5）UpdateAPIView"></a>5）UpdateAPIView</h3><p>提供 put 和 patch 方法</p>
<p>继承自：GenericAPIView、UpdateModelMixin</p>
<h3 id="6）RetrieveUpdateAPIView"><a href="#6）RetrieveUpdateAPIView" class="headerlink" title="6）RetrieveUpdateAPIView"></a>6）RetrieveUpdateAPIView</h3><p>提供 get、put、patch方法</p>
<p>继承自： GenericAPIView、RetrieveModelMixin、UpdateModelMixin</p>
<h3 id="7）RetrieveUpdateDestoryAPIView"><a href="#7）RetrieveUpdateDestoryAPIView" class="headerlink" title="7）RetrieveUpdateDestoryAPIView"></a>7）RetrieveUpdateDestoryAPIView</h3><p>提供 get、put、patch、delete方法</p>
<p>继承自：GenericAPIView、RetrieveModelMixin、UpdateModelMixin、DestoryModelMixin</p>
<h2 id="1-3-视图集ViewSet"><a href="#1-3-视图集ViewSet" class="headerlink" title="1.3 视图集ViewSet"></a>1.3 视图集ViewSet</h2><p>使用视图集ViewSet，可以将一系列逻辑相关的动作放到一个类中：</p>
<ul>
<li>list() 提供一组数据</li>
<li>retrieve() 提供单个数据</li>
<li>create() 创建数据</li>
<li>update() 保存数据</li>
<li>destory() 删除数据</li>
</ul>
<p>ViewSet视图集类不再实现get()、post()等方法，而是实现动作 <strong>action</strong> 如 list() 、create() 等。</p>
<p>视图集只在使用as_view()方法的时候，才会将<strong>action</strong>动作与具体请求方式对应上。如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookInfoViewSet</span><span class="params">(viewsets.ViewSet)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">list</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        books = BookInfo.objects.all()</span><br><span class="line">        serializer = BookInfoSerializer(books, many=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">return</span> Response(serializer.data)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">retrieve</span><span class="params">(self, request, pk=None)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            books = BookInfo.objects.get(id=pk)</span><br><span class="line">        <span class="keyword">except</span> BookInfo.DoesNotExist:</span><br><span class="line">            <span class="keyword">return</span> Response(status=status.HTTP_404_NOT_FOUND)</span><br><span class="line">        serializer = BookInfoSerializer(books)</span><br><span class="line">        <span class="keyword">return</span> Response(serializer.data)</span><br></pre></td></tr></table></figure>

<p>在设置路由时，我们可以如下操作</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r'^books/$'</span>, BookInfoViewSet.as_view(&#123;<span class="string">'get'</span>:<span class="string">'list'</span>&#125;),</span><br><span class="line">    url(<span class="string">r'^books/(?P&lt;pk&gt;\d+)/$'</span>, BookInfoViewSet.as_view(&#123;<span class="string">'get'</span>: <span class="string">'retrieve'</span>&#125;)</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h3 id="1-3-1-常用视图集父类"><a href="#1-3-1-常用视图集父类" class="headerlink" title="1.3.1 常用视图集父类"></a>1.3.1 常用视图集父类</h3><h3 id="1）-ViewSet"><a href="#1）-ViewSet" class="headerlink" title="1） ViewSet"></a>1） ViewSet</h3><p>继承自<code>APIView</code>与<code>ViewSetMixin</code>，作用也与APIView基本类似，提供了身份认证、权限校验、流量管理等。</p>
<p><strong>ViewSet主要通过继承ViewSetMixin来实现在调用as_view()时传入字典（如{‘get’:‘list’}）的映射处理工作。</strong></p>
<p>在ViewSet中，没有提供任何动作action方法，需要我们自己实现action方法。</p>
<h3 id="2）GenericViewSet"><a href="#2）GenericViewSet" class="headerlink" title="2）GenericViewSet"></a>2）GenericViewSet</h3><p>使用ViewSet通常并不方便，因为list、retrieve、create、update、destory等方法都需要自己编写，而这些方法与前面讲过的Mixin扩展类提供的方法同名，所以我们可以通过继承Mixin扩展类来复用这些方法而无需自己编写。但是Mixin扩展类依赖与<code>GenericAPIView</code>，所以还需要继承<code>GenericAPIView</code>。</p>
<p><strong>GenericViewSet</strong>就帮助我们完成了这样的继承工作，继承自<code>GenericAPIView</code>与<code>ViewSetMixin</code>，在实现了调用as_view()时传入字典（如<code>{&#39;get&#39;:&#39;list&#39;}</code>）的映射处理工作的同时，还提供了<code>GenericAPIView</code>提供的基础方法，可以直接搭配Mixin扩展类使用。</p>
<p>举例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.viewsets <span class="keyword">import</span> GenericViewSet</span><br><span class="line"><span class="keyword">from</span> rest_framework.mixins <span class="keyword">import</span> ListModelMixin,CreateModelMixin,RetrieveModelMixin,UpdateModelMixin,DestroyModelMixin</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student4ViewSet</span><span class="params">(GenericViewSet,ListModelMixin,CreateModelMixin,RetrieveModelMixin,UpdateModelMixin,DestroyModelMixin)</span>:</span></span><br><span class="line">    queryset = Student.objects.all()</span><br><span class="line">    serializer_class = StudentModelSerializer</span><br></pre></td></tr></table></figure>

<p>url的定义</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">"students7/"</span>, views.Student4ViewSet.as_view(&#123;<span class="string">"get"</span>: <span class="string">"list"</span>, <span class="string">"post"</span>: <span class="string">"create"</span>&#125;)),</span><br><span class="line">    re_path(<span class="string">"students7/(?P&lt;pk&gt;\d+)/"</span>, views.Student4ViewSet.as_view(&#123;<span class="string">"get"</span>: <span class="string">"retrieve"</span>,<span class="string">"put"</span>:<span class="string">"update"</span>,<span class="string">"delete"</span>:<span class="string">"destroy"</span>&#125;)),</span><br><span class="line"></span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h3 id="3）ModelViewSet"><a href="#3）ModelViewSet" class="headerlink" title="3）ModelViewSet"></a>3）ModelViewSet</h3><p>继承自<code>GenericViewSet</code>，同时包括了ListModelMixin、RetrieveModelMixin、CreateModelMixin、UpdateModelMixin、DestoryModelMixin。</p>
<h3 id="4）ReadOnlyModelViewSet"><a href="#4）ReadOnlyModelViewSet" class="headerlink" title="4）ReadOnlyModelViewSet"></a>4）ReadOnlyModelViewSet</h3><p>继承自<code>GenericViewSet</code>，同时包括了ListModelMixin、RetrieveModelMixin。</p>
<h3 id="1-3-2-视图集中定义附加action动作"><a href="#1-3-2-视图集中定义附加action动作" class="headerlink" title="1.3.2 视图集中定义附加action动作"></a>1.3.2 视图集中定义附加action动作</h3><p>在视图集中，除了上述默认的方法动作外，还可以添加自定义动作。</p>
<p>举例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.viewsets <span class="keyword">import</span> ModelViewSet,ReadOnlyModelViewSet</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentModelViewSet</span><span class="params">(ModelViewSet)</span>:</span></span><br><span class="line">    queryset = Student.objects.all()</span><br><span class="line">    serializer_class = StudentModelSerializer</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(self,request)</span>:</span></span><br><span class="line">        <span class="string">"""学生登录功能"""</span></span><br><span class="line">        <span class="keyword">return</span> Response(&#123;<span class="string">"message"</span>:<span class="string">"登录成功"</span>&#125;)</span><br></pre></td></tr></table></figure>

<p>url的定义</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">"students8/"</span>, views.StudentModelViewSet.as_view(&#123;<span class="string">"get"</span>: <span class="string">"list"</span>, <span class="string">"post"</span>: <span class="string">"create"</span>&#125;)),</span><br><span class="line">    re_path(<span class="string">"students8/(?P&lt;pk&gt;\d+)/"</span>,</span><br><span class="line">            views.StudentModelViewSet.as_view(&#123;<span class="string">"get"</span>: <span class="string">"retrieve"</span>, <span class="string">"put"</span>: <span class="string">"update"</span>, <span class="string">"delete"</span>: <span class="string">"destroy"</span>&#125;)),</span><br><span class="line"></span><br><span class="line">    path(<span class="string">"stu/login/"</span>,views.StudentModelViewSet.as_view(&#123;<span class="string">"get"</span>:<span class="string">"login"</span>&#125;))</span><br><span class="line"></span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h3 id="1-3-3-action属性"><a href="#1-3-3-action属性" class="headerlink" title="1.3.3 action属性"></a>1.3.3 action属性</h3><p>在视图集中，我们可以通过action对象属性来获取当前请求视图集时的action动作是哪个。</p>
<p>例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.viewsets <span class="keyword">import</span> ModelViewSet</span><br><span class="line"><span class="keyword">from</span> students.models <span class="keyword">import</span> Student</span><br><span class="line"><span class="keyword">from</span> .serializers <span class="keyword">import</span> StudentModelSerializer</span><br><span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentModelViewSet</span><span class="params">(ModelViewSet)</span>:</span></span><br><span class="line">    queryset = Student.objects.all()</span><br><span class="line">    serializer_class = StudentModelSerializer</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_new_5</span><span class="params">(self,request)</span>:</span></span><br><span class="line">        <span class="string">"""获取最近添加的5个学生信息"""</span></span><br><span class="line">        <span class="comment"># 操作数据库</span></span><br><span class="line">        print(self.action) <span class="comment"># 获取本次请求的视图方法名</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">通过路由访问到当前方法中.可以看到本次的action就是请求的方法名</span><br></pre></td></tr></table></figure>

<h1 id="2-路由Routers"><a href="#2-路由Routers" class="headerlink" title="2. 路由Routers"></a>2. 路由Routers</h1><p>对于视图集ViewSet，我们除了可以自己手动指明请求方式与动作action之间的对应关系外，还可以使用Routers来帮助我们快速实现路由信息。</p>
<p>REST framework提供了两个router</p>
<ul>
<li><strong>SimpleRouter</strong></li>
<li><strong>DefaultRouter</strong></li>
</ul>
<h2 id="2-1-使用方法"><a href="#2-1-使用方法" class="headerlink" title="2.1 使用方法"></a>2.1 使用方法</h2><p>1） 创建router对象，并注册视图集，例如</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> routers</span><br><span class="line"></span><br><span class="line">router = routers.DefaultRouter()</span><br><span class="line">router.register(<span class="string">r'router_stu'</span>, StudentModelViewSet, base_name=<span class="string">'student'</span>)</span><br></pre></td></tr></table></figure>

<p>register(prefix, viewset, base_name)</p>
<ul>
<li>prefix 该视图集的路由前缀</li>
<li>viewset 视图集</li>
<li>base_name 路由别名的前缀</li>
</ul>
<p>如上述代码会形成的路由如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">^books/$    name: book-list</span><br><span class="line">^books/&#123;pk&#125;/$   name: book-detail</span><br></pre></td></tr></table></figure>

<p>2）添加路由数据</p>
<p>可以有两种方式：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">urlpatterns = [</span><br><span class="line">    ...</span><br><span class="line">]</span><br><span class="line">urlpatterns += router.urls</span><br></pre></td></tr></table></figure>

<p>或</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">urlpatterns = [</span><br><span class="line">    ...</span><br><span class="line">    url(<span class="string">r'^'</span>, include(router.urls))</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>使用路由类给视图集生成了路由地址</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.viewsets <span class="keyword">import</span> ModelViewSet,ReadOnlyModelViewSet</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentModelViewSet</span><span class="params">(ModelViewSet)</span>:</span></span><br><span class="line">    queryset = Student.objects.all()</span><br><span class="line">    serializer_class = StudentModelSerializer</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(self,request)</span>:</span></span><br><span class="line">        <span class="string">"""学生登录功能"""</span></span><br><span class="line">        print(self.action)</span><br><span class="line">        <span class="keyword">return</span> Response(&#123;<span class="string">"message"</span>:<span class="string">"登录成功"</span>&#125;)</span><br></pre></td></tr></table></figure>

<p>路由代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, re_path</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line">urlpatterns = [</span><br><span class="line">    ...</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="string">"""使用drf提供路由类router给视图集生成路由列表"""</span></span><br><span class="line"><span class="comment"># 实例化路由类</span></span><br><span class="line"><span class="comment"># drf提供一共提供了两个路由类给我们使用,他们用法一致,功能几乎一样</span></span><br><span class="line"><span class="keyword">from</span> rest_framework.routers <span class="keyword">import</span> DefaultRouter</span><br><span class="line">router = DefaultRouter()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注册视图集</span></span><br><span class="line"><span class="comment"># router.register("路由前缀",视图集类)</span></span><br><span class="line">router.register(<span class="string">"router_stu"</span>,views.StudentModelViewSet)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 把生成的路由列表追加到urlpatterns</span></span><br><span class="line">print( router.urls )</span><br><span class="line">urlpatterns += router.urls</span><br></pre></td></tr></table></figure>

<p>上面的代码就成功生成了路由地址[增/删/改/查一条/查多条的功能]，但是不会自动我们在视图集自定义方法的路由。</p>
<p>所以我们如果也要给自定义方法生成路由，则需要进行action动作的声明。</p>
<h2 id="2-2-视图集中附加action的声明"><a href="#2-2-视图集中附加action的声明" class="headerlink" title="2.2 视图集中附加action的声明"></a>2.2 视图集中附加action的声明</h2><p>在视图集中，如果想要让Router自动帮助我们为自定义的动作生成路由信息，需要使用<code>rest_framework.decorators.action</code>装饰器。</p>
<p>以action装饰器装饰的方法名会作为action动作名，与list、retrieve等同。</p>
<p>action装饰器可以接收两个参数：</p>
<ul>
<li><p><strong>methods</strong>: 声明该action对应的请求方式，列表传递</p>
</li>
<li><p>detail声明该action的路径是否与单一资源对应，及是否是</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">xxx/&lt;pk&gt;/action方法名/</span><br></pre></td></tr></table></figure>

<ul>
<li>True 表示路径格式是<code>xxx/&lt;pk&gt;/action方法名/</code></li>
<li>False 表示路径格式是<code>xxx/action方法名/</code></li>
</ul>
</li>
</ul>
<p>举例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.viewsets <span class="keyword">import</span> ModelViewSet</span><br><span class="line"><span class="keyword">from</span> rest_framework.decorators <span class="keyword">import</span> action</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentModelViewSet</span><span class="params">(ModelViewSet)</span>:</span></span><br><span class="line">    queryset = Student.objects.all()</span><br><span class="line">    serializer_class = StudentModelSerializer</span><br><span class="line"></span><br><span class="line">    <span class="comment"># methods 设置当前方法允许哪些http请求访问当前视图方法</span></span><br><span class="line">    <span class="comment"># detail 设置当前视图方法是否是操作一个数据</span></span><br><span class="line">    <span class="comment"># detail为True，表示路径名格式应该为 router_stu/&#123;pk&#125;/login/</span></span><br><span class="line"><span class="meta">    @action(methods=['get'], detail=True)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(self, request,pk)</span>:</span></span><br><span class="line">        <span class="string">"""登录"""</span></span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">    <span class="comment"># detail为False 表示路径名格式应该为 router_stu/get_new_5/</span></span><br><span class="line"><span class="meta">    @action(methods=['put'], detail=False)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_new_5</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        <span class="string">"""获取最新添加的5个学生信息"""</span></span><br><span class="line">        ...</span><br></pre></td></tr></table></figure>

<p>由路由器自动为此视图集自定义action方法形成的路由会是如下内容：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">^router_stu/get_new_5/$    name: router_stu-get_new_5</span><br><span class="line">^router_stu/&#123;pk&#125;/login/$   name: router_stu-login</span><br></pre></td></tr></table></figure>

<h2 id="2-3-路由router形成URL的方式"><a href="#2-3-路由router形成URL的方式" class="headerlink" title="2.3 路由router形成URL的方式"></a>2.3 路由router形成URL的方式</h2><p>1） SimpleRouter</p>
<p><img src="/imamges/SimpleRouter.png" alt=""></p>
<p>2）DefaultRouter</p>
<p><img src="/imamges/DefaultRouter.png" alt=""></p>
<p>DefaultRouter与SimpleRouter的区别是，DefaultRouter会多附带一个默认的API根视图，返回一个包含所有列表视图的超链接响应数据。</p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>Django Rest_Framework</tag>
      </tags>
  </entry>
  <entry>
    <title>[高级用法]</title>
    <url>/2020/06/21/%E9%AB%98%E7%BA%A7%E7%94%A8%E6%B3%95/</url>
    <content><![CDATA[<h2 id="一-慢查询"><a href="#一-慢查询" class="headerlink" title="一 慢查询"></a>一 慢查询</h2><h3 id="1-1-生命周期"><a href="#1-1-生命周期" class="headerlink" title="1.1 生命周期"></a>1.1 生命周期</h3><p>我们配置一个时间，如果查询时间超过了我们设置的时间，我们就认为这是一个慢查询.</p>
<p>慢查询发生在第三阶段</p>
<p>客户端超时不一定慢查询，但慢查询是客户端超时的一个可能因素</p>
<p><img src="https://tva1.sinaimg.cn/large/006tNbRwgy1ga8r6p7tpej30z80k2afq.jpg" alt="image-20191225102102218"></p>
<h3 id="1-2-两个配置"><a href="#1-2-两个配置" class="headerlink" title="1.2 两个配置"></a>1.2 两个配置</h3><h4 id="1-2-1-slowlog-max-len"><a href="#1-2-1-slowlog-max-len" class="headerlink" title="1.2.1 slowlog-max-len"></a>1.2.1 slowlog-max-len</h4><p>慢查询是一个先进先出的队列</p>
<p>固定长度</p>
<p>保存在内存中</p>
<h4 id="1-2-2-slowlog-max-len"><a href="#1-2-2-slowlog-max-len" class="headerlink" title="1.2.2 slowlog-max-len"></a>1.2.2 slowlog-max-len</h4><p>慢查询阈值（单位：微秒）</p>
<p>slowlog-log-slower-than=0，记录所有命令</p>
<p>slowlog-log-slower-than &lt;0,不记录任何命令</p>
<h4 id="1-2-3-配置方法"><a href="#1-2-3-配置方法" class="headerlink" title="1.2.3 配置方法"></a>1.2.3 配置方法</h4><p><strong>1 默认配置</strong></p>
<p>config get slowlog-max-len=128</p>
<p>Config get slowly-log-slower-than=10000</p>
<p><strong>2 修改配置文件重启</strong></p>
<p><strong>3 动态配置</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设置记录所有命令</span></span><br><span class="line">config set slowlog-log-slower-than <span class="number">0</span></span><br><span class="line"><span class="comment"># 最多记录100条</span></span><br><span class="line">config set slowlog-max-len <span class="number">100</span></span><br><span class="line"><span class="comment"># 持久化到本地配置文件</span></span><br><span class="line">config rewrite</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">config set slowlog-max-len 1000</span></span><br><span class="line"><span class="string">config set slowlog-log-slower-than 1000</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure>

<h3 id="1-3-三个命令"><a href="#1-3-三个命令" class="headerlink" title="1.3 三个命令"></a>1.3 三个命令</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">slowlog get [n]  <span class="comment">#获取慢查询队列</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">日志由4个属性组成：</span></span><br><span class="line"><span class="string">1）日志的标识id</span></span><br><span class="line"><span class="string">2）发生的时间戳</span></span><br><span class="line"><span class="string">3）命令耗时</span></span><br><span class="line"><span class="string">4）执行的命令和参数</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">slowlog len <span class="comment">#获取慢查询队列长度</span></span><br><span class="line"></span><br><span class="line">slowlog reset <span class="comment">#清空慢查询队列</span></span><br></pre></td></tr></table></figure>

<h3 id="1-4-经验"><a href="#1-4-经验" class="headerlink" title="1.4 经验"></a>1.4 经验</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> slowlog-max-len 不要设置过大，默认<span class="number">10</span>ms，通常设置<span class="number">1</span>ms</span><br><span class="line"><span class="number">2</span> slowlog-log-slower-than不要设置过小，通常设置<span class="number">1000</span>左右</span><br><span class="line"><span class="number">3</span> 理解命令生命周期</span><br><span class="line"><span class="number">4</span> 定期持久化慢查询</span><br></pre></td></tr></table></figure>

<h2 id="二-pipeline"><a href="#二-pipeline" class="headerlink" title="二 pipeline"></a>二 pipeline</h2><h3 id="2-1-什么是pipeline-管道"><a href="#2-1-什么是pipeline-管道" class="headerlink" title="2.1 什么是pipeline(管道)"></a>2.1 什么是pipeline(管道)</h3><p>Redis的pipeline(管道)功能在命令行中没有，但redis是支持pipeline的，而且在各个语言版的client中都有相应的实现</p>
<p>将一批命令，批量打包，在redis服务端批量计算(执行)，然后把结果批量返回</p>
<p>1次pipeline(n条命令)=1次网络时间+n次命令时间</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pipeline期间将“独占”链接，此期间将不能进行非“管道”类型的其他操作，直到pipeline关闭；如果你的pipeline的指令集很庞大，为了不干扰链接中的其他操作，你可以为pipeline操作新建Client链接，让pipeline和其他正常操作分离在<span class="number">2</span>个client中。不过pipeline事实上所能容忍的操作个数，和socket-output缓冲区大小/返回结果的数据尺寸都有很大的关系；同时也意味着每个redis-server同时所能支撑的pipeline链接的个数，也是有限的，这将受限于server的物理内存或网络接口的缓冲能力</span><br></pre></td></tr></table></figure>

<h3 id="2-2-客户端实现"><a href="#2-2-客户端实现" class="headerlink" title="2.2 客户端实现"></a>2.2 客户端实现</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> redis</span><br><span class="line">pool = redis.ConnectionPool(host=<span class="string">'10.211.55.4'</span>, port=<span class="number">6379</span>)</span><br><span class="line">r = redis.Redis(connection_pool=pool)</span><br><span class="line"><span class="comment"># pipe = r.pipeline(transaction=False)</span></span><br><span class="line"><span class="comment">#创建pipeline</span></span><br><span class="line">pipe = r.pipeline(transaction=<span class="literal">True</span>)</span><br><span class="line"><span class="comment">#开启事务</span></span><br><span class="line">pipe.multi()</span><br><span class="line">pipe.set(<span class="string">'name'</span>, <span class="string">'lqz'</span>)</span><br><span class="line"><span class="comment">#其他代码，可能出异常</span></span><br><span class="line"></span><br><span class="line">pipe.set(<span class="string">'role'</span>, <span class="string">'nb'</span>)</span><br><span class="line"> </span><br><span class="line">pipe.execute()</span><br></pre></td></tr></table></figure>

<h3 id="2-3-与原生操作对比"><a href="#2-3-与原生操作对比" class="headerlink" title="2.3 与原生操作对比"></a>2.3 与原生操作对比</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">通过pipeline提交的多次命令，在服务端执行的时候，可能会被拆成多次执行，而mget等操作，是一次性执行的，所以，pipeline执行的命令并非原子性的</span><br></pre></td></tr></table></figure>

<h3 id="2-4-使用建议"><a href="#2-4-使用建议" class="headerlink" title="2.4 使用建议"></a>2.4 使用建议</h3><p>1 注意每次pipeline携带的数据量</p>
<p>2 pipeline每次只能作用在一个Redis的节点上</p>
<p>3 M(mset，mget….)操作和pipeline的区别</p>
<h2 id="三-发布订阅"><a href="#三-发布订阅" class="headerlink" title="三 发布订阅"></a>三 发布订阅</h2><h3 id="3-1-角色"><a href="#3-1-角色" class="headerlink" title="3.1 角色"></a>3.1 角色</h3><p><strong>发布者/订阅者/频道</strong></p>
<p>发布者发布了消息，所有的订阅者都可以收到，就是生产者消费者模型（后订阅了，无法获取历史消息）</p>
<h3 id="3-2-模型"><a href="#3-2-模型" class="headerlink" title="3.2 模型"></a>3.2 模型</h3><p><img src="https://tva1.sinaimg.cn/large/006tNbRwgy1ga923qyr2uj31xp0u0jwt.jpg" alt="image-20191225163659941"></p>
<h3 id="3-3-API"><a href="#3-3-API" class="headerlink" title="3.3 API"></a>3.3 API</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">publish channel message <span class="comment">#发布命令</span></span><br><span class="line">publish souhu:tv <span class="string">"hello world"</span> <span class="comment">#在souhu:tv频道发布一条hello world  返回订阅者个数</span></span><br><span class="line"></span><br><span class="line">subscribe [channel] <span class="comment">#订阅命令，可以订阅一个或多个</span></span><br><span class="line">subscribe souhu:tv  <span class="comment">#订阅sohu:tv频道</span></span><br><span class="line"></span><br><span class="line">unsubscribe [channel] <span class="comment">#取消订阅一个或多个频道</span></span><br><span class="line">unsubscribe sohu:tv  <span class="comment">#取消订阅sohu:tv频道</span></span><br><span class="line">    </span><br><span class="line">psubscribe [pattern...] <span class="comment">#订阅模式匹配</span></span><br><span class="line">psubscribe c*  <span class="comment">#订阅以c开头的频道</span></span><br><span class="line"></span><br><span class="line">unpsubscribe [pattern...] <span class="comment">#按模式退订指定频道</span></span><br><span class="line"></span><br><span class="line">pubsub channels <span class="comment">#列出至少有一个订阅者的频道,列出活跃的频道</span></span><br><span class="line"></span><br><span class="line">pubsub numsub [channel...] <span class="comment">#列出给定频道的订阅者数量</span></span><br><span class="line"></span><br><span class="line">pubsub numpat <span class="comment">#列出被订阅模式的数量</span></span><br></pre></td></tr></table></figure>



<h3 id="3-4-发布订阅和消息队列"><a href="#3-4-发布订阅和消息队列" class="headerlink" title="3.4 发布订阅和消息队列"></a>3.4 发布订阅和消息队列</h3><p>发布订阅数全收到，消息队列有个抢的过程，只有一个抢到</p>
<h2 id="四-Bitmap位图"><a href="#四-Bitmap位图" class="headerlink" title="四 Bitmap位图"></a>四 Bitmap位图</h2><h3 id="4-1-位图是什么"><a href="#4-1-位图是什么" class="headerlink" title="4.1 位图是什么"></a>4.1 位图是什么</h3><p>下面是字符串big对应的二进制（b是98）</p>
<p><img src="https://tva1.sinaimg.cn/large/006tNbRwgy1ga93bk259dj313y0isajp.jpg" alt="image-20191225172053447"></p>
<h3 id="4-2-相关命令"><a href="#4-2-相关命令" class="headerlink" title="4.2 相关命令"></a>4.2 相关命令</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">set hello big <span class="comment">#放入key位hello 值为big的字符串</span></span><br><span class="line">getbit hello <span class="number">0</span> <span class="comment">#取位图的第0个位置，返回0</span></span><br><span class="line">getbit hello <span class="number">1</span> <span class="comment">#取位图的第1个位置，返回1 如上图</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##我们可以直接操纵位</span></span><br><span class="line">setbit key offset value <span class="comment">#给位图指定索引设置值</span></span><br><span class="line">setbit hello <span class="number">7</span> <span class="number">1</span> <span class="comment">#把hello的第7个位置设为1 这样，big就变成了cig</span></span><br><span class="line"></span><br><span class="line">setbit test <span class="number">50</span> <span class="number">1</span> <span class="comment">#test不存在，在key为test的value的第50位设为1，那其他位都以0补</span></span><br><span class="line"></span><br><span class="line">bitcount key [start end] <span class="comment">#获取位图指定范围(start到end,单位为字节,注意按字节一个字节8个bit为，如果不指定就是获取全部)位值为1的个数</span></span><br><span class="line"></span><br><span class="line">bitop op destkey key [key...] <span class="comment">#做多个Bitmap的and(交集)/or(并集)/not(非)/xor(异或)，操作并将结果保存在destkey中 </span></span><br><span class="line">bitop <span class="keyword">and</span> after_lqz lqz lqz2 <span class="comment">#把lqz和lqz2按位与操作，放到after_lqz中</span></span><br><span class="line"></span><br><span class="line">bitpos key targetBit start end <span class="comment">#计算位图指定范围(start到end，单位为字节，如果不指定是获取全部)第一个偏移量对应的值等于targetBit的位置</span></span><br><span class="line">bitpos lqz <span class="number">1</span> <span class="comment">#big 对应位图中第一个1的位置，在第二个位置上，由于从0开始返回1</span></span><br><span class="line">bitpos lqz <span class="number">0</span> <span class="comment">#big 对应位图中第一个0的位置，在第一个位置上，由于从0开始返回0</span></span><br><span class="line">bitpos lqz <span class="number">1</span> <span class="number">1</span> <span class="number">2</span> <span class="comment">#返回9：返回从第一个字节到第二个字节之间 第一个1的位置，看上图，为9</span></span><br></pre></td></tr></table></figure>

<p><img src="https://tva1.sinaimg.cn/large/006tNbRwgy1ga93gnif6ej310q0iuwpy.jpg" alt="image-20191225172547661"></p>
<h3 id="4-3-独立用户统计"><a href="#4-3-独立用户统计" class="headerlink" title="4.3 独立用户统计"></a>4.3 独立用户统计</h3><p>1 使用set和Bitmap对比</p>
<p>2 1亿用户，5千万独立（1亿用户量，约5千万人访问，统计活跃用户数量）</p>
<table>
<thead>
<tr>
<th>数据类型</th>
<th>每个userid占用空间</th>
<th>需要存储用户量</th>
<th>全部内存量</th>
</tr>
</thead>
<tbody><tr>
<td>set</td>
<td>32位(假设userid是整形，占32位)</td>
<td>5千万</td>
<td>32位*5千万=200MB</td>
</tr>
<tr>
<td>bitmap</td>
<td>1位</td>
<td>1亿</td>
<td>1位*1亿=12.5MB</td>
</tr>
</tbody></table>
<p>假设有10万独立用户，使用位图还是占用12.5mb，使用set需要32位*1万=4MB</p>
<h3 id="4-5-总结"><a href="#4-5-总结" class="headerlink" title="4.5 总结"></a>4.5 总结</h3><p>1 位图类型是string类型，最大512M</p>
<p>2 使用setbit时偏移量如果过大，会有较大消耗</p>
<p>3 位图不是绝对好用，需要合理使用</p>
<h2 id="五-HyperLogLog"><a href="#五-HyperLogLog" class="headerlink" title="五 HyperLogLog"></a>五 HyperLogLog</h2><h3 id="5-1-介绍"><a href="#5-1-介绍" class="headerlink" title="5.1 介绍"></a>5.1 介绍</h3><p>基于HyperLogLog算法：极小的空间完成独立数量统计</p>
<p>本质还是字符串</p>
<h3 id="5-2-三个命令"><a href="#5-2-三个命令" class="headerlink" title="5.2 三个命令"></a>5.2 三个命令</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pfadd key element <span class="comment">#向hyperloglog添加元素,可以同时添加多个</span></span><br><span class="line">pfcount key <span class="comment">#计算hyperloglog的独立总数</span></span><br><span class="line">pfmerge destroy sourcekey1 sourcekey2<span class="comment">#合并多个hyperloglog，把sourcekey1和sourcekey2合并为destroy</span></span><br><span class="line"></span><br><span class="line">pfadd uuids <span class="string">"uuid1"</span> <span class="string">"uuid2"</span> <span class="string">"uuid3"</span> <span class="string">"uuid4"</span> <span class="comment">#向uuids中添加4个uuid</span></span><br><span class="line">pfcount uuids <span class="comment">#返回4</span></span><br><span class="line">pfadd uuids <span class="string">"uuid1"</span> <span class="string">"uuid5"</span><span class="comment">#有一个之前存在了，其实只把uuid5添加了</span></span><br><span class="line">pfcount uuids <span class="comment">#返回5</span></span><br><span class="line"></span><br><span class="line">pfadd uuids1 <span class="string">"uuid1"</span> <span class="string">"uuid2"</span> <span class="string">"uuid3"</span> <span class="string">"uuid4"</span></span><br><span class="line">pfadd uuids2 <span class="string">"uuid3"</span> <span class="string">"uuid4"</span> <span class="string">"uuid5"</span> <span class="string">"uuid6"</span></span><br><span class="line">pfmerge uuidsall uuids1 uuids2 <span class="comment">#合并</span></span><br><span class="line">pfcount uuidsall <span class="comment">#统计个数 返回6</span></span><br></pre></td></tr></table></figure>

<h3 id="5-3-内存消耗-amp-总结"><a href="#5-3-内存消耗-amp-总结" class="headerlink" title="5.3 内存消耗&amp;总结"></a>5.3 内存消耗&amp;总结</h3><p>百万级别独立用户统计，百万条数据只占15k</p>
<p>错误率 0.81%</p>
<p>无法取出单条数据，只能统计个数</p>
<h2 id="六-GEO"><a href="#六-GEO" class="headerlink" title="六 GEO"></a>六 GEO</h2><h3 id="6-1-介绍"><a href="#6-1-介绍" class="headerlink" title="6.1 介绍"></a>6.1 介绍</h3><p>GEO（地理信息定位）：存储经纬度，计算两地距离，范围等</p>
<p>北京：116.28，39.55</p>
<p>天津：117.12，39.08</p>
<p>可以计算天津到北京的距离，天津周围50km的城市，外卖等</p>
<h3 id="6-2-5个城市纬度"><a href="#6-2-5个城市纬度" class="headerlink" title="6.2 5个城市纬度"></a>6.2 5个城市纬度</h3><table>
<thead>
<tr>
<th>城市</th>
<th>经度</th>
<th>纬度</th>
<th>简称</th>
</tr>
</thead>
<tbody><tr>
<td>北京</td>
<td>116.28</td>
<td>39.55</td>
<td>beijing</td>
</tr>
<tr>
<td>天津</td>
<td>117.12</td>
<td>39.08</td>
<td>tianjin</td>
</tr>
<tr>
<td>石家庄</td>
<td>114.29</td>
<td>38.02</td>
<td>shijiazhuang</td>
</tr>
<tr>
<td>唐山</td>
<td>118.01</td>
<td>39.38</td>
<td>tangshan</td>
</tr>
<tr>
<td>保定</td>
<td>115.29</td>
<td>38.51</td>
<td>baoding</td>
</tr>
</tbody></table>
<h3 id="6-3-相关命令"><a href="#6-3-相关命令" class="headerlink" title="6.3 相关命令"></a>6.3 相关命令</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">geoadd key longitude latitude member <span class="comment">#增加地理位置信息</span></span><br><span class="line">geoadd cities:locations <span class="number">116.28</span> <span class="number">39.55</span> beijing <span class="comment">#把北京地理信息天津到cities:locations中</span></span><br><span class="line">geoadd cities:locations <span class="number">117.12</span> <span class="number">39.08</span> tianjin</span><br><span class="line">geoadd cities:locations <span class="number">114.29</span> <span class="number">38.02</span> shijiazhuang</span><br><span class="line">geoadd cities:locations <span class="number">118.01</span> <span class="number">39.38</span> tangshan</span><br><span class="line">geoadd cities:locations <span class="number">115.29</span> <span class="number">38.51</span> baoding</span><br><span class="line">    </span><br><span class="line">geopos key member <span class="comment">#获取地理位置信息</span></span><br><span class="line">geopos cities:locations beijing <span class="comment">#获取北京地理信息</span></span><br><span class="line"></span><br><span class="line">geodist key member1 member2 [unit]<span class="comment">#获取两个地理位置的距离 unit:m(米) km(千米) mi(英里) ft(尺)</span></span><br><span class="line">geodist cities:locations beijing tianjin km <span class="comment">#北京到天津的距离，89公里</span></span><br><span class="line"></span><br><span class="line">georadius key logitude latitude radiusm|km|ft|mi [withcoord] [withdist] [withhash] [COUNT count] [asc|desc] [store key][storedist key]</span><br><span class="line"></span><br><span class="line">georadiusbymember key member radiusm|km|ft|mi [withcoord] [withdist] [withhash] [COUNT count] [asc|desc] [store key][storedist key]</span><br><span class="line"><span class="comment">#获取指定位置范围内的地理位置信息集合</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">withcoord:返回结果中包含经纬度</span></span><br><span class="line"><span class="string">withdist：返回结果中包含距离中心节点位置</span></span><br><span class="line"><span class="string">withhash：返回解雇中包含geohash</span></span><br><span class="line"><span class="string">COUNT count：指定返回结果的数量</span></span><br><span class="line"><span class="string">asc|desc：返回结果按照距离中心店的距离做升序/降序排列</span></span><br><span class="line"><span class="string">store key：将返回结果的地理位置信息保存到指定键</span></span><br><span class="line"><span class="string">storedist key：将返回结果距离中心点的距离保存到指定键</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">georadiusbymember cities:locations beijing <span class="number">150</span> km</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">1) "beijing"</span></span><br><span class="line"><span class="string">2) "tianjin"</span></span><br><span class="line"><span class="string">3) "tangshan"</span></span><br><span class="line"><span class="string">4) "baoding"</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure>



<h3 id="6-4-总结"><a href="#6-4-总结" class="headerlink" title="6.4 总结"></a>6.4 总结</h3><p>3.2以后版本才有</p>
<p>geo本质时zset类型</p>
<p>可以使用zset的删除，删除指定member：zrem </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">geoadd key longitude latitude member #增加地理位置信息</span><br><span class="line">geoadd cities:locations 116.28 39.55 beijing #把北京地理信息天津到cities:locations中</span><br><span class="line">geoadd cities:locations 117.12 39.08 tianjin</span><br><span class="line">geoadd cities:locations 114.29 38.02 shijiazhuang</span><br><span class="line">geoadd cities:locations 118.01 39.38 tangshan</span><br><span class="line">geoadd cities:locations 115.29 38.51 baoding</span><br><span class="line">    </span><br><span class="line">geopos key member #获取地理位置信息</span><br><span class="line">geopos cities:locations beijing #获取北京地理信息</span><br><span class="line"></span><br><span class="line">geodist key member1 member2 [unit]#获取两个地理位置的距离 unit:m(米) km(千米) mi(英里) ft(尺)</span><br><span class="line">geodist cities:locations beijing tianjin km #北京到天津的距离，89公里</span><br><span class="line"></span><br><span class="line">georadius key logitude latitude radiusm|km|ft|mi [withcoord] [withdist] [withhash] [COUNT count] [asc|desc] [store key][storedist key]</span><br><span class="line"></span><br><span class="line">georadiusbymember key member radiusm|km|ft|mi [withcoord] [withdist] [withhash] [COUNT count] [asc|desc] [store key][storedist key]</span><br><span class="line">#获取指定位置范围内的地理位置信息集合</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">withcoord:返回结果中包含经纬度</span><br><span class="line">withdist：返回结果中包含距离中心节点位置</span><br><span class="line">withhash：返回解雇中包含geohash</span><br><span class="line">COUNT count：指定返回结果的数量</span><br><span class="line">asc|desc：返回结果按照距离中心店的距离做升序&#x2F;降序排列</span><br><span class="line">store key：将返回结果的地理位置信息保存到指定键</span><br><span class="line">storedist key：将返回结果距离中心点的距离保存到指定键</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">georadiusbymember cities:locations beijing 150 km</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">1) &quot;beijing&quot;</span><br><span class="line">2) &quot;tianjin&quot;</span><br><span class="line">3) &quot;tangshan&quot;</span><br><span class="line">4) &quot;baoding&quot;</span><br><span class="line">&#39;&#39;&#39;</span><br></pre></td></tr></table></figure>



<h3 id="6-4-总结-1"><a href="#6-4-总结-1" class="headerlink" title="6.4 总结"></a>6.4 总结</h3><p>3.2以后版本才有</p>
<p>geo本质时zset类型</p>
<p>可以使用zset的删除，删除指定member：zrem </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">geoadd key longitude latitude member #增加地理位置信息</span><br><span class="line">geoadd cities:locations 116.28 39.55 beijing #把北京地理信息天津到cities:locations中</span><br><span class="line">geoadd cities:locations 117.12 39.08 tianjin</span><br><span class="line">geoadd cities:locations 114.29 38.02 shijiazhuang</span><br><span class="line">geoadd cities:locations 118.01 39.38 tangshan</span><br><span class="line">geoadd cities:locations 115.29 38.51 baoding</span><br><span class="line">    </span><br><span class="line">geopos key member #获取地理位置信息</span><br><span class="line">geopos cities:locations beijing #获取北京地理信息</span><br><span class="line"></span><br><span class="line">geodist key member1 member2 [unit]#获取两个地理位置的距离 unit:m(米) km(千米) mi(英里) ft(尺)</span><br><span class="line">geodist cities:locations beijing tianjin km #北京到天津的距离，89公里</span><br><span class="line"></span><br><span class="line">georadius key logitude latitude radiusm|km|ft|mi [withcoord] [withdist] [withhash] [COUNT count] [asc|desc] [store key][storedist key]</span><br><span class="line"></span><br><span class="line">georadiusbymember key member radiusm|km|ft|mi [withcoord] [withdist] [withhash] [COUNT count] [asc|desc] [store key][storedist key]</span><br><span class="line">#获取指定位置范围内的地理位置信息集合</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">withcoord:返回结果中包含经纬度</span><br><span class="line">withdist：返回结果中包含距离中心节点位置</span><br><span class="line">withhash：返回解雇中包含geohash</span><br><span class="line">COUNT count：指定返回结果的数量</span><br><span class="line">asc|desc：返回结果按照距离中心店的距离做升序&#x2F;降序排列</span><br><span class="line">store key：将返回结果的地理位置信息保存到指定键</span><br><span class="line">storedist key：将返回结果距离中心点的距离保存到指定键</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">georadiusbymember cities:locations beijing 150 km</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">1) &quot;beijing&quot;</span><br><span class="line">2) &quot;tianjin&quot;</span><br><span class="line">3) &quot;tangshan&quot;</span><br><span class="line">4) &quot;baoding&quot;</span><br><span class="line">&#39;&#39;&#39;</span><br></pre></td></tr></table></figure>



<h3 id="6-4-总结-2"><a href="#6-4-总结-2" class="headerlink" title="6.4 总结"></a>6.4 总结</h3><p>3.2以后版本才有</p>
<p>geo本质时zset类型</p>
<p>可以使用zset的删除，删除指定member：zrem cities:locations beijing</p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>[静态文件、request对象与链接数据库]</title>
    <url>/2020/02/10/%E9%9D%99%E6%80%81%E6%96%87%E4%BB%B6%E3%80%81request%E5%AF%B9%E8%B1%A1%E4%B8%8E%E9%93%BE%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
    <content><![CDATA[<h3 id="静态文件配置"><a href="#静态文件配置" class="headerlink" title="静态文件配置"></a>静态文件配置</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 登陆功能</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">我们将html文件默认都放在templates文件夹下</span></span><br><span class="line"><span class="string">我们将网站所使用的静态文件默认都放在static文件夹下</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">静态文件</span></span><br><span class="line"><span class="string">	前端已经写好了的 能够直接调用使用的文件</span></span><br><span class="line"><span class="string">		网站写好的js文件</span></span><br><span class="line"><span class="string">		网站写好的css文件</span></span><br><span class="line"><span class="string">		网站用到的图片文件</span></span><br><span class="line"><span class="string">		第三方前端框架</span></span><br><span class="line"><span class="string">		...</span></span><br><span class="line"><span class="string">		拿来就可以直接使用的</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment"># django默认是不会自动帮你创建static文件夹 需要你自己手动创建</span></span><br><span class="line">一般情况下我们在static文件夹内还会做进一步的划分处理</span><br><span class="line">	-static</span><br><span class="line">  	--js</span><br><span class="line">    --css</span><br><span class="line">    --img</span><br><span class="line">    其他第三方文件</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">在浏览器中输入url能够看到对应的资源</span></span><br><span class="line"><span class="string">是因为后端提前开设了该资源的借口</span></span><br><span class="line"><span class="string">如果访问不到资源 说明后端没有开设该资源的借口</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">http://127.0.0.1:8000/static/bootstrap-3.3.7-dist/css/bootstrap.min.css</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 静态文件配置</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">****************************************************************</span></span><br><span class="line"><span class="string">当你在写django项目的时候 可能会出现后端代码修改了但是前端页面没有变化的情况</span></span><br><span class="line"><span class="string">	1.你在同一个端口开了好几个django项目 </span></span><br><span class="line"><span class="string">		一直在跑的其实是第一个django项目</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">	2.浏览器缓存的问题</span></span><br><span class="line"><span class="string">		settings</span></span><br><span class="line"><span class="string">			network</span></span><br><span class="line"><span class="string">				disable cache 勾选上	</span></span><br><span class="line"><span class="string">*****************************************************************</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">STATIC_URL = <span class="string">'/ooo/'</span>  <span class="comment"># 类似于访问静态文件的令牌</span></span><br><span class="line"><span class="string">"""如果你想要访问静态文件 你就必须以static开头"""</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">/static/bootstrap-3.3.7-dist/js/bootstrap.min.js</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">/static/令牌</span></span><br><span class="line"><span class="string">取列表里面从上往下依次查找</span></span><br><span class="line"><span class="string">    bootstrap-3.3.7-dist/js/bootstrap.min.js</span></span><br><span class="line"><span class="string">    都没有才会报错</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment"># 静态文件配置</span></span><br><span class="line">STATICFILES_DIRS = [</span><br><span class="line">    os.path.join(BASE_DIR,<span class="string">'static'</span>),</span><br><span class="line">    os.path.join(BASE_DIR,<span class="string">'static1'</span>),</span><br><span class="line">    os.path.join(BASE_DIR,<span class="string">'static2'</span>),</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 静态文件动态解析</span></span><br><span class="line">    &#123;% load static %&#125;</span><br><span class="line">    &lt;link rel=<span class="string">"stylesheet"</span> href=<span class="string">"&#123;% static 'bootstrap-3.3.7-dist/css/bootstrap.min.css' %&#125;"</span>&gt;</span><br><span class="line">    &lt;script src="&#123;% static 'bootstrap-3.3.7-dist/js/bootstrap.min.js' %&#125;"&gt;&lt;/script&gt;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment"># form表单默认是get请求数据</span></span><br><span class="line">	http://127.0.0.1:8000/login/?username=jason&amp;password=123</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">form表单action参数</span></span><br><span class="line"><span class="string">	1.不写 默认朝当前所在的url提交数据</span></span><br><span class="line"><span class="string">	2.全写 指名道姓</span></span><br><span class="line"><span class="string">	3.只写后缀 /login/</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在前期我们使用django提交post请求的时候 需要取配置文件中注释掉一行代码</span></span><br><span class="line">MIDDLEWARE = [</span><br><span class="line">    <span class="string">'django.middleware.security.SecurityMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.contrib.sessions.middleware.SessionMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.middleware.common.CommonMiddleware'</span>,</span><br><span class="line">    <span class="comment"># 'django.middleware.csrf.CsrfViewMiddleware',</span></span><br><span class="line">    <span class="string">'django.contrib.auth.middleware.AuthenticationMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.contrib.messages.middleware.MessageMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.middleware.clickjacking.XFrameOptionsMiddleware'</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h3 id="request对象方法初识"><a href="#request对象方法初识" class="headerlink" title="request对象方法初识"></a>request对象方法初识</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">request.method <span class="comment"># 返回请求方式 并且是全大写的字符串形式  &lt;class 'str'&gt;</span></span><br><span class="line">request.POST  <span class="comment"># 获取用户post请求提交的普通数据不包含文件</span></span><br><span class="line">request.POST.get()  <span class="comment"># 只获取列表最后一个元素</span></span><br><span class="line">request.POST.getlist()  <span class="comment"># 直接将列表取出</span></span><br><span class="line">request.GET  <span class="comment"># 获取用户提交的get请求数据</span></span><br><span class="line">request.GET.get()  <span class="comment"># 只获取列表最后一个元素</span></span><br><span class="line">request.GET.getlist()  <span class="comment"># 直接将列表取出</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">get请求携带的数据是有大小限制的 大概好像只有4KB左右</span></span><br><span class="line"><span class="string">而post请求则没有限制</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="comment"># 返回一个登陆界面</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    get请求和post请求应该有不同的处理机制</span></span><br><span class="line"><span class="string">    :param request: 请求相关的数据对象 里面有很多简易的方法</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="comment"># print(type(request.method))  # 返回请求方式 并且是全大写的字符串形式  &lt;class 'str'&gt;</span></span><br><span class="line">    <span class="comment"># if request.method == 'GET':</span></span><br><span class="line">    <span class="comment">#     print('来了 老弟')</span></span><br><span class="line">    <span class="comment">#     return render(request,'login.html')</span></span><br><span class="line">    <span class="comment"># elif request.method == 'POST':</span></span><br><span class="line">    <span class="comment">#     return HttpResponse("收到了 宝贝")</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'POST'</span>:</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">"收到了 宝贝"</span>)</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'login.html'</span>)</span><br></pre></td></tr></table></figure>

<h3 id="pycharm链接数据库-MySQL"><a href="#pycharm链接数据库-MySQL" class="headerlink" title="pycharm链接数据库(MySQL)"></a>pycharm链接数据库(MySQL)</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">三个位置查找数据库相关</span></span><br><span class="line"><span class="string">	右侧上方database</span></span><br><span class="line"><span class="string">	左下方database</span></span><br><span class="line"><span class="string">	配置里面的plugins插件搜索安装</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">	再没有卸载pycharm重新装	</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">pycharm可以充当很多款数据库软件的客户端</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">参考截图和视频操作即可</span></span><br><span class="line"><span class="string">	需要提前创建好库</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<h3 id="django链接数据库-MySQL"><a href="#django链接数据库-MySQL" class="headerlink" title="django链接数据库(MySQL)"></a>django链接数据库(MySQL)</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 默认用的是sqkite3</span></span><br><span class="line">DATABASES = &#123;</span><br><span class="line">    <span class="string">'default'</span>: &#123;</span><br><span class="line">        <span class="string">'ENGINE'</span>: <span class="string">'django.db.backends.sqlite3'</span>,</span><br><span class="line">        <span class="string">'NAME'</span>: os.path.join(BASE_DIR, <span class="string">'db.sqlite3'</span>),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># django链接MySQL</span></span><br><span class="line">	<span class="number">1.</span>第一步配置文件中配置</span><br><span class="line">  	DATABASES = &#123;</span><br><span class="line">    <span class="string">'default'</span>: &#123;</span><br><span class="line">        <span class="string">'ENGINE'</span>: <span class="string">'django.db.backends.mysql'</span>,</span><br><span class="line">        <span class="string">'NAME'</span>: <span class="string">'day60'</span>,</span><br><span class="line">        <span class="string">'USER'</span>:<span class="string">'root'</span>,</span><br><span class="line">        <span class="string">'PASSWORD'</span>:<span class="string">'admin123'</span>,</span><br><span class="line">        <span class="string">'HOST'</span>:<span class="string">'127.0.0.1'</span>,</span><br><span class="line">        <span class="string">'PORT'</span>:<span class="number">3306</span>,</span><br><span class="line">        <span class="string">'CHARSET'</span>:<span class="string">'utf8'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">  <span class="number">2.</span>代码声明	</span><br><span class="line">  	django默认用的是mysqldb模块链接MySQL</span><br><span class="line">    但是该模块的兼容性不好 需要手动改为用pymysql链接</span><br><span class="line">    </span><br><span class="line">    你需要告诉django不要用默认的mysqldb还是用pymysql</span><br><span class="line">    <span class="comment"># 在项目名下的init或者任意的应用名下的init文件中书写以下代码都可以</span></span><br><span class="line">    <span class="keyword">import</span> pymysql</span><br><span class="line">		pymysql.install_as_MySQLdb()</span><br></pre></td></tr></table></figure>

<h3 id="Django-ORM"><a href="#Django-ORM" class="headerlink" title="Django ORM"></a>Django ORM</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">ORM. 对象关系映射</span></span><br><span class="line"><span class="string">作用:能够让一个不用sql语句的小白也能够通过python 面向对象的代码简单快捷的操作数据库</span></span><br><span class="line"><span class="string">不足之处:封装程度太高 有时候sql语句的效率偏低 需要你自己写SQL语句</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">类									   表</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">对象									  记录</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">对象属性							记录某个字段对应的值</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">应用下面的models.py文件</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1 先去models.py中书写一个类</span></span><br><span class="line">	<span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="comment"># id int primary_key auto_increment</span></span><br><span class="line">    id = models.AutoField(primary_key=<span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># username varchar(32)</span></span><br><span class="line">    username = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    <span class="comment"># password int</span></span><br><span class="line">    password = models.IntegerField()</span><br><span class="line"></span><br><span class="line">*************************<span class="comment"># 2 数据库迁移命令*************************</span></span><br><span class="line">python3 manage.py makemigrations 将操作记录记录到小本本上(migrations文件夹)</span><br><span class="line"></span><br><span class="line">python3 manage.py migrate  将操作真正的同步到数据库中</span><br><span class="line"><span class="comment"># 只要你修改了models.py中跟数据库相关的代码 就必须重新执行上述的两条命令</span></span><br><span class="line">******************************************************************</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="comment"># id int primary_key auto_increment</span></span><br><span class="line">    id = models.AutoField(primary_key=<span class="literal">True</span>,verbose_name=<span class="string">'主键'</span>)</span><br><span class="line">    <span class="comment"># username varchar(32)</span></span><br><span class="line">    username = models.CharField(max_length=<span class="number">32</span>,verbose_name=<span class="string">'用户名'</span>)</span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    CharField必须要指定max_length参数 不指定会直接报错</span></span><br><span class="line"><span class="string">    verbose_name该参数是所有字段都有的 就是用来对字段的解释</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="comment"># password int</span></span><br><span class="line">    password = models.IntegerField(verbose_name=<span class="string">'密码'</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Author</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="comment"># 由于一张表中必须要有一个主键字段 并且一般情况下都叫id字段</span></span><br><span class="line">    <span class="comment"># 所以orm当你不定义主键字段的时候 orm会自动帮你创建一个名为id主键字段</span></span><br><span class="line">    <span class="comment"># 也就意味着 后续我们在创建模型表的时候如果主键字段名没有额外的叫法 那么主键字段可以省略不写</span></span><br><span class="line">    <span class="comment"># username varchar(32)</span></span><br><span class="line">    username = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    <span class="comment"># password int</span></span><br><span class="line">    password = models.IntegerField()</span><br></pre></td></tr></table></figure>

<h3 id="字段的增删改查"><a href="#字段的增删改查" class="headerlink" title="字段的增删改查"></a>字段的增删改查</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 字段的增加</span></span><br><span class="line">	<span class="number">1.</span>可以在终端内直接给出默认值</span><br><span class="line">  <span class="number">2.</span>该字段可以为空</span><br><span class="line">    info = models.CharField(max_length=<span class="number">32</span>,verbose_name=<span class="string">'个人简介'</span>,null=<span class="literal">True</span>)</span><br><span class="line">  <span class="number">3.</span>直接给字段设置默认值</span><br><span class="line">    hobby = models.CharField(max_length=<span class="number">32</span>,verbose_name=<span class="string">'兴趣爱好'</span>,default=<span class="string">'study'</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 字段的修改</span></span><br><span class="line">	直接修改代码然后执行数据库迁移的两条命令即可！</span><br><span class="line"></span><br><span class="line"><span class="comment"># 字段的删</span></span><br><span class="line">	直接注释对应的字段然后执行数据库迁移的两条命令即可！</span><br><span class="line">  执行完毕之后字段对应的数据也都没有了</span><br><span class="line">  </span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">在操作models.py的时候一定要细心</span></span><br><span class="line"><span class="string">	千万不要注释一些字段</span></span><br><span class="line"><span class="string">	执行迁移命令之前最好先检查一下自己写的代码</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 个人建议:当你离开你的计算机之后一定要锁屏</span></span><br></pre></td></tr></table></figure>

<h3 id="数据的增删改查"><a href="#数据的增删改查" class="headerlink" title="数据的增删改查"></a>数据的增删改查</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 今天只会介绍一点点 后面会详细的介绍</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查</span></span><br><span class="line">res = models.User.objects.filter(username=username)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">返回值你先看成是列表套数据对象的格式</span></span><br><span class="line"><span class="string">它也支持索引取值 切片操作 但是不支持负数索引</span></span><br><span class="line"><span class="string">它也不推荐你使用索引的方式取值</span></span><br><span class="line"><span class="string">user_obj = models.User.objects.filter(username=username).first()</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">filter括号内可以携带多个参数 参数与参数之间默认是<span class="keyword">and</span>关系</span><br><span class="line">你可以把filter联想成where记忆</span><br><span class="line"></span><br><span class="line"><span class="comment"># 增</span></span><br><span class="line"><span class="keyword">from</span> app01 <span class="keyword">import</span> models</span><br><span class="line">res = models.User.objects.create(username=username,password=password)</span><br><span class="line"><span class="comment"># 返回值就是当前被创建的对象本身</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二种增加</span></span><br><span class="line">user_obj = models.User(username=username,password=password)</span><br><span class="line">user_obj.save()  <span class="comment"># 保存数据</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>django框架</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker通关手册</title>
    <url>/2021/01/21/Docker%E9%80%9A%E5%85%B3%E6%89%8B%E5%86%8C/</url>
    <content><![CDATA[<blockquote>
<p>个人建议把面试题看作是费曼学习法中的回顾、简化的环节，准备面试的时候，跟着题目先自己讲给自己听，看看自己会满意吗，不满意就继续学习这个点，如此反复，好的offer离你不远的，奥利给</p>
<p>…</p>
</blockquote>
<blockquote>
<p>成长手册，<strong>GitHub</strong> <a href="https://github.com/rogerXS80/roger" target="_blank" rel="noopener">Lupinus</a> ，N线互联网开发必备技能兵器谱</p>
</blockquote>
<h1 id="Docker通关手册"><a href="#Docker通关手册" class="headerlink" title="Docker通关手册"></a>Docker通关手册</h1><h2 id="Docker是什么？"><a href="#Docker是什么？" class="headerlink" title="Docker是什么？"></a>Docker是什么？</h2><p>最广泛的开源容器引擎</p>
<p>一种操作系统级的虚拟化技术</p>
<p>依赖于Linux内核特性：Namespace（<strong>资源隔离</strong>）和Cgroups（<strong>资源限制</strong>）</p>
<p>一个简单的应用程序打包工具</p>
<h2 id="Docker安装"><a href="#Docker安装" class="headerlink" title="Docker安装"></a>Docker安装</h2><p>如果已经安装了，运行：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sudo yum remove docker \</span><br><span class="line">                 docker-client \</span><br><span class="line">                 docker-client-latest \</span><br><span class="line">                 docker-common \</span><br><span class="line">                 docker-latest \</span><br><span class="line">                 docker-latest-logrotate \</span><br><span class="line">                 docker-logrotate \</span><br><span class="line">                 docker-engine</span><br></pre></td></tr></table></figure>

<p>安装docker工具</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装 Docker所需的依赖</span></span><br><span class="line">yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加软件源信息</span></span><br><span class="line">yum-config-manager --add-repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line">    </span><br><span class="line"><span class="comment"># Docker CE</span></span><br><span class="line">yum install docker-ce -y</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新加载 配置文件</span></span><br><span class="line">systemctl daemon-reload</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启 Docker服务</span></span><br><span class="line">systemctl restart docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将 Docker服务 加入开机自启</span></span><br><span class="line">systemctl enable --now docker.service</span><br><span class="line">Created symlink <span class="keyword">from</span> /etc/systemd/system/multi-user.target.wants/docker.service to /usr/lib/systemd/system/docker.service.</span><br><span class="line">        </span><br><span class="line"><span class="comment"># yum源工作目录</span></span><br><span class="line">/etc/yum.repos.d/docker-ce.repo</span><br></pre></td></tr></table></figure>

<h2 id="Docker基本组成"><a href="#Docker基本组成" class="headerlink" title="Docker基本组成"></a>Docker基本组成</h2><img src="https://gitee.com/wjxyzs/img/raw/master/img/docker%E7%BB%84%E6%88%90.png" style="zoom: 67%;" />

<h2 id="Docker核心组件"><a href="#Docker核心组件" class="headerlink" title="Docker核心组件"></a>Docker核心组件</h2><img src="https://gitee.com/wjxyzs/img/raw/master/img/docker%E6%A0%B8%E5%BF%83%E7%BB%84%E4%BB%B6.png" style="zoom:67%;" />

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Docker Daemon：Docker守护进程，负责与Docker Clinet交互，并管理镜像、</span><br><span class="line">容器。</span><br><span class="line">Containerd：是一个简单的守护进程，向上给Docker Daemon提供接口，向下</span><br><span class="line">通过containerd-shim结合runC管理容器。</span><br><span class="line">runC：一个命令行工具，它根据OCI标准来创建和运行容器。</span><br></pre></td></tr></table></figure>



<h2 id="镜像是什么？"><a href="#镜像是什么？" class="headerlink" title="镜像是什么？"></a>镜像是什么？</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">• 一个分层存储的文件，不是一个单一的文件 </span><br><span class="line">• 一个软件的环境 </span><br><span class="line">• 一个镜像可以创建N个容器 </span><br><span class="line">• 一种标准化的交付 </span><br><span class="line">• 一个不包含Linux内核而又精简的Linux操作系统</span><br></pre></td></tr></table></figure>

<h3 id="配置镜像加速器"><a href="#配置镜像加速器" class="headerlink" title="配置镜像加速器"></a>配置镜像加速器</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">vi /etc/docker/daemon.json </span><br><span class="line">&#123;</span><br><span class="line"><span class="string">"registry-mirrors"</span>: [<span class="string">"https://rxsa4cyh.mirror.aliyuncs.com]</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="镜像常用指令"><a href="#镜像常用指令" class="headerlink" title="镜像常用指令"></a>镜像常用指令</h3><table>
<thead>
<tr>
<th align="center">指令</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">images</td>
<td align="center">列出镜像</td>
</tr>
<tr>
<td align="center">build</td>
<td align="center">构建镜像来自Dockerfile</td>
</tr>
<tr>
<td align="center">history</td>
<td align="center">查看镜像历史</td>
</tr>
<tr>
<td align="center">inspect</td>
<td align="center">显示一个或多个镜像详细信息</td>
</tr>
<tr>
<td align="center">pull</td>
<td align="center">从镜像仓库拉取镜像</td>
</tr>
<tr>
<td align="center">push</td>
<td align="center">推送一个镜像到镜像仓库</td>
</tr>
<tr>
<td align="center">rmi</td>
<td align="center">移除一个或多个镜像</td>
</tr>
<tr>
<td align="center">prune</td>
<td align="center">移除没有被标记或者没有被任何容器引用的镜像</td>
</tr>
<tr>
<td align="center">tag</td>
<td align="center">创建一个引用源镜像标记目标镜像</td>
</tr>
</tbody></table>
<h2 id="镜像存储核心技术"><a href="#镜像存储核心技术" class="headerlink" title="镜像存储核心技术"></a>镜像存储核心技术</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">储存驱动: overlay2（性能好）</span><br></pre></td></tr></table></figure>

<h3 id="联合文件系统（UnionFS"><a href="#联合文件系统（UnionFS" class="headerlink" title="联合文件系统（UnionFS)"></a>联合文件系统（UnionFS)</h3><img src="https://gitee.com/wjxyzs/img/raw/master/img/%E9%95%9C%E5%83%8F%E4%B8%8E%E5%AE%B9%E5%99%A8.png" style="zoom:67%;" />

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">联合文件系统：将镜像多层文件联合挂载到容器文件系统</span><br></pre></td></tr></table></figure>

<h3 id="写时复制（COW）"><a href="#写时复制（COW）" class="headerlink" title="写时复制（COW）"></a>写时复制（COW）</h3><p><img src="https://gitee.com/wjxyzs/img/raw/master/img/docker%E5%AD%98%E5%82%A8%E6%9E%B6%E6%9E%84.png" alt=""></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">写时复制：需要修改文件操作时，会先从镜像里把要写的文件复制到自己的文件系统中进行修改</span><br></pre></td></tr></table></figure>

<h3 id="Docker读写优化"><a href="#Docker读写优化" class="headerlink" title="Docker读写优化"></a>Docker读写优化</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">SSD固态硬盘（工作目录：/var/lib/docker）</span><br><span class="line">使用卷作为频繁读写文件的工作目录，绕过储存驱动，减少抽象开销</span><br></pre></td></tr></table></figure>



<h2 id="容器管理"><a href="#容器管理" class="headerlink" title="容器管理"></a>容器管理</h2><h3 id="创建容器常用选项"><a href="#创建容器常用选项" class="headerlink" title="创建容器常用选项"></a>创建容器常用选项</h3><table>
<thead>
<tr>
<th align="center">指令</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">-i</td>
<td align="center">交互式</td>
</tr>
<tr>
<td align="center">-t</td>
<td align="center">分配一个伪终端</td>
</tr>
<tr>
<td align="center">-d</td>
<td align="center">运行容器到后台</td>
</tr>
<tr>
<td align="center">-e</td>
<td align="center">设置环境变量</td>
</tr>
<tr>
<td align="center">-p</td>
<td align="center">发布容器端口到主机</td>
</tr>
<tr>
<td align="center">–name</td>
<td align="center">指定容器名字</td>
</tr>
<tr>
<td align="center">-h</td>
<td align="center">指定容器主机名</td>
</tr>
<tr>
<td align="center">-ip</td>
<td align="center">指定容器IP，只能用于自定义网络</td>
</tr>
<tr>
<td align="center">-network</td>
<td align="center">连接容器到一个网络</td>
</tr>
<tr>
<td align="center">-m</td>
<td align="center">将文件系统附加到容器</td>
</tr>
<tr>
<td align="center">-v</td>
<td align="center">绑定挂载一个卷</td>
</tr>
<tr>
<td align="center">-restart</td>
<td align="center">容器退出时重启策略，默认no，可选值：[always|on-failure]</td>
</tr>
</tbody></table>
<p>挂载宿主机三个文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">hostname       --hostname</span><br><span class="line">hosts          --dns</span><br><span class="line">resolc.conf    --add-host</span><br></pre></td></tr></table></figure>

<h3 id="容器资源限制"><a href="#容器资源限制" class="headerlink" title="容器资源限制"></a>容器资源限制</h3><table>
<thead>
<tr>
<th align="center">指令</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">-m</td>
<td align="center">容器可以使用的最大内存量（）</td>
</tr>
<tr>
<td align="center">–memory-swap</td>
<td align="center">允许交换到磁盘的内存量</td>
</tr>
<tr>
<td align="center">–memory-swappiness=&lt;0-100&gt;</td>
<td align="center">容器使用SWAP分区交换的百分比（0-100，默认为-1）</td>
</tr>
<tr>
<td align="center">–oom-kill-disable</td>
<td align="center">禁用OOM Killer</td>
</tr>
<tr>
<td align="center">–cpus</td>
<td align="center">可以使用的CPU数量</td>
</tr>
<tr>
<td align="center">–cpuset-cpus</td>
<td align="center">限制容器使用特定的CPU核心，如(0-3, 0,1)</td>
</tr>
<tr>
<td align="center">–cpu-shares</td>
<td align="center">CPU共享（相对权重）</td>
</tr>
</tbody></table>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">默认创建的容器使用宿主机所有资源</span><br><span class="line">主要用于每个容器能够平均分配到宿主机资源</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 内存限额：</span></span><br><span class="line"><span class="comment"># 允许容器最多使用500M内存和100M的Swap，并禁用 OOM Killer：</span></span><br><span class="line">docker run -d --name nginx01 -m=<span class="string">"500m"</span> --memory-swap=<span class="string">"100m"</span> --oom-kill-disable nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># CPU限额：</span></span><br><span class="line"><span class="comment"># 允许容器最多使用一个半的CPU：</span></span><br><span class="line">docker run -d --name nginx02 --cpus=<span class="string">"1.5"</span> nginx</span><br><span class="line"><span class="comment"># 允许容器最多使用50%的CPU：</span></span><br><span class="line">docker run -d --name nginx03 --cpus=<span class="string">".5"</span> nginx</span><br></pre></td></tr></table></figure>

<h3 id="管理容器常用指令"><a href="#管理容器常用指令" class="headerlink" title="管理容器常用指令"></a>管理容器常用指令</h3><table>
<thead>
<tr>
<th align="center">指令</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">ls</td>
<td align="center">列出容器</td>
</tr>
<tr>
<td align="center">inspect</td>
<td align="center">查看一个或多个容器详细信息</td>
</tr>
<tr>
<td align="center">exec</td>
<td align="center">在运行容器中执行命令</td>
</tr>
<tr>
<td align="center">commit</td>
<td align="center">创建一个新镜像来自一个容器</td>
</tr>
<tr>
<td align="center">cp</td>
<td align="center">拷贝文件/文件夹到一个容器</td>
</tr>
<tr>
<td align="center">logs</td>
<td align="center">获取一个容器日志</td>
</tr>
<tr>
<td align="center">port</td>
<td align="center">列出或指定容器端口映射</td>
</tr>
<tr>
<td align="center">top</td>
<td align="center">显示一个容器运行的进程</td>
</tr>
<tr>
<td align="center">stats</td>
<td align="center">显示容器资源使用统计</td>
</tr>
<tr>
<td align="center">stop/start/restart</td>
<td align="center">停止/启动一个或多个容器</td>
</tr>
<tr>
<td align="center">rm</td>
<td align="center">删除一个或多个容器</td>
</tr>
<tr>
<td align="center">prune</td>
<td align="center">移除已停止的容器</td>
</tr>
</tbody></table>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看容器</span></span><br><span class="line">docker ps</span><br><span class="line">docker ps -a  // 查看所有的容器</span><br><span class="line">docker ps -q  // 查看所有的容器id</span><br><span class="line">docker ps -l  // 查看最新创建的容器</span><br><span class="line"></span><br><span class="line">docker top 容器名    // 查看容器中的进程</span><br><span class="line"></span><br><span class="line">docker stats 容器名  // 容器资源统计信息</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行基础镜像</span></span><br><span class="line">docker run -it centos</span><br><span class="line"><span class="comment"># 运行应用镜像</span></span><br><span class="line">docker run -d nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入容器</span></span><br><span class="line">docker <span class="keyword">exec</span> -it centos bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除容器</span></span><br><span class="line">docker rm centos</span><br><span class="line"><span class="comment"># 批量删除容器</span></span><br><span class="line">docker rm -f $(docker ps -aq)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拷贝文件</span></span><br><span class="line">docker cp nginx.tar 容器名:/opt</span><br><span class="line">docker cp 容器名:/opt/nginx ./</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 更新容器配置（部分可以修改）</span></span><br><span class="line">docker update --help</span><br></pre></td></tr></table></figure>



<h2 id="容器实现核心技术"><a href="#容器实现核心技术" class="headerlink" title="容器实现核心技术"></a>容器实现核心技术</h2><h3 id="命名空间（Namespace）"><a href="#命名空间（Namespace）" class="headerlink" title="命名空间（Namespace）"></a>命名空间（Namespace）</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">将特定的全局系统资源通过抽象方法使得Namespace中的进程看起来拥有自己隔离的资源</span><br><span class="line"></span><br><span class="line"><span class="comment"># 6种不同命名空间</span></span><br><span class="line">ll /proc/$$/ns</span><br><span class="line"><span class="number">1</span> IPC:：隔离进程间通信</span><br><span class="line"><span class="number">2</span> MOUNT：隔离文件系统挂载点</span><br><span class="line"><span class="number">3</span> NET：隔离网络协议栈</span><br><span class="line"><span class="number">4</span> PID：隔离进程号，进程命名空间是一个父子结构，子空间对父空间可见</span><br><span class="line"><span class="number">5</span> USER：隔离用户</span><br><span class="line"><span class="number">6</span> UTS：隔离主机名和域名</span><br></pre></td></tr></table></figure>

<h2 id="控制组（CGroups）"><a href="#控制组（CGroups）" class="headerlink" title="控制组（CGroups）"></a>控制组（CGroups）</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">如果某个容器属于CPU密集型任务，那么会影响其他容器使用CPU，导致多个容器相互影响并抢占资源</span><br><span class="line">CGroups：所有任务就是运行在系统中的一个进程，而CGroups以某种标准将一组进程为目标进行资源分配和控制，并且可以动态配置</span><br><span class="line"></span><br><span class="line"><span class="comment"># 主要功能</span></span><br><span class="line">-限制进程组使用的资源数量：可以为进程组设定资源使用上限，例如内存（***）</span><br><span class="line">-进程组优先控制：可以为进程组分配特定CPU,磁盘IO吞吐量</span><br><span class="line">-记录进程组使用的资源数量：例如使用记录某个进程组使用的CPU时间</span><br><span class="line">-可以将进程组挂起和恢复</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看cgroup可控制资源</span></span><br><span class="line">ls /sys/fs/cgroup/&lt;资源名&gt;/docker -l</span><br></pre></td></tr></table></figure>



<h3 id="工具镜像"><a href="#工具镜像" class="headerlink" title="工具镜像"></a>工具镜像</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">docker run -itd busy:<span class="number">1.28</span><span class="number">.4</span></span><br><span class="line">docker <span class="keyword">exec</span> -it 容器名 sh</span><br></pre></td></tr></table></figure>



<h2 id="容器数据持久化"><a href="#容器数据持久化" class="headerlink" title="容器数据持久化"></a>容器数据持久化</h2><p><img src="https://gitee.com/wjxyzs/img/raw/master/img/%E5%AE%B9%E5%99%A8%E6%8C%82%E8%BD%BD%E6%96%B9%E5%BC%8F.png" alt=""></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Docker提供两种方式将数据从宿主机挂载到容器中：</span><br><span class="line">• volumes：Docker管理宿主机文件系统的一部分（/var/lib/docker/volumes）。保存数据的最佳方式。</span><br><span class="line">• bind mounts：将宿主机上的任意位置的文件或者目录挂载到容器中。</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 工作目录</span></span><br><span class="line">/var/lib/docker/volumes</span><br><span class="line"></span><br><span class="line"><span class="comment">### volume </span></span><br><span class="line">docker volume --help</span><br><span class="line"></span><br><span class="line"><span class="comment"># 管理卷：</span></span><br><span class="line">docker volume create nginx-vol</span><br><span class="line">docker volume ls</span><br><span class="line">docker volume inspect nginx-vol</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用卷创建一个容器：</span></span><br><span class="line">docker run -d --name=nginx-test --mount src=nginx-vol,dst=/usr/share/nginx/html nginx</span><br><span class="line">docker run -d --name=nginx-test -v nginx-vol:/usr/share/nginx/html nginx</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 清理：</span></span><br><span class="line">docker stop nginx-test</span><br><span class="line">docker rm nginx-test </span><br><span class="line">docker volume rm nginx-vol</span><br><span class="line"></span><br><span class="line">注意：</span><br><span class="line"><span class="number">1.</span> 如果没有指定卷，自动创建。</span><br><span class="line"></span><br><span class="line"><span class="comment">### bind mount</span></span><br><span class="line"><span class="comment"># 用卷创建一个容器：</span></span><br><span class="line">docker run -d --name=nginx-test --mount type=bind,src=/app/wwwroot,dst=/usr/share/nginx/html nginx</span><br><span class="line">docker run -d --name=nginx-test -v /app/wwwroot:/usr/share/nginx/html nginx</span><br><span class="line"><span class="comment"># 验证绑定：</span></span><br><span class="line">docker inspect nginx-test</span><br><span class="line"><span class="comment"># 清理：</span></span><br><span class="line">docker stop nginx-test </span><br><span class="line">docker rm nginx-test </span><br><span class="line"></span><br><span class="line">注意：</span><br><span class="line"><span class="number">1.</span> 如果源文件/目录没有存在如果挂载目标在容器中非空目录，则该目录现有内容将被隐藏。</span><br></pre></td></tr></table></figure>



<h2 id="四种网络模式"><a href="#四种网络模式" class="headerlink" title="四种网络模式"></a>四种网络模式</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">-bridege：--net=bridge，Docker启动创建一个docker0网桥，默认创建的容器页是添加到这个网桥中。</span><br><span class="line">-host：--net=host，容器不会获得一个独立的network namespace，而是与宿主机公用一个。容器除了网络都是隔离的。</span><br><span class="line">-none：--net=none，获取独立的network namespace，但部位容器进行任何网络配置，需要手动配置。</span><br><span class="line"></span><br><span class="line"><span class="comment"># 应用场景</span></span><br><span class="line">host：希望使用宿主机网络</span><br><span class="line">none：手动配置容器网络，对接公司IPAM</span><br><span class="line">container：希望容器与另一个容器在一个网络命名空间</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建网桥</span></span><br><span class="line">docker network create test</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看网络</span></span><br><span class="line">docker network ls</span><br></pre></td></tr></table></figure>

<h3 id="网络模型"><a href="#网络模型" class="headerlink" title="网络模型"></a>网络模型</h3><p><img src="https://gitee.com/wjxyzs/img/raw/master/img/docker%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B.png" alt=""></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">veth pair：成对出现的一种虚拟网络设备，数据从一端进，从另一端出。用于解决网络命名空间之间隔离。</span><br><span class="line">docker：网桥是一个二层网络设备，通过网桥可以将Linux支持的不同端口连接起撸，并实现类似交换机那样的多对多的通信。</span><br></pre></td></tr></table></figure>

<h3 id="容器网络访问原理"><a href="#容器网络访问原理" class="headerlink" title="容器网络访问原理"></a>容器网络访问原理</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 实验</span></span><br><span class="line">docker run -d -p <span class="number">88</span>:<span class="number">80</span> ngxin</span><br><span class="line">docker logs 容器名 -f</span><br></pre></td></tr></table></figure>

<h3 id="容器网络实现核心技术（iptables）"><a href="#容器网络实现核心技术（iptables）" class="headerlink" title="容器网络实现核心技术（iptables）"></a>容器网络实现核心技术（iptables）</h3><table>
<thead>
<tr>
<th align="center">表</th>
<th align="center">链</th>
</tr>
</thead>
<tbody><tr>
<td align="center">filter（过滤）</td>
<td align="center">INPUT，OUTPUT，FORWORD</td>
</tr>
<tr>
<td align="center">nat（地址转发）</td>
<td align="center">PREROUTING，POSTROUTING，OUTPUT</td>
</tr>
<tr>
<td align="center">mangle（拆包，修改，封装）</td>
<td align="center">INPUT，OUTPUT，FORWARD，PREROUTING，POSTROUTING</td>
</tr>
<tr>
<td align="center">raw（数据包状态跟踪）</td>
<td align="center">PREROUTING，OUTPUT</td>
</tr>
</tbody></table>
<img src="https://gitee.com/wjxyzs/img/raw/master/img/iptables%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B.png" style="zoom:80%;" />

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">INPUT链：接收的数据包是本机（入站）时，应用此链中的规则</span><br><span class="line">OUTPUT链：本机向外发送数据包（出站）时，应用此链中的规则</span><br><span class="line">FORWARD链：需要通过防火墙中转发送给其他地址的数据包（转发）时，应用此链中的规则</span><br><span class="line">PREROUTING链：在对数据包做路由选择之前，应用此链中的规则（DNAT）</span><br><span class="line">POSTROUTING链：在对数据包做路由选择之后，应用此链中的规则（SNAT）</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 外部访问容器</span></span><br><span class="line"><span class="comment"># DNAT：目标地址转换，修改数据包目标IP</span></span><br><span class="line">iptables -t nat -vnL DOCKER</span><br><span class="line">Chain DOCKER (<span class="number">2</span> references)</span><br><span class="line">pkts bytes target prot opt <span class="keyword">in</span> out source destination </span><br><span class="line"><span class="number">0</span> <span class="number">0</span> RETURN all -- docker0 * <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">0</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">0</span> </span><br><span class="line"><span class="number">1</span> <span class="number">52</span> DNAT tcp -- !docker0 * <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">0</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">0</span> tcp dpt:<span class="number">8080</span> to:<span class="number">172.17</span><span class="number">.0</span><span class="number">.2</span>:<span class="number">80</span></span><br><span class="line">            </span><br><span class="line"><span class="comment"># 容器访问外部</span></span><br><span class="line"><span class="comment"># SNAT：修改源IP为宿主机IP向外发出</span></span><br><span class="line">iptables -t nat -vnL POSTROUTING</span><br><span class="line">Chain POSTROUTING (policy ACCEPT <span class="number">0</span> packets, <span class="number">0</span> bytes)</span><br><span class="line">pkts bytes target prot opt <span class="keyword">in</span> out source destination </span><br><span class="line"><span class="number">0</span> <span class="number">0</span> MASQUERADE all -- * !docker0 <span class="number">172.17</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">16</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">0</span></span><br></pre></td></tr></table></figure>

<h3 id="容器多主机通信"><a href="#容器多主机通信" class="headerlink" title="容器多主机通信"></a>容器多主机通信</h3><img src="https://gitee.com/wjxyzs/img/raw/master/img/docker%E5%A4%9A%E4%B8%BB%E6%9C%BA%E9%80%9A%E4%BF%A1.png" style="zoom:80%;" />

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Flannel是CoreOS维护的一个网络组件，在每个主机上运行守护进程负责维护本地路由准发，Flannel使用ETCD来存储容器网络与主机之前的关系。</span><br><span class="line"></span><br><span class="line"><span class="comment"># 遇到的问题</span></span><br><span class="line">两台主机容器进行通信，会走FORWORD链执行DROP</span><br><span class="line"><span class="comment"># 解决方案</span></span><br><span class="line">iptables -P FORWARD ACCEPT</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>CI/CD</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>[「直击面试」MySQL三万字精华总结]</title>
    <url>/2020/06/22/MySQL%E4%B8%89%E4%B8%87%E5%AD%97%E7%B2%BE%E5%8D%8E%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<p><img src="https://gitee.com/wjxyzs/img/raw/master/img/mysql%E6%94%BB%E7%95%A5.png" alt=""></p>
<blockquote>
<p>写在之前：不建议那种上来就是各种面试题罗列，然后背书式的去记忆，对技术的提升帮助很小，对正经面试也没什么帮助，有点东西的面试官深挖下就懵逼了。</p>
<p>个人建议把面试题看作是费曼学习法中的回顾、简化的环节，准备面试的时候，跟着题目先自己讲给自己听，看看自己会满意吗，不满意就继续学习这个点，如此反复，好的offer离你不远的，奥利给</p>
<p>……</p>
</blockquote>
<blockquote>
<p>成长手册，<strong>GitHub</strong> <a href="https://github.com/rogerXS80/roger" target="_blank" rel="noopener">Lupinus</a> ，N线互联网开发必备技能兵器谱</p>
</blockquote>
<p><img src="https://gitee.com/wjxyzs/img/raw/master/img/1734bff308f75df1.jpg" alt=""></p>
<h2 id="一、MySQL架构"><a href="#一、MySQL架构" class="headerlink" title="一、MySQL架构"></a>一、MySQL架构</h2><p>和其它数据库相比，MySQL有点与众不同，它的架构可以在多种不同场景中应用并发挥良好作用。主要体现在存储引擎的架构上，<strong>插件式的存储引擎架构将查询处理和其它的系统任务以及数据的存储提取相分离</strong>。这种架构可以根据业务的需求和实际需要选择合适的存储引擎。</p>
<p><img src="https://gitee.com/wjxyzs/img/raw/master/img/1734bff308eb9e2d.jpg" alt=""></p>
<ul>
<li><strong>连接层</strong>：最上层是一些客户端和连接服务。<strong>主要完成一些类似于连接处理、授权认证、及相关的安全方案</strong>。在该层上引入了线程池的概念，为通过认证安全接入的客户端提供线程。同样在该层上可以实现基于SSL的安全链接。服务器也会为安全接入的每个客户端验证它所具有的操作权限。</li>
<li><strong>服务层</strong>：第二层服务层，主要完成大部分的核心服务功能， 包括查询解析、分析、优化、缓存、以及所有的内置函数，所有跨存储引擎的功能也都在这一层实现，包括触发器、存储过程、视图等</li>
<li><strong>引擎层</strong>：第三层存储引擎层，存储引擎真正的负责了MySQL中数据的存储和提取，服务器通过API与存储引擎进行通信。不同的存储引擎具有的功能不同，这样我们可以根据自己的实际需要进行选取</li>
<li><strong>存储层</strong>：第四层为数据存储层，主要是将数据存储在运行于该设备的文件系统之上，并完成与存储引擎的交互</li>
</ul>
<blockquote>
<p>画出 MySQL 架构图，这种变态问题都能问的出来MySQL 的查询流程具体是？or  一条SQL语句在MySQL中如何执行的？</p>
</blockquote>
<p>客户端请求 —&gt; 连接器（验证用户身份，给予权限） —&gt; 查询缓存（存在缓存则直接返回，不存在则执行后续操作） —&gt; 分析器（对SQL进行词法分析和语法分析操作） —&gt; 优化器（主要对执行的sql优化选择最优的执行方案方法） —&gt; 执行器（执行时会先看用户是否有执行权限，有才去使用这个引擎提供的接口） —&gt; 去引擎层获取数据返回（如果开启查询缓存则会缓存查询结果）</p>
<p><img src="https://gitee.com/wjxyzs/img/raw/master/img/1734bff309fc730f.jpg" alt=""></p>
<hr>
<blockquote>
<p>说说MySQL有哪些存储引擎？都有哪些区别？</p>
</blockquote>
<h2 id="二、存储引擎"><a href="#二、存储引擎" class="headerlink" title="二、存储引擎"></a>二、存储引擎</h2><p>存储引擎是MySQL的组件，用于处理不同表类型的SQL操作。不同的存储引擎提供不同的存储机制、索引技巧、锁定水平等功能，使用不同的存储引擎，还可以获得特定的功能。</p>
<p>使用哪一种引擎可以灵活选择，<strong>一个数据库中多个表可以使用不同引擎以满足各种性能和实际需求</strong>，使用合适的存储引擎，将会提高整个数据库的性能 。</p>
<p>MySQL服务器使用<strong>可插拔</strong>的存储引擎体系结构，可以从运行中的 MySQL 服务器加载或卸载存储引擎 。</p>
<h3 id="查看存储引擎"><a href="#查看存储引擎" class="headerlink" title="查看存储引擎"></a>查看存储引擎</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查看支持的存储引擎</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">ENGINES</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看默认存储引擎</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">VARIABLES</span> <span class="keyword">LIKE</span> <span class="string">'storage_engine'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--查看具体某一个表所使用的存储引擎，这个默认存储引擎被修改了！</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> tablename</span><br><span class="line"></span><br><span class="line"><span class="comment">--准确查看某个数据库中的某一表所使用的存储引擎</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">table</span> <span class="keyword">status</span> <span class="keyword">like</span> <span class="string">'tablename'</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">table</span> <span class="keyword">status</span> <span class="keyword">from</span> <span class="keyword">database</span> <span class="keyword">where</span> <span class="keyword">name</span>=<span class="string">"tablename"</span></span><br></pre></td></tr></table></figure>

<h3 id="设置存储引擎"><a href="#设置存储引擎" class="headerlink" title="设置存储引擎"></a>设置存储引擎</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 建表时指定存储引擎。默认的就是INNODB，不需要设置</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t1 (i <span class="built_in">INT</span>) <span class="keyword">ENGINE</span> = <span class="keyword">INNODB</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t2 (i <span class="built_in">INT</span>) <span class="keyword">ENGINE</span> = CSV;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t3 (i <span class="built_in">INT</span>) <span class="keyword">ENGINE</span> = <span class="keyword">MEMORY</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 修改存储引擎</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> t <span class="keyword">ENGINE</span> = <span class="keyword">InnoDB</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 修改默认存储引擎，也可以在配置文件my.cnf中修改默认引擎</span></span><br><span class="line"><span class="keyword">SET</span> default_storage_engine=NDBCLUSTER;</span><br></pre></td></tr></table></figure>

<p>默认情况下，每当 <code>CREATE TABLE</code> 或 <code>ALTER TABLE</code> 不能使用默认存储引擎时，都会生成一个警告。为了防止在所需的引擎不可用时出现令人困惑的意外行为，可以启用 <code>NO_ENGINE_SUBSTITUTION SQL</code> 模式。如果所需的引擎不可用，则此设置将产生错误而不是警告，并且不会创建或更改表</p>
<h3 id="存储引擎对比"><a href="#存储引擎对比" class="headerlink" title="存储引擎对比"></a>存储引擎对比</h3><p>常见的存储引擎就 InnoDB、MyISAM、Memory、NDB。</p>
<p>InnoDB 现在是 MySQL 默认的存储引擎，支持<strong>事务、行级锁定和外键</strong></p>
<h3 id="文件存储结构对比"><a href="#文件存储结构对比" class="headerlink" title="文件存储结构对比"></a>文件存储结构对比</h3><p>在 MySQL中建立任何一张数据表，在其数据目录对应的数据库目录下都有对应表的 <code>.frm</code> 文件，<code>.frm</code> 文件是用来保存每个数据表的元数据(meta)信息，包括表结构的定义等，与数据库存储引擎无关，也就是任何存储引擎的数据表都必须有<code>.frm</code>文件，命名方式为 数据表名.frm，如user.frm。</p>
<p>查看MySQL 数据保存在哪里：<code>show variables like &#39;data%&#39;</code></p>
<p>MyISAM 物理文件结构为：</p>
<ul>
<li><code>.frm</code>文件：与表相关的元数据信息都存放在frm文件，包括表结构的定义信息等</li>
<li><code>.MYD</code> (<code>MYData</code>) 文件：MyISAM 存储引擎专用，用于存储MyISAM 表的数据</li>
<li><code>.MYI</code> (<code>MYIndex</code>)文件：MyISAM 存储引擎专用，用于存储MyISAM 表的索引相关信息</li>
</ul>
<p>InnoDB 物理文件结构为：</p>
<ul>
<li><p><code>.frm</code> 文件：与表相关的元数据信息都存放在frm文件，包括表结构的定义信息等</p>
</li>
<li><p><code>.ibd</code> 文件或 <code>.ibdata</code> 文件： 这两种文件都是存放 InnoDB 数据的文件，之所以有两种文件形式存放 InnoDB 的数据，是因为 InnoDB 的数据存储方式能够通过配置来决定是使用<strong>共享表空间</strong>存放存储数据，还是用<strong>独享表空间</strong>存放存储数据。</p>
<p>独享表空间存储方式使用<code>.ibd</code>文件，并且每个表一个<code>.ibd</code>文件 共享表空间存储方式使用<code>.ibdata</code>文件，所有表共同使用一个<code>.ibdata</code>文件（或多个，可自己配置）</p>
</li>
</ul>
<h3 id="面试这么回答"><a href="#面试这么回答" class="headerlink" title="面试这么回答"></a>面试这么回答</h3><ol>
<li>InnoDB 支持事务，MyISAM 不支持事务。这是 MySQL 将默认存储引擎从 MyISAM 变成 InnoDB 的重要原因之一；</li>
<li>InnoDB 支持外键，而 MyISAM 不支持。对一个包含外键的 InnoDB 表转为 MYISAM 会失败；</li>
<li>InnoDB 是聚簇索引，MyISAM 是非聚簇索引。聚簇索引的文件存放在主键索引的叶子节点上，因此 InnoDB 必须要有主键，通过主键索引效率很高。但是辅助索引需要两次查询，先查询到主键，然后再通过主键查询到数据。因此，主键不应该过大，因为主键太大，其他索引也都会很大。而 MyISAM 是非聚集索引，数据文件是分离的，索引保存的是数据文件的指针。主键索引和辅助索引是独立的。</li>
<li>InnoDB 不保存表的具体行数，执行<code>select count(*) from table</code> 时需要全表扫描。而 MyISAM 用一个变量保存了整个表的行数，执行上述语句时只需要读出该变量即可，速度很快；</li>
<li>InnoDB 最小的锁粒度是行锁，MyISAM 最小的锁粒度是表锁。一个更新语句会锁住整张表，导致其他查询和更新都会被阻塞，因此并发访问受限。这也是 MySQL 将默认存储引擎从 MyISAM 变成 InnoDB 的重要原因之一；</li>
</ol>
<table>
<thead>
<tr>
<th align="center">对比项</th>
<th align="center">MyISAM</th>
<th align="center">InnoDB</th>
</tr>
</thead>
<tbody><tr>
<td align="center">主外键</td>
<td align="center">不支持</td>
<td align="center">支持</td>
</tr>
<tr>
<td align="center">单元格</td>
<td align="center">单元格</td>
<td align="center">单元格</td>
</tr>
<tr>
<td align="center">事务</td>
<td align="center">不支持</td>
<td align="center">支持</td>
</tr>
<tr>
<td align="center">行表锁</td>
<td align="center">表锁，即使操作一条记录也会锁住整个表，不适合高并发的操作</td>
<td align="center">行锁,操作时只锁某一行，不对其它行有影响，适合高并发的操作</td>
</tr>
<tr>
<td align="center">缓存</td>
<td align="center">只缓存索引，不缓存真实数据</td>
<td align="center">不仅缓存索引还要缓存真实数据，对内存要求较高，而且内存大小对性能有决定性的影响</td>
</tr>
<tr>
<td align="center">表空间</td>
<td align="center">小</td>
<td align="center">大</td>
</tr>
<tr>
<td align="center">关注点</td>
<td align="center">性能</td>
<td align="center">事务</td>
</tr>
<tr>
<td align="center">默认安装</td>
<td align="center">是</td>
<td align="center">是</td>
</tr>
</tbody></table>
<blockquote>
<p>一张表，里面有ID自增主键，当insert了17条记录之后，删除了第15,16,17条记录，再把Mysql重启，再insert一条记录，这条记录的ID是18还是15 ？</p>
</blockquote>
<p>如果表的类型是MyISAM，那么是18。因为MyISAM表会把自增主键的最大ID 记录到数据文件中，重启MySQL自增主键的最大ID也不会丢失；</p>
<p>如果表的类型是InnoDB，那么是15。因为InnoDB 表只是把自增主键的最大ID记录到内存中，所以重启数据库或对表进行OPTION操作，都会导致最大ID丢失。</p>
<blockquote>
<p>哪个存储引擎执行 select count(*) 更快，为什么?</p>
</blockquote>
<p>MyISAM更快，因为MyISAM内部维护了一个计数器，可以直接调取。</p>
<ul>
<li>在 MyISAM 存储引擎中，把表的总行数存储在磁盘上，当执行 select count(*) from t 时，直接返回总数据。</li>
<li>在 InnoDB 存储引擎中，跟 MyISAM 不一样，没有将总行数存储在磁盘上，当执行 select count(*) from t 时，会先把数据读出来，一行一行的累加，最后返回总数量。</li>
</ul>
<p>InnoDB 中 count(*) 语句是在执行的时候，全表扫描统计总数量，所以当数据越来越大时，语句就越来越耗时了，为什么 InnoDB 引擎不像 MyISAM 引擎一样，将总行数存储到磁盘上？这跟 InnoDB 的事务特性有关，由于多版本并发控制（MVCC）的原因，InnoDB 表“应该返回多少行”也是不确定的。</p>
<h2 id="三、数据类型"><a href="#三、数据类型" class="headerlink" title="三、数据类型"></a>三、数据类型</h2><p>主要包括以下五大类：</p>
<ul>
<li>整数类型：BIT、BOOL、TINY INT、SMALL INT、MEDIUM INT、 INT、 BIG INT</li>
<li>浮点数类型：FLOAT、DOUBLE、DECIMAL</li>
<li>字符串类型：CHAR、VARCHAR、TINY TEXT、TEXT、MEDIUM TEXT、LONGTEXT、TINY BLOB、BLOB、MEDIUM BLOB、LONG BLOB</li>
<li>日期类型：Date、DateTime、TimeStamp、Time、Year</li>
<li>其他数据类型：BINARY、VARBINARY、ENUM、SET、Geometry、Point、MultiPoint、LineString、MultiLineString、Polygon、GeometryCollection等</li>
</ul>
<p><img src="https://gitee.com/wjxyzs/img/raw/master/img/1734bff30a28cf0d.jpg" alt=""></p>
<p><img src="https://gitee.com/wjxyzs/img/raw/master/img/1734bff309f9eea0.jpg" alt=""></p>
<p><img src="https://gitee.com/wjxyzs/img/raw/master/img/1734bff30a5e00fe.jpg" alt=""></p>
<blockquote>
<p>CHAR 和 VARCHAR 的区别？</p>
</blockquote>
<p>char是固定长度，varchar长度可变：</p>
<p>char(n) 和 varchar(n) 中括号中 n 代表字符的个数，并不代表字节个数，比如 CHAR(30) 就可以存储 30 个字符。</p>
<p>存储时，前者不管实际存储数据的长度，直接按 char 规定的长度分配存储空间；而后者会根据实际存储的数据分配最终的存储空间</p>
<p>相同点：</p>
<ol>
<li>char(n)，varchar(n)中的n都代表字符的个数</li>
<li>超过char，varchar最大长度n的限制后，字符串会被截断。</li>
</ol>
<p>不同点：</p>
<ol>
<li>char不论实际存储的字符数都会占用n个字符的空间，而varchar只会占用实际字符应该占用的字节空间加1（实际长度length，0&lt;=length&lt;255）或加2（length&gt;255）。因为varchar保存数据时除了要保存字符串之外还会加一个字节来记录长度（如果列声明长度大于255则使用两个字节来保存长度）。</li>
<li>能存储的最大空间限制不一样：char的存储上限为255字节。</li>
<li>char在存储时会截断尾部的空格，而varchar不会。</li>
</ol>
<p>char是适合存储很短的、一般固定长度的字符串。例如，char非常适合存储密码的MD5值，因为这是一个定长的值。对于非常短的列，char比varchar在存储空间上也更有效率。</p>
<blockquote>
<p>列的字符串类型可以是什么？</p>
</blockquote>
<p>字符串类型是：SET、BLOB、ENUM、CHAR、TEXT、VARCHAR</p>
<blockquote>
<p>BLOB和TEXT有什么区别？</p>
</blockquote>
<p>BLOB是一个二进制对象，可以容纳可变数量的数据。有四种类型的BLOB：TINYBLOB、BLOB、MEDIUMBLO和 LONGBLOB</p>
<p>TEXT是一个不区分大小写的BLOB。四种TEXT类型：TINYTEXT、TEXT、MEDIUMTEXT 和 LONGTEXT。</p>
<p>BLOB 保存二进制数据，TEXT 保存字符数据。</p>
<hr>
<h2 id="四、索引"><a href="#四、索引" class="headerlink" title="四、索引"></a>四、索引</h2><blockquote>
<p>说说你对 MySQL 索引的理解？数据库索引的原理，为什么要用 B+树，为什么不用二叉树？聚集索引与非聚集索引的区别？InnoDB引擎中的索引策略，了解过吗？创建索引的方式有哪些？聚簇索引/非聚簇索引，mysql索引底层实现，为什么不用B-tree，为什么不用hash，叶子结点存放的是数据还是指向数据的内存地址，使用索引需要注意的几个地方？</p>
</blockquote>
<ul>
<li><p>MYSQL官方对索引的定义为：索引（Index）是帮助MySQL高效获取数据的数据结构，所以说<strong>索引的本质是：数据结构</strong></p>
</li>
<li><p>索引的目的在于提高查询效率，可以类比字典、 火车站的车次表、图书的目录等 。</p>
</li>
<li><p>可以简单的理解为“排好序的快速查找数据结构”，数据本身之外，<font color=red size=3><strong>数据库还维护者一个满足特定查找算法的数据结构</strong></font>，这些数据结构以某种方式引用（指向）数据，这样就可以在这些数据结构上实现高级查找算法。这种数据结构，就是索引。下图是一种可能的索引方式示例。</p>
<p><img src="https://gitee.com/wjxyzs/img/raw/master/img/1734bff356f9f2f0.jpg" alt=""></p>
<p>左边的数据表，一共有两列七条记录，最左边的是数据记录的物理地址</p>
<p>为了加快Col2的查找，可以维护一个右边所示的二叉查找树，每个节点分别包含索引键值，和一个指向对应数据记录物理地址的指针，这样就可以运用二叉查找在一定的复杂度内获取到对应的数据，从而快速检索出符合条件的记录。</p>
</li>
<li><p>索引本身也很大，不可能全部存储在内存中，<strong>一般以索引文件的形式存储在磁盘上</strong></p>
</li>
<li><p>平常说的索引，没有特别指明的话，就是B+树（多路搜索树，不一定是二叉树）结构组织的索引。其中聚集索引，次要索引，覆盖索引，复合索引，前缀索引，唯一索引默认都是使用B+树索引，统称索引。此外还有哈希索引等。</p>
</li>
</ul>
<h3 id="基本语法："><a href="#基本语法：" class="headerlink" title="基本语法："></a>基本语法：</h3><ul>
<li><p>创建：</p>
<ul>
<li><p>创建索引：<font color=red size=3><code>CREATE [UNIQUE] INDEX indexName ON mytable(username(length));</code></font></p>
<p>如果是CHAR，VARCHAR类型，length可以小于字段实际长度；如果是BLOB和TEXT类型，必须指定 length。</p>
</li>
<li><p>修改表结构(添加索引)：<font color=red size=3><code>ALTER table tableName ADD [UNIQUE] INDEX indexName(columnName)</code></font></p>
</li>
</ul>
</li>
<li><p>删除：<font color=red size=3><code>DROP INDEX [indexName] ON mytable;</code></font></p>
</li>
<li><p>查看：<font color=red size=3><code>SHOW INDEX FROM table_name\\G</code></font> –可以通过添加 \G 来格式化输出信息。</p>
</li>
<li><p>使用ALERT命令</p>
<ul>
<li><font color=red size=3><code>ALTER TABLE tbl_name ADD PRIMARY KEY (column_list):</code></font> 该语句添加一个主键，这意味着索引值必须是唯一的，且不能为NULL。</li>
<li><font color=red size=3><code>ALTER TABLE tbl_name ADD UNIQUE index_name (column_list</code></font> 这条语句创建索引的值必须是唯一的（除了NULL外，NULL可能会出现多次）。</li>
<li><font color=red size=3><code>ALTER TABLE tbl_name ADD INDEX index_name (column_list)</code></font> 添加普通索引，索引值可出现多次。</li>
<li><font color=red size=3><code>ALTER TABLE tbl_name ADD FULLTEXT index_name (column_list)</code></font>该语句指定了索引为 FULLTEXT ，用于全文索引。</li>
</ul>
</li>
</ul>
<h3 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h3><ul>
<li><strong>提高数据检索效率，降低数据库IO成本</strong></li>
<li><strong>降低数据排序的成本，降低CPU的消耗</strong></li>
</ul>
<h3 id="劣势"><a href="#劣势" class="headerlink" title="劣势"></a>劣势</h3><ul>
<li>索引也是一张表，保存了主键和索引字段，并指向实体表的记录，所以也需要占用内存</li>
<li>虽然索引大大提高了查询速度，同时却会降低更新表的速度，如对表进行INSERT、UPDATE和DELETE。 因为更新表时，MySQL不仅要保存数据，还要保存一下索引文件每次更新添加了索引列的字段， 都会调整因为更新所带来的键值变化后的索引信息</li>
</ul>
<h3 id="MySQL索引分类"><a href="#MySQL索引分类" class="headerlink" title="MySQL索引分类"></a>MySQL索引分类</h3><h3 id="数据结构角度"><a href="#数据结构角度" class="headerlink" title="数据结构角度"></a>数据结构角度</h3><ul>
<li>B+树索引</li>
<li>Hash索引</li>
<li>Full-Text全文索引</li>
<li>R-Tree索引</li>
</ul>
<h3 id="从物理存储角度"><a href="#从物理存储角度" class="headerlink" title="从物理存储角度"></a>从物理存储角度</h3><ul>
<li><p>聚集索引（clustered index）</p>
</li>
<li><p>非聚集索引（non-clustered index），也叫辅助索引（secondary index）</p>
<p>聚集索引和非聚集索引都是B+树结构</p>
</li>
</ul>
<h3 id="从逻辑角度"><a href="#从逻辑角度" class="headerlink" title="从逻辑角度"></a>从逻辑角度</h3><ul>
<li>主键索引：主键索引是一种特殊的唯一索引，不允许有空值</li>
<li>普通索引或者单列索引：每个索引只包含单个列，一个表可以有多个单列索引</li>
<li>多列索引（复合索引、联合索引）：复合索引指多个字段上创建的索引，只有在查询条件中使用了创建索引时的第一个字段，索引才会被使用。使用复合索引时遵循最左前缀集合</li>
<li>唯一索引或者非唯一索引</li>
<li>空间索引：空间索引是对空间数据类型的字段建立的索引，MYSQL中的空间数据类型有4种，分别是GEOMETRY、POINT、LINESTRING、POLYGON。 MYSQL使用SPATIAL关键字进行扩展，使得能够用于创建正规索引类型的语法创建空间索引。创建空间索引的列，必须将其声明为NOT NULL，空间索引只能在存储引擎为MYISAM的表中创建</li>
</ul>
<blockquote>
<p>为什么MySQL 索引中用B+tree，不用B-tree 或者其他树，为什么不用 Hash 索引聚簇索引/非聚簇索引，MySQL 索引底层实现，叶子结点存放的是数据还是指向数据的内存地址，使用索引需要注意的几个地方？使用索引查询一定能提高查询的性能吗？为什么?</p>
</blockquote>
<h3 id="MySQL索引结构"><a href="#MySQL索引结构" class="headerlink" title="MySQL索引结构"></a>MySQL索引结构</h3><p><strong>首先要明白索引（index）是在存储引擎（storage engine）层面实现的，而不是server层面</strong>。不是所有的存储引擎都支持所有的索引类型。即使多个存储引擎支持某一索引类型，它们的实现和行为也可能有所差别。</p>
<h3 id="B-Tree索引"><a href="#B-Tree索引" class="headerlink" title="B+Tree索引"></a>B+Tree索引</h3><p>MyISAM 和 InnoDB 存储引擎，都使用 B+Tree的数据结构，它相对与 B-Tree结构，所有的数据都存放在叶子节点上，且把叶子节点通过指针连接到一起，形成了一条数据链表，以加快相邻数据的检索效率。</p>
<p><strong>先了解下 B-Tree 和 B+Tree 的区别</strong></p>
<h3 id="B-Tree"><a href="#B-Tree" class="headerlink" title="B-Tree"></a>B-Tree</h3><p>B-Tree是为磁盘等外存储设备设计的一种平衡查找树。</p>
<p>系统从磁盘读取数据到内存时是以磁盘块（block）为基本单位的，位于同一个磁盘块中的数据会被一次性读取出来，而不是需要什么取什么。</p>
<p>InnoDB 存储引擎中有页（Page）的概念，页是其磁盘管理的最小单位。InnoDB 存储引擎中默认每个页的大小为16KB，可通过参数 <code>innodb_page_size</code> 将页的大小设置为 4K、8K、16K，在 MySQL 中可通过如下命令查看页的大小：<code>show variables like &#39;innodb_page_size&#39;;</code></p>
<p>而系统一个磁盘块的存储空间往往没有这么大，因此 InnoDB 每次申请磁盘空间时都会是若干地址连续磁盘块来达到页的大小 16KB。InnoDB 在把磁盘数据读入到磁盘时会以页为基本单位，在查询数据时如果一个页中的每条数据都能有助于定位数据记录的位置，这将会减少磁盘I/O次数，提高查询效率。</p>
<p>B-Tree 结构的数据可以让系统高效的找到数据所在的磁盘块。为了描述 B-Tree，首先定义一条记录为一个二元组[key, data] ，key为记录的键值，对应表中的主键值，data 为一行记录中除主键外的数据。对于不同的记录，key值互不相同。</p>
<p>一棵m阶的B-Tree有如下特性：</p>
<ol>
<li>每个节点最多有m个孩子</li>
<li>除了根节点和叶子节点外，其它每个节点至少有Ceil(m/2)个孩子。</li>
<li>若根节点不是叶子节点，则至少有2个孩子</li>
<li>所有叶子节点都在同一层，且不包含其它关键字信息</li>
<li>每个非终端节点包含n个关键字信息（P0,P1,…Pn, k1,…kn）</li>
<li>关键字的个数n满足：ceil(m/2)-1 &lt;= n &lt;= m-1</li>
<li>ki(i=1,…n)为关键字，且关键字升序排序</li>
<li>Pi(i=1,…n)为指向子树根节点的指针。P(i-1)指向的子树的所有节点关键字均小于ki，但都大于k(i-1)</li>
</ol>
<p>B-Tree 中的每个节点根据实际情况可以包含大量的关键字信息和分支，如下图所示为一个 3 阶的 B-Tree：</p>
<p><img src="https://gitee.com/wjxyzs/img/raw/master/img/1734bff356b40f0d.jpg" alt=""></p>
<p>每个节点占用一个盘块的磁盘空间，一个节点上有两个升序排序的关键字和三个指向子树根节点的指针，指针存储的是子节点所在磁盘块的地址。两个关键词划分成的三个范围域对应三个指针指向的子树的数据的范围域。以根节点为例，关键字为17和35，P1指针指向的子树的数据范围为小于17，P2指针指向的子树的数据范围为17~35，P3指针指向的子树的数据范围为大于35。</p>
<p>模拟查找关键字29的过程：</p>
<ol>
<li>根据根节点找到磁盘块1，读入内存。【磁盘I/O操作第1次】</li>
<li>比较关键字29在区间（17,35），找到磁盘块1的指针P2。</li>
<li>根据P2指针找到磁盘块3，读入内存。【磁盘I/O操作第2次】</li>
<li>比较关键字29在区间（26,30），找到磁盘块3的指针P2。</li>
<li>根据P2指针找到磁盘块8，读入内存。【磁盘I/O操作第3次】</li>
<li>在磁盘块8中的关键字列表中找到关键字29。</li>
</ol>
<p>分析上面过程，发现需要3次磁盘I/O操作，和3次内存查找操作。由于内存中的关键字是一个有序表结构，可以利用二分法查找提高效率。而3次磁盘I/O操作是影响整个B-Tree查找效率的决定因素。B-Tree相对于AVLTree缩减了节点个数，使每次磁盘I/O取到内存的数据都发挥了作用，从而提高了查询效率。</p>
<h3 id="B-Tree-1"><a href="#B-Tree-1" class="headerlink" title="B+Tree"></a>B+Tree</h3><p>B+Tree 是在 B-Tree 基础上的一种优化，使其更适合实现外存储索引结构，InnoDB 存储引擎就是用 B+Tree 实现其索引结构。</p>
<p>从上一节中的B-Tree结构图中可以看到每个节点中不仅包含数据的key值，还有data值。而每一个页的存储空间是有限的，如果data数据较大时将会导致每个节点（即一个页）能存储的key的数量很小，当存储的数据量很大时同样会导致B-Tree的深度较大，增大查询时的磁盘I/O次数，进而影响查询效率。在B+Tree中，<strong>所有数据记录节点都是按照键值大小顺序存放在同一层的叶子节点上</strong>，而非叶子节点上只存储key值信息，这样可以大大加大每个节点存储的key值数量，降低B+Tree的高度。</p>
<p>B+Tree相对于B-Tree有几点不同：</p>
<ol>
<li>非叶子节点只存储键值信息；</li>
<li>所有叶子节点之间都有一个链指针；</li>
<li>数据记录都存放在叶子节点中</li>
</ol>
<p>将上一节中的B-Tree优化，由于B+Tree的非叶子节点只存储键值信息，假设每个磁盘块能存储4个键值及指针信息，则变成B+Tree后其结构如下图所示：</p>
<p><img src="https://gitee.com/wjxyzs/img/raw/master/img/1734bff3498c6715.jpg" alt=""></p>
<p>通常在B+Tree上有两个头指针，一个指向根节点，另一个指向关键字最小的叶子节点，而且所有叶子节点（即数据节点）之间是一种链式环结构。因此可以对B+Tree进行两种查找运算：一种是对于主键的范围查找和分页查找，另一种是从根节点开始，进行随机查找。</p>
<p>可能上面例子中只有22条数据记录，看不出B+Tree的优点，下面做一个推算：</p>
<p>InnoDB存储引擎中页的大小为16KB，一般表的主键类型为INT（占用4个字节）或BIGINT（占用8个字节），指针类型也一般为4或8个字节，也就是说一个页（B+Tree中的一个节点）中大概存储16KB/(8B+8B)=1K个键值（因为是估值，为方便计算，这里的K取值为10^3）。也就是说一个深度为3的B+Tree索引可以维护10^3 * 10^3 * 10^3 = 10亿 条记录。</p>
<p>实际情况中每个节点可能不能填充满，因此在数据库中，B+Tree的高度一般都在2-4层。MySQL的InnoDB存储引擎在设计时是将根节点常驻内存的，也就是说查找某一键值的行记录时最多只需要1~3次磁盘I/O操作。</p>
<p>B+Tree性质</p>
<ol>
<li>通过上面的分析，我们知道IO次数取决于b+数的高度h，假设当前数据表的数据为N，每个磁盘块的数据项的数量是m，则有h=㏒(m+1)N，当数据量N一定的情况下，m越大，h越小；而m = 磁盘块的大小 / 数据项的大小，磁盘块的大小也就是一个数据页的大小，是固定的，如果数据项占的空间越小，数据项的数量越多，树的高度越低。这就是为什么每个数据项，即索引字段要尽量的小，比如int占4字节，要比bigint8字节少一半。这也是为什么b+树要求把真实的数据放到叶子节点而不是内层节点，一旦放到内层节点，磁盘块的数据项会大幅度下降，导致树增高。当数据项等于1时将会退化成线性表。</li>
<li>当b+树的数据项是复合的数据结构，比如(name,age,sex)的时候，b+数是按照从左到右的顺序来建立搜索树的，比如当(张三,20,F)这样的数据来检索的时候，b+树会优先比较name来确定下一步的所搜方向，如果name相同再依次比较age和sex，最后得到检索的数据；但当(20,F)这样的没有name的数据来的时候，b+树就不知道下一步该查哪个节点，因为建立搜索树的时候name就是第一个比较因子，必须要先根据name来搜索才能知道下一步去哪里查询。比如当(张三,F)这样的数据来检索时，b+树可以用name来指定搜索方向，但下一个字段age的缺失，所以只能把名字等于张三的数据都找到，然后再匹配性别是F的数据了， 这个是非常重要的性质，即<strong>索引的最左匹配特性</strong>。</li>
</ol>
<h3 id="MyISAM主键索引与辅助索引的结构"><a href="#MyISAM主键索引与辅助索引的结构" class="headerlink" title="MyISAM主键索引与辅助索引的结构"></a>MyISAM主键索引与辅助索引的结构</h3><p>MyISAM引擎的索引文件和数据文件是分离的。<strong>MyISAM引擎索引结构的叶子节点的数据域，存放的并不是实际的数据记录，而是数据记录的地址</strong>。索引文件与数据文件分离，这样的索引称为”<strong>非聚簇索引</strong>“。MyISAM的主索引与辅助索引区别并不大，只是主键索引不能有重复的关键字。</p>
<p><img src="https://gitee.com/wjxyzs/img/raw/master/img/1734bff35bbbf112.jpg" alt=""></p>
<p>在MyISAM中，索引（含叶子节点）存放在单独的.myi文件中，叶子节点存放的是数据的物理地址偏移量（通过偏移量访问就是随机访问，速度很快）。</p>
<p>主索引是指主键索引，键值不可能重复；辅助索引则是普通索引，键值可能重复。</p>
<p>通过索引查找数据的流程：先从索引文件中查找到索引节点，从中拿到数据的文件指针，再到数据文件中通过文件指针定位了具体的数据。辅助索引类似。</p>
<h3 id="InnoDB主键索引与辅助索引的结构"><a href="#InnoDB主键索引与辅助索引的结构" class="headerlink" title="InnoDB主键索引与辅助索引的结构"></a>InnoDB主键索引与辅助索引的结构</h3><p><strong>InnoDB引擎索引结构的叶子节点的数据域，存放的就是实际的数据记录</strong>（对于主索引，此处会存放表中所有的数据记录；对于辅助索引此处会引用主键，检索的时候通过主键到主键索引中找到对应数据行），或者说，<strong>InnoDB的数据文件本身就是主键索引文件</strong>，这样的索引被称为”“聚簇索引”，一个表只能有一个聚簇索引。</p>
<h3 id="主键索引："><a href="#主键索引：" class="headerlink" title="主键索引："></a>主键索引：</h3><p>我们知道InnoDB索引是聚集索引，它的索引和数据是存入同一个.idb文件中的，因此它的索引结构是在同一个树节点中同时存放索引和数据，如下图中最底层的叶子节点有三行数据，对应于数据表中的id、stu_id、name数据项。</p>
<p><img src="https://gitee.com/wjxyzs/img/raw/master/img/1734bff337681c17.jpg" alt=""></p>
<p>在Innodb中，索引分叶子节点和非叶子节点，非叶子节点就像新华字典的目录，单独存放在索引段中，叶子节点则是顺序排列的，在数据段中。Innodb的数据文件可以按照表来切分（只需要开启<font color=red size=3><code>innodb_file_per_table)</code></font>，切分后存放在<font color=red size=3><code>xxx.ibd</code></font>中，默认不切分，存放在<font color=red size=3><code>xxx.ibdata</code></font>中。</p>
<h3 id="辅助（非主键）索引："><a href="#辅助（非主键）索引：" class="headerlink" title="辅助（非主键）索引："></a>辅助（非主键）索引：</h3><p>这次我们以示例中学生表中的name列建立辅助索引，它的索引结构跟主键索引的结构有很大差别，在最底层的叶子结点有两行数据，第一行的字符串是辅助索引，按照ASCII码进行排序，第二行的整数是主键的值。</p>
<p>这就意味着，对name列进行条件搜索，需要两个步骤：</p>
<p>① 在辅助索引上检索name，到达其叶子节点获取对应的主键；</p>
<p>② 使用主键在主索引上再进行对应的检索操作</p>
<p>这也就是所谓的“<strong>回表查询</strong>”</p>
<p><img src="https://gitee.com/wjxyzs/img/raw/master/img/1734bff365f39d10.jpg" alt=""></p>
<p><strong>InnoDB 索引结构需要注意的点</strong></p>
<ol>
<li>数据文件本身就是索引文件</li>
<li>表数据文件本身就是按 B+Tree 组织的一个索引结构文件</li>
<li>聚集索引中叶节点包含了完整的数据记录</li>
<li>InnoDB 表必须要有主键，并且推荐使用整型自增主键</li>
</ol>
<p>正如我们上面介绍 InnoDB 存储结构，索引与数据是共同存储的，不管是主键索引还是辅助索引，在查找时都是通过先查找到索引节点才能拿到相对应的数据，如果我们在设计表结构时没有显式指定索引列的话，MySQL 会从表中选择数据不重复的列建立索引，如果没有符合的列，则 MySQL 自动为 InnoDB 表生成一个隐含字段作为主键，并且这个字段长度为6个字节，类型为整型。</p>
<blockquote>
<p>那为什么推荐使用整型自增主键而不是选择UUID？</p>
</blockquote>
<ul>
<li>UUID是字符串，比整型消耗更多的存储空间；</li>
<li>在B+树中进行查找时需要跟经过的节点值比较大小，整型数据的比较运算比字符串更快速；</li>
<li>自增的整型索引在磁盘中会连续存储，在读取一页数据时也是连续；UUID是随机产生的，读取的上下两行数据存储是分散的，不适合执行where id &gt; 5 &amp;&amp; id &lt; 20的条件查询语句。</li>
<li>在插入或删除数据时，整型自增主键会在叶子结点的末尾建立新的叶子节点，不会破坏左侧子树的结构；UUID主键很容易出现这样的情况，B+树为了维持自身的特性，有可能会进行结构的重构，消耗更多的时间。</li>
</ul>
<blockquote>
<p>为什么非主键索引结构叶子节点存储的是主键值？</p>
</blockquote>
<p>保证数据一致性和节省存储空间，可以这么理解：商城系统订单表会存储一个用户ID作为关联外键，而不推荐存储完整的用户信息，因为当我们用户表中的信息（真实名称、手机号、收货地址···）修改后，不需要再次维护订单表的用户数据，同时也节省了存储空间。</p>
<h3 id="Hash索引"><a href="#Hash索引" class="headerlink" title="Hash索引"></a>Hash索引</h3><ul>
<li><p>主要就是通过Hash算法（常见的Hash算法有直接定址法、平方取中法、折叠法、除数取余法、随机数法），将数据库字段数据转换成定长的Hash值，与这条数据的行指针一并存入Hash表的对应位置；如果发生Hash碰撞（两个不同关键字的Hash值相同），则在对应Hash键下以链表形式存储。</p>
<p>检索算法：在检索查询时，就再次对待查关键字再次执行相同的Hash算法，得到Hash值，到对应Hash表对应位置取出数据即可，如果发生Hash碰撞，则需要在取值时进行筛选。目前使用Hash索引的数据库并不多，主要有Memory等。</p>
<p>MySQL目前有Memory引擎和NDB引擎支持Hash索引。</p>
</li>
</ul>
<h3 id="full-text全文索引"><a href="#full-text全文索引" class="headerlink" title="full-text全文索引"></a>full-text全文索引</h3><ul>
<li>全文索引也是MyISAM的一种特殊索引类型，主要用于全文索引，InnoDB从MYSQL5.6版本提供对全文索引的支持。</li>
<li>它用于替代效率较低的LIKE模糊匹配操作，而且可以通过多字段组合的全文索引一次性全模糊匹配多个字段。</li>
<li>同样使用B-Tree存放索引数据，但使用的是特定的算法，将字段数据分割后再进行索引（一般每4个字节一次分割），索引文件存储的是分割前的索引字符串集合，与分割后的索引信息，对应Btree结构的节点存储的是分割后的词信息以及它在分割前的索引字符串集合中的位置。</li>
</ul>
<h3 id="R-Tree空间索引"><a href="#R-Tree空间索引" class="headerlink" title="R-Tree空间索引"></a>R-Tree空间索引</h3><p>空间索引是MyISAM的一种特殊索引类型，主要用于地理空间数据类型</p>
<blockquote>
<p>为什么Mysql索引要用B+树不是B树？</p>
</blockquote>
<p>用B+树不用B树考虑的是IO对性能的影响，B树的每个节点都存储数据，而B+树只有叶子节点才存储数据，所以查找相同数据量的情况下，B树的高度更高，IO更频繁。数据库索引是存储在磁盘上的，当数据量大时，就不能把整个索引全部加载到内存了，只能逐一加载每一个磁盘页（对应索引树的节点）。其中在MySQL底层对B+树进行进一步优化：在叶子节点中是双向链表，且在链表的头结点和尾节点也是循环指向的。</p>
<blockquote>
<p>面试官：为何不采用Hash方式？</p>
</blockquote>
<p>因为Hash索引底层是哈希表，哈希表是一种以key-value存储数据的结构，所以多个数据在存储关系上是完全没有任何顺序关系的，所以，对于区间查询是无法直接通过索引查询的，就需要全表扫描。所以，哈希索引只适用于等值查询的场景。而B+ Tree是一种多路平衡查询树，所以他的节点是天然有序的（左子节点小于父节点、父节点小于右子节点），所以对于范围查询的时候不需要做全表扫描。</p>
<p>哈希索引不支持多列联合索引的最左匹配规则，如果有大量重复键值得情况下，哈希索引的效率会很低，因为存在哈希碰撞问题。</p>
<h3 id="哪些情况需要创建索引"><a href="#哪些情况需要创建索引" class="headerlink" title="哪些情况需要创建索引"></a>哪些情况需要创建索引</h3><ol>
<li>主键自动建立唯一索引</li>
<li>频繁作为查询条件的字段</li>
<li>查询中与其他表关联的字段，外键关系建立索引</li>
<li>单键/组合索引的选择问题，高并发下倾向创建组合索引</li>
<li>查询中排序的字段，排序字段通过索引访问大幅提高排序速度</li>
<li>查询中统计或分组字段</li>
</ol>
<h3 id="哪些情况不要创建索引"><a href="#哪些情况不要创建索引" class="headerlink" title="哪些情况不要创建索引"></a>哪些情况不要创建索引</h3><ol>
<li>表记录太少</li>
<li>经常增删改的表</li>
<li>数据重复且分布均匀的表字段，只应该为最经常查询和最经常排序的数据列建立索引（如果某个数据类包含太多的重复数据，建立索引没有太大意义）</li>
<li>频繁更新的字段不适合创建索引（会加重IO负担）</li>
<li>where条件里用不到的字段不创建索引</li>
</ol>
<h3 id="MySQL高效索引"><a href="#MySQL高效索引" class="headerlink" title="MySQL高效索引"></a>MySQL高效索引</h3><p><strong>覆盖索引</strong>（Covering Index）,或者叫索引覆盖， 也就是平时所说的不需要回表操作</p>
<ul>
<li><p>就是select的数据列只用从索引中就能够取得，不必读取数据行，MySQL可以利用索引返回select列表中的字段，而不必根据索引再次读取数据文件，换句话说<strong>查询列要被所建的索引覆盖</strong>。</p>
</li>
<li><p>索引是高效找到行的一个方法，但是一般数据库也能使用索引找到一个列的数据，因此它不必读取整个行。毕竟索引叶子节点存储了它们索引的数据，当能通过读取索引就可以得到想要的数据，那就不需要读取行了。一个索引包含（覆盖）满足查询结果的数据就叫做覆盖索引。</p>
</li>
<li><p><strong>判断标准</strong></p>
<p>使用explain，可以通过输出的extra列来判断，对于一个索引覆盖查询，显示为<strong>using index</strong>，MySQL查询优化器在执行查询前会决定是否有索引覆盖查询</p>
</li>
</ul>
<h2 id="五、MySQL查询"><a href="#五、MySQL查询" class="headerlink" title="五、MySQL查询"></a>五、MySQL查询</h2><hr>
<blockquote>
<p>count(*) 和 count(1)和count(列名)区别   ps：这道题说法有点多</p>
</blockquote>
<p>执行效果上：</p>
<ul>
<li>count(*)包括了所有的列，相当于行数，在统计结果的时候，不会忽略列值为NULL</li>
<li>count(1)包括了所有列，用1代表代码行，在统计结果的时候，不会忽略列值为NULL</li>
<li>count(列名)只包括列名那一列，在统计结果的时候，会忽略列值为空（这里的空不是只空字符串或者0，而是表示null）的计数，即某个字段值为NULL时，不统计。</li>
</ul>
<p>执行效率上：</p>
<ul>
<li>列名为主键，count(列名)会比count(1)快</li>
<li>列名不为主键，count(1)会比count(列名)快</li>
<li>如果表多个列并且没有主键，则 count(1) 的执行效率优于 count(*)</li>
<li>如果有主键，则 select count（主键）的执行效率是最优的</li>
<li>如果表只有一个字段，则 select count(*) 最优。</li>
</ul>
<blockquote>
<p>MySQL中 in和 exists 的区别？</p>
</blockquote>
<ul>
<li>exists：exists对外表用loop逐条查询，每次查询都会查看exists的条件语句，当exists里的条件语句能够返回记录行时（无论记录行是的多少，只要能返回），条件就为真，返回当前loop到的这条记录；反之，如果exists里的条件语句不能返回记录行，则当前loop到的这条记录被丢弃，exists的条件就像一个bool条件，当能返回结果集则为true，不能返回结果集则为false</li>
<li>in：in查询相当于多个or条件的叠加</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> A <span class="keyword">WHERE</span> A.id <span class="keyword">IN</span> (<span class="keyword">SELECT</span> <span class="keyword">id</span> <span class="keyword">FROM</span> B);</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> A <span class="keyword">WHERE</span> <span class="keyword">EXISTS</span> (<span class="keyword">SELECT</span> * <span class="keyword">from</span> B <span class="keyword">WHERE</span> B.id = A.id);</span><br></pre></td></tr></table></figure>

<p><strong>如果查询的两个表大小相当，那么用in和exists差别不大</strong>。</p>
<p>如果两个表中一个较小，一个是大表，则子查询表大的用exists，子查询表小的用in：</p>
<blockquote>
<p>UNION和UNION ALL的区别?</p>
</blockquote>
<p>UNION和UNION ALL都是将两个结果集合并为一个，<strong>两个要联合的SQL语句 字段个数必须一样，而且字段类型要“相容”（一致）；</strong></p>
<ul>
<li>UNION在进行表连接后会筛选掉重复的数据记录（效率较低），而UNION ALL则不会去掉重复的数据记录；</li>
<li>UNION会按照字段的顺序进行排序，而UNION ALL只是简单的将两个结果合并就返回；</li>
</ul>
<h3 id="SQL执行顺序"><a href="#SQL执行顺序" class="headerlink" title="SQL执行顺序"></a>SQL执行顺序</h3><ul>
<li><p>手写</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> &lt;select_list&gt;</span><br><span class="line"><span class="keyword">FROM</span>  &lt;left_table&gt; &lt;join_type&gt;</span><br><span class="line"><span class="keyword">JOIN</span>  &lt;right_table&gt; <span class="keyword">ON</span> &lt;join_condition&gt;</span><br><span class="line"><span class="keyword">WHERE</span>  &lt;where_condition&gt;</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span>  &lt;group_by_list&gt;</span><br><span class="line"><span class="keyword">HAVING</span> &lt;having_condition&gt;</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> &lt;order_by_condition&gt;</span><br><span class="line"><span class="keyword">LIMIT</span> &lt;limit_number&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>机读</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">FROM  &lt;left_table&gt;</span><br><span class="line">ON &lt;join_condition&gt;</span><br><span class="line">&lt;join_type&gt; JOIN  &lt;right_table&gt; </span><br><span class="line">WHERE  &lt;where_condition&gt;</span><br><span class="line">GROUP BY  &lt;group_by_list&gt;</span><br><span class="line">HAVING &lt;having_condition&gt;</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">DISTINCT</span> &lt;select_list&gt;</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> &lt;order_by_condition&gt;</span><br><span class="line"><span class="keyword">LIMIT</span> &lt;limit_number&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>总结</p>
<p><img src="https://gitee.com/wjxyzs/img/raw/master/img/1734bff368752ece.jpg" alt=""></p>
</li>
</ul>
<blockquote>
<p>mysql 的内连接、左连接、右连接有什么区别？什么是内连接、外连接、交叉连接、笛卡尔积呢？</p>
</blockquote>
<h3 id="Join图"><a href="#Join图" class="headerlink" title="Join图"></a>Join图</h3><p><img src="https://gitee.com/wjxyzs/img/raw/master/img/1734bff37ac0e7f6.jpg" alt=""></p>
<hr>
<h2 id="六、MySQL-事务"><a href="#六、MySQL-事务" class="headerlink" title="六、MySQL 事务"></a>六、MySQL 事务</h2><hr>
<blockquote>
<p>事务的隔离级别有哪些？MySQL的默认隔离级别是什么？什么是幻读，脏读，不可重复读呢？MySQL事务的四大特性以及实现原理MVCC熟悉吗，它的底层原理？</p>
</blockquote>
<p>MySQL 事务主要用于处理操作量大，复杂度高的数据。比如说，在人员管理系统中，你删除一个人员，你即需要删除人员的基本资料，也要删除和该人员相关的信息，如信箱，文章等等，这样，这些数据库操作语句就构成一个事务！</p>
<h3 id="ACID-—-事务基本要素"><a href="#ACID-—-事务基本要素" class="headerlink" title="ACID — 事务基本要素"></a>ACID — 事务基本要素</h3><p><img src="https://gitee.com/wjxyzs/img/raw/master/img/1734bff377ece423.jpg" alt=""></p>
<p>事务是由一组SQL语句组成的逻辑处理单元，具有4个属性，通常简称为事务的ACID属性。</p>
<ul>
<li><strong>A (Atomicity) 原子性</strong>：整个事务中的所有操作，要么全部完成，要么全部不完成，不可能停滞在中间某个环节。事务在执行过程中发生错误，会被回滚（Rollback）到事务开始前的状态，就像这个事务从来没有执行过一样</li>
<li><strong>C (Consistency) 一致性</strong>：在事务开始之前和事务结束以后，数据库的完整性约束没有被破坏</li>
<li><strong>I (Isolation)隔离性</strong>：一个事务的执行不能其它事务干扰。即一个事务内部的操作及使用的数据对其它并发事务是隔离的，并发执行的各个事务之间不能互相干扰</li>
<li><strong>D (Durability) 持久性</strong>：在事务完成以后，该事务所对数据库所作的更改便持久的保存在数据库之中，并不会被回滚</li>
</ul>
<p><strong>并发事务处理带来的问题</strong></p>
<ul>
<li>更新丢失（Lost Update)： 事务A和事务B选择同一行，然后基于最初选定的值更新该行时，由于两个事务都不知道彼此的存在，就会发生丢失更新问题</li>
<li>脏读(Dirty Reads)：事务A读取了事务B更新的数据，然后B回滚操作，那么A读取到的数据是脏数据</li>
<li>不可重复读（Non-Repeatable Reads)：事务 A 多次读取同一数据，事务B在事务A多次读取的过程中，对数据作了更新并提交，导致事务A多次读取同一数据时，结果不一致。</li>
<li>幻读（Phantom Reads)：幻读与不可重复读类似。它发生在一个事务A读取了几行数据，接着另一个并发事务B插入了一些数据时。在随后的查询中，事务A就会发现多了一些原本不存在的记录，就好像发生了幻觉一样，所以称为幻读。</li>
</ul>
<p><strong>幻读和不可重复读的区别：</strong></p>
<ul>
<li><strong>不可重复读的重点是修改</strong>：在同一事务中，同样的条件，第一次读的数据和第二次读的数据不一样。（因为中间有其他事务提交了修改）</li>
<li><strong>幻读的重点在于新增或者删除</strong>：在同一事务中，同样的条件,，第一次和第二次读出来的记录数不一样。（因为中间有其他事务提交了插入/删除）</li>
</ul>
<p><strong>并发事务处理带来的问题的解决办法：</strong></p>
<ul>
<li>“更新丢失”通常是应该完全避免的。但防止更新丢失，并不能单靠数据库事务控制器来解决，需要应用程序对要更新的数据加必要的锁来解决，因此，防止更新丢失应该是应用的责任。</li>
<li>“脏读” 、 “不可重复读”和“幻读” ，其实都是数据库读一致性问题，必须由数据库提供一定的事务隔离机制来解决：<ul>
<li>一种是加锁：在读取数据前，对其加锁，阻止其他事务对数据进行修改。</li>
<li>另一种是数据多版本并发控制（MultiVersion Concurrency Control，简称 <strong>MVCC</strong> 或 MCC），也称为多版本数据库：不用加任何锁， 通过一定机制生成一个数据请求时间点的一致性数据快照 （Snapshot)， 并用这个快照来提供一定级别 （语句级或事务级） 的一致性读取。从用户的角度来看，好象是数据库可以提供同一数据的多个版本。</li>
</ul>
</li>
</ul>
<h3 id="事务隔离级别"><a href="#事务隔离级别" class="headerlink" title="事务隔离级别"></a>事务隔离级别</h3><p>数据库事务的隔离级别有4种，由低到高分别为</p>
<ul>
<li><strong>READ-UNCOMMITTED(读未提交)：</strong> 最低的隔离级别，允许读取尚未提交的数据变更，<strong>可能会导致脏读、幻读或不可重复读</strong>。</li>
<li><strong>READ-COMMITTED(读已提交)：</strong> 允许读取并发事务已经提交的数据，<strong>可以阻止脏读，但是幻读或不可重复读仍有可能发生</strong>。</li>
<li><strong>REPEATABLE-READ(可重复读)：</strong> 对同一字段的多次读取结果都是一致的，除非数据是被本身事务自己所修改，<strong>可以阻止脏读和不可重复读，但幻读仍有可能发生</strong>。</li>
<li><strong>SERIALIZABLE(可串行化)：</strong> 最高的隔离级别，完全服从ACID的隔离级别。所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，<strong>该级别可以防止脏读、不可重复读以及幻读</strong>。</li>
</ul>
<p>查看当前数据库的事务隔离级别：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">'tx_isolation'</span></span><br></pre></td></tr></table></figure>

<p>下面通过事例一一阐述在事务的并发操作中可能会出现脏读，不可重复读，幻读和事务隔离级别的联系。</p>
<p>数据库的事务隔离越严格，并发副作用越小，但付出的代价就越大，因为事务隔离实质上就是使事务在一定程度上“串行化”进行，这显然与“并发”是矛盾的。同时，不同的应用对读一致性和事务隔离程度的要求也是不同的，比如许多应用对“不可重复读”和“幻读”并不敏感，可能更关心数据并发访问的能力。</p>
<h3 id="Read-uncommitted"><a href="#Read-uncommitted" class="headerlink" title="Read uncommitted"></a>Read uncommitted</h3><p>读未提交，就是一个事务可以读取另一个未提交事务的数据。</p>
<p>事例：老板要给程序员发工资，程序员的工资是3.6万/月。但是发工资时老板不小心按错了数字，按成3.9万/月，该钱已经打到程序员的户口，但是事务还没有提交，就在这时，程序员去查看自己这个月的工资，发现比往常多了3千元，以为涨工资了非常高兴。但是老板及时发现了不对，马上回滚差点就提交了的事务，将数字改成3.6万再提交。</p>
<p>分析：实际程序员这个月的工资还是3.6万，但是程序员看到的是3.9万。他看到的是老板还没提交事务时的数据。这就是脏读。</p>
<p>那怎么解决脏读呢？Read committed！读提交，能解决脏读问题。</p>
<h3 id="Read-committed"><a href="#Read-committed" class="headerlink" title="Read committed"></a>Read committed</h3><p>读提交，顾名思义，就是一个事务要等另一个事务提交后才能读取数据。</p>
<p>事例：程序员拿着信用卡去享受生活（卡里当然是只有3.6万），当他埋单时（程序员事务开启），收费系统事先检测到他的卡里有3.6万，就在这个时候！！程序员的妻子要把钱全部转出充当家用，并提交。当收费系统准备扣款时，再检测卡里的金额，发现已经没钱了（第二次检测金额当然要等待妻子转出金额事务提交完）。程序员就会很郁闷，明明卡里是有钱的…</p>
<p>分析：这就是读提交，若有事务对数据进行更新（UPDATE）操作时，读操作事务要等待这个更新操作事务提交后才能读取数据，可以解决脏读问题。但在这个事例中，出现了一个事务范围内两个相同的查询却返回了不同数据，这就是<strong>不可重复读</strong>。</p>
<p>那怎么解决可能的不可重复读问题？Repeatable read ！</p>
<h3 id="Repeatable-read"><a href="#Repeatable-read" class="headerlink" title="Repeatable read"></a>Repeatable read</h3><p>重复读，就是在开始读取数据（事务开启）时，不再允许修改操作。 <strong>MySQL的默认事务隔离级别</strong></p>
<p>事例：程序员拿着信用卡去享受生活（卡里当然是只有3.6万），当他埋单时（事务开启，不允许其他事务的UPDATE修改操作），收费系统事先检测到他的卡里有3.6万。这个时候他的妻子不能转出金额了。接下来收费系统就可以扣款了。</p>
<p>分析：重复读可以解决不可重复读问题。写到这里，应该明白的一点就是，<strong>不可重复读对应的是修改，即UPDATE操作。但是可能还会有幻读问题。因为幻读问题对应的是插入INSERT操作，而不是UPDATE操作</strong>。</p>
<p><strong>什么时候会出现幻读？</strong></p>
<p>事例：程序员某一天去消费，花了2千元，然后他的妻子去查看他今天的消费记录（全表扫描FTS，妻子事务开启），看到确实是花了2千元，就在这个时候，程序员花了1万买了一部电脑，即新增INSERT了一条消费记录，并提交。当妻子打印程序员的消费记录清单时（妻子事务提交），发现花了1.2万元，似乎出现了幻觉，这就是幻读。</p>
<p>那怎么解决幻读问题？Serializable！</p>
<h3 id="Serializable-序列化"><a href="#Serializable-序列化" class="headerlink" title="Serializable 序列化"></a>Serializable 序列化</h3><p>Serializable 是最高的事务隔离级别，在该级别下，事务串行化顺序执行，可以避免脏读、不可重复读与幻读。简单来说，Serializable会在读取的每一行数据上都加锁，所以可能导致大量的超时和锁争用问题。这种事务隔离级别效率低下，比较耗数据库性能，一般不使用。</p>
<h3 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h3><table>
<thead>
<tr>
<th>事务隔离级别</th>
<th>读数据一致性</th>
<th>脏读</th>
<th>不可重复读</th>
<th>幻读</th>
</tr>
</thead>
<tbody><tr>
<td>读未提交（read-uncommitted）</td>
<td>最低级被，只能保证不读取物理上损坏的数据</td>
<td>是</td>
<td>是</td>
<td>是</td>
</tr>
<tr>
<td>读已提交（read-committed）</td>
<td>语句级</td>
<td>否</td>
<td>是</td>
<td>是</td>
</tr>
<tr>
<td>可重复读（repeatable-read）</td>
<td>事务级</td>
<td>否</td>
<td>否</td>
<td>是</td>
</tr>
<tr>
<td>串行化（serializable）</td>
<td>最高级别，事务级</td>
<td>否</td>
<td>否</td>
<td>否</td>
</tr>
</tbody></table>
<p>需要说明的是，事务隔离级别和数据访问的并发性是对立的，事务隔离级别越高并发性就越差。所以要根据具体的应用来确定合适的事务隔离级别，这个地方没有万能的原则。</p>
<p>MySQL InnoDB 存储引擎的默认支持的隔离级别是 <strong>REPEATABLE-READ（可重读）</strong>。我们可以通过<font color=red size=3><code>SELECT @@tx_isolation;</code></font>命令来查看，MySQL 8.0 该命令改为<font color=red size=3><code>SELECT @@transaction_isolation;</code></font></p>
<p>这里需要注意的是：与 SQL 标准不同的地方在于InnoDB 存储引擎在 <strong>REPEATABLE-READ（可重读）</strong>事务隔离级别下使用的是Next-Key Lock 算法，因此可以避免幻读的产生，这与其他数据库系统(如 SQL Server)是不同的。所以说InnoDB 存储引擎的默认支持的隔离级别是 REPEATABLE-READ（可重读）已经可以完全保证事务的隔离性要求，即达到了 SQL标准的 <strong>SERIALIZABLE(可串行化)</strong>隔离级别，而且保留了比较好的并发性能。</p>
<p>因为隔离级别越低，事务请求的锁越少，所以大部分数据库系统的隔离级别都是<strong>READ-COMMITTED(读已提交):</strong>，但是你要知道的是InnoDB 存储引擎默认使用 <strong>REPEATABLE-READ（可重读）</strong>并不会有任何性能损失。</p>
<h3 id="MVCC-多版本并发控制"><a href="#MVCC-多版本并发控制" class="headerlink" title="MVCC 多版本并发控制"></a>MVCC 多版本并发控制</h3><p>MySQL的大多数事务型存储引擎实现都不是简单的行级锁。基于提升并发性考虑，一般都同时实现了多版本并发控制（MVCC），包括Oracle、PostgreSQL。只是实现机制各不相同。</p>
<p>可以认为 MVCC 是行级锁的一个变种，但它在很多情况下避免了加锁操作，因此开销更低。虽然实现机制有所不同，但大都实现了非阻塞的读操作，写操作也只是锁定必要的行。</p>
<p>MVCC 的实现是通过保存数据在某个时间点的快照来实现的。也就是说不管需要执行多长时间，每个事物看到的数据都是一致的。</p>
<p>典型的MVCC实现方式，分为<strong>乐观（optimistic）并发控制和悲观（pressimistic）并发控制</strong>。下边通过 InnoDB的简化版行为来说明 MVCC 是如何工作的。</p>
<p>InnoDB 的 MVCC，是通过在每行记录后面保存两个隐藏的列来实现。这两个列，一个保存了行的创建时间，一个保存行的过期时间（删除时间）。当然存储的并不是真实的时间，而是系统版本号（system version number）。每开始一个新的事务，系统版本号都会自动递增。事务开始时刻的系统版本号会作为事务的版本号，用来和查询到的每行记录的版本号进行比较。</p>
<p><strong>REPEATABLE READ（可重读）隔离级别下MVCC如何工作：</strong></p>
<ul>
<li><p>SELECT</p>
<p>InnoDB会根据以下两个条件检查每行记录：</p>
<ul>
<li>InnoDB只查找版本早于当前事务版本的数据行，这样可以确保事务读取的行，要么是在开始事务之前已经存在要么是事务自身插入或者修改过的</li>
<li>行的删除版本号要么未定义，要么大于当前事务版本号，这样可以确保事务读取到的行在事务开始之前未被删除</li>
</ul>
<p>只有符合上述两个条件的才会被查询出来</p>
</li>
<li><p>INSERT：InnoDB为新插入的每一行保存当前系统版本号作为行版本号</p>
</li>
<li><p>DELETE：InnoDB为删除的每一行保存当前系统版本号作为行删除标识</p>
</li>
<li><p>UPDATE：InnoDB为插入的一行新纪录保存当前系统版本号作为行版本号，同时保存当前系统版本号到原来的行作为删除标识</p>
</li>
</ul>
<p>保存这两个额外系统版本号，使大多数操作都不用加锁。使数据操作简单，性能很好，并且也能保证只会读取到符合要求的行。不足之处是每行记录都需要额外的存储空间，需要做更多的行检查工作和一些额外的维护工作。</p>
<p>MVCC 只在 COMMITTED READ（读提交）和REPEATABLE READ（可重复读）两种隔离级别下工作。</p>
<h3 id="事务日志"><a href="#事务日志" class="headerlink" title="事务日志"></a>事务日志</h3><p>InnoDB 使用日志来减少提交事务时的开销。因为日志中已经记录了事务，就无须在每个事务提交时把缓冲池的脏块刷新(flush)到磁盘中。</p>
<p>事务修改的数据和索引通常会映射到表空间的随机位置，所以刷新这些变更到磁盘需要很多随机 IO。</p>
<p>InnoDB 假设使用常规磁盘，随机IO比顺序IO昂贵得多，因为一个IO请求需要时间把磁头移到正确的位置，然后等待磁盘上读出需要的部分，再转到开始位置。</p>
<p>InnoDB 用日志把随机IO变成顺序IO。一旦日志安全写到磁盘，事务就持久化了，即使断电了，InnoDB可以重放日志并且恢复已经提交的事务。</p>
<p>InnoDB 使用一个后台线程智能地刷新这些变更到数据文件。这个线程可以批量组合写入，使得数据写入更顺序，以提高效率。</p>
<p>事务日志可以帮助提高事务效率：</p>
<ul>
<li>使用事务日志，存储引擎在修改表的数据时只需要修改其内存拷贝，再把该修改行为记录到持久在硬盘上的事务日志中，而不用每次都将修改的数据本身持久到磁盘。</li>
<li>事务日志采用的是追加的方式，因此写日志的操作是磁盘上一小块区域内的顺序I/O，而不像随机I/O需要在磁盘的多个地方移动磁头，所以采用事务日志的方式相对来说要快得多。</li>
<li>事务日志持久以后，内存中被修改的数据在后台可以慢慢刷回到磁盘。</li>
<li>如果数据的修改已经记录到事务日志并持久化，但数据本身没有写回到磁盘，此时系统崩溃，存储引擎在重启时能够自动恢复这一部分修改的数据。</li>
</ul>
<p>目前来说，大多数存储引擎都是这样实现的，我们通常称之为<strong>预写式日志</strong>（Write-Ahead Logging），修改数据需要写两次磁盘。</p>
<h3 id="事务的实现"><a href="#事务的实现" class="headerlink" title="事务的实现"></a>事务的实现</h3><p>事务的实现是基于数据库的存储引擎。不同的存储引擎对事务的支持程度不一样。MySQL 中支持事务的存储引擎有 InnoDB 和 NDB。</p>
<p>事务的实现就是如何实现ACID特性。</p>
<p>事务的隔离性是通过锁实现，而事务的原子性、一致性和持久性则是通过事务日志实现 。</p>
<blockquote>
<p>事务是如何通过日志来实现的，说得越深入越好。</p>
</blockquote>
<p>事务日志包括：<strong>重做日志redo</strong>和<strong>回滚日志undo</strong></p>
<ul>
<li><p><strong>redo log（重做日志</strong>） 实现持久化和原子性</p>
<p>在innoDB的存储引擎中，事务日志通过重做(redo)日志和innoDB存储引擎的日志缓冲(InnoDB Log Buffer)实现。事务开启时，事务中的操作，都会先写入存储引擎的日志缓冲中，在事务提交之前，这些缓冲的日志都需要提前刷新到磁盘上持久化，这就是DBA们口中常说的“日志先行”(Write-Ahead Logging)。当事务提交之后，在Buffer Pool中映射的数据文件才会慢慢刷新到磁盘。此时如果数据库崩溃或者宕机，那么当系统重启进行恢复时，就可以根据redo log中记录的日志，把数据库恢复到崩溃前的一个状态。未完成的事务，可以继续提交，也可以选择回滚，这基于恢复的策略而定。</p>
<p>在系统启动的时候，就已经为redo log分配了一块连续的存储空间，以顺序追加的方式记录Redo Log，通过顺序IO来改善性能。所有的事务共享redo log的存储空间，它们的Redo Log按语句的执行顺序，依次交替的记录在一起。</p>
</li>
<li><p><strong>undo log（回滚日志）</strong> 实现一致性</p>
<p>undo log 主要为事务的回滚服务。在事务执行的过程中，除了记录redo log，还会记录一定量的undo log。undo log记录了数据在每个操作前的状态，如果事务执行过程中需要回滚，就可以根据undo log进行回滚操作。单个事务的回滚，只会回滚当前事务做的操作，并不会影响到其他的事务做的操作。</p>
<p>Undo记录的是已部分完成并且写入硬盘的未完成的事务，默认情况下回滚日志是记录下表空间中的（共享表空间或者独享表空间）</p>
</li>
</ul>
<p>二种日志均可以视为一种恢复操作，redo_log是恢复提交事务修改的页操作，而undo_log是回滚行记录到特定版本。二者记录的内容也不同，redo_log是物理日志，记录页的物理修改操作，而undo_log是逻辑日志，根据每行记录进行记录。</p>
<blockquote>
<p>又引出个问题：你知道MySQL 有多少种日志吗？</p>
</blockquote>
<ul>
<li><strong>错误日志</strong>：记录出错信息，也记录一些警告信息或者正确的信息。</li>
<li><strong>查询日志</strong>：记录所有对数据库请求的信息，不论这些请求是否得到了正确的执行。</li>
<li><strong>慢查询日志</strong>：设置一个阈值，将运行时间超过该值的所有SQL语句都记录到慢查询的日志文件中。</li>
<li><strong>二进制日志</strong>：记录对数据库执行更改的所有操作。</li>
<li><strong>中继日志</strong>：中继日志也是二进制日志，用来给slave 库恢复</li>
<li><strong>事务日志</strong>：重做日志redo和回滚日志undo</li>
</ul>
<blockquote>
<p>分布式事务相关问题，可能还会问到 2PC、3PC，，，</p>
</blockquote>
<h3 id="MySQL对分布式事务的支持"><a href="#MySQL对分布式事务的支持" class="headerlink" title="MySQL对分布式事务的支持"></a>MySQL对分布式事务的支持</h3><p>分布式事务的实现方式有很多，既可以采用 InnoDB 提供的原生的事务支持，也可以采用消息队列来实现分布式事务的最终一致性。这里我们主要聊一下 InnoDB 对分布式事务的支持。</p>
<p>MySQL 从 5.0.3 InnoDB 存储引擎开始支持XA协议的分布式事务。一个分布式事务会涉及多个行动，这些行动本身是事务性的。所有行动都必须一起成功完成，或者一起被回滚。</p>
<p>在MySQL中，使用分布式事务涉及一个或多个资源管理器和一个事务管理器。</p>
<p><img src="https://gitee.com/wjxyzs/img/raw/master/img/1734bff37e532a33.jpg" alt=""></p>
<p>如图，MySQL 的分布式事务模型。模型中分三块：应用程序（AP）、资源管理器（RM）、事务管理器（TM）:</p>
<ul>
<li>应用程序：定义了事务的边界，指定需要做哪些事务；</li>
<li>资源管理器：提供了访问事务的方法，通常一个数据库就是一个资源管理器；</li>
<li>事务管理器：协调参与了全局事务中的各个事务。</li>
</ul>
<p>分布式事务采用两段式提交（two-phase commit）的方式：</p>
<ul>
<li>第一阶段所有的事务节点开始准备，告诉事务管理器ready。</li>
<li>第二阶段事务管理器告诉每个节点是commit还是rollback。如果有一个节点失败，就需要全局的节点全部rollback，以此保障事务的原子性。</li>
</ul>
<h2 id="七、MySQL锁机制"><a href="#七、MySQL锁机制" class="headerlink" title="七、MySQL锁机制"></a>七、MySQL锁机制</h2><hr>
<blockquote>
<p>数据库的乐观锁和悲观锁？MySQL 中有哪几种锁，列举一下？MySQL中InnoDB引擎的行锁是怎么实现的？MySQL 间隙锁有没有了解，死锁有没有了解，写一段会造成死锁的 sql 语句，死锁发生了如何解决，MySQL 有没有提供什么机制去解决死锁</p>
</blockquote>
<p>锁是计算机协调多个进程或线程并发访问某一资源的机制。</p>
<p>在数据库中，除传统的计算资源（如CPU、RAM、I/O等）的争用以外，数据也是一种供许多用户共享的资源。数据库锁定机制简单来说，就是数据库为了保证数据的一致性，而使各种共享资源在被并发访问变得有序所设计的一种规则。</p>
<p>打个比方，我们到淘宝上买一件商品，商品只有一件库存，这个时候如果还有另一个人买，那么如何解决是你买到还是另一个人买到的问题？这里肯定要用到事物，我们先从库存表中取出物品数量，然后插入订单，付款后插入付款表信息，然后更新商品数量。在这个过程中，使用锁可以对有限的资源进行保护，解决隔离和并发的矛盾。</p>
<h3 id="锁的分类"><a href="#锁的分类" class="headerlink" title="锁的分类"></a>锁的分类</h3><p><strong>从对数据操作的类型分类</strong>：</p>
<ul>
<li><strong>读锁</strong>（共享锁）：针对同一份数据，多个读操作可以同时进行，不会互相影响</li>
<li><strong>写锁</strong>（排他锁）：当前写操作没有完成前，它会阻断其他写锁和读锁</li>
</ul>
<p><strong>从对数据操作的粒度分类</strong>：</p>
<p>为了尽可能提高数据库的并发度，每次锁定的数据范围越小越好，理论上每次只锁定当前操作的数据的方案会得到最大的并发度，但是管理锁是很耗资源的事情（涉及获取，检查，释放锁等动作），因此数据库系统需要在高并发响应和系统性能两方面进行平衡，这样就产生了“锁粒度（Lock granularity）”的概念。</p>
<ul>
<li><strong>表级锁</strong>：开销小，加锁快；不会出现死锁；锁定粒度大，发生锁冲突的概率最高，并发度最低（MyISAM 和 MEMORY 存储引擎采用的是表级锁）；</li>
<li><strong>行级锁</strong>：开销大，加锁慢；会出现死锁；锁定粒度最小，发生锁冲突的概率最低，并发度也最高（InnoDB 存储引擎既支持行级锁也支持表级锁，但默认情况下是采用行级锁）；</li>
<li><strong>页面锁</strong>：开销和加锁时间界于表锁和行锁之间；会出现死锁；锁定粒度界于表锁和行锁之间，并发度一般。</li>
</ul>
<p>适用：从锁的角度来说，表级锁更适合于以查询为主，只有少量按索引条件更新数据的应用，如Web应用；而行级锁则更适合于有大量按索引条件并发更新少量不同数据，同时又有并发查询的应用，如一些在线事务处理（OLTP）系统。</p>
<table>
<thead>
<tr>
<th>行锁</th>
<th>表锁</th>
<th>页锁</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>MyISAM</td>
<td></td>
<td>√</td>
<td></td>
</tr>
<tr>
<td>BDB</td>
<td></td>
<td>√</td>
<td>√</td>
</tr>
<tr>
<td>InnoDB</td>
<td>√</td>
<td>√</td>
<td></td>
</tr>
<tr>
<td>Memory</td>
<td></td>
<td>√</td>
<td></td>
</tr>
</tbody></table>
<h3 id="MyISAM-表锁"><a href="#MyISAM-表锁" class="headerlink" title="MyISAM 表锁"></a>MyISAM 表锁</h3><p>MyISAM 的表锁有两种模式：</p>
<ul>
<li>表共享读锁 （Table Read Lock）：不会阻塞其他用户对同一表的读请求，但会阻塞对同一表的写请求；</li>
<li>表独占写锁 （Table Write Lock）：会阻塞其他用户对同一表的读和写操作；</li>
</ul>
<p>MyISAM 表的读操作与写操作之间，以及写操作之间是串行的。当一个线程获得对一个表的写锁后， 只有持有锁的线程可以对表进行更新操作。 其他线程的读、 写操作都会等待，直到锁被释放为止。</p>
<p>默认情况下，写锁比读锁具有更高的优先级：当一个锁释放时，这个锁会优先给写锁队列中等候的获取锁请求，然后再给读锁队列中等候的获取锁请求。</p>
<h3 id="InnoDB-行锁"><a href="#InnoDB-行锁" class="headerlink" title="InnoDB 行锁"></a>InnoDB 行锁</h3><p>InnoDB 实现了以下两种类型的<strong>行锁</strong>：</p>
<ul>
<li>共享锁（S）：允许一个事务去读一行，阻止其他事务获得相同数据集的排他锁。</li>
<li>排他锁（X）：允许获得排他锁的事务更新数据，阻止其他事务取得相同数据集的共享读锁和排他写锁。</li>
</ul>
<p>为了允许行锁和表锁共存，实现多粒度锁机制，InnoDB 还有两种内部使用的意向锁（Intention Locks），这两种意向锁都是<strong>表锁</strong>：</p>
<ul>
<li>意向共享锁（IS）：事务打算给数据行加行共享锁，事务在给一个数据行加共享锁前必须先取得该表的 IS 锁。</li>
<li>意向排他锁（IX）：事务打算给数据行加行排他锁，事务在给一个数据行加排他锁前必须先取得该表的 IX 锁。</li>
</ul>
<p><strong>索引失效会导致行锁变表锁</strong>。比如 vchar 查询不写单引号的情况。</p>
<h3 id="加锁机制"><a href="#加锁机制" class="headerlink" title="加锁机制"></a>加锁机制</h3><p><strong>乐观锁与悲观锁是两种并发控制的思想，可用于解决丢失更新问题</strong></p>
<p>乐观锁会“乐观地”假定大概率不会发生并发更新冲突，访问、处理数据过程中不加锁，只在更新数据时再根据版本号或时间戳判断是否有冲突，有则处理，无则提交事务。用数据版本（Version）记录机制实现，这是乐观锁最常用的一种实现方式</p>
<p>悲观锁会“悲观地”假定大概率会发生并发更新冲突，访问、处理数据前就加排他锁，在整个数据处理过程中锁定数据，事务提交或回滚后才释放锁。另外与乐观锁相对应的，<strong>悲观锁是由数据库自己实现了的，要用的时候，我们直接调用数据库的相关语句就可以了。</strong></p>
<h3 id="锁模式-InnoDB有三种行锁的算法"><a href="#锁模式-InnoDB有三种行锁的算法" class="headerlink" title="锁模式(InnoDB有三种行锁的算法)"></a>锁模式(InnoDB有三种行锁的算法)</h3><ul>
<li><p><strong>记录锁(Record Locks)</strong>： 单个行记录上的锁。对索引项加锁，锁定符合条件的行。其他事务不能修改和删除加锁项；</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">table</span> <span class="keyword">WHERE</span> <span class="keyword">id</span> = <span class="number">1</span> <span class="keyword">FOR</span> <span class="keyword">UPDATE</span>;</span><br></pre></td></tr></table></figure>

<p>它会在 id=1 的记录上加上记录锁，以阻止其他事务插入，更新，删除 id=1 这一行</p>
<p>在通过 主键索引 与 唯一索引 对数据行进行 UPDATE 操作时，也会对该行数据加记录锁：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- id 列为主键列或唯一索引列</span></span><br><span class="line"><span class="keyword">UPDATE</span> <span class="keyword">SET</span> age = <span class="number">50</span> <span class="keyword">WHERE</span> <span class="keyword">id</span> = <span class="number">1</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>间隙锁（Gap Locks）</strong>： 当我们使用范围条件而不是相等条件检索数据，并请求共享或排他锁时，InnoDB会给符合条件的已有数据记录的索引项加锁。对于键值在条件范围内但并不存在的记录，叫做“间隙”。</p>
<p>InnoDB 也会对这个“间隙”加锁，这种锁机制就是所谓的间隙锁。</p>
<p>对索引项之间的“间隙”加锁，锁定记录的范围（对第一条记录前的间隙或最后一条将记录后的间隙加锁），不包含索引项本身。其他事务不能在锁范围内插入数据，这样就防止了别的事务新增幻影行。</p>
<p>间隙锁基于非唯一索引，它锁定一段范围内的索引记录。间隙锁基于下面将会提到的<font color=red size=3><code>Next-Key Locking</code></font> 算法，请务必牢记：<strong>使用间隙锁锁住的是一个区间，而不仅仅是这个区间中的每一条数据</strong>。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">table</span> <span class="keyword">WHERE</span> <span class="keyword">id</span> BETWEN <span class="number">1</span> <span class="keyword">AND</span> <span class="number">10</span> <span class="keyword">FOR</span> <span class="keyword">UPDATE</span>;</span><br></pre></td></tr></table></figure>

<p>即所有在<font color=red size=3><code>（1，10）</code></font>区间内的记录行都会被锁住，所有id 为 2、3、4、5、6、7、8、9 的数据行的插入会被阻塞，但是 1 和 10 两条记录行并不会被锁住。</p>
<p>GAP锁的目的，是为了防止同一事务的两次当前读，出现幻读的情况</p>
</li>
<li><p><strong>临键锁(Next-key Locks)</strong>： <strong>临键锁</strong>，是<strong>记录锁与间隙锁的组合</strong>，它的封锁范围，既包含索引记录，又包含索引区间。(临键锁的主要目的，也是为了避免<strong>幻读</strong>(Phantom Read)。如果把事务的隔离级别降级为RC，临键锁则也会失效。)</p>
<p>Next-Key 可以理解为一种特殊的<strong>间隙锁</strong>，也可以理解为一种特殊的<strong>算法</strong>。通过<strong>临建锁</strong>可以解决幻读的问题。 每个数据行上的非唯一索引列上都会存在一把临键锁，当某个事务持有该数据行的临键锁时，会锁住一段左开右闭区间的数据。需要强调的一点是，<code>InnoDB</code> 中行级锁是基于索引实现的，临键锁只与非唯一索引列有关，在唯一索引列（包括主键列）上不存在临键锁。</p>
<p>对于行的查询，都是采用该方法，主要目的是解决幻读的问题。</p>
</li>
</ul>
<blockquote>
<p>select for update有什么含义，会锁表还是锁行还是其他</p>
</blockquote>
<p>for update 仅适用于InnoDB，且必须在事务块(BEGIN/COMMIT)中才能生效。在进行事务操作时，通过“for update”语句，MySQL会对查询结果集中每行数据都添加排他锁，其他线程对该记录的更新与删除操作都会阻塞。排他锁包含行锁、表锁。</p>
<p>InnoDB这种行锁实现特点意味着：只有通过索引条件检索数据，InnoDB才使用行级锁，否则，InnoDB将使用表锁！ 假设有个表单 products ，里面有id跟name二个栏位，id是主键。</p>
<ul>
<li>明确指定主键，并且有此笔资料，row lock</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> products <span class="keyword">WHERE</span> <span class="keyword">id</span>=<span class="string">'3'</span> <span class="keyword">FOR</span> <span class="keyword">UPDATE</span>;</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> products <span class="keyword">WHERE</span> <span class="keyword">id</span>=<span class="string">'3'</span> <span class="keyword">and</span> <span class="keyword">type</span>=<span class="number">1</span> <span class="keyword">FOR</span> <span class="keyword">UPDATE</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>明确指定主键，若查无此笔资料，无lock</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> products <span class="keyword">WHERE</span> <span class="keyword">id</span>=<span class="string">'-1'</span> <span class="keyword">FOR</span> <span class="keyword">UPDATE</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>无主键，table lock</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> products <span class="keyword">WHERE</span> <span class="keyword">name</span>=<span class="string">'Mouse'</span> <span class="keyword">FOR</span> <span class="keyword">UPDATE</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>主键不明确，table lock</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> products <span class="keyword">WHERE</span> <span class="keyword">id</span>&lt;&gt;<span class="string">'3'</span> <span class="keyword">FOR</span> <span class="keyword">UPDATE</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>主键不明确，table lock</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> products <span class="keyword">WHERE</span> <span class="keyword">id</span> <span class="keyword">LIKE</span> <span class="string">'3'</span> <span class="keyword">FOR</span> <span class="keyword">UPDATE</span>;</span><br></pre></td></tr></table></figure>

<p><strong>注1</strong>: FOR UPDATE仅适用于InnoDB，且必须在交易区块(BEGIN/COMMIT)中才能生效。 <strong>注2</strong>: 要测试锁定的状况，可以利用MySQL的Command Mode ，开二个视窗来做测试。</p>
<blockquote>
<p>MySQL 遇到过死锁问题吗，你是如何解决的？</p>
</blockquote>
<h3 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h3><p><strong>死锁产生</strong>：</p>
<ul>
<li>死锁是指两个或多个事务在同一资源上相互占用，并请求锁定对方占用的资源，从而导致恶性循环</li>
<li>当事务试图以不同的顺序锁定资源时，就可能产生死锁。多个事务同时锁定同一个资源时也可能会产生死锁</li>
<li>锁的行为和顺序和存储引擎相关。以同样的顺序执行语句，有些存储引擎会产生死锁有些不会——死锁有双重原因：真正的数据冲突；存储引擎的实现方式。</li>
</ul>
<p><strong>检测死锁</strong>：数据库系统实现了各种死锁检测和死锁超时的机制。InnoDB存储引擎能检测到死锁的循环依赖并立即返回一个错误。</p>
<p><strong>死锁恢复</strong>：死锁发生以后，只有部分或完全回滚其中一个事务，才能打破死锁，InnoDB目前处理死锁的方法是，将持有最少行级排他锁的事务进行回滚。所以事务型应用程序在设计时必须考虑如何处理死锁，多数情况下只需要重新执行因死锁回滚的事务即可。</p>
<p><strong>外部锁的死锁检测</strong>：发生死锁后，InnoDB 一般都能自动检测到，并使一个事务释放锁并回退，另一个事务获得锁，继续完成事务。但在涉及外部锁，或涉及表锁的情况下，InnoDB 并不能完全自动检测到死锁， 这需要通过设置锁等待超时参数 innodb_lock_wait_timeout 来解决</p>
<p><strong>死锁影响性能</strong>：死锁会影响性能而不是会产生严重错误，因为InnoDB会自动检测死锁状况并回滚其中一个受影响的事务。在高并发系统上，当许多线程等待同一个锁时，死锁检测可能导致速度变慢。 有时当发生死锁时，禁用死锁检测（使用innodb_deadlock_detect配置选项）可能会更有效，这时可以依赖<code>innodb_lock_wait_timeout</code>设置进行事务回滚。</p>
<p><strong>MyISAM避免死锁</strong>：</p>
<ul>
<li>在自动加锁的情况下，MyISAM 总是一次获得 SQL 语句所需要的全部锁，所以 MyISAM 表不会出现死锁。</li>
</ul>
<p><strong>InnoDB避免死锁</strong>：</p>
<ul>
<li>为了在单个InnoDB表上执行多个并发写入操作时避免死锁，可以在事务开始时通过为预期要修改的每个元祖（行）使用<code>SELECT ... FOR UPDATE</code>语句来获取必要的锁，即使这些行的更改语句是在之后才执行的。</li>
<li>在事务中，如果要更新记录，应该直接申请足够级别的锁，即排他锁，而不应先申请共享锁、更新时再申请排他锁，因为这时候当用户再申请排他锁时，其他事务可能又已经获得了相同记录的共享锁，从而造成锁冲突，甚至死锁</li>
<li>如果事务需要修改或锁定多个表，则应在每个事务中以相同的顺序使用加锁语句。 在应用中，如果不同的程序会并发存取多个表，应尽量约定以相同的顺序来访问表，这样可以大大降低产生死锁的机会</li>
<li>通过<font color=red size=3><code>SELECT ... LOCK IN SHARE MODE</code></font>获取行的读锁后，如果当前事务再需要对该记录进行更新操作，则很有可能造成死锁。</li>
<li>改变事务隔离级别</li>
</ul>
<p>如果出现死锁，可以用 <font color=red size=3><code>show engine innodb status;</code></font>命令来确定最后一个死锁产生的原因。返回结果中包括死锁相关事务的详细信息，如引发死锁的 SQL 语句，事务已经获得的锁，正在等待什么锁，以及被回滚的事务等。据此可以分析死锁产生的原因和改进措施。</p>
<hr>
<h2 id="八、MySQL调优"><a href="#八、MySQL调优" class="headerlink" title="八、MySQL调优"></a>八、MySQL调优</h2><hr>
<blockquote>
<p>日常工作中你是怎么优化SQL的？SQL优化的一般步骤是什么，怎么看执行计划（explain），如何理解其中各个字段的含义？如何写sql能够有效的使用到复合索引？一条sql执行过长的时间，你如何优化，从哪些方面入手？什么是最左前缀原则？什么是最左匹配原则？</p>
</blockquote>
<h3 id="影响mysql的性能因素"><a href="#影响mysql的性能因素" class="headerlink" title="影响mysql的性能因素"></a>影响mysql的性能因素</h3><ul>
<li>业务需求对MySQL的影响(合适合度)</li>
<li>存储定位对MySQL的影响<ul>
<li>不适合放进MySQL的数据<ul>
<li>二进制多媒体数据</li>
<li>流水队列数据</li>
<li>超大文本数据</li>
</ul>
</li>
<li>需要放进缓存的数据<ul>
<li>系统各种配置及规则数据</li>
<li>活跃用户的基本信息数据</li>
<li>活跃用户的个性化定制信息数据</li>
<li>准实时的统计信息数据</li>
<li>其他一些访问频繁但变更较少的数据</li>
</ul>
</li>
</ul>
</li>
<li>Schema设计对系统的性能影响<ul>
<li>尽量减少对数据库访问的请求</li>
<li>尽量减少无用数据的查询请求</li>
</ul>
</li>
<li>硬件环境对系统性能的影响</li>
</ul>
<h3 id="性能分析"><a href="#性能分析" class="headerlink" title="性能分析"></a>性能分析</h3><h3 id="MySQL-Query-Optimizer"><a href="#MySQL-Query-Optimizer" class="headerlink" title="MySQL Query Optimizer"></a>MySQL Query Optimizer</h3><ol>
<li>MySQL 中有专门负责优化 SELECT 语句的优化器模块，主要功能：通过计算分析系统中收集到的统计信息，为客户端请求的 Query 提供他认为最优的执行计划（他认为最优的数据检索方式，但不见得是 DBA 认为是最优的，这部分最耗费时间）</li>
<li>当客户端向 MySQL 请求一条 Query，命令解析器模块完成请求分类，区别出是 SELECT 并转发给 MySQL Query Optimize r时，MySQL Query Optimizer 首先会对整条 Query 进行优化，处理掉一些常量表达式的预算，直接换算成常量值。并对 Query 中的查询条件进行简化和转换，如去掉一些无用或显而易见的条件、结构调整等。然后分析 Query 中的 Hint 信息（如果有），看显示 Hint 信息是否可以完全确定该 Query 的执行计划。如果没有 Hint 或 Hint 信息还不足以完全确定执行计划，则会读取所涉及对象的统计信息，根据 Query 进行写相应的计算分析，然后再得出最后的执行计划。</li>
</ol>
<h3 id="MySQL常见瓶颈"><a href="#MySQL常见瓶颈" class="headerlink" title="MySQL常见瓶颈"></a>MySQL常见瓶颈</h3><ul>
<li>CPU：CPU在饱和的时候一般发生在数据装入内存或从磁盘上读取数据时候</li>
<li>IO：磁盘I/O瓶颈发生在装入数据远大于内存容量的时候</li>
<li>服务器硬件的性能瓶颈：top，free，iostat 和 vmstat来查看系统的性能状态</li>
</ul>
<h3 id="性能下降SQL慢-执行时间长-等待时间长-原因分析"><a href="#性能下降SQL慢-执行时间长-等待时间长-原因分析" class="headerlink" title="性能下降SQL慢 执行时间长 等待时间长 原因分析"></a>性能下降SQL慢 执行时间长 等待时间长 原因分析</h3><ul>
<li>查询语句写的烂</li>
<li>索引失效（单值、复合）</li>
<li>关联查询太多join（设计缺陷或不得已的需求）</li>
<li>服务器调优及各个参数设置（缓冲、线程数等）</li>
</ul>
<h3 id="MySQL常见性能分析手段"><a href="#MySQL常见性能分析手段" class="headerlink" title="MySQL常见性能分析手段"></a>MySQL常见性能分析手段</h3><p>在优化MySQL时，通常需要对数据库进行分析，常见的分析手段有<strong>慢查询日志</strong>，<strong>EXPLAIN 分析查询</strong>，<strong>profiling分析</strong>以及<strong>show命令查询系统状态及系统变量</strong>，通过定位分析性能的瓶颈，才能更好的优化数据库系统的性能。</p>
<h3 id="性能瓶颈定位"><a href="#性能瓶颈定位" class="headerlink" title="性能瓶颈定位"></a>性能瓶颈定位</h3><p>我们可以通过 show 命令查看 MySQL 状态及变量，找到系统的瓶颈：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">Mysql&gt; show status ——显示状态信息（扩展show status like ‘XXX’）</span><br><span class="line"></span><br><span class="line">Mysql&gt; show variables ——显示系统变量（扩展show variables like ‘XXX’）</span><br><span class="line"></span><br><span class="line">Mysql&gt; show innodb status ——显示InnoDB存储引擎的状态</span><br><span class="line"></span><br><span class="line">Mysql&gt; show processlist ——查看当前SQL执行，包括执行状态、是否锁表等</span><br><span class="line"></span><br><span class="line">Shell&gt; mysqladmin variables -u username -p password——显示系统变量</span><br><span class="line"></span><br><span class="line">Shell&gt; mysqladmin extended-status -u username -p password——显示状态信息</span><br></pre></td></tr></table></figure>

<h3 id="Explain-执行计划"><a href="#Explain-执行计划" class="headerlink" title="Explain(执行计划)"></a>Explain(执行计划)</h3><p>是什么：使用 <strong>Explain</strong> 关键字可以模拟优化器执行SQL查询语句，从而知道 MySQL 是如何处理你的 SQL 语句的。分析你的查询语句或是表结构的性能瓶颈</p>
<p>能干吗：</p>
<ul>
<li>表的读取顺序</li>
<li>数据读取操作的操作类型</li>
<li>哪些索引可以使用</li>
<li>哪些索引被实际使用</li>
<li>表之间的引用</li>
<li>每张表有多少行被优化器查询</li>
</ul>
<p>怎么玩：</p>
<ul>
<li>Explain + SQL语句</li>
<li>执行计划包含的信息（如果有分区表的话还会有<strong>partitions</strong>）</li>
</ul>
<p><img src="https://gitee.com/wjxyzs/img/raw/master/img/1734bff38d5d8333.jpg" alt=""></p>
<p>各字段解释</p>
<ul>
<li><p><strong>id</strong>（select 查询的序列号，包含一组数字，表示查询中执行select子句或操作表的顺序）</p>
<ul>
<li>id相同，执行顺序从上往下</li>
<li>id全不同，如果是子查询，id的序号会递增，id值越大优先级越高，越先被执行</li>
<li>id部分相同，执行顺序是先按照数字大的先执行，然后数字相同的按照从上往下的顺序执行</li>
</ul>
</li>
<li><p><strong>select_type</strong>（查询类型，用于区别普通查询、联合查询、子查询等复杂查询）</p>
<ul>
<li><strong>SIMPLE</strong> ：简单的select查询，查询中不包含子查询或UNION</li>
<li><strong>PRIMARY</strong>：查询中若包含任何复杂的子部分，最外层查询被标记为PRIMARY</li>
<li><strong>SUBQUERY</strong>：在select或where列表中包含了子查询</li>
<li><strong>DERIVED</strong>：在from列表中包含的子查询被标记为DERIVED，MySQL会递归执行这些子查询，把结果放在临时表里</li>
<li><strong>UNION</strong>：若第二个select出现在UNION之后，则被标记为UNION，若UNION包含在from子句的子查询中，外层select将被标记为DERIVED</li>
<li><strong>UNION RESULT</strong>：从UNION表获取结果的select</li>
</ul>
</li>
<li><p><strong>table</strong>（显示这一行的数据是关于哪张表的）</p>
</li>
<li><p><strong>type</strong>（显示查询使用了那种类型，从最好到最差依次排列    <strong>system &gt; const &gt; eq_ref &gt; ref &gt; fulltext &gt; ref_or_null &gt; index_merge &gt; unique_subquery &gt; index_subquery &gt; range &gt; index &gt; ALL</strong> ）</p>
<ul>
<li>system：表只有一行记录（等于系统表），是 const 类型的特例，平时不会出现</li>
<li>const：表示通过索引一次就找到了，const 用于比较 primary key 或 unique 索引，因为只要匹配一行数据，所以很快，如将主键置于 where 列表中，mysql 就能将该查询转换为一个常量</li>
<li>eq_ref：唯一性索引扫描，对于每个索引键，表中只有一条记录与之匹配，常见于主键或唯一索引扫描</li>
<li>ref：非唯一性索引扫描，范围匹配某个单独值得所有行。本质上也是一种索引访问，他返回所有匹配某个单独值的行，然而，它可能也会找到多个符合条件的行，多以他应该属于查找和扫描的混合体</li>
<li>range：只检索给定范围的行，使用一个索引来选择行。key列显示使用了哪个索引，一般就是在你的where语句中出现了between、&lt;、&gt;、in等的查询，这种范围扫描索引比全表扫描要好，因为它只需开始于索引的某一点，而结束于另一点，不用扫描全部索引</li>
<li>index：Full Index Scan，index于ALL区别为index类型只遍历索引树。通常比ALL快，因为索引文件通常比数据文件小。（<strong>也就是说虽然all和index都是读全表，但index是从索引中读取的，而all是从硬盘中读的</strong>）</li>
<li>ALL：Full Table Scan，将遍历全表找到匹配的行</li>
</ul>
<p>tip: 一般来说，得保证查询至少达到range级别，最好到达ref</p>
</li>
<li><p><strong>possible_keys</strong>（显示可能应用在这张表中的索引，一个或多个，查询涉及到的字段若存在索引，则该索引将被列出，但不一定被查询实际使用）</p>
</li>
<li><p><strong>key</strong></p>
<ul>
<li>实际使用的索引，如果为NULL，则没有使用索引</li>
<li><strong>查询中若使用了覆盖索引，则该索引和查询的 select 字段重叠，仅出现在key列表中</strong></li>
</ul>
</li>
</ul>
<p><img src="https://gitee.com/wjxyzs/img/raw/master/img/1734bff38f6a6955.jpg" alt=""></p>
<ul>
<li><p>key_len</p>
<ul>
<li>表示索引中使用的字节数，可通过该列计算查询中使用的索引的长度。在不损失精确性的情况下，长度越短越好</li>
<li>key_len显示的值为索引字段的最大可能长度，并非实际使用长度，即key_len是根据表定义计算而得，不是通过表内检索出的</li>
</ul>
</li>
<li><p><strong>ref</strong> （显示索引的哪一列被使用了，如果可能的话，是一个常数。哪些列或常量被用于查找索引列上的值）</p>
</li>
<li><p><strong>rows</strong> （根据表统计信息及索引选用情况，大致估算找到所需的记录所需要读取的行数）</p>
</li>
<li><p>Extra</p>
<p>（包含不适合在其他列中显示但十分重要的额外信息）</p>
<ol>
<li>using filesort: 说明mysql会对数据使用一个外部的索引排序，不是按照表内的索引顺序进行读取。mysql中无法利用索引完成的排序操作称为“文件排序”。常见于order by和group by语句中</li>
<li>Using temporary：使用了临时表保存中间结果，mysql在对查询结果排序时使用临时表。常见于排序order by和分组查询group by。</li>
<li>using index：表示相应的select操作中使用了覆盖索引，避免访问了表的数据行，效率不错，如果同时出现using where，表明索引被用来执行索引键值的查找；否则索引被用来读取数据而非执行查找操作</li>
<li>using where：使用了where过滤</li>
<li>using join buffer：使用了连接缓存</li>
<li>impossible where：where子句的值总是false，不能用来获取任何元祖</li>
<li>select tables optimized away：在没有group by子句的情况下，基于索引优化操作或对于MyISAM存储引擎优化COUNT(*)操作，不必等到执行阶段再进行计算，查询执行计划生成的阶段即完成优化</li>
<li>distinct：优化distinct操作，在找到第一匹配的元祖后即停止找同样值的动作</li>
</ol>
</li>
</ul>
<p><strong>case</strong>:</p>
<p><img src="https://gitee.com/wjxyzs/img/raw/master/img/1734bff39882383d.jpg" alt=""></p>
<ol>
<li>第一行（执行顺序4）：id列为1，表示是union里的第一个select，select_type列的primary表示该查询为外层查询，table列被标记为，表示查询结果来自一个衍生表，其中derived3中3代表该查询衍生自第三个select查询，即id为3的select。【select <a href="http://d1.name" target="_blank" rel="noopener">d1.name</a>……】</li>
<li>第二行（执行顺序2）：id为3，是整个查询中第三个select的一部分。因查询包含在from中，所以为derived。【select id,name from t1 where other_column=’’】</li>
<li>第三行（执行顺序3）：select列表中的子查询select_type为subquery，为整个查询中的第二个select。【select id from t3】</li>
<li>第四行（执行顺序1）：select_type为union，说明第四个select是union里的第二个select，最先执行【select name,id from t2】</li>
<li>第五行（执行顺序5）：代表从union的临时表中读取行的阶段，table列的&lt;union1,4&gt;表示用第一个和第四个select的结果进行union操作。【两个结果union操作】</li>
</ol>
<h3 id="慢查询日志"><a href="#慢查询日志" class="headerlink" title="慢查询日志"></a>慢查询日志</h3><p>MySQL 的慢查询日志是 MySQL 提供的一种日志记录，它用来记录在 MySQL 中响应时间超过阈值的语句，具体指运行时间超过 <font color=red size=3><code>long_query_time</code></font> 值的 SQL，则会被记录到慢查询日志中。</p>
<ul>
<li><font color=red size=3><code>long_query_time</code></font>  的默认值为10，意思是运行10秒以上的语句</li>
<li>默认情况下，MySQL数据库没有开启慢查询日志，需要手动设置参数开启</li>
</ul>
<p><strong>查看开启状态</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">VARIABLES</span> <span class="keyword">LIKE</span> <span class="string">'%slow_query_log%'</span></span><br></pre></td></tr></table></figure>

<p><strong>开启慢查询日志</strong></p>
<ul>
<li>临时配置：</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; set global slow_query_log='ON';</span><br><span class="line">mysql&gt; set global slow_query_log_file='/var/lib/mysql/hostname-slow.log';</span><br><span class="line">mysql&gt; set global long_query_time=2;</span><br><span class="line">也可<span class="keyword">set</span>文件位置，系统会默认给一个缺省文件host_name-slow.log</span><br><span class="line"></span><br><span class="line">使用<span class="keyword">set</span>操作开启慢查询日志只对当前数据库生效，如果MySQL重启则会失效。</span><br></pre></td></tr></table></figure>

<ul>
<li><p>永久配置</p>
<p>修改配置文件my.cnf或my.ini，在[mysqld]一行下面加入两个配置参数</p>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">slow_query_log = ON</span><br><span class="line">slow_query_log_file = /var/lib/mysql/hostname-slow.log</span><br><span class="line">long_query_time = 3</span><br></pre></td></tr></table></figure>

<p>注：log-slow-queries 参数为慢查询日志存放的位置，一般这个目录要有 MySQL 的运行帐号的可写权限，一般都将这个目录设置为 MySQL 的数据存放目录；long_query_time=2 中的 2 表示查询超过两秒才记录；在my.cnf或者 my.ini 中添加 log-queries-not-using-indexes 参数，表示记录下没有使用索引的查询。</p>
<p>可以用 <font color=red size=3><code>select sleep(4)</code></font> 验证是否成功开启。</p>
<p>在生产环境中，如果手工分析日志，查找、分析SQL，还是比较费劲的，所以MySQL提供了日志分析工具<strong>mysqldumpslow</strong>。</p>
<p>通过 mysqldumpslow –help 查看操作帮助信息</p>
<ul>
<li><p>得到返回记录集最多的10个SQL</p>
<p><font color=red size=3><code>mysqldumpslow -s r -t 10 /var/lib/mysql/hostname-slow.log</code></font></p>
</li>
<li><p>得到访问次数最多的10个SQL</p>
<p><font color=red size=3><code>mysqldumpslow -s c -t 10 /var/lib/mysql/hostname-slow.log</code></font></p>
</li>
<li><p>得到按照时间排序的前10条里面含有左连接的查询语句</p>
<p><font color=red size=3><code>mysqldumpslow -s t -t 10 -g &quot;left join&quot; /var/lib/mysql/hostname-slow.log</code></font></p>
</li>
<li><p>也可以和管道配合使用</p>
<p><font color=red size=3><code>mysqldumpslow -s r -t 10 /var/lib/mysql/hostname-slow.log | more</code></font></p>
</li>
</ul>
<p><strong>也可使用 pt-query-digest 分析 RDS MySQL 慢查询日志</strong></p>
<h3 id="Show-Profile-分析查询"><a href="#Show-Profile-分析查询" class="headerlink" title="Show Profile 分析查询"></a>Show Profile 分析查询</h3><p>通过慢日志查询可以知道哪些 SQL 语句执行效率低下，通过 explain 我们可以得知 SQL 语句的具体执行情况，索引使用等，还可以结合<font color=red size=3><code>Show Profile</code></font>命令查看执行状态。</p>
<ul>
<li><p>Show Profile 是 MySQL 提供可以用来分析当前会话中语句执行的资源消耗情况。可以用于SQL的调优的测量</p>
</li>
<li><p>默认情况下，参数处于关闭状态，并保存最近15次的运行结果</p>
</li>
<li><p>分析步骤</p>
<ul>
<li><p>是否支持，看看当前的mysql版本是否支持</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt;Show  variables like &#39;profiling&#39;;  --默认是关闭，使用前需要开启</span><br></pre></td></tr></table></figure>
</li>
<li><p>开启功能，默认是关闭，使用前需要开启</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt;set profiling&#x3D;1;</span><br></pre></td></tr></table></figure>
</li>
<li><p>运行SQL</p>
</li>
<li><p>查看结果</p>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; show profiles;</span><br><span class="line">+<span class="comment">----------+------------+---------------------------------+</span></span><br><span class="line">| Query_ID | Duration | Query |</span><br><span class="line">+<span class="comment">----------+------------+---------------------------------+</span></span><br><span class="line">| 1 | 0.00385450 | <span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">"profiling"</span> |</span><br><span class="line">| <span class="number">2</span> | <span class="number">0.00170050</span> | <span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">"profiling"</span> |</span><br><span class="line">| <span class="number">3</span> | <span class="number">0.00038025</span> | <span class="keyword">select</span> * <span class="keyword">from</span> t_base_user |</span><br><span class="line">+<span class="comment">----------+------------+---------------------------------+</span></span><br></pre></td></tr></table></figure>

<ul>
<li>诊断SQL，show profile cpu,block io for query id(上一步前面的问题SQL数字号码)</li>
<li>日常开发需要注意的结论<ul>
<li>converting HEAP to MyISAM 查询结果太大，内存都不够用了往磁盘上搬了。</li>
<li>create tmp table 创建临时表，这个要注意</li>
<li>Copying to tmp table on disk 把内存临时表复制到磁盘</li>
<li>locked</li>
</ul>
</li>
</ul>
</li>
</ul>
<blockquote>
<p>查询中哪些情况不会使用索引？</p>
</blockquote>
<h3 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h3><h3 id="索引优化"><a href="#索引优化" class="headerlink" title="索引优化"></a>索引优化</h3><ol>
<li>全值匹配我最爱</li>
<li>最佳左前缀法则，比如建立了一个联合索引(a,b,c)，那么其实我们可利用的索引就有(a), (a,b), (a,b,c)</li>
<li>不在索引列上做任何操作（计算、函数、(自动or手动)类型转换），会导致索引失效而转向全表扫描</li>
<li>存储引擎不能使用索引中范围条件右边的列</li>
<li>尽量使用覆盖索引(只访问索引的查询(索引列和查询列一致))，减少select</li>
<li>is null ,is not null 也无法使用索引</li>
<li>like “xxxx%” 是可以用到索引的，like “%xxxx” 则不行(like “%xxx%” 同理)。like以通配符开头(‘%abc…’)索引失效会变成全表扫描的操作，</li>
<li>字符串不加单引号索引失效</li>
<li>少用or，用它来连接时会索引失效</li>
<li>&lt;，&lt;=，=，&gt;，&gt;=，BETWEEN，IN 可用到索引，&lt;&gt;，not in ，!= 则不行，会导致全表扫描</li>
</ol>
<p><strong>一般性建议</strong></p>
<ul>
<li>对于单键索引，尽量选择针对当前query过滤性更好的索引</li>
<li>在选择组合索引的时候，当前Query中过滤性最好的字段在索引字段顺序中，位置越靠前越好。</li>
<li>在选择组合索引的时候，尽量选择可以能够包含当前query中的where字句中更多字段的索引</li>
<li>尽可能通过分析统计信息和调整query的写法来达到选择合适索引的目的</li>
<li>少用Hint强制索引</li>
</ul>
<h3 id="查询优化"><a href="#查询优化" class="headerlink" title="查询优化"></a>查询优化</h3><p><strong>永远小标驱动大表（小的数据集驱动大的数据集）</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">slect * from A where id in (select id from B)`等价于</span><br><span class="line"><span class="comment">#等价于</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">id</span> <span class="keyword">from</span> B</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> A <span class="keyword">where</span> A.id=B.id</span><br></pre></td></tr></table></figure>

<p>当 B 表的数据集必须小于 A 表的数据集时，用 in 优于 exists</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> A <span class="keyword">where</span> <span class="keyword">exists</span> (<span class="keyword">select</span> <span class="number">1</span> <span class="keyword">from</span> B <span class="keyword">where</span> B.id=A.id)</span><br><span class="line"><span class="comment">#等价于</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> A</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> B <span class="keyword">where</span> B.id = A.id<span class="string">`</span></span><br></pre></td></tr></table></figure>

<p>当 A 表的数据集小于B表的数据集时，用 exists优于用 in</p>
<p>注意：A表与B表的ID字段应建立索引。</p>
<p><strong>order by关键字优化</strong></p>
<ul>
<li>order by子句，尽量使用 Index 方式排序，避免使用 FileSort 方式排序</li>
<li>MySQL 支持两种方式的排序，FileSort 和 Index，Index效率高，它指 MySQL 扫描索引本身完成排序，FileSort 效率较低；</li>
<li>ORDER BY 满足两种情况，会使用Index方式排序；①ORDER BY语句使用索引最左前列 ②使用where子句与ORDER BY子句条件列组合满足索引最左前列</li>
<li>尽可能在索引列上完成排序操作，遵照索引建的最佳最前缀</li>
<li>如果不在索引列上，filesort 有两种算法，mysql就要启动双路排序和单路排序<ul>
<li>双路排序：MySQL 4.1之前是使用双路排序,字面意思就是两次扫描磁盘，最终得到数据</li>
<li>单路排序：从磁盘读取查询需要的所有列，按照order by 列在 buffer对它们进行排序，然后扫描排序后的列表进行输出，效率高于双路排序</li>
</ul>
</li>
<li>优化策略<ul>
<li>增大sort_buffer_size参数的设置</li>
<li>增大max_lencth_for_sort_data参数的设置</li>
</ul>
</li>
</ul>
<p><strong>GROUP BY关键字优化</strong></p>
<ul>
<li>group by实质是先排序后进行分组，遵照索引建的最佳左前缀</li>
<li>当无法使用索引列，增大 <code>max_length_for_sort_data</code> 参数的设置，增大<code>sort_buffer_size</code>参数的设置</li>
<li>where高于having，能写在where限定的条件就不要去having限定了</li>
</ul>
<h3 id="数据类型优化"><a href="#数据类型优化" class="headerlink" title="数据类型优化"></a>数据类型优化</h3><p>MySQL 支持的数据类型非常多，选择正确的数据类型对于获取高性能至关重要。不管存储哪种类型的数据，下面几个简单的原则都有助于做出更好的选择。</p>
<ul>
<li><p>更小的通常更好：一般情况下，应该尽量使用可以正确存储数据的最小数据类型。</p>
<p>简单就好：简单的数据类型通常需要更少的CPU周期。例如，整数比字符操作代价更低，因为字符集和校对规则（排序规则）使字符比较比整型比较复杂。</p>
</li>
<li><p>尽量避免NULL：通常情况下最好指定列为NOT NULL</p>
</li>
</ul>
<hr>
<h2 id="九、分区、分表、分库"><a href="#九、分区、分表、分库" class="headerlink" title="九、分区、分表、分库"></a>九、分区、分表、分库</h2><hr>
<h3 id="MySQL分区"><a href="#MySQL分区" class="headerlink" title="MySQL分区"></a>MySQL分区</h3><p>一般情况下我们创建的表对应一组存储文件，使用<code>MyISAM</code>存储引擎时是一个<code>.MYI</code>和<code>.MYD</code>文件，使用<code>Innodb</code>存储引擎时是一个<code>.ibd</code>和<code>.frm</code>（表结构）文件。</p>
<p>当数据量较大时（一般千万条记录级别以上），MySQL的性能就会开始下降，这时我们就需要将数据分散到多组存储文件，保证其单个文件的执行效率</p>
<p><strong>能干嘛</strong></p>
<ul>
<li>逻辑数据分割</li>
<li>提高单一的写和读应用速度</li>
<li>提高分区范围读查询的速度</li>
<li>分割数据能够有多个不同的物理文件路径</li>
<li>高效的保存历史数据</li>
</ul>
<p><strong>怎么玩</strong></p>
<p>首先查看当前数据库是否支持分区</p>
<ul>
<li><p>MySQL5.6以及之前版本：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SHOW VARIABLES LIKE &#39;%partition%&#39;;</span><br></pre></td></tr></table></figure>
</li>
<li><p>MySQL5.6：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show plugins;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p><strong>分区类型及操作</strong></p>
<ul>
<li><p><strong>RANGE分区</strong>：基于属于一个给定连续区间的列值，把多行分配给分区。mysql将会根据指定的拆分策略，,把数据放在不同的表文件上。相当于在文件上,被拆成了小块.但是,对外给客户的感觉还是一张表，透明的。</p>
<p>按照 range 来分，就是每个库一段连续的数据，这个一般是按比如<strong>时间范围</strong>来的，比如交易表啊，销售表啊等，可以根据年月来存放数据。可能会产生热点问题，大量的流量都打在最新的数据上了。</p>
<p>range 来分，好处在于说，扩容的时候很简单。</p>
</li>
<li><p><strong>LIST分区</strong>：类似于按RANGE分区，每个分区必须明确定义。它们的主要区别在于，LIST分区中每个分区的定义和选择是基于某列的值从属于一个值列表集中的一个值，而RANGE分区是从属于一个连续区间值的集合。</p>
</li>
<li><p><strong>HASH分区</strong>：基于用户定义的表达式的返回值来进行选择的分区，该表达式使用将要插入到表中的这些行的列值进行计算。这个函数可以包含MySQL 中有效的、产生非负整数值的任何表达式。</p>
<p>hash 分发，好处在于说，可以平均分配每个库的数据量和请求压力；坏处在于说扩容起来比较麻烦，会有一个数据迁移的过程，之前的数据需要重新计算 hash 值重新分配到不同的库或表</p>
</li>
<li><p><strong>KEY分区</strong>：类似于按HASH分区，区别在于KEY分区只支持计算一列或多列，且MySQL服务器提供其自身的哈希函数。必须有一列或多列包含整数值。</p>
</li>
</ul>
<p><strong>看上去分区表很帅气，为什么大部分互联网还是更多的选择自己分库分表来水平扩展咧？</strong></p>
<ul>
<li>分区表，分区键设计不太灵活，如果不走分区键，很容易出现全表锁</li>
<li>一旦数据并发量上来，如果在分区表实施关联，就是一个灾难</li>
<li>自己分库分表，自己掌控业务场景与访问模式，可控。分区表，研发写了一个sql，都不确定mysql是怎么玩的，不太可控</li>
</ul>
<blockquote>
<p>随着业务的发展，业务越来越复杂，应用的模块越来越多，总的数据量很大，高并发读写操作均超过单个数据库服务器的处理能力怎么办？</p>
</blockquote>
<p>这个时候就出现了<strong>数据分片</strong>，数据分片指按照某个维度将存放在单一数据库中的数据分散地存放至多个数据库或表中。数据分片的有效手段就是对关系型数据库进行分库和分表。</p>
<p>区别于分区的是，分区一般都是放在单机里的，用的比较多的是时间范围分区，方便归档。只不过分库分表需要代码实现，分区则是mysql内部实现。分库分表和分区并不冲突，可以结合使用。</p>
<blockquote>
<p>说说分库与分表的设计</p>
</blockquote>
<h3 id="MySQL分表"><a href="#MySQL分表" class="headerlink" title="MySQL分表"></a>MySQL分表</h3><p>分表有两种分割方式，一种垂直拆分，另一种水平拆分。</p>
<ul>
<li><p><strong>垂直拆分</strong></p>
<p>垂直分表，通常是按照业务功能的使用频次，把主要的、热门的字段放在一起做为主要表。然后把不常用的，按照各自的业务属性进行聚集，拆分到不同的次要表中；主要表和次要表的关系一般都是一对一的。</p>
</li>
<li><p><strong>水平拆分(数据分片)</strong></p>
<p>单表的容量不超过500W，否则建议水平拆分。是把一个表复制成同样表结构的不同表，然后把数据按照一定的规则划分，分别存储到这些表中，从而保证单表的容量不会太大，提升性能；当然这些结构一样的表，可以放在一个或多个数据库中。</p>
<p>水平分割的几种方法：</p>
<ul>
<li>使用MD5哈希，做法是对UID进行md5加密，然后取前几位（我们这里取前两位），然后就可以将不同的UID哈希到不同的用户表（user_xx）中了。</li>
<li>还可根据时间放入不同的表，比如：article_201601，article_201602。</li>
<li>按热度拆分，高点击率的词条生成各自的一张表，低热度的词条都放在一张大表里，待低热度的词条达到一定的贴数后，再把低热度的表单独拆分成一张表。</li>
<li>根据ID的值放入对应的表，第一个表user_0000，第二个100万的用户数据放在第二 个表user_0001中，随用户增加，直接添加用户表就行了。</li>
</ul>
</li>
</ul>
<p><img src="https://gitee.com/wjxyzs/img/raw/master/img/1734bff39ffffdd1.jpg" alt=""></p>
<h3 id="MySQL分库"><a href="#MySQL分库" class="headerlink" title="MySQL分库"></a>MySQL分库</h3><blockquote>
<p>为什么要分库?</p>
</blockquote>
<p>数据库集群环境后都是多台 slave，基本满足了读取操作; 但是写入或者说大数据、频繁的写入操作对master性能影响就比较大，这个时候，单库并不能解决大规模并发写入的问题，所以就会考虑分库。</p>
<blockquote>
<p>分库是什么？</p>
</blockquote>
<p>一个库里表太多了，导致了海量数据，系统性能下降，把原本存储于一个库的表拆分存储到多个库上， 通常是将表按照功能模块、关系密切程度划分出来，部署到不同库上。</p>
<p>优点：</p>
<ul>
<li>减少增量数据写入时的锁对查询的影响</li>
<li>由于单表数量下降，常见的查询操作由于减少了需要扫描的记录，使得单表单次查询所需的检索行数变少，减少了磁盘IO，时延变短</li>
</ul>
<p>但是它无法解决单表数据量太大的问题</p>
<p><strong>分库分表后的难题</strong></p>
<p>分布式事务的问题，数据的完整性和一致性问题。</p>
<p>数据操作维度问题：用户、交易、订单各个不同的维度，用户查询维度、产品数据分析维度的不同对比分析角度。 跨库联合查询的问题，可能需要两次查询 跨节点的count、order by、group by以及聚合函数问题，可能需要分别在各个节点上得到结果后在应用程序端进行合并 额外的数据管理负担，如：访问数据表的导航定位 额外的数据运算压力，如：需要在多个节点执行，然后再合并计算程序编码开发难度提升，没有太好的框架解决，更多依赖业务看如何分，如何合，是个难题。</p>
<blockquote>
<p>配主从，正经公司的话，也不会让 Javaer 去搞的，但还是要知道</p>
</blockquote>
<h2 id="十、主从复制"><a href="#十、主从复制" class="headerlink" title="十、主从复制"></a>十、主从复制</h2><hr>
<h3 id="复制的基本原理"><a href="#复制的基本原理" class="headerlink" title="复制的基本原理"></a>复制的基本原理</h3><ul>
<li><p>slave 会从 master 读取 binlog 来进行数据同步</p>
</li>
<li><p>三个步骤</p>
<ol>
<li>master将改变记录到二进制日志（binary log）。这些记录过程叫做二进制日志事件，binary log events；</li>
<li>salve 将 master 的 binary log events 拷贝到它的中继日志（relay log）;</li>
<li>slave 重做中继日志中的事件，将改变应用到自己的数据库中。MySQL 复制是异步且是串行化的。</li>
</ol>
<p><img src="https://gitee.com/wjxyzs/img/raw/master/img/1734bff3c7c7b231.jpg" alt=""></p>
</li>
</ul>
<h3 id="复制的基本原则"><a href="#复制的基本原则" class="headerlink" title="复制的基本原则"></a>复制的基本原则</h3><ul>
<li>每个 slave只有一个 master</li>
<li>每个 salve只能有一个唯一的服务器 ID</li>
<li>每个master可以有多个salve</li>
</ul>
<h3 id="复制的最大问题"><a href="#复制的最大问题" class="headerlink" title="复制的最大问题"></a>复制的最大问题</h3><ul>
<li>延时</li>
</ul>
<hr>
<h2 id="十一、其他问题"><a href="#十一、其他问题" class="headerlink" title="十一、其他问题"></a>十一、其他问题</h2><hr>
<h3 id="说一说三个范式"><a href="#说一说三个范式" class="headerlink" title="说一说三个范式"></a>说一说三个范式</h3><ul>
<li>第一范式（1NF）：数据库表中的字段都是单一属性的，不可再分。这个单一属性由基本类型构成，包括整型、实数、字符型、逻辑型、日期型等。</li>
<li>第二范式（2NF）：数据库表中不存在非关键字段对任一候选关键字段的部分函数依赖（部分函数依赖指的是存在组合关键字中的某些字段决定非关键字段的情况），也即所有非关键字段都完全依赖于任意一组候选关键字。</li>
<li>第三范式（3NF）：在第二范式的基础上，数据表中如果不存在非关键字段对任一候选关键字段的传递函数依赖则符合第三范式。所谓传递函数依赖，指的是如 果存在”A → B → C”的决定关系，则C传递函数依赖于A。因此，满足第三范式的数据库表应该不存在如下依赖关系： 关键字段 → 非关键字段 x → 非关键字段y</li>
</ul>
<h3 id="百万级别或以上的数据如何删除"><a href="#百万级别或以上的数据如何删除" class="headerlink" title="百万级别或以上的数据如何删除"></a>百万级别或以上的数据如何删除</h3><p>关于索引：由于索引需要额外的维护成本，因为索引文件是单独存在的文件,所以当我们对数据的增加,修改,删除,都会产生额外的对索引文件的操作,这些操作需要消耗额外的IO,会降低增/改/删的执行效率。所以，在我们删除数据库百万级别数据的时候，查询MySQL官方手册得知删除数据的速度和创建的索引数量是成正比的。</p>
<ol>
<li>所以我们想要删除百万数据的时候可以先删除索引（此时大概耗时三分多钟）</li>
<li>然后删除其中无用数据（此过程需要不到两分钟）</li>
<li>删除完成后重新创建索引(此时数据较少了)创建索引也非常快，约十分钟左右。</li>
<li>与之前的直接删除绝对是要快速很多，更别说万一删除中断,一切删除会回滚。那更是坑了。</li>
</ol>
<h2 id="参考与感谢："><a href="#参考与感谢：" class="headerlink" title="参考与感谢："></a>参考与感谢：</h2><p><a href="https://zhuanlan.zhihu.com/p/29150809" target="_blank" rel="noopener">zhuanlan.zhihu.com/p/29150809</a></p>
<p><a href="https://juejin.im/post/5e3eb616f265da570d734dcb#heading-105" target="_blank" rel="noopener">juejin.im/post/5e3eb6…</a></p>
<p><a href="https://blog.csdn.net/yin767833376/article/details/81511377" target="_blank" rel="noopener">blog.csdn.net/yin76783337…</a></p>
]]></content>
      <categories>
        <category>直击面试</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
</search>
