<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>[django项目搭建]</title>
    <url>/2019/07/04/django%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h3 id="软件开发架构"><a href="#软件开发架构" class="headerlink" title="软件开发架构"></a>软件开发架构</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cs架构</span><br><span class="line">bs架构</span><br><span class="line"><span class="comment"># 本质bs也是cs</span></span><br></pre></td></tr></table></figure>

<h3 id="纯手撸web框架"><a href="#纯手撸web框架" class="headerlink" title="纯手撸web框架"></a>纯手撸web框架</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># HTTP协议</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">网络协议</span></span><br><span class="line"><span class="string">HTTP协议				数据传输是明文</span></span><br><span class="line"><span class="string">HTTPS协议				数据传输是密文</span></span><br><span class="line"><span class="string">websocket协议		数据传输是密文</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">四大特性</span></span><br><span class="line"><span class="string">	1.基于请求响应</span></span><br><span class="line"><span class="string">	2.基于TCP、IP作用于应用层之上的协议</span></span><br><span class="line"><span class="string">	3.无状态</span></span><br><span class="line"><span class="string">	4.短/无链接</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">数据格式</span></span><br><span class="line"><span class="string">	请求首行</span></span><br><span class="line"><span class="string">	请求头</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">	请求体</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">响应状态码</span></span><br><span class="line"><span class="string">	1XX</span></span><br><span class="line"><span class="string">	2XX			200</span></span><br><span class="line"><span class="string">	3XX			</span></span><br><span class="line"><span class="string">	4XX			403 404</span></span><br><span class="line"><span class="string">	5XX			500</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment"># 如何做到后缀的不同返回不同的内容</span></span><br><span class="line">	<span class="comment"># 拿到用户输入的后缀 做判断 </span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 不足之处</span></span><br><span class="line">	<span class="number">1.</span>代码重复(服务端代码所有人都要重复写)</span><br><span class="line">  <span class="number">2.</span>手动处理http格式的数据 并且只能拿到url后缀 其他数据获取繁琐(数据格式一样处理的代码其实也大致一样 重复写)</span><br><span class="line">  <span class="number">3.</span>并发的问题</span><br></pre></td></tr></table></figure>

<h3 id="借助于wsgiref模块"><a href="#借助于wsgiref模块" class="headerlink" title="借助于wsgiref模块"></a>借助于wsgiref模块</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">urls.py						路由与视图函数对应关系</span></span><br><span class="line"><span class="string">views.py					视图函数(后端业务逻辑)</span></span><br><span class="line"><span class="string">templates文件夹		专门用来存储html文件</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment"># 按照功能的不同拆分之后 后续添加功能只需要在urls.py书写对应关系然后取views.py书写业务逻辑即可</span></span><br></pre></td></tr></table></figure>

<h3 id="动静态网页"><a href="#动静态网页" class="headerlink" title="动静态网页"></a>动静态网页</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">静态网页</span></span><br><span class="line"><span class="string">	页面上的数据是直接写死的 万年不变</span></span><br><span class="line"><span class="string">动态网页</span></span><br><span class="line"><span class="string">	数据是实时获取的</span></span><br><span class="line"><span class="string">	eg:</span></span><br><span class="line"><span class="string">		1.后端获取当前时间展示到html页面上</span></span><br><span class="line"><span class="string">		2.数据是从数据库中获取的展示到html页面上</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 动态网页制作</span></span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_time</span><span class="params">(env)</span>:</span></span><br><span class="line">    current_time = datetime.datetime.now().strftime(<span class="string">'%Y-%m-%d %X'</span>)</span><br><span class="line">    <span class="comment"># 如何将后端获取到的数据"传递"给html文件？</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">r'templates/03 mytime.html'</span>,<span class="string">'r'</span>,encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        data = f.read()</span><br><span class="line">        <span class="comment"># data就是一堆字符串</span></span><br><span class="line">    data = data.replace(<span class="string">'dwadasdsadsadasdas'</span>,current_time)   <span class="comment"># 在后端将html页面处理好之后再返回给前端</span></span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将一个字典传递给html文件 并且可以在文件上方便快捷的操作字典数据</span></span><br><span class="line"><span class="keyword">from</span> jinja2 <span class="keyword">import</span> Template</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_dict</span><span class="params">(env)</span>:</span></span><br><span class="line">    user_dic = &#123;<span class="string">'username'</span>:<span class="string">'jason'</span>,<span class="string">'age'</span>:<span class="number">18</span>,<span class="string">'hobby'</span>:<span class="string">'read'</span>&#125;</span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">r'templates/04 get_dict.html'</span>,<span class="string">'r'</span>,encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        data = f.read()</span><br><span class="line">    tmp = Template(data)</span><br><span class="line">    res = tmp.render(user=user_dic)</span><br><span class="line">    <span class="comment"># 给get_dict.html传递了一个值 页面上通过变量名user就能够拿到user_dict</span></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="comment"># 后端获取数据库中数据展示到前端页面</span></span><br></pre></td></tr></table></figure>

<h3 id="模版语法之Jinja2模块"><a href="#模版语法之Jinja2模块" class="headerlink" title="模版语法之Jinja2模块"></a>模版语法之Jinja2模块</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip3 install jinja2</span><br><span class="line"><span class="string">"""模版语法是在后端起作用的"""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 模版语法(非常贴近python语法)</span></span><br><span class="line">&#123;&#123; user &#125;&#125;</span><br><span class="line">&#123;&#123; user.get(<span class="string">'username'</span>)&#125;&#125;</span><br><span class="line">&#123;&#123; user.age &#125;&#125;</span><br><span class="line">&#123;&#123; user[<span class="string">'hobby'</span>] &#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;% <span class="keyword">for</span> user_dict <span class="keyword">in</span> user_list %&#125;</span><br><span class="line">                        &lt;tr&gt;</span><br><span class="line">                            &lt;td&gt;&#123;&#123; user_dict.id&#125;&#125;&lt;/td&gt;</span><br><span class="line">                            &lt;td&gt;&#123;&#123; user_dict.username&#125;&#125;&lt;/td&gt;</span><br><span class="line">                            &lt;td&gt;&#123;&#123; user_dict.password&#125;&#125;&lt;/td&gt;</span><br><span class="line">                            &lt;td&gt;&#123;&#123; user_dict.hobby&#125;&#125;&lt;/td&gt;</span><br><span class="line">                        &lt;/tr&gt;</span><br><span class="line">&#123;% endfor%&#125;</span><br></pre></td></tr></table></figure>

<h3 id="自定义简易版本web框架请求流程图"><a href="#自定义简易版本web框架请求流程图" class="headerlink" title="自定义简易版本web框架请求流程图"></a>自定义简易版本web框架请求流程图</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">wsgiref模块</span></span><br><span class="line"><span class="string">	1.请求来的时候解析http格式的数据 封装成大字典</span></span><br><span class="line"><span class="string">	2.响应走的时候给数据打包成符合http格式 再返回给浏览器</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<h3 id="python三大主流web框架"><a href="#python三大主流web框架" class="headerlink" title="python三大主流web框架"></a>python三大主流web框架</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">django</span></span><br><span class="line"><span class="string">	特点:大而全 自带的功能特别特别特别的多 类似于航空母舰</span></span><br><span class="line"><span class="string">	不足之处:</span></span><br><span class="line"><span class="string">		有时候过于笨重</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">flask</span></span><br><span class="line"><span class="string">	特点:小而精  自带的功能特别特别特别的少 类似于游骑兵</span></span><br><span class="line"><span class="string">	第三方的模块特别特别特别的多，如果将flask第三方的模块加起来完全可以盖过django</span></span><br><span class="line"><span class="string">	并且也越来越像django</span></span><br><span class="line"><span class="string">	不足之处:</span></span><br><span class="line"><span class="string">		比较依赖于第三方的开发者</span></span><br><span class="line"><span class="string">		</span></span><br><span class="line"><span class="string">tornado</span></span><br><span class="line"><span class="string">	特点:异步非阻塞 支持高并发</span></span><br><span class="line"><span class="string">		牛逼到甚至可以开发游戏服务器</span></span><br><span class="line"><span class="string">	不足之处:</span></span><br><span class="line"><span class="string">		暂时你不会</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">A:socket部分</span><br><span class="line">B:路由与视图函数对应关系(路由匹配)</span><br><span class="line">C:模版语法</span><br><span class="line"></span><br><span class="line">django</span><br><span class="line">	A用的是别人的		wsgiref模块</span><br><span class="line">  B用的是自己的</span><br><span class="line">  C用的是自己的(没有jinja2好用 但是也很方便)</span><br><span class="line"></span><br><span class="line">flask</span><br><span class="line">	A用的是别人的		werkzeug(内部还是wsgiref模块)</span><br><span class="line">  B自己写的</span><br><span class="line">  C用的别人的(jinja2)</span><br><span class="line"></span><br><span class="line">tornado</span><br><span class="line">	A，B，C都是自己写的</span><br></pre></td></tr></table></figure>

<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 如何让你的计算机能够正常的启动django项目</span></span><br><span class="line">	<span class="number">1.</span>计算机的名称不能有中文</span><br><span class="line">  <span class="number">2.</span>一个pycharm窗口只开一个项目</span><br><span class="line">  <span class="number">3.</span>项目里面所有的文件也尽量不要出现中文</span><br><span class="line">  <span class="number">4.</span>python解释器尽量使用<span class="number">3.4</span>~<span class="number">3.6</span>之间的版本</span><br><span class="line">  	(如果你的项目报错 你点击最后一个报错信息</span><br><span class="line">    去源码中把逗号删掉)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># django版本问题</span></span><br><span class="line">	<span class="number">1.</span>X <span class="number">2.</span>X <span class="number">3.</span>X(直接忽略)</span><br><span class="line">  <span class="number">1.</span>X和<span class="number">2.</span>X本身差距也不大 我们讲解主要以<span class="number">1.</span>X为例 会讲解<span class="number">2.</span>X区别</span><br><span class="line">  公司之前用的<span class="number">1.8</span> 满满过渡到了<span class="number">1.11</span>版本 有一些项目用的<span class="number">2.0</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># django安装</span></span><br><span class="line">	pip3 install django==<span class="number">1.11</span><span class="number">.11</span></span><br><span class="line">  如果已经安装了其他版本 无需自己卸载</span><br><span class="line">  直接重新装 会自动卸载安装新的</span><br><span class="line">  </span><br><span class="line">  如果报错 看看是不是timeout 如果是 那么只是网速波动</span><br><span class="line">  重新安装即可</span><br><span class="line">  </span><br><span class="line">  验证是否安装成功的方式<span class="number">1</span></span><br><span class="line">  	终端输入django-admin看看有没有反应</span><br></pre></td></tr></table></figure>

<h3 id="django基本操作"><a href="#django基本操作" class="headerlink" title="django基本操作"></a>django基本操作</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 命令行操作</span></span><br><span class="line">	<span class="comment"># 1.创建django项目</span></span><br><span class="line">  	<span class="string">"""</span></span><br><span class="line"><span class="string">  	你可以先切换到对应的D盘 然后再创建</span></span><br><span class="line"><span class="string">  	"""</span></span><br><span class="line">  	django-admin startproject mysite</span><br><span class="line">    </span><br><span class="line">    	mysite文件夹</span><br><span class="line">      	manage.py</span><br><span class="line">      	mysite文件夹</span><br><span class="line">        	__init__.py</span><br><span class="line">        	settings.py</span><br><span class="line">          urls.py</span><br><span class="line">          wsgi.py</span><br><span class="line"> <span class="comment"># 2.启动django项目</span></span><br><span class="line">	<span class="string">"""</span></span><br><span class="line"><span class="string">		一定要先切换到项目目录下	</span></span><br><span class="line"><span class="string">		cd /mysite</span></span><br><span class="line"><span class="string">	"""</span></span><br><span class="line">  python3 manage.py runserver</span><br><span class="line">  <span class="comment"># http://127.0.0.1:8000/</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 3.创建应用</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">Next, start your first app by running python manage.py startapp [app_label].</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">	python3 manage.py startapp app01</span><br><span class="line">    应用名应该做到见名知意</span><br><span class="line">      user</span><br><span class="line">      order</span><br><span class="line">      web</span><br><span class="line">      ...</span><br><span class="line">      但是我们教学统一就用app01/<span class="number">02</span>/<span class="number">03</span>/<span class="number">04</span></span><br><span class="line">      </span><br><span class="line">	有很多文件</span><br><span class="line">  </span><br><span class="line"><span class="comment"># pycharm操作</span></span><br><span class="line">	<span class="comment"># 1 new project 选择左侧第二个django即可</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment"># 2 启动</span></span><br><span class="line">  		<span class="number">1.</span>还是用命令行启动</span><br><span class="line">    	<span class="number">2.</span>点击绿色小箭头即可</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 3 创建应用</span></span><br><span class="line">  		<span class="number">1.</span>pycharm提供的终端直接输入完整命令</span><br><span class="line">    	<span class="number">2.</span>pycharm </span><br><span class="line">      		tools </span><br><span class="line">        		run manage.py task提示(前期不要用 给我背完整命令)</span><br><span class="line"> <span class="comment"># 4 修改端口号以及创建server	</span></span><br><span class="line">		edit confi....</span><br></pre></td></tr></table></figure>

<h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">django是一款专门用来开发app的web框架</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">django框架就类似于是一所大学(空壳子)</span></span><br><span class="line"><span class="string">app就类似于大学里面各个学院(具体功能的app)</span></span><br><span class="line"><span class="string">	比如开发淘宝</span></span><br><span class="line"><span class="string">		订单相关</span></span><br><span class="line"><span class="string">		用户相关</span></span><br><span class="line"><span class="string">		投诉相关</span></span><br><span class="line"><span class="string">		创建不同的app对应不同的功能</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">	选课系统</span></span><br><span class="line"><span class="string">		学生功能</span></span><br><span class="line"><span class="string">		老师功能</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">一个app就是一个独立的功能模块</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">***********************创建的应用一定要去配置文件中注册**********************</span><br><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">'django.contrib.admin'</span>,</span><br><span class="line">    <span class="string">'django.contrib.auth'</span>,</span><br><span class="line">    <span class="string">'django.contrib.contenttypes'</span>,</span><br><span class="line">    <span class="string">'django.contrib.sessions'</span>,</span><br><span class="line">    <span class="string">'django.contrib.messages'</span>,</span><br><span class="line">    <span class="string">'django.contrib.staticfiles'</span>,</span><br><span class="line">    <span class="string">'app01.apps.App01Config'</span>,  <span class="comment"># 全写</span></span><br><span class="line">  	<span class="string">'app01'</span>,			 <span class="comment"># 简写</span></span><br><span class="line">]</span><br><span class="line"><span class="comment"># 创建出来的的应用第一步先去配置文件中注册 其他的先不要给我干</span></span><br><span class="line">ps:你在用pycharm创建项目的时候 pycharm可以帮你创建一个app并且自动注册</span><br><span class="line">***********************************************************************</span><br></pre></td></tr></table></figure>

<h3 id="主要文件介绍"><a href="#主要文件介绍" class="headerlink" title="主要文件介绍"></a>主要文件介绍</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">-mysite项目文件夹</span><br><span class="line">	--mysite文件夹</span><br><span class="line">  	---settings.py	配置文件</span><br><span class="line">    ---urls.py			路由与视图函数对应关系(路由层)</span><br><span class="line">    ---wsgi.py			wsgiref模块(不考虑)</span><br><span class="line">  --manage.py				django的入口文件</span><br><span class="line">  --db.sqlite3			django自带的sqlite3数据库(小型数据库 功能不是很多还有bug)</span><br><span class="line">  --app01文件夹</span><br><span class="line">  	---admin.py			django后台管理</span><br><span class="line">    ---apps.py			注册使用</span><br><span class="line">    ---migrations文件夹		数据库迁移记录</span><br><span class="line">    ---models.py		数据库相关的 模型类(orm)</span><br><span class="line">  	---tests.py			测试文件</span><br><span class="line">    ---views.py			视图函数(视图层)</span><br></pre></td></tr></table></figure>

<h3 id="命令行与pycharm创建的区别"><a href="#命令行与pycharm创建的区别" class="headerlink" title="命令行与pycharm创建的区别"></a>命令行与pycharm创建的区别</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1 命令行创建不会自动有templatew文件夹 需要你自己手动创建而pycharm会自动帮你创建并且还会自动在配置文件中配置对应的路径</span></span><br><span class="line"><span class="comment"># pycharm创建</span></span><br><span class="line">TEMPLATES = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">'BACKEND'</span>: <span class="string">'django.template.backends.django.DjangoTemplates'</span>,</span><br><span class="line">        <span class="string">'DIRS'</span>: [os.path.join(BASE_DIR, <span class="string">'templates'</span>)]</span><br><span class="line">]</span><br><span class="line"><span class="comment"># 命令行创建</span></span><br><span class="line">TEMPLATES = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">'BACKEND'</span>: <span class="string">'django.template.backends.django.DjangoTemplates'</span>,</span><br><span class="line">        <span class="string">'DIRS'</span>: [],</span><br><span class="line">]</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">也就意味着你在用命令创建django项目的时候不单单需要创建templates文件夹还需要去配置文件中配置路径</span></span><br><span class="line"><span class="string">'DIRS': [os.path.join(BASE_DIR, 'templates')]</span></span><br></pre></td></tr></table></figure>

<h3 id="django小白必会三板斧"><a href="#django小白必会三板斧" class="headerlink" title="django小白必会三板斧"></a>django小白必会三板斧</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">HttpResponse</span></span><br><span class="line"><span class="string">	返回字符串类型的数据</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">render</span></span><br><span class="line"><span class="string">	返回html文件的</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">redirect</span></span><br><span class="line"><span class="string">	重定向</span></span><br><span class="line"><span class="string">	  return redirect('https://www.mzitu.com/')</span></span><br><span class="line"><span class="string">    return redirect('/home/')</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>django框架</tag>
      </tags>
  </entry>
  <entry>
    <title>[request方法与orm初识]</title>
    <url>/2019/07/04/request%E6%96%B9%E6%B3%95%E4%B8%8Eorm%E5%88%9D%E8%AF%86/</url>
    <content><![CDATA[<h3 id="静态文件配置"><a href="#静态文件配置" class="headerlink" title="静态文件配置"></a>静态文件配置</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 登陆功能</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">我们将html文件默认都放在templates文件夹下</span></span><br><span class="line"><span class="string">我们将网站所使用的静态文件默认都放在static文件夹下</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">静态文件</span></span><br><span class="line"><span class="string">	前端已经写好了的 能够直接调用使用的文件</span></span><br><span class="line"><span class="string">		网站写好的js文件</span></span><br><span class="line"><span class="string">		网站写好的css文件</span></span><br><span class="line"><span class="string">		网站用到的图片文件</span></span><br><span class="line"><span class="string">		第三方前端框架</span></span><br><span class="line"><span class="string">		...</span></span><br><span class="line"><span class="string">		拿来就可以直接使用的</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment"># django默认是不会自动帮你创建static文件夹 需要你自己手动创建</span></span><br><span class="line">一般情况下我们在static文件夹内还会做进一步的划分处理</span><br><span class="line">	-static</span><br><span class="line">  	--js</span><br><span class="line">    --css</span><br><span class="line">    --img</span><br><span class="line">    其他第三方文件</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">在浏览器中输入url能够看到对应的资源</span></span><br><span class="line"><span class="string">是因为后端提前开设了该资源的借口</span></span><br><span class="line"><span class="string">如果访问不到资源 说明后端没有开设该资源的借口</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">http://127.0.0.1:8000/static/bootstrap-3.3.7-dist/css/bootstrap.min.css</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 静态文件配置</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">****************************************************************</span></span><br><span class="line"><span class="string">当你在写django项目的时候 可能会出现后端代码修改了但是前端页面没有变化的情况</span></span><br><span class="line"><span class="string">	1.你在同一个端口开了好几个django项目 </span></span><br><span class="line"><span class="string">		一直在跑的其实是第一个django项目</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">	2.浏览器缓存的问题</span></span><br><span class="line"><span class="string">		settings</span></span><br><span class="line"><span class="string">			network</span></span><br><span class="line"><span class="string">				disable cache 勾选上	</span></span><br><span class="line"><span class="string">*****************************************************************</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">STATIC_URL = <span class="string">'/ooo/'</span>  <span class="comment"># 类似于访问静态文件的令牌</span></span><br><span class="line"><span class="string">"""如果你想要访问静态文件 你就必须以static开头"""</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">/static/bootstrap-3.3.7-dist/js/bootstrap.min.js</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">/static/令牌</span></span><br><span class="line"><span class="string">取列表里面从上往下依次查找</span></span><br><span class="line"><span class="string">    bootstrap-3.3.7-dist/js/bootstrap.min.js</span></span><br><span class="line"><span class="string">    都没有才会报错</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment"># 静态文件配置</span></span><br><span class="line">STATICFILES_DIRS = [</span><br><span class="line">    os.path.join(BASE_DIR,<span class="string">'static'</span>),</span><br><span class="line">    os.path.join(BASE_DIR,<span class="string">'static1'</span>),</span><br><span class="line">    os.path.join(BASE_DIR,<span class="string">'static2'</span>),</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 静态文件动态解析</span></span><br><span class="line">    &#123;% load static %&#125;</span><br><span class="line">    &lt;link rel=<span class="string">"stylesheet"</span> href=<span class="string">"&#123;% static 'bootstrap-3.3.7-dist/css/bootstrap.min.css' %&#125;"</span>&gt;</span><br><span class="line">    &lt;script src="&#123;% static 'bootstrap-3.3.7-dist/js/bootstrap.min.js' %&#125;"&gt;&lt;/script&gt;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment"># form表单默认是get请求数据</span></span><br><span class="line">	http://127.0.0.1:8000/login/?username=jason&amp;password=123</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">form表单action参数</span></span><br><span class="line"><span class="string">	1.不写 默认朝当前所在的url提交数据</span></span><br><span class="line"><span class="string">	2.全写 指名道姓</span></span><br><span class="line"><span class="string">	3.只写后缀 /login/</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在前期我们使用django提交post请求的时候 需要取配置文件中注释掉一行代码</span></span><br><span class="line">MIDDLEWARE = [</span><br><span class="line">    <span class="string">'django.middleware.security.SecurityMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.contrib.sessions.middleware.SessionMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.middleware.common.CommonMiddleware'</span>,</span><br><span class="line">    <span class="comment"># 'django.middleware.csrf.CsrfViewMiddleware',</span></span><br><span class="line">    <span class="string">'django.contrib.auth.middleware.AuthenticationMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.contrib.messages.middleware.MessageMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.middleware.clickjacking.XFrameOptionsMiddleware'</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h3 id="request对象方法初识"><a href="#request对象方法初识" class="headerlink" title="request对象方法初识"></a>request对象方法初识</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">request.method <span class="comment"># 返回请求方式 并且是全大写的字符串形式  &lt;class 'str'&gt;</span></span><br><span class="line">request.POST  <span class="comment"># 获取用户post请求提交的普通数据不包含文件</span></span><br><span class="line">request.POST.get()  <span class="comment"># 只获取列表最后一个元素</span></span><br><span class="line">request.POST.getlist()  <span class="comment"># 直接将列表取出</span></span><br><span class="line">request.GET  <span class="comment"># 获取用户提交的get请求数据</span></span><br><span class="line">request.GET.get()  <span class="comment"># 只获取列表最后一个元素</span></span><br><span class="line">request.GET.getlist()  <span class="comment"># 直接将列表取出</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">get请求携带的数据是有大小限制的 大概好像只有4KB左右</span></span><br><span class="line"><span class="string">而post请求则没有限制</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="comment"># 返回一个登陆界面</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    get请求和post请求应该有不同的处理机制</span></span><br><span class="line"><span class="string">    :param request: 请求相关的数据对象 里面有很多简易的方法</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="comment"># print(type(request.method))  # 返回请求方式 并且是全大写的字符串形式  &lt;class 'str'&gt;</span></span><br><span class="line">    <span class="comment"># if request.method == 'GET':</span></span><br><span class="line">    <span class="comment">#     print('来了 老弟')</span></span><br><span class="line">    <span class="comment">#     return render(request,'login.html')</span></span><br><span class="line">    <span class="comment"># elif request.method == 'POST':</span></span><br><span class="line">    <span class="comment">#     return HttpResponse("收到了 宝贝")</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'POST'</span>:</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">"收到了 宝贝"</span>)</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'login.html'</span>)</span><br></pre></td></tr></table></figure>

<h3 id="pycharm链接数据库-MySQL"><a href="#pycharm链接数据库-MySQL" class="headerlink" title="pycharm链接数据库(MySQL)"></a>pycharm链接数据库(MySQL)</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">三个位置查找数据库相关</span></span><br><span class="line"><span class="string">	右侧上方database</span></span><br><span class="line"><span class="string">	左下方database</span></span><br><span class="line"><span class="string">	配置里面的plugins插件搜索安装</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">	再没有卸载pycharm重新装	</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">pycharm可以充当很多款数据库软件的客户端</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">参考截图和视频操作即可</span></span><br><span class="line"><span class="string">	需要提前创建好库</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<h3 id="django链接数据库-MySQL"><a href="#django链接数据库-MySQL" class="headerlink" title="django链接数据库(MySQL)"></a>django链接数据库(MySQL)</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 默认用的是sqkite3</span></span><br><span class="line">DATABASES = &#123;</span><br><span class="line">    <span class="string">'default'</span>: &#123;</span><br><span class="line">        <span class="string">'ENGINE'</span>: <span class="string">'django.db.backends.sqlite3'</span>,</span><br><span class="line">        <span class="string">'NAME'</span>: os.path.join(BASE_DIR, <span class="string">'db.sqlite3'</span>),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># django链接MySQL</span></span><br><span class="line">	<span class="number">1.</span>第一步配置文件中配置</span><br><span class="line">  	DATABASES = &#123;</span><br><span class="line">    <span class="string">'default'</span>: &#123;</span><br><span class="line">        <span class="string">'ENGINE'</span>: <span class="string">'django.db.backends.mysql'</span>,</span><br><span class="line">        <span class="string">'NAME'</span>: <span class="string">'day60'</span>,</span><br><span class="line">        <span class="string">'USER'</span>:<span class="string">'root'</span>,</span><br><span class="line">        <span class="string">'PASSWORD'</span>:<span class="string">'admin123'</span>,</span><br><span class="line">        <span class="string">'HOST'</span>:<span class="string">'127.0.0.1'</span>,</span><br><span class="line">        <span class="string">'PORT'</span>:<span class="number">3306</span>,</span><br><span class="line">        <span class="string">'CHARSET'</span>:<span class="string">'utf8'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">  <span class="number">2.</span>代码声明	</span><br><span class="line">  	django默认用的是mysqldb模块链接MySQL</span><br><span class="line">    但是该模块的兼容性不好 需要手动改为用pymysql链接</span><br><span class="line">    </span><br><span class="line">    你需要告诉django不要用默认的mysqldb还是用pymysql</span><br><span class="line">    <span class="comment"># 在项目名下的init或者任意的应用名下的init文件中书写以下代码都可以</span></span><br><span class="line">    <span class="keyword">import</span> pymysql</span><br><span class="line">		pymysql.install_as_MySQLdb()</span><br></pre></td></tr></table></figure>

<h3 id="Django-ORM"><a href="#Django-ORM" class="headerlink" title="Django ORM"></a>Django ORM</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">ORM. 对象关系映射</span></span><br><span class="line"><span class="string">作用:能够让一个不用sql语句的小白也能够通过python 面向对象的代码简单快捷的操作数据库</span></span><br><span class="line"><span class="string">不足之处:封装程度太高 有时候sql语句的效率偏低 需要你自己写SQL语句</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">类									   表</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">对象									  记录</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">对象属性							记录某个字段对应的值</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">应用下面的models.py文件</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1 先去models.py中书写一个类</span></span><br><span class="line">	<span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="comment"># id int primary_key auto_increment</span></span><br><span class="line">    id = models.AutoField(primary_key=<span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># username varchar(32)</span></span><br><span class="line">    username = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    <span class="comment"># password int</span></span><br><span class="line">    password = models.IntegerField()</span><br><span class="line"></span><br><span class="line">*************************<span class="comment"># 2 数据库迁移命令*************************</span></span><br><span class="line">python3 manage.py makemigrations 将操作记录记录到小本本上(migrations文件夹)</span><br><span class="line"></span><br><span class="line">python3 manage.py migrate  将操作真正的同步到数据库中</span><br><span class="line"><span class="comment"># 只要你修改了models.py中跟数据库相关的代码 就必须重新执行上述的两条命令</span></span><br><span class="line">******************************************************************</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="comment"># id int primary_key auto_increment</span></span><br><span class="line">    id = models.AutoField(primary_key=<span class="literal">True</span>,verbose_name=<span class="string">'主键'</span>)</span><br><span class="line">    <span class="comment"># username varchar(32)</span></span><br><span class="line">    username = models.CharField(max_length=<span class="number">32</span>,verbose_name=<span class="string">'用户名'</span>)</span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    CharField必须要指定max_length参数 不指定会直接报错</span></span><br><span class="line"><span class="string">    verbose_name该参数是所有字段都有的 就是用来对字段的解释</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="comment"># password int</span></span><br><span class="line">    password = models.IntegerField(verbose_name=<span class="string">'密码'</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Author</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="comment"># 由于一张表中必须要有一个主键字段 并且一般情况下都叫id字段</span></span><br><span class="line">    <span class="comment"># 所以orm当你不定义主键字段的时候 orm会自动帮你创建一个名为id主键字段</span></span><br><span class="line">    <span class="comment"># 也就意味着 后续我们在创建模型表的时候如果主键字段名没有额外的叫法 那么主键字段可以省略不写</span></span><br><span class="line">    <span class="comment"># username varchar(32)</span></span><br><span class="line">    username = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    <span class="comment"># password int</span></span><br><span class="line">    password = models.IntegerField()</span><br></pre></td></tr></table></figure>

<h3 id="字段的增删改查"><a href="#字段的增删改查" class="headerlink" title="字段的增删改查"></a>字段的增删改查</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 字段的增加</span></span><br><span class="line">	<span class="number">1.</span>可以在终端内直接给出默认值</span><br><span class="line">  <span class="number">2.</span>该字段可以为空</span><br><span class="line">    info = models.CharField(max_length=<span class="number">32</span>,verbose_name=<span class="string">'个人简介'</span>,null=<span class="literal">True</span>)</span><br><span class="line">  <span class="number">3.</span>直接给字段设置默认值</span><br><span class="line">    hobby = models.CharField(max_length=<span class="number">32</span>,verbose_name=<span class="string">'兴趣爱好'</span>,default=<span class="string">'study'</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 字段的修改</span></span><br><span class="line">	直接修改代码然后执行数据库迁移的两条命令即可！</span><br><span class="line"></span><br><span class="line"><span class="comment"># 字段的删</span></span><br><span class="line">	直接注释对应的字段然后执行数据库迁移的两条命令即可！</span><br><span class="line">  执行完毕之后字段对应的数据也都没有了</span><br><span class="line">  </span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">在操作models.py的时候一定要细心</span></span><br><span class="line"><span class="string">	千万不要注释一些字段</span></span><br><span class="line"><span class="string">	执行迁移命令之前最好先检查一下自己写的代码</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 个人建议:当你离开你的计算机之后一定要锁屏</span></span><br></pre></td></tr></table></figure>

<h3 id="数据的增删改查"><a href="#数据的增删改查" class="headerlink" title="数据的增删改查"></a>数据的增删改查</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 今天只会介绍一点点 后面会详细的介绍</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查</span></span><br><span class="line">res = models.User.objects.filter(username=username)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">返回值你先看成是列表套数据对象的格式</span></span><br><span class="line"><span class="string">它也支持索引取值 切片操作 但是不支持负数索引</span></span><br><span class="line"><span class="string">它也不推荐你使用索引的方式取值</span></span><br><span class="line"><span class="string">user_obj = models.User.objects.filter(username=username).first()</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">filter括号内可以携带多个参数 参数与参数之间默认是<span class="keyword">and</span>关系</span><br><span class="line">你可以把filter联想成where记忆</span><br><span class="line"></span><br><span class="line"><span class="comment"># 增</span></span><br><span class="line"><span class="keyword">from</span> app01 <span class="keyword">import</span> models</span><br><span class="line">res = models.User.objects.create(username=username,password=password)</span><br><span class="line"><span class="comment"># 返回值就是当前被创建的对象本身</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二种增加</span></span><br><span class="line">user_obj = models.User(username=username,password=password)</span><br><span class="line">user_obj.save()  <span class="comment"># 保存数据</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>django框架</tag>
      </tags>
  </entry>
  <entry>
    <title>[数据编辑与orm表关系]</title>
    <url>/2019/07/04/%E6%95%B0%E6%8D%AE%E7%BC%96%E8%BE%91%E4%B8%8Eorm%E8%A1%A8%E5%85%B3%E7%B3%BB/</url>
    <content><![CDATA[<h3 id="数据的查，改，删"><a href="#数据的查，改，删" class="headerlink" title="数据的查，改，删"></a>数据的查，改，删</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 先讲数据库中的数据全部展示到前端 然后给每一个数据两个按钮 一个编辑一个删除</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">userlist</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="comment"># 查询出用户表里面所有的数据</span></span><br><span class="line">    <span class="comment"># 方式1</span></span><br><span class="line">    <span class="comment"># data = models.User.objects.filter()</span></span><br><span class="line">    <span class="comment"># print(data)</span></span><br><span class="line">    <span class="comment"># 方式2</span></span><br><span class="line">    user_queryset = models.User.objects.all()</span><br><span class="line">    <span class="comment"># return render(request,'userlist.html',&#123;'user_queryset':user_queryset&#125;)</span></span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">'userlist.html'</span>,locals())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编辑功能</span></span><br><span class="line">	<span class="comment"># 点击编辑按钮朝后端发送编辑数据的请求</span></span><br><span class="line">  <span class="string">"""</span></span><br><span class="line"><span class="string">  如何告诉后端用户想要编辑哪条数据?</span></span><br><span class="line"><span class="string">  	将编辑按钮所在的那一行数据的主键值发送给后端</span></span><br><span class="line"><span class="string">  	利用url问号后面携带参数的方式</span></span><br><span class="line"><span class="string">  	</span></span><br><span class="line"><span class="string">  	&#123;% for user_obj in user_queryset %&#125;</span></span><br><span class="line"><span class="string">                        &lt;tr&gt;</span></span><br><span class="line"><span class="string">                            &lt;td&gt;&#123;&#123; user_obj.id &#125;&#125;&lt;/td&gt;</span></span><br><span class="line"><span class="string">                            &lt;td&gt;&#123;&#123; user_obj.username &#125;&#125;&lt;/td&gt;</span></span><br><span class="line"><span class="string">                            &lt;td&gt;&#123;&#123; user_obj.password &#125;&#125;&lt;/td&gt;</span></span><br><span class="line"><span class="string">                            &lt;td&gt;</span></span><br><span class="line"><span class="string">                                &lt;a href="/edit_user/?user_id=&#123;&#123; user_obj.id &#125;&#125;" class="btn btn-primary btn-xs"&gt;编辑&lt;/a&gt;</span></span><br><span class="line"><span class="string">                                &lt;a href="" class="btn btn-danger btn-xs"&gt;删除&lt;/a&gt;</span></span><br><span class="line"><span class="string">                            &lt;/td&gt;</span></span><br><span class="line"><span class="string">                        &lt;/tr&gt;</span></span><br><span class="line"><span class="string">                    &#123;% endfor %&#125;</span></span><br><span class="line"><span class="string">  """</span></span><br><span class="line">  <span class="comment"># 后端查询出用户想要编辑的数据对象 展示到前端页面供用户查看和编辑</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">edit_user</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="comment"># 获取url问号后面的参数</span></span><br><span class="line">    edit_id = request.GET.get(<span class="string">'user_id'</span>)</span><br><span class="line">    <span class="comment"># 查询当前用户想要编辑的数据对象</span></span><br><span class="line">    edit_obj = models.User.objects.filter(id=edit_id).first()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">"POST"</span>:</span><br><span class="line">        username = request.POST.get(<span class="string">'username'</span>)</span><br><span class="line">        password = request.POST.get(<span class="string">'password'</span>)</span><br><span class="line">        <span class="comment"># 去数据库中修改对应的数据内容</span></span><br><span class="line">        <span class="comment"># 修改数据方式1</span></span><br><span class="line">        <span class="comment"># models.User.objects.filter(id=edit_id).update(username=username,password=password)</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">            将filter查询出来的列表中所有的对象全部更新            批量更新操作</span></span><br><span class="line"><span class="string">            只修改被修改的字段</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 修改数据方式2</span></span><br><span class="line">        edit_obj.username = username</span><br><span class="line">        edit_obj.password= password</span><br><span class="line">        edit_obj.save()</span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">            上述方法当字段特别多的时候效率会非常的低</span></span><br><span class="line"><span class="string">            从头到尾将数据的所有字段全部更新一边 无论该字段是否被修改</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 跳转到数据的展示页面</span></span><br><span class="line">        <span class="keyword">return</span> redirect(<span class="string">'/userlist/'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将数据对象展示到页面上</span></span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">'edit_user.html'</span>,locals())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除功能</span></span><br><span class="line">	<span class="string">"""</span></span><br><span class="line"><span class="string">	跟编辑功能逻辑类似</span></span><br><span class="line"><span class="string">	def delete_user(request):</span></span><br><span class="line"><span class="string">    # 获取用户想要删除的数据id值</span></span><br><span class="line"><span class="string">    delete_id = request.GET.get('user_id')</span></span><br><span class="line"><span class="string">    # 直接去数据库中找到对应的数据删除即可</span></span><br><span class="line"><span class="string">    models.User.objects.filter(id=delete_id).delete()</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">        批量删除</span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    # 跳转到展示页面</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    return redirect('/userlist/')	</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">	"""</span></span><br><span class="line"><span class="comment"># 真正的删除功能应该需要二次确认 我们这里先不做后面会讲</span></span><br><span class="line"><span class="comment"># 删除数据内部其实并不是真正的删除 我们会给数据添加一个标识字段用来表示当前数据是否被删除了，如果数据被删了仅仅只是讲字段修改一个状态</span></span><br><span class="line">	username password	is_delete</span><br><span class="line">  jason			<span class="number">123</span>				<span class="number">0</span></span><br><span class="line">  egon			<span class="number">123</span>				<span class="number">1</span></span><br></pre></td></tr></table></figure>

<h3 id="django-orm中如何创建表关系"><a href="#django-orm中如何创建表关系" class="headerlink" title="django orm中如何创建表关系"></a>django orm中如何创建表关系</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">表与表之间的关系</span></span><br><span class="line"><span class="string">	一对多</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">	多对多</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">	一对一</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">	没有关系</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">判断表关系的方法:换位思考</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">图书表</span><br><span class="line"></span><br><span class="line">出版社表</span><br><span class="line"></span><br><span class="line">作者表</span><br><span class="line"></span><br><span class="line">作者详情表</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">图书和出版社是一对多的关系 外键字段建在多的那一方 book</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">图书和作者是多对多的关系 需要创建第三张表来专门存储</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">作者与作者详情表是一对一</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your models here.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建表关系  先将基表创建出来 然后再添加外键字段</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    title = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    price = models.DecimalField(max_digits=<span class="number">8</span>,decimal_places=<span class="number">2</span>)</span><br><span class="line">    <span class="comment"># 总共八位 小数点后面占两位</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    图书和出版社是一对多 并且书是多的一方 所以外键字段放在书表里面</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    publish = models.ForeignKey(to=<span class="string">'Publish'</span>)  <span class="comment"># 默认就是与出版社表的主键字段做外键关联</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    如果字段对应的是ForeignKey 那么会orm会自动在字段的后面加_id</span></span><br><span class="line"><span class="string">    如果你自作聪明的加了_id那么orm还是会在后面继续加_id</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    后面在定义ForeignKey的时候就不要自己加_id</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    图书和作者是多对多的关系 外键字段建在任意一方均可 但是推荐你建在查询频率较高的一方</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    authors = models.ManyToManyField(to=<span class="string">'Author'</span>)</span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    authors是一个虚拟字段 主要是用来告诉orm 书籍表和作者表是多对多关系</span></span><br><span class="line"><span class="string">    让orm自动帮你创建第三张关系表</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Publish</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    addr = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Author</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    age = models.IntegerField()</span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    作者与作者详情是一对一的关系 外键字段建在任意一方都可以 但是推荐你建在查询频率较高的表中</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    author_detail = models.OneToOneField(to=<span class="string">'AuthorDetail'</span>)</span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    OneToOneField也会自动给字段加_id后缀</span></span><br><span class="line"><span class="string">    所以你也不要自作聪明的自己加_id</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AuthorDetail</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    phone = models.BigIntegerField()  <span class="comment"># 或者直接字符类型</span></span><br><span class="line">    addr = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">	orm中如何定义三种关系</span></span><br><span class="line"><span class="string">		publish = models.ForeignKey(to='Publish')  # 默认就是与出版社表的主键字段做外键关联</span></span><br><span class="line"><span class="string">		</span></span><br><span class="line"><span class="string">		authors = models.ManyToManyField(to='Author')</span></span><br><span class="line"><span class="string">		</span></span><br><span class="line"><span class="string">		author_detail = models.OneToOneField(to='AuthorDetail')</span></span><br><span class="line"><span class="string">		</span></span><br><span class="line"><span class="string">		</span></span><br><span class="line"><span class="string">		ForeignKey</span></span><br><span class="line"><span class="string">		OneToOneField</span></span><br><span class="line"><span class="string">			会自动在字段后面加_id后缀</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在django1.X版本中外键默认都是级联更新删除的</span></span><br><span class="line"><span class="comment"># 多对多的表关系可以有好几种创建方式 这里暂且先介绍一种</span></span><br><span class="line"><span class="comment"># 针对外键字段里面的其他参数 暂时不要考虑 如果感兴趣自己可以百度试试看</span></span><br></pre></td></tr></table></figure>

<h3 id="django请求生命周期流程图-必会"><a href="#django请求生命周期流程图-必会" class="headerlink" title="django请求生命周期流程图(必会)"></a>django请求生命周期流程图(必会)</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 每个人都要会画 这个图是你们后期复习django最好的一个梳理方式</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 扩展知识点</span></span><br><span class="line">	<span class="string">"""</span></span><br><span class="line"><span class="string">	缓存数据库</span></span><br><span class="line"><span class="string">		提前已经将你想要的数据准备好了 你来直接拿就可以</span></span><br><span class="line"><span class="string">		提高效率和响应时间</span></span><br><span class="line"><span class="string">		</span></span><br><span class="line"><span class="string">	当你在修改你的数据的时候 你会发现数据并不是立刻修改完成的</span></span><br><span class="line"><span class="string">	而是需要经过一段时间才会修改</span></span><br><span class="line"><span class="string">		博客园</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">	了解即可</span></span><br><span class="line"><span class="string">	"""</span></span><br></pre></td></tr></table></figure>

<h1 id="路由层"><a href="#路由层" class="headerlink" title="路由层"></a>路由层</h1><h3 id="路由匹配"><a href="#路由匹配" class="headerlink" title="路由匹配"></a>路由匹配</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 路由匹配</span></span><br><span class="line">url(<span class="string">r'test'</span>,views.test),</span><br><span class="line">url(<span class="string">r'testadd'</span>,views.testadd)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">url方法第一个参数是正则表达式</span></span><br><span class="line"><span class="string">	只要第一个参数正则表达式能够匹配到内容 那么就会立刻停止往下匹配</span></span><br><span class="line"><span class="string">	直接执行对应的视图函数</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">你在输入url的时候会默认加斜杠</span></span><br><span class="line"><span class="string">	django内部帮你做到重定向</span></span><br><span class="line"><span class="string">		一次匹配不行</span></span><br><span class="line"><span class="string">		url后面加斜杠再来一次</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment"># 取消自动加斜杠</span></span><br><span class="line">APPEND_SLASH = <span class="literal">False</span>/<span class="literal">True</span>	<span class="comment"># 默认是自动加斜杠的</span></span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r'^admin/'</span>, admin.site.urls),</span><br><span class="line">    <span class="comment"># 首页</span></span><br><span class="line">    url(<span class="string">r'^$'</span>,views.home),</span><br><span class="line">    <span class="comment"># 路由匹配</span></span><br><span class="line">    url(<span class="string">r'^test/$'</span>,views.test),</span><br><span class="line">    url(<span class="string">r'^testadd/$'</span>,views.testadd),</span><br><span class="line">    <span class="comment"># 尾页(了解)</span></span><br><span class="line">    url(<span class="string">r''</span>,views.error),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h3 id="无名分组"><a href="#无名分组" class="headerlink" title="无名分组"></a>无名分组</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">分组:就是给某一段正则表达式用小括号扩起来</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">url(<span class="string">r'^test/(\d+)/'</span>,views.test)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(request,xx)</span>:</span></span><br><span class="line">    print(xx)</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">'test'</span>)</span><br><span class="line">  </span><br><span class="line"><span class="comment"># 无名分组就是将括号内正则表达式匹配到的内容当作位置参数传递给后面的视图函数</span></span><br></pre></td></tr></table></figure>

<h3 id="有名分组"><a href="#有名分组" class="headerlink" title="有名分组"></a>有名分组</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">可以给正则表达式起一个别名</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">url(<span class="string">r'^testadd/(?P&lt;year&gt;\d+)'</span>,views.testadd)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">testadd</span><span class="params">(request,year)</span>:</span></span><br><span class="line">    print(year)</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">'testadd'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 有名分组就是将括号内正则表达式匹配到的内容当作关键字参数传递给后面的视图函数</span></span><br></pre></td></tr></table></figure>

<h3 id="无名有名是否可以混合使用"><a href="#无名有名是否可以混合使用" class="headerlink" title="无名有名是否可以混合使用"></a>无名有名是否可以混合使用</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">嘻嘻 不能混用</span></span><br><span class="line"><span class="string">但是同一个分组可以使用N多次</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 单个的分组可以使用多次</span></span><br><span class="line">url(<span class="string">r'^index/(\d+)/(\d+)/(\d+)/'</span>,views.index),</span><br><span class="line">url(<span class="string">r'^index/(?P&lt;year&gt;\d+)/(?P&lt;age&gt;\d+)/(?P&lt;month&gt;\d+)/'</span>,views.index),</span><br></pre></td></tr></table></figure>

<h3 id="反向解析"><a href="#反向解析" class="headerlink" title="反向解析"></a>反向解析</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 通过一些方法得到一个结果 该结果可以直接访问对应的url触发视图函数</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 先给路由与视图函数起一个别名</span></span><br><span class="line">	url(<span class="string">r'^func_kkk/'</span>,views.func,name=<span class="string">'ooo'</span>)</span><br><span class="line"><span class="comment"># 反向解析</span></span><br><span class="line">	<span class="comment"># 后端反向解析</span></span><br><span class="line">  	<span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render,HttpResponse,redirect,reverse</span><br><span class="line">  	reverse(<span class="string">'ooo'</span>)</span><br><span class="line">  <span class="comment"># 前端反向解析</span></span><br><span class="line">  	&lt;a href="&#123;% url 'ooo' %&#125;"&gt;111&lt;/a&gt;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>django框架</tag>
      </tags>
  </entry>
  <entry>
    <title>[多表操作]</title>
    <url>/2019/07/04/%E5%A4%9A%E8%A1%A8%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h3 id="单表操作"><a href="#单表操作" class="headerlink" title="单表操作"></a>单表操作</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    age = models.IntegerField()</span><br><span class="line">    register_time = models.DateField()  <span class="comment"># 年月日</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    DateField</span></span><br><span class="line"><span class="string">    DateTimeField</span></span><br><span class="line"><span class="string">        两个重要参数 </span></span><br><span class="line"><span class="string">        auto_now:每次操作数据的时候 该字段会自动将当前时间更新</span></span><br><span class="line"><span class="string">        auto_now_add:在创建数据的时候会自动将当前创建时间记录下来 之后只要不认为的修改 那么就一直不变</span></span><br><span class="line"><span class="string">    """</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># django自带的sqlite3数据库对日期格式不是很敏感 处理的时候容易出错</span></span><br><span class="line"><span class="comment"># 增</span></span><br><span class="line">    <span class="comment"># res = models.User.objects.create(name='jason',age=18,register_time='2002-1-21')</span></span><br><span class="line">    <span class="comment"># print(res)</span></span><br><span class="line">    <span class="comment"># import datetime</span></span><br><span class="line">    <span class="comment"># ctime = datetime.datetime.now()</span></span><br><span class="line">    <span class="comment"># user_obj = models.User(name='egon',age=84,register_time=ctime)</span></span><br><span class="line">    <span class="comment"># user_obj.save()</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 删</span></span><br><span class="line">    <span class="comment"># res = models.User.objects.filter(pk=2).delete()</span></span><br><span class="line">    <span class="comment"># print(res)</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    pk会自动查找到当前表的主键字段 指代的就是当前表的主键字段</span></span><br><span class="line"><span class="string">    用了pk之后 你就不需要指代当前表的主键字段到底叫什么了</span></span><br><span class="line"><span class="string">        uid</span></span><br><span class="line"><span class="string">        pid</span></span><br><span class="line"><span class="string">        sid</span></span><br><span class="line"><span class="string">        ...</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="comment"># user_obj = models.User.objects.filter(pk=1).first()</span></span><br><span class="line">    <span class="comment"># user_obj.delete()</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 修改</span></span><br><span class="line">    <span class="comment"># models.User.objects.filter(pk=4).update(name='egonDSB')</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># user_obj = models.User.objects.get(pk=4)</span></span><br><span class="line">    <span class="comment"># user_obj = models.User.objects.filter(pk=6)</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    get方法返回的直接就是当前数据对象</span></span><br><span class="line"><span class="string">    但是该方法不推荐使用</span></span><br><span class="line"><span class="string">        一旦数据不存在该方法会直接报错</span></span><br><span class="line"><span class="string">        而filter则不会</span></span><br><span class="line"><span class="string">        所以我们还是用filter</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="comment"># user_obj.name = 'egonPPP'</span></span><br><span class="line">    <span class="comment"># user_obj.save()</span></span><br></pre></td></tr></table></figure>

<h3 id="必知必会13条"><a href="#必知必会13条" class="headerlink" title="必知必会13条"></a>必知必会13条</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 必知必会13条</span></span><br><span class="line">    <span class="comment"># 1.all()  查询所有数据</span></span><br><span class="line">    <span class="comment"># 2.filter()     带有过滤条件的查询</span></span><br><span class="line">    <span class="comment"># 3.get()        直接拿数据对象 但是条件不存在直接报错</span></span><br><span class="line">    <span class="comment"># 4.first()      拿queryset里面第一个元素</span></span><br><span class="line">    <span class="comment"># res = models.User.objects.all().first()</span></span><br><span class="line">    <span class="comment"># print(res)</span></span><br><span class="line">    <span class="comment"># 5.last()</span></span><br><span class="line">    <span class="comment"># res = models.User.objects.all().last()</span></span><br><span class="line">    <span class="comment"># print(res)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 6.values()  可以指定获取的数据字段  select name,age from ...     列表套字典</span></span><br><span class="line">    <span class="comment"># res = models.User.objects.values('name','age')  # &lt;QuerySet [&#123;'name': 'jason', 'age': 18&#125;, &#123;'name': 'egonPPP', 'age': 84&#125;]&gt;</span></span><br><span class="line">    <span class="comment"># print(res)</span></span><br><span class="line">    <span class="comment"># 7.values_list()  列表套元祖</span></span><br><span class="line">    <span class="comment"># res = models.User.objects.values_list('name','age')  # &lt;QuerySet [('jason', 18), ('egonPPP', 84)]&gt;</span></span><br><span class="line">    <span class="comment"># print(res)</span></span><br><span class="line">    <span class="comment"># """</span></span><br><span class="line">    <span class="comment">#  # 查看内部封装的sql语句</span></span><br><span class="line">    <span class="comment">#  上述查看sql语句的方式  只能用于queryset对象</span></span><br><span class="line">    <span class="comment">#  只有queryset对象才能够点击query查看内部的sql语句</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment"># """</span></span><br><span class="line">    <span class="comment"># 8.distinct()  去重</span></span><br><span class="line">    <span class="comment"># res = models.User.objects.values('name','age').distinct()</span></span><br><span class="line">    <span class="comment"># print(res)</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    去重一定要是一模一样的数据</span></span><br><span class="line"><span class="string">    如果带有主键那么肯定不一样 你在往后的查询中一定不要忽略主键</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="comment"># 9.order_by()</span></span><br><span class="line">    <span class="comment"># res = models.User.objects.order_by('age')  # 默认升序</span></span><br><span class="line">    <span class="comment"># res = models.User.objects.order_by('-age')  # 降序</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment"># print(res)</span></span><br><span class="line">    <span class="comment"># 10.reverse()  反转的前提是 数据已经排过序了  order_by()</span></span><br><span class="line">    <span class="comment"># res = models.User.objects.all()</span></span><br><span class="line">    <span class="comment"># res1 = models.User.objects.order_by('age').reverse()</span></span><br><span class="line">    <span class="comment"># print(res,res1)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 11.count()  统计当前数据的个数</span></span><br><span class="line">    <span class="comment"># res = models.User.objects.count()</span></span><br><span class="line">    <span class="comment"># print(res)</span></span><br><span class="line">    <span class="comment"># 12.exclude()  排除在外</span></span><br><span class="line">    <span class="comment"># res = models.User.objects.exclude(name='jason')</span></span><br><span class="line">    <span class="comment"># print(res)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 13.exists()  基本用不到因为数据本身就自带布尔值  返回的是布尔值</span></span><br><span class="line">    <span class="comment"># res = models.User.objects.filter(pk=10).exists()</span></span><br><span class="line">    <span class="comment"># print(res)</span></span><br></pre></td></tr></table></figure>

<h3 id="测试脚本"><a href="#测试脚本" class="headerlink" title="测试脚本"></a>测试脚本</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">当你只是想测试django中的某一个py文件内容 那么你可以不用书写前后端交互的形式</span></span><br><span class="line"><span class="string">而是直接写一个测试脚本即可</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">脚本代码无论是写在应用下的tests.py还是自己单独开设py文件都可以</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment"># 测试环境的准备 去manage.py中拷贝前四行代码 然后自己写两行</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    os.environ.setdefault(<span class="string">"DJANGO_SETTINGS_MODULE"</span>, <span class="string">"day64.settings"</span>)</span><br><span class="line">    <span class="keyword">import</span> django</span><br><span class="line">    django.setup()</span><br><span class="line">    <span class="comment"># 在这个代码块的下面就可以测试django里面的单个py文件了</span></span><br></pre></td></tr></table></figure>

<h3 id="查看内部sql语句的方式"><a href="#查看内部sql语句的方式" class="headerlink" title="查看内部sql语句的方式"></a>查看内部sql语句的方式</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 方式1</span></span><br><span class="line">res = models.User.objects.values_list(<span class="string">'name'</span>,<span class="string">'age'</span>)  <span class="comment"># &lt;QuerySet [('jason', 18), ('egonPPP', 84)]&gt;</span></span><br><span class="line">print(res.query)</span><br><span class="line">queryset对象才能够点击query查看内部的sql语句</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方式2:所有的sql语句都能查看</span></span><br><span class="line"><span class="comment"># 去配置文件中配置一下即可</span></span><br><span class="line">LOGGING = &#123;</span><br><span class="line">    <span class="string">'version'</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">'disable_existing_loggers'</span>: <span class="literal">False</span>,</span><br><span class="line">    <span class="string">'handlers'</span>: &#123;</span><br><span class="line">        <span class="string">'console'</span>:&#123;</span><br><span class="line">            <span class="string">'level'</span>:<span class="string">'DEBUG'</span>,</span><br><span class="line">            <span class="string">'class'</span>:<span class="string">'logging.StreamHandler'</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'loggers'</span>: &#123;</span><br><span class="line">        <span class="string">'django.db.backends'</span>: &#123;</span><br><span class="line">            <span class="string">'handlers'</span>: [<span class="string">'console'</span>],</span><br><span class="line">            <span class="string">'propagate'</span>: <span class="literal">True</span>,</span><br><span class="line">            <span class="string">'level'</span>:<span class="string">'DEBUG'</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="神奇的双下划线查询"><a href="#神奇的双下划线查询" class="headerlink" title="神奇的双下划线查询"></a>神奇的双下划线查询</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 一对多外键增删改查</span></span><br><span class="line">    <span class="comment"># 增</span></span><br><span class="line">    <span class="comment"># 1  直接写实际字段 id</span></span><br><span class="line">    <span class="comment"># models.Book.objects.create(title='论语',price=899.23,publish_id=1)</span></span><br><span class="line">    <span class="comment"># models.Book.objects.create(title='聊斋',price=444.23,publish_id=2)</span></span><br><span class="line">    <span class="comment"># models.Book.objects.create(title='老子',price=333.66,publish_id=1)</span></span><br><span class="line">    <span class="comment"># 2  虚拟字段 对象</span></span><br><span class="line">    <span class="comment"># publish_obj = models.Publish.objects.filter(pk=2).first()</span></span><br><span class="line">    <span class="comment"># models.Book.objects.create(title='红楼梦',price=666.23,publish=publish_obj)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 删</span></span><br><span class="line">    <span class="comment"># models.Publish.objects.filter(pk=1).delete()  # 级联删除</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 修改</span></span><br><span class="line">    <span class="comment"># models.Book.objects.filter(pk=1).update(publish_id=2)</span></span><br><span class="line">    <span class="comment"># publish_obj = models.Publish.objects.filter(pk=1).first()</span></span><br><span class="line">    <span class="comment"># models.Book.objects.filter(pk=1).update(publish=publish_obj)</span></span><br></pre></td></tr></table></figure>

<h3 id="一对多外键增删改查"><a href="#一对多外键增删改查" class="headerlink" title="一对多外键增删改查"></a>一对多外键增删改查</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 如何给书籍添加作者？</span></span><br><span class="line">    book_obj = models.Book.objects.filter(pk=<span class="number">1</span>).first()</span><br><span class="line">    <span class="comment"># print(book_obj.authors)  # 就类似于你已经到了第三张关系表了</span></span><br><span class="line">    <span class="comment"># book_obj.authors.add(1)  # 书籍id为1的书籍绑定一个主键为1 的作者</span></span><br><span class="line">    <span class="comment"># book_obj.authors.add(2,3)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># author_obj = models.Author.objects.filter(pk=1).first()</span></span><br><span class="line">    <span class="comment"># author_obj1 = models.Author.objects.filter(pk=2).first()</span></span><br><span class="line">    <span class="comment"># author_obj2 = models.Author.objects.filter(pk=3).first()</span></span><br><span class="line">    <span class="comment"># book_obj.authors.add(author_obj)</span></span><br><span class="line">    <span class="comment"># book_obj.authors.add(author_obj1,author_obj2)</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    add给第三张关系表添加数据</span></span><br><span class="line"><span class="string">        括号内既可以传数字也可以传对象 并且都支持多个</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 删</span></span><br><span class="line">    <span class="comment"># book_obj.authors.remove(2)</span></span><br><span class="line">    <span class="comment"># book_obj.authors.remove(1,3)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># author_obj = models.Author.objects.filter(pk=2).first()</span></span><br><span class="line">    <span class="comment"># author_obj1 = models.Author.objects.filter(pk=3).first()</span></span><br><span class="line">    <span class="comment"># book_obj.authors.remove(author_obj,author_obj1)</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    remove</span></span><br><span class="line"><span class="string">        括号内既可以传数字也可以传对象 并且都支持多个</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 修改</span></span><br><span class="line">    <span class="comment"># book_obj.authors.set([1,2])  # 括号内必须给一个可迭代对象</span></span><br><span class="line">    <span class="comment"># book_obj.authors.set([3])  # 括号内必须给一个可迭代对象</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># author_obj = models.Author.objects.filter(pk=2).first()</span></span><br><span class="line">    <span class="comment"># author_obj1 = models.Author.objects.filter(pk=3).first()</span></span><br><span class="line">    <span class="comment"># book_obj.authors.set([author_obj,author_obj1])  # 括号内必须给一个可迭代对象</span></span><br><span class="line"></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    set</span></span><br><span class="line"><span class="string">        括号内必须传一个可迭代对象，该对象内既可以数字也可以对象 并且都支持多个</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 清空</span></span><br><span class="line">    <span class="comment"># 在第三张关系表中清空某个书籍与作者的绑定关系</span></span><br><span class="line">    book_obj.authors.clear()</span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    clear</span></span><br><span class="line"><span class="string">        括号内不要加任何参数</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    """</span></span><br></pre></td></tr></table></figure>

<h3 id="多对多外键增删改查"><a href="#多对多外键增删改查" class="headerlink" title="多对多外键增删改查"></a>多对多外键增删改查</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 正向</span><br><span class="line"># 反向</span><br><span class="line">	外键字段在我手上那么，我查你就是正向</span><br><span class="line">  外键字段如果不在手上，我查你就是反向</span><br><span class="line">  </span><br><span class="line">  book &gt;&gt;&gt;外键字段在书那儿(正向)&gt;&gt;&gt; publish</span><br><span class="line">  publish	&gt;&gt;&gt;外键字段在书那儿(反向)&gt;&gt;&gt;book</span><br><span class="line">  </span><br><span class="line">  一对一和多对多正反向的判断也是如此</span><br><span class="line">  </span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">正向查询按字段</span><br><span class="line">反向查询按表名小写</span><br><span class="line">				_set</span><br><span class="line">				...</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>

<h3 id="正反向的概念"><a href="#正反向的概念" class="headerlink" title="正反向的概念"></a>正反向的概念</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 正向# 反向    外键字段在我手上那么，我查你就是正向  外键字段如果不在手上，我查你就是反向    book &gt;&gt;&gt;外键字段在书那儿(正向)&gt;&gt;&gt; publish  publish   &gt;&gt;&gt;外键字段在书那儿(反向)&gt;&gt;&gt;book    一对一和多对多正反向的判断也是如此  """正向查询按字段反向查询按表名小写                _set                ..."""</span></span><br></pre></td></tr></table></figure>

<h1 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h1><h3 id="子查询-基于对象的跨表查询"><a href="#子查询-基于对象的跨表查询" class="headerlink" title="子查询(基于对象的跨表查询)"></a>子查询(基于对象的跨表查询)</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1.查询书籍主键为1的出版社</span></span><br><span class="line">    <span class="comment"># book_obj = models.Book.objects.filter(pk=1).first()</span></span><br><span class="line">    <span class="comment"># # 书查出版社 正向</span></span><br><span class="line">    <span class="comment"># res = book_obj.publish</span></span><br><span class="line">    <span class="comment"># print(res)</span></span><br><span class="line">    <span class="comment"># print(res.name)</span></span><br><span class="line">    <span class="comment"># print(res.addr)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2.查询书籍主键为2的作者</span></span><br><span class="line">    <span class="comment"># book_obj = models.Book.objects.filter(pk=2).first()</span></span><br><span class="line">    <span class="comment"># # 书查作者 正向</span></span><br><span class="line">    <span class="comment"># # res = book_obj.authors  # app01.Author.None</span></span><br><span class="line">    <span class="comment"># res = book_obj.authors.all()  # &lt;QuerySet [&lt;Author: Author object&gt;, &lt;Author: Author object&gt;]&gt;</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment"># print(res)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 3.查询作者jason的电话号码</span></span><br><span class="line">    <span class="comment"># author_obj = models.Author.objects.filter(name='jason').first()</span></span><br><span class="line">    <span class="comment"># res = author_obj.author_detail</span></span><br><span class="line">    <span class="comment"># print(res)</span></span><br><span class="line">    <span class="comment"># print(res.phone)</span></span><br><span class="line">    <span class="comment"># print(res.addr)</span></span><br><span class="line"></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    在书写orm语句的时候跟写sql语句一样的</span></span><br><span class="line"><span class="string">    不要企图一次性将orm语句写完 如果比较复杂 就写一点看一点</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    正向什么时候需要加.all()</span></span><br><span class="line"><span class="string">        当你的结果可能有多个的时候就需要加.all()</span></span><br><span class="line"><span class="string">        如果是一个则直接拿到数据对象</span></span><br><span class="line"><span class="string">            book_obj.publish</span></span><br><span class="line"><span class="string">            book_obj.authors.all()</span></span><br><span class="line"><span class="string">            author_obj.author_detail</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="comment"># 4.查询出版社是东方出版社出版的书</span></span><br><span class="line">    <span class="comment"># publish_obj = models.Publish.objects.filter(name='东方出版社').first()</span></span><br><span class="line">    <span class="comment"># 出版社查书  反向</span></span><br><span class="line">    <span class="comment"># res = publish_obj.book_set  # app01.Book.None</span></span><br><span class="line">    <span class="comment"># res = publish_obj.book_set.all()</span></span><br><span class="line">    <span class="comment"># print(res)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 5.查询作者是jason写过的书</span></span><br><span class="line">    <span class="comment"># author_obj = models.Author.objects.filter(name='jason').first()</span></span><br><span class="line">    <span class="comment"># 作者查书      反向</span></span><br><span class="line">    <span class="comment"># res = author_obj.book_set  # app01.Book.None</span></span><br><span class="line">    <span class="comment"># res = author_obj.book_set.all()</span></span><br><span class="line">    <span class="comment"># print(res)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 6.查询手机号是110的作者姓名</span></span><br><span class="line">    <span class="comment"># author_detail_obj = models.AuthorDetail.objects.filter(phone=110).first()</span></span><br><span class="line">    <span class="comment"># res = author_detail_obj.author</span></span><br><span class="line">    <span class="comment"># print(res.name)</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    基于对象 </span></span><br><span class="line"><span class="string">        反向查询的时候</span></span><br><span class="line"><span class="string">            当你的查询结果可以有多个的时候 就必须加_set.all()</span></span><br><span class="line"><span class="string">            当你的结果只有一个的时候 不需要加_set.all()</span></span><br><span class="line"><span class="string">        自己总结出 自己方便记忆的即可 每个人都可以不一样</span></span><br><span class="line"><span class="string">    """</span></span><br></pre></td></tr></table></figure>

<h3 id="联表查询-基于双下划线的跨表查询"><a href="#联表查询-基于双下划线的跨表查询" class="headerlink" title="联表查询(基于双下划线的跨表查询)"></a>联表查询(基于双下划线的跨表查询)</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 基于双下划线的跨表查询</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 1.查询jason的手机号和作者姓名</span></span><br><span class="line">    <span class="comment"># res = models.Author.objects.filter(name='jason').values('author_detail__phone','name')</span></span><br><span class="line">    <span class="comment"># print(res)</span></span><br><span class="line">    <span class="comment"># 反向</span></span><br><span class="line">    <span class="comment"># res = models.AuthorDetail.objects.filter(author__name='jason')  # 拿作者姓名是jason的作者详情</span></span><br><span class="line">    <span class="comment"># res = models.AuthorDetail.objects.filter(author__name='jason').values('phone','author__name')</span></span><br><span class="line">    <span class="comment"># print(res)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2.查询书籍主键为1的出版社名称和书的名称</span></span><br><span class="line">    <span class="comment"># res = models.Book.objects.filter(pk=1).values('title','publish__name')</span></span><br><span class="line">    <span class="comment"># print(res)</span></span><br><span class="line">    <span class="comment"># 反向</span></span><br><span class="line">    <span class="comment"># res = models.Publish.objects.filter(book__id=1).values('name','book__title')</span></span><br><span class="line">    <span class="comment"># print(res)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 3.查询书籍主键为1的作者姓名</span></span><br><span class="line">    <span class="comment"># res = models.Book.objects.filter(pk=1).values('authors__name')</span></span><br><span class="line">    <span class="comment"># print(res)</span></span><br><span class="line">    <span class="comment"># 反向</span></span><br><span class="line">    <span class="comment"># res = models.Author.objects.filter(book__id=1).values('name')</span></span><br><span class="line">    <span class="comment"># print(res)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 查询书籍主键是1的作者的手机号</span></span><br><span class="line">    <span class="comment"># book author authordetail</span></span><br><span class="line">    <span class="comment"># res = models.Book.objects.filter(pk=1).values('authors__author_detail__phone')</span></span><br><span class="line">    <span class="comment"># print(res)</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    你只要掌握了正反向的概念</span></span><br><span class="line"><span class="string">    以及双下划线</span></span><br><span class="line"><span class="string">    那么你就可以无限制的跨表</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    """</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>django框架</tag>
      </tags>
  </entry>
  <entry>
    <title>[路由分发与文件上传]</title>
    <url>/2019/07/04/%E8%B7%AF%E7%94%B1%E5%88%86%E5%8F%91%E4%B8%8E%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</url>
    <content><![CDATA[<h3 id="无名有名分组反向解析"><a href="#无名有名分组反向解析" class="headerlink" title="无名有名分组反向解析"></a>无名有名分组反向解析</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 无名分组反向解析</span></span><br><span class="line">	url(<span class="string">r'^index/(\d+)/'</span>,views.index,name=<span class="string">'xxx'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 前端</span></span><br><span class="line">	&#123;% url <span class="string">'xxx'</span> <span class="number">123</span> %&#125;</span><br><span class="line"><span class="comment"># 后端</span></span><br><span class="line">	reverse(<span class="string">'xxx'</span>, args=(<span class="number">1</span>,))</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">这个数字写代码的时候应该放什么</span></span><br><span class="line"><span class="string">	数字一般情况下放的是数据的主键值  数据的编辑和删除</span></span><br><span class="line"><span class="string">	url(r'^edit/(\d+)/',views.edit,name='xxx')</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">	def edit(request,edit_id):</span></span><br><span class="line"><span class="string">		reverse('xxx',args=(edit_id,))</span></span><br><span class="line"><span class="string">		</span></span><br><span class="line"><span class="string">	&#123;%for user_obj in user_queryset%&#125;</span></span><br><span class="line"><span class="string">		&lt;a href="&#123;% url 'xxx' user_obj.id %&#125;"&gt;编辑&lt;/a&gt;</span></span><br><span class="line"><span class="string">	&#123;%endfor%&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">今天每个人都必须完成的作业(*******)</span></span><br><span class="line"><span class="string">	利用无名有名 反向解析 完成数据的增删改查</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 有名分组反向解析</span></span><br><span class="line">   url(<span class="string">r'^func/(?P&lt;year&gt;\d+)/'</span>,views.func,name=<span class="string">'ooo'</span>)</span><br><span class="line"><span class="comment"># 前端</span></span><br><span class="line">	&lt;a href="&#123;% url 'ooo' year=123 %&#125;"&gt;111&lt;/a&gt;  了解</span><br><span class="line">	&lt;a href="&#123;% url 'ooo' 123 %&#125;"&gt;222&lt;/a&gt;  		记忆</span><br><span class="line"></span><br><span class="line"><span class="comment"># 后端	</span></span><br><span class="line">	<span class="comment"># 有名分组反向解析 写法1  了解</span></span><br><span class="line">    print(reverse(<span class="string">'ooo'</span>,kwargs=&#123;<span class="string">'year'</span>:<span class="number">123</span>&#125;))</span><br><span class="line">    <span class="comment"># 简便的写法  减少你的脑容量消耗 记跟无名一样的操作即可</span></span><br><span class="line">    print(reverse(<span class="string">'ooo'</span>,args=(<span class="number">111</span>,)))</span><br></pre></td></tr></table></figure>

<h3 id="路由分发"><a href="#路由分发" class="headerlink" title="路由分发"></a>路由分发</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">django的每一个应用都可以有自己的templates文件夹 urls.py static文件夹</span></span><br><span class="line"><span class="string">正是基于上述的特点 django能够非常好的做到分组开发(每个人只写自己的app)</span></span><br><span class="line"><span class="string">作为组长 只需要将手下书写的app全部拷贝到一个新的django项目中 然后在配置文件里面注册所有的app再利用路由分发的特点将所有的app整合起来</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">当一个django项目中的url特别多的时候 总路由urls.py代码非常冗余不好维护</span></span><br><span class="line"><span class="string">这个时候也可以利用路由分发来减轻总路由的压力</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">利用路由分发之后 总路由不再干路由与视图函数的直接对应关系</span></span><br><span class="line"><span class="string">而是做一个分发处理</span></span><br><span class="line"><span class="string">	识别当前url是属于哪个应用下的 直接分发给对应的应用去处理</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 总路由</span></span><br><span class="line"><span class="keyword">from</span> app01 <span class="keyword">import</span> urls <span class="keyword">as</span> app01_urls</span><br><span class="line"><span class="keyword">from</span> app02 <span class="keyword">import</span> urls <span class="keyword">as</span> app02_urls</span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r'^admin/'</span>, admin.site.urls),</span><br><span class="line">    <span class="comment"># 1.路由分发</span></span><br><span class="line">    url(<span class="string">r'^app01/'</span>,include(app01_urls)),  <span class="comment"># 只要url前缀是app01开头 全部交给app01处理</span></span><br><span class="line">    url(<span class="string">r'^app02/'</span>,include(app02_urls))   <span class="comment"># 只要url前缀是app02开头 全部交给app02处理</span></span><br><span class="line">  </span><br><span class="line">    <span class="comment"># 2.终极写法  推荐使用</span></span><br><span class="line">    url(<span class="string">r'^app01/'</span>,include(<span class="string">'app01.urls'</span>)),</span><br><span class="line">    url(<span class="string">r'^app02/'</span>,include(<span class="string">'app02.urls'</span>))</span><br><span class="line">    <span class="comment"># 注意事项:总路由里面的url千万不能加$结尾</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 子路由</span></span><br><span class="line">	<span class="comment"># app01 urls.py</span></span><br><span class="line">  <span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url</span><br><span class="line">  <span class="keyword">from</span> app01 <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">  urlpatterns = [</span><br><span class="line">      url(<span class="string">r'^reg/'</span>,views.reg)</span><br><span class="line">  ]</span><br><span class="line">  <span class="comment"># app02 urls.py</span></span><br><span class="line">  <span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url</span><br><span class="line">  <span class="keyword">from</span> app02 <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">  urlpatterns = [</span><br><span class="line">      url(<span class="string">r'^reg/'</span>,views.reg)</span><br><span class="line">  ]</span><br></pre></td></tr></table></figure>

<h3 id="名称空间-了解"><a href="#名称空间-了解" class="headerlink" title="名称空间(了解)"></a>名称空间(了解)</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 当多个应用出现了相同的别名 我们研究反向解析会不会自动识别应用前缀</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">正常情况下的反向解析是没有办法自动识别前缀的</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 名称空间</span></span><br><span class="line">	<span class="comment"># 总路由</span></span><br><span class="line">    url(<span class="string">r'^app01/'</span>,include(<span class="string">'app01.urls'</span>,namespace=<span class="string">'app01'</span>)),</span><br><span class="line">    url(<span class="string">r'^app02/'</span>,include(<span class="string">'app02.urls'</span>,namespace=<span class="string">'app02'</span>))</span><br><span class="line">  <span class="comment"># 解析的时候</span></span><br><span class="line">  	<span class="comment"># app01</span></span><br><span class="line">  	urlpatterns = [</span><br><span class="line">    url(<span class="string">r'^reg/'</span>,views.reg,name=<span class="string">'reg'</span>)</span><br><span class="line">		]</span><br><span class="line">    <span class="comment"># app02</span></span><br><span class="line">    urlpatterns = [</span><br><span class="line">    url(<span class="string">r'^reg/'</span>,views.reg,name=<span class="string">'reg'</span>)</span><br><span class="line">		]</span><br><span class="line">    </span><br><span class="line">  	reverse(<span class="string">'app01:reg'</span>)</span><br><span class="line">    reverse(<span class="string">'app02:reg'</span>)</span><br><span class="line">    </span><br><span class="line">    &#123;% url <span class="string">'app01:reg'</span> %&#125;</span><br><span class="line">    &#123;% url <span class="string">'app02:reg'</span> %&#125;</span><br><span class="line"><span class="comment"># 其实只要保证名字不冲突 就没有必要使用名称空间</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">一般情况下 有多个app的时候我们在起别名的时候会加上app的前缀</span></span><br><span class="line"><span class="string">这样的话就能够确保多个app之间名字不冲突的问题</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r'^reg/'</span>,views.reg,name=<span class="string">'app01_reg'</span>)</span><br><span class="line">]</span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r'^reg/'</span>,views.reg,name=<span class="string">'app02_reg'</span>)</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h3 id="伪静态-了解"><a href="#伪静态-了解" class="headerlink" title="伪静态(了解)"></a>伪静态(了解)</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">静态网页</span></span><br><span class="line"><span class="string">	数据是写死的 万年不变</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">伪静态</span></span><br><span class="line"><span class="string">	将一个动态网页伪装成静态网页</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">	为什么要伪装呢？</span></span><br><span class="line"><span class="string">		https://www.cnblogs.com/Dominic-Ji/p/9234099.html</span></span><br><span class="line"><span class="string">		伪装的目的在于增大本网站的seo查询力度</span></span><br><span class="line"><span class="string">		并且增加搜索引擎收藏本网上的概率</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">	搜索引擎本质上就是一个巨大的爬虫程序</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">	总结:</span></span><br><span class="line"><span class="string">		无论你怎么优化 怎么处理</span></span><br><span class="line"><span class="string">		始终还是干不过RMB玩家</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r'^reg.html'</span>,views.reg,name=<span class="string">'app02_reg'</span>)</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h3 id="虚拟环境-了解"><a href="#虚拟环境-了解" class="headerlink" title="虚拟环境(了解)"></a>虚拟环境(了解)</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">在正常开发中 我们会给每一个项目配备一个该项目独有的解释器环境</span></span><br><span class="line"><span class="string">该环境内只有该项目用到的模块 用不到一概不装</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">linux:缺什么才装什么</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">虚拟环境</span></span><br><span class="line"><span class="string">	你每创建一个虚拟环境就类似于重新下载了一个纯净的python解释器</span></span><br><span class="line"><span class="string">	但是虚拟环境不要创建太多，是需要消耗硬盘空间的</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">扩展:</span></span><br><span class="line"><span class="string">	每一个项目都需要用到很多模块 并且每个模块版本可能还不一样</span></span><br><span class="line"><span class="string">	那我该如何安装呢？ 一个个看一个个装？？？</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">	开发当中我们会给每一个项目配备一个requirements.txt文件</span></span><br><span class="line"><span class="string">	里面书写了该项目所有的模块即版本</span></span><br><span class="line"><span class="string">	你只需要直接输入一条命令即可一键安装所有模块即版本</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<h3 id="django版本区别"><a href="#django版本区别" class="headerlink" title="django版本区别"></a>django版本区别</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">1.django1.X路由层使用的是url方法</span></span><br><span class="line"><span class="string">	而在django2.Xhe3.X版本中路由层使用的是path方法</span></span><br><span class="line"><span class="string">	url()第一个参数支持正则</span></span><br><span class="line"><span class="string">	path()第一个参数是不支持正则的 写什么就匹配什么</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">	如果你习惯使用path那么也给你提供了另外一个方法</span></span><br><span class="line"><span class="string">		from django.urls import path, re_path</span></span><br><span class="line"><span class="string">		from django.conf.urls import url</span></span><br><span class="line"><span class="string">		</span></span><br><span class="line"><span class="string">		re_path(r'^index/',index),</span></span><br><span class="line"><span class="string">    url(r'^login/',login)</span></span><br><span class="line"><span class="string">  2.X和3.X里面的re_path就等价于1.X里面的url</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">2.虽然path不支持正则 但是它的内部支持五种转换器</span></span><br><span class="line"><span class="string">	path('index/&lt;int:id&gt;/',index)</span></span><br><span class="line"><span class="string">	# 将第二个路由里面的内容先转成整型然后以关键字的形式传递给后面的视图函数</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">	def index(request,id):</span></span><br><span class="line"><span class="string">    print(id,type(id))</span></span><br><span class="line"><span class="string">    return HttpResponse('index')</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  str,匹配除了路径分隔符（/）之外的非空字符串，这是默认的形式</span></span><br><span class="line"><span class="string">	int,匹配正整数，包含0。</span></span><br><span class="line"><span class="string">	slug,匹配字母、数字以及横杠、下划线组成的字符串。</span></span><br><span class="line"><span class="string">	uuid,匹配格式化的uuid，如 075194d3-6885-417e-a8a8-6c931e272f00。</span></span><br><span class="line"><span class="string">	path,匹配任何非空字符串，包含了路径分隔符（/）（不能用？）</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">3.除了有默认的五个转换器之外 还支持自定义转换器(了解)</span></span><br><span class="line"><span class="string">	class MonthConverter:</span></span><br><span class="line"><span class="string">    regex='\d&#123;2&#125;' # 属性名必须为regex</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    def to_python(self, value):</span></span><br><span class="line"><span class="string">        return int(value)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    def to_url(self, value):</span></span><br><span class="line"><span class="string">        return value # 匹配的regex是两个数字，返回的结果也必须是两个数字</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">	from django.urls import path,register_converter</span></span><br><span class="line"><span class="string">	from app01.path_converts import MonthConverter</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">	# 先注册转换器</span></span><br><span class="line"><span class="string">	register_converter(MonthConverter,'mon')</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">	from app01 import views</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">	urlpatterns = [</span></span><br><span class="line"><span class="string">    path('articles/&lt;int:year&gt;/&lt;mon:month&gt;/&lt;slug:other&gt;/', 	views.article_detail, name='aaa'),</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">4.模型层里面1.X外键默认都是级联更新删除的</span></span><br><span class="line"><span class="string">但是到了2.X和3.X中需要你自己手动配置参数</span></span><br><span class="line"><span class="string">	models.ForeignKey(to='Publish')</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">	models.ForeignKey(to='Publish',on_delete=models.CASCADE...)</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<h1 id="视图层"><a href="#视图层" class="headerlink" title="视图层"></a>视图层</h1><h3 id="三板斧"><a href="#三板斧" class="headerlink" title="三板斧"></a>三板斧</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">HttpResponse</span></span><br><span class="line"><span class="string">	返回字符串类型</span></span><br><span class="line"><span class="string">render</span></span><br><span class="line"><span class="string">	返回html页面 并且在返回给浏览器之前还可以给html文件传值</span></span><br><span class="line"><span class="string">redirect</span></span><br><span class="line"><span class="string">	重定向</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment"># 视图函数必须要返回一个HttpResponse对象  正确   研究三者的源码即可得处结论</span></span><br><span class="line">The view app01.views.index didn<span class="string">'t return an HttpResponse object. It returned None instead.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># render简单内部原理</span></span><br><span class="line"><span class="string">	from django.template import Template,Context</span></span><br><span class="line">    res = Template('&lt;h1&gt;&#123;&#123; user &#125;&#125;&lt;/h1&gt;')</span><br><span class="line">    con = Context(&#123;<span class="string">'user'</span>:&#123;<span class="string">'username'</span>:<span class="string">'jason'</span>,<span class="string">'password'</span>:<span class="number">123</span>&#125;&#125;)</span><br><span class="line">    ret = res.render(con)</span><br><span class="line">    print(ret)</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(ret)</span><br></pre></td></tr></table></figure>

<h3 id="JsonResponse对象"><a href="#JsonResponse对象" class="headerlink" title="JsonResponse对象"></a>JsonResponse对象</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">json格式的数据有什么用？</span></span><br><span class="line"><span class="string">	前后端数据交互需要使用到json作为过渡 实现跨语言传输数据</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">前端序列化</span></span><br><span class="line"><span class="string">	JSON.stringify()					json.dumps()</span></span><br><span class="line"><span class="string">	JSON.parse()						json.loads()</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> JsonResponse</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ab_json</span><span class="params">(request)</span>:</span></span><br><span class="line">    user_dict = &#123;<span class="string">'username'</span>:<span class="string">'jason好帅哦,我好喜欢!'</span>,<span class="string">'password'</span>:<span class="string">'123'</span>,<span class="string">'hobby'</span>:<span class="string">'girl'</span>&#125;</span><br><span class="line"></span><br><span class="line">    l = [<span class="number">111</span>,<span class="number">222</span>,<span class="number">333</span>,<span class="number">444</span>,<span class="number">555</span>]</span><br><span class="line">    <span class="comment"># 先转成json格式字符串</span></span><br><span class="line">    <span class="comment"># json_str = json.dumps(user_dict,ensure_ascii=False)</span></span><br><span class="line">    <span class="comment"># 将该字符串返回</span></span><br><span class="line">    <span class="comment"># return HttpResponse(json_str)</span></span><br><span class="line">    <span class="comment"># 读源码掌握用法</span></span><br><span class="line">    <span class="comment"># return JsonResponse(user_dict,json_dumps_params=&#123;'ensure_ascii':False&#125;)</span></span><br><span class="line">    <span class="comment"># In order to allow non-dict objects to be serialized set the safe parameter to False.</span></span><br><span class="line">    <span class="comment"># return JsonResponse(l,safe=False)  </span></span><br><span class="line">    <span class="comment"># 默认只能序列化字典 序列化其他需要加safe参数</span></span><br></pre></td></tr></table></figure>

<h3 id="form表单上传文件及后端如何操作"><a href="#form表单上传文件及后端如何操作" class="headerlink" title="form表单上传文件及后端如何操作"></a>form表单上传文件及后端如何操作</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">form表单上传文件类型的数据</span></span><br><span class="line"><span class="string">	1.method必须指定成post</span></span><br><span class="line"><span class="string">	2.enctype必须换成formdata</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ab_file</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'POST'</span>:</span><br><span class="line">        <span class="comment"># print(request.POST)  # 只能获取普通的键值对数据 文件不行</span></span><br><span class="line">        print(request.FILES)  <span class="comment"># 获取文件数据</span></span><br><span class="line">        <span class="comment"># &lt;MultiValueDict: &#123;'file': [&lt;InMemoryUploadedFile: u=1288812541,1979816195&amp;fm=26&amp;gp=0.jpg (image/jpeg)&gt;]&#125;&gt;</span></span><br><span class="line">        file_obj = request.FILES.get(<span class="string">'file'</span>)  <span class="comment"># 文件对象</span></span><br><span class="line">        print(file_obj.name)</span><br><span class="line">        <span class="keyword">with</span> open(file_obj.name,<span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            <span class="keyword">for</span> line <span class="keyword">in</span> file_obj.chunks():  <span class="comment"># 推荐加上chunks方法 其实跟不加是一样的都是一行行的读取</span></span><br><span class="line">                f.write(line)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">'form.html'</span>)</span><br></pre></td></tr></table></figure>

<h3 id="request对象方法"><a href="#request对象方法" class="headerlink" title="request对象方法"></a>request对象方法</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">request.method</span></span><br><span class="line"><span class="string">request.POST</span></span><br><span class="line"><span class="string">request.GET</span></span><br><span class="line"><span class="string">request.FILES</span></span><br><span class="line"><span class="string">request.body  # 原生的浏览器发过来的二进制数据  后面详细的讲</span></span><br><span class="line"><span class="string">request.path </span></span><br><span class="line"><span class="string">request.path_info</span></span><br><span class="line"><span class="string">request.get_full_path()  能过获取完整的url及问号后面的参数 </span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">    print(request.path)  <span class="comment"># /app01/ab_file/</span></span><br><span class="line">    print(request.path_info)  <span class="comment"># /app01/ab_file/</span></span><br><span class="line">    print(request.get_full_path())  <span class="comment"># /app01/ab_file/?username=jason</span></span><br></pre></td></tr></table></figure>

<h3 id="FBV与CBV"><a href="#FBV与CBV" class="headerlink" title="FBV与CBV"></a>FBV与CBV</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 视图函数既可以是函数也可以是类</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></span><br><span class="line">  <span class="keyword">return</span> HttpResponse(<span class="string">'index'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># CBV</span></span><br><span class="line">    <span class="comment"># CBV路由</span></span><br><span class="line">    url(<span class="string">r'^login/'</span>,views.MyLogin.as_view())</span><br><span class="line"></span><br><span class="line">		<span class="keyword">from</span> django.views <span class="keyword">import</span> View</span><br><span class="line"></span><br><span class="line">		<span class="class"><span class="keyword">class</span> <span class="title">MyLogin</span><span class="params">(View)</span>:</span></span><br><span class="line">    	<span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self,request)</span>:</span></span><br><span class="line">        	<span class="keyword">return</span> render(request,<span class="string">'form.html'</span>)</span><br><span class="line"></span><br><span class="line">    	<span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self,request)</span>:</span></span><br><span class="line">        	<span class="keyword">return</span> HttpResponse(<span class="string">'post方法'</span>)</span><br><span class="line">      </span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">FBV和CBV各有千秋</span></span><br><span class="line"><span class="string">CBV特点</span></span><br><span class="line"><span class="string">	能够直接根据请求方式的不同直接匹配到对应的方法执行</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">	内部到底是怎么实现的？</span></span><br><span class="line"><span class="string">		CBV内部源码(******)</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>django框架</tag>
      </tags>
  </entry>
  <entry>
    <title>[模板语法]</title>
    <url>/2019/07/04/%E6%A8%A1%E6%9D%BF%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<h3 id="CBV源码剖析"><a href="#CBV源码剖析" class="headerlink" title="CBV源码剖析"></a>CBV源码剖析</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 你自己不要修改源码 除了bug很难找</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 突破口在urls.py</span></span><br><span class="line">url(<span class="string">r'^login/'</span>,views.MyLogin.as_view())</span><br><span class="line"><span class="comment"># url(r'^login/',views.view)  FBV一模一样</span></span><br><span class="line"><span class="comment"># CBV与FBV在路由匹配上本质是一样的 都是路由 对应 函数内存地址</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">函数名/方法名 加括号执行优先级最高</span></span><br><span class="line"><span class="string">猜测</span></span><br><span class="line"><span class="string">    as_view()</span></span><br><span class="line"><span class="string">        要么是被@staicmethod修饰的静态方法</span></span><br><span class="line"><span class="string">        要么是被@classmethod修饰的类方法  正确</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">    @classonlymethod</span></span><br><span class="line"><span class="string">    def as_view(cls, **initkwargs):</span></span><br><span class="line"><span class="string">        pass</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @classonlymethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">as_view</span><span class="params">(cls, **initkwargs)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        cls就是我们自己写的类   MyCBV</span></span><br><span class="line"><span class="string">        Main entry point for a request-response process.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">view</span><span class="params">(request, *args, **kwargs)</span>:</span></span><br><span class="line">            self = cls(**initkwargs)  <span class="comment"># cls是我们自己写的类</span></span><br><span class="line">            <span class="comment"># self = MyLogin(**initkwargs)  产生一个我们自己写的类的对象</span></span><br><span class="line">            <span class="keyword">return</span> self.dispatch(request, *args, **kwargs)</span><br><span class="line">            <span class="string">"""</span></span><br><span class="line"><span class="string">            以后你们会经常需要看源码 但是在看python源码的时候 一定要时刻提醒自己面向对象属性方法查找顺序</span></span><br><span class="line"><span class="string">                先从对象自己找</span></span><br><span class="line"><span class="string">                再去产生对象的类里面找</span></span><br><span class="line"><span class="string">                之后再去父类找</span></span><br><span class="line"><span class="string">                ...</span></span><br><span class="line"><span class="string">            总结:看源码只要看到了self点一个东西 一定要问你自己当前这个self到底是谁</span></span><br><span class="line"><span class="string">            """</span></span><br><span class="line">        <span class="keyword">return</span> view</span><br><span class="line">      </span><br><span class="line">		<span class="comment"># CBV的精髓</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dispatch</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="comment"># 获取当前请求的小写格式 然后比对当前请求方式是否合法</span></span><br><span class="line">        <span class="comment"># get请求为例</span></span><br><span class="line">        <span class="comment"># post请求</span></span><br><span class="line">        <span class="keyword">if</span> request.method.lower() <span class="keyword">in</span> self.http_method_names:</span><br><span class="line">            handler = getattr(self, request.method.lower(), 		  						self.http_method_not_allowed)</span><br><span class="line">            <span class="string">"""</span></span><br><span class="line"><span class="string">            反射:通过字符串来操作对象的属性或者方法</span></span><br><span class="line"><span class="string">                handler = getattr(自己写的类产生的对象,'get',当找不到get属性或者方法的时候					就会用第三个参数)</span></span><br><span class="line"><span class="string">                handler = 我们自己写的类里面的get方法</span></span><br><span class="line"><span class="string">            """</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            handler = self.http_method_not_allowed</span><br><span class="line">        	<span class="keyword">return</span> handler(request, *args, **kwargs)</span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        自动调用get方法</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 要求掌握到不看源码也能够描述出CBV的内部执行流程(******)</span></span><br></pre></td></tr></table></figure>

<h3 id="模版语法传值"><a href="#模版语法传值" class="headerlink" title="模版语法传值"></a>模版语法传值</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;&#123;&#125;&#125;:变量相关</span><br><span class="line"></span><br><span class="line">&#123;%%&#125;:逻辑相关</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="comment"># 模版语法可以传递的后端python数据类型</span></span><br><span class="line">    n = <span class="number">123</span></span><br><span class="line">    f = <span class="number">11.11</span></span><br><span class="line">    s = <span class="string">'我也想奔现'</span></span><br><span class="line">    b = <span class="literal">True</span></span><br><span class="line">    l = [<span class="string">'小红'</span>,<span class="string">'姗姗'</span>,<span class="string">'花花'</span>,<span class="string">'茹茹'</span>]</span><br><span class="line">    t = (<span class="number">111</span>,<span class="number">222</span>,<span class="number">333</span>,<span class="number">444</span>)</span><br><span class="line">    d = &#123;<span class="string">'username'</span>:<span class="string">'jason'</span>,<span class="string">'age'</span>:<span class="number">18</span>,<span class="string">'info'</span>:<span class="string">'这个人有点意思'</span>&#125;</span><br><span class="line">    se = &#123;<span class="string">'晶晶'</span>,<span class="string">'洋洋'</span>,<span class="string">'嘤嘤'</span>&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line">        print(<span class="string">'我被执行了'</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'你的另一半在等你'</span></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">MyClass</span><span class="params">(object)</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">get_self</span><span class="params">(self)</span>:</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">'self'</span></span><br><span class="line"></span><br><span class="line"><span class="meta">        @staticmethod</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">get_func</span><span class="params">()</span>:</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">'func'</span></span><br><span class="line"></span><br><span class="line"><span class="meta">        @classmethod</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">get_class</span><span class="params">(cls)</span>:</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">'cls'</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 对象被展示到html页面上 就类似于执行了打印操作也会触发__str__方法</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">'到底会不会？'</span>  </span><br><span class="line">        </span><br><span class="line">    obj = MyClass()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># return render(request,'index.html',&#123;&#125;)  # 一个个传</span></span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">'index.html'</span>,locals())</span><br><span class="line"></span><br><span class="line">&lt;p&gt;&#123;&#123; n &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;&#123;&#123; f &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;&#123;&#123; s &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;&#123;&#123; b &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;&#123;&#123; l &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;&#123;&#123; d &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;&#123;&#123; t &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;&#123;&#123; se &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;传递函数名会自动加括号调用 但是模版语法不支持给函数传额外的参数:&#123;&#123; func &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;传类名的时候也会自动加括号调用(实例化)&#123;&#123; MyClass &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;内部能够自动判断出当前的变量名是否可以加括号调用 如果可以就会自动执行  针对的是函数名和类名&lt;/p&gt;</span><br><span class="line">&lt;p&gt;&#123;&#123; obj &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;&#123;&#123; obj.get_self &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;&#123;&#123; obj.get_func &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;&#123;&#123; obj.get_class &#125;&#125;&lt;/p&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># django模版语法的取值 是固定的格式 只能采用“句点符” .</span></span><br><span class="line">&lt;p&gt;&#123;&#123; d.username &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;&#123;&#123; l.0 &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;&#123;&#123; d.hobby.3.info &#125;&#125;&lt;/p&gt;</span><br><span class="line"><span class="comment"># 即可以点键也可以点索引 还可以两者混用</span></span><br></pre></td></tr></table></figure>

<h3 id="过滤器-过滤器只能最多有两个参数"><a href="#过滤器-过滤器只能最多有两个参数" class="headerlink" title="过滤器(过滤器只能最多有两个参数)"></a>过滤器(过滤器只能最多有两个参数)</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 过滤器就类似于是模版语法内置的 内置方法</span></span><br><span class="line"><span class="comment"># django内置有60多个过滤器 我们不需要学这么多 了解10个左右就差不多了 后面碰到了再去记忆</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 基本语法</span></span><br><span class="line">&#123;&#123;数据|过滤器:参数&#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 转义</span></span><br><span class="line"><span class="comment"># 前端</span></span><br><span class="line">	|safe</span><br><span class="line"><span class="comment"># 后端</span></span><br><span class="line">	<span class="keyword">from</span> django.utils.safestring <span class="keyword">import</span> mark_safe</span><br><span class="line">	res = mark_safe(<span class="string">'&lt;h1&gt;新新&lt;/h1&gt;'</span>)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">以后你在全栈项目的时候 前端代码不一定非要在前端页面书写</span></span><br><span class="line"><span class="string">也可以现在先在后端写好 然后传递给前端页面</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">&lt;h1&gt;过滤器&lt;/h1&gt;</span><br><span class="line">&lt;p&gt;统计长度:&#123;&#123; s|length &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;默认值(第一个参数布尔值是True就展示第一个参数的值否在展示冒号后面的值):&#123;&#123; b|default:'啥也不是' &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;文件大小:&#123;&#123; file_size|filesizeformat &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;日期格式化:&#123;&#123; current_time|date:'Y-m-d H:i:s' &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;切片操作(支持步长):&#123;&#123; l|slice:'0:4:2' &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;切取字符(包含三个点):&#123;&#123; info|truncatechars:9 &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;切取单词(不包含三个点 按照空格切):&#123;&#123; egl|truncatewords:9 &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;切取单词(不包含三个点 按照空格切):&#123;&#123; info|truncatewords:9 &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;移除特定的字符:&#123;&#123; msg|cut:' ' &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;拼接操作:&#123;&#123; l|join:'$' &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;拼接操作(加法):&#123;&#123; n|add:10 &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;拼接操作(加法):&#123;&#123; s|add:msg &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;转义:&#123;&#123; hhh|safe &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;转义:&#123;&#123; sss|safe &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;转义:&#123;&#123; res &#125;&#125;&lt;/p&gt;</span><br></pre></td></tr></table></figure>

<h3 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># for循环</span></span><br><span class="line">	&#123;% <span class="keyword">for</span> foo <span class="keyword">in</span> l %&#125;</span><br><span class="line">    &lt;p&gt;&#123;&#123; forloop &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123; foo &#125;&#125;&lt;/p&gt;  一个个元素</span><br><span class="line">	&#123;% endfor %&#125;</span><br><span class="line">  &#123;<span class="string">'parentloop'</span>: &#123;&#125;, <span class="string">'counter0'</span>: <span class="number">0</span>, <span class="string">'counter'</span>: <span class="number">1</span>, <span class="string">'revcounter'</span>: <span class="number">6</span>, <span class="string">'revcounter0'</span>: 	<span class="number">5</span>, <span class="string">'first'</span>: <span class="literal">True</span>, <span class="string">'last'</span>: <span class="literal">False</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># if判断</span></span><br><span class="line">&#123;% <span class="keyword">if</span> b %&#125;</span><br><span class="line">    &lt;p&gt;baby&lt;/p&gt;</span><br><span class="line">&#123;% <span class="keyword">elif</span> s%&#125;</span><br><span class="line">    &lt;p&gt;都来把&lt;/p&gt;</span><br><span class="line">&#123;% <span class="keyword">else</span> %&#125;</span><br><span class="line">    &lt;p&gt;老baby&lt;/p&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># for与if混合使用</span></span><br><span class="line">&#123;% <span class="keyword">for</span> foo <span class="keyword">in</span> lll %&#125;</span><br><span class="line">    &#123;% <span class="keyword">if</span> forloop.first %&#125;</span><br><span class="line">        &lt;p&gt;这是我的第一次&lt;/p&gt;</span><br><span class="line">    &#123;% <span class="keyword">elif</span> forloop.last %&#125;</span><br><span class="line">        &lt;p&gt;这是最后一次啊&lt;/p&gt;</span><br><span class="line">    &#123;% <span class="keyword">else</span> %&#125;</span><br><span class="line">        &lt;p&gt;&#123;&#123; foo &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">    &#123;% empty %&#125;</span><br><span class="line">        &lt;p&gt;for循环的可迭代对象内部没有元素 根本没法循环&lt;/p&gt;</span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 处理字典其他方法</span></span><br><span class="line">&#123;% <span class="keyword">for</span> foo <span class="keyword">in</span> d.keys %&#125;</span><br><span class="line">    &lt;p&gt;&#123;&#123; foo &#125;&#125;&lt;/p&gt;</span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line">&#123;% <span class="keyword">for</span> foo <span class="keyword">in</span> d.values %&#125;</span><br><span class="line">    &lt;p&gt;&#123;&#123; foo &#125;&#125;&lt;/p&gt;</span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line">&#123;% <span class="keyword">for</span> foo <span class="keyword">in</span> d.items %&#125;</span><br><span class="line">    &lt;p&gt;&#123;&#123; foo &#125;&#125;&lt;/p&gt;</span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># with起别名</span></span><br><span class="line">&#123;% <span class="keyword">with</span> d.hobby<span class="number">.3</span>.info <span class="keyword">as</span> nb  %&#125;</span><br><span class="line">    &lt;p&gt;&#123;&#123; nb &#125;&#125;&lt;/p&gt;</span><br><span class="line">    在<span class="keyword">with</span>语法内就可以通过<span class="keyword">as</span>后面的别名快速的使用到前面非常复杂获取数据的方式</span><br><span class="line">    &lt;p&gt;&#123;&#123; d.hobby.3.info &#125;&#125;&lt;/p&gt;</span><br><span class="line">&#123;% endwith %&#125;</span><br></pre></td></tr></table></figure>

<h3 id="自定义过滤器、标签、inclusion-tag"><a href="#自定义过滤器、标签、inclusion-tag" class="headerlink" title="自定义过滤器、标签、inclusion_tag"></a>自定义过滤器、标签、inclusion_tag</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">先三步走</span></span><br><span class="line"><span class="string">	1.在应用下创建一个名字”必须“叫templatetags文件夹</span></span><br><span class="line"><span class="string">	2.在该文件夹内创建“任意”名称的py文件 eg:mytag.py</span></span><br><span class="line"><span class="string">	3.在该py文件内"必须"先书写下面两句话(单词一个都不能错)</span></span><br><span class="line"><span class="string">		from django import template</span></span><br><span class="line"><span class="string">		</span></span><br><span class="line"><span class="string">		register = template.Library()</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 自定义过滤器</span></span><br><span class="line"><span class="meta">@register.filter(name='baby')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_sum</span><span class="params">(v1, v2)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> v1 + v2</span><br><span class="line"><span class="comment"># 使用</span></span><br><span class="line">&#123;% load mytag %&#125;</span><br><span class="line">&lt;p&gt;&#123;&#123; n|baby:666 &#125;&#125;&lt;/p&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 自定义标签(参数可以有多个)			类似于自定义函数</span></span><br><span class="line"><span class="meta">@register.simple_tag(name='plus')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(a,b,c,d)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'%s-%s-%s-%s'</span>%(a,b,c,d)</span><br><span class="line"><span class="comment"># 使用</span></span><br><span class="line">标签多个参数彼此之间空格隔开</span><br><span class="line">&lt;p&gt;&#123;% plus 'jason' 123 123 123 %&#125;&lt;/p&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 自定义inclusion_tag</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">内部原理</span></span><br><span class="line"><span class="string">	先定义一个方法 </span></span><br><span class="line"><span class="string">	在页面上调用该方法 并且可以传值</span></span><br><span class="line"><span class="string">	该方法会生成一些数据然后传递给一个html页面</span></span><br><span class="line"><span class="string">	之后将渲染好的结果放到调用的位置</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="meta">@register.inclusion_tag('left_menu.html')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">left</span><span class="params">(n)</span>:</span></span><br><span class="line">    data = [<span class="string">'第&#123;&#125;项'</span>.format(i) <span class="keyword">for</span> i <span class="keyword">in</span> range(n)]</span><br><span class="line">    <span class="comment"># 第一种</span></span><br><span class="line">    <span class="comment"># return &#123;'data':data&#125;  # 将data传递给left_menu.html</span></span><br><span class="line">    <span class="comment"># 第二种</span></span><br><span class="line">    <span class="keyword">return</span> locals()  <span class="comment"># 将data传递给left_menu.html</span></span><br><span class="line">  </span><br><span class="line">&#123;% left <span class="number">5</span> %&#125;</span><br><span class="line"><span class="comment"># 总结:当html页面某一个地方的页面需要传参数才能够动态的渲染出来，并且在多个页面上都需要使用到该局部 那么就考虑将该局部页面做成inclusion_tag形式</span></span><br><span class="line">(在讲bbs的时候会使用到)</span><br></pre></td></tr></table></figure>

<h3 id="模版的继承"><a href="#模版的继承" class="headerlink" title="模版的继承"></a>模版的继承</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">你们有没有见过一些网站</span></span><br><span class="line"><span class="string">	这些网站页面整体都大差不差 只是某一些局部在做变化	</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment"># 模版的继承 你自己先选好一个你要想继承的模版页面</span></span><br><span class="line">&#123;% extends <span class="string">'home.html'</span> %&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 继承了之后子页面跟模版页面长的是一模一样的 你需要在模版页面上提前划定可以被修改的区域</span></span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line">	模版内容</span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 子页面就可以声明想要修改哪块划定了的区域</span></span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line">	子页面内容	</span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 一般情况下模版页面上应该至少有三块可以被修改的区域</span></span><br><span class="line">	<span class="number">1.</span>css区域</span><br><span class="line">  <span class="number">2.</span>html区域</span><br><span class="line">  <span class="number">3.j</span>s区域</span><br><span class="line">  &#123;% block css %&#125;</span><br><span class="line"></span><br><span class="line">	&#123;% endblock %&#125;</span><br><span class="line">  </span><br><span class="line">  &#123;% block content %&#125;</span><br><span class="line"></span><br><span class="line">	&#123;% endblock %&#125;</span><br><span class="line">  </span><br><span class="line">  &#123;% block js %&#125;</span><br><span class="line"></span><br><span class="line">	&#123;% endblock %&#125;</span><br><span class="line">  <span class="comment"># 每一个子页面就都可以有自己独有的css代码 html代码 js代码</span></span><br><span class="line">  </span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">一般情况下 模版的页面上划定的区域越多 那么该模版的扩展性就越高</span></span><br><span class="line"><span class="string">但是如果太多 那还不如自己直接写</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<h3 id="模版的导入"><a href="#模版的导入" class="headerlink" title="模版的导入"></a>模版的导入</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">将页面的某一个局部当成模块的形式</span></span><br><span class="line"><span class="string">哪个地方需要就可以直接导入使用即可</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">&#123;% include <span class="string">'wasai.html'</span> %&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>django框架</tag>
      </tags>
  </entry>
  <entry>
    <title>[F与Q查询]</title>
    <url>/2019/07/06/F%E4%B8%8EQ%E6%9F%A5%E8%AF%A2/</url>
    <content><![CDATA[<h3 id="聚合查询"><a href="#聚合查询" class="headerlink" title="聚合查询"></a>聚合查询</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 聚合查询      aggregate</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    聚合查询通常情况下都是配合分组一起使用的</span></span><br><span class="line"><span class="string">    只要是跟数据库相关的模块 </span></span><br><span class="line"><span class="string">        基本上都在django.db.models里面</span></span><br><span class="line"><span class="string">        如果上述没有那么应该在django.db里面</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">from</span> app01 <span class="keyword">import</span> models</span><br><span class="line">    <span class="keyword">from</span> django.db.models <span class="keyword">import</span> Max,Min,Sum,Count,Avg</span><br><span class="line">    <span class="comment"># 1 所有书的平均价格</span></span><br><span class="line">    <span class="comment"># res = models.Book.objects.aggregate(Avg('price'))</span></span><br><span class="line">    <span class="comment"># print(res)</span></span><br><span class="line">    <span class="comment"># 2.上述方法一次性使用</span></span><br><span class="line">    res = models.Book.objects.aggregate(Max(<span class="string">'price'</span>),Min(<span class="string">'price'</span>),Sum(<span class="string">'price'</span>),Count(<span class="string">'pk'</span>),Avg(<span class="string">'price'</span>))</span><br><span class="line">    print(res)</span><br></pre></td></tr></table></figure>

<h3 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 分组查询  annotate</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    MySQL分组查询都有哪些特点</span></span><br><span class="line"><span class="string">        分组之后默认只能获取到分组的依据 组内其他字段都无法直接获取了</span></span><br><span class="line"><span class="string">            严格模式</span></span><br><span class="line"><span class="string">                ONLY_FULL_GROUP_BY</span></span><br><span class="line"><span class="string">                </span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">from</span> django.db.models <span class="keyword">import</span> Max, Min, Sum, Count, Avg</span><br><span class="line">    <span class="comment"># 1.统计每一本书的作者个数</span></span><br><span class="line">    <span class="comment"># res = models.Book.objects.annotate()  # models后面点什么 就是按什么分组</span></span><br><span class="line">    <span class="comment"># res = models.Book.objects.annotate(author_num=Count('authors')).values('title','author_num')</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    author_num是我们自己定义的字段 用来存储统计出来的每本书对应的作者个数</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="comment"># res1 = models.Book.objects.annotate(author_num=Count('authors__id')).values('title','author_num')</span></span><br><span class="line">    <span class="comment"># print(res,res1)</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    代码没有补全 不要怕 正常写</span></span><br><span class="line"><span class="string">    补全给你是pycharm给你的 到后面在服务器上直接书写代码 什么补全都没有 颜色提示也没有</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2.统计每个出版社卖的最便宜的书的价格(作业:复习原生SQL语句 写出来)</span></span><br><span class="line">    <span class="comment"># res = models.Publish.objects.annotate(min_price=Min('book__price')).values('name','min_price')</span></span><br><span class="line">    <span class="comment"># print(res)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 3.统计不止一个作者的图书</span></span><br><span class="line">        <span class="comment"># 1.先按照图书分组 求每一本书对应的作者个数</span></span><br><span class="line">        <span class="comment"># 2.过滤出不止一个作者的图书</span></span><br><span class="line">    <span class="comment"># res = models.Book.objects.annotate(author_num=Count('authors')).filter(author_num__gt=1).values('title','author_num')</span></span><br><span class="line">    <span class="comment"># """</span></span><br><span class="line">    <span class="comment"># 只要你的orm语句得出的结果还是一个queryset对象</span></span><br><span class="line">    <span class="comment"># 那么它就可以继续无限制的点queryset对象封装的方法</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment"># """</span></span><br><span class="line">    <span class="comment"># print(res)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 4.查询每个作者出的书的总价格</span></span><br><span class="line">    <span class="comment"># res = models.Author.objects.annotate(sum_price=Sum('book__price')).values('name','sum_price')</span></span><br><span class="line">    <span class="comment"># print(res)</span></span><br><span class="line"></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    如果我想按照指定的字段分组该如何处理呢？</span></span><br><span class="line"><span class="string">        models.Book.objects.values('price').annotate()</span></span><br><span class="line"><span class="string">    后续BBS作业会使用</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    你们的机器上如果出现分组查询报错的情况</span></span><br><span class="line"><span class="string">        你需要修改数据库严格模式</span></span><br><span class="line"><span class="string">    """</span></span><br></pre></td></tr></table></figure>

<h3 id="F与Q查询"><a href="#F与Q查询" class="headerlink" title="F与Q查询"></a>F与Q查询</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># F查询</span><br><span class="line">    # 1.查询卖出数大于库存数的书籍</span><br><span class="line">    # F查询</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    能够帮助你直接获取到表中某个字段对应的数据</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    from django.db.models import F</span><br><span class="line">    # res &#x3D; models.Book.objects.filter(maichu__gt&#x3D;F(&#39;kucun&#39;))</span><br><span class="line">    # print(res)</span><br><span class="line"></span><br><span class="line">    # 2.将所有书籍的价格提升500块</span><br><span class="line">    # models.Book.objects.update(price&#x3D;F(&#39;price&#39;) + 500)</span><br><span class="line"></span><br><span class="line">    # 3.将所有书的名称后面加上爆款两个字</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    在操作字符类型的数据的时候 F不能够直接做到字符串的拼接</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    from django.db.models.functions import Concat</span><br><span class="line">    from django.db.models import Value</span><br><span class="line">    models.Book.objects.update(title&#x3D;Concat(F(&#39;title&#39;), Value(&#39;爆款&#39;)))</span><br><span class="line">    # models.Book.objects.update(title&#x3D;F(&#39;title&#39;) + &#39;爆款&#39;)  # 所有的名称会全部变成空白</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Q查询</span></span><br><span class="line">    <span class="comment"># 1.查询卖出数大于100或者价格小于600的书籍</span></span><br><span class="line">    <span class="comment"># res = models.Book.objects.filter(maichu__gt=100,price__lt=600)</span></span><br><span class="line">    <span class="string">"""filter括号内多个参数是and关系"""</span></span><br><span class="line">    <span class="keyword">from</span> django.db.models <span class="keyword">import</span> Q</span><br><span class="line">    <span class="comment"># res = models.Book.objects.filter(Q(maichu__gt=100),Q(price__lt=600))  # Q包裹逗号分割 还是and关系</span></span><br><span class="line">    <span class="comment"># res = models.Book.objects.filter(Q(maichu__gt=100)|Q(price__lt=600))  # | or关系</span></span><br><span class="line">    <span class="comment"># res = models.Book.objects.filter(~Q(maichu__gt=100)|Q(price__lt=600))  # ~ not关系</span></span><br><span class="line">    <span class="comment"># print(res)  # &lt;QuerySet []&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Q的高阶用法  能够将查询条件的左边也变成字符串的形式</span></span><br><span class="line">    q = Q()</span><br><span class="line">    q.connector = <span class="string">'or'</span></span><br><span class="line">    q.children.append((<span class="string">'maichu__gt'</span>,<span class="number">100</span>))</span><br><span class="line">    q.children.append((<span class="string">'price__lt'</span>,<span class="number">600</span>))</span><br><span class="line">    res = models.Book.objects.filter(q)  <span class="comment"># 默认还是and关系</span></span><br><span class="line">    print(res)</span><br></pre></td></tr></table></figure>

<h3 id="django中如何开启事务"><a href="#django中如何开启事务" class="headerlink" title="django中如何开启事务"></a>django中如何开启事务</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">事务</span></span><br><span class="line"><span class="string">	ACID</span></span><br><span class="line"><span class="string">		原子性</span></span><br><span class="line"><span class="string">			不可分割的最小单位</span></span><br><span class="line"><span class="string">		一致性</span></span><br><span class="line"><span class="string">			跟原子性是相辅相成</span></span><br><span class="line"><span class="string">		隔离性</span></span><br><span class="line"><span class="string">			事务之间互相不干扰</span></span><br><span class="line"><span class="string">		持久性</span></span><br><span class="line"><span class="string">			事务一旦确认永久生效</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">	事务的回滚 </span></span><br><span class="line"><span class="string">		rollback</span></span><br><span class="line"><span class="string">	事务的确认</span></span><br><span class="line"><span class="string">		commit</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment"># 目前你只需要掌握Django中如何简单的开启事务</span></span><br><span class="line"><span class="comment"># 事务</span></span><br><span class="line">    <span class="keyword">from</span> django.db <span class="keyword">import</span> transaction</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> transaction.atomic():</span><br><span class="line">            <span class="comment"># sql1</span></span><br><span class="line">            <span class="comment"># sql2</span></span><br><span class="line">            ...</span><br><span class="line">            <span class="comment"># 在with代码快内书写的所有orm操作都是属于同一个事务</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(e)</span><br><span class="line">    print(<span class="string">'执行其他操作'</span>)</span><br></pre></td></tr></table></figure>

<h3 id="orm中常用字段及参数"><a href="#orm中常用字段及参数" class="headerlink" title="orm中常用字段及参数"></a>orm中常用字段及参数</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">AutoField</span><br><span class="line">	主键字段 primary_key=<span class="literal">True</span></span><br><span class="line">  </span><br><span class="line">CharField			varchar</span><br><span class="line">	verbose_name	字段的注释</span><br><span class="line">    max_length		长度</span><br><span class="line">  </span><br><span class="line">IntegerField		int</span><br><span class="line">BigIntegerField		bigint</span><br><span class="line"></span><br><span class="line">DecimalField</span><br><span class="line">	max_digits=<span class="number">8</span></span><br><span class="line">  decimal_places=<span class="number">2</span></span><br><span class="line"></span><br><span class="line">EmailFiled				varchar(<span class="number">254</span>)</span><br><span class="line"></span><br><span class="line">DateField				date</span><br><span class="line">DateTimeField			datetime</span><br><span class="line">	auto_now:每次修改数据的时候都会自动更新当前时间</span><br><span class="line">    auto_now_add:只在创建数据的时候记录创建时间后续不会自动修改了</span><br><span class="line">    </span><br><span class="line">BooleanField(Field)				- 布尔值类型</span><br><span class="line">	该字段传布尔值(<span class="literal">False</span>/<span class="literal">True</span>) 	数据库里面存<span class="number">0</span>/<span class="number">1</span></span><br><span class="line"></span><br><span class="line">TextField(Field)					- 文本类型</span><br><span class="line">	该字段可以用来存大段内容(文章、博客...)  没有字数限制</span><br><span class="line">    后面的bbs作业 文章字段用的就是TextField</span><br><span class="line"></span><br><span class="line">FileField(Field)					- 字符类型</span><br><span class="line">   upload_to = <span class="string">"/data"</span></span><br><span class="line">   给该字段传一个文件对象，会自动将文件保存到/data目录下然后将文件路径保存到数据库中</span><br><span class="line">   /data/a.txt</span><br><span class="line">   后面bbs作业也会涉及</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更多字段</span></span><br><span class="line">直接参考博客:https://www.cnblogs.com/Dominic-Ji/p/<span class="number">9203990.</span>html</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="comment"># django除了给你提供了很多字段类型之外 还支持你自定义字段</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyCharField</span><span class="params">(models.Field)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,max_length,*args,**kwargs)</span>:</span></span><br><span class="line">        self.max_length = max_length</span><br><span class="line">        <span class="comment"># 调用父类的init方法</span></span><br><span class="line">        super().__init__(max_length=max_length,*args,**kwargs)  <span class="comment"># 一定要是关键字的形式传入</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">db_type</span><span class="params">(self, connection)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        返回真正的数据类型及各种约束条件</span></span><br><span class="line"><span class="string">        :param connection:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'char(%s)'</span>%self.max_length</span><br><span class="line"></span><br><span class="line"><span class="comment"># 自定义字段使用</span></span><br><span class="line">myfield = MyCharField(max_length=<span class="number">16</span>,null=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 外键字段及参数</span></span><br><span class="line">unique=<span class="literal">True</span></span><br><span class="line">	ForeignKey(unique=<span class="literal">True</span>)   ===	OneToOneField()</span><br><span class="line">  <span class="comment"># 你在用前面字段创建一对一 orm会有一个提示信息 orm推荐你使用后者但是前者也能用</span></span><br><span class="line">  </span><br><span class="line">db_index</span><br><span class="line">	如果db_index=<span class="literal">True</span> 则代表着为此字段设置索引</span><br><span class="line">  (复习索引是什么)</span><br><span class="line"></span><br><span class="line">to_field</span><br><span class="line">	设置要关联的表的字段  默认不写关联的就是另外一张的主键字段</span><br><span class="line"></span><br><span class="line">on_delete</span><br><span class="line">	当删除关联表中的数据时，当前表与其关联的行的行为。</span><br><span class="line">  <span class="string">"""</span></span><br><span class="line"><span class="string">  django2.X及以上版本 需要你自己指定外键字段的级联更新级联删除</span></span><br><span class="line"><span class="string">  """</span></span><br></pre></td></tr></table></figure>

<h3 id="数据库查询优化"><a href="#数据库查询优化" class="headerlink" title="数据库查询优化"></a>数据库查询优化</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">only与defer	</span><br><span class="line">select_related与prefetch_related</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">orm语句的特点:</span></span><br><span class="line"><span class="string">	惰性查询</span></span><br><span class="line"><span class="string">		如果你仅仅只是书写了orm语句 在后面根本没有用到该语句所查询出来的参数</span></span><br><span class="line"><span class="string">		那么orm会自动识别 直接不执行</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment"># only与defer</span></span><br><span class="line"><span class="comment"># res = models.Book.objects.all()</span></span><br><span class="line">    <span class="comment"># print(res)  # 要用数据了才会走数据库</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 想要获取书籍表中所有数的名字</span></span><br><span class="line">    <span class="comment"># res = models.Book.objects.values('title')</span></span><br><span class="line">    <span class="comment"># for d in res:</span></span><br><span class="line">    <span class="comment">#     print(d.get('title'))</span></span><br><span class="line">    <span class="comment"># 你给我实现获取到的是一个数据对象 然后点title就能够拿到书名 并且没有其他字段</span></span><br><span class="line">    <span class="comment"># res = models.Book.objects.only('title')</span></span><br><span class="line">    <span class="comment"># res = models.Book.objects.all()</span></span><br><span class="line">    <span class="comment"># print(res)  # &lt;QuerySet [&lt;Book: 三国演义爆款&gt;, &lt;Book: 红楼梦爆款&gt;, &lt;Book: 论语爆款&gt;, &lt;Book: 聊斋爆款&gt;, &lt;Book: 老子爆款&gt;]&gt;</span></span><br><span class="line">    <span class="comment"># for i in res:</span></span><br><span class="line">        <span class="comment"># print(i.title)  # 点击only括号内的字段 不会走数据库</span></span><br><span class="line">        <span class="comment"># print(i.price)  # 点击only括号内没有的字段 会重新走数据库查询而all不需要走了</span></span><br><span class="line"></span><br><span class="line">    res = models.Book.objects.defer(<span class="string">'title'</span>)  <span class="comment"># 对象除了没有title属性之外其他的都有</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> res:</span><br><span class="line">        print(i.price)</span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    defer与only刚好相反</span></span><br><span class="line"><span class="string">        defer括号内放的字段不在查询出来的对象里面 查询该字段需要重新走数据</span></span><br><span class="line"><span class="string">        而如果查询的是非括号内的字段 则不需要走数据库了</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># select_related与prefetch_related  跟跨表操作有关</span></span><br><span class="line">    <span class="comment"># res = models.Book.objects.all()</span></span><br><span class="line">    <span class="comment"># for i in res:</span></span><br><span class="line">    <span class="comment">#     print(i.publish.name)  # 每循环一次就要走一次数据库查询</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># res = models.Book.objects.select_related('authors')  # INNER JOIN</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    select_related内部直接先将book与publish连起来 然后一次性将大表里面的所有数据</span></span><br><span class="line"><span class="string">    全部封装给查询出来的对象</span></span><br><span class="line"><span class="string">        这个时候对象无论是点击book表的数据还是publish的数据都无需再走数据库查询了</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    select_related括号内只能放外键字段    一对多 一对一</span></span><br><span class="line"><span class="string">        多对多也不行</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="comment"># for i in res:</span></span><br><span class="line">    <span class="comment">#     print(i.publish.name)  # 每循环一次就要走一次数据库查询</span></span><br><span class="line"></span><br><span class="line">    res = models.Book.objects.prefetch_related(<span class="string">'publish'</span>)  <span class="comment"># 子查询</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    prefetch_related该方法内部其实就是子查询</span></span><br><span class="line"><span class="string">        将子查询查询出来的所有结果也给你封装到对象中</span></span><br><span class="line"><span class="string">        给你的感觉好像也是一次性搞定的</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> res:</span><br><span class="line">        print(i.publish.name)</span><br><span class="line">        </span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    看情况使用：拼表数据量大的话用子查询效率更高</span></span><br><span class="line"><span class="string">    """</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>django框架</tag>
      </tags>
  </entry>
  <entry>
    <title>[Ajax语法]</title>
    <url>/2019/07/06/Ajax%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<h3 id="图书管理的图书增删改查"><a href="#图书管理的图书增删改查" class="headerlink" title="图书管理的图书增删改查"></a>图书管理的图书增删改查</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render,redirect,HttpResponse</span><br><span class="line"><span class="keyword">from</span> app01 <span class="keyword">import</span> models</span><br><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">home</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">'home.html'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">book_list</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="comment"># 先查询出所有的书籍信息 传递给html页面</span></span><br><span class="line">    book_queryset = models.Book.objects.all()</span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">'book_list.html'</span>,locals())</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">book_add</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'POST'</span>:</span><br><span class="line">        <span class="comment"># 获取前端提交过来的所有数据</span></span><br><span class="line">        title = request.POST.get(<span class="string">"title"</span>)</span><br><span class="line">        price = request.POST.get(<span class="string">"price"</span>)</span><br><span class="line">        publish_date = request.POST.get(<span class="string">"publish_date"</span>)</span><br><span class="line">        publish_id = request.POST.get(<span class="string">"publish"</span>)</span><br><span class="line">        authors_list = request.POST.getlist(<span class="string">"authors"</span>)  <span class="comment"># [1,2,3,4,]</span></span><br><span class="line">        <span class="comment"># 操作数据库存储数据</span></span><br><span class="line">        <span class="comment"># 书籍表</span></span><br><span class="line">        book_obj = models.Book.objects.create(title=title,price=price,publish_date=publish_date,publish_id=publish_id)</span><br><span class="line">        <span class="comment"># 书籍与作者的关系表</span></span><br><span class="line">        book_obj.authors.add(*authors_list)</span><br><span class="line">        <span class="comment"># 跳转到书籍的展示页面</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        redirect括号内可以直接写url</span></span><br><span class="line"><span class="string">        其实也可以直接写别名</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        但是如果你的别名需要额外给参数的话，那么就必须使用reverse解析了</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">return</span> redirect(<span class="string">'book_list'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 先获取当前系统中所有的出版社信息和作者信息</span></span><br><span class="line">    publish_queryset = models.Publish.objects.all()</span><br><span class="line">    author_queryset = models.Author.objects.all()</span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">'book_add.html'</span>,locals())</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">book_edit</span><span class="params">(request,edit_id)</span>:</span></span><br><span class="line">    <span class="comment"># 获取当前用户想要编辑的书籍对象 展示给用户看</span></span><br><span class="line">    edit_obj = models.Book.objects.filter(pk=edit_id).first()</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'POST'</span>:</span><br><span class="line">        title = request.POST.get(<span class="string">"title"</span>)</span><br><span class="line">        price = request.POST.get(<span class="string">"price"</span>)</span><br><span class="line">        publish_date = request.POST.get(<span class="string">"publish_date"</span>)</span><br><span class="line">        publish_id = request.POST.get(<span class="string">"publish"</span>)</span><br><span class="line">        authors_list = request.POST.getlist(<span class="string">"authors"</span>)  <span class="comment"># [1,2,3,4,]</span></span><br><span class="line">        models.Book.objects.filter(pk=edit_id).update(title=title,</span><br><span class="line">                                                      price=price,</span><br><span class="line">                                                      publish_date=publish_date,</span><br><span class="line">                                                      publish_id=publish_id</span><br><span class="line">                                                      )</span><br><span class="line">        <span class="comment"># 该第三张关系表</span></span><br><span class="line">        edit_obj.authors.set(authors_list)</span><br><span class="line">        <span class="keyword">return</span> redirect(<span class="string">'book_list'</span>)</span><br><span class="line"></span><br><span class="line">    publish_queryset = models.Publish.objects.all()</span><br><span class="line">    author_queryset = models.Author.objects.all()</span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">'book_edit.html'</span>,locals())</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">book_delete</span><span class="params">(request,delete_id)</span>:</span></span><br><span class="line">    <span class="comment"># 简单粗暴 直接删除</span></span><br><span class="line">    models.Book.objects.filter(pk=delete_id).delete()</span><br><span class="line">    <span class="comment"># 直接跳转到展示页</span></span><br><span class="line">    <span class="keyword">return</span> redirect(<span class="string">'book_list'</span>)</span><br></pre></td></tr></table></figure>

<h3 id="choices参数-数据库字段设计常见"><a href="#choices参数-数据库字段设计常见" class="headerlink" title="choices参数(数据库字段设计常见)"></a>choices参数(数据库字段设计常见)</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">用户表	</span></span><br><span class="line"><span class="string">	性别</span></span><br><span class="line"><span class="string">	学历</span></span><br><span class="line"><span class="string">	工作经验</span></span><br><span class="line"><span class="string">	是否结婚</span></span><br><span class="line"><span class="string">	是否生子</span></span><br><span class="line"><span class="string">	客户来源</span></span><br><span class="line"><span class="string">	...</span></span><br><span class="line"><span class="string">针对某个可以列举完全的可能性字段，我们应该如何存储</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">只要某个字段的可能性是可以列举完全的，那么一般情况下都会采用choices参数</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    username = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    age = models.IntegerField()</span><br><span class="line">    <span class="comment"># 性别</span></span><br><span class="line">    gender_choices = (</span><br><span class="line">        (<span class="number">1</span>,<span class="string">'男'</span>),</span><br><span class="line">        (<span class="number">2</span>,<span class="string">'女'</span>),</span><br><span class="line">        (<span class="number">3</span>,<span class="string">'其他'</span>),</span><br><span class="line">    )</span><br><span class="line">    gender = models.IntegerField(choices=gender_choices)</span><br><span class="line">    </span><br><span class="line">    score_choices = (</span><br><span class="line">        (<span class="string">'A'</span>,<span class="string">'优秀'</span>),</span><br><span class="line">        (<span class="string">'B'</span>,<span class="string">'良好'</span>),</span><br><span class="line">        (<span class="string">'C'</span>,<span class="string">'及格'</span>),</span><br><span class="line">        (<span class="string">'D'</span>,<span class="string">'不合格'</span>),</span><br><span class="line">    )</span><br><span class="line">    <span class="comment"># 保证字段类型跟列举出来的元祖第一个数据类型一致即可</span></span><br><span class="line">    score = models.CharField(choices=score_choices,null=<span class="literal">True</span>)</span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    该gender字段存的还是数字 但是如果存的数字在上面元祖列举的范围之内</span></span><br><span class="line"><span class="string">    那么可以非常轻松的获取到数字对应的真正的内容</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    1.gender字段存的数字不在上述元祖列举的范围内容</span></span><br><span class="line"><span class="string">    2.如果在 如何获取对应的中文信息</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    </span><br><span class="line">      </span><br><span class="line">    <span class="keyword">from</span> app01 <span class="keyword">import</span> models</span><br><span class="line">    <span class="comment"># models.User.objects.create(username='jason',age=18,gender=1)</span></span><br><span class="line">    <span class="comment"># models.User.objects.create(username='egon',age=85,gender=2)</span></span><br><span class="line">    <span class="comment"># models.User.objects.create(username='tank',age=40,gender=3)</span></span><br><span class="line">    <span class="comment"># 存的时候 没有列举出来的数字也能存（范围还是按照字段类型决定）</span></span><br><span class="line">    <span class="comment"># models.User.objects.create(username='tony',age=45,gender=4)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 取</span></span><br><span class="line">    <span class="comment"># user_obj = models.User.objects.filter(pk=1).first()</span></span><br><span class="line">    <span class="comment"># print(user_obj.gender)</span></span><br><span class="line">    <span class="comment"># 只要是choices参数的字段 如果你想要获取对应信息 固定写法 get_字段名_display()</span></span><br><span class="line">    <span class="comment"># print(user_obj.get_gender_display())</span></span><br><span class="line"></span><br><span class="line">    user_obj = models.User.objects.filter(pk=<span class="number">4</span>).first()</span><br><span class="line">    <span class="comment"># 如果没有对应关系 那么字段是什么还是展示什么</span></span><br><span class="line">    print(user_obj.get_gender_display())  <span class="comment"># 4</span></span><br><span class="line">    </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 实际项目案例</span></span><br><span class="line"><span class="comment"># CRM相关内部表</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">School</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    校区表</span></span><br><span class="line"><span class="string">    如：</span></span><br><span class="line"><span class="string">        北京沙河校区</span></span><br><span class="line"><span class="string">        上海校区</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    title = models.CharField(verbose_name=<span class="string">'校区名称'</span>, max_length=<span class="number">32</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.title</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Course</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    课程表</span></span><br><span class="line"><span class="string">    如：</span></span><br><span class="line"><span class="string">        Linux基础</span></span><br><span class="line"><span class="string">        Linux架构师</span></span><br><span class="line"><span class="string">        Python自动化开发精英班</span></span><br><span class="line"><span class="string">        Python自动化开发架构师班</span></span><br><span class="line"><span class="string">        Python基础班</span></span><br><span class="line"><span class="string">        go基础班</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    name = models.CharField(verbose_name=<span class="string">'课程名称'</span>, max_length=<span class="number">32</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Department</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    部门表</span></span><br><span class="line"><span class="string">    市场部     1000</span></span><br><span class="line"><span class="string">    销售       1001</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    title = models.CharField(verbose_name=<span class="string">'部门名称'</span>, max_length=<span class="number">16</span>)</span><br><span class="line">    code = models.IntegerField(verbose_name=<span class="string">'部门编号'</span>, unique=<span class="literal">True</span>, null=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.title</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserInfo</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    员工表</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    name = models.CharField(verbose_name=<span class="string">'员工姓名'</span>, max_length=<span class="number">16</span>)</span><br><span class="line">    email = models.EmailField(verbose_name=<span class="string">'邮箱'</span>, max_length=<span class="number">64</span>)</span><br><span class="line">    depart = models.ForeignKey(verbose_name=<span class="string">'部门'</span>, to=<span class="string">"Department"</span>,to_field=<span class="string">"code"</span>)</span><br><span class="line">    user=models.OneToOneField(<span class="string">"User"</span>,default=<span class="number">1</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClassList</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    班级表</span></span><br><span class="line"><span class="string">    如：</span></span><br><span class="line"><span class="string">        Python全栈  面授班  5期  10000  2017-11-11  2018-5-11</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    school = models.ForeignKey(verbose_name=<span class="string">'校区'</span>, to=<span class="string">'School'</span>)</span><br><span class="line">    course = models.ForeignKey(verbose_name=<span class="string">'课程名称'</span>, to=<span class="string">'Course'</span>)</span><br><span class="line">    semester = models.IntegerField(verbose_name=<span class="string">"班级(期)"</span>)</span><br><span class="line"></span><br><span class="line">    price = models.IntegerField(verbose_name=<span class="string">"学费"</span>)</span><br><span class="line">    start_date = models.DateField(verbose_name=<span class="string">"开班日期"</span>)</span><br><span class="line">    graduate_date = models.DateField(verbose_name=<span class="string">"结业日期"</span>, null=<span class="literal">True</span>, blank=<span class="literal">True</span>)</span><br><span class="line">    memo = models.CharField(verbose_name=<span class="string">'说明'</span>, max_length=<span class="number">256</span>, blank=<span class="literal">True</span>, null=<span class="literal">True</span>, )</span><br><span class="line"></span><br><span class="line">    teachers = models.ManyToManyField(verbose_name=<span class="string">'任课老师'</span>, to=<span class="string">'UserInfo'</span>,limit_choices_to=&#123;<span class="string">'depart'</span>:<span class="number">1002</span>&#125;)</span><br><span class="line">    tutor = models.ForeignKey(verbose_name=<span class="string">'班主任'</span>, to=<span class="string">'UserInfo'</span>,related_name=<span class="string">"class_list"</span>,limit_choices_to=&#123;<span class="string">'depart'</span>:<span class="number">1006</span>&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"&#123;0&#125;(&#123;1&#125;期)"</span>.format(self.course.name, self.semester)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Customer</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    客户表</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    qq = models.CharField(verbose_name=<span class="string">'qq'</span>, max_length=<span class="number">64</span>, unique=<span class="literal">True</span>, help_text=<span class="string">'QQ号必须唯一'</span>)</span><br><span class="line"></span><br><span class="line">    name = models.CharField(verbose_name=<span class="string">'学生姓名'</span>, max_length=<span class="number">16</span>)</span><br><span class="line">    gender_choices = ((<span class="number">1</span>, <span class="string">'男'</span>), (<span class="number">2</span>, <span class="string">'女'</span>))</span><br><span class="line">    gender = models.SmallIntegerField(verbose_name=<span class="string">'性别'</span>, choices=gender_choices)</span><br><span class="line"></span><br><span class="line">    education_choices = (</span><br><span class="line">        (<span class="number">1</span>, <span class="string">'重点大学'</span>),</span><br><span class="line">        (<span class="number">2</span>, <span class="string">'普通本科'</span>),</span><br><span class="line">        (<span class="number">3</span>, <span class="string">'独立院校'</span>),</span><br><span class="line">        (<span class="number">4</span>, <span class="string">'民办本科'</span>),</span><br><span class="line">        (<span class="number">5</span>, <span class="string">'大专'</span>),</span><br><span class="line">        (<span class="number">6</span>, <span class="string">'民办专科'</span>),</span><br><span class="line">        (<span class="number">7</span>, <span class="string">'高中'</span>),</span><br><span class="line">        (<span class="number">8</span>, <span class="string">'其他'</span>)</span><br><span class="line">    )</span><br><span class="line">    education = models.IntegerField(verbose_name=<span class="string">'学历'</span>, choices=education_choices, blank=<span class="literal">True</span>, null=<span class="literal">True</span>, )</span><br><span class="line">    graduation_school = models.CharField(verbose_name=<span class="string">'毕业学校'</span>, max_length=<span class="number">64</span>, blank=<span class="literal">True</span>, null=<span class="literal">True</span>)</span><br><span class="line">    major = models.CharField(verbose_name=<span class="string">'所学专业'</span>, max_length=<span class="number">64</span>, blank=<span class="literal">True</span>, null=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    experience_choices = [</span><br><span class="line">        (<span class="number">1</span>, <span class="string">'在校生'</span>),</span><br><span class="line">        (<span class="number">2</span>, <span class="string">'应届毕业'</span>),</span><br><span class="line">        (<span class="number">3</span>, <span class="string">'半年以内'</span>),</span><br><span class="line">        (<span class="number">4</span>, <span class="string">'半年至一年'</span>),</span><br><span class="line">        (<span class="number">5</span>, <span class="string">'一年至三年'</span>),</span><br><span class="line">        (<span class="number">6</span>, <span class="string">'三年至五年'</span>),</span><br><span class="line">        (<span class="number">7</span>, <span class="string">'五年以上'</span>),</span><br><span class="line">    ]</span><br><span class="line">    experience = models.IntegerField(verbose_name=<span class="string">'工作经验'</span>, blank=<span class="literal">True</span>, null=<span class="literal">True</span>, choices=experience_choices)</span><br><span class="line">    work_status_choices = [</span><br><span class="line">        (<span class="number">1</span>, <span class="string">'在职'</span>),</span><br><span class="line">        (<span class="number">2</span>, <span class="string">'无业'</span>)</span><br><span class="line">    ]</span><br><span class="line">    work_status = models.IntegerField(verbose_name=<span class="string">"职业状态"</span>, choices=work_status_choices, default=<span class="number">1</span>, blank=<span class="literal">True</span>,</span><br><span class="line">                                      null=<span class="literal">True</span>)</span><br><span class="line">    company = models.CharField(verbose_name=<span class="string">"目前就职公司"</span>, max_length=<span class="number">64</span>, blank=<span class="literal">True</span>, null=<span class="literal">True</span>)</span><br><span class="line">    salary = models.CharField(verbose_name=<span class="string">"当前薪资"</span>, max_length=<span class="number">64</span>, blank=<span class="literal">True</span>, null=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    source_choices = [</span><br><span class="line">        (<span class="number">1</span>, <span class="string">"qq群"</span>),</span><br><span class="line">        (<span class="number">2</span>, <span class="string">"内部转介绍"</span>),</span><br><span class="line">        (<span class="number">3</span>, <span class="string">"官方网站"</span>),</span><br><span class="line">        (<span class="number">4</span>, <span class="string">"百度推广"</span>),</span><br><span class="line">        (<span class="number">5</span>, <span class="string">"360推广"</span>),</span><br><span class="line">        (<span class="number">6</span>, <span class="string">"搜狗推广"</span>),</span><br><span class="line">        (<span class="number">7</span>, <span class="string">"腾讯课堂"</span>),</span><br><span class="line">        (<span class="number">8</span>, <span class="string">"广点通"</span>),</span><br><span class="line">        (<span class="number">9</span>, <span class="string">"高校宣讲"</span>),</span><br><span class="line">        (<span class="number">10</span>, <span class="string">"渠道代理"</span>),</span><br><span class="line">        (<span class="number">11</span>, <span class="string">"51cto"</span>),</span><br><span class="line">        (<span class="number">12</span>, <span class="string">"智汇推"</span>),</span><br><span class="line">        (<span class="number">13</span>, <span class="string">"网盟"</span>),</span><br><span class="line">        (<span class="number">14</span>, <span class="string">"DSP"</span>),</span><br><span class="line">        (<span class="number">15</span>, <span class="string">"SEO"</span>),</span><br><span class="line">        (<span class="number">16</span>, <span class="string">"其它"</span>),</span><br><span class="line">    ]</span><br><span class="line">    source = models.SmallIntegerField(<span class="string">'客户来源'</span>, choices=source_choices, default=<span class="number">1</span>)</span><br><span class="line">    referral_from = models.ForeignKey(</span><br><span class="line">        <span class="string">'self'</span>,</span><br><span class="line">        blank=<span class="literal">True</span>,</span><br><span class="line">        null=<span class="literal">True</span>,</span><br><span class="line">        verbose_name=<span class="string">"转介绍自学员"</span>,</span><br><span class="line">        help_text=<span class="string">"若此客户是转介绍自内部学员,请在此处选择内部学员姓名"</span>,</span><br><span class="line">        related_name=<span class="string">"internal_referral"</span></span><br><span class="line">    )</span><br><span class="line">    course = models.ManyToManyField(verbose_name=<span class="string">"咨询课程"</span>, to=<span class="string">"Course"</span>)</span><br><span class="line"></span><br><span class="line">    status_choices = [</span><br><span class="line">        (<span class="number">1</span>, <span class="string">"已报名"</span>),</span><br><span class="line">        (<span class="number">2</span>, <span class="string">"未报名"</span>)</span><br><span class="line">    ]</span><br><span class="line">    status = models.IntegerField(</span><br><span class="line">        verbose_name=<span class="string">"状态"</span>,</span><br><span class="line">        choices=status_choices,</span><br><span class="line">        default=<span class="number">2</span>,</span><br><span class="line">        help_text=<span class="string">u"选择客户此时的状态"</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    consultant = models.ForeignKey(verbose_name=<span class="string">"课程顾问"</span>, to=<span class="string">'UserInfo'</span>, related_name=<span class="string">'consultanter'</span>,limit_choices_to=&#123;<span class="string">'depart'</span>:<span class="number">1001</span>&#125;)</span><br><span class="line"></span><br><span class="line">    date = models.DateField(verbose_name=<span class="string">"咨询日期"</span>, auto_now_add=<span class="literal">True</span>)</span><br><span class="line">    recv_date = models.DateField(verbose_name=<span class="string">"当前课程顾问的接单日期"</span>, null=<span class="literal">True</span>)</span><br><span class="line">    last_consult_date = models.DateField(verbose_name=<span class="string">"最后跟进日期"</span>, )</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConsultRecord</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    客户跟进记录</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    customer = models.ForeignKey(verbose_name=<span class="string">"所咨询客户"</span>, to=<span class="string">'Customer'</span>)</span><br><span class="line">    consultant = models.ForeignKey(verbose_name=<span class="string">"跟踪人"</span>, to=<span class="string">'UserInfo'</span>,limit_choices_to=&#123;<span class="string">'depart'</span>:<span class="number">1001</span>&#125;)</span><br><span class="line">    date = models.DateField(verbose_name=<span class="string">"跟进日期"</span>, auto_now_add=<span class="literal">True</span>)</span><br><span class="line">    note = models.TextField(verbose_name=<span class="string">"跟进内容..."</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.customer.name + <span class="string">":"</span> + self.consultant.name</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    学生表（已报名）</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    customer = models.OneToOneField(verbose_name=<span class="string">'客户信息'</span>, to=<span class="string">'Customer'</span>)</span><br><span class="line">    class_list = models.ManyToManyField(verbose_name=<span class="string">"已报班级"</span>, to=<span class="string">'ClassList'</span>, blank=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    emergency_contract = models.CharField(max_length=<span class="number">32</span>, blank=<span class="literal">True</span>, null=<span class="literal">True</span>, verbose_name=<span class="string">'紧急联系人'</span>)</span><br><span class="line">    company = models.CharField(verbose_name=<span class="string">'公司'</span>, max_length=<span class="number">128</span>, blank=<span class="literal">True</span>, null=<span class="literal">True</span>)</span><br><span class="line">    location = models.CharField(max_length=<span class="number">64</span>, verbose_name=<span class="string">'所在区域'</span>, blank=<span class="literal">True</span>, null=<span class="literal">True</span>)</span><br><span class="line">    position = models.CharField(verbose_name=<span class="string">'岗位'</span>, max_length=<span class="number">64</span>, blank=<span class="literal">True</span>, null=<span class="literal">True</span>)</span><br><span class="line">    salary = models.IntegerField(verbose_name=<span class="string">'薪资'</span>, blank=<span class="literal">True</span>, null=<span class="literal">True</span>)</span><br><span class="line">    welfare = models.CharField(verbose_name=<span class="string">'福利'</span>, max_length=<span class="number">256</span>, blank=<span class="literal">True</span>, null=<span class="literal">True</span>)</span><br><span class="line">    date = models.DateField(verbose_name=<span class="string">'入职时间'</span>, help_text=<span class="string">'格式yyyy-mm-dd'</span>, blank=<span class="literal">True</span>, null=<span class="literal">True</span>)</span><br><span class="line">    memo = models.CharField(verbose_name=<span class="string">'备注'</span>, max_length=<span class="number">256</span>, blank=<span class="literal">True</span>, null=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.customer.name</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClassStudyRecord</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    上课记录表 （班级记录）</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    class_obj = models.ForeignKey(verbose_name=<span class="string">"班级"</span>, to=<span class="string">"ClassList"</span>)</span><br><span class="line">    day_num = models.IntegerField(verbose_name=<span class="string">"节次"</span>, help_text=<span class="string">u"此处填写第几节课或第几天课程...,必须为数字"</span>)</span><br><span class="line">    teacher = models.ForeignKey(verbose_name=<span class="string">"讲师"</span>, to=<span class="string">'UserInfo'</span>,limit_choices_to=&#123;<span class="string">'depart'</span>:<span class="number">1002</span>&#125;)</span><br><span class="line">    date = models.DateField(verbose_name=<span class="string">"上课日期"</span>, auto_now_add=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    course_title = models.CharField(verbose_name=<span class="string">'本节课程标题'</span>, max_length=<span class="number">64</span>, blank=<span class="literal">True</span>, null=<span class="literal">True</span>)</span><br><span class="line">    course_memo = models.TextField(verbose_name=<span class="string">'本节课程内容概要'</span>, blank=<span class="literal">True</span>, null=<span class="literal">True</span>)</span><br><span class="line">    has_homework = models.BooleanField(default=<span class="literal">True</span>, verbose_name=<span class="string">"本节有作业"</span>)</span><br><span class="line">    homework_title = models.CharField(verbose_name=<span class="string">'本节作业标题'</span>, max_length=<span class="number">64</span>, blank=<span class="literal">True</span>, null=<span class="literal">True</span>)</span><br><span class="line">    homework_memo = models.TextField(verbose_name=<span class="string">'作业描述'</span>, max_length=<span class="number">500</span>, blank=<span class="literal">True</span>, null=<span class="literal">True</span>)</span><br><span class="line">    exam = models.TextField(verbose_name=<span class="string">'踩分点'</span>, max_length=<span class="number">300</span>, blank=<span class="literal">True</span>, null=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"&#123;0&#125; day&#123;1&#125;"</span>.format(self.class_obj, self.day_num)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentStudyRecord</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    学生学习记录</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    classstudyrecord = models.ForeignKey(verbose_name=<span class="string">"第几天课程"</span>, to=<span class="string">"ClassStudyRecord"</span>)</span><br><span class="line">    student = models.ForeignKey(verbose_name=<span class="string">"学员"</span>, to=<span class="string">'Student'</span>)</span><br><span class="line"></span><br><span class="line">    record_choices = ((<span class="string">'checked'</span>, <span class="string">"已签到"</span>),</span><br><span class="line">                      (<span class="string">'vacate'</span>, <span class="string">"请假"</span>),</span><br><span class="line">                      (<span class="string">'late'</span>, <span class="string">"迟到"</span>),</span><br><span class="line">                      (<span class="string">'noshow'</span>, <span class="string">"缺勤"</span>),</span><br><span class="line">                      (<span class="string">'leave_early'</span>, <span class="string">"早退"</span>),</span><br><span class="line">                      )</span><br><span class="line">    record = models.CharField(<span class="string">"上课纪录"</span>, choices=record_choices, default=<span class="string">"checked"</span>, max_length=<span class="number">64</span>)</span><br><span class="line">    score_choices = ((<span class="number">100</span>, <span class="string">'A+'</span>),</span><br><span class="line">                     (<span class="number">90</span>, <span class="string">'A'</span>),</span><br><span class="line">                     (<span class="number">85</span>, <span class="string">'B+'</span>),</span><br><span class="line">                     (<span class="number">80</span>, <span class="string">'B'</span>),</span><br><span class="line">                     (<span class="number">70</span>, <span class="string">'B-'</span>),</span><br><span class="line">                     (<span class="number">60</span>, <span class="string">'C+'</span>),</span><br><span class="line">                     (<span class="number">50</span>, <span class="string">'C'</span>),</span><br><span class="line">                     (<span class="number">40</span>, <span class="string">'C-'</span>),</span><br><span class="line">                     (<span class="number">0</span>, <span class="string">' D'</span>),</span><br><span class="line">                     (<span class="number">-1</span>, <span class="string">'N/A'</span>),</span><br><span class="line">                     (<span class="number">-100</span>, <span class="string">'COPY'</span>),</span><br><span class="line">                     (<span class="number">-1000</span>, <span class="string">'FAIL'</span>),</span><br><span class="line">                     )</span><br><span class="line">    score = models.IntegerField(<span class="string">"本节成绩"</span>, choices=score_choices, default=<span class="number">-1</span>)</span><br><span class="line">    homework_note = models.CharField(verbose_name=<span class="string">'作业评语'</span>, max_length=<span class="number">255</span>, blank=<span class="literal">True</span>, null=<span class="literal">True</span>)</span><br><span class="line">    note = models.CharField(verbose_name=<span class="string">"备注"</span>, max_length=<span class="number">255</span>, blank=<span class="literal">True</span>, null=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    homework = models.FileField(verbose_name=<span class="string">'作业文件'</span>, blank=<span class="literal">True</span>, null=<span class="literal">True</span>, default=<span class="literal">None</span>)</span><br><span class="line">    stu_memo = models.TextField(verbose_name=<span class="string">'学员备注'</span>, blank=<span class="literal">True</span>, null=<span class="literal">True</span>)</span><br><span class="line">    date = models.DateTimeField(verbose_name=<span class="string">'提交作业日期'</span>, auto_now_add=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"&#123;0&#125;-&#123;1&#125;"</span>.format(self.classstudyrecord, self.student)</span><br><span class="line">         </span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">chocies参数使用场景是非常广泛的</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<h3 id="MTV与MVC模型"><a href="#MTV与MVC模型" class="headerlink" title="MTV与MVC模型"></a>MTV与MVC模型</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># MTV:Django号称是MTV模型</span></span><br><span class="line">M:models</span><br><span class="line">T:templates</span><br><span class="line">V:views</span><br><span class="line"><span class="comment"># MVC:其实django本质也是MVC</span></span><br><span class="line">M:models</span><br><span class="line">V:views</span><br><span class="line">C:controller</span><br><span class="line">  </span><br><span class="line"><span class="comment"># vue框架:MVVM模型</span></span><br></pre></td></tr></table></figure>

<h3 id="多对多三种创建方式"><a href="#多对多三种创建方式" class="headerlink" title="多对多三种创建方式"></a>多对多三种创建方式</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 全自动:利用orm自动帮我们创建第三张关系表</span></span><br><span class="line">	<span class="class"><span class="keyword">class</span> <span class="title">Book</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    authors = models.ManyToManyField(to=<span class="string">'Author'</span>)</span><br><span class="line">	<span class="class"><span class="keyword">class</span> <span class="title">Author</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">	<span class="string">"""</span></span><br><span class="line"><span class="string">	优点:代码不需要你写 非常的方便 还支持orm提供操作第三张关系表的方法...</span></span><br><span class="line"><span class="string">	不足之处:第三张关系表的扩展性极差(没有办法额外添加字段...)</span></span><br><span class="line"><span class="string">	"""</span></span><br><span class="line"><span class="comment"># 纯手动</span></span><br><span class="line">	<span class="class"><span class="keyword">class</span> <span class="title">Book</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    </span><br><span class="line">	<span class="class"><span class="keyword">class</span> <span class="title">Author</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">  </span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Book2Author</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    book_id = models.ForeignKey(to=<span class="string">'Book'</span>)</span><br><span class="line">    author_id = models.ForeignKey(to=<span class="string">'Author'</span>)</span><br><span class="line">  <span class="string">'''</span></span><br><span class="line"><span class="string">  优点:第三张表完全取决于你自己进行额外的扩展</span></span><br><span class="line"><span class="string">  不足之处:需要写的代码较多，不能够再使用orm提供的简单的方法</span></span><br><span class="line"><span class="string">  不建议你用该方式</span></span><br><span class="line"><span class="string">  '''</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 半自动</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    authors = models.ManyToManyField(to=<span class="string">'Author'</span>,</span><br><span class="line">                                     through=<span class="string">'Book2Author'</span>,</span><br><span class="line">                                     through_fields=(<span class="string">'book'</span>,<span class="string">'author'</span>)</span><br><span class="line">                                     )</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Author</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    <span class="comment"># books = models.ManyToManyField(to='Book',</span></span><br><span class="line">    <span class="comment">#                                  through='Book2Author',</span></span><br><span class="line">    <span class="comment">#                                  through_fields=('author','book')</span></span><br><span class="line">    <span class="comment">#                                  )</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book2Author</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    book = models.ForeignKey(to=<span class="string">'Book'</span>)</span><br><span class="line">    author = models.ForeignKey(to=<span class="string">'Author'</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">through_fields字段先后顺序</span></span><br><span class="line"><span class="string">    判断的本质：</span></span><br><span class="line"><span class="string">        通过第三张表查询对应的表 需要用到哪个字段就把哪个字段放前面</span></span><br><span class="line"><span class="string">    你也可以简化判断</span></span><br><span class="line"><span class="string">        当前表是谁 就把对应的关联字段放前面</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">半自动:可以使用orm的正反向查询 但是没法使用add,set,remove,clear这四个方法</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 总结:你需要掌握的是全自动和半自动 为了扩展性更高 一般我们都会采用半自动(写代码要给自己留一条后路)</span></span><br></pre></td></tr></table></figure>

<h3 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">异步提交</span></span><br><span class="line"><span class="string">局部刷新</span></span><br><span class="line"><span class="string">例子:github注册</span></span><br><span class="line"><span class="string">	动态获取用户名实时的跟后端确认并实时展示的前端(局部刷新)</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">朝发送请求的方式</span></span><br><span class="line"><span class="string">	1.浏览器地址栏直接输入url回车						   GET请求</span></span><br><span class="line"><span class="string">	2.a标签href属性											    GET请求</span></span><br><span class="line"><span class="string">	3.form表单														 GET请求/POST请求</span></span><br><span class="line"><span class="string">	4.ajax																GET请求/POST请求	</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">AJAX 不是新的编程语言，而是一种使用现有标准的新方法(比较装饰器)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">AJAX 最大的优点是在不重新加载整个页面的情况下，可以与服务器交换数据并更新部分网页内容。（这一特点给用户的感受是在不知不觉中完成请求和响应过程）</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Ajax我们只学习jQuery封装之后的版本(不学原生的 原生的复杂并且在实际项目中也一般不用)</span></span><br><span class="line"><span class="string">所以我们在前端页面使用ajax的时候需要确保导入了jQuery</span></span><br><span class="line"><span class="string">ps:并不只有jQuery能够实现ajax，其他的框架也可以 但是换汤不换药 原理是一样的</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<h3 id="小例子"><a href="#小例子" class="headerlink" title="小例子"></a>小例子</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">页面上有三个input框</span></span><br><span class="line"><span class="string">	在前两个框中输入数字 点击按钮 朝后端发送ajax请求</span></span><br><span class="line"><span class="string">	后端计算出结果 再返回给前端动态展示的到第三个input框中</span></span><br><span class="line"><span class="string">	(整个过程页面不准有刷新,也不能在前端计算)</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">$(<span class="string">'#btn'</span>).click(function () &#123;</span><br><span class="line">        // 朝后端发送ajax请求</span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            // <span class="number">1.</span>指定朝哪个后端发送ajax请求</span><br><span class="line">            url:<span class="string">''</span>, // 不写就是朝当前地址提交</span><br><span class="line">            // <span class="number">2.</span>请求方式</span><br><span class="line">            type:<span class="string">'post'</span>,  // 不指定默认就是get 都是小写</span><br><span class="line">            // <span class="number">3.</span>数据</span><br><span class="line">            &#123;<span class="comment">#data:&#123;'username':'jason','password':123&#125;,#&#125;</span></span><br><span class="line">            data:&#123;<span class="string">'i1'</span>:$(<span class="string">'#d1'</span>).val(),<span class="string">'i2'</span>:$(<span class="string">'#d2'</span>).val()&#125;,</span><br><span class="line">            // <span class="number">4.</span>回调函数:当后端给你返回结果的时候会自动触发 args接受后端的返回结果</span><br><span class="line">            success:function (args) &#123;</span><br><span class="line">                &#123;<span class="comment">#alert(args)  // 通过DOM操作动态渲染到第三个input里面#&#125;</span></span><br><span class="line">                &#123;<span class="comment">#$('#d3').val(args)#&#125;</span></span><br><span class="line">                console.log(typeof args)</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">              </span><br><span class="line">              </span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">针对后端如果是用HttpResponse返回的数据 回调函数不会自动帮你反序列化</span></span><br><span class="line"><span class="string">如果后端直接用的是JsonResponse返回的数据 回调函数会自动帮你反序列化</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">HttpResponse解决方式</span></span><br><span class="line"><span class="string">	1.自己在前端利用JSON.parse()</span></span><br><span class="line"><span class="string">	2.在ajax里面配置一个参数</span></span><br><span class="line"><span class="string">			(后面再讲)</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>django框架</tag>
      </tags>
  </entry>
  <entry>
    <title>[Ajax进阶与批量插入]</title>
    <url>/2019/07/07/Ajax%E8%BF%9B%E9%98%B6%E4%B8%8E%E6%89%B9%E9%87%8F%E6%8F%92%E5%85%A5/</url>
    <content><![CDATA[<h3 id="前后端传输数据的编码格式-contentType"><a href="#前后端传输数据的编码格式-contentType" class="headerlink" title="前后端传输数据的编码格式(contentType)"></a>前后端传输数据的编码格式(contentType)</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 我们主要研究post请求数据的编码格式</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">get请求数据就是直接放在url后面的</span></span><br><span class="line"><span class="string">url?username=jason&amp;password=123</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以朝后端发送post请求的方式</span></span><br><span class="line">	<span class="string">"""</span></span><br><span class="line"><span class="string">	1.form表单</span></span><br><span class="line"><span class="string">	2.ajax请求</span></span><br><span class="line"><span class="string">	"""</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">前后端传输数据的编码格式</span></span><br><span class="line"><span class="string">	urlencoded</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">	formdata</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">	json</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment"># 研究form表单</span></span><br><span class="line">	默认的数据编码格式是urlencoded</span><br><span class="line">    数据格式:username=jason&amp;password=<span class="number">123</span></span><br><span class="line">    django后端针对符合urlencoded编码格式的数据都会自动帮你解析封装到request.POST中</span><br><span class="line">  	username=jason&amp;password=<span class="number">123</span>	&gt;&gt;&gt; request.POST</span><br><span class="line">  </span><br><span class="line">    如果你把编码格式改成formdata，那么针对普通的键值对还是解析到request.POST中而将文件解析到request.FILES中</span><br><span class="line">  </span><br><span class="line">  form表单是没有办法发送json格式数据的</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="comment"># 研究ajax</span></span><br><span class="line">	默认的编码格式也是urlencoded</span><br><span class="line">  数据格式:username=jason&amp;age=<span class="number">20</span></span><br><span class="line">	django后端针对符合urlencoded编码格式的数据都会自动帮你解析封装到request.POST中</span><br><span class="line">  	username=jason&amp;age=<span class="number">20</span>	&gt;&gt;&gt; request.POST</span><br></pre></td></tr></table></figure>

<h3 id="ajax发送json格式数据"><a href="#ajax发送json格式数据" class="headerlink" title="ajax发送json格式数据"></a>ajax发送json格式数据</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">前后端传输数据的时候一定要确保编码格式跟数据真正的格式是一致的</span></span><br><span class="line"><span class="string">不要骗人家!!!</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#123;"username":"jason","age":25&#125;  </span></span><br><span class="line"><span class="string">	在request.POST里面肯定找不到</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">	django针对json格式的数据 不会做任何的处理 </span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">request对象方法补充</span></span><br><span class="line"><span class="string">	request.is_ajax()</span></span><br><span class="line"><span class="string">		判断当前请求是否是ajax请求 返回布尔值</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    $(<span class="string">'#d1'</span>).click(function () &#123;</span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            url:<span class="string">''</span>,</span><br><span class="line">            type:<span class="string">'post'</span>,</span><br><span class="line">            data:JSON.stringify(&#123;<span class="string">'username'</span>:<span class="string">'jason'</span>,<span class="string">'age'</span>:<span class="number">25</span>&#125;),</span><br><span class="line">            contentType:<span class="string">'application/json'</span>,  // 指定编码格式</span><br><span class="line">            success:function () &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">        json_bytes = request.body</span><br><span class="line">        json_str = json_bytes.decode(<span class="string">'utf-8'</span>)</span><br><span class="line">        json_dict = json.loads(json_str)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># json.loads括号内如果传入了一个二进制格式的数据那么内部自动解码再反序列化</span></span><br><span class="line">        json_dict = json.loads(json_bytes)</span><br><span class="line">        </span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">ajax发送json格式数据需要注意点</span></span><br><span class="line"><span class="string">	1.contentType参数指定成:application/json</span></span><br><span class="line"><span class="string">	2.数据是真正的json格式数据</span></span><br><span class="line"><span class="string">	3.django后端不会帮你处理json格式数据需要你自己去request.body获取并处理</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<h3 id="ajax发送文件"><a href="#ajax发送文件" class="headerlink" title="ajax发送文件"></a>ajax发送文件</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">ajax发送文件需要借助于js内置对象FormData</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    // 点击按钮朝后端发送普通键值对和文件数据</span><br><span class="line">    $(<span class="string">'#d4'</span>).on(<span class="string">'click'</span>,function () &#123;</span><br><span class="line">        // <span class="number">1</span> 需要先利用FormData内置对象</span><br><span class="line">        let formDateObj = new FormData();</span><br><span class="line">        // <span class="number">2</span> 添加普通的键值对</span><br><span class="line">        formDateObj.append(<span class="string">'username'</span>,$(<span class="string">'#d1'</span>).val());</span><br><span class="line">        formDateObj.append(<span class="string">'password'</span>,$(<span class="string">'#d2'</span>).val());</span><br><span class="line">        // <span class="number">3</span> 添加文件对象</span><br><span class="line">        formDateObj.append(<span class="string">'myfile'</span>,$(<span class="string">'#d3'</span>)[<span class="number">0</span>].files[<span class="number">0</span>])</span><br><span class="line">        // <span class="number">4</span> 将对象基于ajax发送给后端</span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            url:<span class="string">''</span>,</span><br><span class="line">            type:<span class="string">'post'</span>,</span><br><span class="line">            data:formDateObj,  // 直接将对象放在data后面即可</span><br><span class="line"></span><br><span class="line">            // ajax发送文件必须要指定的两个参数</span><br><span class="line">            contentType:false,  // 不需使用任何编码 django后端能够自动识别formdata对象</span><br><span class="line">            processData:false,  // 告诉你的浏览器不要对你的数据进行任何处理</span><br><span class="line"></span><br><span class="line">            success:function (args) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ab_file</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> request.is_ajax():</span><br><span class="line">        <span class="keyword">if</span> request.method == <span class="string">'POST'</span>:</span><br><span class="line">            print(request.POST)</span><br><span class="line">            print(request.FILES)</span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">'ab_file.html'</span>)</span><br><span class="line">  </span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">总结:</span></span><br><span class="line"><span class="string">	1.需要利用内置对象FormData</span></span><br><span class="line"><span class="string">				// 2 添加普通的键值对</span></span><br><span class="line"><span class="string">        formDateObj.append('username',$('#d1').val());</span></span><br><span class="line"><span class="string">        formDateObj.append('password',$('#d2').val());</span></span><br><span class="line"><span class="string">        // 3 添加文件对象</span></span><br><span class="line"><span class="string">        formDateObj.append('myfile',$('#d3')[0].files[0])</span></span><br><span class="line"><span class="string">	2.需要指定两个关键性的参数</span></span><br><span class="line"><span class="string">				contentType:false,  // 不需使用任何编码 django后端能够自动识别formdata对象</span></span><br><span class="line"><span class="string">        processData:false,  // 告诉你的浏览器不要对你的数据进行任何处理</span></span><br><span class="line"><span class="string">	3.django后端能够直接识别到formdata对象并且能够将内部的普通键值自动解析并封装到request.POST中 文件数据自动解析并封装到request.FILES中</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<h3 id="django自带的序列化组件-drf做铺垫"><a href="#django自带的序列化组件-drf做铺垫" class="headerlink" title="django自带的序列化组件(drf做铺垫)"></a>django自带的序列化组件(drf做铺垫)</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">如果发现你可以直接使用MySQL但是无法使用sqlite3</span></span><br><span class="line"><span class="string">不要慌张不要恐惧 你只需要按照之前MySQL的操作将sqlite3的驱动装一下即可</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment"># 需求:在前端给我获取到后端用户表里面所有的数据 并且要是列表套字典</span></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> JsonResponse</span><br><span class="line"><span class="keyword">from</span> django.core <span class="keyword">import</span> serializers</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ab_ser</span><span class="params">(request)</span>:</span></span><br><span class="line">    user_queryset = models.User.objects.all()</span><br><span class="line">    <span class="comment"># [&#123;&#125;,&#123;&#125;,&#123;&#125;,&#123;&#125;,&#123;&#125;]</span></span><br><span class="line">    <span class="comment"># user_list = []</span></span><br><span class="line">    <span class="comment"># for user_obj in user_queryset:</span></span><br><span class="line">    <span class="comment">#     tmp = &#123;</span></span><br><span class="line">    <span class="comment">#         'pk':user_obj.pk,</span></span><br><span class="line">    <span class="comment">#         'username':user_obj.username,</span></span><br><span class="line">    <span class="comment">#         'age':user_obj.age,</span></span><br><span class="line">    <span class="comment">#         'gender':user_obj.get_gender_display()</span></span><br><span class="line">    <span class="comment">#     &#125;</span></span><br><span class="line">    <span class="comment">#     user_list.append(tmp)</span></span><br><span class="line">    <span class="comment"># return JsonResponse(user_list,safe=False)</span></span><br><span class="line">    <span class="comment"># return render(request,'ab_ser.html',locals())</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 序列化</span></span><br><span class="line">    res = serializers.serialize(<span class="string">'json'</span>,user_queryset)</span><br><span class="line">    <span class="string">"""会自动帮你将数据变成json格式的字符串 并且内部非常的全面"""</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(res)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">[</span></span><br><span class="line"><span class="string"> &#123;"pk": 1, "username": "jason", "age": 25, "gender": "male"&#125;, </span></span><br><span class="line"><span class="string"> &#123;"pk": 2, "username": "egon", "age": 31, "gender": "female"&#125;,</span></span><br><span class="line"><span class="string"> &#123;"pk": 3, "username": "kevin", "age": 32, "gender": "others"&#125;, </span></span><br><span class="line"><span class="string"> &#123;"pk": 4, "username": "tank", "age": 40, "gender": 4&#125;</span></span><br><span class="line"><span class="string"> ]</span></span><br><span class="line"><span class="string">前后端分离的项目</span></span><br><span class="line"><span class="string">    作为后端开发的你只需要写代码将数据处理好</span></span><br><span class="line"><span class="string">    能够序列化返回给前端即可 </span></span><br><span class="line"><span class="string">        再写一个接口文档 告诉前端每个字段代表的意思即可</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">[</span></span><br><span class="line"><span class="string">&#123;   "model": "app01.user", </span></span><br><span class="line"><span class="string">    "pk": 1, </span></span><br><span class="line"><span class="string">    "fields": &#123;"username": "jason", "age": 25, "gender": 1&#125;&#125;, </span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">&#123;   "model": "app01.user", </span></span><br><span class="line"><span class="string">    "pk": 2, </span></span><br><span class="line"><span class="string">    "fields": &#123;"username": "egon", "age": 31, "gender": 2&#125;&#125;, </span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">&#123;   "model": "app01.user", </span></span><br><span class="line"><span class="string">    "pk": 3, </span></span><br><span class="line"><span class="string">    "fields": &#123;"username": "kevin", "age": 32, "gender": 3&#125;&#125;,</span></span><br><span class="line"><span class="string">     </span></span><br><span class="line"><span class="string">&#123;   "model": "app01.user", </span></span><br><span class="line"><span class="string">    "pk": 4, </span></span><br><span class="line"><span class="string">    "fields": &#123;"username": "tank", "age": 40, "gender": 4&#125;&#125;</span></span><br><span class="line"><span class="string">]</span></span><br><span class="line"><span class="string">写接口就是利用序列化组件渲染数据然后写一个接口文档 该交代交代一下就完事</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<h3 id="ajax结合sweetalert"><a href="#ajax结合sweetalert" class="headerlink" title="ajax结合sweetalert"></a>ajax结合sweetalert</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">自己要学会如何拷贝</span></span><br><span class="line"><span class="string">学会基于别人的基础之上做修改</span></span><br><span class="line"><span class="string">研究各个参数表示的意思 然后找葫芦画瓢</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    $(<span class="string">'.del'</span>).on(<span class="string">'click'</span>,function () &#123;</span><br><span class="line">        // 先将当前标签对象存储起来</span><br><span class="line">        let currentBtn = $(this);</span><br><span class="line">        // 二次确认弹框</span><br><span class="line">        swal(&#123;</span><br><span class="line">          title: <span class="string">"你确定要删吗?"</span>,</span><br><span class="line">          text: <span class="string">"你可要考虑清除哦，可能需要拎包跑路哦!"</span>,</span><br><span class="line">          type: <span class="string">"warning"</span>,</span><br><span class="line">          showCancelButton: true,</span><br><span class="line">          confirmButtonClass: <span class="string">"btn-danger"</span>,</span><br><span class="line">          confirmButtonText: <span class="string">"是的，老子就要删!"</span>,</span><br><span class="line">          cancelButtonText: <span class="string">"算了,算了!"</span>,</span><br><span class="line">          closeOnConfirm: false,</span><br><span class="line">          closeOnCancel: false,</span><br><span class="line">          showLoaderOnConfirm: true</span><br><span class="line">        &#125;,</span><br><span class="line">        function(isConfirm) &#123;</span><br><span class="line">          <span class="keyword">if</span> (isConfirm) &#123;</span><br><span class="line">                // 朝后端发送ajax请求删除数据之后 再弹下面的提示框</span><br><span class="line">                $.ajax(&#123;</span><br><span class="line">                    &#123;<span class="comment">#url:'/delete/user/' + currentBtn.attr('delete_id'),  // 1 传递主键值方式1#&#125;</span></span><br><span class="line">                    url:<span class="string">'/delete/user/'</span>,  // <span class="number">2</span> 放在请求体里面</span><br><span class="line">                    type:<span class="string">'post'</span>,</span><br><span class="line">                    data:&#123;<span class="string">'delete_id'</span>:currentBtn.attr(<span class="string">'delete_id'</span>)&#125;,</span><br><span class="line">                    success:function (args) &#123;  // args = &#123;<span class="string">'code'</span>:<span class="string">''</span>,<span class="string">'msg'</span>:<span class="string">''</span>&#125;</span><br><span class="line">                        // 判断响应状态码 然后做不同的处理</span><br><span class="line">                        <span class="keyword">if</span>(args.code === <span class="number">1000</span>)&#123;</span><br><span class="line">                            swal(<span class="string">"删了!"</span>, args.msg, <span class="string">"success"</span>);</span><br><span class="line">                            // <span class="number">1.l</span>owb版本 直接刷新当前页面</span><br><span class="line">                            &#123;<span class="comment">#window.location.reload()#&#125;</span></span><br><span class="line">                            // <span class="number">2.</span>利用DOM操作 动态刷新</span><br><span class="line">                            currentBtn.parent().parent().remove()</span><br><span class="line">                        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                            swal(<span class="string">'完了'</span>,<span class="string">'出现了位置的错误'</span>,<span class="string">'info'</span>)</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125;)</span><br><span class="line"></span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            swal(<span class="string">"怂逼"</span>, <span class="string">"不要说我认识你"</span>, <span class="string">"error"</span>);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="批量插入"><a href="#批量插入" class="headerlink" title="批量插入"></a>批量插入</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ab_pl</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="comment"># 先给Book插入一万条数据</span></span><br><span class="line">    <span class="comment"># for i in range(10000):</span></span><br><span class="line">    <span class="comment">#     models.Book.objects.create(title='第%s本书'%i)</span></span><br><span class="line">    <span class="comment"># # 再将所有的数据查询并展示到前端页面</span></span><br><span class="line">    book_queryset = models.Book.objects.all()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 批量插入</span></span><br><span class="line">    <span class="comment"># book_list = []</span></span><br><span class="line">    <span class="comment"># for i in range(100000):</span></span><br><span class="line">    <span class="comment">#     book_obj = models.Book(title='第%s本书'%i)</span></span><br><span class="line">    <span class="comment">#     book_list.append(book_obj)</span></span><br><span class="line">    <span class="comment"># models.Book.objects.bulk_create(book_list)</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    当你想要批量插入数据的时候 使用orm给你提供的bulk_create能够大大的减少操作时间</span></span><br><span class="line"><span class="string">    :param request: </span></span><br><span class="line"><span class="string">    :return: </span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">'ab_pl.html'</span>,locals())</span><br></pre></td></tr></table></figure>

<h3 id="分页器"><a href="#分页器" class="headerlink" title="分页器"></a>分页器</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">总数据100 每页展示10 需要10</span></span><br><span class="line"><span class="string">总数据101 每页展示10 需要11</span></span><br><span class="line"><span class="string">总数据99 每页展示10  需要10</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">如何通过代码动态的计算出到底需要多少页？</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">在制作页码个数的时候 一般情况下都是奇数个		符合中国人对称美的标准</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment"># 分页</span></span><br><span class="line">    book_list = models.Book.objects.all()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 想访问哪一页</span></span><br><span class="line">    current_page = request.GET.get(<span class="string">'page'</span>,<span class="number">1</span>)  <span class="comment"># 如果获取不到当前页码 就展示第一页</span></span><br><span class="line">    <span class="comment"># 数据类型转换</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        current_page = int(current_page)</span><br><span class="line">    <span class="keyword">except</span> Exception:</span><br><span class="line">        current_page = <span class="number">1</span></span><br><span class="line">    <span class="comment"># 每页展示多少条</span></span><br><span class="line">    per_page_num = <span class="number">10</span></span><br><span class="line">    <span class="comment"># 起始位置</span></span><br><span class="line">    start_page = (current_page - <span class="number">1</span>) * per_page_num</span><br><span class="line">    <span class="comment"># 终止位置</span></span><br><span class="line">    end_page = current_page * per_page_num</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 计算出到底需要多少页</span></span><br><span class="line">    all_count = book_list.count()</span><br><span class="line"></span><br><span class="line">    page_count, more = divmod(all_count, per_page_num)</span><br><span class="line">    <span class="keyword">if</span> more:</span><br><span class="line">        page_count += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    page_html = <span class="string">''</span></span><br><span class="line">    xxx = current_page</span><br><span class="line">    <span class="keyword">if</span> current_page &lt; <span class="number">6</span>:</span><br><span class="line">        current_page = <span class="number">6</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(current_page<span class="number">-5</span>,current_page+<span class="number">6</span>):</span><br><span class="line">        <span class="keyword">if</span> xxx == i:</span><br><span class="line">            page_html += <span class="string">'&lt;li class="active"&gt;&lt;a href="?page=%s"&gt;%s&lt;/a&gt;&lt;/li&gt;'</span>%(i,i)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            page_html += <span class="string">'&lt;li&gt;&lt;a href="?page=%s"&gt;%s&lt;/a&gt;&lt;/li&gt;'</span>%(i,i)</span><br><span class="line"></span><br><span class="line">    book_queryset =  book_list[start_page:end_page]</span><br><span class="line">    </span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">django中有自带的分页器模块 但是书写起来很麻烦并且功能太简单</span></span><br><span class="line"><span class="string">所以我们自己想法和设法的写自定义分页器</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">上述推导代码你无需掌握 只需要知道内部逻辑即可</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">我们基于上述的思路 已经封装好了我们自己的自定义分页器 </span></span><br><span class="line"><span class="string">之后需要使用直接拷贝即可</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>django框架</tag>
      </tags>
  </entry>
  <entry>
    <title>[form校验组件]</title>
    <url>/2019/07/08/form%E6%A0%A1%E9%AA%8C%E7%BB%84%E4%BB%B6/</url>
    <content><![CDATA[<h3 id="前戏"><a href="#前戏" class="headerlink" title="前戏"></a>前戏</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">写一个注册功能</span></span><br><span class="line"><span class="string">	获取用户名和密码 利用form表单提交数据</span></span><br><span class="line"><span class="string">	在后端判断用户名和密码是否符合一定的条件</span></span><br><span class="line"><span class="string">		用户名中不能含有金瓶梅</span></span><br><span class="line"><span class="string">		密码不能少于三位</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">	如何符合条件需要你将提示信息展示到前端页面</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ab_form</span><span class="params">(request)</span>:</span></span><br><span class="line">    back_dic = &#123;<span class="string">'username'</span>:<span class="string">''</span>,<span class="string">'password'</span>:<span class="string">''</span>&#125;</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'POST'</span>:</span><br><span class="line">        username = request.POST.get(<span class="string">'username'</span>)</span><br><span class="line">        password = request.POST.get(<span class="string">'password'</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">'金瓶梅'</span> <span class="keyword">in</span> username:</span><br><span class="line">            back_dic[<span class="string">'username'</span>] = <span class="string">'不符合社会主义核心价值观'</span></span><br><span class="line">        <span class="keyword">if</span> len(password) &lt; <span class="number">3</span>:</span><br><span class="line">            back_dic[<span class="string">'password'</span>] = <span class="string">'不能太短 不好!'</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    无论是post请求还是get请求</span></span><br><span class="line"><span class="string">    页面都能够获取到字典 只不过get请求来的时候 字典值都是空的</span></span><br><span class="line"><span class="string">    而post请求来之后 字典可能有值</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">'ab_form.html'</span>,locals())</span><br><span class="line"></span><br><span class="line">&lt;form action=<span class="string">""</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">    &lt;p&gt;username:</span><br><span class="line">        &lt;input type=<span class="string">"text"</span> name=<span class="string">"username"</span>&gt;</span><br><span class="line">        &lt;span style="color: red"&gt;&#123;&#123; back_dic.username &#125;&#125;&lt;/span&gt;</span><br><span class="line">    &lt;/p&gt;</span><br><span class="line">    &lt;p&gt;password:</span><br><span class="line">        &lt;input type=<span class="string">"text"</span> name=<span class="string">"password"</span>&gt;</span><br><span class="line">        &lt;span style="color: red"&gt;&#123;&#123; back_dic.password &#125;&#125;&lt;/span&gt;</span><br><span class="line">    &lt;/p&gt;</span><br><span class="line">    &lt;input type="submit" class="btn btn-info"&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">1.手动书写前端获取用户数据的html代码						渲染html代码</span></span><br><span class="line"><span class="string">2.后端对用户数据进行校验											 校验数据</span></span><br><span class="line"><span class="string">3.对不符合要求的数据进行前端提示								展示提示信息</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">forms组件</span></span><br><span class="line"><span class="string">	能够完成的事情</span></span><br><span class="line"><span class="string">			1.渲染html代码</span></span><br><span class="line"><span class="string">			2.校验数据</span></span><br><span class="line"><span class="string">			3.展示提示信息</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">为什么数据校验非要去后端 不能在前端利用js直接完成呢？</span></span><br><span class="line"><span class="string">	数据校验前端可有可无</span></span><br><span class="line"><span class="string">	但是后端必须要有!!!</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">	因为前端的校验是弱不禁风的 你可以直接修改</span></span><br><span class="line"><span class="string">	或者利用爬虫程序绕过前端页面直接朝后端提交数据</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">	购物网站	</span></span><br><span class="line"><span class="string">		选取了货物之后 会计算一个价格发送给后端 如果后端不做价格的校验</span></span><br><span class="line"><span class="string">		</span></span><br><span class="line"><span class="string">		实际是获取到用户选择的所有商品的主键值</span></span><br><span class="line"><span class="string">		然后在后端查询出所有商品的价格 再次计算一遍</span></span><br><span class="line"><span class="string">		如果跟前端一致 那么完成支付如果不一致直接拒绝</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django <span class="keyword">import</span> forms</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyForm</span><span class="params">(forms.Form)</span>:</span></span><br><span class="line">    <span class="comment"># username字符串类型最小3位最大8位</span></span><br><span class="line">    username = forms.CharField(min_length=<span class="number">3</span>,max_length=<span class="number">8</span>)</span><br><span class="line">    <span class="comment"># password字符串类型最小3位最大8位</span></span><br><span class="line">    password = forms.CharField(min_length=<span class="number">3</span>,max_length=<span class="number">8</span>)</span><br><span class="line">    <span class="comment"># email字段必须符合邮箱格式  xxx@xx.com</span></span><br><span class="line">    email = forms.EmailField()</span><br></pre></td></tr></table></figure>

<h3 id="校验数据"><a href="#校验数据" class="headerlink" title="校验数据"></a>校验数据</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">1.测试环境的准备 可以自己拷贝代码准备</span></span><br><span class="line"><span class="string">2.其实在pycharm里面已经帮你准备一个测试环境</span></span><br><span class="line"><span class="string">	python console</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">from</span> app01 <span class="keyword">import</span> views</span><br><span class="line"><span class="comment"># 1 将带校验的数据组织成字典的形式传入即可</span></span><br><span class="line">form_obj = views.MyForm(&#123;<span class="string">'username'</span>:<span class="string">'jason'</span>,<span class="string">'password'</span>:<span class="string">'123'</span>,<span class="string">'email'</span>:<span class="string">'123'</span>&#125;)</span><br><span class="line"><span class="comment"># 2 判断数据是否合法		注意该方法只有在所有的数据全部合法的情况下才会返回True</span></span><br><span class="line">form_obj.is_valid()</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="comment"># 3 查看所有校验通过的数据</span></span><br><span class="line">form_obj.cleaned_data</span><br><span class="line">&#123;<span class="string">'username'</span>: <span class="string">'jason'</span>, <span class="string">'password'</span>: <span class="string">'123'</span>&#125;</span><br><span class="line"><span class="comment"># 4 查看所有不符合校验规则以及不符合的原因</span></span><br><span class="line">form_obj.errors</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">'email'</span>: [<span class="string">'Enter a valid email address.'</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 5 校验数据只校验类中出现的字段 多传不影响 多传的字段直接忽略</span></span><br><span class="line">form_obj = views.MyForm(&#123;<span class="string">'username'</span>:<span class="string">'jason'</span>,<span class="string">'password'</span>:<span class="string">'123'</span>,<span class="string">'email'</span>:<span class="string">'123@qq.com'</span>,<span class="string">'hobby'</span>:<span class="string">'study'</span>&#125;)</span><br><span class="line">form_obj.is_valid()</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="comment"># 6 校验数据 默认情况下 类里面所有的字段都必须传值</span></span><br><span class="line">form_obj = views.MyForm(&#123;<span class="string">'username'</span>:<span class="string">'jason'</span>,<span class="string">'password'</span>:<span class="string">'123'</span>&#125;)</span><br><span class="line">form_obj.is_valid()</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">也就意味着校验数据的时候 默认情况下数据可以多传但是绝不可能少传</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<h3 id="渲染标签"><a href="#渲染标签" class="headerlink" title="渲染标签"></a>渲染标签</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">forms组件只会自动帮你渲染获取用户输入的标签(input select radio checkbox)</span></span><br><span class="line"><span class="string">不能帮你渲染提交按钮</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="comment"># 1 先产生一个空对象</span></span><br><span class="line">    form_obj = MyForm()</span><br><span class="line">    <span class="comment"># 2 直接将该空对象传递给html页面</span></span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">'index.html'</span>,locals())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 前端利用空对象做操作</span></span><br><span class="line">    &lt;p&gt;第一种渲染方式:代码书写极少，封装程度太高 不便于后续的扩展 一般情况下只在本地测试使用&lt;/p&gt;</span><br><span class="line">    &#123;&#123; form_obj.as_p &#125;&#125;</span><br><span class="line">    &#123;&#123; form_obj.as_ul &#125;&#125;</span><br><span class="line">    &#123;&#123; form_obj.as_table &#125;&#125;</span><br><span class="line">    &lt;p&gt;第二种渲染方式:可扩展性很强 但是需要书写的代码太多  一般情况下不用&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123; form_obj.username.label &#125;&#125;:&#123;&#123; form_obj.username &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123; form_obj.password.label &#125;&#125;:&#123;&#123; form_obj.password &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123; form_obj.email.label &#125;&#125;:&#123;&#123; form_obj.email &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;第三种渲染方式(推荐使用):代码书写简单 并且扩展性也高&lt;/p&gt;</span><br><span class="line">    &#123;% <span class="keyword">for</span> form <span class="keyword">in</span> form_obj %&#125;</span><br><span class="line">        &lt;p&gt;&#123;&#123; form.label &#125;&#125;:&#123;&#123; form &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line"> </span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">label属性默认展示的是类中定义的字段首字母大写的形式</span></span><br><span class="line"><span class="string">也可以自己修改 直接给字段对象加label属性即可</span></span><br><span class="line"><span class="string">	 username = forms.CharField(min_length=3,max_length=8,label='用户名')</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<h3 id="展示提示信息"><a href="#展示提示信息" class="headerlink" title="展示提示信息"></a>展示提示信息</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">浏览器会自动帮你校验数据 但是前端的校验弱不禁风</span></span><br><span class="line"><span class="string">如何让浏览器不做校验</span></span><br><span class="line"><span class="string">	&lt;form action="" method="post" novalidate&gt;</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="comment"># 1 先产生一个空对象</span></span><br><span class="line">    form_obj = MyForm()</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'POST'</span>:</span><br><span class="line">        <span class="comment"># 获取用户数据并且校验</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        1.数据获取繁琐</span></span><br><span class="line"><span class="string">        2.校验数据需要构造成字典的格式传入才行</span></span><br><span class="line"><span class="string">        ps:但是request.POST可以看成就是一个字典</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment"># 3.校验数据</span></span><br><span class="line">        form_obj = MyForm(request.POST)</span><br><span class="line">        <span class="comment"># 4.判断数据是否合法</span></span><br><span class="line">        <span class="keyword">if</span> form_obj.is_valid():</span><br><span class="line">            <span class="comment"># 5.如果合法 操作数据库存储数据</span></span><br><span class="line">            <span class="keyword">return</span> HttpResponse(<span class="string">'OK'</span>)</span><br><span class="line">        <span class="comment"># 5.不合法 有错误</span></span><br><span class="line">    <span class="comment"># 2 直接将该空对象传递给html页面</span></span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">'index.html'</span>,locals())</span><br><span class="line"></span><br><span class="line">&#123;% <span class="keyword">for</span> form <span class="keyword">in</span> form_obj %&#125;</span><br><span class="line">        &lt;p&gt;</span><br><span class="line">            &#123;&#123; form.label &#125;&#125;:&#123;&#123; form &#125;&#125;</span><br><span class="line">            &lt;span style="color: red"&gt;&#123;&#123; form.errors.0 &#125;&#125;&lt;/span&gt;</span><br><span class="line">        &lt;/p&gt;</span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">1.必备的条件 get请求和post传给html页面对象变量名必须一样</span></span><br><span class="line"><span class="string">2.forms组件当你的数据不合法的情况下 会保存你上次的数据 让你基于之前的结果进行修改</span></span><br><span class="line"><span class="string">更加的人性化</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment"># 针对错误的提示信息还可以自己自定制</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyForm</span><span class="params">(forms.Form)</span>:</span></span><br><span class="line">    <span class="comment"># username字符串类型最小3位最大8位</span></span><br><span class="line">    username = forms.CharField(min_length=<span class="number">3</span>,max_length=<span class="number">8</span>,label=<span class="string">'用户名'</span>,</span><br><span class="line">                               error_messages=&#123;</span><br><span class="line">                                   <span class="string">'min_length'</span>:<span class="string">'用户名最少3位'</span>,</span><br><span class="line">                                   <span class="string">'max_length'</span>:<span class="string">'用户名最大8位'</span>,</span><br><span class="line">                                   <span class="string">'required'</span>:<span class="string">"用户名不能为空"</span></span><br><span class="line">                               &#125;</span><br><span class="line">                               )</span><br><span class="line">    <span class="comment"># password字符串类型最小3位最大8位</span></span><br><span class="line">    password = forms.CharField(min_length=<span class="number">3</span>,max_length=<span class="number">8</span>,label=<span class="string">'密码'</span>,</span><br><span class="line">                               error_messages=&#123;</span><br><span class="line">                                   <span class="string">'min_length'</span>: <span class="string">'密码最少3位'</span>,</span><br><span class="line">                                   <span class="string">'max_length'</span>: <span class="string">'密码最大8位'</span>,</span><br><span class="line">                                   <span class="string">'required'</span>: <span class="string">"密码不能为空"</span></span><br><span class="line">                               &#125;</span><br><span class="line">                               )</span><br><span class="line">    <span class="comment"># email字段必须符合邮箱格式  xxx@xx.com</span></span><br><span class="line">    email = forms.EmailField(label=<span class="string">'邮箱'</span>,</span><br><span class="line">                             error_messages=&#123;</span><br><span class="line">                                 <span class="string">'invalid'</span>:<span class="string">'邮箱格式不正确'</span>,</span><br><span class="line">                                 <span class="string">'required'</span>: <span class="string">"邮箱不能为空"</span></span><br><span class="line">                             &#125;</span><br><span class="line">                             )</span><br></pre></td></tr></table></figure>

<h3 id="钩子函数-HOOK"><a href="#钩子函数-HOOK" class="headerlink" title="钩子函数(HOOK)"></a>钩子函数(HOOK)</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">在特定的节点自动触发完成响应操作</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">钩子函数在forms组件中就类似于第二道关卡，能够让我们自定义校验规则</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">在forms组件中有两类钩子</span></span><br><span class="line"><span class="string">	1.局部钩子</span></span><br><span class="line"><span class="string">		当你需要给单个字段增加校验规则的时候可以使用</span></span><br><span class="line"><span class="string">	2.全局钩子</span></span><br><span class="line"><span class="string">  	当你需要给多个字段增加校验规则的时候可以使用</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment"># 实际案例</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.校验用户名中不能含有666				只是校验username字段  局部钩子</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.校验密码和确认密码是否一致			password confirm两个字段	全局钩子</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 钩子函数  在类里面书写方法即可</span></span><br><span class="line">    <span class="comment"># 局部钩子</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">clean_username</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 获取到用户名</span></span><br><span class="line">        username = self.cleaned_data.get(<span class="string">'username'</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">'666'</span> <span class="keyword">in</span> username:</span><br><span class="line">            <span class="comment"># 提示前端展示错误信息</span></span><br><span class="line">            self.add_error(<span class="string">'username'</span>,<span class="string">'光喊666是不行滴～'</span>)</span><br><span class="line">        <span class="comment"># 将钩子函数钩去出来数据再放回去</span></span><br><span class="line">        <span class="keyword">return</span> username</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 全局钩子</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">clean</span><span class="params">(self)</span>:</span></span><br><span class="line">        password = self.cleaned_data.get(<span class="string">'password'</span>)</span><br><span class="line">        confirm_password = self.cleaned_data.get(<span class="string">'confirm_password'</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> confirm_password == password:</span><br><span class="line">            self.add_error(<span class="string">'confirm_password'</span>,<span class="string">'两次密码不一致'</span>)</span><br><span class="line">        <span class="comment"># 将钩子函数钩出来数据再放回去</span></span><br><span class="line">        <span class="keyword">return</span> self.cleaned_data</span><br></pre></td></tr></table></figure>

<h3 id="forms组件其他参数及补充知识点"><a href="#forms组件其他参数及补充知识点" class="headerlink" title="forms组件其他参数及补充知识点"></a>forms组件其他参数及补充知识点</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">label		字段名</span><br><span class="line">error_messages  自定义报错信息</span><br><span class="line">initial  默认值</span><br><span class="line">required  控制字段是否必填</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">1.字段没有样式</span></span><br><span class="line"><span class="string">2.针对不同类型的input如何修改</span></span><br><span class="line"><span class="string">	text</span></span><br><span class="line"><span class="string">	password</span></span><br><span class="line"><span class="string">	date</span></span><br><span class="line"><span class="string">	radio</span></span><br><span class="line"><span class="string">	checkbox</span></span><br><span class="line"><span class="string">	...</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">widget=forms.widgets.PasswordInput(attrs=&#123;<span class="string">'class'</span>:<span class="string">'form-control c1 c2'</span>&#125;)</span><br><span class="line"><span class="comment"># 多个属性值的话 直接空格隔开即可</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第一道关卡里面还支持正则校验</span></span><br><span class="line"><span class="keyword">from</span> django.core.validators <span class="keyword">import</span> RegexValidator</span><br><span class="line">validators=[</span><br><span class="line">            RegexValidator(<span class="string">r'^[0-9]+$'</span>, <span class="string">'请输入数字'</span>),</span><br><span class="line">            RegexValidator(<span class="string">r'^159[0-9]+$'</span>, <span class="string">'数字必须以159开头'</span>)</span><br><span class="line">        ]</span><br></pre></td></tr></table></figure>

<p>其他类型渲染</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># radio</span></span><br><span class="line">    gender = forms.ChoiceField(</span><br><span class="line">        choices=((<span class="number">1</span>, <span class="string">"男"</span>), (<span class="number">2</span>, <span class="string">"女"</span>), (<span class="number">3</span>, <span class="string">"保密"</span>)),</span><br><span class="line">        label=<span class="string">"性别"</span>,</span><br><span class="line">        initial=<span class="number">3</span>,</span><br><span class="line">        widget=forms.widgets.RadioSelect()</span><br><span class="line">    )</span><br><span class="line">    <span class="comment"># select</span></span><br><span class="line">    hobby = forms.ChoiceField(</span><br><span class="line">        choices=((<span class="number">1</span>, <span class="string">"篮球"</span>), (<span class="number">2</span>, <span class="string">"足球"</span>), (<span class="number">3</span>, <span class="string">"双色球"</span>),),</span><br><span class="line">        label=<span class="string">"爱好"</span>,</span><br><span class="line">        initial=<span class="number">3</span>,</span><br><span class="line">        widget=forms.widgets.Select()</span><br><span class="line">    )</span><br><span class="line">    <span class="comment"># 多选</span></span><br><span class="line">    hobby1 = forms.MultipleChoiceField(</span><br><span class="line">        choices=((<span class="number">1</span>, <span class="string">"篮球"</span>), (<span class="number">2</span>, <span class="string">"足球"</span>), (<span class="number">3</span>, <span class="string">"双色球"</span>),),</span><br><span class="line">        label=<span class="string">"爱好"</span>,</span><br><span class="line">        initial=[<span class="number">1</span>, <span class="number">3</span>],</span><br><span class="line">        widget=forms.widgets.SelectMultiple()</span><br><span class="line">    )</span><br><span class="line">    <span class="comment"># 单选checkbox</span></span><br><span class="line">    keep = forms.ChoiceField(</span><br><span class="line">        label=<span class="string">"是否记住密码"</span>,</span><br><span class="line">        initial=<span class="string">"checked"</span>,</span><br><span class="line">        widget=forms.widgets.CheckboxInput()</span><br><span class="line">    )</span><br><span class="line">    <span class="comment"># 多选checkbox</span></span><br><span class="line">    hobby2 = forms.MultipleChoiceField(</span><br><span class="line">        choices=((<span class="number">1</span>, <span class="string">"篮球"</span>), (<span class="number">2</span>, <span class="string">"足球"</span>), (<span class="number">3</span>, <span class="string">"双色球"</span>),),</span><br><span class="line">        label=<span class="string">"爱好"</span>,</span><br><span class="line">        initial=[<span class="number">1</span>, <span class="number">3</span>],</span><br><span class="line">        widget=forms.widgets.CheckboxSelectMultiple()</span><br><span class="line">    )</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>django框架</tag>
      </tags>
  </entry>
  <entry>
    <title>[cookie与session]</title>
    <url>/2019/07/10/cookie%E4%B8%8Esession/</url>
    <content><![CDATA[<h3 id="forms组件源码"><a href="#forms组件源码" class="headerlink" title="forms组件源码"></a>forms组件源码</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">切入点:</span></span><br><span class="line"><span class="string">	form_obj.is_valid()</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_valid</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Returns True if the form has no errors. Otherwise, False. If errors are</span></span><br><span class="line"><span class="string">        being ignored, returns False.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">   <span class="keyword">return</span> self.is_bound <span class="keyword">and</span> <span class="keyword">not</span> self.errors</span><br><span class="line">   <span class="comment"># 如果is_valid要返回True的话 那么self.is_bound要为True self.errors要为Flase</span></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">self.is_bound = data <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">or</span> files <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>  <span class="comment"># 只要你传值了肯定为True</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@property</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">errors</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"Returns an ErrorDict for the data provided for the form"</span></span><br><span class="line">        <span class="keyword">if</span> self._errors <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            self.full_clean()</span><br><span class="line">        <span class="keyword">return</span> self._errors</span><br><span class="line"></span><br><span class="line"><span class="comment"># forms组件所有的功能基本都出自于该方法</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">full_clean</span><span class="params">(self)</span>:</span></span><br><span class="line">  	self._clean_fields()  <span class="comment"># 校验字段 + 局部钩子</span></span><br><span class="line">    self._clean_form()  <span class="comment"># 全局钩子</span></span><br><span class="line">    self._post_clean()</span><br></pre></td></tr></table></figure>

<h3 id="cookie与session"><a href="#cookie与session" class="headerlink" title="cookie与session"></a>cookie与session</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">发展史</span></span><br><span class="line"><span class="string">	1.网站都没有保存用户功能的需求 所有用户访问返回的结果都是一样的</span></span><br><span class="line"><span class="string">		eg:新闻、博客、文章...</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">	2.出现了一些需要保存用户信息的网站</span></span><br><span class="line"><span class="string">		eg:淘宝、支付宝、京东...</span></span><br><span class="line"><span class="string">		</span></span><br><span class="line"><span class="string">		以登陆功能为例:如果不保存用户登陆状态 也就意味着用户每次访问网站都需要重复的输入用户名和密码(你觉得这样的网站你还想用吗？)</span></span><br><span class="line"><span class="string">		当用户第一次登陆成功之后 将用户的用户名密码返回给用户浏览器 让用户浏览器保存在本地，之后访问网站的时候浏览器自动将保存在浏览器上的用户名和密码发送给服务端，服务端获取之后自动验证</span></span><br><span class="line"><span class="string">		早起这种方式具有非常大的安全隐患</span></span><br><span class="line"><span class="string">		</span></span><br><span class="line"><span class="string">		</span></span><br><span class="line"><span class="string">		优化:</span></span><br><span class="line"><span class="string">			当用户登陆成功之后，服务端产生一个随机字符串(在服务端保存数据,用kv键值对的形式)，交由客户端浏览器保存</span></span><br><span class="line"><span class="string">			随机字符串1:用户1相关信息</span></span><br><span class="line"><span class="string">			随机字符串2:用户2相关信息</span></span><br><span class="line"><span class="string">			随机字符串3:用户3相关信息</span></span><br><span class="line"><span class="string">			之后访问服务端的时候，都带着该随机字符串，服务端去数据库中比对是否有对应的随机字符串从而获取到对应的用户信息</span></span><br><span class="line"><span class="string">			</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">但是如果你拿到了截获到了该随机字符串，那么你就可以冒充当前用户 其实还是有安全隐患的</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">你要知道在web领域没有绝对的安全也没有绝对的不安全</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">cookie</span><br><span class="line">	服务端保存在客户端浏览器上的信息都可以称之为cookie</span><br><span class="line">  它的表现形式一般都是k:v键值对(可以有多个)</span><br><span class="line">session</span><br><span class="line">	数据是保存在服务端的并且它的表现形式一般也是k:v键值对(可以有多个)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">下述内容暂时了解即可 先给我搞明白最简单的cookie与session使用再说话！</span><br><span class="line">token</span><br><span class="line">	session虽然数据是保存在服务端的 但是禁不住数据量大</span><br><span class="line">  服务端不再保存数据</span><br><span class="line">  	登陆成功之后 将一段用户信息进行加密处理(加密算法只有你公司开发知道)</span><br><span class="line">    将加密之后的结果拼接在信息后面 整体返回给浏览器保存 </span><br><span class="line">    浏览器下次访问的时候带着该信息 服务端自动切去前面一段信息再次使用自己的加密算法</span><br><span class="line">    跟浏览器尾部的密文进行比对</span><br><span class="line">jwt认证</span><br><span class="line">	三段信息</span><br><span class="line">  (后期会讲 结合django一起使用) </span><br><span class="line">	</span><br><span class="line">总结:</span><br><span class="line">  	<span class="number">1.</span>cookie就是保存在客户端浏览器上的信息</span><br><span class="line">    <span class="number">2.</span>session就是保存在服务端上的信息</span><br><span class="line">    <span class="number">3.</span>session是基于cookie工作的(其实大部分的保存用户状态的操作都需要使用到cookie)</span><br></pre></td></tr></table></figure>

<h3 id="Cookie操作"><a href="#Cookie操作" class="headerlink" title="Cookie操作"></a>Cookie操作</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 虽然cookie是服务端告诉客户端浏览器需要保存内容</span></span><br><span class="line"><span class="comment"># 但是客户端浏览器可以选择拒绝保存 如果禁止了 那么 只要是需要记录用户状态的网站登陆功能都无法使用了</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 视图函数的返回值</span></span><br><span class="line"><span class="keyword">return</span> HttpResponse()</span><br><span class="line"><span class="keyword">return</span> render()</span><br><span class="line"><span class="keyword">return</span> redirect()</span><br><span class="line"></span><br><span class="line">obj1 = HttpResponse()</span><br><span class="line"><span class="comment"># 操作cookie</span></span><br><span class="line"><span class="keyword">return</span> obj1</span><br><span class="line"></span><br><span class="line">obj2 = render()</span><br><span class="line"><span class="comment"># 操作cookie</span></span><br><span class="line"><span class="keyword">return</span> obj2</span><br><span class="line"></span><br><span class="line">obj3 = redirect()</span><br><span class="line"><span class="comment"># 操作cookie</span></span><br><span class="line"><span class="keyword">return</span> obj3</span><br><span class="line"><span class="comment"># 如果你想要操作cookie，你就不得不利用obj对象</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">设置cookie</span></span><br><span class="line"><span class="string">	obj.set_cookie(key,value)</span></span><br><span class="line"><span class="string">获取cookie</span></span><br><span class="line"><span class="string">	request.COOKIES.get(key)</span></span><br><span class="line"><span class="string">在设置cookie的时候可以添加一个超时时间</span></span><br><span class="line"><span class="string">	obj.set_cookie('username', 'jason666',max_age=3,expires=3)</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">	max_age</span></span><br><span class="line"><span class="string">	expires</span></span><br><span class="line"><span class="string">		两者都是设置超时时间的 并且都是以秒为单位</span></span><br><span class="line"><span class="string">		需要注意的是 针对IE浏览器需要使用expires</span></span><br><span class="line"><span class="string">主动删除cookie(注销功能)</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment"># 我们完成一个真正的登陆功能</span></span><br><span class="line"><span class="comment"># 校验用户是否登陆的装饰器</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">用户如果在没有登陆的情况下想访问一个需要登陆的页面</span></span><br><span class="line"><span class="string">那么先跳转到登陆页面 当用户输入正确的用户名和密码之后</span></span><br><span class="line"><span class="string">应该跳转到用户之前想要访问的页面去 而不是直接写死</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login_auth</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">(request,*args,**kwargs)</span>:</span></span><br><span class="line">        <span class="comment"># print(request.path_info)</span></span><br><span class="line">        <span class="comment"># print(request.get_full_path())  # 能够获取到用户上一次想要访问的url</span></span><br><span class="line">        target_url = request.get_full_path()</span><br><span class="line">        <span class="keyword">if</span> request.COOKIES.get(<span class="string">'username'</span>):</span><br><span class="line">            <span class="keyword">return</span> func(request,*args,**kwargs)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> redirect(<span class="string">'/login/?next=%s'</span>%target_url)</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'POST'</span>:</span><br><span class="line">        username = request.POST.get(<span class="string">'username'</span>)</span><br><span class="line">        password = request.POST.get(<span class="string">'password'</span>)</span><br><span class="line">        <span class="keyword">if</span> username == <span class="string">'jason'</span> <span class="keyword">and</span> password == <span class="string">'123'</span>:</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 获取用户上一次想要访问的url</span></span><br><span class="line">            target_url = request.GET.get(<span class="string">'next'</span>)  <span class="comment"># 这个结果可能是None</span></span><br><span class="line">            <span class="keyword">if</span> target_url:</span><br><span class="line">                obj = redirect(target_url)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># 保存用户登陆状态</span></span><br><span class="line">                obj = redirect(<span class="string">'/home/'</span>)</span><br><span class="line">            <span class="comment"># 让浏览器记录cookie数据</span></span><br><span class="line">            obj.set_cookie(<span class="string">'username'</span>, <span class="string">'jason666'</span>)</span><br><span class="line">            <span class="string">"""</span></span><br><span class="line"><span class="string">            浏览器不单单会帮你存</span></span><br><span class="line"><span class="string">            而且后面每次访问你的时候还会带着它过来</span></span><br><span class="line"><span class="string">            """</span></span><br><span class="line">            <span class="comment"># 跳转到一个需要用户登陆之后才能看的页面</span></span><br><span class="line">            <span class="keyword">return</span> obj</span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">'login.html'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@login_auth</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">home</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="comment"># 获取cookie信息 判断你有没有</span></span><br><span class="line">    <span class="comment"># if request.COOKIES.get('username') == 'jason666':</span></span><br><span class="line">    <span class="comment">#     return HttpResponse("我是home页面，只有登陆的用户才能进来哟~")</span></span><br><span class="line">    <span class="comment"># # 没有登陆应该跳转到登陆页面</span></span><br><span class="line">    <span class="comment"># return redirect('/login/')</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">"我是home页面，只有登陆的用户才能进来哟~"</span>)</span><br></pre></td></tr></table></figure>

<h3 id="session操作"><a href="#session操作" class="headerlink" title="session操作"></a>session操作</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">session数据是保存在服务端的(存？)，给客户端返回的是一个随机字符串</span></span><br><span class="line"><span class="string">	sessionid:随机字符串</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">1.在默认情况下操作session的时候需要django默认的一张django_session表</span></span><br><span class="line"><span class="string">	数据库迁移命令</span></span><br><span class="line"><span class="string">		django会自己创建很多表	django_session就是其中的一张</span></span><br><span class="line"><span class="string">		</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">django默认session的过期时间是14天</span></span><br><span class="line"><span class="string">	但是你也可以人为的修改它</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">设置session	</span></span><br><span class="line"><span class="string">request.session['key'] = value</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">获取session</span></span><br><span class="line"><span class="string">request.session.get('key')</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">设置过期时间</span></span><br><span class="line"><span class="string">request.session.set_expiry()</span></span><br><span class="line"><span class="string">	括号内可以放四种类型的参数</span></span><br><span class="line"><span class="string">		1.整数			   多少秒</span></span><br><span class="line"><span class="string">		2.日期对象			  到指定日期就失效</span></span><br><span class="line"><span class="string">		3.0					一旦当前浏览器窗口关闭立刻失效</span></span><br><span class="line"><span class="string">		4.不写			   失效时间就取决于django内部全局session默认的失效时间</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">清除session	</span></span><br><span class="line"><span class="string">	request.session.delete()  # 只删服务端的 客户端的不删</span></span><br><span class="line"><span class="string">	request.session.flush()  # 浏览器和服务端都清空(推荐使用)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">session是保存在服务端的 但是session的保存位置可以有多种选择</span></span><br><span class="line"><span class="string">	1.MySQL</span></span><br><span class="line"><span class="string">	2.文件</span></span><br><span class="line"><span class="string">	3.redis</span></span><br><span class="line"><span class="string">	4.memcache</span></span><br><span class="line"><span class="string">	...</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">django_session表中的数据条数是取决于浏览器的</span></span><br><span class="line"><span class="string">	同一个计算机上(IP地址)同一个浏览器只会有一条数据生效</span></span><br><span class="line"><span class="string">	(当session过期的时候可能会出现多条数据对应一个浏览器，但是该现象不会持续很久，内部会自动识别过期的数据清除 你也可以通过代码清除)</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">	主要是为了节省服务端数据库资源</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">request.session[<span class="string">'hobby'</span>] = <span class="string">'girl'</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    内部发送了那些事</span></span><br><span class="line"><span class="string">        1.django内部会自动帮你生成一个随机字符串</span></span><br><span class="line"><span class="string">        2.django内部自动将随机字符串和对应的数据存储到django_session表中</span></span><br><span class="line"><span class="string">            2.1先在内存中产生操作数据的缓存</span></span><br><span class="line"><span class="string">            2.2在响应结果django中间件的时候才真正的操作数据库</span></span><br><span class="line"><span class="string">        3.将产生的随机字符串返回给客户端浏览器保存</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">request.session.get(<span class="string">'hobby'</span>)</span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    内部发送了那些事</span></span><br><span class="line"><span class="string">        1.自动从浏览器请求中获取sessionid对应的随机字符串</span></span><br><span class="line"><span class="string">        2.拿着该随机字符串去django_session表中查找对应的数据</span></span><br><span class="line"><span class="string">        3.</span></span><br><span class="line"><span class="string">            如果比对上了 则将对应的数据取出并以字典的形式封装到request.session中</span></span><br><span class="line"><span class="string">            如果比对不上 则request.session.get()返回的是None</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 利用session实现登陆验证</span></span><br></pre></td></tr></table></figure>

<h3 id="CBV如何添加装饰器"><a href="#CBV如何添加装饰器" class="headerlink" title="CBV如何添加装饰器"></a>CBV如何添加装饰器</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.views <span class="keyword">import</span> View</span><br><span class="line"><span class="keyword">from</span> django.utils.decorators <span class="keyword">import</span> method_decorator</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">CBV中django不建议你直接给类的方法加装饰器</span></span><br><span class="line"><span class="string">无论该装饰器能都正常给你 都不建议直接加</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># @method_decorator(login_auth,name='get')  # 方式2(可以添加多个针对不同的方法加不同的装饰器)</span></span><br><span class="line"><span class="comment"># @method_decorator(login_auth,name='post')</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyLogin</span><span class="params">(View)</span>:</span></span><br><span class="line"><span class="meta">    @method_decorator(login_auth)  # 方式3:它会直接作用于当前类里面的所有的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dispatch</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> super().dispatch(request,*args,**kwargs)</span><br><span class="line">    <span class="comment"># @method_decorator(login_auth)  # 方式1:指名道姓</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self,request)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">"get请求"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self,request)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">'post请求'</span>)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>django框架</tag>
      </tags>
  </entry>
  <entry>
    <title>[django中间件]</title>
    <url>/2019/08/04/django%E4%B8%AD%E9%97%B4%E4%BB%B6/</url>
    <content><![CDATA[<h3 id="django中间件"><a href="#django中间件" class="headerlink" title="django中间件"></a>django中间件</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">django中间件是django的门户</span></span><br><span class="line"><span class="string">1.请求来的时候需要先经过中间件才能到达真正的django后端</span></span><br><span class="line"><span class="string">2.响应走的时候最后也需要经过中间件才能发送出去</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">django自带七个中间件</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">django请求生命周期流程图</span><br><span class="line"></span><br><span class="line">研究django中间件代码规律</span><br><span class="line">MIDDLEWARE = [</span><br><span class="line">    <span class="string">'django.middleware.security.SecurityMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.contrib.sessions.middleware.SessionMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.middleware.common.CommonMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.middleware.csrf.CsrfViewMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.contrib.auth.middleware.AuthenticationMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.contrib.messages.middleware.MessageMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.middleware.clickjacking.XFrameOptionsMiddleware'</span>,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SessionMiddleware</span><span class="params">(MiddlewareMixin)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_request</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        session_key = request.COOKIES.get(settings.SESSION_COOKIE_NAME)</span><br><span class="line">        request.session = self.SessionStore(session_key)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_response</span><span class="params">(self, request, response)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> response</span><br><span class="line">      </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CsrfViewMiddleware</span><span class="params">(MiddlewareMixin)</span>:</span></span><br><span class="line">  	<span class="function"><span class="keyword">def</span> <span class="title">process_request</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        csrf_token = self._get_token(request)</span><br><span class="line">        <span class="keyword">if</span> csrf_token <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="comment"># Use same token next time.</span></span><br><span class="line">            request.META[<span class="string">'CSRF_COOKIE'</span>] = csrf_token</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_view</span><span class="params">(self, request, callback, callback_args, callback_kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self._accept(request)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_response</span><span class="params">(self, request, response)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> response</span><br><span class="line">      </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AuthenticationMiddleware</span><span class="params">(MiddlewareMixin)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_request</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        request.user = SimpleLazyObject(<span class="keyword">lambda</span>: get_user(request))</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">django支持程序员自定义中间件并且暴露给程序员五个可以自定义的方法</span></span><br><span class="line"><span class="string">	1.必须掌握</span></span><br><span class="line"><span class="string">		process_request</span></span><br><span class="line"><span class="string">		</span></span><br><span class="line"><span class="string">		process_response</span></span><br><span class="line"><span class="string">	2.了解即可</span></span><br><span class="line"><span class="string">		process_view</span></span><br><span class="line"><span class="string">			</span></span><br><span class="line"><span class="string">		process_template_response</span></span><br><span class="line"><span class="string">		</span></span><br><span class="line"><span class="string">		process_exception</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<h3 id="如何自定义中间件"><a href="#如何自定义中间件" class="headerlink" title="如何自定义中间件"></a>如何自定义中间件</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">1.在项目名或者应用名下创建一个任意名称的文件夹</span></span><br><span class="line"><span class="string">2.在该文件夹内创建一个任意名称的py文件</span></span><br><span class="line"><span class="string">3.在该py文件内需要书写类(这个类必须继承MiddlewareMixin)</span></span><br><span class="line"><span class="string">	然后在这个类里面就可以自定义五个方法了</span></span><br><span class="line"><span class="string">	(这五个方法并不是全部都需要书写，用几个写几个)</span></span><br><span class="line"><span class="string">4.需要将类的路径以字符串的形式注册到配置文件中才能生效</span></span><br><span class="line"><span class="string">MIDDLEWARE = [</span></span><br><span class="line"><span class="string">    'django.middleware.security.SecurityMiddleware',</span></span><br><span class="line"><span class="string">    'django.contrib.sessions.middleware.SessionMiddleware',</span></span><br><span class="line"><span class="string">    'django.middleware.common.CommonMiddleware',</span></span><br><span class="line"><span class="string">    'django.middleware.csrf.CsrfViewMiddleware',</span></span><br><span class="line"><span class="string">    'django.contrib.auth.middleware.AuthenticationMiddleware',</span></span><br><span class="line"><span class="string">    'django.contrib.messages.middleware.MessageMiddleware',</span></span><br><span class="line"><span class="string">    'django.middleware.clickjacking.XFrameOptionsMiddleware',</span></span><br><span class="line"><span class="string">    '你自己写的中间件的路径1',</span></span><br><span class="line"><span class="string">    '你自己写的中间件的路径2',</span></span><br><span class="line"><span class="string">    '你自己写的中间件的路径3',</span></span><br><span class="line"><span class="string">]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">1.必须掌握</span></span><br><span class="line"><span class="string">		process_request </span></span><br><span class="line"><span class="string">			1.请求来的时候需要经过每一个中间件里面的process_request方法</span></span><br><span class="line"><span class="string">			结果的顺序是按照配置文件中注册的中间件从上往下的顺序依次执行</span></span><br><span class="line"><span class="string">			2.如果中间件里面没有定义该方法，那么直接跳过执行下一个中间件</span></span><br><span class="line"><span class="string">			3.如果该方法返回了HttpResponse对象，那么请求将不再继续往后执行</span></span><br><span class="line"><span class="string">			而是直接原路返回(校验失败不允许访问...)</span></span><br><span class="line"><span class="string">			process_request方法就是用来做全局相关的所有限制功能</span></span><br><span class="line"><span class="string">			</span></span><br><span class="line"><span class="string">		process_response</span></span><br><span class="line"><span class="string">			1.响应走的时候需要结果每一个中间件里面的process_response方法</span></span><br><span class="line"><span class="string">			该方法有两个额外的参数request,response</span></span><br><span class="line"><span class="string">			2.该方法必须返回一个HttpResponse对象</span></span><br><span class="line"><span class="string">				1.默认返回的就是形参response</span></span><br><span class="line"><span class="string">				2.你也可以自己返回自己的</span></span><br><span class="line"><span class="string">			3.顺序是按照配置文件中注册了的中间件从下往上依次经过</span></span><br><span class="line"><span class="string">				如果你没有定义的话 直接跳过执行下一个</span></span><br><span class="line"><span class="string">		</span></span><br><span class="line"><span class="string">		研究如果在第一个process_request方法就已经返回了HttpResponse对象，那么响应走的时候是经过所有的中间件里面的process_response还是有其他情况</span></span><br><span class="line"><span class="string">		是其他情况</span></span><br><span class="line"><span class="string">			就是会直接走同级别的process_reponse返回</span></span><br><span class="line"><span class="string">		</span></span><br><span class="line"><span class="string">		flask框架也有一个中间件但是它的规律</span></span><br><span class="line"><span class="string">			只要返回数据了就必须经过所有中间件里面的类似于process_reponse方法</span></span><br><span class="line"><span class="string">			</span></span><br><span class="line"><span class="string">			</span></span><br><span class="line"><span class="string">2.了解即可</span></span><br><span class="line"><span class="string">		process_view</span></span><br><span class="line"><span class="string">			路由匹配成功之后执行视图函数之前，会自动执行中间件里面的该放法</span></span><br><span class="line"><span class="string">			顺序是按照配置文件中注册的中间件从上往下的顺序依次执行</span></span><br><span class="line"><span class="string">			</span></span><br><span class="line"><span class="string">		process_template_response</span></span><br><span class="line"><span class="string">			返回的HttpResponse对象有render属性的时候才会触发</span></span><br><span class="line"><span class="string">			顺序是按照配置文件中注册了的中间件从下往上依次经过</span></span><br><span class="line"><span class="string">			</span></span><br><span class="line"><span class="string">		process_exception</span></span><br><span class="line"><span class="string">			当视图函数中出现异常的情况下触发</span></span><br><span class="line"><span class="string">			顺序是按照配置文件中注册了的中间件从下往上依次经过</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<h3 id="csrf跨站请求伪造"><a href="#csrf跨站请求伪造" class="headerlink" title="csrf跨站请求伪造"></a>csrf跨站请求伪造</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">钓鱼网站</span></span><br><span class="line"><span class="string">	我搭建一个跟正规网站一模一样的界面(中国银行)</span></span><br><span class="line"><span class="string">	用户不小心进入到了我们的网站，用户给某个人打钱</span></span><br><span class="line"><span class="string">	打钱的操作确确实实是提交给了中国银行的系统，用户的钱也确确实实减少了</span></span><br><span class="line"><span class="string">	但是唯一不同的时候打钱的账户不是用户想要打的账户变成了一个莫名其妙的账户</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">大学英语四六级</span></span><br><span class="line"><span class="string">	考之前需要学生自己网站登陆缴费</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">内部本质</span></span><br><span class="line"><span class="string">	我们在钓鱼网站的页面 针对对方账户 只给用户提供一个没有name属性的普通input框</span></span><br><span class="line"><span class="string">	然后我们在内部隐藏一个已经写好name和value的input框</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">如何规避上述问题</span></span><br><span class="line"><span class="string">	csrf跨站请求伪造校验</span></span><br><span class="line"><span class="string">		网站在给用户返回一个具有提交数据功能页面的时候会给这个页面加一个唯一标识</span></span><br><span class="line"><span class="string">		当这个页面朝后端发送post请求的时候 我的后端会先校验唯一标识，如果唯一标识不对直接拒绝(403 forbbiden)如果成功则正常执行	</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<h3 id="如何符合校验"><a href="#如何符合校验" class="headerlink" title="如何符合校验"></a>如何符合校验</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># form表单如何符合校验</span></span><br><span class="line">&lt;form action=<span class="string">""</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">    &#123;% csrf_token %&#125;</span><br><span class="line">    &lt;p&gt;username:&lt;input type="text" name="username"&gt;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;target_user:&lt;input type="text" name="target_user"&gt;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;money:&lt;input type="text" name="money"&gt;&lt;/p&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># ajax如何符合校验</span></span><br><span class="line">// 第一种 利用标签查找获取页面上的随机字符串</span><br><span class="line">&#123;<span class="comment">#data:&#123;"username":'jason','csrfmiddlewaretoken':$('[name=csrfmiddlewaretoken]').val()&#125;,#&#125;</span></span><br><span class="line">// 第二种 利用模版语法提供的快捷书写</span><br><span class="line">&#123;<span class="comment">#data:&#123;"username":'jason','csrfmiddlewaretoken':'&#123;&#123; csrf_token &#125;&#125;'&#125;,#&#125;</span></span><br><span class="line">// 第三种 通用方式直接拷贝js代码并应用到自己的html页面上即可</span><br><span class="line">data:&#123;<span class="string">"username"</span>:<span class="string">'jason'</span>&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">function getCookie(name) &#123;</span><br><span class="line">    var cookieValue = null;</span><br><span class="line">    <span class="keyword">if</span> (document.cookie &amp;&amp; document.cookie !== <span class="string">''</span>) &#123;</span><br><span class="line">        var cookies = document.cookie.split(<span class="string">';'</span>);</span><br><span class="line">        <span class="keyword">for</span> (var i = <span class="number">0</span>; i &lt; cookies.length; i++) &#123;</span><br><span class="line">            var cookie = jQuery.trim(cookies[i]);</span><br><span class="line">            // Does this cookie string begin with the name we want?</span><br><span class="line">            <span class="keyword">if</span> (cookie.substring(<span class="number">0</span>, name.length + <span class="number">1</span>) === (name + <span class="string">'='</span>)) &#123;</span><br><span class="line">                cookieValue = decodeURIComponent(cookie.substring(name.length + <span class="number">1</span>));</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cookieValue;</span><br><span class="line">&#125;</span><br><span class="line">var csrftoken = getCookie(<span class="string">'csrftoken'</span>);</span><br><span class="line"></span><br><span class="line">function csrfSafeMethod(method) &#123;</span><br><span class="line">  // these HTTP methods do <span class="keyword">not</span> require CSRF protection</span><br><span class="line">  <span class="keyword">return</span> (/^(GET|HEAD|OPTIONS|TRACE)$/.test(method));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$.ajaxSetup(&#123;</span><br><span class="line">  beforeSend: function (xhr, settings) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!csrfSafeMethod(settings.type) &amp;&amp; !this.crossDomain) &#123;</span><br><span class="line">      xhr.setRequestHeader(<span class="string">"X-CSRFToken"</span>, csrftoken);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="csrf相关装饰器"><a href="#csrf相关装饰器" class="headerlink" title="csrf相关装饰器"></a>csrf相关装饰器</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">1.网站整体都不校验csrf，就单单几个视图函数需要校验</span></span><br><span class="line"><span class="string">2.网站整体都校验csrf，就单单几个视图函数不校验</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">from</span> django.views.decorators.csrf <span class="keyword">import</span> csrf_protect,csrf_exempt</span><br><span class="line"><span class="keyword">from</span> django.utils.decorators <span class="keyword">import</span> method_decorator</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">csrf_protect  需要校验</span></span><br><span class="line"><span class="string">    针对csrf_protect符合我们之前所学的装饰器的三种玩法</span></span><br><span class="line"><span class="string">csrf_exempt   忽视校验</span></span><br><span class="line"><span class="string">    针对csrf_exempt只能给dispatch方法加才有效</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment"># @csrf_exempt</span></span><br><span class="line"><span class="comment"># @csrf_protect</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">transfer</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'POST'</span>:</span><br><span class="line">        username = request.POST.get(<span class="string">'username'</span>)</span><br><span class="line">        target_user = request.POST.get(<span class="string">'target_user'</span>)</span><br><span class="line">        money = request.POST.get(<span class="string">'money'</span>)</span><br><span class="line">        print(<span class="string">'%s给%s转了%s元'</span>%(username,target_user,money))</span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">'transfer.html'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.views <span class="keyword">import</span> View</span><br><span class="line"></span><br><span class="line"><span class="comment"># @method_decorator(csrf_protect,name='post')  # 针对csrf_protect 第二种方式可以</span></span><br><span class="line"><span class="comment"># @method_decorator(csrf_exempt,name='post')  # 针对csrf_exempt 第二种方式不可以</span></span><br><span class="line"><span class="meta">@method_decorator(csrf_exempt,name='dispatch')</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyCsrfToken</span><span class="params">(View)</span>:</span></span><br><span class="line">    <span class="comment"># @method_decorator(csrf_protect)  # 针对csrf_protect 第三种方式可以</span></span><br><span class="line">    <span class="comment"># @method_decorator(csrf_exempt)  # 针对csrf_exempt 第三种方式可以</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dispatch</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> super(MyCsrfToken, self).dispatch(request,*args,**kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self,request)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">'get'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># @method_decorator(csrf_protect)  # 针对csrf_protect 第一种方式可以</span></span><br><span class="line">    <span class="comment"># @method_decorator(csrf_exempt)  # 针对csrf_exempt 第一种方式不可以</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self,request)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">'post'</span>)</span><br></pre></td></tr></table></figure>

<h3 id="补充知识点"><a href="#补充知识点" class="headerlink" title="补充知识点"></a>补充知识点</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 模块:importlib</span></span><br><span class="line"><span class="keyword">import</span> importlib</span><br><span class="line">res = <span class="string">'myfile.b'</span></span><br><span class="line">ret = importlib.import_module(res)  <span class="comment"># from myfile import b</span></span><br><span class="line"><span class="comment"># 该方法最小只能到py文件名</span></span><br><span class="line">print(ret)</span><br></pre></td></tr></table></figure>

<h3 id="重要思想"><a href="#重要思想" class="headerlink" title="重要思想"></a>重要思想</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> settings</span><br><span class="line"><span class="keyword">import</span> importlib</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_all</span><span class="params">(content)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> path_str <span class="keyword">in</span> settings.NOTIFY_LIST:  <span class="comment">#'notify.email.Email'</span></span><br><span class="line">        module_path,class_name = path_str.rsplit(<span class="string">'.'</span>,maxsplit=<span class="number">1</span>)</span><br><span class="line">        <span class="comment"># module_path = 'notify.email'  class_name = 'Email'</span></span><br><span class="line">        <span class="comment"># 1 利用字符串导入模块</span></span><br><span class="line">        module = importlib.import_module(module_path)  <span class="comment"># from notify import email</span></span><br><span class="line">        <span class="comment"># 2 利用反射获取类名</span></span><br><span class="line">        cls = getattr(module,class_name)  <span class="comment"># Email、QQ、Wechat</span></span><br><span class="line">        <span class="comment"># 3 生成类的对象</span></span><br><span class="line">        obj = cls()</span><br><span class="line">        <span class="comment"># 4 利用鸭子类型直接调用send方法</span></span><br><span class="line">        obj.send(content)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>django框架</tag>
      </tags>
  </entry>
  <entry>
    <title>[auth模块]</title>
    <url>/2019/09/04/auth%E6%A8%A1%E5%9D%97/</url>
    <content><![CDATA[<h3 id="Auth模块"><a href="#Auth模块" class="headerlink" title="Auth模块"></a>Auth模块</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">其实我们在创建好一个django项目之后直接执行数据库迁移命令会自动生成很多表</span></span><br><span class="line"><span class="string">	django_session</span></span><br><span class="line"><span class="string">	auth_user</span></span><br><span class="line"><span class="string">django在启动之后就可以直接访问admin路由，需要输入用户名和密码，数据参考的就是auth_user表,并且还必须是管理员用户才能进入</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">创建超级用户(管理员)</span></span><br><span class="line"><span class="string">	python3 manage.py createsuperuser</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">依赖于auth_user表完成用户相关的所有功能</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<h3 id="方法总结"><a href="#方法总结" class="headerlink" title="方法总结"></a>方法总结</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1.比对用户名和密码是否正确</span></span><br><span class="line">user_obj = auth.authenticate(request,username=username,password=password)</span><br><span class="line"><span class="comment"># 括号内必须同时传入用户名和密码</span></span><br><span class="line">print(user_obj)  <span class="comment"># 用户对象  jason   数据不符合则返回None</span></span><br><span class="line">print(user_obj.username)  <span class="comment"># jason</span></span><br><span class="line">print(user_obj.password)  <span class="comment"># 密文</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.保存用户状态</span></span><br><span class="line">auth.login(request,user_obj)  <span class="comment"># 类似于request.session[key] = user_obj</span></span><br><span class="line"><span class="comment"># 主要执行了该方法 你就可以在任何地方通过request.user获取到当前登陆的用户对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.判断当前用户是否登陆</span></span><br><span class="line">request.user.is_authenticated()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.获取当前登陆用户</span></span><br><span class="line">request.user</span><br><span class="line">用户不存在返回AnonmousUser匿名用户</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5.校验用户是否登陆装饰器</span></span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.decorators <span class="keyword">import</span> login_required</span><br><span class="line"><span class="comment"># 局部配置</span></span><br><span class="line"><span class="meta">@login_required(login_url='/login/') </span></span><br><span class="line"><span class="comment"># 全局配置</span></span><br><span class="line">LOGIN_URL = <span class="string">'/login/'</span></span><br><span class="line">	1.如果局部和全局都有 该听谁的?</span><br><span class="line">    局部 &gt; 全局</span><br><span class="line">	2.局部和全局哪个好呢?</span><br><span class="line">    全局的好处在于无需重复写代码 但是跳转的页面却很单一</span><br><span class="line">    局部的好处在于不同的视图函数在用户没有登陆的情况下可以跳转到不同的页面</span><br><span class="line"></span><br><span class="line"><span class="comment"># 6.比对原密码</span></span><br><span class="line">request.user.check_password(old_password)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 7.修改密码</span></span><br><span class="line">request.user.set_password(new_password)  <span class="comment"># 仅仅是在修改对象的属性</span></span><br><span class="line">request.user.save()  <span class="comment"># 这一步才是真正的操作数据库</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 8.注销</span></span><br><span class="line">auth.logout(request) </span><br><span class="line"></span><br><span class="line"><span class="comment"># 9.注册</span></span><br><span class="line"><span class="comment"># 操作auth_user表写入数据</span></span><br><span class="line">User.objects.create(username=username,password=password)  <span class="comment"># 写入数据  不能用create 密码没有加密处理</span></span><br><span class="line"><span class="comment"># 创建普通用户</span></span><br><span class="line">User.objects.create_user(username=username,password=password)</span><br><span class="line"><span class="comment"># 创建超级用户(了解):使用代码创建超级用户 邮箱是必填的 而用命令创建则可以不填</span></span><br><span class="line">User.objects.create_superuser(username=username,email=<span class="string">'123@qq.com'</span>,password=password)</span><br></pre></td></tr></table></figure>

<h3 id="如何扩展auth-user表"><a href="#如何扩展auth-user表" class="headerlink" title="如何扩展auth_user表"></a>如何扩展auth_user表</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> User,AbstractUser</span><br><span class="line"><span class="comment"># Create your models here.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第一种:一对一关系  不推荐</span></span><br><span class="line"><span class="comment"># class UserDetail(models.Model):</span></span><br><span class="line"><span class="comment">#     phone = models.BigIntegerField()</span></span><br><span class="line"><span class="comment">#     user = models.OneToOneField(to='User')</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二种:面向对象的继承</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserInfo</span><span class="params">(AbstractUser)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    如果继承了AbstractUser</span></span><br><span class="line"><span class="string">    那么在执行数据库迁移命令的时候auth_user表就不会再创建出来了</span></span><br><span class="line"><span class="string">    而UserInfo表中会出现auth_user所有的字段外加自己扩展的字段</span></span><br><span class="line"><span class="string">    这么做的好处在于你能够直接点击你自己的表更加快速的完成操作及扩展</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    前提:</span></span><br><span class="line"><span class="string">        1.在继承之前没有执行过数据库迁移命令</span></span><br><span class="line"><span class="string">            auth_user没有被创建，如果当前库已经创建了那么你就重新换一个库</span></span><br><span class="line"><span class="string">        2.继承的类里面不要覆盖AbstractUser里面的字段名</span></span><br><span class="line"><span class="string">            表里面有的字段都不要动，只扩展额外字段即可</span></span><br><span class="line"><span class="string">        3.需要在配置文件中告诉django你要用UserInfo替代auth_user(******)</span></span><br><span class="line"><span class="string">            AUTH_USER_MODEL = 'app01.UserInfo'</span></span><br><span class="line"><span class="string">                                '应用名.表名'</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    phone = models.BigIntegerField()</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">你如果自己写表替代了auth_user那么</span></span><br><span class="line"><span class="string">auth模块的功能还是照常使用，参考的表页由原来的auth_user变成了UserInfo</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">我们bbs作业用户表就是用的上述方式</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<h3 id="项目开发流程"><a href="#项目开发流程" class="headerlink" title="项目开发流程"></a>项目开发流程</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1.需求分析</span></span><br><span class="line">	架构师+产品经理+开发者组长</span><br><span class="line">  	在跟客户谈需求之前，会大致先了解客户的需求，然后自己先设计一套比较好写方案</span><br><span class="line">  	在跟客户沟通交流中引导客户往我们之前想好的方案上面靠</span><br><span class="line">  	形成一个初步的方案</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 2.项目设计</span></span><br><span class="line">	架构师干的活</span><br><span class="line">  	编程语言选择</span><br><span class="line">    框架选择</span><br><span class="line">    数据库选择</span><br><span class="line">    	主库:MySQL,postgreSQL,...</span><br><span class="line">      缓存数据库:redis、mongodb、memcache...</span><br><span class="line">    功能划分</span><br><span class="line">    	将整个项目划分成几个功能模块</span><br><span class="line">    找组长开会</span><br><span class="line">    	给每个组分发任务</span><br><span class="line">   	项目报价</span><br><span class="line">    	技术这块需要多少人，多少天(一个程序员一天<span class="number">1500</span>～<span class="number">2000</span>计算(大致))</span><br><span class="line">      产品经理公司层面 再加点钱</span><br><span class="line">      	公司财务签字确认</span><br><span class="line">        公司老板签字确认</span><br><span class="line">      产品经理去跟客户沟通</span><br><span class="line">     	</span><br><span class="line">      后续需要加功能 继续加钱</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.分组开发</span></span><br><span class="line">	组长找组员开会，安排各自功能模块</span><br><span class="line">  我们其实就是在架构师设计好的框架里面填写代码而已(码畜)</span><br><span class="line">  </span><br><span class="line">  我们在写代码的时候 写完需要自己先测试是否有bug</span><br><span class="line">  如果是一些显而易见的bug，你没有避免而是直接交给了测试部门测出来</span><br><span class="line">  那你可能就需要被扣绩效了(一定要跟测试小姐姐搞好关系)</span><br><span class="line">  	薪资组成	<span class="number">15</span>K(合理合规合法的避税)</span><br><span class="line">    	底薪	<span class="number">10</span>K</span><br><span class="line">      绩效	<span class="number">3</span>K</span><br><span class="line">      岗位津贴 <span class="number">1</span>K</span><br><span class="line">      生活补贴 <span class="number">1</span>K</span><br><span class="line">      </span><br><span class="line"><span class="comment"># 4.测试</span></span><br><span class="line">	测试部门测试你的代码</span><br><span class="line">  	压力测试</span><br><span class="line">    ...</span><br><span class="line"><span class="comment"># 5.交付上线</span></span><br><span class="line">	<span class="number">1.</span>交给对方的运维人员</span><br><span class="line">  <span class="number">2.</span>直接上线到我们的服务器上 收取维护费用</span><br><span class="line">  <span class="number">3.</span>其他...</span><br></pre></td></tr></table></figure>

<h3 id="表设计"><a href="#表设计" class="headerlink" title="表设计"></a>表设计</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">一个项目中最最最重要的不是业务逻辑的书写</span></span><br><span class="line"><span class="string">而是前期的表设计，只要将表设计好了，后续的功能书写才会一帆风顺</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">bbs表设计</span></span><br><span class="line"><span class="string">	1.用户表</span></span><br><span class="line"><span class="string">		继承AbstractUser</span></span><br><span class="line"><span class="string">		扩展</span></span><br><span class="line"><span class="string">			phone 电话号码</span></span><br><span class="line"><span class="string">			avatar  用户头像</span></span><br><span class="line"><span class="string">			create_time  创建时间</span></span><br><span class="line"><span class="string">		</span></span><br><span class="line"><span class="string">		外键字段</span></span><br><span class="line"><span class="string">			一对一个人站点表</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">	2.个人站点表</span></span><br><span class="line"><span class="string">		site_name 站点名称</span></span><br><span class="line"><span class="string">		site_title 	 站点标题</span></span><br><span class="line"><span class="string">		site_theme	站点样式</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">	3.文章标签表</span></span><br><span class="line"><span class="string">		name		标签名</span></span><br><span class="line"><span class="string">		</span></span><br><span class="line"><span class="string">		外键字段</span></span><br><span class="line"><span class="string">			一对多个人站点</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">	4.文章分类表</span></span><br><span class="line"><span class="string">		name		分类名</span></span><br><span class="line"><span class="string">		</span></span><br><span class="line"><span class="string">		外键字段</span></span><br><span class="line"><span class="string">			一对多个人站点</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">	5.文章表</span></span><br><span class="line"><span class="string">		title	文章标题</span></span><br><span class="line"><span class="string">		desc	文章简介</span></span><br><span class="line"><span class="string">		content	文章内容</span></span><br><span class="line"><span class="string">		create_time 发布时间</span></span><br><span class="line"><span class="string">		</span></span><br><span class="line"><span class="string">		数据库字段设计优化(******)</span></span><br><span class="line"><span class="string">			(虽然下述的三个字段可以从其他表里面跨表查询计算得出，但是频繁跨表效率)</span></span><br><span class="line"><span class="string">		up_num					点赞数</span></span><br><span class="line"><span class="string">		down_num				点踩数</span></span><br><span class="line"><span class="string">		comment_num 		评论数</span></span><br><span class="line"><span class="string">		</span></span><br><span class="line"><span class="string">		外键字段</span></span><br><span class="line"><span class="string">			一对多个人站点</span></span><br><span class="line"><span class="string">			多对多文章标签</span></span><br><span class="line"><span class="string">			一对多文章分类</span></span><br><span class="line"><span class="string">			</span></span><br><span class="line"><span class="string">		</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">	6.点赞点踩表</span></span><br><span class="line"><span class="string">		记录哪个用户给哪篇文章点了赞还是点了踩</span></span><br><span class="line"><span class="string">		user						ForeignKey(to="User")				</span></span><br><span class="line"><span class="string">		article					ForeignKey(to="Article")	</span></span><br><span class="line"><span class="string">		is_up						BooleanField()</span></span><br><span class="line"><span class="string">		</span></span><br><span class="line"><span class="string">		1				1				1</span></span><br><span class="line"><span class="string">		1				2				1</span></span><br><span class="line"><span class="string">		1				3				0</span></span><br><span class="line"><span class="string">		2				1				1</span></span><br><span class="line"><span class="string">		</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">	7.文章评论表</span></span><br><span class="line"><span class="string">		记录哪个用户给哪篇文章写了哪些评论内容</span></span><br><span class="line"><span class="string">		user						ForeignKey(to="User")				</span></span><br><span class="line"><span class="string">		article					ForeignKey(to="Article")</span></span><br><span class="line"><span class="string">		content					CharField()</span></span><br><span class="line"><span class="string">		comment_time		DateField()</span></span><br><span class="line"><span class="string">		# 自关联</span></span><br><span class="line"><span class="string">		parent					ForeignKey(to="Comment",null=True)		</span></span><br><span class="line"><span class="string">		# ORM专门提供的自关联写法	</span></span><br><span class="line"><span class="string">		parent					ForeignKey(to="self",null=True)</span></span><br><span class="line"><span class="string">		</span></span><br><span class="line"><span class="string">	id	user_id			article_id				parent_id</span></span><br><span class="line"><span class="string">	1		 1						1										</span></span><br><span class="line"><span class="string">	2		 2						1										1					</span></span><br><span class="line"><span class="string">		</span></span><br><span class="line"><span class="string">根评论子评论的概念</span></span><br><span class="line"><span class="string">	根评论就是直接评论当前发布的内容的</span></span><br><span class="line"><span class="string">		</span></span><br><span class="line"><span class="string">	子评论是评论别人的评论</span></span><br><span class="line"><span class="string">		1.PHP是世界上最牛逼的语言</span></span><br><span class="line"><span class="string">			1.1 python才是最牛逼的</span></span><br><span class="line"><span class="string">				1.2 java才是</span></span><br><span class="line"><span class="string">		</span></span><br><span class="line"><span class="string">	根评论与子评论是一对多的关系</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">		</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>django框架</tag>
      </tags>
  </entry>
  <entry>
    <title>[mysql安装]</title>
    <url>/2019/10/09/mysql%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h1 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h1><h3 id="存储数据的演变过程"><a href="#存储数据的演变过程" class="headerlink" title="存储数据的演变过程"></a>存储数据的演变过程</h3><ul>
<li><p>随意的存到一个文件中、数据格式也是千差万别的完全取决于我们自己</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string"># 小李</span></span><br><span class="line"><span class="string">jason|123|NB</span></span><br><span class="line"><span class="string"># 小王</span></span><br><span class="line"><span class="string">egon-123-DBJ</span></span><br><span class="line"><span class="string"># 小红</span></span><br><span class="line"><span class="string">tank~123~hecha</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>软件开发目录规范</p>
<p>限制了存储数据的具体位置</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">bin</span></span><br><span class="line"><span class="string">conf</span></span><br><span class="line"><span class="string">core</span></span><br><span class="line"><span class="string">db</span></span><br><span class="line"><span class="string">lib</span></span><br><span class="line"><span class="string">readme</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<p>假设上述是一个单机游戏</p>
<p>那么每个人的游戏记录只会在自己的计算机上面保存</p>
<p>注册登录的账号也只能在自己的计算机上有效</p>
</li>
<li><p>如何将单机变成连网</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">将数据库保存部分全部统一起来</span></span><br><span class="line"><span class="string">所有人操作数据都来一个地方操作</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="数据库的本质"><a href="#数据库的本质" class="headerlink" title="数据库的本质"></a>数据库的本质</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">本质其实就是一款基于网络通信的应用程序</span></span><br><span class="line"><span class="string">那其实每个人都可以开发一款数据库软件 因为它仅仅就是一个基于网络通信的应用程序</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">也就意味着数据库软件其实有很多很多</span></span><br><span class="line"><span class="string">	关系型数据库</span></span><br><span class="line"><span class="string">		MySQL、oracle、db2、access、sql server</span></span><br><span class="line"><span class="string">	非关系型数据库</span></span><br><span class="line"><span class="string">		redis、mongodb、memcache</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment"># 关系型</span></span><br><span class="line">	<span class="number">1</span> 数据之间彼此有关系或者约束</span><br><span class="line">    	男生表和前女友表</span><br><span class="line">  <span class="number">2</span> 存储数据的表现形式通常是以表格存储	</span><br><span class="line">    	name     password		hobby</span><br><span class="line">        jason	  <span class="number">123</span>			学习</span><br><span class="line">        egon	  <span class="number">123</span>			女教练</span><br><span class="line">        tank	  <span class="number">123</span>			吃生蚝</span><br><span class="line">        每个字段还会有存储类型的限制</span><br><span class="line">        比如姓名只能存字符串...</span><br><span class="line"><span class="comment"># 非关系型</span></span><br><span class="line">	存储数据通常都是以k,v键值对的形式</span><br></pre></td></tr></table></figure>

<h3 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">任何基于网络通信的应用程序底层用的都是socket</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">-服务端</span></span><br><span class="line"><span class="string">	-基于socket通信</span></span><br><span class="line"><span class="string">	-收发消息</span></span><br><span class="line"><span class="string">	-SQL语句</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">-客户端</span></span><br><span class="line"><span class="string">	-基于socket通信</span></span><br><span class="line"><span class="string">	-收发消息</span></span><br><span class="line"><span class="string">	-SQL语句</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">MySQL不单单支持MySQL自己的客户端app还支持其他编程语言来充当客户端操作</span><br><span class="line">	如何解决语言沟通的障碍？</span><br><span class="line">    	<span class="comment"># 1 让服务端兼容所有的语言(一个人精通多国语言)</span></span><br><span class="line">        <span class="comment"># 2 采用统一的语言(SQL语句)</span></span><br></pre></td></tr></table></figure>

<h3 id="重要概念介绍"><a href="#重要概念介绍" class="headerlink" title="重要概念介绍"></a>重要概念介绍</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">库 			》》》			 文件夹</span></span><br><span class="line"><span class="string">表			》》》			 文件</span></span><br><span class="line"><span class="string">记录		   》》》			文件内一行行的数据</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    	name     password		hobby</span></span><br><span class="line"><span class="string">        jason	  123			学习</span></span><br><span class="line"><span class="string">        egon	  123			女教练</span></span><br><span class="line"><span class="string">        tank	  123			吃生蚝</span></span><br><span class="line"><span class="string">表头				表格的第一行字段</span></span><br><span class="line"><span class="string">字段				name、password、hobby</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<h3 id="MySQL的安装"><a href="#MySQL的安装" class="headerlink" title="MySQL的安装"></a>MySQL的安装</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">在IT界 一般都不会轻易的使用最新版本的软件，因为新版本可能会出现各种问题</span></span><br><span class="line"><span class="string">(你原本项目跑的好好的 非要画蛇添足更新版本 然后项目奔溃)</span></span><br><span class="line"><span class="string">小段子:</span></span><br><span class="line"><span class="string">	更新完没事 那么你还是一个普通员工</span></span><br><span class="line"><span class="string">	更新完出事 那么你就是一名"烈士"</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment"># MySQL有很多版本(5.6、5.7、8.0) 目前企业里面用的比较多的还是5.6左右</span></span><br></pre></td></tr></table></figure>

<p>参考网站:<a href="https://www.mysql.com/" target="_blank" rel="noopener">https://www.mysql.com/</a></p>
<p>下载5.6版本即可，如果你下载了其他版本问题也不大，因为sql语句是一样的学</p>
<p>按照教学方式下载，会将服务端和客户端一并下载到本地</p>
<p>为了学习方便我们将服务端和客户端都在本地启动，后期到了公司服务端会专门跑在一台服务器上，所有人基于网络连接服务端操作</p>
<h3 id="MySQL服务端与客户端"><a href="#MySQL服务端与客户端" class="headerlink" title="MySQL服务端与客户端"></a>MySQL服务端与客户端</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">服务端</span></span><br><span class="line"><span class="string">mysqld.exe</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">客户端</span></span><br><span class="line"><span class="string">mysql.exe</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<p><strong>注意</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">在前期配置MySQL的时候 cmd终端尽量以管理员的身份运行</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">windows+r 输入cmd  进入的是普通用户终端 有一些命令是无法执行的</span></span><br><span class="line"><span class="string">搜索cmd右键 以管理员身份运行</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><ul>
<li><p>先切换到mysqld所在的bin目录下，然后输入mysqld即可</p>
</li>
<li><p>保留原来的cmd窗口重新打开一个</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">常见软件的默认端口号</span></span><br><span class="line"><span class="string">	MySQL  3306</span></span><br><span class="line"><span class="string">	redis  6379</span></span><br><span class="line"><span class="string">	mongodb 27017</span></span><br><span class="line"><span class="string">	django  8000</span></span><br><span class="line"><span class="string">	flask   5000</span></span><br><span class="line"><span class="string">	...</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">MySQL第一次以管理员身份进入是没有密码的 直接回车即可</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">客户端连接服务端完整命令</span></span><br><span class="line"><span class="string">	mysql -h 127.0.0.1 -P 3306 -uroot -p</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="sql语句初识"><a href="#sql语句初识" class="headerlink" title="sql语句初识"></a>sql语句初识</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">1 MySQL中的sql语句是以分号作为结束的标志</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">2 基本命令</span></span><br><span class="line"><span class="string">	show databases;  查看所有的库名</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">3 连接服务端的命令可以简写</span></span><br><span class="line"><span class="string">	mysql -uroot -p</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">4 当你输入的命令不对 又不想让服务端执行并返回报错信息 可以用\c取消</span></span><br><span class="line"><span class="string">	错误命令  \c</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">5 客户端退出  退出命令加不加分号都可以执行</span></span><br><span class="line"><span class="string">	quit</span></span><br><span class="line"><span class="string">	exit</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">6 当你在连接服务端的时候 发现只输入mysql也能连接</span></span><br><span class="line"><span class="string">	但是你不是管理员身份 而只是一个游客模式</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<h3 id="环境变量配置及系统服务制作"><a href="#环境变量配置及系统服务制作" class="headerlink" title="环境变量配置及系统服务制作"></a>环境变量配置及系统服务制作</h3><p>小知识点补充</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">1 如何查看当前具体进程</span></span><br><span class="line"><span class="string">	tasklist</span></span><br><span class="line"><span class="string">	tasklist |findstr mysqld</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">2 如何杀死具体进程(只有在管理员cmd窗口下才能成功)</span></span><br><span class="line"><span class="string">	taskkill /F /PID PID号</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<p><strong>环境变量配置</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">每次启动mysqld需要先切到对应的文件路径下才能操作太多繁琐</span></span><br><span class="line"><span class="string">将mysqld所在的文件路径添加到系统环境变量中</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<p>还是繁琐 需要起两个cmd窗口 不好</p>
<p>将mysql服务端制作成系统服务(开机自启动)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">查看当前计算机的运行进程数</span></span><br><span class="line"><span class="string">	services.msc</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">将mysql制作成系统服务</span></span><br><span class="line"><span class="string">	mysqld --install</span></span><br><span class="line"><span class="string">移除mysql系统服务</span></span><br><span class="line"><span class="string">	mysqld --remove</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<h3 id="设置密码"><a href="#设置密码" class="headerlink" title="设置密码"></a>设置密码</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">mysqladmin -uroot -p原密码 password 新密码</span></span><br><span class="line"><span class="string">改命令直接在终端输入即可 无序进入客户端</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">mysqladmin -uroot -p123 password 123456</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<h3 id="破解密码"><a href="#破解密码" class="headerlink" title="破解密码"></a>破解密码</h3><p>出去玩了好几个月，回来返现密码忘了，死活进不去</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">你可以将mysql获取用户名和密码校验的功能看成是一个装饰器</span></span><br><span class="line"><span class="string">装饰在了客户端请求访问的功能上</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">我们如果将该装饰器移除 那么mysql服务端就不会校验用户名和密码了</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment"># 1 先关闭当前mysql服务端</span></span><br><span class="line"> 命令行的方式启动(让mysql跳过用户名密码验证功能)</span><br><span class="line"> mysqld --skip-grant-tables  </span><br><span class="line"><span class="comment"># 2 直接以无密码的方式连接</span></span><br><span class="line">	mysql -uroot -p   直接回车</span><br><span class="line"><span class="comment"># 3 修改当前用户的密码</span></span><br><span class="line">	update mysql.user set password=password(<span class="number">123456</span>) where 		user=<span class="string">'root'</span> <span class="keyword">and</span> host=<span class="string">'localhost'</span>;</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">真正存储用户表的密码字段 存储的肯定是密文 </span></span><br><span class="line"><span class="string">只有用户自己知道明文是什么 其他人都不知道 这样更加的安全</span></span><br><span class="line"><span class="string">密码比对也只能比对密文</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment"># 4 立刻将修改数据刷到硬盘</span></span><br><span class="line">	flush privileges;</span><br><span class="line"><span class="comment"># 5 关闭当前服务端 然后以正常校验授权表的形式启动</span></span><br></pre></td></tr></table></figure>

<h3 id="统一编码"><a href="#统一编码" class="headerlink" title="统一编码"></a>统一编码</h3><ul>
<li><p>mysql默认的配置文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">my-default.ini </span></span><br><span class="line"><span class="string">ini结尾的一般都是配置文件</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">程序启动会先加载配置文件中的配置之后才真正的启动</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">[mysqld]  <span class="comment"># 一旦服务端启动立刻加载下面的配置</span></span><br><span class="line">sql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES </span><br><span class="line">[mysql]  <span class="comment"># 一旦客户端启动立刻加载下面的配置</span></span><br><span class="line">...</span><br><span class="line">[client]  <span class="comment"># 其他客户端</span></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 需要你自己新建一个my.ini的配置文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证配置是否真的是自动加载</span></span><br><span class="line">[mysql]</span><br><span class="line">print(<span class="string">'hello world'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改配置文件后一定要重启服务才能生效</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 统一编码的配置 无需掌握 直接拷贝即可</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 偷懒 将管理员的用户名和密码也添加到配置文件中</span></span><br><span class="line">[mysqld]</span><br><span class="line">character-set-server=utf8</span><br><span class="line">collation-server=utf8_general_ci</span><br><span class="line">[client]</span><br><span class="line">default-character-set=utf8</span><br><span class="line">[mysql]</span><br><span class="line">user=<span class="string">"root"</span></span><br><span class="line">password=<span class="number">123456</span></span><br><span class="line">default-character-set=utf8</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="基本sql语句"><a href="#基本sql语句" class="headerlink" title="基本sql语句"></a>基本sql语句</h3><p>PS:大部分程序的业务逻辑其实都是增删改查</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">辛辛苦苦一个月 只为了一条sql语句(将自己账户的钱修改一下)</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<p><strong>针对库的增删改查(文件夹)</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 增</span></span><br><span class="line">create database db1;</span><br><span class="line">create database db2 charset=<span class="string">'gbk'</span>;</span><br><span class="line"><span class="comment"># 查</span></span><br><span class="line">show databases;  <span class="comment"># 查所有</span></span><br><span class="line">show create database db1;  <span class="comment"># 查单个</span></span><br><span class="line"><span class="comment"># 改</span></span><br><span class="line">alter database db2 charset=<span class="string">'utf8'</span>;</span><br><span class="line"><span class="comment"># 删</span></span><br><span class="line">drop database db2;</span><br></pre></td></tr></table></figure>

<p><strong>针对表的增删改查(文件)</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">在操作表(文件)的时候 需要指定所在的库(文件夹)</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment"># 查看当前所在的库的名字</span></span><br><span class="line">select database();</span><br><span class="line"><span class="comment"># 切换库</span></span><br><span class="line">use db1; </span><br><span class="line"></span><br><span class="line"><span class="comment"># 增</span></span><br><span class="line">create table t1(id int,name char(<span class="number">4</span>));</span><br><span class="line"><span class="comment"># 查</span></span><br><span class="line">show tables;  <span class="comment"># 查看当前库下面所有的表名</span></span><br><span class="line">show create table t1;</span><br><span class="line">describe t1;  <span class="comment"># 支持简写 desc t1;</span></span><br><span class="line"><span class="comment"># 改</span></span><br><span class="line">alter table t1 modify name char(<span class="number">16</span>);</span><br><span class="line"><span class="comment"># 删</span></span><br><span class="line">drop table t1;</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">create table db2.t1(id int);  也可以用绝对路径的形式操作不同的库</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<p><strong>针对数据的增删改查(一行行数据)</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">一定要先有库 有表 最后才能操作记录</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment"># 增</span></span><br><span class="line">insert into t1 values(<span class="number">1</span>,<span class="string">'jason'</span>);</span><br><span class="line">insert into t1 values(<span class="number">1</span>,<span class="string">'jason'</span>),(<span class="number">2</span>,<span class="string">'egon'</span>),(<span class="number">3</span>,<span class="string">'tank'</span>);</span><br><span class="line"><span class="comment"># 查</span></span><br><span class="line">select * <span class="keyword">from</span> t1;  <span class="comment"># 该命令当数据量特别大的时候不建议使用</span></span><br><span class="line">select name <span class="keyword">from</span> t1;</span><br><span class="line"><span class="comment"># 改</span></span><br><span class="line">update t1 set name=<span class="string">'DSB'</span> where id &gt; <span class="number">1</span>;</span><br><span class="line"><span class="comment"># 删</span></span><br><span class="line">delete <span class="keyword">from</span> t1 where id &gt; <span class="number">1</span>;</span><br><span class="line">delete <span class="keyword">from</span> t1 where name=<span class="string">'jason'</span>;</span><br><span class="line"><span class="comment"># 将表所有的数据清空</span></span><br><span class="line">delete <span class="keyword">from</span> t1;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>mysql数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>[存储引擎与数据类型]</title>
    <url>/2019/10/10/%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<h3 id="存储引擎"><a href="#存储引擎" class="headerlink" title="存储引擎"></a>存储引擎</h3><p>日常生活中文件格式有很多中，并且针对不同的文件格式会有对应不同存储方式和处理机制(txt,pdf,word,mp4…)</p>
<p>针对不同的数据应该有对应的不同的处理机制来存储</p>
<p>存储引擎就是不同的处理机制</p>
<p><strong>MySQL主要存储引擎</strong></p>
<ul>
<li><p>Innodb</p>
<p>是MySQL5.5版本及之后默认的存储引擎</p>
<p>存储数据更加的安全</p>
</li>
<li><p>myisam</p>
<p>是MySQL5.5版本之前默认的存储引擎</p>
<p>速度要比Innodb更快 但是我们更加注重的是数据的安全</p>
</li>
<li><p>memory</p>
<p>内存引擎(数据全部存放在内存中) 断电数据丢失</p>
</li>
<li><p>blackhole</p>
<p>无论存什么，都立刻消失(黑洞)</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string"># 查看所有的存储引擎</span></span><br><span class="line"><span class="string">show engines;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 不同的存储引擎在存储表的时候 异同点</span></span><br><span class="line"><span class="string">create table t1(id int) engine=innodb;</span></span><br><span class="line"><span class="string">create table t2(id int) engine=myisam;</span></span><br><span class="line"><span class="string">create table t3(id int) engine=blackhole;</span></span><br><span class="line"><span class="string">create table t4(id int) engine=memory;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 存数据</span></span><br><span class="line"><span class="string">insert into t1 values(1);</span></span><br><span class="line"><span class="string">insert into t2 values(1);</span></span><br><span class="line"><span class="string">insert into t3 values(1);</span></span><br><span class="line"><span class="string">insert into t4 values(1);</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<p><img src="/images/o_200513125145%E5%82%A8%E5%AD%98%E5%BC%95%E6%93%8E.png" alt="储存引擎"></p>
<h3 id="创建表的完整语法"><a href="#创建表的完整语法" class="headerlink" title="创建表的完整语法"></a>创建表的完整语法</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 语法</span></span><br><span class="line">create table 表名(</span><br><span class="line">	字段名<span class="number">1</span> 类型(宽度) 约束条件,</span><br><span class="line">    字段名<span class="number">2</span> 类型(宽度) 约束条件,</span><br><span class="line">    字段名<span class="number">3</span> 类型(宽度) 约束条件</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意</span></span><br><span class="line"><span class="number">1</span> 在同一张表中字段名不能重复</span><br><span class="line"><span class="number">2</span> 宽度和约束条件是可选的(可写可不写) 而字段名和字段类型是必须的</span><br><span class="line">	约束条件写的话 也支持写多个</span><br><span class="line">    字段名<span class="number">1</span> 类型(宽度) 约束条件<span class="number">1</span> 约束条件<span class="number">2.</span>..,</span><br><span class="line">	create table t5(id);  报错</span><br><span class="line"><span class="number">3</span> 最后一行不能有逗号</span><br><span class="line">	create table t6(</span><br><span class="line">        id int,</span><br><span class="line">        name char,</span><br><span class="line">    );   报错</span><br><span class="line"></span><br><span class="line"><span class="string">"""补充"""</span></span><br><span class="line"><span class="comment"># 宽度</span></span><br><span class="line">	一般情况下指的是对存储数据的限制</span><br><span class="line">	create table t7(name char);  默认宽度是<span class="number">1</span></span><br><span class="line">    insert into t7 values(<span class="string">'jason'</span>);</span><br><span class="line">    insert into t7 values(null);  关键字NULL</span><br><span class="line">    针对不同的版本会出现不同的效果</span><br><span class="line">    <span class="number">5.6</span>版本默认没有开启严格模式 规定只能存一个字符你给了多个字符，那么我会自动帮你截取</span><br><span class="line">    <span class="number">5.7</span>版本及以上或者开启了严格模式 那么规定只能存几个 就不能超，一旦超出范围立刻报错 Data too long <span class="keyword">for</span> ....</span><br><span class="line"><span class="string">"""严格模式到底开不开呢？"""</span></span><br><span class="line">MySQL5<span class="number">.7</span>之后的版本默认都是开启严格模式的</span><br><span class="line">使用数据库的准则:</span><br><span class="line">	能尽量少的让数据库干活就尽量少 不要给数据库增加额外的压力</span><br><span class="line"></span><br><span class="line"><span class="comment"># 约束条件 null  not null不能插入null</span></span><br><span class="line">create table t8(id int,name char <span class="keyword">not</span> null);</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">宽度和约束条件到底是什么关系</span></span><br><span class="line"><span class="string">	宽度是用来限制数据的存储</span></span><br><span class="line"><span class="string">	约束条件是在宽度的基础之上增加的额外的约束</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<h3 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h3><p>整型</p>
<ul>
<li><p>分类</p>
<p>TINYINT SMALLINT MEDUIMINT INT BIGINT</p>
</li>
<li><p>作用</p>
<p>存储年龄、等级、id、号码等等</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">以TINYINT </span></span><br><span class="line"><span class="string">	是否有符号</span></span><br><span class="line"><span class="string">		默认情况下是带符号的</span></span><br><span class="line"><span class="string">	超出会如何</span></span><br><span class="line"><span class="string">		超出限制只存最大可接受值</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">create table t9(id tinyint);</span><br><span class="line">insert into t9 values(<span class="number">-129</span>),(<span class="number">256</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment"># 约束条件之unsigned 无符号</span></span><br><span class="line">create table t10(id tinyint unsigned);</span><br><span class="line"></span><br><span class="line">create table t11(id int);</span><br><span class="line"><span class="comment"># int默认也是带符号的  </span></span><br><span class="line"><span class="comment"># 整型默认情况下都是带有符号的</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 针对整型 括号内的宽度到底是干嘛的</span></span><br><span class="line">create table t12(id int(<span class="number">8</span>));</span><br><span class="line">insert into t12 values(<span class="number">123456789</span>);</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">特例:只有整型括号里面的数字不是表示限制位数</span></span><br><span class="line"><span class="string">id int(8)</span></span><br><span class="line"><span class="string">	如果数字没有超出8位 那么默认用空格填充至8位</span></span><br><span class="line"><span class="string">	如果数字超出了8位 那么有几位就存几位(但是还是要遵守最大范围)</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">create table t13(id int(<span class="number">8</span>) unsigned zerofill);</span><br><span class="line"><span class="comment"># 用0填充至8位</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 总结:</span></span><br><span class="line">针对整型字段 括号内无需指定宽度 因为它默认的宽度以及足够显示所有的数据了</span><br></pre></td></tr></table></figure>

<h3 id="严格模式"><a href="#严格模式" class="headerlink" title="严格模式"></a>严格模式</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 如何查看严格模式</span></span><br><span class="line">show variables like <span class="string">"%mode"</span>;</span><br><span class="line"></span><br><span class="line">模糊匹配/查询</span><br><span class="line">	关键字 like</span><br><span class="line">		%:匹配任意多个字符</span><br><span class="line">        _:匹配任意单个字符</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改严格模式</span></span><br><span class="line">	set session  只在当前窗口有效</span><br><span class="line">    set <span class="keyword">global</span>   全局有效</span><br><span class="line">    </span><br><span class="line">    set <span class="keyword">global</span> sql_mode = <span class="string">'STRICT_TRANS_TABLES'</span>;</span><br><span class="line">    </span><br><span class="line">    修改完之后 重新进入服务端即可</span><br></pre></td></tr></table></figure>

<h3 id="浮点型"><a href="#浮点型" class="headerlink" title="浮点型"></a>浮点型</h3><ul>
<li><p>分类</p>
<p>FLOAT、DOUBLE、DECIMAL</p>
</li>
<li><p>作用</p>
<p>身高、体重、薪资</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 存储限制</span></span><br><span class="line">float(<span class="number">255</span>,<span class="number">30</span>)  <span class="comment"># 总共255位 小数部分占30位</span></span><br><span class="line">double(<span class="number">255</span>,<span class="number">30</span>)  <span class="comment"># 总共255位 小数部分占30位</span></span><br><span class="line">decimal(<span class="number">65</span>,<span class="number">30</span>)  <span class="comment"># 总共65位 小数部分占30位</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 精确度验证</span></span><br><span class="line">create table t15(id float(<span class="number">255</span>,<span class="number">30</span>));</span><br><span class="line">create table t16(id double(<span class="number">255</span>,<span class="number">30</span>));</span><br><span class="line">create table t17(id decimal(<span class="number">65</span>,<span class="number">30</span>));</span><br><span class="line"><span class="string">"""你们在前期不要给我用反向键 所有的命令全部手敲！！！增加熟练度"""</span></span><br><span class="line"></span><br><span class="line">insert into t15 values(<span class="number">1.111111111111111111111111111111</span>);</span><br><span class="line">insert into t16 values(<span class="number">1.111111111111111111111111111111</span>);</span><br><span class="line">insert into t17 values(<span class="number">1.111111111111111111111111111111</span>);</span><br><span class="line"></span><br><span class="line">float &lt; double &lt; decimal</span><br><span class="line"><span class="comment"># 要结合实际应用场景 三者都能使用</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="字符类型"><a href="#字符类型" class="headerlink" title="字符类型"></a>字符类型</h3><ul>
<li><p>分类</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">char</span></span><br><span class="line"><span class="string">	定长</span></span><br><span class="line"><span class="string">	char(4)	 数据超过四个字符直接报错 不够四个字符空格补全</span></span><br><span class="line"><span class="string">varchar</span></span><br><span class="line"><span class="string">	变长</span></span><br><span class="line"><span class="string">	varchar(4)  数据超过四个字符直接报错 不够有几个存几个</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">create table t18(name char(<span class="number">4</span>));</span><br><span class="line">create table t19(name varchar(<span class="number">4</span>));</span><br><span class="line"></span><br><span class="line">insert into t18 values(<span class="string">'a'</span>);</span><br><span class="line">insert into t19 values(<span class="string">'a'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment"># 介绍一个小方法 char_length统计字段长度</span></span><br><span class="line">select char_length(name) <span class="keyword">from</span> t18;</span><br><span class="line">select char_length(name) <span class="keyword">from</span> t19;</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">首先可以肯定的是 char硬盘上存的绝对是真正的数据 带有空格的</span></span><br><span class="line"><span class="string">但是在显示的时候MySQL会自动将多余的空格剔除</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 再次修改sql_mode 让MySQL不要做自动剔除操作</span></span><br><span class="line">set <span class="keyword">global</span> sql_mode = <span class="string">'STRICT_TRANS_TABLES,PAD_CHAR_TO_FULL_LENGTH'</span>;</span><br></pre></td></tr></table></figure>

<h3 id="char与varchar对比"><a href="#char与varchar对比" class="headerlink" title="char与varchar对比"></a>char与varchar对比</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">char</span></span><br><span class="line"><span class="string">	缺点:浪费空间</span></span><br><span class="line"><span class="string">	优点:存取都很简单</span></span><br><span class="line"><span class="string">		直接按照固定的字符存取数据即可</span></span><br><span class="line"><span class="string">		jason egon alex wusir tank </span></span><br><span class="line"><span class="string">		存按照五个字符存 取也直接按照五个字符取</span></span><br><span class="line"><span class="string">		</span></span><br><span class="line"><span class="string">varchar</span></span><br><span class="line"><span class="string">	优点:节省空间</span></span><br><span class="line"><span class="string">	缺点:存取较为麻烦</span></span><br><span class="line"><span class="string">		1bytes+jason 1bytes+egon 1bytes+alex 1bytes+tank </span></span><br><span class="line"><span class="string">		</span></span><br><span class="line"><span class="string">		存的时候需要制作报头</span></span><br><span class="line"><span class="string">		取的时候也需要先读取报头 之后才能读取真实数据</span></span><br><span class="line"><span class="string">		</span></span><br><span class="line"><span class="string">以前基本上都是用的char 其实现在用varchar的也挺多</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">补充:</span><br><span class="line">    进来公司之后你完全不需要考虑字段类型和字段名</span><br><span class="line">    因为产品经理给你发的邮件上已经全部指明了</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="时间类型"><a href="#时间类型" class="headerlink" title="时间类型"></a>时间类型</h3><ul>
<li><p>分类</p>
<p>date:年月日 2020-5-4</p>
<p>datetime:年月日时分秒 2020-5-4 11:11:11</p>
<p>time:时分秒11:11:11</p>
<p>Year:2020</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">create table student(</span><br><span class="line">	id int,</span><br><span class="line">    name varchar(<span class="number">16</span>),</span><br><span class="line">    born_year year,</span><br><span class="line">    birth date,</span><br><span class="line">    study_time time,</span><br><span class="line">    reg_time datetime</span><br><span class="line">);</span><br><span class="line">insert into student values(<span class="number">1</span>,<span class="string">'egon'</span>,<span class="string">'1880'</span>,<span class="string">'1880-11-11'</span>,<span class="string">'11:11:11'</span>,<span class="string">'2020-11-11 11:11:11'</span>);</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="枚举与集合类型"><a href="#枚举与集合类型" class="headerlink" title="枚举与集合类型"></a>枚举与集合类型</h3><ul>
<li><p>分类</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">枚举(enum)  多选一</span></span><br><span class="line"><span class="string">集合(set)   多选多</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>具体使用</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">create table user(</span><br><span class="line">	id int,</span><br><span class="line">    name char(<span class="number">16</span>),</span><br><span class="line">    gender enum(<span class="string">'male'</span>,<span class="string">'female'</span>,<span class="string">'others'</span>)</span><br><span class="line">);</span><br><span class="line">insert into user values(<span class="number">1</span>,<span class="string">'jason'</span>,<span class="string">'male'</span>);  正常</span><br><span class="line">insert into user values(<span class="number">2</span>,<span class="string">'egon'</span>,<span class="string">'xxxxooo'</span>);  报错</span><br><span class="line"><span class="comment"># 枚举字段 后期在存数据的时候只能从枚举里面选择一个存储 </span></span><br><span class="line"></span><br><span class="line">create table teacher(</span><br><span class="line">	id int,</span><br><span class="line">    name char(<span class="number">16</span>),</span><br><span class="line">    gender enum(<span class="string">'male'</span>,<span class="string">'female'</span>,<span class="string">'others'</span>),</span><br><span class="line">    hobby set(<span class="string">'read'</span>,<span class="string">'DBJ'</span>,<span class="string">'hecha'</span>)</span><br><span class="line">);</span><br><span class="line">insert into teacher values(<span class="number">1</span>,<span class="string">'jason'</span>,<span class="string">'male'</span>,<span class="string">'read'</span>);  正常</span><br><span class="line">insert into teacher values(<span class="number">2</span>,<span class="string">'egon'</span>,<span class="string">'female'</span>,<span class="string">'DBJ,hecha'</span>);  正常</span><br><span class="line">insert into teacher values(<span class="number">3</span>,<span class="string">'tank'</span>,<span class="string">'others'</span>,<span class="string">'生蚝'</span>); 报错</span><br><span class="line"><span class="comment"># 集合可以只写一个  但是不能写没有列举的</span></span><br></pre></td></tr></table></figure>

<p><strong>总结</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">字段类型</span></span><br><span class="line"><span class="string">严格模式</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">约束条件</span></span><br><span class="line"><span class="string">	not null</span></span><br><span class="line"><span class="string">	zerofill</span></span><br><span class="line"><span class="string">	unsigned</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>mysql数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>[vue.js的快速入门使用]</title>
    <url>/2020/03/04/vue-js%E7%9A%84%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="1-vue-js的快速入门使用"><a href="#1-vue-js的快速入门使用" class="headerlink" title="1. vue.js的快速入门使用"></a>1. vue.js的快速入门使用</h1><h2 id="1-1-vue-js库的下载"><a href="#1-1-vue-js库的下载" class="headerlink" title="1.1 vue.js库的下载"></a>1.1 vue.js库的下载</h2><p>vue.js是目前前端web开发最流行的工具库，由尤雨溪在2014年2月发布的。</p>
<p>另外几个常见的工具库：react.js /angular.js/jQuery</p>
<p>官方网站：</p>
<p> 中文：<a href="https://cn.vuejs.org/" target="_blank" rel="noopener">https://cn.vuejs.org/</a></p>
<p> 英文：<a href="https://cn.vuejs.org/" target="_blank" rel="noopener">https://vuejs.org/</a></p>
<p>官方文档：<a href="https://cn.vuejs.org/v2/guide/" target="_blank" rel="noopener">https://cn.vuejs.org/v2/guide/</a></p>
<p>vue.js目前有1.x、2.x和3.x 版本，我们学习2.x版本的。</p>
<h2 id="1-2-vue-js库的基本使用"><a href="#1-2-vue-js库的基本使用" class="headerlink" title="1.2 vue.js库的基本使用"></a>1.2 vue.js库的基本使用</h2><p>在github下载：</p>
<p>在官网下载地址： <a href="https://cn.vuejs.org/v2/guide/installation.html" target="_blank" rel="noopener">https://cn.vuejs.org/v2/guide/installation.html</a></p>
<p>vue的引入类似于jQuery，开发中可以使用开发版本vue-x.x.x.js，产品上线要换成vue.min.js。</p>
<p>下图是github网站下载的vue.js目录</p>
<p><img src="/images/1544363032042.png" alt=""></p>
 
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="actionscript">      	<span class="comment">// vue.js的代码开始于一个Vue对象。所以每次操作数据都要声明Vue对象开始。</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el:<span class="string">'#app'</span>,   <span class="comment">// 设置当前vue对象要控制的标签范围。</span></span></span><br><span class="line"><span class="actionscript">            data:&#123;  <span class="comment">// data是将要展示到HTML标签元素中的数据。</span></span></span><br><span class="line"><span class="actionscript">              message: <span class="string">'hello world!'</span>,</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &#123;&#123; message &#125;&#125; 表示把vue对象里面data属性中的对应数据输出到页面中 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 在双标签中显示数据要通过&#123;&#123;  &#125;&#125;来完成 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

 
总结：

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">1. vue的使用要从创建Vue对象开始</span><br><span class="line">   var vm = new Vue();</span><br><span class="line">   </span><br><span class="line">2. 创建vue对象的时候，需要传递参数，是json对象，json对象对象必须至少有两个属性成员</span><br><span class="line">   var vm = new Vue(&#123;</span><br><span class="line">         el:"#app",</span><br><span class="line">	 	 data: &#123;</span><br><span class="line">             数据变量:"变量值",</span><br><span class="line">             数据变量:"变量值",</span><br><span class="line">             数据变量:"变量值",</span><br><span class="line">     	 &#125;,</span><br><span class="line">   &#125;);</span><br><span class="line">   </span><br><span class="line">   el:设置vue可以操作的html内容范围，值一般就是css的id选择器。</span><br><span class="line">   data: 保存vue.js中要显示到html页面的数据。</span><br><span class="line">   </span><br><span class="line">3. vue.js要控制器的内容范围，必须先通过id来设置。</span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h2 id="1-3-vue-js的M-V-VM思想"><a href="#1-3-vue-js的M-V-VM思想" class="headerlink" title="1.3 vue.js的M-V-VM思想"></a>1.3 vue.js的M-V-VM思想</h2><p>MVVM 是Model-View-ViewModel 的缩写，它是一种基于前端开发的架构模式。</p>
<p><code>Model</code> 指代的就是vue对象的data属性里面的数据。这里的数据要显示到页面中。</p>
<p><code>View</code> 指代的就是vue中数据要显示的HTML页面，在vue中，也称之为“视图模板” 。</p>
<p><code>ViewModel</code> 指代的是vue.js中我们编写代码时的vm对象了，它是vue.js的核心，负责连接 View 和 Model，保证视图和数据的一致性，所以前面代码中，data里面的数据被显示中p标签中就是vm对象自动完成的。</p>
<p><img src="/images/201105031754285061.png" alt=""></p>
<p>编写代码，让我们更加清晰的了解MVVM：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/vue.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 创建vm对象</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el: <span class="string">"#app"</span>,</span></span><br><span class="line">            data: &#123;</span><br><span class="line"><span class="actionscript">                name:<span class="string">"大标题"</span>,</span></span><br><span class="line">                age:16,</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 在双标签中显示数据要通过&#123;&#123;  &#125;&#125;来完成 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;age&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 在表单输入框中显示数据要使用v-model来完成，模板语法的时候，我们会详细学习 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"name"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在浏览器中可以在 console.log通过 vm对象可以直接访问el和data属性,甚至可以访问data里面的数据</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">console.log(vm.$el)        # #app  vm对象可以控制的范围</span><br><span class="line">console.log(vm.$data);     #    vm对象要显示到页面中的数据</span><br><span class="line">console.log(vm.$data.message);  # 访问data里面的数据</span><br><span class="line">console.log(vm.message);   # 这个 message就是data里面声明的数据,也可以使用 vm.变量名显示其他数据,message只是举例.</span><br></pre></td></tr></table></figure>

<p>总结：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">1. 如果要输出data里面的数据作为普通标签的内容，需要使用&#123;&#123;  &#125;&#125;</span><br><span class="line">   用法：</span><br><span class="line">      vue对象的data属性：</span><br><span class="line">          data:&#123;</span><br><span class="line">            name:"小明",</span><br><span class="line">          &#125;</span><br><span class="line">      标签元素：</span><br><span class="line">      		<span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; name &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">2. 如果要输出data里面的数据作为表单元素的值，需要使用vue.js提供的元素属性v-model</span><br><span class="line">   用法：</span><br><span class="line">      vue对象的data属性：</span><br><span class="line">          data:&#123;</span><br><span class="line">            name:"小明",</span><br><span class="line">          &#125;</span><br><span class="line">      表单元素：</span><br><span class="line">      		<span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">"name"</span>&gt;</span></span><br><span class="line">      </span><br><span class="line">   使用v-model把data里面的数据显示到表单元素以后，一旦用户修改表单元素的值，则data里面对应数据的值也会随之发生改变，甚至，页面中凡是使用了这个数据都会发生变化。</span><br></pre></td></tr></table></figure>

<h2 id="1-4-显示数据"><a href="#1-4-显示数据" class="headerlink" title="1.4 显示数据"></a>1.4 显示数据</h2> 
1. 在双标签中显示数据要通过{{ }}来完成数据显示，双括号中还可以支持js表达式和符合js语法的代码，例如函数调用.
2. 在表单输入框中显示数据要使用v-model来完成数据显示


<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/vue.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">          el:<span class="string">"#app"</span>,</span></span><br><span class="line">          data:&#123;</span><br><span class="line"><span class="actionscript">            str1: <span class="string">"hello"</span>,</span></span><br><span class="line">            num: 20,</span><br><span class="line">            price: 7.1,</span><br><span class="line"><span class="actionscript">            url1: <span class="string">"http://www.baidu.com"</span>,</span></span><br><span class="line"><span class="actionscript">            url2: <span class="string">"http://www.taobao.com"</span></span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)        </span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; str1 &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; str1.split("").reverse().join("") &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>num和num2中比较大的数是：&#123;&#123; num&gt;num2? num:num2 &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"name"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;(price+0.8).toFixed(2)&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>双花括号仅用输出文本内容,如果要输出html代码,则不能使用这个.要使用v-html来输出.</p>
<p>v-html必须在html标签里面作为属性写出来.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;title&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123;url1&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        &#123;&#123;img&#125;&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-html</span>=<span class="string">"img"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el:<span class="string">".app"</span>,</span></span><br><span class="line">            data:&#123;</span><br><span class="line"><span class="actionscript">                title:<span class="string">"我的vue"</span>,</span></span><br><span class="line"><span class="actionscript">                url1:<span class="string">"我的收获地址"</span>,</span></span><br><span class="line"><span class="handlebars"><span class="xml">                img:'<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/shendan.png"</span>&gt;</span>',</span></span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>总结：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">1. 可以在普通标签中使用&#123;&#123;  &#125;&#125; 或者 v-html 来输出data里面的数据</span><br><span class="line">   <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">2. 可以在表单标签中使用v-model属性来输出data里面的数据，同时还可以修改data里面的数据</span><br><span class="line">   <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"username"</span>&gt;</span></span><br></pre></td></tr></table></figure>
 
在输出内容到普通标签的使用{{ }}

 
v-model或者v-html等vue提供的属性，或者 {{}} 都支持js代码。

 
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;str1.split("").reverse().join("")&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 3.2 支持js的运算符--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;num1+3&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 3.3 js还有一种运算符,三元运算符,类似于python里面的三元表达式</span></span><br><span class="line"><span class="comment">        三元运算符的语法:</span></span><br><span class="line"><span class="comment">         判断条件 ? 条件为true : 条件为false的结果</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        python 三元表达式[三目运算符]的语法:</span></span><br><span class="line"><span class="comment">        a if 条件 else b</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>num1和num2之间进行比较,最大值:&#123;&#123; num2&gt;num1?num2:num1 &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>


<p>例子：</p>
 
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Vue的快速使用<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;url&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;text&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-html</span>=<span class="string">"text"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">"url"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>num是&#123;&#123;num%2==0?'偶数':'奇数'&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>num的下一个数字：&#123;&#123;num-0+1&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"num"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;message.split("").reverse().join("")&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"message"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el:<span class="string">"#app"</span>, <span class="comment">// 设置vue对象控制的标签范围</span></span></span><br><span class="line"><span class="actionscript">        data:&#123;     <span class="comment">// vue要操作的数据</span></span></span><br><span class="line"><span class="actionscript">            url:<span class="string">"http://www.luffycity.com"</span>,</span></span><br><span class="line"><span class="handlebars"><span class="xml">            text:"<span class="tag">&lt;<span class="name">h1</span>&gt;</span>大标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>",</span></span></span><br><span class="line">            num: 100,</span><br><span class="line"><span class="actionscript">            message:<span class="string">"abcdef"</span>,</span></span><br><span class="line">        &#125;,</span><br><span class="line">        </span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h1 id="2-常用指令"><a href="#2-常用指令" class="headerlink" title="2. 常用指令"></a>2. 常用指令</h1><p>指令 (Directives) 是带有“v-”前缀的特殊属性。每一个指令在vue中都有固定的作用。</p>
<p>在vue中，提供了很多指令，常用的有：v-if、v-model、v-for等等。</p>
<p>指令会在vm对象的data属性的数据发生变化时，会同时改变元素中的其控制的内容或属性。</p>
<p>因为vue的历史版本原因，所以有一部分指令都有两种写法：</p>
 
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">vue1.x写法             vue2.x的写法</span><br><span class="line">v-html         ----&gt;   v-html</span><br><span class="line">&#123;&#123; 普通文本 &#125;&#125;          &#123;&#123;普通文本&#125;&#125;</span><br><span class="line">v-bind:属性名   ----&gt;   :属性</span><br><span class="line">v-on:事件名     ----&gt;   @事件名</span><br></pre></td></tr></table></figure>

<h2 id="2-1-操作属性"><a href="#2-1-操作属性" class="headerlink" title="2.1 操作属性"></a>2.1 操作属性</h2><p>格式：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">标签名</span> <span class="attr">:</span>标签属性=<span class="string">"data属性"</span>&gt;</span><span class="tag">&lt;/<span class="name">标签名</span>&gt;</span></span><br></pre></td></tr></table></figure>
 
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">:title</span>=<span class="string">"str1"</span>&gt;</span>&#123;&#123; str1 &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span> <span class="comment">&lt;!-- 也可以使用v-html显示双标签的内容，&#123;&#123;  &#125;&#125; 是简写 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">:href</span>=<span class="string">"url2"</span>&gt;</span>淘宝<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">"url1"</span>&gt;</span>百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span>  <span class="comment">&lt;!-- v-bind是vue1.x版本的写法 --&gt;</span></span><br></pre></td></tr></table></figure>

<p>显示wifi密码效果：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"index"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">"url"</span> <span class="attr">:alt</span>=<span class="string">"title"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">:type</span>=<span class="string">"type"</span> <span class="attr">placeholder</span>=<span class="string">"请输入wifi密码"</span>&gt;</span> <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"type='text'"</span>&gt;</span>显示密码<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el:<span class="string">"#index"</span>,</span></span><br><span class="line">        data:&#123;</span><br><span class="line"><span class="actionscript">          url:<span class="string">"https://www.luffycity.com/static/img/head-logo.a7cedf3.svg"</span>,</span></span><br><span class="line"><span class="actionscript">          title:<span class="string">"路飞学成"</span>,</span></span><br><span class="line"><span class="actionscript">          type:<span class="string">"password"</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="2-2-事件绑定"><a href="#2-2-事件绑定" class="headerlink" title="2.2 事件绑定"></a>2.2 事件绑定</h2><p>有两种事件操作的写法，@事件名 和 v-on:事件名</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"num++"</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span>   <span class="comment">&lt;!-- v-on 是vue1.x版本的写法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"num+=5"</span>&gt;</span>按钮2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>总结：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">1. 使用@事件名来进行事件的绑定</span><br><span class="line">   语法：</span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span> @<span class="attr">click</span>=<span class="string">"num++"</span>&gt;</span>&#123;&#123;num&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">2. 绑定的事件的事件名，全部都是js的事件名：</span><br><span class="line">   @submit   ---&gt;  onsubmit</span><br><span class="line">   @focus    ---&gt;  onfocus</span><br><span class="line">   @blur     ---&gt;  onblur</span><br><span class="line">   @click    ---&gt;  onclick</span><br><span class="line">   ....</span><br></pre></td></tr></table></figure>

<h3 id="例如-完成商城购物车中的商品增加减少数量"><a href="#例如-完成商城购物车中的商品增加减少数量" class="headerlink" title="例如:完成商城购物车中的商品增加减少数量"></a>例如:完成商城购物车中的商品增加减少数量</h3><p>步骤：</p>
<ol>
<li>给vue对象添加操作数据的方法</li>
<li>在标签中使用指令调用操作数据的方法</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"++num"</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"num"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"sub"</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el:<span class="string">"#box"</span>,</span></span><br><span class="line">            data:&#123;</span><br><span class="line">                num:0,</span><br><span class="line">            &#125;,</span><br><span class="line">            methods:&#123;</span><br><span class="line">                sub()&#123;</span><br><span class="line"><span class="actionscript">                    <span class="keyword">if</span>(<span class="keyword">this</span>.num&lt;=<span class="number">1</span>)&#123;</span></span><br><span class="line"><span class="actionscript">                        <span class="keyword">this</span>.num=<span class="number">0</span>;</span></span><br><span class="line"><span class="actionscript">                    &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="actionscript">                        <span class="keyword">this</span>.num--;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--#box&gt;(button+input+button) tab键--&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="2-3-操作样式"><a href="#2-3-操作样式" class="headerlink" title="2.3 操作样式"></a>2.3 操作样式</h2><p>操作样式，本质就是属性操作，使用冒号：</p>
<h3 id="2-3-1-控制标签class类名"><a href="#2-3-1-控制标签class类名" class="headerlink" title="2.3.1 控制标签class类名"></a>2.3.1 控制标签class类名</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">格式：</span><br><span class="line">   <span class="tag">&lt;<span class="name">h1</span> <span class="attr">:class</span>=<span class="string">"值"</span>&gt;</span>元素<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>  值可以是字符串、对象、对象名、数组</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.box1</span>&#123;</span></span><br><span class="line">        color: red;</span><br><span class="line"><span class="css">        <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#000</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.box2</span>&#123;</span></span><br><span class="line">        background-color: orange;</span><br><span class="line">        font-size: 32px;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--- 添加class类名，值是一个对象</span></span><br><span class="line"><span class="comment">        &#123;</span></span><br><span class="line"><span class="comment">         class类1:布尔值变量1,</span></span><br><span class="line"><span class="comment">         class类2:布尔值变量2,</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">         --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">:class</span>=<span class="string">"&#123;box1:myclass1&#125;"</span>&gt;</span>一个段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> @<span class="attr">click</span>=<span class="string">"myclass3=!myclass3"</span> <span class="attr">:class</span>=<span class="string">"&#123;box1:myclass2,box2:myclass3&#125;"</span>&gt;</span>一个段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> vm1=<span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el:<span class="string">"#box"</span>,</span></span><br><span class="line">            data:&#123;</span><br><span class="line"><span class="actionscript">                myclass1:<span class="literal">false</span>, <span class="comment">// 布尔值变量如果是false，则不会添加对象的属性名作为样式</span></span></span><br><span class="line"><span class="actionscript">                myclass2:<span class="literal">true</span>,  <span class="comment">// 布尔值变量如果是true，则不会添加对象的属性名作为样式</span></span></span><br><span class="line"><span class="actionscript">                myclass3:<span class="literal">false</span>,</span></span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 上面的代码可以:class的值保存到data里面的一个变量，然后使用该变量作为:class的值 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.box4</span>&#123;</span></span><br><span class="line">        background-color: red;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.box5</span>&#123;</span></span><br><span class="line">        color: green;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"mycls.box4=!mycls.box4"</span>&gt;</span>改变背景<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"mycls.box5=!mycls.box5"</span>&gt;</span>改变字体颜色<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">:class</span>=<span class="string">"mycls"</span>&gt;</span>第二个段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> vm2 = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el:<span class="string">"#app"</span>,</span></span><br><span class="line">            data:&#123;</span><br><span class="line">                mycls:&#123;</span><br><span class="line"><span class="actionscript">                    box4:<span class="literal">false</span>,</span></span><br><span class="line"><span class="actionscript">                    box5:<span class="literal">true</span></span></span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 批量给元素增加多个class样式类 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.box6</span>&#123;</span></span><br><span class="line">        background-color: red;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.box7</span>&#123;</span></span><br><span class="line">        color: green;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.box8</span>&#123;</span></span><br><span class="line">        border: 1px solid yellow;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app2"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span> <span class="attr">:class</span>=<span class="string">"[mycls1,mycls2]"</span>&gt;</span>第三个段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> vm3 = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el:<span class="string">"#app2"</span>,</span></span><br><span class="line">            data:&#123;</span><br><span class="line">                mycls1:&#123;</span><br><span class="line"><span class="actionscript">                    box6:<span class="literal">true</span>,</span></span><br><span class="line"><span class="actionscript">                    box7:<span class="literal">true</span>,</span></span><br><span class="line">                &#125;,</span><br><span class="line">                mycls2:&#123;</span><br><span class="line"><span class="actionscript">                    box8:<span class="literal">true</span>,</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>代码执行效果：</p>
<p><img src="/images/1552036325806.png" alt=""></p>
<p>总结：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">1. 给元素绑定class类名，最常用的就是第二种。</span><br><span class="line">    vue对象的data数据：</span><br><span class="line">        data:&#123;</span><br><span class="line">          myObj:&#123;</span><br><span class="line">            complete:true,</span><br><span class="line">            uncomplete:false,</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">		html元素：    </span><br><span class="line">    		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span> <span class="attr">:class</span>=<span class="string">"myObj"</span>&gt;</span>2222<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    最终浏览器效果：</span><br><span class="line">		    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box complete"</span>&gt;</span>2222<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-3-2-控制标签style样式"><a href="#2-3-2-控制标签style样式" class="headerlink" title="2.3.2 控制标签style样式"></a>2.3.2 控制标签style样式</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">格式1：值是json对象，对象写在元素的:style属性中</span><br><span class="line">	 标签元素：</span><br><span class="line">		     <span class="tag">&lt;<span class="name">div</span> <span class="attr">:style</span>=<span class="string">"&#123;color: activeColor, fontSize: fontSize + 'px' &#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	 data数据如下：</span><br><span class="line">         data: &#123;</span><br><span class="line">             activeColor: 'red',</span><br><span class="line">             fontSize: 30</span><br><span class="line">         &#125;</span><br><span class="line">格式2：值是对象变量名，对象在data中进行声明</span><br><span class="line">   标签元素：</span><br><span class="line">   			<span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:style</span>=<span class="string">"styleObject"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   data数据如下：</span><br><span class="line">         data: &#123;</span><br><span class="line">            	styleObject: &#123;</span><br><span class="line">             		color: 'red',</span><br><span class="line">             		fontSize: '13px'</span><br><span class="line">			  			&#125;</span><br><span class="line">				 &#125;</span><br><span class="line"></span><br><span class="line">格式3：值是数组</span><br><span class="line">  标签元素：</span><br><span class="line">				<span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:style</span>=<span class="string">"[style1, style2]"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	data数据如下：</span><br><span class="line">				data: &#123;</span><br><span class="line">                     style1:&#123;</span><br><span class="line">                       color:"red"</span><br><span class="line">                     &#125;,</span><br><span class="line">                     style2:&#123;</span><br><span class="line">                       background:"yellow",</span><br><span class="line">                       fontSize: "21px"</span><br><span class="line">                     &#125;</span><br><span class="line">				&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-3-2-实例-vue版本选项卡"><a href="#2-3-2-实例-vue版本选项卡" class="headerlink" title="2.3.2 实例-vue版本选项卡"></a>2.3.2 实例-vue版本选项卡</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-id">#card</span>&#123;</span></span><br><span class="line">            width: 500px;</span><br><span class="line">            height: 350px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.title</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">height</span><span class="selector-pseudo">:50px</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.title</span> <span class="selector-tag">span</span>&#123;</span></span><br><span class="line">            width: 100px;</span><br><span class="line">            height: 50px;</span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>:<span class="selector-id">#ccc</span>;</span></span><br><span class="line">            display: inline-block;</span><br><span class="line"><span class="css">            <span class="selector-tag">line-height</span>: 50<span class="selector-tag">px</span>; <span class="comment">/* 设置行和当前元素的高度相等,就可以让文本内容上下居中 */</span></span></span><br><span class="line"><span class="css">            <span class="selector-tag">text-align</span><span class="selector-pseudo">:center</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.content</span> <span class="selector-class">.list</span>&#123;</span></span><br><span class="line">            width: 500px;</span><br><span class="line">            height: 300px;</span><br><span class="line">            background-color: yellow;</span><br><span class="line">            display: none;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.content</span> <span class="selector-class">.active</span>&#123;</span></span><br><span class="line">            display: block;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.title</span> <span class="selector-class">.current</span>&#123;</span></span><br><span class="line">            background-color: yellow;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"card"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"title"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> @<span class="attr">click</span>=<span class="string">"num=0"</span> <span class="attr">:class</span>=<span class="string">"num==0?'current':''"</span>&gt;</span>国内新闻<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> @<span class="attr">click</span>=<span class="string">"num=1"</span> <span class="attr">:class</span>=<span class="string">"num==1?'current':''"</span>&gt;</span>国际新闻<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> @<span class="attr">click</span>=<span class="string">"num=2"</span> <span class="attr">:class</span>=<span class="string">"num==2?'current':''"</span>&gt;</span>银河新闻<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--&lt;span&gt;&#123;&#123;num&#125;&#125;&lt;/span&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list"</span> <span class="attr">:class</span>=<span class="string">"num==0?'active':''"</span>&gt;</span>国内新闻列表<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list"</span> <span class="attr">:class</span>=<span class="string">"num==1?'active':''"</span>&gt;</span>国际新闻列表<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list"</span> <span class="attr">:class</span>=<span class="string">"num==2?'active':''"</span>&gt;</span>银河新闻列表<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 思路：</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 当用户点击标题栏的按钮[span]时，显示对应索引下标的内容块[.list]</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 代码实现：</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> card = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el:<span class="string">"#card"</span>,</span></span><br><span class="line">            data:&#123;</span><br><span class="line">                num:0,</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>代码运行效果：</p>
<p><img src="/images/1552038219804.png" alt=""></p>
<h2 id="2-4-条件渲染指令"><a href="#2-4-条件渲染指令" class="headerlink" title="2.4 条件渲染指令"></a>2.4 条件渲染指令</h2><p>vue中提供了两个指令可以用于判断是否要显示元素，分别是v-if和v-show。</p>
<h3 id="2-4-1-v-if"><a href="#2-4-1-v-if" class="headerlink" title="2.4.1 v-if"></a>2.4.1 v-if</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">标签元素：</span><br><span class="line">      <span class="comment">&lt;!-- vue对象最终会把条件的结果变成布尔值 --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-if</span>=<span class="string">"ok"</span>&gt;</span>Yes<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  data数据：</span><br><span class="line">  		data:&#123;</span><br><span class="line">      		ok:false    // true则是显示，false是隐藏</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-4-2-v-else"><a href="#2-4-2-v-else" class="headerlink" title="2.4.2 v-else"></a>2.4.2 v-else</h3><p>v-else指令来表示 v-if 的“else 块”，v-else 元素必须紧跟在带 v-if 或者 v-else-if 的元素的后面，否则它将不会被识别。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">标签元素：</span><br><span class="line">			<span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-if</span>=<span class="string">"ok"</span>&gt;</span>Yes<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-else</span>&gt;</span>No<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  data数据：</span><br><span class="line">  		data:&#123;</span><br><span class="line">      		ok:false    // true则是显示，false是隐藏</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-4-3-v-else-if"><a href="#2-4-3-v-else-if" class="headerlink" title="2.4.3 v-else-if"></a>2.4.3 v-else-if</h3><p>可以出现多个v-else-if语句，但是v-else-if之前必须有一个v-if开头。后面可以跟着v-else，也可以没有。</p>
 
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">标签元素：</span><br><span class="line">			<span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-if</span>=<span class="string">"num==1"</span>&gt;</span>num的值为1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-else-if</span>=<span class="string">"num==2"</span>&gt;</span>num的值为2<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">		  <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-else</span>&gt;</span>num的值是&#123;&#123;num&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  data数据：</span><br><span class="line">  		data:&#123;</span><br><span class="line">      		num:2</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-4-4-v-show"><a href="#2-4-4-v-show" class="headerlink" title="2.4.4 v-show"></a>2.4.4 v-show</h3><p>用法和v-if大致一样，区别在于2点：</p>
<ol>
<li>v-show后面不能v-else或者v-else-if</li>
<li>v-show隐藏元素时，使用的是display:none来隐藏的，而v-if是直接从HTML文档中移除元素[ DOM操作中的remove ]</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">标签元素：</span><br><span class="line">			<span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-show</span>=<span class="string">"ok"</span>&gt;</span>Hello!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  data数据：</span><br><span class="line">  		data:&#123;</span><br><span class="line">      		ok:false    // true则是显示，false是隐藏</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-5-列表渲染指令"><a href="#2-5-列表渲染指令" class="headerlink" title="2.5 列表渲染指令"></a>2.5 列表渲染指令</h2><p>在vue中，可以通过v-for指令可以将一组数据渲染到页面中，数据可以是数组或者对象。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">数据是数组：        </span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--book是列表的每一个元素--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"book in book_list"</span>&gt;</span>&#123;&#123;book.title&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--book是列表的每一个元素，index是每个元素的下标--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(book, index) in book_list"</span>&gt;</span>第&#123;&#123; index+1&#125;&#125;本图书：&#123;&#123;book.title&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> vm1 = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">                el:<span class="string">"#app"</span>,</span></span><br><span class="line">                data:&#123;</span><br><span class="line">                    book_list:[</span><br><span class="line"><span class="actionscript">                        &#123;<span class="string">"id"</span>:<span class="number">1</span>,<span class="string">"title"</span>:<span class="string">"图书名称1"</span>,<span class="string">"price"</span>:<span class="number">200</span>&#125;,</span></span><br><span class="line"><span class="actionscript">                        &#123;<span class="string">"id"</span>:<span class="number">2</span>,<span class="string">"title"</span>:<span class="string">"图书名称2"</span>,<span class="string">"price"</span>:<span class="number">200</span>&#125;,</span></span><br><span class="line"><span class="actionscript">                        &#123;<span class="string">"id"</span>:<span class="number">3</span>,<span class="string">"title"</span>:<span class="string">"图书名称3"</span>,<span class="string">"price"</span>:<span class="number">200</span>&#125;,</span></span><br><span class="line"><span class="actionscript">                        &#123;<span class="string">"id"</span>:<span class="number">4</span>,<span class="string">"title"</span>:<span class="string">"图书名称4"</span>,<span class="string">"price"</span>:<span class="number">200</span>&#125;,</span></span><br><span class="line">                    ]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">数据是对象：</span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--i是每一个value值--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"value in book"</span>&gt;</span>&#123;&#123;value&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--i是每一个value值,j是每一个键名--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"attr, value in book"</span>&gt;</span>&#123;&#123;attr&#125;&#125;:&#123;&#123;value&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> vm1 = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">                el:<span class="string">"#app"</span>,</span></span><br><span class="line">                data:&#123;</span><br><span class="line">                    book: &#123;</span><br><span class="line"><span class="actionscript">                        <span class="comment">// "attr":"value"</span></span></span><br><span class="line"><span class="actionscript">                        <span class="string">"id"</span>:<span class="number">11</span>,</span></span><br><span class="line"><span class="actionscript">                        <span class="string">"title"</span>:<span class="string">"图书名称1"</span>,</span></span><br><span class="line"><span class="actionscript">                        <span class="string">"price"</span>:<span class="number">200</span></span></span><br><span class="line">                    &#125;,</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;)</span><br><span class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>练习：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">goods:[</span><br><span class="line">	&#123;"name":"python入门","price":150&#125;,</span><br><span class="line">	&#123;"name":"python进阶","price":100&#125;,</span><br><span class="line">	&#123;"name":"python高级","price":75&#125;,</span><br><span class="line">	&#123;"name":"python研究","price":60&#125;,</span><br><span class="line">	&#123;"name":"python放弃","price":110&#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"># 把上面的数据采用table表格输出到页面，价格大于60的数据需要添加背景色橙色[orange]</span><br></pre></td></tr></table></figure>

<h1 id="3-Vue对象提供的属性功能"><a href="#3-Vue对象提供的属性功能" class="headerlink" title="3. Vue对象提供的属性功能"></a>3. Vue对象提供的属性功能</h1><h2 id="3-1-过滤器"><a href="#3-1-过滤器" class="headerlink" title="3.1 过滤器"></a>3.1 过滤器</h2><p>过滤器，就是vue允许开发者自定义的文本格式化函数，可以使用在两个地方：输出内容和操作数据中。</p>
<p>定义过滤器的方式有两种。</p>
<h3 id="3-1-1-使用Vue-filter-进行全局定义"><a href="#3-1-1-使用Vue-filter-进行全局定义" class="headerlink" title="3.1.1 使用Vue.filter()进行全局定义"></a>3.1.1 使用Vue.filter()进行全局定义</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">Vue.filter("RMB1", function(v)&#123;</span><br><span class="line">  	//就是来格式化(处理)v这个数据的</span><br><span class="line">  	if(v==0)&#123;</span><br><span class="line">    		return v</span><br><span class="line">  	&#125;</span><br><span class="line"></span><br><span class="line">  	return v+"元"</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="3-1-2-在vue对象中通过filters属性来定义"><a href="#3-1-2-在vue对象中通过filters属性来定义" class="headerlink" title="3.1.2 在vue对象中通过filters属性来定义"></a>3.1.2 在vue对象中通过filters属性来定义</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">var vm = new Vue(&#123;</span><br><span class="line">  el:"#app",</span><br><span class="line">  data:&#123;&#125;,</span><br><span class="line">  filters:&#123;</span><br><span class="line">    RMB2:function(value)&#123;</span><br><span class="line">      if(value=='')&#123;</span><br><span class="line">        return;</span><br><span class="line">      &#125;else&#123;</span><br><span class="line">      	return '¥ '+value;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="3-4-计算和侦听属性"><a href="#3-4-计算和侦听属性" class="headerlink" title="3.4 计算和侦听属性"></a>3.4 计算和侦听属性</h2><h3 id="3-4-1-计算属性"><a href="#3-4-1-计算属性" class="headerlink" title="3.4.1 计算属性"></a>3.4.1 计算属性</h3><p>我们之前学习过字符串反转，如果直接把反转的代码写在元素中，则会使得其他同事在开发时时不易发现数据被调整了，所以vue提供了一个计算属性(computed)，可以让我们把调整data数据的代码存在在该属性中。</p>
 
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/vue.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">		<span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el:<span class="string">"#app"</span>,</span></span><br><span class="line">            data:&#123;</span><br><span class="line"><span class="actionscript">                str1: <span class="string">"abcdefgh"</span></span></span><br><span class="line">            &#125;,</span><br><span class="line"><span class="actionscript">            computed:&#123;   <span class="comment">//计算属性：里面的函数都必须有返回值</span></span></span><br><span class="line"><span class="actionscript">                strRevs: <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">var</span> ret = <span class="keyword">this</span>.str1.split(<span class="string">""</span>).reverse().join(<span class="string">""</span>);</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">return</span> ret</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; str1 &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; strRevs &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3-4-2-监听属性"><a href="#3-4-2-监听属性" class="headerlink" title="3.4.2 监听属性"></a>3.4.2 监听属性</h3><p>侦听属性，可以帮助我们侦听data某个数据的变化，从而做相应的自定义操作。</p>
<p>侦听属性是一个对象，它的键是要监听的对象或者变量，值一般是函数，当侦听的data数据发生变化时，会自定执行的对应函数，这个函数在被调用时，vue会传入两个形参，第一个是变化前的数据值，第二个是变化后的数据值。</p>
 
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/vue.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="actionscript">         <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el:<span class="string">"#app"</span>,</span></span><br><span class="line">            data:&#123;</span><br><span class="line">                num:20</span><br><span class="line">            &#125;,</span><br><span class="line">            watch:&#123;</span><br><span class="line"><span class="actionscript">                num:<span class="function"><span class="keyword">function</span><span class="params">(newval,oldval)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">                    <span class="comment">//num发生变化的时候，要执行的代码</span></span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(<span class="string">"num已经发生了变化！"</span>);</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; num &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"num++"</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="3-5-vue对象的生命周期"><a href="#3-5-vue对象的生命周期" class="headerlink" title="3.5 vue对象的生命周期"></a>3.5 vue对象的生命周期</h2><p>每个Vue对象在创建时都要经过一系列的初始化过程。在这个过程中Vue.js会自动运行一些叫做生命周期的的钩子函数，我们可以使用这些函数，在对象创建的不同阶段加上我们需要的代码，实现特定的功能。</p>
 
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/vue.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el:<span class="string">"#app"</span>,</span></span><br><span class="line">            data:&#123;</span><br><span class="line">                num:0</span><br><span class="line">            &#125;,</span><br><span class="line"><span class="actionscript">            beforeCreate:<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">"beforeCreate,vm对象尚未创建,num="</span>+ <span class="keyword">this</span>.num);  <span class="comment">//undefined</span></span></span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.name=<span class="number">10</span>; <span class="comment">// 此时没有this对象呢，所以设置的name无效，被在创建对象的时候被覆盖为0</span></span></span><br><span class="line">            &#125;,</span><br><span class="line"><span class="actionscript">            created:<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">"created,vm对象创建完成,设置好了要控制的元素范围,num="</span>+<span class="keyword">this</span>.num );  <span class="comment">// 0</span></span></span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.num = <span class="number">20</span>;</span></span><br><span class="line">            &#125;,</span><br><span class="line"><span class="actionscript">            beforeMount:<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log( <span class="keyword">this</span>.$el.innerHTML ); <span class="comment">// &lt;p&gt;&#123;&#123;num&#125;&#125;&lt;/p&gt;</span></span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">"beforeMount,vm对象尚未把data数据显示到页面中,num="</span>+<span class="keyword">this</span>.num ); <span class="comment">// 20</span></span></span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.num = <span class="number">30</span>;</span></span><br><span class="line">            &#125;,</span><br><span class="line"><span class="actionscript">            mounted:<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log( <span class="keyword">this</span>.$el.innerHTML ); <span class="comment">// &lt;p&gt;30&lt;/p&gt;</span></span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">"mounted,vm对象已经把data数据显示到页面中,num="</span>+<span class="keyword">this</span>.num); <span class="comment">// 30</span></span></span><br><span class="line">            &#125;,</span><br><span class="line"><span class="actionscript">            beforeUpdate:<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="comment">// this.$el 就是我们上面的el属性了，$el表示当前vue.js所控制的元素#app</span></span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log( <span class="keyword">this</span>.$el.innerHTML );  <span class="comment">// &lt;p&gt;30&lt;/p&gt;</span></span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">"beforeUpdate,vm对象尚未把更新后的data数据显示到页面中,num="</span>+<span class="keyword">this</span>.num); <span class="comment">// beforeUpdate----31</span></span></span><br><span class="line">                </span><br><span class="line">            &#125;,</span><br><span class="line"><span class="actionscript">            updated:<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log( <span class="keyword">this</span>.$el.innerHTML ); <span class="comment">// &lt;p&gt;31&lt;/p&gt;</span></span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">"updated,vm对象已经把过呢更新后的data数据显示到页面中,num="</span> + <span class="keyword">this</span>.num ); <span class="comment">// updated----31</span></span></span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;num&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"num++"</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>总结：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">在vue使用的过程中，如果要初始化操作，把初始化操作的代码放在 mounted 中执行。</span><br><span class="line">mounted阶段就是在vm对象已经把data数据实现到页面以后。一般页面初始化使用。例如，用户访问页面加载成功以后，就要执行的ajax请求。</span><br><span class="line"></span><br><span class="line">另一个就是created，这个阶段就是在 vue对象创建以后，把ajax请求后端数据的代码放进 created</span><br></pre></td></tr></table></figure>

<h2 id="3-2-阻止事件冒泡和刷新页面"><a href="#3-2-阻止事件冒泡和刷新页面" class="headerlink" title="3.2 阻止事件冒泡和刷新页面"></a>3.2 阻止事件冒泡和刷新页面</h2><p>使用.stop和.prevent</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.box1</span>&#123;</span></span><br><span class="line">            width: 200px;</span><br><span class="line">            height: 200px;</span><br><span class="line"><span class="css">            <span class="selector-tag">background</span>: <span class="selector-id">#ccc</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.box2</span>&#123;</span></span><br><span class="line">            width: 100px;</span><br><span class="line">            height: 100px;</span><br><span class="line">            background: pink;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/vue.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el:<span class="string">"#app"</span>,</span></span><br><span class="line">            data:&#123;&#125;</span><br><span class="line">        &#125;)        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box1"</span> @<span class="attr">click</span>=<span class="string">"alert('box1')"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box2"</span> @<span class="attr">click.stop.prevent</span>=<span class="string">"alert('box2')"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>   <span class="comment">&lt;!-- @click.stop来阻止事件冒泡 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"#"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交02"</span> @<span class="attr">click.prevent</span>=<span class="string">""</span>&gt;</span> <span class="comment">&lt;!-- @click.prevent来阻止表单提交 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="3-3-综合案例-todolist"><a href="#3-3-综合案例-todolist" class="headerlink" title="3.3 综合案例-todolist"></a>3.3 综合案例-todolist</h2><p>我的计划列表</p>
<p>html代码:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>todolist<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css">		<span class="selector-class">.list_con</span>&#123;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">width</span><span class="selector-pseudo">:600px</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">margin</span><span class="selector-pseudo">:50px</span> <span class="selector-tag">auto</span> 0;</span></span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="selector-class">.inputtxt</span>&#123;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">width</span><span class="selector-pseudo">:550px</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">height</span><span class="selector-pseudo">:30px</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">border</span><span class="selector-pseudo">:1px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ccc</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">padding</span><span class="selector-pseudo">:0px</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">text-indent</span><span class="selector-pseudo">:10px</span>;</span></span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="selector-class">.inputbtn</span>&#123;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">width</span><span class="selector-pseudo">:40px</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">height</span><span class="selector-pseudo">:32px</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">padding</span><span class="selector-pseudo">:0px</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">border</span><span class="selector-pseudo">:1px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ccc</span>;</span></span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="selector-class">.list</span>&#123;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">margin</span><span class="selector-pseudo">:0</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">padding</span><span class="selector-pseudo">:0</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">list-style</span><span class="selector-pseudo">:none</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">margin-top</span><span class="selector-pseudo">:20px</span>;</span></span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="selector-class">.list</span> <span class="selector-tag">li</span>&#123;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">height</span><span class="selector-pseudo">:40px</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">line-height</span><span class="selector-pseudo">:40px</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">border-bottom</span><span class="selector-pseudo">:1px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ccc</span>;</span></span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line"><span class="css">		<span class="selector-class">.list</span> <span class="selector-tag">li</span> <span class="selector-tag">span</span>&#123;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">float</span><span class="selector-pseudo">:left</span>;</span></span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line"><span class="css">		<span class="selector-class">.list</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span>&#123;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">float</span><span class="selector-pseudo">:right</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">text-decoration</span><span class="selector-pseudo">:none</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">margin</span><span class="selector-pseudo">:0</span> 10<span class="selector-tag">px</span>;</span></span><br><span class="line">		&#125;</span><br><span class="line">	<span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list_con"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">h2</span>&gt;</span>To do list<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">"txt1"</span> <span class="attr">class</span>=<span class="string">"inputtxt"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">"增加"</span> <span class="attr">id</span>=<span class="string">"btn1"</span> <span class="attr">class</span>=<span class="string">"inputbtn"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"list"</span> <span class="attr">class</span>=<span class="string">"list"</span>&gt;</span></span><br><span class="line">			<span class="comment">&lt;!-- javascript:; # 阻止a标签跳转 --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">span</span>&gt;</span>学习html<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">class</span>=<span class="string">"up"</span>&gt;</span> ↑ <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">class</span>=<span class="string">"down"</span>&gt;</span> ↓ <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">class</span>=<span class="string">"del"</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>学习css<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">class</span>=<span class="string">"up"</span>&gt;</span> ↑ <span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">class</span>=<span class="string">"down"</span>&gt;</span> ↓ <span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">class</span>=<span class="string">"del"</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>学习javascript<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">class</span>=<span class="string">"up"</span>&gt;</span> ↑ <span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">class</span>=<span class="string">"down"</span>&gt;</span> ↓ <span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">class</span>=<span class="string">"del"</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>特效实现效果：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>todolist<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css">		<span class="selector-class">.list_con</span>&#123;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">width</span><span class="selector-pseudo">:600px</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">margin</span><span class="selector-pseudo">:50px</span> <span class="selector-tag">auto</span> 0;</span></span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="selector-class">.inputtxt</span>&#123;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">width</span><span class="selector-pseudo">:550px</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">height</span><span class="selector-pseudo">:30px</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">border</span><span class="selector-pseudo">:1px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ccc</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">padding</span><span class="selector-pseudo">:0px</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">text-indent</span><span class="selector-pseudo">:10px</span>;</span></span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="selector-class">.inputbtn</span>&#123;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">width</span><span class="selector-pseudo">:40px</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">height</span><span class="selector-pseudo">:32px</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">padding</span><span class="selector-pseudo">:0px</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">border</span><span class="selector-pseudo">:1px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ccc</span>;</span></span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="selector-class">.list</span>&#123;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">margin</span><span class="selector-pseudo">:0</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">padding</span><span class="selector-pseudo">:0</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">list-style</span><span class="selector-pseudo">:none</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">margin-top</span><span class="selector-pseudo">:20px</span>;</span></span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="selector-class">.list</span> <span class="selector-tag">li</span>&#123;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">height</span><span class="selector-pseudo">:40px</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">line-height</span><span class="selector-pseudo">:40px</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">border-bottom</span><span class="selector-pseudo">:1px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ccc</span>;</span></span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line"><span class="css">		<span class="selector-class">.list</span> <span class="selector-tag">li</span> <span class="selector-tag">span</span>&#123;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">float</span><span class="selector-pseudo">:left</span>;</span></span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line"><span class="css">		<span class="selector-class">.list</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span>&#123;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">float</span><span class="selector-pseudo">:right</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">text-decoration</span><span class="selector-pseudo">:none</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">margin</span><span class="selector-pseudo">:0</span> 10<span class="selector-tag">px</span>;</span></span><br><span class="line">		&#125;</span><br><span class="line">	<span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"todolist"</span> <span class="attr">class</span>=<span class="string">"list_con"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">h2</span>&gt;</span>To do list<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"message"</span> <span class="attr">class</span>=<span class="string">"inputtxt"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> @<span class="attr">click</span>=<span class="string">"addItem"</span> <span class="attr">value</span>=<span class="string">"增加"</span> <span class="attr">class</span>=<span class="string">"inputbtn"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"list"</span> <span class="attr">class</span>=<span class="string">"list"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"item,key in dolist"</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">a</span> @<span class="attr">click</span>=<span class="string">"upItem(key)"</span> <span class="attr">class</span>=<span class="string">"up"</span> &gt;</span> ↑ <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">a</span> @<span class="attr">click</span>=<span class="string">"downItem(key)"</span> <span class="attr">class</span>=<span class="string">"down"</span>&gt;</span> ↓ <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">a</span> @<span class="attr">click</span>=<span class="string">"delItem(key)"</span> <span class="attr">class</span>=<span class="string">"del"</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 计划列表代码</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el:<span class="string">"#todolist"</span>,</span></span><br><span class="line">        data:&#123;</span><br><span class="line"><span class="actionscript">            message:<span class="string">""</span>,</span></span><br><span class="line">            dolist:[</span><br><span class="line"><span class="actionscript">                <span class="string">"学习html"</span>,</span></span><br><span class="line"><span class="actionscript">                <span class="string">"学习css"</span>,</span></span><br><span class="line"><span class="actionscript">                <span class="string">"学习javascript"</span>,</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">            addItem()&#123;</span><br><span class="line"><span class="actionscript">                <span class="keyword">if</span>(<span class="keyword">this</span>.messsage==<span class="string">""</span>)&#123;</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.dolist.push(<span class="keyword">this</span>.message);</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.message = <span class="string">""</span></span></span><br><span class="line">            &#125;,</span><br><span class="line">            delItem(key)&#123;</span><br><span class="line"><span class="actionscript">                <span class="comment">// 删除和替换</span></span></span><br><span class="line"><span class="actionscript">                <span class="comment">// 参数1: 开始下表</span></span></span><br><span class="line"><span class="actionscript">                <span class="comment">// 参数2: 元素长度，如果不填默认删除到最后</span></span></span><br><span class="line"><span class="actionscript">                <span class="comment">// 参数3: 表示使用当前参数替换已经删除内容的位置</span></span></span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.dolist.splice(key, <span class="number">1</span>);</span></span><br><span class="line">            &#125;,</span><br><span class="line">            upItem(key)&#123;</span><br><span class="line">                if(key==0)&#123;</span><br><span class="line"><span class="actionscript">                    <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line">                &#125;</span><br><span class="line"><span class="actionscript">                <span class="comment">// 向上移动</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">let</span> result = <span class="keyword">this</span>.dolist.splice(key,<span class="number">1</span>);</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.dolist.splice(key<span class="number">-1</span>,<span class="number">0</span>,result[<span class="number">0</span>]);</span></span><br><span class="line">            &#125;,</span><br><span class="line">            downItem(key)&#123;</span><br><span class="line"><span class="actionscript">                <span class="comment">// 向下移动</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">let</span> result = <span class="keyword">this</span>.dolist.splice(key, <span class="number">1</span>);</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(result);</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.dolist.splice(key+<span class="number">1</span>,<span class="number">0</span>,result[<span class="number">0</span>]);</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>vue框架</tag>
      </tags>
  </entry>
  <entry>
    <title>[vue对象的生命周期]</title>
    <url>/2020/03/04/vue%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</url>
    <content><![CDATA[<h1 id="3-Vue对象提供的属性功能"><a href="#3-Vue对象提供的属性功能" class="headerlink" title="3. Vue对象提供的属性功能"></a>3. Vue对象提供的属性功能</h1><h2 id="3-1-过滤器"><a href="#3-1-过滤器" class="headerlink" title="3.1 过滤器"></a>3.1 过滤器</h2><p>过滤器，就是vue允许开发者自定义的文本格式化函数，可以使用在两个地方：输出内容和操作数据中。</p>
<p>定义过滤器的方式有两种。</p>
<h3 id="3-1-1-使用Vue-filter-进行全局定义"><a href="#3-1-1-使用Vue-filter-进行全局定义" class="headerlink" title="3.1.1 使用Vue.filter()进行全局定义"></a>3.1.1 使用Vue.filter()进行全局定义</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">Vue.filter("RMB1", function(v)&#123;</span><br><span class="line">  	//就是来格式化(处理)v这个数据的</span><br><span class="line">  	if(v==0)&#123;</span><br><span class="line">    		return v</span><br><span class="line">  	&#125;</span><br><span class="line"></span><br><span class="line">  	return v+"元"</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="3-1-2-在vue对象中通过filters属性来定义"><a href="#3-1-2-在vue对象中通过filters属性来定义" class="headerlink" title="3.1.2 在vue对象中通过filters属性来定义"></a>3.1.2 在vue对象中通过filters属性来定义</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">var vm = new Vue(&#123;</span><br><span class="line">  el:"#app",</span><br><span class="line">  data:&#123;&#125;,</span><br><span class="line">  filters:&#123;</span><br><span class="line">    RMB2:function(value)&#123;</span><br><span class="line">      if(value=='')&#123;</span><br><span class="line">        return;</span><br><span class="line">      &#125;else&#123;</span><br><span class="line">      	return '¥ '+value;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="3-4-计算和侦听属性"><a href="#3-4-计算和侦听属性" class="headerlink" title="3.4 计算和侦听属性"></a>3.4 计算和侦听属性</h2><h3 id="3-4-1-计算属性"><a href="#3-4-1-计算属性" class="headerlink" title="3.4.1 计算属性"></a>3.4.1 计算属性</h3><p>我们之前学习过字符串反转，如果直接把反转的代码写在元素中，则会使得其他同事在开发时时不易发现数据被调整了，所以vue提供了一个计算属性(computed)，可以让我们把调整data数据的代码存在在该属性中。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/vue.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">		<span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el:<span class="string">"#app"</span>,</span></span><br><span class="line">            data:&#123;</span><br><span class="line"><span class="actionscript">                str1: <span class="string">"abcdefgh"</span></span></span><br><span class="line">            &#125;,</span><br><span class="line"><span class="actionscript">            computed:&#123;   <span class="comment">//计算属性：里面的函数都必须有返回值</span></span></span><br><span class="line"><span class="actionscript">                strRevs: <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">var</span> ret = <span class="keyword">this</span>.str1.split(<span class="string">""</span>).reverse().join(<span class="string">""</span>);</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">return</span> ret</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; str1 &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; strRevs &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3-4-2-监听属性"><a href="#3-4-2-监听属性" class="headerlink" title="3.4.2 监听属性"></a>3.4.2 监听属性</h3><p>侦听属性，可以帮助我们侦听data某个数据的变化，从而做相应的自定义操作。</p>
<p>侦听属性是一个对象，它的键是要监听的对象或者变量，值一般是函数，当侦听的data数据发生变化时，会自定执行的对应函数，这个函数在被调用时，vue会传入两个形参，第一个是变化前的数据值，第二个是变化后的数据值。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/vue.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="actionscript">         <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el:<span class="string">"#app"</span>,</span></span><br><span class="line">            data:&#123;</span><br><span class="line">                num:20</span><br><span class="line">            &#125;,</span><br><span class="line">            watch:&#123;</span><br><span class="line"><span class="actionscript">                num:<span class="function"><span class="keyword">function</span><span class="params">(newval,oldval)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">                    <span class="comment">//num发生变化的时候，要执行的代码</span></span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(<span class="string">"num已经发生了变化！"</span>);</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; num &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"num++"</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="3-5-vue对象的生命周期"><a href="#3-5-vue对象的生命周期" class="headerlink" title="3.5 vue对象的生命周期"></a>3.5 vue对象的生命周期</h2><p>每个Vue对象在创建时都要经过一系列的初始化过程。在这个过程中Vue.js会自动运行一些叫做生命周期的的钩子函数，我们可以使用这些函数，在对象创建的不同阶段加上我们需要的代码，实现特定的功能。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">    &lt;script src="js/</span>vue.min.js<span class="string">"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">    &lt;script&gt;</span></span><br><span class="line"><span class="string">    window.onload = function()&#123;</span></span><br><span class="line"><span class="string">        var vm = new Vue(&#123;</span></span><br><span class="line">            el:"#app",</span><br><span class="line">            data:&#123;</span><br><span class="line">                num:<span class="number">0</span></span><br><span class="line">            &#125;,</span><br><span class="line">            beforeCreate:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"beforeCreate,vm对象尚未创建,num="</span>+ <span class="keyword">this</span>.num);  <span class="comment">//undefined</span></span><br><span class="line">                <span class="keyword">this</span>.name=<span class="number">10</span>; <span class="comment">// 此时没有this对象呢，所以设置的name无效，被在创建对象的时候被覆盖为0</span></span><br><span class="line">            &#125;,</span><br><span class="line">            created:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"created,vm对象创建完成,设置好了要控制的元素范围,num="</span>+<span class="keyword">this</span>.num );  <span class="comment">// 0</span></span><br><span class="line">                <span class="keyword">this</span>.num = <span class="number">20</span>;</span><br><span class="line">            &#125;,</span><br><span class="line">            beforeMount:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log( <span class="keyword">this</span>.$el.innerHTML ); <span class="comment">// &lt;p&gt;&#123;&#123;num&#125;&#125;&lt;/p&gt;</span></span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"beforeMount,vm对象尚未把data数据显示到页面中,num="</span>+<span class="keyword">this</span>.num ); <span class="comment">// 20</span></span><br><span class="line">                <span class="keyword">this</span>.num = <span class="number">30</span>;</span><br><span class="line">            &#125;,</span><br><span class="line">            mounted:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log( <span class="keyword">this</span>.$el.innerHTML ); <span class="comment">// &lt;p&gt;30&lt;/p&gt;</span></span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"mounted,vm对象已经把data数据显示到页面中,num="</span>+<span class="keyword">this</span>.num); <span class="comment">// 30</span></span><br><span class="line">            &#125;,</span><br><span class="line">            beforeUpdate:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="comment">// this.$el 就是我们上面的el属性了，$el表示当前vue.js所控制的元素#app</span></span><br><span class="line">                <span class="built_in">console</span>.log( <span class="keyword">this</span>.$el.innerHTML );  <span class="comment">// &lt;p&gt;30&lt;/p&gt;</span></span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"beforeUpdate,vm对象尚未把更新后的data数据显示到页面中,num="</span>+<span class="keyword">this</span>.num); <span class="comment">// beforeUpdate----31</span></span><br><span class="line">                </span><br><span class="line">            &#125;,</span><br><span class="line">            updated:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log( <span class="keyword">this</span>.$el.innerHTML ); <span class="comment">// &lt;p&gt;31&lt;/p&gt;</span></span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"updated,vm对象已经把过呢更新后的data数据显示到页面中,num="</span> + <span class="keyword">this</span>.num ); <span class="comment">// updated----31</span></span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">        &lt;p&gt;&#123;&#123;num&#125;&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">        &lt;button @click="num++"&gt;按钮&lt;/</span>button&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure>

<p>总结：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在vue使用的过程中，如果要初始化操作，把初始化操作的代码放在 mounted 中执行。</span><br><span class="line">mounted阶段就是在vm对象已经把data数据实现到页面以后。一般页面初始化使用。例如，用户访问页面加载成功以后，就要执行的ajax请求。</span><br><span class="line"></span><br><span class="line">另一个就是created，这个阶段就是在 vue对象创建以后，把ajax请求后端数据的代码放进 created</span><br></pre></td></tr></table></figure>

<h2 id="3-2-阻止事件冒泡和刷新页面"><a href="#3-2-阻止事件冒泡和刷新页面" class="headerlink" title="3.2 阻止事件冒泡和刷新页面"></a>3.2 阻止事件冒泡和刷新页面</h2><p>事件冒泡：指代js中子元素的事件触发以后，会导致父级元素的同类事件一并被触发到。</p>
<p>事件冒泡有好处，也有坏处。</p>
<p>好处：如果能正确利用这种现象，可以实现事件委托，提升特效的性能</p>
<p>坏处：如果没有正确使用，则会导致不必要的bug出现。</p>
<p>使用.stop和.prevent</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.box1</span>&#123;</span></span><br><span class="line">            width: 200px;</span><br><span class="line">            height: 200px;</span><br><span class="line"><span class="css">            <span class="selector-tag">background</span>: <span class="selector-id">#ccc</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.box2</span>&#123;</span></span><br><span class="line">            width: 100px;</span><br><span class="line">            height: 100px;</span><br><span class="line">            background: pink;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/vue.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el:<span class="string">"#app"</span>,</span></span><br><span class="line">            data:&#123;&#125;</span><br><span class="line">        &#125;)        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box1"</span> @<span class="attr">click</span>=<span class="string">"alert('box1')"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box2"</span> @<span class="attr">click.stop.prevent</span>=<span class="string">"alert('box2')"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>   <span class="comment">&lt;!-- @click.stop来阻止事件冒泡 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"#"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交02"</span> @<span class="attr">click.prevent</span>=<span class="string">""</span>&gt;</span> <span class="comment">&lt;!-- @click.prevent来阻止表单提交 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="3-3-综合案例-todolist"><a href="#3-3-综合案例-todolist" class="headerlink" title="3.3 综合案例-todolist"></a>3.3 综合案例-todolist</h2><p>我的计划列表</p>
<p>html代码:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>todolist<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css">		<span class="selector-class">.list_con</span>&#123;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">width</span><span class="selector-pseudo">:600px</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">margin</span><span class="selector-pseudo">:50px</span> <span class="selector-tag">auto</span> 0;</span></span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="selector-class">.inputtxt</span>&#123;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">width</span><span class="selector-pseudo">:550px</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">height</span><span class="selector-pseudo">:30px</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">border</span><span class="selector-pseudo">:1px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ccc</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">padding</span><span class="selector-pseudo">:0px</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">text-indent</span><span class="selector-pseudo">:10px</span>;</span></span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="selector-class">.inputbtn</span>&#123;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">width</span><span class="selector-pseudo">:40px</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">height</span><span class="selector-pseudo">:32px</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">padding</span><span class="selector-pseudo">:0px</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">border</span><span class="selector-pseudo">:1px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ccc</span>;</span></span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="selector-class">.list</span>&#123;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">margin</span><span class="selector-pseudo">:0</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">padding</span><span class="selector-pseudo">:0</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">list-style</span><span class="selector-pseudo">:none</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">margin-top</span><span class="selector-pseudo">:20px</span>;</span></span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="selector-class">.list</span> <span class="selector-tag">li</span>&#123;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">height</span><span class="selector-pseudo">:40px</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">line-height</span><span class="selector-pseudo">:40px</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">border-bottom</span><span class="selector-pseudo">:1px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ccc</span>;</span></span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line"><span class="css">		<span class="selector-class">.list</span> <span class="selector-tag">li</span> <span class="selector-tag">span</span>&#123;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">float</span><span class="selector-pseudo">:left</span>;</span></span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line"><span class="css">		<span class="selector-class">.list</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span>&#123;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">float</span><span class="selector-pseudo">:right</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">text-decoration</span><span class="selector-pseudo">:none</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">margin</span><span class="selector-pseudo">:0</span> 10<span class="selector-tag">px</span>;</span></span><br><span class="line">		&#125;</span><br><span class="line">	<span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list_con"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">h2</span>&gt;</span>To do list<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">"txt1"</span> <span class="attr">class</span>=<span class="string">"inputtxt"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">"增加"</span> <span class="attr">id</span>=<span class="string">"btn1"</span> <span class="attr">class</span>=<span class="string">"inputbtn"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"list"</span> <span class="attr">class</span>=<span class="string">"list"</span>&gt;</span></span><br><span class="line">			<span class="comment">&lt;!-- javascript:; # 阻止a标签跳转 --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">span</span>&gt;</span>学习html<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">class</span>=<span class="string">"up"</span>&gt;</span> ↑ <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">class</span>=<span class="string">"down"</span>&gt;</span> ↓ <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">class</span>=<span class="string">"del"</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>学习css<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">class</span>=<span class="string">"up"</span>&gt;</span> ↑ <span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">class</span>=<span class="string">"down"</span>&gt;</span> ↓ <span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">class</span>=<span class="string">"del"</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>学习javascript<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">class</span>=<span class="string">"up"</span>&gt;</span> ↑ <span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">class</span>=<span class="string">"down"</span>&gt;</span> ↓ <span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">class</span>=<span class="string">"del"</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>特效实现效果：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>todolist<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css">		<span class="selector-class">.list_con</span>&#123;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">width</span><span class="selector-pseudo">:600px</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">margin</span><span class="selector-pseudo">:50px</span> <span class="selector-tag">auto</span> 0;</span></span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="selector-class">.inputtxt</span>&#123;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">width</span><span class="selector-pseudo">:550px</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">height</span><span class="selector-pseudo">:30px</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">border</span><span class="selector-pseudo">:1px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ccc</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">padding</span><span class="selector-pseudo">:0px</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">text-indent</span><span class="selector-pseudo">:10px</span>;</span></span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="selector-class">.inputbtn</span>&#123;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">width</span><span class="selector-pseudo">:40px</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">height</span><span class="selector-pseudo">:32px</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">padding</span><span class="selector-pseudo">:0px</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">border</span><span class="selector-pseudo">:1px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ccc</span>;</span></span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="selector-class">.list</span>&#123;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">margin</span><span class="selector-pseudo">:0</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">padding</span><span class="selector-pseudo">:0</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">list-style</span><span class="selector-pseudo">:none</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">margin-top</span><span class="selector-pseudo">:20px</span>;</span></span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="selector-class">.list</span> <span class="selector-tag">li</span>&#123;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">height</span><span class="selector-pseudo">:40px</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">line-height</span><span class="selector-pseudo">:40px</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">border-bottom</span><span class="selector-pseudo">:1px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ccc</span>;</span></span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line"><span class="css">		<span class="selector-class">.list</span> <span class="selector-tag">li</span> <span class="selector-tag">span</span>&#123;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">float</span><span class="selector-pseudo">:left</span>;</span></span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line"><span class="css">		<span class="selector-class">.list</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span>&#123;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">float</span><span class="selector-pseudo">:right</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">text-decoration</span><span class="selector-pseudo">:none</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">margin</span><span class="selector-pseudo">:0</span> 10<span class="selector-tag">px</span>;</span></span><br><span class="line">		&#125;</span><br><span class="line">	<span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"todolist"</span> <span class="attr">class</span>=<span class="string">"list_con"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">h2</span>&gt;</span>To do list<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"message"</span> <span class="attr">class</span>=<span class="string">"inputtxt"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> @<span class="attr">click</span>=<span class="string">"addItem"</span> <span class="attr">value</span>=<span class="string">"增加"</span> <span class="attr">class</span>=<span class="string">"inputbtn"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"list"</span> <span class="attr">class</span>=<span class="string">"list"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"item,key in dolist"</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">a</span> @<span class="attr">click</span>=<span class="string">"upItem(key)"</span> <span class="attr">class</span>=<span class="string">"up"</span> &gt;</span> ↑ <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">a</span> @<span class="attr">click</span>=<span class="string">"downItem(key)"</span> <span class="attr">class</span>=<span class="string">"down"</span>&gt;</span> ↓ <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">a</span> @<span class="attr">click</span>=<span class="string">"delItem(key)"</span> <span class="attr">class</span>=<span class="string">"del"</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 计划列表代码</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el:<span class="string">"#todolist"</span>,</span></span><br><span class="line">        data:&#123;</span><br><span class="line"><span class="actionscript">            message:<span class="string">""</span>,</span></span><br><span class="line">            dolist:[</span><br><span class="line"><span class="actionscript">                <span class="string">"学习html"</span>,</span></span><br><span class="line"><span class="actionscript">                <span class="string">"学习css"</span>,</span></span><br><span class="line"><span class="actionscript">                <span class="string">"学习javascript"</span>,</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">            addItem()&#123;</span><br><span class="line"><span class="actionscript">                <span class="keyword">if</span>(<span class="keyword">this</span>.messsage==<span class="string">""</span>)&#123;</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.dolist.push(<span class="keyword">this</span>.message);</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.message = <span class="string">""</span></span></span><br><span class="line">            &#125;,</span><br><span class="line">            delItem(key)&#123;</span><br><span class="line"><span class="actionscript">                <span class="comment">// 删除和替换</span></span></span><br><span class="line"><span class="actionscript">                <span class="comment">// 参数1: 开始下表</span></span></span><br><span class="line"><span class="actionscript">                <span class="comment">// 参数2: 元素长度，如果不填默认删除到最后</span></span></span><br><span class="line"><span class="actionscript">                <span class="comment">// 参数3: 表示使用当前参数替换已经删除内容的位置</span></span></span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.dolist.splice(key, <span class="number">1</span>);</span></span><br><span class="line">            &#125;,</span><br><span class="line">            upItem(key)&#123;</span><br><span class="line">                if(key==0)&#123;</span><br><span class="line"><span class="actionscript">                    <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line">                &#125;</span><br><span class="line"><span class="actionscript">                <span class="comment">// 向上移动</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">let</span> result = <span class="keyword">this</span>.dolist.splice(key,<span class="number">1</span>);</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.dolist.splice(key<span class="number">-1</span>,<span class="number">0</span>,result[<span class="number">0</span>]);</span></span><br><span class="line">            &#125;,</span><br><span class="line">            downItem(key)&#123;</span><br><span class="line"><span class="actionscript">                <span class="comment">// 向下移动</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">let</span> result = <span class="keyword">this</span>.dolist.splice(key, <span class="number">1</span>);</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(result);</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.dolist.splice(key+<span class="number">1</span>,<span class="number">0</span>,result[<span class="number">0</span>]);</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>vue框架</tag>
      </tags>
  </entry>
  <entry>
    <title>[axios实现数据请求]</title>
    <url>/2020/03/05/axios%E5%AE%9E%E7%8E%B0%E6%95%B0%E6%8D%AE%E8%AF%B7%E6%B1%82/</url>
    <content><![CDATA[<h1 id="4-通过axios实现数据请求"><a href="#4-通过axios实现数据请求" class="headerlink" title="4. 通过axios实现数据请求"></a>4. 通过axios实现数据请求</h1><p>vue.js默认没有提供ajax功能的。</p>
<p>所以使用vue的时候，一般都会使用axios的插件来实现ajax与后端服务器的数据交互。</p>
<p>注意，axios本质上就是javascript的ajax封装，所以会被<strong>同源策略</strong>限制。</p>
<p>下载地址：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;unpkg.com&#x2F;axios@0.18.0&#x2F;dist&#x2F;axios.js</span><br><span class="line">https:&#x2F;&#x2F;unpkg.com&#x2F;axios@0.18.0&#x2F;dist&#x2F;axios.min.js</span><br></pre></td></tr></table></figure>

<p>使用文档：<a href="https://www.kancloud.cn/yunye/axios/234845" target="_blank" rel="noopener">https://www.kancloud.cn/yunye/axios/234845</a> </p>
<p>axios提供发送http请求的常用方法有两个：axios.get() 和 axios.post() 。</p>
<p>增 post</p>
<p>删 delete</p>
<p>改 put/patch</p>
<p>查 get</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">// 发送get请求</span><br><span class="line">    // 参数1: 必填，字符串，请求的数据接口的url地址，例如请求地址：http://www.baidu.com?id=200</span><br><span class="line">    // 参数2：可选，请求参数和请求头内容，json对象，要提供给数据接口的参数</span><br><span class="line">	axios.get('服务器的资源地址',&#123; // http://www.baidu.com</span><br><span class="line">    	params:&#123;</span><br><span class="line">    		参数名:'参数值', // id: 200,</span><br><span class="line">    	&#125;,</span><br><span class="line">        headers:&#123;</span><br><span class="line">            选项名:'选项值', // 请求头</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">    &#125;).then(response=&gt;&#123; // 请求成功以后的回调函数</span><br><span class="line">    		console.log("请求成功");</span><br><span class="line">    		console.log(response.data); // 获取服务端提供的数据</span><br><span class="line">    </span><br><span class="line">    &#125;).catch(error=&gt;&#123;   // 请求失败以后的回调函数</span><br><span class="line">    		console.log("请求失败");</span><br><span class="line">    		console.log(error.response);  // 获取错误信息</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">	// 发送post请求，参数和使用和axios.get()类似。</span><br><span class="line">    // 参数1: 必填，字符串，请求的数据接口的url地址</span><br><span class="line">    // 参数2：必填，json对象，要提供给数据接口的参数,如果没有参数，则必须使用&#123;&#125;</span><br><span class="line">    // 参数3：可选，json对象，请求头信息</span><br><span class="line">    axios.post('服务器的资源地址',&#123;</span><br><span class="line">    	username: 'xiaoming',</span><br><span class="line">    	password: '123456'</span><br><span class="line">    &#125;,&#123;</span><br><span class="line">        headers:&#123;</span><br><span class="line">            选项名:"选项值",</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    .then(response=&gt;&#123; // 请求成功以后的回调函数</span><br><span class="line">      console.log(response);</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(error=&gt;&#123;   // 请求失败以后的回调函数</span><br><span class="line">      console.log(error);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">	</span><br><span class="line">	// b'firstName=Fred&amp;lastName=Flintstone'</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：axios.delete() 的用法和参数与axios.get()一样，axios.put()或者axios.patch的用法和参数与axios.post()一样。在http协议中，不同的请求动作都有不同的含义，例如：get 代表向目标服务器请求获取数据post 代表向目标服务器请求上传数据put 代表向目标服务器请求更新数据【修改全部数据】patch 代表向目标服务器请求更新数据【修改部分数据】patch 代表向目标服务器请求更新数据delete 代表向目标服务器请求删除数据</p>
</blockquote>
<h2 id="4-1-json"><a href="#4-1-json" class="headerlink" title="4.1 json"></a>4.1 json</h2><p>json是 JavaScript Object Notation 的首字母缩写，单词的意思是javascript对象表示法，这里说的json指的是类似于javascript对象的一种数据格式。</p>
<p>json的作用：在不同的系统平台，或不同编程语言之间传递数据。</p>
<h3 id="4-1-1-json数据的语法"><a href="#4-1-1-json数据的语法" class="headerlink" title="4.1.1 json数据的语法"></a>4.1.1 json数据的语法</h3><p>json数据对象类似于JavaScript中的对象，但是它的键对应的值里面是没有函数方法的，值可以是普通变量，不支持undefined，值还可以是数组或者json对象。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">// 原生的js的json对象</span><br><span class="line">var obj = &#123;</span><br><span class="line">  age:10,</span><br><span class="line">  sex: '女',</span><br><span class="line">  work()&#123;                     // work: function()&#123;&#125;的简写</span><br><span class="line">    return "好好学习",</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">// json数据的对象格式,json数据格式,是没有方法的,只有属性,属性值：字符串，数值(整数，浮点数，布尔值), json，</span><br><span class="line">&#123;</span><br><span class="line">    "name":"tom",</span><br><span class="line">    "age":18</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// json数据的数组格式：</span><br><span class="line">["tom",18,"programmer"]</span><br></pre></td></tr></table></figure>

<p>复杂的json格式数据可以包含对象和数组的写法。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  "name":"小明",</span><br><span class="line">  "age":200,</span><br><span class="line">  "is_delete": false,</span><br><span class="line">  "fav":["code","eat","swim","read"],</span><br><span class="line">  "son":&#123;</span><br><span class="line">    "name":"小小明",</span><br><span class="line">    "age":100,</span><br><span class="line">    "lve":["code","eat"]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 数组结构也可以作为json传输数据。</span><br></pre></td></tr></table></figure>

<p>json数据可以保存在.json文件中，一般里面就只有一个json对象。</p>
<p>总结：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">1. json文件的后缀是.json</span><br><span class="line">2. json文件一般保存一个单一的json数据</span><br><span class="line">3. json数据的属性不能是方法或者undefined，属性值只能：数值[整数,小数,布尔值]、字符串、json和数组</span><br><span class="line">4. json数据只使用双引号、每一个属性成员之间使用逗号隔开，并且最后一个成员没有逗号。</span><br><span class="line">   &#123;</span><br><span class="line">      "name":"小明",</span><br><span class="line">      "age":200,</span><br><span class="line">      "fav":["code","eat","swim","read"],</span><br><span class="line">      "son":&#123;</span><br><span class="line">        "name":"小小明",</span><br><span class="line">        "age":100</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>工具：postman可以用于测试开发的数据接口。</p>
<p>postman就是一个软件，专门提供给开发者组织和测试http请求的。</p>
<h3 id="4-1-2-js中提供的json数据转换方法"><a href="#4-1-2-js中提供的json数据转换方法" class="headerlink" title="4.1.2 js中提供的json数据转换方法"></a>4.1.2 js中提供的json数据转换方法</h3><p>javascript提供了一个JSON对象来操作json数据的数据转换.</p>
<p><a href="https://www.notion.so/8fe50f7a4efa43928d60a768c7ed7d5e" target="_blank" rel="noopener">Untitled</a></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// json语法</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> humen = &#123;</span></span><br><span class="line"><span class="actionscript">        <span class="string">"username"</span>:<span class="string">"xiaohui"</span>,</span></span><br><span class="line"><span class="actionscript">        <span class="string">"password"</span>:<span class="string">"1234567"</span>,</span></span><br><span class="line"><span class="actionscript">        <span class="string">"age"</span>:<span class="number">20</span></span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(humen);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span> humen);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// JSON对象提供对json格式数据的转换功能</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// stringify(json对象)  # 用于把json转换成字符串</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> result = <span class="built_in">JSON</span>.stringify(humen);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(result);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span> result);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// parse(字符串类型的json数据)  # 用于把字符串转成json对象</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> json_str = <span class="string">'&#123;"password":"1123","age":20,"name":"xiaobai"&#125;'</span>;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(json_str)</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span> json_str)</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> json_obj = <span class="built_in">JSON</span>.parse(json_str);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(json_obj);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span> json_obj)</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(json_obj.age)</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="4-2-ajax"><a href="#4-2-ajax" class="headerlink" title="4.2 ajax"></a>4.2 ajax</h2><p>ajax，一般中文称之为：“阿贾克斯”，是英文 “Async Javascript And Xml”的简写，译作：异步js和xml数据传输数据。</p>
<p>ajax的作用： ajax可以让js代替浏览器向后端程序发送http请求，与后端通信，在用户不知道的情况下操作数据和信息，从而实现页面局部刷新数据/无刷新更新数据。</p>
<p>所以web开发中ajax是很常用的技术，主要用于操作后端提供的<code>数据接口</code>，从而实现网站的<code>前后端分离</code>。</p>
<p>ajax技术的原理是实例化js的XMLHttpRequest对象，使用此对象提供的内置方法就可以与后端进行数据通信。</p>
<blockquote>
<p>实际而言，axios或者jQuery提供的ajax，本质上就是XMLHttpRequest对象操作的封装。</p>
</blockquote>
<h3 id="4-2-1-数据接口"><a href="#4-2-1-数据接口" class="headerlink" title="4.2.1 数据接口"></a>4.2.1 数据接口</h3><p>数据接口，也叫api接口，表示<code>后端提供</code>操作数据/功能的url地址给客户端使用。</p>
<p>客户端通过发起请求向服务端提供的url地址申请操作数据【操作一般：增删查改】</p>
<p>同时在工作中，大部分数据接口都不是手写，而是通过函数库/框架来生成。</p>
<h3 id="4-2-3-ajax的使用"><a href="#4-2-3-ajax的使用" class="headerlink" title="4.2.3 ajax的使用"></a>4.2.3 ajax的使用</h3><p>ajax的使用必须与服务端程序配合使用，但是目前我们先学习ajax的使用，所以暂时先不涉及到服务端python代码的编写。因此，我们可以使用别人写好的数据接口进行调用。</p>
<p>jQuery将ajax封装成了一个函数$.ajax()，我们可以直接用这个函数来执行ajax请求。</p>
<p><a href="https://www.notion.so/0f1a5c944f72459f8bb31bd8f5fb4c98" target="_blank" rel="noopener">Untitled</a></p>
<p>编写代码获取接口提供的数据：</p>
<p>jQ版本</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery-1.12.4.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        $(<span class="string">"#btn"</span>).on(<span class="string">"click"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            $.ajax(&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="comment">// 后端程序的url地址</span></span></span><br><span class="line"><span class="actionscript">                url: <span class="string">'http://wthrcdn.etouch.cn/weather_mini'</span>,</span></span><br><span class="line"><span class="actionscript">                <span class="comment">// 也可以使用method，提交数据的方式，默认是'GET'，常用的还有'POST'</span></span></span><br><span class="line"><span class="actionscript">                type: <span class="string">'get'</span>, </span></span><br><span class="line"><span class="actionscript">                dataType: <span class="string">'json'</span>,  <span class="comment">// 返回的数据格式，常用的有是'json','html',"jsonp"</span></span></span><br><span class="line"><span class="actionscript">                data:&#123; <span class="comment">// 设置发送给服务器的数据，如果是get请求，也可以写在url地址的?后面</span></span></span><br><span class="line"><span class="actionscript">                    <span class="string">"city"</span>:<span class="string">'北京'</span></span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line"><span class="actionscript">            .done(<span class="function"><span class="keyword">function</span><span class="params">(resp)</span> </span>&#123;     <span class="comment">// 请求成功以后的操作</span></span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(resp);</span></span><br><span class="line">            &#125;)</span><br><span class="line"><span class="actionscript">            .fail(<span class="function"><span class="keyword">function</span><span class="params">(error)</span> </span>&#123;    <span class="comment">// 请求失败以后的操作</span></span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(error);</span></span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn"</span>&gt;</span>点击获取数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>vue版本：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/axios.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"city"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"get_weather"</span>&gt;</span>点击获取天气<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el:<span class="string">"#app"</span>,</span></span><br><span class="line">            data:&#123;</span><br><span class="line"><span class="actionscript">                city:<span class="string">""</span>,</span></span><br><span class="line">            &#125;,</span><br><span class="line">            methods:&#123;</span><br><span class="line">                get_weather()&#123;</span><br><span class="line"><span class="actionscript">                    <span class="comment">// http://wthrcdn.etouch.cn/weather_mini?city=城市名称</span></span></span><br><span class="line"><span class="actionscript">                    axios.get(<span class="string">"http://wthrcdn.etouch.cn/weather_mini?city="</span>+<span class="keyword">this</span>.city)</span></span><br><span class="line"><span class="javascript">                        .then(<span class="function"><span class="params">response</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="javascript">                            <span class="built_in">console</span>.log(response);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">                        &#125;).catch(<span class="function"><span class="params">error</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="javascript">                            <span class="built_in">console</span>.log(error.response)</span></span><br><span class="line">                    &#125;);</span><br><span class="line"><span class="actionscript">                  <span class="comment">// 上面的参数写法,也可以是下面这种格式:</span></span></span><br><span class="line"><span class="actionscript">                  <span class="comment">// axios.get("http://wthrcdn.etouch.cn/weather_mini",&#123;</span></span></span><br><span class="line"><span class="actionscript">                  <span class="comment">//     // get请求的附带参数</span></span></span><br><span class="line"><span class="actionscript">                  <span class="comment">//     params:&#123;</span></span></span><br><span class="line"><span class="actionscript">                  <span class="comment">//         "city":"广州",</span></span></span><br><span class="line"><span class="actionscript">                  <span class="comment">//     &#125;</span></span></span><br><span class="line"><span class="actionscript">                  <span class="comment">// &#125;).then(response=&gt;&#123;</span></span></span><br><span class="line"><span class="actionscript">                  <span class="comment">//     console.log(response.data);  // 获取接口数据</span></span></span><br><span class="line"><span class="actionscript">                  <span class="comment">// &#125;).catch(error=&gt;&#123;</span></span></span><br><span class="line"><span class="actionscript">                  <span class="comment">//     console.log(error.response); // 获取错误信息</span></span></span><br><span class="line"><span class="actionscript">                  <span class="comment">// &#125;)</span></span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="4-2-4-同源策略"><a href="#4-2-4-同源策略" class="headerlink" title="4.2.4 同源策略"></a>4.2.4 同源策略</h3><p>同源策略，是浏览器为了保护用户信息安全的一种安全机制。所谓的同源就是指代通信的两个地址（例如服务端接口地址与浏览器客户端页面地址）之间比较，是否协议、域名(IP)和端口相同。不同源的客户端脚本[javascript]在没有得到服务端的明确授权的情况下，浏览器会拒绝显示服务端信息提供给前端ajax。</p>
<p>ajax本质上还是javascript，是运行在浏览器中的脚本语言，所以会被受到浏览器的同源策略所限制。</p>
<p><a href="https://www.notion.so/0730f54d7bed4eafb90711219f6aa2a6" target="_blank" rel="noopener">Untitled</a></p>
<p>同源策略针对ajax的拦截，代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/axios.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"music"</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"get_music"</span>&gt;</span>查询歌曲<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el:<span class="string">"#app"</span>,</span></span><br><span class="line">            data:&#123;</span><br><span class="line"><span class="actionscript">                music:<span class="string">""</span>, <span class="comment">// 歌曲标题</span></span></span><br><span class="line">            &#125;,</span><br><span class="line">            methods:&#123;</span><br><span class="line">                get_music()&#123;</span><br><span class="line"><span class="actionscript">                    axios.get(`http:<span class="comment">//tingapi.ting.baidu.com/v1/restserver/ting`,&#123;</span></span></span><br><span class="line">                        params:&#123;</span><br><span class="line"><span class="actionscript">                            method:<span class="string">"baidu.ting.search.catalogSug"</span>,</span></span><br><span class="line"><span class="actionscript">                            query:<span class="keyword">this</span>.music,</span></span><br><span class="line">                        &#125;</span><br><span class="line"><span class="javascript">                    &#125;).then(<span class="function"><span class="params">response</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">console</span>.log(<span class="string">"查询数据成功！"</span>);</span></span><br><span class="line"><span class="javascript">                    &#125;).catch(<span class="function"><span class="params">error</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">console</span>.log(<span class="string">"查询数据失败！"</span>);</span></span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>上面代码运行错误如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Access to XMLHttpRequest at <span class="string">'http://tingapi.ting.baidu.com/v1/restserver/ting?method=baidu.ting.search.catalogSug&amp;query=%E6%88%91%E7%9A%84%E4%B8%AD%E5%9B%BD%E5%BF%83'</span> <span class="keyword">from</span> origin <span class="string">'http://localhost:63342'</span> has been blocked by CORS policy: No <span class="string">'Access-Control-Allow-Origin'</span> header <span class="keyword">is</span> present on the requested resource.</span><br></pre></td></tr></table></figure>

<p>上面错误，关键词：Access-Control-Allow-Origin</p>
<p>只要出现这个关键词，就是访问受限。出现同源策略的拦截问题。</p>
<h3 id="4-2-5-ajax跨域-跨源-方案之CORS"><a href="#4-2-5-ajax跨域-跨源-方案之CORS" class="headerlink" title="4.2.5 ajax跨域(跨源)方案之CORS"></a>4.2.5 ajax跨域(跨源)方案之CORS</h3><p>ajax跨域(跨源)方案：服务端授权[CORS]，jsonp，服务端代理</p>
<p> CORS是一个W3C标准，全称是“跨域资源共享”，它允许浏览器向跨源的后端服务器发出ajax请求，从而克服了AJAX只能同源使用的限制。</p>
<p> 实现CORS主要依靠后端服务器中响应数据中设置响应头信息返回的。</p>
<p>django的视图[伪代码]</p>
<p>def post(request):</p>
<p> response = new Response()</p>
<p> response .set_header(“Access-Control-Allow-Origin”,“<a href="http://localhost:63342”">http://localhost:63342”</a>)</p>
<p> return response;</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">// 在响应行信息里面设置以下内容：</span><br><span class="line">Access-Control-Allow-Origin: ajax所在的域名地址</span><br><span class="line"></span><br><span class="line">Access-Control-Allow-Origin: www.oldboy.cn  <span class="comment"># 表示只允许www.oldboy.cn域名的客户端的ajax跨域访问</span></span><br><span class="line"></span><br><span class="line">// * 表示任意源，表示允许任意源下的客户端的ajax都可以访问当前服务端信息</span><br><span class="line">Access-Control-Allow-Origin: *</span><br></pre></td></tr></table></figure>

<p><img src="vue%203%20f43aebd10ddf414f9af03ff19085b999/1556074087897.png" alt="vue%203%20f43aebd10ddf414f9af03ff19085b999/1556074087897.png"></p>
<p>1556074087897</p>
<p>总结：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0. 同源策略：浏览器的一种保护用户数据的一种安全机制。</span><br><span class="line">   浏览器会限制ajax不能跨源访问其他源的数据地址。</span><br><span class="line">   同源：判断两个通信的地址之间，是否协议，域名[IP]，端口一致。</span><br><span class="line">   </span><br><span class="line">   ajax：  http:&#x2F;&#x2F;127.0.0.1&#x2F;index.html</span><br><span class="line">   api数据接口：  http:&#x2F;&#x2F;localhost&#x2F;index</span><br><span class="line">   </span><br><span class="line">   这两个是同源么？不是同源的。是否同源的判断依据不会根据电脑来判断，而是通过协议、域名、端口的字符串是否来判断。</span><br><span class="line">   </span><br><span class="line">1. ajax默认情况下会受到同源策略的影响，一旦受到影响会报错误如下：</span><br><span class="line">	 No &#39;Access-Control-Allow-Origin&#39; header is present on the requested resource</span><br><span class="line"></span><br><span class="line">2. 解决ajax只能同源访问数据接口的方式：</span><br><span class="line">   1. CORS，跨域资源共享，在服务端的响应行中设置：</span><br><span class="line">      Access-Control-Allow-Origin: 允许访问的域名地址</span><br><span class="line">   2. jsonp</span><br><span class="line">   	  所谓的jsonp本质上来说不是ajax技术，jsonp的核心实现是依靠script本身加载外部js文件来实现的。</span><br><span class="line">   	  当然，实现jsonp技术，也需要服务端的配合</span><br><span class="line">   3. 是否服务端代理</span><br><span class="line">      思路：通过python来请求对应的服务器接口，客户端和python这边处于同源，那么就实现了服务端代理</span><br></pre></td></tr></table></figure>

<h1 id="5-组件化开发"><a href="#5-组件化开发" class="headerlink" title="5. 组件化开发"></a>5. 组件化开发</h1><h2 id="5-1-组件-component"><a href="#5-1-组件-component" class="headerlink" title="5.1 组件[component]"></a>5.1 组件[component]</h2><p>组件（Component）是自定义封装的功能。在前端开发过程中，经常出现多个网页的功能是重复的，而且很多不同的页面之间，也存在同样的功能。</p>
<p>而在网页中实现一个功能，需要使用html定义功能的内容结构，使用css声明功能的外观样式，还要使用js来定义功能的特效，因此就产生了把一个功能相关的[HTML、css和javascript]代码封装在一起组成一个整体的代码块封装模式，我们称之为“组件”。</p>
<p>所以，组件就是一个html网页中的功能，一般就是一个标签，标签中有自己的html内容结构，css样式和js特效。</p>
<p>这样，前端人员就可以在组件化开发时，只需要书写一次代码，随处引入即可使用。</p>
<p>vue的组件有两种：默认组件[全局组件] 和 单文件组件</p>
<h3 id="5-1-1-默认组件"><a href="#5-1-1-默认组件" class="headerlink" title="5.1.1 默认组件"></a>5.1.1 默认组件</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">addnum</span>&gt;</span><span class="tag">&lt;/<span class="name">addnum</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">addnum</span>&gt;</span><span class="tag">&lt;/<span class="name">addnum</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">addnum</span>&gt;</span><span class="tag">&lt;/<span class="name">addnum</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">addnum</span>&gt;</span><span class="tag">&lt;/<span class="name">addnum</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">addnum</span>&gt;</span><span class="tag">&lt;/<span class="name">addnum</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    Vue.component(<span class="string">"addnum"</span>,&#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">        template:'<span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"num"</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"num+=1"</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>',</span></span></span><br><span class="line"><span class="actionscript">        data: <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 写在这里的数据只有当前组件可以使用</span></span></span><br><span class="line"><span class="actionscript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line">                num:1,</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el:<span class="string">"#app"</span>,</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 这里写的数据是全局公用的，整个文件共享</span></span></span><br><span class="line">        data:&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="6-Vue自动化工具（Vue-cli）"><a href="#6-Vue自动化工具（Vue-cli）" class="headerlink" title="6. Vue自动化工具（Vue-cli）"></a>6. Vue自动化工具（Vue-cli）</h1><p>前面学习了普通组件以后，接下来我们继续学习单文件组件则需要提前先安装准备一些组件开发工具。否则无法使用和学习单文件组件。</p>
<p>一般情况下，单文件组件，我们运行在 自动化工具vue-CLI中，可以帮我们编译单文件组件。所以我们需要在系统中先搭建vue-CLI工具，</p>
<p>官网：<a href="https://cli.vuejs.org/zh/" target="_blank" rel="noopener">https://cli.vuejs.org/zh/</a></p>
<p>Vue CLI 需要 <a href="https://nodejs.org/" target="_blank" rel="noopener">Node.js</a> 8.9 或更高版本 (推荐 8.11.0+)。你可以使用 <a href="https://github.com/creationix/nvm" target="_blank" rel="noopener">nvm</a> 或 <a href="https://github.com/coreybutler/nvm-windows" target="_blank" rel="noopener">nvm-windows</a>在同一台电脑中管理多个 Node 版本。</p>
<p>nvm工具的下载和安装： <a href="https://www.jianshu.com/p/d0e0935b150a" target="_blank" rel="noopener">https://www.jianshu.com/p/d0e0935b150a</a></p>
<p> <a href="https://www.jianshu.com/p/622ad36ee020" target="_blank" rel="noopener">https://www.jianshu.com/p/622ad36ee020</a></p>
<p>安装记录:</p>
<p>打开:<a href="https://github.com/coreybutler/nvm-windows/releases" target="_blank" rel="noopener">https://github.com/coreybutler/nvm-windows/releases</a></p>
<p>安装完成以后,先查看环境变量是否设置好了.</p>
<p><img src="vue%203%20f43aebd10ddf414f9af03ff19085b999/1552357036022.png" alt="vue%203%20f43aebd10ddf414f9af03ff19085b999/1552357036022.png"></p>
<p>常用的nvm命令</p>
<p>nvm list # 列出目前在nvm里面安装的所有node版本 nvm install node版本号 # 安装指定版本的node.js nvm uninstall node版本号 # 卸载指定版本的node.js nvm use node版本号 # 切换当前使用的node.js版本</p>
<p>如果使用nvm工具，则直接可以不用自己手动下载，如果使用nvm下载安装 node的npm比较慢的时候，可以修改nvm的配置文件(在安装根目录下)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># settings.txt</span><br><span class="line">root: C:\tool\nvm    [这里的目录地址是安装nvm时自己设置的地址,要根据实际修改]</span><br><span class="line">path: C:\tool\nodejs</span><br><span class="line">arch: 64</span><br><span class="line">proxy: none</span><br><span class="line">node_mirror: http:&#x2F;&#x2F;npm.taobao.org&#x2F;mirrors&#x2F;node&#x2F; </span><br><span class="line">npm_mirror: https:&#x2F;&#x2F;npm.taobao.org&#x2F;mirrors&#x2F;npm&#x2F;</span><br></pre></td></tr></table></figure>

<h2 id="6-1-安装node-js"><a href="#6-1-安装node-js" class="headerlink" title="6.1 安装node.js"></a>6.1 安装node.js</h2><p>Node.js是一个新的后端(后台)语言，它的语法和JavaScript类似，所以可以说它是属于前端的后端语言，后端语言和前端语言的区别：</p>
<ul>
<li>运行环境：后端语言一般运行在服务器端，前端语言运行在客户端的浏览器上</li>
<li>功能：后端语言可以操作文件，可以读写数据库，前端语言不能操作文件，不能读写数据库。</li>
</ul>
<p>我们一般安装LTS(长线支持版本 Long-Time Support)：</p>
<p>下载地址：<a href="https://nodejs.org/en/download/【上面已经安装了nvm，那么这里不用手动安装了】" target="_blank" rel="noopener">https://nodejs.org/en/download/【上面已经安装了nvm，那么这里不用手动安装了】</a></p>
<p>node.js的版本有两大分支：</p>
<p>官方发布的node.js版本：0.xx.xx 这种版本号就是官方发布的版本</p>
<p>社区发布的node.js版本：xx.xx.x 就是社区开发的版本</p>
<p>Node.js如果安装成功，可以查看Node.js的版本,在终端输入如下命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure>

<h2 id="6-2-npm"><a href="#6-2-npm" class="headerlink" title="6.2 npm"></a>6.2 npm</h2><p>在安装node.js完成后，在node.js中会同时帮我们安装一个npm包管理器npm。我们可以借助npm命令来安装node.js的包。这个工具相当于python的pip管理器。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -g 包名              # 安装模块   -g表示全局安装，如果没有-g，则表示在当前项目安装</span><br><span class="line">npm list                        # 查看当前目录下已安装的node包</span><br><span class="line">npm view 包名 engines            # 查看包所依赖的Node的版本 </span><br><span class="line">npm outdated                    # 检查包是否已经过时，命令会列出所有已过时的包</span><br><span class="line">npm update 包名                  # 更新node包</span><br><span class="line">npm uninstall 包名               # 卸载node包</span><br><span class="line">npm 命令 -h                      # 查看指定命令的帮助文档</span><br></pre></td></tr></table></figure>

<h2 id="6-3-安装Vue-cli"><a href="#6-3-安装Vue-cli" class="headerlink" title="6.3 安装Vue-cli"></a>6.3 安装Vue-cli</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -g vue-cli</span><br></pre></td></tr></table></figure>

<p>如果安装速度过慢，一直超时，可以考虑切换npm镜像源：<a href="http://npm.taobao.org/" target="_blank" rel="noopener">http://npm.taobao.org/</a></p>
<h2 id="6-4-使用Vue-CLI初始化创建前端项目"><a href="#6-4-使用Vue-CLI初始化创建前端项目" class="headerlink" title="6.4 使用Vue-CLI初始化创建前端项目"></a>6.4 使用Vue-CLI初始化创建前端项目</h2><h3 id="6-4-1-生成项目目录"><a href="#6-4-1-生成项目目录" class="headerlink" title="6.4.1 生成项目目录"></a>6.4.1 生成项目目录</h3><p>使用vue自动化工具可以快速搭建单页应用项目目录。</p>
<p>该工具为现代化的前端开发工作流提供了开箱即用的构建配置。只需几分钟即可创建并启动一个带热重载、保存时静态检查以及可用于生产环境的构建配置的项目：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 生成一个基于 webpack 模板的新项目</span><br><span class="line">vue init webpack 项目目录名</span><br><span class="line">例如：</span><br><span class="line">vue init webpack myproject</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 启动开发服务器 ctrl+c 停止服务</span><br><span class="line">cd myproject</span><br><span class="line">npm run dev           # 运行这个命令就可以启动node提供的测试http服务器</span><br></pre></td></tr></table></figure>

<p>运行了上面代码以后,终端下会出现以下效果提示：</p>
<p><img src="vue%203%20f43aebd10ddf414f9af03ff19085b999/1552187745456.png" alt="vue%203%20f43aebd10ddf414f9af03ff19085b999/1552187745456.png"></p>
<p>1552187745456</p>
<p>那么访问：<a href="http://localhost:8080/" target="_blank" rel="noopener">http://localhost:8080/</a></p>
<p><img src="vue%203%20f43aebd10ddf414f9af03ff19085b999/1552187794989.png" alt="vue%203%20f43aebd10ddf414f9af03ff19085b999/1552187794989.png"></p>
<p>1552187794989</p>
<h3 id="6-4-2-项目目录结构"><a href="#6-4-2-项目目录结构" class="headerlink" title="6.4.2 项目目录结构"></a>6.4.2 项目目录结构</h3><p>src 主开发目录，要开发的单文件组件全部在这个目录下的components目录下</p>
<p>static 静态资源目录，所有的css，js文件放在这个文件夹</p>
<p>dist项目打包发布文件夹，最后要上线单文件项目文件都在这个文件夹中[后面打包项目,让项目中的vue组件经过编译变成js 代码以后,dist就出现了]</p>
<p>node_modules目录是node的包目录，</p>
<p>config是配置目录，</p>
<p>build是项目打包时依赖的目录</p>
<p>src/router 路由,后面需要我们在使用Router路由的时候,自己声明.</p>
<h3 id="6-4-3-项目执行流程图"><a href="#6-4-3-项目执行流程图" class="headerlink" title="6.4.3 项目执行流程图"></a>6.4.3 项目执行流程图</h3><p><img src="vue%203%20f43aebd10ddf414f9af03ff19085b999/page_structrue.png" alt="vue%203%20f43aebd10ddf414f9af03ff19085b999/page_structrue.png"></p>
<p>page_structrue</p>
<p>整个项目是一个主文件index.html,index.html中会引入src文件夹中的main.js,main.js中会导入顶级单文件组件App.vue,App.vue中会通过组件嵌套或者路由来引用components文件夹中的其他单文件组件。</p>
<h2 id="7-单文件组件的使用"><a href="#7-单文件组件的使用" class="headerlink" title="7. 单文件组件的使用"></a>7. 单文件组件的使用</h2><p>组件有两种：普通组件、单文件组件</p>
<p>普通组件的缺点：</p>
<ol>
<li>html代码是作为js的字符串进行编写，所以组装和开发的时候不易理解，而且没有高亮效果。</li>
<li>普通组件用在小项目中非常合适，但是复杂的大项目中，如果把更多的组件放在html文件中，那么维护成本就会变得非常昂贵。</li>
<li>普通组件只是整合了js和html，但是css代码被剥离出去了。使用的时候的时候不好处理。</li>
</ol>
<p>将一个组件相关的html结构，css样式，以及交互的JavaScript代码从html文件中剥离出来，合成一个文件，这种文件就是单文件组件，相当于一个组件具有了结构、表现和行为的完整功能，方便组件之间随意组合以及组件的重用，这种文件的扩展名为“.vue”，比如：“Home.vue”。</p>
<ol>
<li>创建组件</li>
</ol>
<p><img src="vue%203%20f43aebd10ddf414f9af03ff19085b999/1552362045478.png" alt="vue%203%20f43aebd10ddf414f9af03ff19085b999/1552362045478.png"></p>
<p>1552362045478</p>
<p>在组件中编辑三个标签，编写视图、vm对象和css样式代码。</p>
<h3 id="7-1-template-编写html代码的地方"><a href="#7-1-template-编写html代码的地方" class="headerlink" title="7.1 template 编写html代码的地方"></a>7.1 template 编写html代码的地方</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id&#x3D;&quot;Home&quot;&gt;</span><br><span class="line">    &lt;span @click&#x3D;&quot;num--&quot; class&#x3D;&quot;sub&quot;&gt;-&lt;&#x2F;span&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;text&quot; size&#x3D;&quot;1&quot; v-model&#x3D;&quot;num&quot;&gt;</span><br><span class="line">    &lt;span @click&#x3D;&quot;num++&quot; class&#x3D;&quot;add&quot;&gt;+&lt;&#x2F;span&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br></pre></td></tr></table></figure>

<h3 id="7-2-script编写vue-js代码"><a href="#7-2-script编写vue-js代码" class="headerlink" title="7.2 script编写vue.js代码"></a>7.2 script编写vue.js代码</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name:&quot;Home&quot;,</span><br><span class="line">    data: function()&#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        num:0,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="7-3-style编写当前组件的样式代码"><a href="#7-3-style编写当前组件的样式代码" class="headerlink" title="7.3 style编写当前组件的样式代码"></a>7.3 style编写当前组件的样式代码</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;style scoped&gt;</span><br><span class="line">  .sub,.add&#123;</span><br><span class="line">    border: 1px solid red;</span><br><span class="line">    padding: 4px 7px;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>

<h3 id="7-4-完成案例-点击加减数字"><a href="#7-4-完成案例-点击加减数字" class="headerlink" title="7.4 完成案例-点击加减数字"></a>7.4 完成案例-点击加减数字</h3><p>创建Homes.vue</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;add_num&quot;&gt;</span><br><span class="line">      &lt;span @click&#x3D;&quot;num++&quot;&gt;+&lt;&#x2F;span&gt;</span><br><span class="line">      &lt;input type&#x3D;&quot;text&quot; size&#x3D;&quot;2&quot; v-model&#x3D;&quot;num&quot;&gt;</span><br><span class="line">      &lt;span @click&#x3D;&quot;num--&quot;&gt;-&lt;&#x2F;span&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default&#123;</span><br><span class="line">    name:&quot;AddNum&quot;,</span><br><span class="line">    data: function()&#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        num: 0,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">   .add_num&#123;</span><br><span class="line">      font-size: 32px;</span><br><span class="line">   &#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>

<p>在App.vue组件中调用上面的组件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id&#x3D;&quot;Home&quot;&gt;</span><br><span class="line">    &lt;span @click&#x3D;&quot;num--&quot; class&#x3D;&quot;sub&quot;&gt;-&lt;&#x2F;span&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;text&quot; size&#x3D;&quot;1&quot; v-model&#x3D;&quot;num&quot;&gt;</span><br><span class="line">    &lt;span @click&#x3D;&quot;num++&quot; class&#x3D;&quot;add&quot;&gt;+&lt;&#x2F;span&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name:&quot;Home&quot;,</span><br><span class="line">    data: function()&#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        num:0,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">  .sub,.add&#123;</span><br><span class="line">    border: 1px solid red;</span><br><span class="line">    padding: 4px 7px;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>

<p>在开发vue项目之前，需要手动把 App.vue的HelloWorld组件代码以及默认的css样式，清楚。</p>
<p>上面的代码效果：</p>
<p><img src="vue%203%20f43aebd10ddf414f9af03ff19085b999/1552362182984.png" alt="vue%203%20f43aebd10ddf414f9af03ff19085b999/1552362182984.png"></p>
<p>1552362182984</p>
<h3 id="7-4-组件的嵌套"><a href="#7-4-组件的嵌套" class="headerlink" title="7.4 组件的嵌套"></a>7.4 组件的嵌套</h3><p>有时候开发vue项目时,页面也可以算是一个大组件,同时页面也可以分成多个子组件.</p>
<p>因为,产生了父组件调用子组件的情况.</p>
<p>例如,我们可以声明一个组件,作为父组件</p>
<p>在components/创建一个保存子组件的目录HomeSon</p>
<p><img src="vue%203%20f43aebd10ddf414f9af03ff19085b999/1552363669256.png" alt="vue%203%20f43aebd10ddf414f9af03ff19085b999/1552363669256.png"></p>
<p>1552363669256</p>
<p>在HomeSon目录下,可以创建当前页面的子组件,例如,是Menu.vue</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;  组件中代码必须写在同一个标签中</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div id&#x3D;&quot;menu&quot;&gt;</span><br><span class="line">      &lt;span&gt;&#123;&#123;msg&#125;&#125;&lt;&#x2F;span&gt;</span><br><span class="line">      &lt;div&gt;hello&lt;&#x2F;div&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name:&quot;Menu&quot;,</span><br><span class="line">    data: function()&#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        msg:&quot;这是Menu组件里面的菜单&quot;,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<p>然后，在父组件中调用上面声明的子组件。</p>
<p><img src="vue%203%20f43aebd10ddf414f9af03ff19085b999/1552363770013.png" alt="vue%203%20f43aebd10ddf414f9af03ff19085b999/1552363770013.png"></p>
<p>1552363770013</p>
<p>最后,父组件被App.vue调用.就可以看到页面效果.</p>
<p><img src="vue%203%20f43aebd10ddf414f9af03ff19085b999/1552363834171.png" alt="vue%203%20f43aebd10ddf414f9af03ff19085b999/1552363834171.png"></p>
<p>1552363834171</p>
<p><img src="vue%203%20f43aebd10ddf414f9af03ff19085b999/1552363849977.png" alt="vue%203%20f43aebd10ddf414f9af03ff19085b999/1552363849977.png"></p>
<p>1552363849977</p>
<p>效果:</p>
<p><img src="vue%203%20f43aebd10ddf414f9af03ff19085b999/1552363702858.png" alt="vue%203%20f43aebd10ddf414f9af03ff19085b999/1552363702858.png"></p>
<p>1552363702858</p>
<h3 id="7-5-传递数据"><a href="#7-5-传递数据" class="headerlink" title="7.5 传递数据"></a>7.5 传递数据</h3><h3 id="父组件的数据传递给子组件"><a href="#父组件的数据传递给子组件" class="headerlink" title="父组件的数据传递给子组件"></a>父组件的数据传递给子组件</h3><p>例如,我们希望把父组件的数据传递给子组件.</p>
<p>可以通过props属性来进行数据传递.</p>
<p>传递数据三个步骤：</p>
<ol>
<li><p>在父组件中，调用子组件的组名处，使用属性值的方式往下传递数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;Menu :mynum&#x3D;&quot;num&quot; title&#x3D;&quot;home里面写的数据&quot;&#x2F;&gt;</span><br><span class="line"></span><br><span class="line"># 上面表示在父组件调用Menu子组件的时候传递了2个数据：</span><br><span class="line">  如果要传递变量[变量可以各种类型的数据]，属性名左边必须加上冒号:，同时，属性名是自定义的，会在子组件中使用。</span><br><span class="line">  如果要传递普通字符串数据，则不需要加上冒号:</span><br></pre></td></tr></table></figure>
</li>
<li><p>在子组件中接受上面父组件传递的数据，需要在vm组件对象中，使用props属性类接受。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name:&quot;Menu&quot;,</span><br><span class="line">    props:[&quot;mynum&quot;,&quot;title&quot;],</span><br><span class="line">    data: function()&#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        msg:&quot;这是Menu组件里面的菜单&quot;,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 上面 props属性中表示接受了两个数据。</span><br></pre></td></tr></table></figure>
</li>
<li><p>在子组件中的template中使用父组件传递过来的数据.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div id&#x3D;&quot;menu&quot;&gt;</span><br><span class="line">      &lt;span&gt;&#123;&#123;msg&#125;&#125;，&#123;&#123;title&#125;&#125;&lt;&#x2F;span&gt;</span><br><span class="line">      &lt;div&gt;hello，&#123;&#123;mynum&#125;&#125;&lt;&#x2F;div&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>效果：</p>
<p><img src="vue%203%20f43aebd10ddf414f9af03ff19085b999/1552364511546.png" alt="vue%203%20f43aebd10ddf414f9af03ff19085b999/1552364511546.png"></p>
<p>1552364511546</p>
<p>步骤流程:</p>
<p><img src="vue%203%20f43aebd10ddf414f9af03ff19085b999/1552364590540.png" alt="vue%203%20f43aebd10ddf414f9af03ff19085b999/1552364590540.png"></p>
<p>1552364590540</p>
<p>使用父组件传递数据给子组件时, 注意一下几点:</p>
<ol>
<li><p>传递数据是变量,则需要在属性左边添加冒号.</p>
<p>传递数据是变量,这种数据称之为“动态数据传递”</p>
<p>传递数据不是变量,这种数据称之为“静态数据传递”</p>
</li>
<li><p>父组件中修改了数据,在子组件中会被同步修改,但是,子组件中的数据修改了,是不是影响到父组件中的数据.</p>
<p>这种情况,在开发时,也被称为“单向数据流”</p>
</li>
</ol>
<h3 id="子组件传递数据给父组件"><a href="#子组件传递数据给父组件" class="headerlink" title="子组件传递数据给父组件"></a>子组件传递数据给父组件</h3><ol>
<li><p>在子组件中，通过<code>this.$emit()</code>来调用父组件中定义的事件.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>Post的子组件<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;fnum&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>data=&#123;&#123;data&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>fnum=&#123;&#123;fnum&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"fnum"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">        name: <span class="string">"PostSon"</span>,</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 父组件传递数据给子组件: 1. 在父组件中调用子组件的组件名称标签上面声明属性和传递值，2. 在子组件中通过props进行接收</span></span></span><br><span class="line"><span class="actionscript">        props:[<span class="string">"data"</span>,<span class="string">"fnum"</span>],  <span class="comment">// 接受父组件中传递过来的数据</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 子组件传递数据给父组件[事件的方式进行传递]：</span></span></span><br><span class="line">        watch:&#123;</span><br><span class="line">          fnum()&#123;</span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.fnum);</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// this.$emit("父元素的自定义事件","要传递的数据");  // 通过this.$emit()方法，子组件可以把数据传递给父组件</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">            <span class="keyword">this</span>.$emit(<span class="string">"postparentdata"</span>,<span class="keyword">this</span>.fnum);</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>父组件中声明一个和子组件中<code>this.$emit(&quot;自定义事件名称&quot;)</code>对应的事件属性。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;h1&gt;num&#x3D;&#123;&#123;num&#125;&#125;&lt;&#x2F;h1&gt;</span><br><span class="line">      &lt;Son data&#x3D;&quot;我是付组件里面的内容&quot; :fnum&#x3D;&quot;num&quot; @postparentdata&#x3D;&quot;getsondata&quot;&gt;&lt;&#x2F;Son&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;template&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>父组件中，声明一个自定义方法，在事件被调用时，执行的。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    import Son from &quot;.&#x2F;PostSon&quot;</span><br><span class="line">    export default &#123;</span><br><span class="line">        name: &quot;Post&quot;,</span><br><span class="line">        data()&#123;</span><br><span class="line">          return &#123;</span><br><span class="line">            num: 100,</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        components:&#123;</span><br><span class="line">          Son:Son,</span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">          getsondata(message)&#123;</span><br><span class="line">            console.log(&quot;父组件&quot;+message);</span><br><span class="line">            this.num &#x3D; message;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>作业：</p>
<ol>
<li>使用组件化开发，完成之前的选项卡练习功能</li>
<li>使用组件化开发，完成之前的todolist功能</li>
<li>使用组件化开发，完成table表格的增删查改作业，数据使用本地存储进行保存</li>
</ol>
<h2 id="8-在组件中使用axios获取数据"><a href="#8-在组件中使用axios获取数据" class="headerlink" title="8. 在组件中使用axios获取数据"></a>8. 在组件中使用axios获取数据</h2><p>默认情况下，我们的项目中并没有对axios包的支持，所以我们需要下载安装。</p>
<p>在项目根目录中使用 npm安装包</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">npm install axios</span><br></pre></td></tr></table></figure>

<p>接着在main.js文件中，导入axios并把axios对象 挂载到vue属性中多为一个子对象，这样我们才能在组件中使用。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">// The Vue build version to load <span class="keyword">with</span> the `<span class="keyword">import</span>` command</span><br><span class="line">// (runtime-only <span class="keyword">or</span> standalone) has been set <span class="keyword">in</span> webpack.base.conf <span class="keyword">with</span> an alias.</span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App'</span> // 这里表示从别的目录下导入 单文件组件</span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span>; // 从node_modules目录中导入包</span><br><span class="line">Vue.config.productionTip = false</span><br><span class="line"></span><br><span class="line">Vue.prototype.$axios = axios; // 把对象挂载vue中</span><br><span class="line"></span><br><span class="line">/* eslint-disable no-new */</span><br><span class="line">new Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  components: &#123; App &#125;,</span><br><span class="line">  template: <span class="string">'&lt;App/&gt;'</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="8-1-在组建中使用axios获取数据"><a href="#8-1-在组建中使用axios获取数据" class="headerlink" title="8.1 在组建中使用axios获取数据"></a>8.1 在组建中使用axios获取数据</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line">	。。。</span><br><span class="line">	methods:&#123;</span><br><span class="line">      get_data:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">         <span class="comment">// 使用axios请求数据</span></span><br><span class="line">        <span class="keyword">this</span>.$axios.get(<span class="string">"http://wthrcdn.etouch.cn/weather_mini?city=深圳"</span>).then(<span class="function">(<span class="params">response</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(response);</span><br><span class="line">        &#125;).catch(<span class="function"><span class="params">error</span>=&gt;</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(error);</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果:</p>
<p><img src="vue%203%20f43aebd10ddf414f9af03ff19085b999/1552202922168.png" alt="vue%203%20f43aebd10ddf414f9af03ff19085b999/1552202922168.png"></p>
<p>1552202922168</p>
<p>使用的时候，因为本质上来说，我们还是原来的axios，所以也会收到同源策略的影响。</p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>vue框架</tag>
      </tags>
  </entry>
  <entry>
    <title>[表与表关系]</title>
    <url>/2019/10/11/%E8%A1%A8%E4%B8%8E%E8%A1%A8%E5%85%B3%E7%B3%BB/</url>
    <content><![CDATA[<h3 id="约束条件"><a href="#约束条件" class="headerlink" title="约束条件"></a>约束条件</h3><h3 id="default默认值"><a href="#default默认值" class="headerlink" title="default默认值"></a>default默认值</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 补充知识点  插入数据的时候可以指定字段</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t1(</span><br><span class="line">	<span class="keyword">id</span> <span class="built_in">int</span>,</span><br><span class="line">    <span class="keyword">name</span> <span class="built_in">char</span>(<span class="number">16</span>)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t1(<span class="keyword">name</span>,<span class="keyword">id</span>) <span class="keyword">values</span>(<span class="string">'jason'</span>,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t2(</span><br><span class="line">	<span class="keyword">id</span> <span class="built_in">int</span>,</span><br><span class="line">    <span class="keyword">name</span> <span class="built_in">char</span>(<span class="number">16</span>),</span><br><span class="line">    gender enum(<span class="string">'male'</span>,<span class="string">'female'</span>,<span class="string">'others'</span>) <span class="keyword">default</span> <span class="string">'male'</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t2(<span class="keyword">id</span>,<span class="keyword">name</span>) <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">'jason'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t2 <span class="keyword">values</span>(<span class="number">2</span>,<span class="string">'egon'</span>,<span class="string">'female'</span>);</span><br></pre></td></tr></table></figure>

<h3 id="unique唯一"><a href="#unique唯一" class="headerlink" title="unique唯一"></a>unique唯一</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 单列唯一</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t3(</span><br><span class="line">	<span class="keyword">id</span> <span class="built_in">int</span> <span class="keyword">unique</span>,</span><br><span class="line">    <span class="keyword">name</span> <span class="built_in">char</span>(<span class="number">16</span>)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t3 <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">'jason'</span>),(<span class="number">1</span>,<span class="string">'egon'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t3 <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">'jason'</span>),(<span class="number">2</span>,<span class="string">'egon'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment"># 联合唯一</span></span><br><span class="line">"""</span><br><span class="line">ip和port</span><br><span class="line">单个都可以重复 但是加载一起必须是唯一的</span><br><span class="line">"""</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t4(</span><br><span class="line">	<span class="keyword">id</span> <span class="built_in">int</span>,</span><br><span class="line">    ip <span class="built_in">char</span>(<span class="number">16</span>),</span><br><span class="line">    port <span class="built_in">int</span>,</span><br><span class="line">    <span class="keyword">unique</span>(ip,port)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t4 <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">'127.0.0.1'</span>,<span class="number">8080</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t4 <span class="keyword">values</span>(<span class="number">2</span>,<span class="string">'127.0.0.1'</span>,<span class="number">8081</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t4 <span class="keyword">values</span>(<span class="number">3</span>,<span class="string">'127.0.0.2'</span>,<span class="number">8080</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t4 <span class="keyword">values</span>(<span class="number">4</span>,<span class="string">'127.0.0.1'</span>,<span class="number">8080</span>);  报错</span><br></pre></td></tr></table></figure>

<h3 id="primary-key主键"><a href="#primary-key主键" class="headerlink" title="primary key主键"></a>primary key主键</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">"""</span><br><span class="line">1.单单从约束效果上来看primary key等价于not null + unique</span><br><span class="line">非空且唯一！！！</span><br><span class="line">"""</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t5(<span class="keyword">id</span> <span class="built_in">int</span> primary <span class="keyword">key</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t5 <span class="keyword">values</span>(<span class="literal">null</span>);  报错</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t5 <span class="keyword">values</span>(<span class="number">1</span>),(<span class="number">1</span>);  报错</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t5 <span class="keyword">values</span>(<span class="number">1</span>),(<span class="number">2</span>); </span><br><span class="line"></span><br><span class="line">"""</span><br><span class="line">2.它除了有约束效果之外 它还是Innodb存储引擎组织数据的依据</span><br><span class="line">Innodb存储引擎在创建表的时候必须要有primary key</span><br><span class="line">因为它类似于书的目录 能够帮助提示查询效率并且也是建表的依据</span><br><span class="line">"""</span><br><span class="line"><span class="comment"># 1 一张表中有且只有一个主键 如果你没有设置主键 那么会从上往下搜索直到遇到一个非空且唯一的字段将它自动升级为主键</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t6(</span><br><span class="line">	<span class="keyword">id</span> <span class="built_in">int</span>,</span><br><span class="line">    <span class="keyword">name</span> <span class="built_in">char</span>(<span class="number">16</span>),</span><br><span class="line">    age <span class="built_in">int</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">unique</span>,</span><br><span class="line">    addr <span class="built_in">char</span>(<span class="number">32</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">unique</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2 如果表中没有主键也没有其他任何的非空且唯一字段 那么Innodb会采用自己内部提供的一个隐藏字段作为主键，隐藏意味着你无法使用到它 就无法提示查询速度</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3 一张表中通常都应该有一个主键字段 并且通常将id/uid/sid字段作为主键</span></span><br><span class="line"><span class="comment"># 单个字段主键</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t5(</span><br><span class="line">    <span class="keyword">id</span> <span class="built_in">int</span> primary <span class="keyword">key</span></span><br><span class="line">	<span class="keyword">name</span> <span class="built_in">char</span>(<span class="number">16</span>)</span><br><span class="line">);</span><br><span class="line"><span class="comment"># 联合主键(多个字段联合起来作为表的主键 本质还是一个主键)</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t7(</span><br><span class="line">    ip <span class="built_in">char</span>(<span class="number">16</span>),</span><br><span class="line">    port <span class="built_in">int</span>,</span><br><span class="line">    primary <span class="keyword">key</span>(ip,port)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">"""</span><br><span class="line">也意味着 以后我们在创建表的时候id字段一定要加primary key</span><br><span class="line">"""</span><br></pre></td></tr></table></figure>

<h3 id="auto-increment自增"><a href="#auto-increment自增" class="headerlink" title="auto_increment自增"></a>auto_increment自增</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 当编号特别多的时候 人为的去维护太麻烦</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t8(</span><br><span class="line">	<span class="keyword">id</span> <span class="built_in">int</span> primary <span class="keyword">key</span> auto_increment,</span><br><span class="line">    <span class="keyword">name</span> <span class="built_in">char</span>(<span class="number">16</span>)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t8(<span class="keyword">name</span>) <span class="keyword">values</span>(<span class="string">'jason'</span>),(<span class="string">'egon'</span>),(<span class="string">'kevin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意auto_increment通常都是加在主键上的 不能给普通字段加</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t9(</span><br><span class="line">	<span class="keyword">id</span> <span class="built_in">int</span> primary <span class="keyword">key</span> auto_increment,</span><br><span class="line">    <span class="keyword">name</span> <span class="built_in">char</span>(<span class="number">16</span>),</span><br><span class="line">    cid <span class="built_in">int</span> auto_increment</span><br><span class="line">);</span><br><span class="line">ERROR 1075 (42000): Incorrect table definition; there can be only one auto column and it must be defined as a key</span><br></pre></td></tr></table></figure>

<p><strong>结论</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">"""以后在创建表的id(数据的唯一标识id、uid、sid)字段的时候id int primary key auto_increment"""</span><br></pre></td></tr></table></figure>

<p><strong>补充</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> t1  删除表中数据后 主键的自增不会停止<span class="keyword">truncate</span> t1  清空表数据并且重置主键</span><br></pre></td></tr></table></figure>

<h3 id="表与表之间建关系"><a href="#表与表之间建关系" class="headerlink" title="表与表之间建关系"></a>表与表之间建关系</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">"""</span><br><span class="line">定义一张员工表 表中有很多字段</span><br><span class="line">id name gender dep_name dep_desc</span><br><span class="line">"""</span><br><span class="line"><span class="comment"># 1 该表的组织结构不是很清晰(可忽视)</span></span><br><span class="line"><span class="comment"># 2 浪费硬盘空间(可忽视)</span></span><br><span class="line"><span class="comment"># 3 数据的扩展性极差(无法忽视的)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如何优化？</span></span><br><span class="line">"""上述问题就类似于你将所有的代码都写在了一个py文件中"""</span><br><span class="line">将员工表拆分  员工表和部门表</span><br></pre></td></tr></table></figure>

<h3 id="外键"><a href="#外键" class="headerlink" title="外键"></a>外键</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">"""</span><br><span class="line">外键就是用来帮助我们建立表与表之间关系的</span><br><span class="line">foreign key</span><br><span class="line">"""</span><br></pre></td></tr></table></figure>

<h3 id="表关系"><a href="#表关系" class="headerlink" title="表关系"></a>表关系</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;&quot;&quot;</span><br><span class="line">表与表之间最多只有四种关系</span><br><span class="line">	一对多关系</span><br><span class="line">		在MySQL的关系中没有多对一一说</span><br><span class="line">		一对多 多对一 都叫一对多！！！</span><br><span class="line">	多对多关系</span><br><span class="line">	一对一关系</span><br><span class="line">	没有关系</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>

<h3 id="一对多关系"><a href="#一对多关系" class="headerlink" title="一对多关系"></a>一对多关系</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">"""</span><br><span class="line">判断表与表之间关系的时候 前期不熟悉的情况下 一定要按照我给你的建议</span><br><span class="line">换位思考  分别站在两张表的角度考虑</span><br><span class="line"></span><br><span class="line">员工表与部门表为例</span><br><span class="line">	先站在员工表</span><br><span class="line">		思考一个员工能否对应多个部门(一条员工数据能否对应多条部门数据)</span><br><span class="line">			不能！！！</span><br><span class="line">			(不能直接得出结论 一定要两张表都考虑完全)</span><br><span class="line">	再站在部门表</span><br><span class="line">		思考一个部门能否对应多个员工(一个部门数据能否对应多条员工数据)</span><br><span class="line">			能！！！</span><br><span class="line">	得出结论</span><br><span class="line">		员工表与部门表示单向的一对多</span><br><span class="line">		所以表关系就是一对多</span><br><span class="line">"""</span><br><span class="line">foreign key</span><br><span class="line">	1 一对多表关系   外键字段建在多的一方</span><br><span class="line">    2 在创建表的时候 一定要先建被关联表 </span><br><span class="line">    3 在录入数据的时候 也必须先录入被关联表</span><br><span class="line"><span class="comment"># SQL语句建立表关系</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> dep(</span><br><span class="line">	<span class="keyword">id</span> <span class="built_in">int</span> primary <span class="keyword">key</span> auto_increment,</span><br><span class="line">    dep_name <span class="built_in">char</span>(<span class="number">16</span>),</span><br><span class="line">    dep_desc <span class="built_in">char</span>(<span class="number">32</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> emp(</span><br><span class="line">	<span class="keyword">id</span> <span class="built_in">int</span> primary <span class="keyword">key</span> auto_increment,</span><br><span class="line">    <span class="keyword">name</span> <span class="built_in">char</span>(<span class="number">16</span>),</span><br><span class="line">    gender enum(<span class="string">'male'</span>,<span class="string">'female'</span>,<span class="string">'others'</span>) <span class="keyword">default</span> <span class="string">'male'</span>,</span><br><span class="line">    dep_id <span class="built_in">int</span>,</span><br><span class="line">    <span class="keyword">foreign</span> <span class="keyword">key</span>(dep_id) <span class="keyword">references</span> dep(<span class="keyword">id</span>)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> dep(dep_name,dep_desc) <span class="keyword">values</span>(<span class="string">'sb教学部'</span>,<span class="string">'教书育人'</span>),(<span class="string">'外交部'</span>,<span class="string">'多人外交'</span>),(<span class="string">'nb技术部'</span>,<span class="string">'技术能力有限部门'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> emp(<span class="keyword">name</span>,dep_id) <span class="keyword">values</span>(<span class="string">'jason'</span>,<span class="number">2</span>),(<span class="string">'egon'</span>,<span class="number">1</span>),(<span class="string">'tank'</span>,<span class="number">1</span>),(<span class="string">'kevin'</span>,<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改dep表里面的id字段</span></span><br><span class="line"><span class="keyword">update</span> dep <span class="keyword">set</span> <span class="keyword">id</span>=<span class="number">200</span> <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">2</span>;  不行</span><br><span class="line"><span class="comment"># 删除dep表里面的数据</span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> dep;  不行</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1 先删除教学部对应的员工数据 之后再删除部门</span></span><br><span class="line">	操作太过繁琐</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 2 真正做到数据之间有关系</span></span><br><span class="line">	更新就同步更新</span><br><span class="line">    删除就同步删除</span><br><span class="line">"""</span><br><span class="line">级联更新   &gt;&gt;&gt;   同步更新</span><br><span class="line">级联删除   &gt;&gt;&gt;   同步删除</span><br><span class="line">"""</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> dep(</span><br><span class="line">	<span class="keyword">id</span> <span class="built_in">int</span> primary <span class="keyword">key</span> auto_increment,</span><br><span class="line">    dep_name <span class="built_in">char</span>(<span class="number">16</span>),</span><br><span class="line">    dep_desc <span class="built_in">char</span>(<span class="number">32</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> emp(</span><br><span class="line">	<span class="keyword">id</span> <span class="built_in">int</span> primary <span class="keyword">key</span> auto_increment,</span><br><span class="line">    <span class="keyword">name</span> <span class="built_in">char</span>(<span class="number">16</span>),</span><br><span class="line">    gender enum(<span class="string">'male'</span>,<span class="string">'female'</span>,<span class="string">'others'</span>) <span class="keyword">default</span> <span class="string">'male'</span>,</span><br><span class="line">    dep_id <span class="built_in">int</span>,</span><br><span class="line">    <span class="keyword">foreign</span> <span class="keyword">key</span>(dep_id) <span class="keyword">references</span> dep(<span class="keyword">id</span>) </span><br><span class="line">    <span class="keyword">on</span> <span class="keyword">update</span> <span class="keyword">cascade</span>  <span class="comment"># 同步更新</span></span><br><span class="line">    <span class="keyword">on</span> <span class="keyword">delete</span> <span class="keyword">cascade</span>  <span class="comment"># 同步删除</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> dep(dep_name,dep_desc) <span class="keyword">values</span>(<span class="string">'sb教学部'</span>,<span class="string">'教书育人'</span>),(<span class="string">'外交部'</span>,<span class="string">'多人外交'</span>),(<span class="string">'nb技术部'</span>,<span class="string">'技术能力有限部门'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> emp(<span class="keyword">name</span>,dep_id) <span class="keyword">values</span>(<span class="string">'jason'</span>,<span class="number">2</span>),(<span class="string">'egon'</span>,<span class="number">1</span>),(<span class="string">'tank'</span>,<span class="number">1</span>),(<span class="string">'kevin'</span>,<span class="number">3</span>);</span><br></pre></td></tr></table></figure>

<h3 id="多对多"><a href="#多对多" class="headerlink" title="多对多"></a>多对多</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">"""</span><br><span class="line">图书表和作者表</span><br><span class="line">"""</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> book(</span><br><span class="line">	<span class="keyword">id</span> <span class="built_in">int</span> primary <span class="keyword">key</span> auto_increment,</span><br><span class="line">    title <span class="built_in">varchar</span>(<span class="number">32</span>),</span><br><span class="line">    price <span class="built_in">int</span>,</span><br><span class="line">    author_id <span class="built_in">int</span>,</span><br><span class="line">    <span class="keyword">foreign</span> <span class="keyword">key</span>(author_id) <span class="keyword">references</span> author(<span class="keyword">id</span>) </span><br><span class="line">    <span class="keyword">on</span> <span class="keyword">update</span> <span class="keyword">cascade</span>  <span class="comment"># 同步更新</span></span><br><span class="line">    <span class="keyword">on</span> <span class="keyword">delete</span> <span class="keyword">cascade</span>  <span class="comment"># 同步删除</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> author(</span><br><span class="line">	<span class="keyword">id</span> <span class="built_in">int</span> primary <span class="keyword">key</span> auto_increment,</span><br><span class="line">    <span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">32</span>),</span><br><span class="line">    age <span class="built_in">int</span>,</span><br><span class="line">    book_id <span class="built_in">int</span>,</span><br><span class="line">    <span class="keyword">foreign</span> <span class="keyword">key</span>(book_id) <span class="keyword">references</span> book(<span class="keyword">id</span>) </span><br><span class="line">    <span class="keyword">on</span> <span class="keyword">update</span> <span class="keyword">cascade</span>  <span class="comment"># 同步更新</span></span><br><span class="line">    <span class="keyword">on</span> <span class="keyword">delete</span> <span class="keyword">cascade</span>  <span class="comment"># 同步删除</span></span><br><span class="line">);</span><br><span class="line">"""</span><br><span class="line">按照上述的方式创建 一个都别想成功！！！</span><br><span class="line">其实我们只是想记录书籍和作者的关系</span><br><span class="line">针对多对多字段表关系 不能在两张原有的表中创建外键</span><br><span class="line">需要你单独再开设一张 专门用来存储两张表数据之间的关系</span><br><span class="line">"""</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> book(</span><br><span class="line">	<span class="keyword">id</span> <span class="built_in">int</span> primary <span class="keyword">key</span> auto_increment,</span><br><span class="line">    title <span class="built_in">varchar</span>(<span class="number">32</span>),</span><br><span class="line">    price <span class="built_in">int</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> author(</span><br><span class="line">	<span class="keyword">id</span> <span class="built_in">int</span> primary <span class="keyword">key</span> auto_increment,</span><br><span class="line">    <span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">32</span>),</span><br><span class="line">    age <span class="built_in">int</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> book2author(</span><br><span class="line">	<span class="keyword">id</span> <span class="built_in">int</span> primary <span class="keyword">key</span> auto_increment,</span><br><span class="line">    author_id <span class="built_in">int</span>,</span><br><span class="line">    book_id <span class="built_in">int</span>,</span><br><span class="line">    <span class="keyword">foreign</span> <span class="keyword">key</span>(author_id) <span class="keyword">references</span> author(<span class="keyword">id</span>) </span><br><span class="line">    <span class="keyword">on</span> <span class="keyword">update</span> <span class="keyword">cascade</span>  <span class="comment"># 同步更新</span></span><br><span class="line">    <span class="keyword">on</span> <span class="keyword">delete</span> <span class="keyword">cascade</span>,  <span class="comment"># 同步删除</span></span><br><span class="line">    <span class="keyword">foreign</span> <span class="keyword">key</span>(book_id) <span class="keyword">references</span> book(<span class="keyword">id</span>) </span><br><span class="line">    <span class="keyword">on</span> <span class="keyword">update</span> <span class="keyword">cascade</span>  <span class="comment"># 同步更新</span></span><br><span class="line">    <span class="keyword">on</span> <span class="keyword">delete</span> <span class="keyword">cascade</span>  <span class="comment"># 同步删除</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h3 id="一对一"><a href="#一对一" class="headerlink" title="一对一"></a>一对一</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">"""</span><br><span class="line">id name age addr phone hobby email........</span><br><span class="line">如果一个表的字段特别多 每次查询又不是所有的字段都能用得到</span><br><span class="line">将表一分为二  </span><br><span class="line">	用户表</span><br><span class="line">		用户表</span><br><span class="line">			id name age</span><br><span class="line">		用户详情表</span><br><span class="line">			id addr phone hobby email........</span><br><span class="line">	</span><br><span class="line">	站在用户表</span><br><span class="line">		一个用户能否对应多个用户详情   不能！！！</span><br><span class="line">	站在详情表</span><br><span class="line">		一个详情能否属于多个用户      不能！！！</span><br><span class="line">	结论:单向的一对多都不成立 那么这个时候两者之间的表关系</span><br><span class="line">		就是一对一</span><br><span class="line">		或者没有关系(好判断)</span><br><span class="line"></span><br><span class="line">客户表和学生表</span><br><span class="line">	在你们报名之前你们是客户端</span><br><span class="line">	报名之后是学生(期间有一些客户不会报名)</span><br><span class="line">"""</span><br><span class="line"></span><br><span class="line">一对一 外键字段建在任意一方都可以 但是推荐你建在查询频率比较高的表中</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> authordetail(</span><br><span class="line">	<span class="keyword">id</span> <span class="built_in">int</span> primary <span class="keyword">key</span> auto_increment,</span><br><span class="line">    phone <span class="built_in">int</span>,</span><br><span class="line">    addr <span class="built_in">varchar</span>(<span class="number">64</span>)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> author(</span><br><span class="line">	<span class="keyword">id</span> <span class="built_in">int</span> primary <span class="keyword">key</span> auto_increment,</span><br><span class="line">    <span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">32</span>),</span><br><span class="line">    age <span class="built_in">int</span>,</span><br><span class="line">    authordetail_id <span class="built_in">int</span> <span class="keyword">unique</span>,</span><br><span class="line">    <span class="keyword">foreign</span> <span class="keyword">key</span>(authordetail_id) <span class="keyword">references</span> authordetail(<span class="keyword">id</span>) </span><br><span class="line">    <span class="keyword">on</span> <span class="keyword">update</span> <span class="keyword">cascade</span>  <span class="comment"># 同步更新</span></span><br><span class="line">    <span class="keyword">on</span> <span class="keyword">delete</span> <span class="keyword">cascade</span>  <span class="comment"># 同步删除</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p><strong>总结</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;&quot;&quot;</span><br><span class="line">表关系的建立需要用到foreign key</span><br><span class="line">	一对多</span><br><span class="line">		外键字段建在多的一方</span><br><span class="line">	多对多</span><br><span class="line">		自己开设第三张存储</span><br><span class="line">	一对一</span><br><span class="line">		建在任意一方都可以 但是推荐你建在查询频率较高的表中</span><br><span class="line"></span><br><span class="line">判断表之间关系的方式</span><br><span class="line">	换位思考！！！</span><br><span class="line">		员工与部门</span><br><span class="line">	</span><br><span class="line">		图书与作者</span><br><span class="line">	</span><br><span class="line">		作者与作者详情</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>

<h3 id="修改表-了解"><a href="#修改表-了解" class="headerlink" title="修改表(了解)"></a>修改表(了解)</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment"># MySQL对大小写是不敏感的</span></span><br><span class="line">"""</span><br><span class="line">1 修改表名</span><br><span class="line">	<span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">rename</span> 新表名;</span><br><span class="line"></span><br><span class="line">2 增加字段</span><br><span class="line">	<span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">add</span> 字段名 字段类型(宽度)  约束条件;</span><br><span class="line">	<span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">add</span> 字段名 字段类型(宽度)  约束条件 <span class="keyword">first</span>;</span><br><span class="line">	<span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">add</span> 字段名 字段类型(宽度)  约束条件 <span class="keyword">after</span> 字段名;</span><br><span class="line"></span><br><span class="line">3 删除字段</span><br><span class="line">	<span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">drop</span> 字段名;</span><br><span class="line"></span><br><span class="line">4 修改字段</span><br><span class="line">	<span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">modify</span> 字段名 字段类型(宽度) 约束条件;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">change</span> 旧字段名 新字段名 字段类型(宽度) 约束条件;</span><br><span class="line">	</span><br><span class="line">"""</span><br></pre></td></tr></table></figure>

<h3 id="复制表-了解"><a href="#复制表-了解" class="headerlink" title="复制表(了解)"></a>复制表(了解)</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">"""</span><br><span class="line">我们sql语句查询的结果其实也是一张虚拟表</span><br><span class="line">"""</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 表名 <span class="keyword">select</span> * <span class="keyword">from</span> 旧表;  不能复制主键 外键 ...</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> new_dep2 <span class="keyword">select</span> * <span class="keyword">from</span> dep <span class="keyword">where</span> <span class="keyword">id</span>&gt;<span class="number">3</span>;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>mysql数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>[聚合函数]</title>
    <url>/2019/10/15/%E8%81%9A%E5%90%88%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h3 id="前期表准备"><a href="#前期表准备" class="headerlink" title="前期表准备"></a>前期表准备</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> emp(</span><br><span class="line">  <span class="keyword">id</span> <span class="built_in">int</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">unique</span> auto_increment,</span><br><span class="line">  <span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">  sex enum(<span class="string">'male'</span>,<span class="string">'female'</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="string">'male'</span>, <span class="comment">#大部分是男的</span></span><br><span class="line">  age <span class="built_in">int</span>(<span class="number">3</span>) <span class="keyword">unsigned</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="number">28</span>,</span><br><span class="line">  hire_date <span class="built_in">date</span> <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">  post <span class="built_in">varchar</span>(<span class="number">50</span>),</span><br><span class="line">  post_comment <span class="built_in">varchar</span>(<span class="number">100</span>),</span><br><span class="line">  salary <span class="keyword">double</span>(<span class="number">15</span>,<span class="number">2</span>),</span><br><span class="line">  office <span class="built_in">int</span>, <span class="comment">#一个部门一个屋子</span></span><br><span class="line">  depart_id <span class="built_in">int</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">#插入记录</span></span><br><span class="line"><span class="comment">#三个部门：教学，销售，运营</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> emp(<span class="keyword">name</span>,sex,age,hire_date,post,salary,office,depart_id) <span class="keyword">values</span></span><br><span class="line">(<span class="string">'jason'</span>,<span class="string">'male'</span>,<span class="number">18</span>,<span class="string">'20170301'</span>,<span class="string">'张江第一帅形象代言'</span>,<span class="number">7300.33</span>,<span class="number">401</span>,<span class="number">1</span>), <span class="comment">#以下是教学部</span></span><br><span class="line">(<span class="string">'tom'</span>,<span class="string">'male'</span>,<span class="number">78</span>,<span class="string">'20150302'</span>,<span class="string">'teacher'</span>,<span class="number">1000000.31</span>,<span class="number">401</span>,<span class="number">1</span>),</span><br><span class="line">(<span class="string">'kevin'</span>,<span class="string">'male'</span>,<span class="number">81</span>,<span class="string">'20130305'</span>,<span class="string">'teacher'</span>,<span class="number">8300</span>,<span class="number">401</span>,<span class="number">1</span>),</span><br><span class="line">(<span class="string">'tony'</span>,<span class="string">'male'</span>,<span class="number">73</span>,<span class="string">'20140701'</span>,<span class="string">'teacher'</span>,<span class="number">3500</span>,<span class="number">401</span>,<span class="number">1</span>),</span><br><span class="line">(<span class="string">'owen'</span>,<span class="string">'male'</span>,<span class="number">28</span>,<span class="string">'20121101'</span>,<span class="string">'teacher'</span>,<span class="number">2100</span>,<span class="number">401</span>,<span class="number">1</span>),</span><br><span class="line">(<span class="string">'jack'</span>,<span class="string">'female'</span>,<span class="number">18</span>,<span class="string">'20110211'</span>,<span class="string">'teacher'</span>,<span class="number">9000</span>,<span class="number">401</span>,<span class="number">1</span>),</span><br><span class="line">(<span class="string">'jenny'</span>,<span class="string">'male'</span>,<span class="number">18</span>,<span class="string">'19000301'</span>,<span class="string">'teacher'</span>,<span class="number">30000</span>,<span class="number">401</span>,<span class="number">1</span>),</span><br><span class="line">(<span class="string">'sank'</span>,<span class="string">'male'</span>,<span class="number">48</span>,<span class="string">'20101111'</span>,<span class="string">'teacher'</span>,<span class="number">10000</span>,<span class="number">401</span>,<span class="number">1</span>),</span><br><span class="line">(<span class="string">'哈哈'</span>,<span class="string">'female'</span>,<span class="number">48</span>,<span class="string">'20150311'</span>,<span class="string">'sale'</span>,<span class="number">3000.13</span>,<span class="number">402</span>,<span class="number">2</span>),<span class="comment">#以下是销售部门</span></span><br><span class="line">(<span class="string">'呵呵'</span>,<span class="string">'female'</span>,<span class="number">38</span>,<span class="string">'20101101'</span>,<span class="string">'sale'</span>,<span class="number">2000.35</span>,<span class="number">402</span>,<span class="number">2</span>),</span><br><span class="line">(<span class="string">'西西'</span>,<span class="string">'female'</span>,<span class="number">18</span>,<span class="string">'20110312'</span>,<span class="string">'sale'</span>,<span class="number">1000.37</span>,<span class="number">402</span>,<span class="number">2</span>),</span><br><span class="line">(<span class="string">'乐乐'</span>,<span class="string">'female'</span>,<span class="number">18</span>,<span class="string">'20160513'</span>,<span class="string">'sale'</span>,<span class="number">3000.29</span>,<span class="number">402</span>,<span class="number">2</span>),</span><br><span class="line">(<span class="string">'拉拉'</span>,<span class="string">'female'</span>,<span class="number">28</span>,<span class="string">'20170127'</span>,<span class="string">'sale'</span>,<span class="number">4000.33</span>,<span class="number">402</span>,<span class="number">2</span>),</span><br><span class="line">(<span class="string">'僧龙'</span>,<span class="string">'male'</span>,<span class="number">28</span>,<span class="string">'20160311'</span>,<span class="string">'operation'</span>,<span class="number">10000.13</span>,<span class="number">403</span>,<span class="number">3</span>), <span class="comment">#以下是运营部门</span></span><br><span class="line">(<span class="string">'程咬金'</span>,<span class="string">'male'</span>,<span class="number">18</span>,<span class="string">'19970312'</span>,<span class="string">'operation'</span>,<span class="number">20000</span>,<span class="number">403</span>,<span class="number">3</span>),</span><br><span class="line">(<span class="string">'程咬银'</span>,<span class="string">'female'</span>,<span class="number">18</span>,<span class="string">'20130311'</span>,<span class="string">'operation'</span>,<span class="number">19000</span>,<span class="number">403</span>,<span class="number">3</span>),</span><br><span class="line">(<span class="string">'程咬铜'</span>,<span class="string">'male'</span>,<span class="number">18</span>,<span class="string">'20150411'</span>,<span class="string">'operation'</span>,<span class="number">18000</span>,<span class="number">403</span>,<span class="number">3</span>),</span><br><span class="line">(<span class="string">'程咬铁'</span>,<span class="string">'female'</span>,<span class="number">18</span>,<span class="string">'20140512'</span>,<span class="string">'operation'</span>,<span class="number">17000</span>,<span class="number">403</span>,<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment"># 当表字段特别多 展示的时候错乱 可以使用\G分行展示</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp\G;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 个别同学的电脑在插入中文的时候还是会出现乱码或者空白的现象 你可以将字符编码统一设置成GBK</span></span><br></pre></td></tr></table></figure>

<h3 id="几个重要关键字的执行顺序"><a href="#几个重要关键字的执行顺序" class="headerlink" title="几个重要关键字的执行顺序"></a>几个重要关键字的执行顺序</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 书写顺序</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">id</span>,<span class="keyword">name</span> <span class="keyword">from</span> emp <span class="keyword">where</span> <span class="keyword">id</span> &gt; <span class="number">3</span>;</span><br><span class="line"><span class="comment"># 执行顺序</span></span><br><span class="line">from</span><br><span class="line">where</span><br><span class="line"><span class="keyword">select</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">虽然执行顺序和书写顺序不一致 你在写sql语句的时候可能不知道怎么写</span></span><br><span class="line"><span class="string">你就按照书写顺序的方式写sql</span></span><br><span class="line"><span class="string">	select * 先用*号占位</span></span><br><span class="line"><span class="string">	之后去补全后面的sql语句</span></span><br><span class="line"><span class="string">	最后将*号替换后你想要的具体字段</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">	明天会一直使用 这里先理解</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<h3 id="where筛选条件"><a href="#where筛选条件" class="headerlink" title="where筛选条件"></a>where筛选条件</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 作用:是对整体数据的一个筛选操作</span></span><br><span class="line"><span class="comment"># 1.查询id大于等于3小于等于6的数据</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">id</span>,<span class="keyword">name</span>,age <span class="keyword">from</span> emp <span class="keyword">where</span> <span class="keyword">id</span>&gt;=<span class="number">3</span> <span class="keyword">and</span> <span class="keyword">id</span>&lt;=<span class="number">6</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">id</span>,<span class="keyword">name</span> <span class="keyword">from</span> emp <span class="keyword">where</span> <span class="keyword">id</span> <span class="keyword">between</span> <span class="number">3</span> <span class="keyword">and</span> <span class="number">6</span>;  两者等价</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.查询薪资是20000或者18000或者17000的数据</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> salary=<span class="number">20000</span> <span class="keyword">or</span> salary=<span class="number">18000</span> <span class="keyword">or</span> salary=<span class="number">17000</span>;</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> salary <span class="keyword">in</span> (<span class="number">20000</span>,<span class="number">18000</span>,<span class="number">17000</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.查询员工姓名中包含字母o的员工的姓名和薪资</span></span><br><span class="line">"""</span><br><span class="line">模糊查询</span><br><span class="line">	like</span><br><span class="line">		%  匹配任意多个字符</span><br><span class="line">		_  匹配任意单个字符</span><br><span class="line">"""</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">name</span>,salary <span class="keyword">from</span> emp <span class="keyword">where</span> <span class="keyword">name</span> <span class="keyword">like</span> <span class="string">'%o%'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.查询员工姓名是由四个字符组成的 姓名和薪资  char_length()   _</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">name</span>,salary <span class="keyword">from</span> emp <span class="keyword">where</span> <span class="keyword">name</span> <span class="keyword">like</span> <span class="string">'____'</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">name</span>,salary <span class="keyword">from</span> emp <span class="keyword">where</span> <span class="keyword">char_length</span>(<span class="keyword">name</span>) = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5.查询id小于3或者id大于6的数据</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> <span class="keyword">id</span> <span class="keyword">not</span> <span class="keyword">between</span> <span class="number">3</span> <span class="keyword">and</span> <span class="number">6</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 6.查询薪资不在20000,18000,17000范围的数据</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> salary <span class="keyword">not</span> <span class="keyword">in</span> (<span class="number">20000</span>,<span class="number">18000</span>,<span class="number">17000</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment"># 7.查询岗位描述为空的员工姓名和岗位名  针对null不用等号 用is</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">name</span>,post <span class="keyword">from</span> emp <span class="keyword">where</span> post_comment = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">name</span>,post <span class="keyword">from</span> emp <span class="keyword">where</span> post_comment <span class="keyword">is</span> <span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure>

<h3 id="group-by分组"><a href="#group-by分组" class="headerlink" title="group by分组"></a>group by分组</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 分组实际应用场景  分组应用场景非常的多</span></span><br><span class="line">	男女比例</span><br><span class="line">    部门平均薪资</span><br><span class="line">    部门秃头率</span><br><span class="line">    国家之间数据统计</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1	按照部门分组</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> post;</span><br><span class="line">"""</span><br><span class="line">分组之后 最小可操作单位应该是组 还不再是组内的单个数据</span><br><span class="line">	上述命令在你没有设置严格模式的时候是可正常执行的 返回的是分组之后 每个组的第一条数据 </span><br><span class="line">	但是这不符合分组的规范:分组之后不应该考虑单个数据 而应该以组为操作单位(分组之后 没办法直接获取组内单个数据)</span><br><span class="line">	如果设置了严格模式 那么上述命令会直接报错 </span><br><span class="line">"""</span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> sql_mode = <span class="string">'strict_trans_tables,only_full_group_by'</span>;</span><br><span class="line"></span><br><span class="line">设置严格模式之后  分组 默认只能拿到分组的依据</span><br><span class="line"><span class="keyword">select</span> post <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> post;  </span><br><span class="line">按照什么分组就只能拿到分组 其他字段不能直接获取 需要借助于一些方法(聚合函数)</span><br><span class="line"></span><br><span class="line">"""</span><br><span class="line">什么时候需要分组啊？？？</span><br><span class="line">	关键字 </span><br><span class="line">		每个 平均 最高 最低 </span><br><span class="line">	</span><br><span class="line">	聚合函数</span><br><span class="line">		max</span><br><span class="line">		min</span><br><span class="line">		sum</span><br><span class="line">		count</span><br><span class="line">		avg</span><br><span class="line">"""</span><br><span class="line"><span class="comment"># 1.获取每个部门的最高薪资</span></span><br><span class="line"><span class="keyword">select</span> post,<span class="keyword">max</span>(salary) <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> post;</span><br><span class="line"><span class="keyword">select</span> post <span class="keyword">as</span> <span class="string">'部门'</span>,<span class="keyword">max</span>(salary) <span class="keyword">as</span> <span class="string">'最高薪资'</span> <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> post;</span><br><span class="line"><span class="keyword">select</span> post <span class="string">'部门'</span>,<span class="keyword">max</span>(salary) <span class="string">'最高薪资'</span> <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> post;</span><br><span class="line"><span class="comment"># as可以给字段起别名 也可以直接省略不写 但是不推荐 因为省略的话语意不明确 容易错乱</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.获取每个部门的最低薪资</span></span><br><span class="line"><span class="keyword">select</span> post,<span class="keyword">min</span>(salary) <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> post;</span><br><span class="line"><span class="comment"># 3.获取每个部门的平均薪资</span></span><br><span class="line"><span class="keyword">select</span> post,<span class="keyword">avg</span>(salary) <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> post;</span><br><span class="line"><span class="comment"># 4.获取每个部门的工资总和</span></span><br><span class="line"><span class="keyword">select</span> post,<span class="keyword">sum</span>(salary) <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> post;</span><br><span class="line"><span class="comment"># 5.获取每个部门的人数</span></span><br><span class="line"><span class="keyword">select</span> post,<span class="keyword">count</span>(<span class="keyword">id</span>) <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> post;  <span class="comment"># 常用 符合逻辑</span></span><br><span class="line"><span class="keyword">select</span> post,<span class="keyword">count</span>(salary) <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> post;</span><br><span class="line"><span class="keyword">select</span> post,<span class="keyword">count</span>(age) <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> post;</span><br><span class="line"><span class="keyword">select</span> post,<span class="keyword">count</span>(post_comment) <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> post;  null不行</span><br><span class="line"></span><br><span class="line"><span class="comment"># 6.查询分组之后的部门名称和每个部门下所有的员工姓名 </span></span><br><span class="line"><span class="comment"># group_concat不单单可以支持你获取分组之后的其他字段值 还支持拼接操作</span></span><br><span class="line"><span class="keyword">select</span> post,<span class="keyword">group_concat</span>(<span class="keyword">name</span>) <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> post;</span><br><span class="line"><span class="keyword">select</span> post,<span class="keyword">group_concat</span>(<span class="keyword">name</span>,<span class="string">'_DSB'</span>) <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> post;</span><br><span class="line"><span class="keyword">select</span> post,<span class="keyword">group_concat</span>(<span class="keyword">name</span>,<span class="string">':'</span>,salary) <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> post;</span><br><span class="line"><span class="comment"># concat不分组的时候用 </span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">concat</span>(<span class="string">'NAME:'</span>,<span class="keyword">name</span>),<span class="keyword">concat</span>(<span class="string">'SAL:'</span>,salary) <span class="keyword">from</span> emp;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 补充 as语法不单单可以给字段起别名 还可以给表临时起别名</span></span><br><span class="line"><span class="keyword">select</span> emp.id,emp.name <span class="keyword">from</span> emp;  </span><br><span class="line"><span class="keyword">select</span> emp.id,emp.name <span class="keyword">from</span> emp <span class="keyword">as</span> t1;   报错</span><br><span class="line"><span class="keyword">select</span> t1.id,t1.name <span class="keyword">from</span> emp <span class="keyword">as</span> t1;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询每个人的年薪  12薪</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">name</span>,salary*<span class="number">12</span> <span class="keyword">from</span> emp;</span><br></pre></td></tr></table></figure>

<h3 id="分组注意事项"><a href="#分组注意事项" class="headerlink" title="分组注意事项"></a>分组注意事项</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 关键字where和group by同时出现的时候group by必须在where的后面</span></span><br><span class="line">where先对整体数据进行过滤之后再分组操作</span><br><span class="line">where筛选条件不能使用聚合函数</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">id</span>,<span class="keyword">name</span>,age <span class="keyword">from</span> emp <span class="keyword">where</span> <span class="keyword">max</span>(salary) &gt; <span class="number">3000</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">max</span>(salary) <span class="keyword">from</span> emp;  <span class="comment"># 不分组 默认整体就是一组</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 统计各部门年龄在30岁以上的员工平均薪资</span></span><br><span class="line">	1 先求所有年龄大于30岁的员工</span><br><span class="line">    	<span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> age&gt;<span class="number">30</span>;</span><br><span class="line">    2 再对结果进行分组</span><br><span class="line">     	<span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> age&gt;<span class="number">30</span> <span class="keyword">group</span> <span class="keyword">by</span> post;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">select</span> post,<span class="keyword">avg</span>(salary) <span class="keyword">from</span> emp <span class="keyword">where</span> age&gt;<span class="number">30</span> <span class="keyword">group</span> <span class="keyword">by</span> post;</span><br></pre></td></tr></table></figure>

<h3 id="having分组之后的筛选条件"><a href="#having分组之后的筛选条件" class="headerlink" title="having分组之后的筛选条件"></a>having分组之后的筛选条件</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">"""</span><br><span class="line">having的语法根where是一致的</span><br><span class="line">只不过having是在分组之后进行的过滤操作</span><br><span class="line">即having是可以直接使用聚合函数的</span><br><span class="line">"""</span><br><span class="line"><span class="comment"># 统计各部门年龄在30岁以上的员工平均工资并且保留平均薪资大于10000的部门</span></span><br><span class="line"><span class="keyword">select</span> post,<span class="keyword">avg</span>(salary) <span class="keyword">from</span> emp </span><br><span class="line">		<span class="keyword">where</span> age&gt;<span class="number">30</span> </span><br><span class="line">    	<span class="keyword">group</span> <span class="keyword">by</span> post</span><br><span class="line">        <span class="keyword">having</span> <span class="keyword">avg</span>(salary) &gt; <span class="number">10000</span></span><br><span class="line">        ;</span><br></pre></td></tr></table></figure>

<h3 id="distinct去重"><a href="#distinct去重" class="headerlink" title="distinct去重"></a>distinct去重</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">"""</span><br><span class="line">一定要注意 必须是完全一样的数据才可以去重！！！</span><br><span class="line">一定不要将逐渐忽视了 有逐渐存在的情况下 是不可能去重的</span><br><span class="line">[</span><br><span class="line">&#123;'id':1,'name':'jason','age':18&#125;,</span><br><span class="line">&#123;'id':2,'name':'jason','age':18&#125;,</span><br><span class="line">&#123;'id':3,'name':'egon','age':18&#125;</span><br><span class="line">]</span><br><span class="line">ORM  对象关系映射   让不懂SQL语句的人也能够非常牛逼的操作数据库</span><br><span class="line">表								类</span><br><span class="line">一条条的数据						对象</span><br><span class="line">字段对应的值						对象的属性</span><br><span class="line"></span><br><span class="line">你再写类 就意味着在创建表</span><br><span class="line">用类生成对象 就意味着再创建数据</span><br><span class="line">对象点属性 就是在获取数据字段对应的值</span><br><span class="line">目的就是减轻python程序员的压力 只需要会python面向对象的知识点就可以操作MySQL</span><br><span class="line">"""</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> <span class="keyword">id</span>,age <span class="keyword">from</span> emp;</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> age <span class="keyword">from</span> emp;</span><br></pre></td></tr></table></figure>

<h3 id="order-by排序"><a href="#order-by排序" class="headerlink" title="order by排序"></a>order by排序</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">order</span> <span class="keyword">by</span> salary;</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">order</span> <span class="keyword">by</span> salary <span class="keyword">asc</span>;</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">order</span> <span class="keyword">by</span> salary <span class="keyword">desc</span>;</span><br><span class="line">"""</span><br><span class="line">order by默认是升序  asc 该asc可以省略不写</span><br><span class="line">也可以修改为降序     desc</span><br><span class="line">"""</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">order</span> <span class="keyword">by</span> age <span class="keyword">desc</span>,salary <span class="keyword">asc</span>;</span><br><span class="line"><span class="comment"># 先按照age降序排  如果碰到age相同 则再按照salary升序排</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 统计各部门年龄在10岁以上的员工平均工资并且保留平均薪资大于1000的部门,然后对平均工资降序排序</span></span><br><span class="line">	<span class="keyword">select</span> post,<span class="keyword">avg</span>(salary) <span class="keyword">from</span> emp </span><br><span class="line">		<span class="keyword">where</span> age&gt;<span class="number">10</span> </span><br><span class="line">    	<span class="keyword">group</span> <span class="keyword">by</span> post</span><br><span class="line">        <span class="keyword">having</span> <span class="keyword">avg</span>(salary) &gt; <span class="number">1000</span></span><br><span class="line">        <span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">avg</span>(salary) <span class="keyword">desc</span></span><br><span class="line">        ;</span><br></pre></td></tr></table></figure>

<h3 id="limit限制展示条数"><a href="#limit限制展示条数" class="headerlink" title="limit限制展示条数"></a>limit限制展示条数</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp;</span><br><span class="line">"""针对数据过多的情况 我们通常都是做分页处理"""</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">limit</span> <span class="number">3</span>;  <span class="comment"># 只展示三条数据</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">limit</span> <span class="number">0</span>,<span class="number">5</span>;</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">limit</span> <span class="number">5</span>,<span class="number">5</span>;</span><br><span class="line">第一个参数是起始位置</span><br><span class="line">第二个参数是展示条数</span><br></pre></td></tr></table></figure>

<h3 id="正则"><a href="#正则" class="headerlink" title="正则"></a>正则</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> <span class="keyword">name</span> regexp <span class="string">'^j.*(n|y)$'</span>;</span><br></pre></td></tr></table></figure>

<h3 id="多表操作"><a href="#多表操作" class="headerlink" title="多表操作"></a>多表操作</h3><p>前期表准备</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#建表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> dep(</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">int</span>,</span><br><span class="line"><span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">20</span>) </span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> emp(</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">int</span> primary <span class="keyword">key</span> auto_increment,</span><br><span class="line"><span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">20</span>),</span><br><span class="line">sex enum(<span class="string">'male'</span>,<span class="string">'female'</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="string">'male'</span>,</span><br><span class="line">age <span class="built_in">int</span>,</span><br><span class="line">dep_id <span class="built_in">int</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">#插入数据</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> dep <span class="keyword">values</span></span><br><span class="line">(<span class="number">200</span>,<span class="string">'技术'</span>),</span><br><span class="line">(<span class="number">201</span>,<span class="string">'人力资源'</span>),</span><br><span class="line">(<span class="number">202</span>,<span class="string">'销售'</span>),</span><br><span class="line">(<span class="number">203</span>,<span class="string">'运营'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> emp(<span class="keyword">name</span>,sex,age,dep_id) <span class="keyword">values</span></span><br><span class="line">(<span class="string">'jason'</span>,<span class="string">'male'</span>,<span class="number">18</span>,<span class="number">200</span>),</span><br><span class="line">(<span class="string">'egon'</span>,<span class="string">'female'</span>,<span class="number">48</span>,<span class="number">201</span>),</span><br><span class="line">(<span class="string">'kevin'</span>,<span class="string">'male'</span>,<span class="number">18</span>,<span class="number">201</span>),</span><br><span class="line">(<span class="string">'nick'</span>,<span class="string">'male'</span>,<span class="number">28</span>,<span class="number">202</span>),</span><br><span class="line">(<span class="string">'owen'</span>,<span class="string">'male'</span>,<span class="number">18</span>,<span class="number">203</span>),</span><br><span class="line">(<span class="string">'jerry'</span>,<span class="string">'female'</span>,<span class="number">18</span>,<span class="number">204</span>);</span><br></pre></td></tr></table></figure>

<h3 id="表查询"><a href="#表查询" class="headerlink" title="表查询"></a>表查询</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> dep,emp;  <span class="comment"># 结果   笛卡尔积</span></span><br><span class="line">"""</span><br><span class="line">了解即可 不知道也没关系</span><br><span class="line">"""</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp,dep <span class="keyword">where</span> emp.dep_id = dep.id;</span><br><span class="line"></span><br><span class="line">"""</span><br><span class="line">MySQL也知道 你在后面查询数据过程中 肯定会经常用到拼表操作 </span><br><span class="line">所以特地给你开设了对应的方法</span><br><span class="line">	inner join  内连接</span><br><span class="line">	left join   左连接</span><br><span class="line">	right join  右连接</span><br><span class="line">	union		全连接</span><br><span class="line">"""</span><br><span class="line"><span class="comment"># inner join  内连接</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">inner</span> <span class="keyword">join</span> dep <span class="keyword">on</span> emp.dep_id = dep.id;</span><br><span class="line"><span class="comment"># 只拼接两张表中公有的数据部分</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># left join   左连接</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">left</span> <span class="keyword">join</span> dep <span class="keyword">on</span> emp.dep_id = dep.id;</span><br><span class="line"><span class="comment"># 左表所有的数据都展示出来 没有对应的项就用NULL</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># right join  右连接</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">right</span> <span class="keyword">join</span> dep <span class="keyword">on</span> emp.dep_id = dep.id;</span><br><span class="line"><span class="comment"># 右表所有的数据都展示出来 没有对应的项就用NULL</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># union		全连接  左右两表所有的数据都展示出来</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">left</span> <span class="keyword">join</span> dep <span class="keyword">on</span> emp.dep_id = dep.id</span><br><span class="line"><span class="keyword">union</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">right</span> <span class="keyword">join</span> dep <span class="keyword">on</span> emp.dep_id = dep.id;</span><br></pre></td></tr></table></figure>

<h3 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">"""</span><br><span class="line">子查询就是我们平时解决问题的思路</span><br><span class="line">	分步骤解决问题</span><br><span class="line">		第一步</span><br><span class="line">		第二步</span><br><span class="line">		...</span><br><span class="line">将一个查询语句的结果当做另外一个查询语句的条件去用</span><br><span class="line">"""</span><br><span class="line"><span class="comment"># 查询部门是技术或者人力资源的员工信息</span></span><br><span class="line">	1 先获取部门的id号</span><br><span class="line">    2 再去员工表里面筛选出对应的员工</span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">id</span> <span class="keyword">from</span> dep <span class="keyword">where</span> <span class="keyword">name</span>=<span class="string">'技术'</span> <span class="keyword">or</span> <span class="keyword">name</span> = <span class="string">'人力资源'</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">name</span> <span class="keyword">from</span> emp <span class="keyword">where</span> dep_id <span class="keyword">in</span> (<span class="number">200</span>,<span class="number">201</span>);</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> dep_id <span class="keyword">in</span> (<span class="keyword">select</span> <span class="keyword">id</span> <span class="keyword">from</span> dep <span class="keyword">where</span> <span class="keyword">name</span>=<span class="string">'技术'</span> <span class="keyword">or</span> <span class="keyword">name</span> = <span class="string">'人力资源'</span>);</span><br></pre></td></tr></table></figure>

<p><strong>总结</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">表的查询结果可以作为其他表的查询条件</span><br><span class="line">也可以通过起别名的方式把它作为一个张虚拟表根其他表关联</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">多表查询就两种方式</span><br><span class="line">	先拼接表再查询</span><br><span class="line">	子查询 一步一步来</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>mysql数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>[navicat安装与pymysql模块]</title>
    <url>/2019/10/17/navicat%E5%AE%89%E8%A3%85%E4%B8%8Epymysql%E6%A8%A1%E5%9D%97/</url>
    <content><![CDATA[<h3 id="Navicat软件"><a href="#Navicat软件" class="headerlink" title="Navicat软件"></a>Navicat软件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;&quot;&quot;</span><br><span class="line">一开始学习python的时候 下载python解释器然后直接在终端书写</span><br><span class="line">pycharm能够更加方便快捷的帮助你书写python代码</span><br><span class="line">excel word pdf</span><br><span class="line"></span><br><span class="line">我们在终端操作MySQL 也没有自动提示也无法保存等等 不方便开发</span><br><span class="line">Navicat内部封装了所有的操作数据库的命令 </span><br><span class="line">用户在使用它的时候只需要鼠标点点即可完成操作 无需书写sql语句</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>

<p><strong>安装</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">直接百度搜索 有破解版的也有非破解</span><br><span class="line">非破解的有试用期 你如果不嫌麻烦 你就用使用</span><br><span class="line">到期之后重新装再使用 或者破解一下也很简单</span><br><span class="line">https:&#x2F;&#x2F;www.cr173.com&#x2F;soft&#x2F;126934.html</span><br><span class="line">    </span><br><span class="line">下载完成后是一个压缩包 直接解压 然后点击安装 有提醒直接点击next即可</span><br><span class="line"></span><br><span class="line">navicat能够充当多个数据库的客户端</span><br><span class="line"></span><br><span class="line">navicat图形化界面有时候反应速度较慢 你可以选择刷新或者关闭当前窗口再次打开即可</span><br><span class="line"></span><br><span class="line">当你有一些需求该软件无法满足的时候 你就自己动手写sql</span><br></pre></td></tr></table></figure>

<h3 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">"""</span><br><span class="line">1 MySQL是不区分大小写的</span><br><span class="line">	验证码忽略大小写</span><br><span class="line">		内部统一转大写或者小写比较即可</span><br><span class="line">			upper</span><br><span class="line">			lower</span><br><span class="line"></span><br><span class="line">2 MySQL建议所有的关键字写大写</span><br><span class="line"></span><br><span class="line">3 MySQL中的注释 有两种</span><br><span class="line">	<span class="comment">--</span></span><br><span class="line">	<span class="comment">#</span></span><br><span class="line"></span><br><span class="line">4 在navicat中如何快速的注释和解注释</span><br><span class="line">	ctrl + ？  加注释</span><br><span class="line">	ctrl + ？  基于上述操作再来一次就是解开注释</span><br><span class="line">	如果你的navicat版本不一致还有可能是</span><br><span class="line">	ctrl + shift + ？解开注释</span><br><span class="line">"""</span><br></pre></td></tr></table></figure>

<h3 id="练习题"><a href="#练习题" class="headerlink" title="练习题"></a>练习题</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">"""</span><br><span class="line">课下一定要把握上课将的这几道题全部自己独立的理解并写出来</span><br><span class="line"></span><br><span class="line">在解决sql查询问题的时候 不要慌</span><br><span class="line">一步一步慢慢来  最终能够东拼西凑出来就过关了！！！</span><br><span class="line"></span><br><span class="line">"""</span><br><span class="line"><span class="comment">-- 1、查询所有的课程的名称以及对应的任课老师姓名</span></span><br><span class="line"><span class="comment">-- SELECT</span></span><br><span class="line"><span class="comment">-- 	course.cname,</span></span><br><span class="line"><span class="comment">-- 	teacher.tname </span></span><br><span class="line"><span class="comment">-- FROM</span></span><br><span class="line"><span class="comment">-- 	course</span></span><br><span class="line"><span class="comment">-- 	INNER JOIN teacher ON course.teacher_id = teacher.tid;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 4、查询平均成绩大于八十分的同学的姓名和平均成绩</span></span><br><span class="line"><span class="comment">-- SELECT</span></span><br><span class="line"><span class="comment">-- 	student.sname,</span></span><br><span class="line"><span class="comment">-- 	t1.avg_num </span></span><br><span class="line"><span class="comment">-- FROM</span></span><br><span class="line"><span class="comment">-- 	student</span></span><br><span class="line"><span class="comment">-- 	INNER JOIN (</span></span><br><span class="line"><span class="comment">-- 	SELECT</span></span><br><span class="line"><span class="comment">-- 		score.student_id,</span></span><br><span class="line"><span class="comment">-- 		avg( num ) AS avg_num </span></span><br><span class="line"><span class="comment">-- 	FROM</span></span><br><span class="line"><span class="comment">-- 		score</span></span><br><span class="line"><span class="comment">-- 		INNER JOIN student ON score.student_id = student.sid </span></span><br><span class="line"><span class="comment">-- 	GROUP BY</span></span><br><span class="line"><span class="comment">-- 		score.student_id </span></span><br><span class="line"><span class="comment">-- 	HAVING</span></span><br><span class="line"><span class="comment">-- 		AVG( num ) &gt; 80 </span></span><br><span class="line"><span class="comment">-- 	) AS t1 ON student.sid = t1.student_id;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 7、 查询没有报李平老师课的学生姓名</span></span><br><span class="line"><span class="comment"># 分步操作</span></span><br><span class="line"><span class="comment"># 1 先找到李平老师教授的课程id</span></span><br><span class="line"><span class="comment"># 2 再找所有报了李平老师课程的学生id</span></span><br><span class="line"><span class="comment"># 3 之后去学生表里面取反 就可以获取到没有报李平老师课程的学生姓名</span></span><br><span class="line"><span class="comment">-- SELECT</span></span><br><span class="line"><span class="comment">-- 	student.sname </span></span><br><span class="line"><span class="comment">-- FROM</span></span><br><span class="line"><span class="comment">-- 	student </span></span><br><span class="line"><span class="comment">-- WHERE</span></span><br><span class="line"><span class="comment">-- 	sid NOT IN (</span></span><br><span class="line"><span class="comment">-- 	SELECT DISTINCT</span></span><br><span class="line"><span class="comment">-- 		score.student_id </span></span><br><span class="line"><span class="comment">-- 	FROM</span></span><br><span class="line"><span class="comment">-- 		score </span></span><br><span class="line"><span class="comment">-- 	WHERE</span></span><br><span class="line"><span class="comment">-- 		score.course_id IN ( SELECT course.cid FROM teacher INNER JOIN course ON teacher.tid = course.teacher_id WHERE teacher.tname = '李平老师' ) </span></span><br><span class="line"><span class="comment">-- 	);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 8、 查询没有同时选修物理课程和体育课程的学生姓名</span></span><br><span class="line"><span class="comment">--     (只要选了一门的 选了两门和没有选的都不要)</span></span><br><span class="line"><span class="comment"># 1 先查物理和体育课程的id</span></span><br><span class="line"><span class="comment"># 2 再去获取所有选了物理和体育的学生数据</span></span><br><span class="line"><span class="comment"># 3 按照学生分组 利用聚合函数count筛选出只选了一门的学生id</span></span><br><span class="line"><span class="comment"># 4 依旧id获取学生姓名</span></span><br><span class="line"><span class="comment">-- SELECT</span></span><br><span class="line"><span class="comment">-- 	student.sname </span></span><br><span class="line"><span class="comment">-- FROM</span></span><br><span class="line"><span class="comment">-- 	student </span></span><br><span class="line"><span class="comment">-- WHERE</span></span><br><span class="line"><span class="comment">-- 	student.sid IN (</span></span><br><span class="line"><span class="comment">-- 	SELECT</span></span><br><span class="line"><span class="comment">-- 		score.student_id </span></span><br><span class="line"><span class="comment">-- 	FROM</span></span><br><span class="line"><span class="comment">-- 		score </span></span><br><span class="line"><span class="comment">-- 	WHERE</span></span><br><span class="line"><span class="comment">-- 		score.course_id IN ( SELECT course.cid FROM course WHERE course.cname IN ( '物理', '体育' ) ) </span></span><br><span class="line"><span class="comment">-- 	GROUP BY</span></span><br><span class="line"><span class="comment">-- 		score.student_id </span></span><br><span class="line"><span class="comment">-- 	HAVING</span></span><br><span class="line"><span class="comment">-- 		COUNT( score.course_id ) = 1 </span></span><br><span class="line"><span class="comment">-- 	);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 9、 查询挂科超过两门(包括两门)的学生姓名和班级</span></span><br><span class="line"><span class="comment"># 1 先筛选出所有分数小于60的数据</span></span><br><span class="line"><span class="comment"># 2 按照学生分组 对数据进行计数获取大于等于2的数据</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">	class.caption,</span><br><span class="line">	student.sname </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">	<span class="keyword">class</span></span><br><span class="line">	<span class="keyword">INNER</span> <span class="keyword">JOIN</span> student <span class="keyword">ON</span> class.cid = student.class_id </span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">	student.sid <span class="keyword">IN</span> (</span><br><span class="line">	<span class="keyword">SELECT</span></span><br><span class="line">		score.student_id </span><br><span class="line">	<span class="keyword">FROM</span></span><br><span class="line">		score </span><br><span class="line">	<span class="keyword">WHERE</span></span><br><span class="line">		score.num &lt; <span class="number">60</span> <span class="keyword">GROUP</span> <span class="keyword">BY</span> score.student_id <span class="keyword">HAVING</span> <span class="keyword">COUNT</span>( score.course_id ) &gt;= <span class="number">2</span> </span><br><span class="line">	);</span><br></pre></td></tr></table></figure>

<h3 id="pymysql模块"><a href="#pymysql模块" class="headerlink" title="pymysql模块"></a>pymysql模块</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">支持python代码操作数据库MySQL</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">pip3 install pymysql</span><br></pre></td></tr></table></figure>

<h3 id="sql注入"><a href="#sql注入" class="headerlink" title="sql注入"></a>sql注入</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">利用一些语法的特性 书写一些特点的语句实现固定的语法</span></span><br><span class="line"><span class="string">MySQL利用的是MySQL的注释语法</span></span><br><span class="line"><span class="string">select * from user where name='jason' -- jhsadklsajdkla' and password=''</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">select * from user where name='xxx' or 1=1 -- sakjdkljakldjasl' and password=''</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">日常生活中很多软件在注册的时候都不能含有特殊符号</span><br><span class="line">因为怕你构造出特定的语句入侵数据库 不安全</span><br><span class="line"></span><br><span class="line"><span class="comment"># 敏感的数据不要自己做拼接 交给execute帮你拼接即可</span></span><br><span class="line"><span class="comment"># 结合数据库完成一个用户的登录功能？</span></span><br><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line">conn = pymysql.connect(</span><br><span class="line">    host = <span class="string">'127.0.0.1'</span>,</span><br><span class="line">    port = <span class="number">3306</span>,</span><br><span class="line">    user = <span class="string">'root'</span>,</span><br><span class="line">    password = <span class="string">'123456'</span>,</span><br><span class="line">    database = <span class="string">'day48'</span>,</span><br><span class="line">    charset = <span class="string">'utf8'</span>  <span class="comment"># 编码千万不要加-</span></span><br><span class="line">)  <span class="comment"># 链接数据库</span></span><br><span class="line">cursor = conn.cursor(cursor=pymysql.cursors.DictCursor)</span><br><span class="line"></span><br><span class="line">username = input(<span class="string">'&gt;&gt;&gt;:'</span>)</span><br><span class="line">password = input(<span class="string">'&gt;&gt;&gt;:'</span>)</span><br><span class="line">sql = <span class="string">"select * from user where name=%s and password=%s"</span></span><br><span class="line"><span class="comment"># 不要手动拼接数据 先用%s占位 之后将需要拼接的数据直接交给execute方法即可</span></span><br><span class="line">print(sql)</span><br><span class="line">rows = cursor.execute(sql,(username,password))  <span class="comment"># 自动识别sql里面的%s用后面元组里面的数据替换</span></span><br><span class="line"><span class="keyword">if</span> rows:</span><br><span class="line">    print(<span class="string">'登录成功'</span>)</span><br><span class="line">    print(cursor.fetchall())</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'用户名密码错误'</span>)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>mysql数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>[事务与开发模型]</title>
    <url>/2019/10/18/%E4%BA%8B%E5%8A%A1%E4%B8%8E%E5%BC%80%E5%8F%91%E6%A8%A1%E5%9E%8B/</url>
    <content><![CDATA[<h3 id="视图-了解"><a href="#视图-了解" class="headerlink" title="视图(了解)"></a>视图(了解)</h3><ul>
<li><p>什么是视图</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;&quot;&quot;</span><br><span class="line">视图就是通过查询得到一张虚拟表，然后保存下来，下次可以直接使用</span><br><span class="line">其实视图也是表</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>
</li>
<li><p>为什么要用视图</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;&quot;&quot;</span><br><span class="line">如果要频繁的操作一张虚拟表(拼表组成的)，你就可以制作成视图 后续直接操作</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>
</li>
<li><p>如何操作</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 固定语法</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">view</span> 表名 <span class="keyword">as</span> 虚拟表的查询<span class="keyword">sql</span>语句</span><br><span class="line"></span><br><span class="line"><span class="comment"># 具体操作</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">view</span> teacher2course <span class="keyword">as</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> teacher <span class="keyword">INNER</span> <span class="keyword">JOIN</span> course</span><br><span class="line"><span class="keyword">on</span> teacher.tid = course.teacher_id</span><br><span class="line">;</span><br></pre></td></tr></table></figure>
</li>
<li><p>注意</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;&quot;&quot;</span><br><span class="line">1 创建视图在硬盘上只会有表结构 没有表数据(数据还是来自于之前的表)</span><br><span class="line">2 视图一般只用来查询 里面的数据不要继续修改 可能会影响真正的表</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>
</li>
<li><p>视图到底使用频率高不高呢？</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;&quot;&quot;</span><br><span class="line">不高</span><br><span class="line">当你创建了很多视图之后 会造成表的不好维护 </span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"># 总结</span><br><span class="line">	视图了解即可 基本不用！！！</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="触发器-了解"><a href="#触发器-了解" class="headerlink" title="触发器(了解)"></a>触发器(了解)</h3><p>在满足对表数据进行增、删、改的情况下，自动触发的功能</p>
<p>使用触发器可以帮助我们实现监控、日志…</p>
<p>触发器可以在六种情况下自动触发 增前 增后 删前删后 改前改后</p>
<h3 id="基本语法结构"><a href="#基本语法结构" class="headerlink" title="基本语法结构"></a>基本语法结构</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">trigger</span> 触发器的名字  <span class="keyword">before</span>/<span class="keyword">after</span> <span class="keyword">insert</span>/<span class="keyword">update</span>/<span class="keyword">delete</span> <span class="keyword">on</span> 表名</span><br><span class="line"><span class="keyword">for</span> <span class="keyword">each</span> <span class="keyword">row</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">	<span class="keyword">sql</span>语句</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 具体使用 针对触发器的名字 我们通常需要做到见名知意</span></span><br><span class="line"><span class="comment"># 针对增</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">trigger</span> tri_before_insert_t1  <span class="keyword">before</span> <span class="keyword">insert</span> <span class="keyword">on</span> t1</span><br><span class="line"><span class="keyword">for</span> <span class="keyword">each</span> <span class="keyword">row</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">	<span class="keyword">sql</span>语句</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">trigger</span> tri_after_insert_t1  <span class="keyword">after</span> <span class="keyword">insert</span> <span class="keyword">on</span> t1</span><br><span class="line"><span class="keyword">for</span> <span class="keyword">each</span> <span class="keyword">row</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">	<span class="keyword">sql</span>语句</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="string">"""针对删除和修改 书写格式一致"""</span></span><br><span class="line"></span><br><span class="line">ps:修改MySQL默认的语句结束符  只作用于当前窗口</span><br><span class="line">	delimiter $$  将默认的结束符号由;改为$$</span><br><span class="line">    delimiter ;</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 案例</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> cmd (</span><br><span class="line">    <span class="keyword">id</span> <span class="built_in">INT</span> PRIMARY <span class="keyword">KEY</span> auto_increment,</span><br><span class="line">    <span class="keyword">USER</span> <span class="built_in">CHAR</span> (<span class="number">32</span>),</span><br><span class="line">    priv <span class="built_in">CHAR</span> (<span class="number">10</span>),</span><br><span class="line">    cmd <span class="built_in">CHAR</span> (<span class="number">64</span>),</span><br><span class="line">    sub_time datetime, <span class="comment">#提交时间</span></span><br><span class="line">    <span class="keyword">success</span> enum (<span class="string">'yes'</span>, <span class="string">'no'</span>) <span class="comment">#0代表执行失败</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> errlog (</span><br><span class="line">    <span class="keyword">id</span> <span class="built_in">INT</span> PRIMARY <span class="keyword">KEY</span> auto_increment,</span><br><span class="line">    err_cmd <span class="built_in">CHAR</span> (<span class="number">64</span>),</span><br><span class="line">    err_time datetime</span><br><span class="line">);</span><br><span class="line">"""</span><br><span class="line">当cmd表中的记录succes字段是no那么就触发触发器的执行去errlog表中插入数据</span><br><span class="line">NEW指代的就是一条条数据对象</span><br><span class="line">"""</span><br><span class="line">delimiter $$</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">trigger</span> tri_after_insert_cmd <span class="keyword">after</span> <span class="keyword">insert</span> <span class="keyword">on</span> cmd </span><br><span class="line"><span class="keyword">for</span> <span class="keyword">each</span> <span class="keyword">row</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">	<span class="keyword">if</span> NEW.success = <span class="string">'no'</span> <span class="keyword">then</span></span><br><span class="line">    	<span class="keyword">insert</span> <span class="keyword">into</span> errlog(err_cmd,err_time) <span class="keyword">values</span>(NEW.cmd,NEW.sub_time);</span><br><span class="line">    <span class="keyword">end</span> <span class="keyword">if</span>;</span><br><span class="line"><span class="keyword">end</span> $$</span><br><span class="line">delimiter ;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 朝cmd表插入数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> cmd (</span><br><span class="line">    <span class="keyword">USER</span>,</span><br><span class="line">    priv,</span><br><span class="line">    cmd,</span><br><span class="line">    sub_time,</span><br><span class="line">    <span class="keyword">success</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">    (<span class="string">'jason'</span>,<span class="string">'0755'</span>,<span class="string">'ls -l /etc'</span>,<span class="keyword">NOW</span>(),<span class="string">'yes'</span>),</span><br><span class="line">    (<span class="string">'jason'</span>,<span class="string">'0755'</span>,<span class="string">'cat /etc/passwd'</span>,<span class="keyword">NOW</span>(),<span class="string">'no'</span>),</span><br><span class="line">    (<span class="string">'jason'</span>,<span class="string">'0755'</span>,<span class="string">'useradd xxx'</span>,<span class="keyword">NOW</span>(),<span class="string">'no'</span>),</span><br><span class="line">    (<span class="string">'jason'</span>,<span class="string">'0755'</span>,<span class="string">'ps aux'</span>,<span class="keyword">NOW</span>(),<span class="string">'yes'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除触发器</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">trigger</span> tri_after_insert_cmd;</span><br></pre></td></tr></table></figure>

<h3 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h3><ul>
<li><p>什么是事务</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;&quot;&quot;</span><br><span class="line">开启一个事务可以包含多条sql语句 这些sql语句要么同时成功</span><br><span class="line">要么一个都别想成功 称之为事务的原子性</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>
</li>
<li><p>事务的作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;&quot;&quot;</span><br><span class="line">保证了对数据操作的安全性</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">eg:还钱的例子</span><br><span class="line">    egon用银行卡给我的支付宝转账1000</span><br><span class="line">    	1 将egon银行卡账户的数据减1000块</span><br><span class="line">        2 将jason支付宝账户的数据加1000块</span><br><span class="line">    </span><br><span class="line">   	你在操作多条数据的时候可能会出现某几条操作不成功的情况</span><br></pre></td></tr></table></figure>
</li>
<li><p>事务的四大特性</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;&quot;&quot;</span><br><span class="line">ACID</span><br><span class="line">A:原子性</span><br><span class="line">	一个事务是一个不可分割的单位，事务中包含的诸多操作</span><br><span class="line">	要么同时成功要么同时失败</span><br><span class="line">C:一致性</span><br><span class="line">	事务必须是使数据库从一个一致性的状态变到另外一个一致性的状态</span><br><span class="line">	一致性跟原子性是密切相关的</span><br><span class="line">I:隔离性</span><br><span class="line">	一个事务的执行不能被其他事务干扰</span><br><span class="line">	（即一个事务内部的操作及使用到的数据对并发的其他事务是隔离的，并发执行的事务之间也是互相不干扰的）</span><br><span class="line">D:持久性</span><br><span class="line">	也叫&quot;永久性&quot;</span><br><span class="line">	一个事务一旦提交成功执行成功 那么它对数据库中数据的修改应该是永久的</span><br><span class="line">	接下来的其他操作或者故障不应该对其有任何的影响</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>
</li>
<li><p>如何使用事务</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 事务相关的关键字</span></span><br><span class="line"><span class="comment"># 1 开启事务</span></span><br><span class="line"><span class="keyword">start</span> <span class="keyword">transaction</span>;</span><br><span class="line"><span class="comment"># 2 回滚(回到事务执行之前的状态)</span></span><br><span class="line"><span class="keyword">rollback</span>;</span><br><span class="line"><span class="comment"># 3 确认(确认之后就无法回滚了)</span></span><br><span class="line"><span class="keyword">commit</span>;</span><br><span class="line"></span><br><span class="line">"""模拟转账功能"""</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">user</span>(</span><br><span class="line">	<span class="keyword">id</span> <span class="built_in">int</span> primary <span class="keyword">key</span> auto_increment,</span><br><span class="line">    <span class="keyword">name</span> <span class="built_in">char</span>(<span class="number">16</span>),</span><br><span class="line">    balance <span class="built_in">int</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span>(<span class="keyword">name</span>,balance) <span class="keyword">values</span></span><br><span class="line">(<span class="string">'jason'</span>,<span class="number">1000</span>),</span><br><span class="line">(<span class="string">'egon'</span>,<span class="number">1000</span>),</span><br><span class="line">(<span class="string">'tank'</span>,<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1 先开启事务</span></span><br><span class="line"><span class="keyword">start</span> <span class="keyword">transaction</span>;</span><br><span class="line"><span class="comment"># 2 多条sql语句</span></span><br><span class="line"><span class="keyword">update</span> <span class="keyword">user</span> <span class="keyword">set</span> balance=<span class="number">900</span> <span class="keyword">where</span> <span class="keyword">name</span>=<span class="string">'jason'</span>;</span><br><span class="line"><span class="keyword">update</span> <span class="keyword">user</span> <span class="keyword">set</span> balance=<span class="number">1010</span> <span class="keyword">where</span> <span class="keyword">name</span>=<span class="string">'egon'</span>;</span><br><span class="line"><span class="keyword">update</span> <span class="keyword">user</span> <span class="keyword">set</span> balance=<span class="number">1090</span> <span class="keyword">where</span> <span class="keyword">name</span>=<span class="string">'tank'</span>;</span><br><span class="line"></span><br><span class="line">"""</span><br><span class="line">总结</span><br><span class="line">	当你想让多条sql语句保持一致性 要么同时成功要么同时失败 </span><br><span class="line">	你就应该考虑使用事务</span><br><span class="line">"""</span><br></pre></td></tr></table></figure>

<h3 id="存储过程-了解"><a href="#存储过程-了解" class="headerlink" title="存储过程(了解)"></a>存储过程(了解)</h3><p>存储过程就类似于python中的自定义函数</p>
<p>它的内部包含了一系列可以执行的sql语句，存储过程存放于MySQL服务端中，你可以直接通过调用存储过程触发内部sql语句的执行</p>
<p><strong>基本使用</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> 存储过程的名字(形参<span class="number">1</span>,形参<span class="number">2</span>,...)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">	<span class="keyword">sql</span>代码</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment"># 调用</span></span><br><span class="line"><span class="keyword">call</span> 存储过程的名字();</span><br></pre></td></tr></table></figure>

<h3 id="三种开发模型"><a href="#三种开发模型" class="headerlink" title="三种开发模型"></a>三种开发模型</h3><p>第一种</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;&quot;&quot;</span><br><span class="line">应用程序:程序员写代码开发</span><br><span class="line">MySQL:提前编写好存储过程，供应用程序调用</span><br><span class="line"></span><br><span class="line">好处:开发效率提升了 执行效率也上去了</span><br><span class="line">缺点:考虑到认为元素、跨部门沟通的问题  后续的存储过程的扩展性差</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>

<p>第二种</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;&quot;&quot;</span><br><span class="line">应用程序:程序员写代码开发之外 设计到数据库操作也自己动手写</span><br><span class="line">优点:扩展性很高</span><br><span class="line">缺点:</span><br><span class="line">	开发效率降低</span><br><span class="line">	编写sql语句太过繁琐 而且后续还需要考虑sql优化的问题</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>

<p>第三种</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;&quot;&quot;</span><br><span class="line">应用程序:只写程序代码 不写sql语句 基于别人写好的操作MySQL的python框架直接调用操作即可			ORM框架  </span><br><span class="line">优点:开发效率比上面两种情况都要高 </span><br><span class="line">缺点:语句的扩展性差 可能会出现效率低下的问题 </span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>

<p>第一种基本不用。一般都是第三种，出现效率问题再动手写sql</p>
</li>
<li><p>存储过程具体演示</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">delimiter $$</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> p1(</span><br><span class="line">	<span class="keyword">in</span> m <span class="built_in">int</span>,  <span class="comment"># 只进不出  m不能返回出去</span></span><br><span class="line">    <span class="keyword">in</span> n <span class="built_in">int</span>,</span><br><span class="line">    <span class="keyword">out</span> res <span class="built_in">int</span>  <span class="comment"># 该形参可以返回出去</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">	<span class="keyword">select</span> tname <span class="keyword">from</span> teacher <span class="keyword">where</span> tid&gt;m <span class="keyword">and</span> tid&lt;n;</span><br><span class="line">    <span class="keyword">set</span> res=<span class="number">666</span>;  <span class="comment"># 将res变量修改 用来标识当前的存储过程代码确实执行了</span></span><br><span class="line"><span class="keyword">end</span> $$</span><br><span class="line">delimiter ;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 针对形参res 不能直接传数据 应该传一个变量名</span></span><br><span class="line"><span class="comment"># 定义变量</span></span><br><span class="line"><span class="keyword">set</span> @ret = <span class="number">10</span>;</span><br><span class="line"><span class="comment"># 查看变量对应的值</span></span><br><span class="line"><span class="keyword">select</span> @ret;</span><br></pre></td></tr></table></figure>

<p>在pymysql模块中如何调用存储过程呢？</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">import pymysql</span><br><span class="line"></span><br><span class="line">conn = pymysql.connect(</span><br><span class="line">    host = '127.0.0.1',</span><br><span class="line">    port = 3306,</span><br><span class="line">    user = 'root',</span><br><span class="line">    passwd = '123456',</span><br><span class="line">    db = 'day48',</span><br><span class="line">    charset = 'utf8',</span><br><span class="line">    autocommit = True</span><br><span class="line">)</span><br><span class="line">cursor = conn.cursor(pymysql.cursors.DictCursor)</span><br><span class="line"><span class="comment"># 调用存储过程</span></span><br><span class="line">cursor.callproc('p1',(1,5,10))</span><br><span class="line">"""</span><br><span class="line">@_p1_0=1</span><br><span class="line">@_p1_1=5</span><br><span class="line">@_p1_2=10</span><br><span class="line">"""</span><br><span class="line"><span class="comment"># print(cursor.fetchall())</span></span><br><span class="line">cursor.execute(<span class="string">'select @_p1_2;'</span>)</span><br><span class="line">print(cursor.fetchall())</span><br></pre></td></tr></table></figure>

<h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p>跟存储过程是有区别的，存储过程是自定义函数，函数就类似于是内置函数</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">('jason','0755','ls -l /etc',NOW(),'yes')</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> blog (</span><br><span class="line">    <span class="keyword">id</span> <span class="built_in">INT</span> PRIMARY <span class="keyword">KEY</span> auto_increment,</span><br><span class="line">    <span class="keyword">NAME</span> <span class="built_in">CHAR</span> (<span class="number">32</span>),</span><br><span class="line">    sub_time datetime</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> blog (<span class="keyword">NAME</span>, sub_time)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">    (<span class="string">'第1篇'</span>,<span class="string">'2015-03-01 11:31:21'</span>),</span><br><span class="line">    (<span class="string">'第2篇'</span>,<span class="string">'2015-03-11 16:31:21'</span>),</span><br><span class="line">    (<span class="string">'第3篇'</span>,<span class="string">'2016-07-01 10:21:31'</span>),</span><br><span class="line">    (<span class="string">'第4篇'</span>,<span class="string">'2016-07-22 09:23:21'</span>),</span><br><span class="line">    (<span class="string">'第5篇'</span>,<span class="string">'2016-07-23 10:11:11'</span>),</span><br><span class="line">    (<span class="string">'第6篇'</span>,<span class="string">'2016-07-25 11:21:31'</span>),</span><br><span class="line">    (<span class="string">'第7篇'</span>,<span class="string">'2017-03-01 15:33:21'</span>),</span><br><span class="line">    (<span class="string">'第8篇'</span>,<span class="string">'2017-03-01 17:32:21'</span>),</span><br><span class="line">    (<span class="string">'第9篇'</span>,<span class="string">'2017-03-01 18:31:21'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">date_format</span>(sub_time,<span class="string">'%Y-%m'</span>),<span class="keyword">count</span>(<span class="keyword">id</span>) <span class="keyword">from</span> blog <span class="keyword">group</span> <span class="keyword">by</span> <span class="keyword">date_format</span>(sub_time,<span class="string">'%Y-%m'</span>);</span><br></pre></td></tr></table></figure>

<h3 id="流程控制-了解"><a href="#流程控制-了解" class="headerlink" title="流程控制(了解)"></a>流程控制(了解)</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment"># if判断</span></span><br><span class="line">delimiter //</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> proc_if ()</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">declare</span> i <span class="built_in">int</span> <span class="keyword">default</span> <span class="number">0</span>;</span><br><span class="line">    if i = 1 THEN</span><br><span class="line">        <span class="keyword">SELECT</span> <span class="number">1</span>;</span><br><span class="line">    ELSEIF i = 2 THEN</span><br><span class="line">        <span class="keyword">SELECT</span> <span class="number">2</span>;</span><br><span class="line">    ELSE</span><br><span class="line">        <span class="keyword">SELECT</span> <span class="number">7</span>;</span><br><span class="line">    <span class="keyword">END</span> <span class="keyword">IF</span>;</span><br><span class="line"><span class="keyword">END</span> //</span><br><span class="line">delimiter ;</span><br><span class="line"><span class="comment"># while循环</span></span><br><span class="line">delimiter //</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> proc_while ()</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">DECLARE</span> <span class="keyword">num</span> <span class="built_in">INT</span> ;</span><br><span class="line">    <span class="keyword">SET</span> <span class="keyword">num</span> = <span class="number">0</span> ;</span><br><span class="line">    WHILE num &lt; 10 DO</span><br><span class="line">        <span class="keyword">SELECT</span></span><br><span class="line">            <span class="keyword">num</span> ;</span><br><span class="line">        <span class="keyword">SET</span> <span class="keyword">num</span> = <span class="keyword">num</span> + <span class="number">1</span> ;</span><br><span class="line">    <span class="keyword">END</span> <span class="keyword">WHILE</span> ;</span><br></pre></td></tr></table></figure>

<h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><p>ps:数据都是存在与硬盘上的，查询数据不可避免的需要进行IO操作</p>
<p>索引:就是一种数据结构，类似于书的目录。意味着以后在查询数据的应该先找目录再找数据，而不是一页一页的翻书，从而提升查询速度降低IO操作</p>
<p>索引在MySQL中也叫“键”,是存储引擎用于快速查找记录的一种数据结构</p>
<ul>
<li>primary key</li>
<li>unique key</li>
<li>index key</li>
</ul>
<p>注意foreign key不是用来加速查询用的，不在我们的而研究范围之内</p>
<p>上面的三种key，前面两种除了可以增加查询速度之外各自还具有约束条件，而最后一种index key没有任何的约束条件，只是用来帮助你快速查询数据</p>
<p><strong>本质</strong></p>
<p>通过不断的缩小想要的数据范围筛选出最终的结果，同时将随机事件(一页一页的翻)</p>
<p>变成顺序事件(先找目录、找数据)</p>
<p>也就是说有了索引机制，我们可以总是用一种固定的方式查找数据</p>
<p>一张表中可以有多个索引(多个目录)</p>
<p>索引虽然能够帮助你加快查询速度但是也有缺点</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;&quot;&quot;</span><br><span class="line">1 当表中有大量数据存在的前提下 创建索引速度会很慢</span><br><span class="line">2 在索引创建完毕之后 对表的查询性能会大幅度的提升 但是写的性能也会大幅度的降低</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">索引不要随意的创建！！！</span><br></pre></td></tr></table></figure>

<h3 id="b-树"><a href="#b-树" class="headerlink" title="b+树"></a>b+树</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;&quot;&quot;</span><br><span class="line">只有叶子节点存放的是真实的数据 其他节点存放的是虚拟数据 仅仅是用来指路的</span><br><span class="line">树的层级越高查询数据所需要经历的步骤就越多(树有几层查询数据就需要几步)</span><br><span class="line"></span><br><span class="line">一个磁盘块存储是有限制的</span><br><span class="line">为什么建议你将id字段作为索引</span><br><span class="line">	占得空间少 一个磁盘块能够存储的数据多</span><br><span class="line">	那么久降低了树的高度 从而减少查询次数</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>

<h3 id="聚集索引-primary-key"><a href="#聚集索引-primary-key" class="headerlink" title="聚集索引(primary key)"></a>聚集索引(primary key)</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;&quot;&quot;</span><br><span class="line">聚集索引指的就是主键 </span><br><span class="line">Innodb  只有两个文件  直接将主键存放在了idb表中 </span><br><span class="line">MyIsam  三个文件  单独将索引存在一个文件</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>

<h3 id="辅助索引-unique-index"><a href="#辅助索引-unique-index" class="headerlink" title="辅助索引(unique,index)"></a>辅助索引(unique,index)</h3><p>查询数据的时候不可能一直使用到主键，也有可能会用到name,password等其他字段</p>
<p>那么这个时候你是没有办法利用聚集索引。这个时候你就可以根据情况给其他字段设置辅助索引(也是一个b+树）</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">"""</span><br><span class="line">叶子节点存放的是数据对应的主键值</span><br><span class="line">	先按照辅助索引拿到数据的主键值</span><br><span class="line">	之后还是需要去主键的聚集索引里面查询数据</span><br><span class="line">"""</span><br></pre></td></tr></table></figure>

<h3 id="覆盖索引"><a href="#覆盖索引" class="headerlink" title="覆盖索引"></a>覆盖索引</h3><p>在辅助索引的叶子节点就已经拿到了需要的数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 给name设置辅助索引</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">name</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> <span class="keyword">name</span>=<span class="string">'jason'</span>;</span><br><span class="line"><span class="comment"># 非覆盖索引</span></span><br><span class="line"><span class="keyword">select</span> age <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> <span class="keyword">name</span>=<span class="string">'jason'</span>;</span><br></pre></td></tr></table></figure>

<h3 id="测试索引是否有效的代码"><a href="#测试索引是否有效的代码" class="headerlink" title="测试索引是否有效的代码"></a>测试索引是否有效的代码</h3><p>感兴趣就自己试一试 不感兴趣直接忽略</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">**准备**</span><br><span class="line"></span><br><span class="line">​```mysql</span><br><span class="line"><span class="comment">#1. 准备表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> s1(</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">int</span>,</span><br><span class="line"><span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">20</span>),</span><br><span class="line">gender <span class="built_in">char</span>(<span class="number">6</span>),</span><br><span class="line">email <span class="built_in">varchar</span>(<span class="number">50</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">#2. 创建存储过程，实现批量插入记录</span></span><br><span class="line">delimiter $$ <span class="comment">#声明存储过程的结束符号为$$</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> auto_insert1()</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">declare</span> i <span class="built_in">int</span> <span class="keyword">default</span> <span class="number">1</span>;</span><br><span class="line">    while(i&lt;3000000)do</span><br><span class="line">        <span class="keyword">insert</span> <span class="keyword">into</span> s1 <span class="keyword">values</span>(i,<span class="string">'jason'</span>,<span class="string">'male'</span>,<span class="keyword">concat</span>(<span class="string">'jason'</span>,i,<span class="string">'@oldboy'</span>));</span><br><span class="line">        <span class="keyword">set</span> i=i+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">end</span> <span class="keyword">while</span>;</span><br><span class="line"><span class="keyword">END</span>$$ <span class="comment">#$$结束</span></span><br><span class="line">delimiter ; <span class="comment">#重新声明分号为结束符号</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#3. 查看存储过程</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">procedure</span> auto_insert1\G </span><br><span class="line"></span><br><span class="line"><span class="comment">#4. 调用存储过程</span></span><br><span class="line"><span class="keyword">call</span> auto_insert1();</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 表没有任何索引的情况下</span><br><span class="line">select * from s1 where id&#x3D;30000;</span><br><span class="line"># 避免打印带来的时间损耗</span><br><span class="line">select count(id) from s1 where id &#x3D; 30000;</span><br><span class="line">select count(id) from s1 where id &#x3D; 1;</span><br><span class="line"></span><br><span class="line"># 给id做一个主键</span><br><span class="line">alter table s1 add primary key(id);  # 速度很慢</span><br><span class="line"></span><br><span class="line">select count(id) from s1 where id &#x3D; 1;  # 速度相较于未建索引之前两者差着数量级</span><br><span class="line">select count(id) from s1 where name &#x3D; &#39;jason&#39;  # 速度仍然很慢</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">范围问题</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"># 并不是加了索引，以后查询的时候按照这个字段速度就一定快   </span><br><span class="line">select count(id) from s1 where id &gt; 1;  # 速度相较于id &#x3D; 1慢了很多</span><br><span class="line">select count(id) from s1 where id &gt;1 and id &lt; 3;</span><br><span class="line">select count(id) from s1 where id &gt; 1 and id &lt; 10000;</span><br><span class="line">select count(id) from s1 where id !&#x3D; 3;</span><br><span class="line"></span><br><span class="line">alter table s1 drop primary key;  # 删除主键 单独再来研究name字段</span><br><span class="line">select count(id) from s1 where name &#x3D; &#39;jason&#39;;  # 又慢了</span><br><span class="line"></span><br><span class="line">create index idx_name on s1(name);  # 给s1表的name字段创建索引</span><br><span class="line">select count(id) from s1 where name &#x3D; &#39;jason&#39;  # 仍然很慢！！！</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">再来看b+树的原理，数据需要区分度比较高，而我们这张表全是jason，根本无法区分</span><br><span class="line">那这个树其实就建成了“一根棍子”</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">select count(id) from s1 where name &#x3D; &#39;xxx&#39;;  </span><br><span class="line"># 这个会很快，我就是一根棍，第一个不匹配直接不需要再往下走了</span><br><span class="line">select count(id) from s1 where name like &#39;xxx&#39;;</span><br><span class="line">select count(id) from s1 where name like &#39;xxx%&#39;;</span><br><span class="line">select count(id) from s1 where name like &#39;%xxx&#39;;  # 慢 最左匹配特性</span><br><span class="line"></span><br><span class="line"># 区分度低的字段不能建索引</span><br><span class="line">drop index idx_name on s1;</span><br><span class="line"></span><br><span class="line"># 给id字段建普通的索引</span><br><span class="line">create index idx_id on s1(id);</span><br><span class="line">select count(id) from s1 where id &#x3D; 3;  # 快了</span><br><span class="line">select count(id) from s1 where id*12 &#x3D; 3;  # 慢了  索引的字段一定不要参与计算</span><br><span class="line"></span><br><span class="line">drop index idx_id on s1;</span><br><span class="line">select count(id) from s1 where name&#x3D;&#39;jason&#39; and gender &#x3D; &#39;male&#39; and id &#x3D; 3 and email &#x3D; &#39;xxx&#39;;</span><br><span class="line"># 针对上面这种连续多个and的操作，mysql会从左到右先找区分度比较高的索引字段，先将整体范围降下来再去比较其他条件</span><br><span class="line">create index idx_name on s1(name);</span><br><span class="line">select count(id) from s1 where name&#x3D;&#39;jason&#39; and gender &#x3D; &#39;male&#39; and id &#x3D; 3 and email &#x3D; &#39;xxx&#39;;  # 并没有加速</span><br><span class="line"></span><br><span class="line">drop index idx_name on s1;</span><br><span class="line"># 给name，gender这种区分度不高的字段加上索引并不难加快查询速度</span><br><span class="line"></span><br><span class="line">create index idx_id on s1(id);</span><br><span class="line">select count(id) from s1 where name&#x3D;&#39;jason&#39; and gender &#x3D; &#39;male&#39; and id &#x3D; 3 and email &#x3D; &#39;xxx&#39;;  # 快了  先通过id已经讲数据快速锁定成了一条了</span><br><span class="line">select count(id) from s1 where name&#x3D;&#39;jason&#39; and gender &#x3D; &#39;male&#39; and id &gt; 3 and email &#x3D; &#39;xxx&#39;;  # 慢了  基于id查出来的数据仍然很多，然后还要去比较其他字段</span><br><span class="line"></span><br><span class="line">drop index idx_id on s1</span><br><span class="line"></span><br><span class="line">create index idx_email on s1(email);</span><br><span class="line">select count(id) from s1 where name&#x3D;&#39;jason&#39; and gender &#x3D; &#39;male&#39; and id &gt; 3 and email &#x3D; &#39;xxx&#39;;  # 快 通过email字段一剑封喉</span><br></pre></td></tr></table></figure>

<h4 id="联合索引"><a href="#联合索引" class="headerlink" title="联合索引"></a>联合索引</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select count(id) from s1 where name&#x3D;&#39;jason&#39; and gender &#x3D; &#39;male&#39; and id &gt; 3 and email &#x3D; &#39;xxx&#39;;  </span><br><span class="line"># 如果上述四个字段区分度都很高，那给谁建都能加速查询</span><br><span class="line"># 给email加然而不用email字段</span><br><span class="line">select count(id) from s1 where name&#x3D;&#39;jason&#39; and gender &#x3D; &#39;male&#39; and id &gt; 3; </span><br><span class="line"># 给name加然而不用name字段</span><br><span class="line">select count(id) from s1 where gender &#x3D; &#39;male&#39; and id &gt; 3; </span><br><span class="line"># 给gender加然而不用gender字段</span><br><span class="line">select count(id) from s1 where id &gt; 3; </span><br><span class="line"></span><br><span class="line"># 带来的问题是所有的字段都建了索引然而都没有用到，还需要花费四次建立的时间</span><br><span class="line">create index idx_all on s1(email,name,gender,id);  # 最左匹配原则，区分度高的往左放</span><br><span class="line">select count(id) from s1 where name&#x3D;&#39;jason&#39; and gender &#x3D; &#39;male&#39; and id &gt; 3 and email &#x3D; &#39;xxx&#39;;  # 速度变快</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>mysql数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>[组件化开发]</title>
    <url>/2020/03/07/%E7%BB%84%E4%BB%B6%E5%8C%96%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<h1 id="5-组件化开发"><a href="#5-组件化开发" class="headerlink" title="5. 组件化开发"></a>5. 组件化开发</h1><h2 id="5-1-组件-component"><a href="#5-1-组件-component" class="headerlink" title="5.1 组件[component]"></a>5.1 组件[component]</h2><p>组件（Component）是自定义封装代码的功能。在前端开发过程中，经常出现多个网页的功能是重复的，而且很多不同的页面之间，也存在同样的功能。</p>
<p>而在网页中实现一个功能，需要使用html定义功能的内容结构，使用css声明功能的外观样式，还要使用js来定义功能的特效，因此就产生了把一个功能相关的[HTML、css和javascript]代码封装在一起组成一个整体的代码块封装模式，我们称之为“组件”。</p>
<p>所以，组件就是一个html网页中的功能，一般就是一个标签，标签中有自己的html内容结构，css样式和js特效。</p>
<p>这样，前端人员就可以在组件化开发时，只需要书写一次代码，随处引入即可使用。</p>
<p>vue的组件有两种：默认组件[全局组件] 和 单文件组件</p>
<h3 id="5-1-1-默认组件"><a href="#5-1-1-默认组件" class="headerlink" title="5.1.1 默认组件"></a>5.1.1 默认组件</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">addnum</span>&gt;</span><span class="tag">&lt;/<span class="name">addnum</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">addnum</span>&gt;</span><span class="tag">&lt;/<span class="name">addnum</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">addnum</span>&gt;</span><span class="tag">&lt;/<span class="name">addnum</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">addnum</span>&gt;</span><span class="tag">&lt;/<span class="name">addnum</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">addnum</span>&gt;</span><span class="tag">&lt;/<span class="name">addnum</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    Vue.component(<span class="string">"addnum"</span>,&#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">        template:'<span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"num"</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"num+=1"</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>',</span></span></span><br><span class="line"><span class="actionscript">        data: <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 写在这里的数据只有当前组件可以使用</span></span></span><br><span class="line"><span class="actionscript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line">                num:1,</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el:<span class="string">"#app"</span>,</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 这里写的数据是全局公用的，整个文件共享</span></span></span><br><span class="line">        data:&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="6-Vue自动化工具（Vue-cli）"><a href="#6-Vue自动化工具（Vue-cli）" class="headerlink" title="6. Vue自动化工具（Vue-cli）"></a>6. Vue自动化工具（Vue-cli）</h1><p>前面学习了普通组件以后，接下来我们继续学习单文件组件则需要提前先安装准备一些组件开发工具。否则无法使用和学习单文件组件。</p>
<p>一般情况下，单文件组件，我们运行在 自动化工具vue-CLI中，可以帮我们把单文件组件编译成普通的js代码。所以我们需要在电脑先安装搭建vue-CLI工具。</p>
<p>官网：<a href="https://cli.vuejs.org/zh/" target="_blank" rel="noopener">https://cli.vuejs.org/zh/</a></p>
<p>Vue CLI 需要 <a href="https://nodejs.org/" target="_blank" rel="noopener">Node.js</a> 8.9 或更高版本 (推荐 8.11.0+)。你可以使用 <a href="https://github.com/creationix/nvm" target="_blank" rel="noopener">nvm</a> 或 <a href="https://github.com/coreybutler/nvm-windows" target="_blank" rel="noopener">nvm-windows</a>在同一台电脑中管理多个 Node 版本。</p>
<p>nvm工具的下载和安装： <a href="https://www.jianshu.com/p/d0e0935b150a" target="_blank" rel="noopener">https://www.jianshu.com/p/d0e0935b150a</a></p>
<p> <a href="https://www.jianshu.com/p/622ad36ee020" target="_blank" rel="noopener">https://www.jianshu.com/p/622ad36ee020</a></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">curl -o- https://github.com/nvm-sh/nvm/v0.35.3/install.sh | bash</span><br></pre></td></tr></table></figure>

<p>安装记录:</p>
<p>打开:<a href="https://github.com/coreybutler/nvm-windows/releases" target="_blank" rel="noopener">https://github.com/coreybutler/nvm-windows/releases</a></p>
<p>安装完成以后,先查看环境变量是否设置好了.</p>
<p><img src="/images/1552357036022.png" alt=""></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">常用的nvm命令</span><br><span class="line"></span><br><span class="line">nvm list   # 列出目前在nvm里面安装的所有node版本</span><br><span class="line">nvm install node版本号      # 安装指定版本的node.js</span><br><span class="line">nvm uninstall node版本号    # 卸载指定版本的node.js</span><br><span class="line">nvm use node版本号          # 切换当前使用的node.js版本</span><br></pre></td></tr></table></figure>

<p>如果使用nvm工具，则直接可以不用自己手动下载，如果使用nvm下载安装 node的npm比较慢的时候，可以修改nvm的配置文件(在安装根目录下)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># settings.txt</span><br><span class="line">root: C:\tool\nvm    [这里的目录地址是安装nvm时自己设置的地址,要根据实际修改]</span><br><span class="line">path: C:\tool\nodejs</span><br><span class="line">arch: 64</span><br><span class="line">proxy: none</span><br><span class="line">node_mirror: http:&#x2F;&#x2F;npm.taobao.org&#x2F;mirrors&#x2F;node&#x2F; </span><br><span class="line">npm_mirror: https:&#x2F;&#x2F;npm.taobao.org&#x2F;mirrors&#x2F;npm&#x2F;</span><br></pre></td></tr></table></figure>

<h2 id="6-1-安装node-js"><a href="#6-1-安装node-js" class="headerlink" title="6.1 安装node.js"></a>6.1 安装node.js</h2><p>Node.js是一个新的后端(后台)语言，它的语法和JavaScript类似，所以可以说它是属于前端的后端语言，后端语言和前端语言的区别：</p>
<ul>
<li>运行环境：后端语言一般运行在服务器端，前端语言运行在客户端的浏览器上</li>
<li>功能：后端语言可以操作文件，可以读写数据库，前端语言不能操作文件，不能读写数据库。</li>
</ul>
<p>我们一般安装LTS(长线支持版本 Long-Time Support)：</p>
<p>下载地址：<a href="https://nodejs.org/en/download/【上面已经安装了nvm，那么这里不用手动安装了】" target="_blank" rel="noopener">https://nodejs.org/en/download/【上面已经安装了nvm，那么这里不用手动安装了】</a></p>
<p>node.js的版本有两大分支：</p>
<p>官方发布的node.js版本：0.xx.xx 这种版本号就是官方发布的版本</p>
<p>社区发布的node.js版本：xx.xx.x 就是社区开发的版本</p>
<p>Node.js如果安装成功，可以查看Node.js的版本,在终端输入如下命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure>

<h2 id="6-2-npm"><a href="#6-2-npm" class="headerlink" title="6.2 npm"></a>6.2 npm</h2><p>在安装node.js完成后，在node.js中会同时帮我们安装一个npm包管理器npm。我们可以借助npm命令来安装node.js的包。这个工具相当于python的pip管理器。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -g 包名              # 安装模块   -g表示全局安装，如果没有-g，则表示在当前项目安装</span><br><span class="line">npm list                        # 查看当前目录下已安装的node包</span><br><span class="line">npm view 包名 engines            # 查看包所依赖的Node的版本 </span><br><span class="line">npm outdated                    # 检查包是否已经过时，命令会列出所有已过时的包</span><br><span class="line">npm update 包名                  # 更新node包</span><br><span class="line">npm uninstall 包名               # 卸载node包</span><br><span class="line">npm 命令 -h                      # 查看指定命令的帮助文档</span><br></pre></td></tr></table></figure>

<h2 id="6-3-安装Vue-cli"><a href="#6-3-安装Vue-cli" class="headerlink" title="6.3 安装Vue-cli"></a>6.3 安装Vue-cli</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -g vue-cli</span><br></pre></td></tr></table></figure>

<p>如果安装速度过慢，一直超时，可以考虑切换npm镜像源：<a href="http://npm.taobao.org/" target="_blank" rel="noopener">http://npm.taobao.org/</a></p>
<h2 id="6-4-使用Vue-CLI初始化创建前端项目"><a href="#6-4-使用Vue-CLI初始化创建前端项目" class="headerlink" title="6.4 使用Vue-CLI初始化创建前端项目"></a>6.4 使用Vue-CLI初始化创建前端项目</h2><h3 id="6-4-1-生成项目目录"><a href="#6-4-1-生成项目目录" class="headerlink" title="6.4.1 生成项目目录"></a>6.4.1 生成项目目录</h3><p>使用vue-cli自动化工具可以快速搭建单页应用项目目录。</p>
<p>该工具为现代化的前端开发工作流提供了开箱即用的构建配置。只需几分钟即可创建并启动一个带热重载、保存时静态检查以及可用于生产环境的构建配置的项目：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 生成一个基于 webpack 模板的新项目</span><br><span class="line">vue init webpack 项目目录名</span><br><span class="line">例如：</span><br><span class="line">vue init webpack myproject</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 启动开发服务器 ctrl+c 停止服务</span><br><span class="line">cd myproject</span><br><span class="line">npm run dev           # 运行这个命令就可以启动node提供的测试http服务器</span><br></pre></td></tr></table></figure>

<p>运行了上面代码以后,终端下会出现以下效果提示：</p>
<p><img src="/images/1552187745456.png" alt=""></p>
<p>1552187745456</p>
<p>那么访问：<a href="http://localhost:8080/" target="_blank" rel="noopener">http://localhost:8080/</a></p>
<p><img src="/images/1552187794989.png" alt=""></p>
<h3 id="6-4-2-项目目录结构"><a href="#6-4-2-项目目录结构" class="headerlink" title="6.4.2 项目目录结构"></a>6.4.2 项目目录结构</h3><p>src 主开发目录，要开发的单文件组件全部在这个目录下的components目录下</p>
<p>static 静态资源目录，所有的css，js，图片等资源文件放在这个文件夹</p>
<p>dist项目打包发布文件夹，最后要上线单文件项目文件都在这个文件夹中[后面打包项目,让项目中的vue组件经过编译变成js 代码以后,dist就出现了]</p>
<p>node_modules目录是node的依赖包目录</p>
<p>config是配置目录，</p>
<p>build是项目打包时依赖的目录</p>
<p>src/router 路由,后面需要我们在使用Router路由的时候,自己声明.</p>
<h3 id="6-4-3-vue项目执行流程图"><a href="#6-4-3-vue项目执行流程图" class="headerlink" title="6.4.3 vue项目执行流程图"></a>6.4.3 vue项目执行流程图</h3><p><img src="/images/page_structrue.png" alt=""></p>
<p>page_structrue</p>
<p>整个项目是一个主文件index.html,index.html中会引入src文件夹中的main.js,main.js中会导入顶级单文件组件App.vue,App.vue中会通过组件嵌套或者路由来引用components文件夹中的其他单文件组件。</p>
<h2 id="7-单文件组件的使用"><a href="#7-单文件组件的使用" class="headerlink" title="7. 单文件组件的使用"></a>7. 单文件组件的使用</h2><p>组件有两种：普通组件、单文件组件</p>
<p>普通组件的缺点：</p>
<ol>
<li>html代码是作为js的字符串进行编写，所以组装和开发的时候不易理解，而且没有高亮效果。</li>
<li>普通组件用在小项目中非常合适，但是复杂的大项目中，如果把更多的组件放在html文件中，那么维护成本就会变得非常昂贵。</li>
<li>普通组件只是整合了js和html，但是css代码被剥离出去了。使用的时候的时候不好处理。</li>
</ol>
<p>将一个组件相关的html结构，css样式，以及交互的JavaScript代码从html文件中剥离出来，合成一个文件，这种文件就是单文件组件，相当于一个组件具有了结构、表现和行为的完整功能，方便组件之间随意组合以及组件的重用，这种文件的扩展名为“.vue”，比如：“Home.vue”。</p>
<ol>
<li>创建组件</li>
</ol>
<p><img src="/images/1552362045478.png" alt=""></p>
<p>在组件中编辑三个标签，编写视图、vm对象和css样式代码。</p>
<h3 id="7-1-template-编写html代码的地方"><a href="#7-1-template-编写html代码的地方" class="headerlink" title="7.1 template 编写html代码的地方"></a>7.1 template 编写html代码的地方</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"Home"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> @<span class="attr">click</span>=<span class="string">"num--"</span> <span class="attr">class</span>=<span class="string">"sub"</span>&gt;</span>-<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">size</span>=<span class="string">"1"</span> <span class="attr">v-model</span>=<span class="string">"num"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> @<span class="attr">click</span>=<span class="string">"num++"</span> <span class="attr">class</span>=<span class="string">"add"</span>&gt;</span>+<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="7-2-script编写vue-js代码"><a href="#7-2-script编写vue-js代码" class="headerlink" title="7.2 script编写vue.js代码"></a>7.2 script编写vue.js代码</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    name:<span class="string">"Home"</span>,</span><br><span class="line">    data: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        num:<span class="number">0</span>,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="7-3-style编写当前组件的样式代码"><a href="#7-3-style编写当前组件的样式代码" class="headerlink" title="7.3 style编写当前组件的样式代码"></a>7.3 style编写当前组件的样式代码</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.sub</span>,<span class="selector-class">.add</span>&#123;</span></span><br><span class="line">    border: 1px solid red;</span><br><span class="line">    padding: 4px 7px;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="7-4-完成案例-点击加减数字"><a href="#7-4-完成案例-点击加减数字" class="headerlink" title="7.4 完成案例-点击加减数字"></a>7.4 完成案例-点击加减数字</h3><p>创建Homes.vue</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"add_num"</span>&gt;</span><br><span class="line">      &lt;span @click=<span class="string">"num++"</span>&gt;+&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">      &lt;input type="text" size="2" v-model="num"&gt;</span></span><br><span class="line"><span class="regexp">      &lt;span @click="num--"&gt;-&lt;/</span>span&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line">    name:<span class="string">"AddNum"</span>,</span><br><span class="line">    data: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        num: <span class="number">0</span>,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;style scoped&gt;</span></span><br><span class="line"><span class="regexp">   .add_num&#123;</span></span><br><span class="line"><span class="regexp">      font-size: 32px;</span></span><br><span class="line"><span class="regexp">   &#125;</span></span><br><span class="line"><span class="regexp">&lt;/</span>style&gt;</span><br></pre></td></tr></table></figure>

<p>在App.vue组件中调用上面的组件</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=<span class="string">"Home"</span>&gt;</span><br><span class="line">    &lt;span @click=<span class="string">"num--"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"sub"</span>&gt;-&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">    &lt;input type="text" size="1" v-model="num"&gt;</span></span><br><span class="line"><span class="regexp">    &lt;span @click="num++" class="add"&gt;+&lt;/</span>span&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    name:<span class="string">"Home"</span>,</span><br><span class="line">    data: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        num:<span class="number">0</span>,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;style scoped&gt;</span></span><br><span class="line"><span class="regexp">  .sub,.add&#123;</span></span><br><span class="line"><span class="regexp">    border: 1px solid red;</span></span><br><span class="line"><span class="regexp">    padding: 4px 7px;</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&lt;/</span>style&gt;</span><br></pre></td></tr></table></figure>

<p>在开发vue项目之前，需要手动把 App.vue的HelloWorld组件代码以及默认的css样式，清楚。</p>
<p>上面的代码效果：</p>
<p><img src="/images/1552362182984.png" alt=""></p>
<h3 id="7-4-组件的嵌套"><a href="#7-4-组件的嵌套" class="headerlink" title="7.4 组件的嵌套"></a>7.4 组件的嵌套</h3><p>有时候开发vue项目时,页面也可以算是一个大组件,同时页面也可以分成多个子组件.</p>
<p>因为,产生了父组件调用子组件的情况.</p>
<p>例如,我们可以声明一个组件,作为父组件</p>
<p>在components/创建一个保存子组件的目录HomeSon</p>
<p><img src="/images/1552363669256.png" alt=""></p>
<p>1552363669256</p>
<p>在HomeSon目录下,可以创建当前页面的子组件,例如,是Menu.vue</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  组件中代码必须写在同一个标签中</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div id=<span class="string">"menu"</span>&gt;</span><br><span class="line">      &lt;span&gt;&#123;&#123;msg&#125;&#125;&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">      &lt;div&gt;hello&lt;/</span>div&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    name:<span class="string">"Menu"</span>,</span><br><span class="line">    data: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        msg:<span class="string">"这是Menu组件里面的菜单"</span>,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>

<p>然后，在父组件中调用上面声明的子组件。</p>
<p><img src="/images/1552363770013.png" alt=""></p>
<p>1552363770013</p>
<p>最后,父组件被App.vue调用.就可以看到页面效果.</p>
<p><img src="/images/1552363834171.png" alt=""></p>
<p>1552363834171</p>
<p><img src="/images/1552363702858.png" alt=""></p>
<p>效果:</p>
<p><img src="/images/1552363849977.png" alt=""></p>
<p>1552363702858</p>
<h3 id="7-5-传递数据"><a href="#7-5-传递数据" class="headerlink" title="7.5 传递数据"></a>7.5 传递数据</h3><h3 id="父组件的数据传递给子组件"><a href="#父组件的数据传递给子组件" class="headerlink" title="父组件的数据传递给子组件"></a>父组件的数据传递给子组件</h3><p>例如,我们希望把父组件的数据传递给子组件.</p>
<p>可以通过props属性来进行数据传递.</p>
<p>传递数据三个步骤：</p>
<ol>
<li><p>在父组件中，调用子组件的组名处，使用属性值的方式往下传递数据</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Menu</span> <span class="attr">:mynum</span>=<span class="string">"num"</span> <span class="attr">title</span>=<span class="string">"home里面写的数据"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"># 上面表示在父组件调用Menu子组件的时候传递了2个数据：</span><br><span class="line">  如果要传递变量[变量可以各种类型的数据]，属性名左边必须加上冒号:，同时，属性名是自定义的，会在子组件中使用。</span><br><span class="line">  如果要传递普通字符串数据，则不需要加上冒号:</span><br></pre></td></tr></table></figure>
</li>
<li><p>在子组件中接受上面父组件传递的数据，需要在vm组件对象中，使用props属性类接受。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    name:<span class="string">"Menu"</span>,</span><br><span class="line">    props:[<span class="string">"mynum"</span>,<span class="string">"title"</span>],</span><br><span class="line">    data: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        msg:<span class="string">"这是Menu组件里面的菜单"</span>,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 上面 props属性中表示接受了两个数据。</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在子组件中的template中使用父组件传递过来的数据.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"menu"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;msg&#125;&#125;，&#123;&#123;title&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>hello，&#123;&#123;mynum&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>效果：</p>
<p><img src="/images/1552364511546.png" alt=""></p>
<p>1552364511546</p>
<p>步骤流程:</p>
<p><img src="/images/1552364590540.png" alt=""></p>
<p>1552364590540</p>
<p>使用父组件传递数据给子组件时, 注意一下几点:</p>
<ol>
<li><p>传递数据是变量,则需要在属性左边添加冒号.</p>
<p>传递数据是变量,这种数据称之为“动态数据传递”</p>
<p>传递数据不是变量,这种数据称之为“静态数据传递”</p>
</li>
<li><p>父组件中修改了数据,在子组件中会被同步修改,但是,子组件中的数据修改了,是不是影响到父组件中的数据.</p>
<p>这种情况,在开发时,也被称为“单向数据流”</p>
</li>
</ol>
<h3 id="子组件传递数据给父组件"><a href="#子组件传递数据给父组件" class="headerlink" title="子组件传递数据给父组件"></a>子组件传递数据给父组件</h3><ol>
<li><p>在子组件中，通过<code>this.$emit()</code>来调用父组件中定义的事件.</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;p&gt;Post的子组件&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">      &lt;h2&gt;&#123;&#123;fnum&#125;&#125;&lt;/</span>h2&gt;</span><br><span class="line">      &lt;p&gt;data=&#123;&#123;data&#125;&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">      &lt;p&gt;fnum=&#123;&#123;fnum&#125;&#125;&lt;/</span>p&gt;</span><br><span class="line">      &lt;div&gt;<span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"fnum"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">        name: <span class="string">"PostSon"</span>,</span><br><span class="line">        <span class="comment">// 父组件传递数据给子组件: 1. 在父组件中调用子组件的组件名称标签上面声明属性和传递值，2. 在子组件中通过props进行接收</span></span><br><span class="line">        props:[<span class="string">"data"</span>,<span class="string">"fnum"</span>],  <span class="comment">// 接受父组件中传递过来的数据</span></span><br><span class="line">        <span class="comment">// 子组件传递数据给父组件[事件的方式进行传递]：</span></span><br><span class="line">        watch:&#123;</span><br><span class="line">          fnum()&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.fnum);</span><br><span class="line">            <span class="comment">// this.$emit("父元素的自定义事件","要传递的数据");  // 通过this.$emit()方法，子组件可以把数据传递给父组件</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">this</span>.$emit(<span class="string">"postparentdata"</span>,<span class="keyword">this</span>.fnum);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;style scoped&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;/</span>style&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>父组件中声明一个和子组件中<code>this.$emit(&quot;自定义事件名称&quot;)</code>对应的事件属性。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>num=&#123;&#123;num&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">Son</span> <span class="attr">data</span>=<span class="string">"我是付组件里面的内容"</span> <span class="attr">:fnum</span>=<span class="string">"num"</span> @<span class="attr">postparentdata</span>=<span class="string">"getsondata"</span>&gt;</span><span class="tag">&lt;/<span class="name">Son</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>父组件中，声明一个自定义方法，在事件被调用时，执行的。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">import</span> Son <span class="keyword">from</span> <span class="string">"./PostSon"</span></span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">        name: <span class="string">"Post"</span>,</span><br><span class="line">        data()&#123;</span><br><span class="line">          <span class="keyword">return</span> &#123;</span><br><span class="line">            num: <span class="number">100</span>,</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        components:&#123;</span><br><span class="line">          Son:Son,</span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">          getsondata(message)&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"父组件"</span>+message);</span><br><span class="line">            <span class="keyword">this</span>.num = message;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>作业：</p>
<ol>
<li>使用组件化开发，完成之前的选项卡练习功能</li>
<li>使用组件化开发，完成之前的todolist功能</li>
<li>使用组件化开发，完成table表格的增删查改作业，数据使用本地存储进行保存</li>
</ol>
<h2 id="8-在组件中使用axios获取数据"><a href="#8-在组件中使用axios获取数据" class="headerlink" title="8. 在组件中使用axios获取数据"></a>8. 在组件中使用axios获取数据</h2><p>默认情况下，我们的项目中并没有对axios包的支持，所以我们需要下载安装。</p>
<p>在项目根目录中使用 npm安装包</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install axios</span><br></pre></td></tr></table></figure>

<p>接着在main.js文件中，导入axios并把axios对象 挂载到vue属性中多为一个子对象，这样我们才能在组件中使用。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">// The Vue build version to load <span class="keyword">with</span> the `<span class="keyword">import</span>` command</span><br><span class="line">// (runtime-only <span class="keyword">or</span> standalone) has been set <span class="keyword">in</span> webpack.base.conf <span class="keyword">with</span> an alias.</span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App'</span> // 这里表示从别的目录下导入 单文件组件</span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span>; // 从node_modules目录中导入包</span><br><span class="line">Vue.config.productionTip = false</span><br><span class="line"></span><br><span class="line">Vue.prototype.$axios = axios; // 把对象挂载vue中</span><br><span class="line"></span><br><span class="line">/* eslint-disable no-new */</span><br><span class="line">new Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  components: &#123; App &#125;,</span><br><span class="line">  template: <span class="string">'&lt;App/&gt;'</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="8-1-在组建中使用axios获取数据"><a href="#8-1-在组建中使用axios获取数据" class="headerlink" title="8.1 在组建中使用axios获取数据"></a>8.1 在组建中使用axios获取数据</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line">	。。。</span><br><span class="line">	methods:&#123;</span><br><span class="line">      get_data:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">         <span class="comment">// 使用axios请求数据</span></span><br><span class="line">        <span class="keyword">this</span>.$axios.get(<span class="string">"http://wthrcdn.etouch.cn/weather_mini?city=深圳"</span>).then(<span class="function">(<span class="params">response</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(response);</span><br><span class="line">        &#125;).catch(<span class="function"><span class="params">error</span>=&gt;</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(error);</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果:</p>
<p><img src="/images/1552202922168.png" alt=""></p>
<p>使用的时候，因为本质上来说，我们还是原来的axios，所以也会收到同源策略的影响。</p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>vue框架</tag>
      </tags>
  </entry>
  <entry>
    <title>[客户端项目搭建]</title>
    <url>/2020/03/08/%E5%AE%A2%E6%88%B7%E7%AB%AF%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h1 id="2-客户端项目搭建"><a href="#2-客户端项目搭建" class="headerlink" title="2. 客户端项目搭建"></a>2. 客户端项目搭建</h1><h2 id="2-1-创建项目目录"><a href="#2-1-创建项目目录" class="headerlink" title="2.1 创建项目目录"></a>2.1 创建项目目录</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd 项目目录[荏苒资讯]</span><br><span class="line">vue init webpack renran</span><br></pre></td></tr></table></figure>

<p>例如，我要把项目保存在桌面下的子目录renran ~/Desktop/renran，可以如下操作：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd Desktop&#x2F;renran</span><br><span class="line">vue init webpack renran_pc</span><br></pre></td></tr></table></figure>

<p><img src="/images/1581901045861.png" alt=""></p>
<p>1581901045861</p>
<p>打开项目已经，在pycharm的终端下运行vue项目，查看效果。</p>
<p><img src="/images/1581901177538.png" alt=""></p>
<p>1581901177538</p>
<p><img src="/images/1581901225429.png" alt=""></p>
<p>1581901225429</p>
<p>上面的操作步骤，等同于执行了下面这句命令。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure>

<p>接下来，我们根据终端上效果显示的对应地址来访问项目(如果有多个vue项目在运行，8080端口被占据了，服务器会自动改端口，所以根据自己实际在操作中看到的地址来访问。)</p>
<p>访问：<a href="http://localost:8080" target="_blank" rel="noopener">http://localost:8080</a></p>
<p><img src="/images/1581901294089.png" alt=""></p>
<p>1581901294089</p>
<h2 id="2-2-初始化项目"><a href="#2-2-初始化项目" class="headerlink" title="2.2 初始化项目"></a>2.2 初始化项目</h2><p>清除默认的HelloWorld.vue组件和APP.vue中的默认模板代码和默认css样式</p>
<p><img src="/images/1581901419680.png" alt=""></p>
<p>1581901419680</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">  name: <span class="string">'App'</span>,</span></span><br><span class="line">  components: &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>接下来，我们可以查看效果了，一张白纸~</p>
<p><img src="/images/1556414476287.png" alt=""></p>
<p>1556414476287</p>
<h2 id="2-3-安装路由vue-router"><a href="#2-3-安装路由vue-router" class="headerlink" title="2.3 安装路由vue-router"></a>2.3 安装路由vue-router</h2><p>官方文档：<a href="https://router.vuejs.org/zh/" target="_blank" rel="noopener">https://router.vuejs.org/zh/</a></p>
<h3 id="2-3-1-下载安装路由组件"><a href="#2-3-1-下载安装路由组件" class="headerlink" title="2.3.1 下载安装路由组件"></a>2.3.1 下载安装路由组件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm i vue-router -S# npm install vue-router --save</span><br></pre></td></tr></table></figure>

<h3 id="2-3-2-配置路由"><a href="#2-3-2-配置路由" class="headerlink" title="2.3.2 配置路由"></a>2.3.2 配置路由</h3><h3 id="2-3-2-1-初始化路由对象"><a href="#2-3-2-1-初始化路由对象" class="headerlink" title="2.3.2.1 初始化路由对象"></a>2.3.2.1 初始化路由对象</h3><p>在src目录下创建routes路由目录，在router目录下创建index.js路由文件</p>
<p>index.js路由文件中，编写初始化路由对象的代码 .</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">// <span class="number">1.</span> 引入vue和vue-router组件核心对象，并在vue中通过use注册vue-router组件</span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">"vue"</span>;</span><br><span class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">"vue-router"</span>;</span><br><span class="line"></span><br><span class="line">Vue.use(Router);</span><br><span class="line"></span><br><span class="line">// <span class="number">2.</span> 暴露vue-router对象，并在vue-router里面编写路由，提供给main.js调用</span><br><span class="line">export default new Router(&#123;</span><br><span class="line">  // 设置路由模式为‘history’，去掉默认的<span class="comment">#</span></span><br><span class="line">  mode: <span class="string">"history"</span>,</span><br><span class="line">  routes:[</span><br><span class="line">    // 路由列表</span><br><span class="line">	</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="2-3-2-2-注册路由信息"><a href="#2-3-2-2-注册路由信息" class="headerlink" title="2.3.2.2 注册路由信息"></a>2.3.2.2 注册路由信息</h3><p>打开main.js文件，把router路由规则对象注册到vue中，代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">// The Vue build version to load <span class="keyword">with</span> the `<span class="keyword">import</span>` command</span><br><span class="line">// (runtime-only <span class="keyword">or</span> standalone) has been set <span class="keyword">in</span> webpack.base.conf <span class="keyword">with</span> an alias.</span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App'</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">'./router/index'</span>;</span><br><span class="line"></span><br><span class="line">Vue.config.productionTip = false</span><br><span class="line"></span><br><span class="line">/* eslint-disable no-new */</span><br><span class="line">new Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  router,</span><br><span class="line">  components: &#123; App &#125;,</span><br><span class="line">  template: <span class="string">'&lt;App/&gt;'</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="2-3-2-3-在视图中显示路由对应的内容"><a href="#2-3-2-3-在视图中显示路由对应的内容" class="headerlink" title="2.3.2.3 在视图中显示路由对应的内容"></a>2.3.2.3 在视图中显示路由对应的内容</h3><p>在App.vue组件中，添加显示路由对应的内容。代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 标签名必须是这个rouer-view --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">  name: <span class="string">'App'</span>,</span></span><br><span class="line">  components: &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>注意：如果在vue创建项目的时候，设置安装vue-router，则项目会自动帮我们生成上面的router目录和index.js里面的代码，以及自动到main.js里面注册路由对象。</p>
<h3 id="2-3-3-路由对象提供的操作"><a href="#2-3-3-路由对象提供的操作" class="headerlink" title="2.3.3 路由对象提供的操作"></a>2.3.3 路由对象提供的操作</h3><p>在我们安装注册了vue-router组件以后，vue-router在vue项目中会帮我们在全局范围内所有组件里面创建2个对象给我们使用：</p>
<ol>
<li><code>this.$router</code>，可用于在js代码中进行页面跳转。</li>
<li><code>this.$route</code>，可用于获取地址栏上面的url参数。</li>
</ol>
<h3 id="2-3-3-1-页面跳转"><a href="#2-3-3-1-页面跳转" class="headerlink" title="2.3.3.1 页面跳转"></a>2.3.3.1 页面跳转</h3><p>在vue-router提供的操作中， 进行页面跳转有2种方式：</p>
<ol>
<li><p>使用<code>&lt;router-link to=&quot;url地址&quot;&gt;</code>来跳转</p>
</li>
<li><p>在<code>&lt;script&gt;</code>中使用<code>this.$router.push(url地址)</code>来跳转</p>
<p>在<code>&lt;script&gt;</code>中还可以使用<code>this.$router.go(整数)</code>，表示跳转返回上一页或者上几页，下一个或者下几页</p>
</li>
</ol>
<h3 id="2-3-3-1-1-router-link标签"><a href="#2-3-3-1-1-router-link标签" class="headerlink" title="2.3.3.1.1 router-link标签"></a>2.3.3.1.1 router-link标签</h3><p>例如，我们就可以在Home.vue组件中，使用router-link跳转到User.vue组件中。</p>
<p>routes/index.js，代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">// <span class="number">1.</span> 引入vue和vue-router组件核心对象，并在vue中通过use注册vue-router组件</span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">"vue"</span>;</span><br><span class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">"vue-router"</span>;</span><br><span class="line"></span><br><span class="line">Vue.use(Router); // Router是类</span><br><span class="line">// <span class="number">2.</span> 暴露vue-router对象，并在vue-router里面编写路由，提供给main.js调用</span><br><span class="line"></span><br><span class="line">// 导入组件</span><br><span class="line">// <span class="keyword">import</span> 组件名 <span class="keyword">from</span> <span class="string">"../components/组件名"</span></span><br><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">"../components/Home"</span>;</span><br><span class="line"><span class="keyword">import</span> User <span class="keyword">from</span> <span class="string">"../components/User"</span>;</span><br><span class="line"></span><br><span class="line">export default new Router(&#123;</span><br><span class="line">  mode:<span class="string">"history"</span>,  // 路由地址的显示模式： 默认hash，表示地址栏上面出现<span class="comment">#</span></span><br><span class="line">  routes:[</span><br><span class="line">    // &#123;</span><br><span class="line">    //   name:<span class="string">"路由名称[对应组件的name值，将来用于跳转页面]"</span>,</span><br><span class="line">    //   path: <span class="string">"访问url路径"</span>,</span><br><span class="line">    //   component: 组件名</span><br><span class="line">    // &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      name:<span class="string">"Home"</span>,</span><br><span class="line">      path: <span class="string">"/"</span>,</span><br><span class="line">      component: Home</span><br><span class="line">    &#125;,&#123;</span><br><span class="line">      name:<span class="string">"User"</span>,</span><br><span class="line">      path: <span class="string">"/user"</span>,</span><br><span class="line">      component: User</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// vue-router除了可以进行组件和url地址的绑定以外，还可以</span><br><span class="line">// 进行不同组件的页面跳转，</span><br></pre></td></tr></table></figure>

<p>Home.vue代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      首页页面组件</span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/user"</span>&gt;</span>个人中心<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- router-link标签，本质上就是a标签，只是由vue-router进行加工处理</span></span><br><span class="line"><span class="comment">      可以显示局部页面刷新，不会重新加载内容，进行ajax跳转</span></span><br><span class="line"><span class="comment">       --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/user"</span>&gt;</span>个人中心<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">"url"</span>&gt;</span>个人中心<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">"&#123;name:'User'&#125;"</span>&gt;</span>个人中心<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">        name: <span class="string">"Home"</span>,</span></span><br><span class="line">        data()&#123;</span><br><span class="line"><span class="actionscript">          <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">              url: <span class="string">"/user"</span>,</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/images/1581908101280.png" alt=""></p>
<p>1581908101280</p>
<h3 id="2-3-3-1-2-this-router-push-跳转"><a href="#2-3-3-1-2-this-router-push-跳转" class="headerlink" title="2.3.3.1.2 this.$router.push()跳转"></a>2.3.3.1.2 <code>this.$router.push()</code>跳转</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      首页页面组件</span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/user"</span>&gt;</span>个人中心<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- router-link标签，本质上就是a标签，只是由vue-router进行加工处理</span></span><br><span class="line"><span class="comment">      可以显示局部页面刷新，不会重新加载内容，进行ajax跳转</span></span><br><span class="line"><span class="comment">       --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/user"</span>&gt;</span>个人中心<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">"url"</span>&gt;</span>个人中心<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">"&#123;name:'User'&#125;"</span>&gt;</span>个人中心<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"jump"</span>&gt;</span>个人中心<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">        name: <span class="string">"Home"</span>,</span></span><br><span class="line">        data()&#123;</span><br><span class="line"><span class="actionscript">          <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">              url: <span class="string">"/user"</span>,</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">          jump()&#123;</span><br><span class="line"><span class="actionscript">              <span class="comment">// 开发中可以先进行权限，登录之类的判断，然后再进行跳转</span></span></span><br><span class="line"><span class="actionscript">                <span class="comment">// this.$router.back(); // 返回上一页，本质上就是 location.back()</span></span></span><br><span class="line"><span class="actionscript">                <span class="comment">// this.$router.go(-1); // 返回上一页，本质上就是 location.go()</span></span></span><br><span class="line"><span class="actionscript">                <span class="comment">// this.$router.forward(); // 跳转到下一页，本质上就是 location.forward()</span></span></span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.$router.push(<span class="string">"/user"</span>); <span class="comment">// 跳转到站内的制定地址页面中，本质上就是 location.href</span></span></span><br><span class="line"><span class="actionscript">                <span class="comment">// 注意,this.$router.push() 不能跳转到其他网站。如果真的要跳转外站，则使用location.href="站外地址，记得加上http://协议"</span></span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-3-3-2-参数传递"><a href="#2-3-3-2-参数传递" class="headerlink" title="2.3.3.2 参数传递"></a>2.3.3.2 参数传递</h3><p><code>vue-router</code>提供了<code>this.$route</code>，可以让我们接收来自其他页面的附带参数。参数有2种：</p>
<ol>
<li><p>查询字符串(<code>query string</code>)，就是地址栏上面<code>?</code>号后面的参数，</p>
<p>例如：<code>http://localhost:8008/user?name=xiaoming&amp;pwd=123</code>，这里<code>name=xiaoming&amp;pwd=123</code>就是查询字符串参数。</p>
</li>
<li><p>路由参数(<code>router params</code>)，就是地址栏上面路由路径的一部分，</p>
<p>例如：<code>http://localhost:8080/user/300/xiaoming</code>，此时，300属于路由路径的一部分，这个300就是路由参数.，当然，xiaoming,或者user也可以理解是路由参数，就是看我们的页面中是否需要接收而已。</p>
</li>
</ol>
<h3 id="2-3-3-2-1-获取查询字符串"><a href="#2-3-3-2-1-获取查询字符串" class="headerlink" title="2.3.3.2.1 获取查询字符串"></a>2.3.3.2.1 获取查询字符串</h3><ol>
<li>必须先有一个页面跳转发送参数。例如，在Home组件中跳转到User组件中，需要传递name和pwd查询字符串。</li>
</ol>
<p>Home.vue代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      首页页面组件</span><br><span class="line"><span class="comment">&lt;!--      &lt;a href="/user"&gt;个人中心&lt;/a&gt;</span></span><br><span class="line"><span class="comment">      &amp;lt;!&amp;ndash; router-link标签，本质上就是a标签，只是由vue-router进行加工处理</span></span><br><span class="line"><span class="comment">      可以显示局部页面刷新，不会重新加载内容，进行ajax跳转</span></span><br><span class="line"><span class="comment">       &amp;ndash;&amp;gt;</span></span><br><span class="line"><span class="comment">      &lt;router-link to="/user"&gt;个人中心&lt;/router-link&gt;</span></span><br><span class="line"><span class="comment">      &lt;router-link :to="url"&gt;个人中心&lt;/router-link&gt;</span></span><br><span class="line"><span class="comment">      &lt;router-link :to="&#123;name:'User'&#125;"&gt;个人中心&lt;/router-link&gt;</span></span><br><span class="line"><span class="comment">      &lt;button @click="jump"&gt;个人中心&lt;/button&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">"`/user?name=$&#123;name&#125;&amp;pwd=$&#123;pwd&#125;`"</span>&gt;</span>查询字符串参数<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">"'/user?name='+name+'&amp;pwd='+pwd"</span>&gt;</span>查询字符串参数<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">        name: <span class="string">"Home"</span>,</span></span><br><span class="line">        data()&#123;</span><br><span class="line"><span class="actionscript">          <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">              name: <span class="string">"xiaoming"</span>,</span></span><br><span class="line"><span class="actionscript">              pwd: <span class="string">"123"</span>,</span></span><br><span class="line"><span class="actionscript">              url: <span class="string">"/user"</span>,</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">          jump()&#123;</span><br><span class="line"><span class="actionscript">              <span class="comment">// 开发中可以先进行权限，登录之类的判断，然后再进行跳转</span></span></span><br><span class="line"><span class="actionscript">                <span class="comment">// this.$router.back(); // 返回上一页，本质上就是 location.back()</span></span></span><br><span class="line"><span class="actionscript">                <span class="comment">// this.$router.go(-1); // 返回上一页，本质上就是 location.go()</span></span></span><br><span class="line"><span class="actionscript">                <span class="comment">// this.$router.forward(); // 跳转到下一页，本质上就是 location.forward()</span></span></span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.$router.push(<span class="string">"/user"</span>); <span class="comment">// 跳转到站内的制定地址页面中，本质上就是 location.href</span></span></span><br><span class="line"><span class="actionscript">                <span class="comment">// 注意,this.$router.push 不能跳转到其他网站。如果真的要跳转外站，则使用location.href="站外地址，记得加上http://协议"</span></span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol>
<li>可以下一个页面中，这里代表的就是User组件，接收来自Home组件的参数。</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      用户中心页面组件</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">        name: <span class="string">"User"</span>,</span></span><br><span class="line">        created() &#123;</span><br><span class="line"><span class="actionscript">            <span class="comment">// 接收地址栏上面的参数</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// this.$route是vue-router提供的一个用于接收地址参数的对象。</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 经过main.js里面注册router对象以后，</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 将来在所有的子组件中，可以通过this.$route来获取参数或者通过this.$router跳转页面</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 查询字符串参数</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// query是this.$route里面的一个数组，this.$route会自动收集地址栏上所有的参数保存到query里面</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// let name = this.$route.query.name;</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// let pwd = this.$route.query.pwd;</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// console.log(`name=$&#123;name&#125;&amp;pwd=$&#123;pwd&#125;`);  // ``里面，$&#123;&#125;圈住的内容会被js当成变量来解析</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-3-4-2-获取路由参数"><a href="#2-3-4-2-获取路由参数" class="headerlink" title="2.3.4.2 获取路由参数"></a>2.3.4.2 获取路由参数</h3><p>例如：我们用户的界面都是一样的，但是每一个用户来到自己的页面中，显示的内容肯定都是不一样的，此时，我们需要使用不同的路径来区分不同的用户。这时候，可以在路由路径中使用路由参数表示不同用户的id</p>
<p>例如：我们就需要设置一个route/index.js中路由信息里面，哪一段路由属于路由参数。</p>
<p>src/routes/index.js设置路由参数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">// <span class="number">1.</span> 引入vue和vue-router组件核心对象，并在vue中通过use注册vue-router组件</span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">"vue"</span>;</span><br><span class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">"vue-router"</span>;</span><br><span class="line"></span><br><span class="line">Vue.use(Router); // Router是类</span><br><span class="line">// <span class="number">2.</span> 暴露vue-router对象，并在vue-router里面编写路由，提供给main.js调用</span><br><span class="line"></span><br><span class="line">// 导入组件</span><br><span class="line">// <span class="keyword">import</span> 组件名 <span class="keyword">from</span> <span class="string">"../components/组件名"</span></span><br><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">"../components/Home"</span>;</span><br><span class="line"><span class="keyword">import</span> User <span class="keyword">from</span> <span class="string">"../components/User"</span>;</span><br><span class="line"></span><br><span class="line">export default new Router(&#123;</span><br><span class="line">  mode:<span class="string">"history"</span>,  // 路由地址的显示模式： 默认hash，表示地址栏上面出现<span class="comment">#</span></span><br><span class="line">  routes:[</span><br><span class="line">    // &#123;</span><br><span class="line">    //   name:<span class="string">"路由名称[对应组件的name值，将来用于跳转页面]"</span>,</span><br><span class="line">    //   path: <span class="string">"访问url路径"</span>,</span><br><span class="line">    //   component: 组件名</span><br><span class="line">    // &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      name:<span class="string">"Home"</span>,</span><br><span class="line">      path: <span class="string">"/"</span>,</span><br><span class="line">      component: Home</span><br><span class="line">    &#125;,&#123;</span><br><span class="line">      name:<span class="string">"User"</span>,</span><br><span class="line">      path: <span class="string">"/user/:id/img-:img_id"</span>,</span><br><span class="line">      component: User</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// vue-router除了可以进行组件和url地址的绑定以外，还可以</span><br><span class="line">// 进行不同组件的页面跳转，</span><br></pre></td></tr></table></figure>

<p>然后我们就是在Home中如果需要转到User里面。</p>
<p>Home.vue代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      首页页面组件</span><br><span class="line"><span class="comment">&lt;!--      &lt;a href="/user"&gt;个人中心&lt;/a&gt;</span></span><br><span class="line"><span class="comment">      &amp;lt;!&amp;ndash; router-link标签，本质上就是a标签，只是由vue-router进行加工处理</span></span><br><span class="line"><span class="comment">      可以显示局部页面刷新，不会重新加载内容，进行ajax跳转</span></span><br><span class="line"><span class="comment">       &amp;ndash;&amp;gt;</span></span><br><span class="line"><span class="comment">      &lt;router-link to="/user"&gt;个人中心&lt;/router-link&gt;</span></span><br><span class="line"><span class="comment">      &lt;router-link :to="url"&gt;个人中心&lt;/router-link&gt;</span></span><br><span class="line"><span class="comment">      &lt;router-link :to="&#123;name:'User'&#125;"&gt;个人中心&lt;/router-link&gt;</span></span><br><span class="line"><span class="comment">      &lt;button @click="jump"&gt;个人中心&lt;/button&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--      &lt;router-link :to="`/user?name=$&#123;name&#125;&amp;pwd=$&#123;pwd&#125;`"&gt;查询字符串参数&lt;/router-link&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--      &lt;router-link :to="'/user?name='+name+'&amp;pwd='+pwd"&gt;查询字符串参数&lt;/router-link&gt;--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/user/100/img-10086"</span>&gt;</span>路由参数<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">        name: <span class="string">"Home"</span>,</span></span><br><span class="line">        data()&#123;</span><br><span class="line"><span class="actionscript">          <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">              name: <span class="string">"xiaoming"</span>,</span></span><br><span class="line"><span class="actionscript">              pwd: <span class="string">"123"</span>,</span></span><br><span class="line"><span class="actionscript">              url: <span class="string">"/user"</span>,</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">          jump()&#123;</span><br><span class="line"><span class="actionscript">              <span class="comment">// 开发中可以先进行权限，登录之类的判断，然后再进行跳转</span></span></span><br><span class="line"><span class="actionscript">                <span class="comment">// this.$router.back(); // 返回上一页，本质上就是 location.back()</span></span></span><br><span class="line"><span class="actionscript">                <span class="comment">// this.$router.go(-1); // 返回上一页，本质上就是 location.go()</span></span></span><br><span class="line"><span class="actionscript">                <span class="comment">// this.$router.forward(); // 跳转到下一页，本质上就是 location.forward()</span></span></span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.$router.push(<span class="string">"/user"</span>); <span class="comment">// 跳转到站内的制定地址页面中，本质上就是 location.href</span></span></span><br><span class="line"><span class="actionscript">                <span class="comment">// 注意,this.$router.push 不能跳转到其他网站。如果真的要跳转外站，则使用location.href="站外地址，记得加上http://协议"</span></span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>User.vue，组件中可以通过<code>this.$route.params</code>接收路由参数。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      用户中心页面组件</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">        name: <span class="string">"User"</span>,</span><br><span class="line">        created() &#123;</span><br><span class="line">            <span class="comment">// 接收地址栏上面的参数</span></span><br><span class="line">            <span class="comment">// this.$route是vue-router提供的一个用于接收地址参数的对象。</span></span><br><span class="line">            <span class="comment">// 经过main.js里面注册router对象以后，</span></span><br><span class="line">            <span class="comment">// 将来在所有的子组件中，可以通过this.$route来获取参数或者通过this.$router跳转页面</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 查询字符串参数</span></span><br><span class="line">            <span class="comment">// query是this.$route里面的一个数组，this.$route会自动收集地址栏上所有的参数保存到query里面</span></span><br><span class="line">            <span class="comment">// let name = this.$route.query.name;</span></span><br><span class="line">            <span class="comment">// let pwd = this.$route.query.pwd;</span></span><br><span class="line">            <span class="comment">// console.log(`name=$&#123;name&#125;&amp;pwd=$&#123;pwd&#125;`);  // ``里面，$&#123;&#125;圈住的内容会被js当成变量来解析</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 路由参数</span></span><br><span class="line">            <span class="comment">// params是this.$route里面的一个数组，this.$route会自动收集路由列表中已经标记为路由参数所有内容保存到params中</span></span><br><span class="line">            <span class="keyword">let</span> id = <span class="keyword">this</span>.$route.params.id;</span><br><span class="line">            <span class="built_in">console</span>.log(id);</span><br><span class="line">            <span class="keyword">let</span> img_id = <span class="keyword">this</span>.$route.params.img_id;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">`img_id = <span class="subst">$&#123;img_id&#125;</span>`</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;style scoped&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;/</span>style&gt;</span><br></pre></td></tr></table></figure>

<h1 id="3-ElementUI"><a href="#3-ElementUI" class="headerlink" title="3. ElementUI"></a>3. ElementUI</h1><p>对于前端页面布局，我们可以使用一些开源的UI框架来配合开发，常用的UI框: bootstap，H-ui框架，lay-UI框架，Amaze UI，zui框架，ElementUI.</p>
<p>Vue开发前端项目中，比较常用的就是ElementUI了。</p>
<p>ElementUI是饿了么团队开发的一个UI组件框架，这个框架提前帮我们提供了很多已经写好的通用模块，我们可以在Vue项目中引入来使用，这个框架的使用类似于我们前面学习的bootstrap框架，也就是说，我们完全可以把官方文档中的组件代码拿来就用，有定制性的内容，可以直接通过样式进行覆盖修改就可以了。</p>
<p><img src="/images/1552501300174.png" alt=""></p>
<p>1552501300174</p>
<p>中文官网：<a href="http://element-cn.eleme.io/#/zh-CN" target="_blank" rel="noopener">http://element-cn.eleme.io/#/zh-CN</a></p>
<p>文档快速入门：<a href="http://element-cn.eleme.io/#/zh-CN/component/quickstart" target="_blank" rel="noopener">http://element-cn.eleme.io/#/zh-CN/component/quickstart</a></p>
<h3 id="3-1-快速安装ElementUI"><a href="#3-1-快速安装ElementUI" class="headerlink" title="3.1 快速安装ElementUI"></a>3.1 快速安装ElementUI</h3><p>项目根目录执行以下命令:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm i element-ui -S</span><br></pre></td></tr></table></figure>

<p>上面的命令等同于 <code>npm install element-ui --save</code></p>
<p>执行命令效果：</p>
<p><img src="/images/1556417812874.png" alt=""></p>
<p>1556417812874</p>
<h3 id="3-2-配置ElementUI到项目中"><a href="#3-2-配置ElementUI到项目中" class="headerlink" title="3.2 配置ElementUI到项目中"></a>3.2 配置ElementUI到项目中</h3><p>在main.js中导入ElementUI，并调用。代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">// elementUI 导入</span><br><span class="line"><span class="keyword">import</span> ElementUI <span class="keyword">from</span> <span class="string">'element-ui'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'element-ui/lib/theme-chalk/index.css'</span>;</span><br><span class="line">// 调用插件</span><br><span class="line">Vue.use(ElementUI);</span><br></pre></td></tr></table></figure>

<p>成功引入了ElementUI以后，接下来我们就可以开始进入前端页面开发，首先是首页。</p>
<h1 id="4-首页"><a href="#4-首页" class="headerlink" title="4. 首页"></a>4. 首页</h1><p>首页采用了上下页面布局，首页是导航栏、轮播图。。。脚部等几个小模块。所以我们可以把首页作为一个组件进行开发，然后把首页的这些小模块作为单独的组件来进行开发。</p>
<h2 id="4-1-创建首页组件"><a href="#4-1-创建首页组件" class="headerlink" title="4.1 创建首页组件"></a>4.1 创建首页组件</h2><p>在src/components目录下创建文件 Home.vue</p>
<p>代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"home"</span>&gt;</span></span><br><span class="line">    首页</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">  name:<span class="string">"Home"</span>,</span></span><br><span class="line">  data()&#123;</span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="4-1-1-创建首页对应的路由"><a href="#4-1-1-创建首页对应的路由" class="headerlink" title="4.1.1 创建首页对应的路由"></a>4.1.1 创建首页对应的路由</h3><p>在router/index.js中引入Home组件，并设置Home组件作为首页路由。</p>
<p>代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">"vue"</span></span><br><span class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">"vue-router"</span></span><br><span class="line"></span><br><span class="line">// 后面这里引入可以被用户访问的页面组件</span><br><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">"../components/Home"</span></span><br><span class="line"></span><br><span class="line">Vue.use(Router);</span><br><span class="line"></span><br><span class="line">export default new Router(&#123;</span><br><span class="line">  // 路由跳转模式，注意使用 history</span><br><span class="line">  mode: <span class="string">"history"</span>,</span><br><span class="line"></span><br><span class="line">  // 路由规则</span><br><span class="line">  routes:[</span><br><span class="line">    &#123;</span><br><span class="line">      // name:<span class="string">"路由别名"</span>,</span><br><span class="line">      name:<span class="string">"Home"</span>,</span><br><span class="line">      // path: <span class="string">"路由地址"</span>,</span><br><span class="line">      path: <span class="string">"/"</span>,</span><br><span class="line">      // component: 组件类名,</span><br><span class="line">      component: Home,</span><br><span class="line">    &#125;,</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>vue框架</tag>
      </tags>
  </entry>
</search>
