<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>[Django Rest Framework]</title>
    <url>/2020/04/22/Django%20Rest%20Framework%E6%A1%86%E6%9E%B6/</url>
    <content><![CDATA[<h1 id="DRF框架"><a href="#DRF框架" class="headerlink" title="DRF框架"></a>DRF框架</h1><p>Django Rest Framework 是一个强大且灵活的工具包，用以构建Web API</p>
<p>为什么要使用Rest Framework</p>
<p>Django REST Framework可以在Django的基础上迅速实现API，并且自身还带有WEB的测试页面，可以方便的测试自己的API</p>
<p><a href="https://rogerxs80.github.io/2020/04/22/API%E8%A7%84%E8%8C%83%E4%B8%8Edrf%E5%AE%89%E8%A3%85/" target="_blank" rel="noopener">restful API规范与DRF安装</a></p>
<p><a href="https://rogerxs80.github.io/2020/04/22/%E5%BA%8F%E5%88%97%E5%8C%96%E5%99%A8-Serializer/" target="_blank" rel="noopener">序列化器-Serializer</a></p>
<p><a href="https://rogerxs80.github.io/2020/04/22/http%E8%AF%B7%E6%B1%82%E5%A4%84%E7%90%86/" target="_blank" rel="noopener">HTTP请求处理</a></p>
<p><a href="https://rogerxs80.github.io/2020/04/22/%E8%A7%86%E5%9B%BEView%E4%B8%8E%E8%B7%AF%E7%94%B1Router/" target="_blank" rel="noopener">视图View与路由Router</a></p>
<p><a href="https://rogerxs80.github.io/2020/04/22/DRF%E6%A1%86%E6%9E%B6%E4%B8%AD%E5%B8%B8%E7%94%A8%E7%9A%84%E7%BB%84%E4%BB%B6/" target="_blank" rel="noopener">DRF框架中常用的组件</a></p>
<p><a href="https://www.notion.so/xadmin-2047b48498d2461e9f91191fe07a8738" target="_blank" rel="noopener">xadmin</a></p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>Django Rest_Framework</tag>
      </tags>
  </entry>
  <entry>
    <title>[Django框架]</title>
    <url>/2020/02/10/Django%E6%A1%86%E6%9E%B6/</url>
    <content><![CDATA[<h2 id="Django框架"><a href="#Django框架" class="headerlink" title="Django框架"></a>Django框架</h2><p>Django 是用Python开发的一个免费开源的Web框架，可以用于快速搭建高性能，优雅的网站！采用了MVC的框架模式，即模型M，视图V和控制器C，也可以称为MVT模式，模型M，视图V，模板T</p>
<p><a href="https://rogerxs80.github.io/2020/02/10/%E5%88%9D%E8%AF%86django%E6%A1%86%E6%9E%B6/" target="_blank" rel="noopener">初识django框架</a></p>
<p><a href="https://rogerxs80.github.io/2020/02/10/%E9%9D%99%E6%80%81%E6%96%87%E4%BB%B6%E3%80%81request%E5%AF%B9%E8%B1%A1%E4%B8%8E%E9%93%BE%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93/" target="_blank" rel="noopener">静态文件、request对象与链接数据库</a></p>
<p><a href="https://rogerxs80.github.io/2020/02/11/%E6%95%B0%E6%8D%AE%E7%BC%96%E8%BE%91%E3%80%81orm%E8%A1%A8%E5%85%B3%E7%B3%BB%E5%92%8C%E8%B7%AF%E7%94%B1%E5%B1%82/" target="_blank" rel="noopener">数据编辑、orm表关系和路由层</a></p>
<p><a href="https://rogerxs80.github.io/2020/02/12/%E8%A7%86%E5%9B%BE%E5%B1%82/" target="_blank" rel="noopener">视图层</a></p>
<p><a href="https://rogerxs80.github.io/2020/02/12/%E6%A8%A1%E6%9D%BF%E5%B1%82/" target="_blank" rel="noopener">模板层</a></p>
<p><a href="https://rogerxs80.github.io/2020/02/12/%E6%A8%A1%E5%9E%8B%E5%B1%82/" target="_blank" rel="noopener">模型层</a></p>
<p><a href="https://rogerxs80.github.io/2020/02/15/Ajax%E6%93%8D%E4%BD%9C/" target="_blank" rel="noopener">Ajax操作</a></p>
<p><a href="https://rogerxs80.github.io/2020/02/15/Forms%E7%BB%84%E4%BB%B6/" target="_blank" rel="noopener">Forms组件</a></p>
<p><a href="https://rogerxs80.github.io/2020/02/16/Cookie%E4%B8%8ESession/" target="_blank" rel="noopener">Cookie与Session</a></p>
<p><a href="https://rogerxs80.github.io/2020/02/17/django%E4%B8%AD%E9%97%B4%E4%BB%B6%E4%B8%8Ecsrf%E8%B7%A8%E7%AB%99%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0/" target="_blank" rel="noopener">django中间件与csrf跨站请求伪造</a></p>
<p><a href="https://rogerxs80.github.io/2020/02/17/MTV%E5%92%8CMVC%E6%A8%A1%E5%9E%8B%E4%B8%8EAuth%E6%A8%A1%E5%9D%97/" target="_blank" rel="noopener">MTV和MVC模型与Auth模块</a></p>
<p><a href="https://rogerxs80.github.io/2020/02/15/%E6%89%B9%E9%87%8F%E6%8F%92%E5%85%A5%E4%B8%8E%E5%88%86%E9%A1%B5%E5%99%A8/" target="_blank" rel="noopener">批量插入与分页器</a></p>
<p><a href="https://rogerxs80.github.io/2020/02/19/%E4%BA%86%E8%A7%A3%E7%9F%A5%E8%AF%86/" target="_blank" rel="noopener">了解知识</a></p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>django框架</tag>
      </tags>
  </entry>
  <entry>
    <title>[前端Vue框架]</title>
    <url>/2020/04/01/%E5%89%8D%E7%AB%AFVue%E6%A1%86%E6%9E%B6/</url>
    <content><![CDATA[<h1 id="Vue框架"><a href="#Vue框架" class="headerlink" title="Vue框架"></a>Vue框架</h1><p>Vue.js是一款流行的JavaScript前端框架，旨在更好地组织与简化Web开发。Vue所关注的核心是MVC模式中的视图层，同时，它也能方便地取得资料更新，并通过组件内部特定的方法实现视图与模型的互动。</p>
<p><a href="https://rogerxs80.github.io/2020/02/22/vue%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8/" target="_blank" rel="noopener">vue快速入门使用</a></p>
<p><a href="https://rogerxs80.github.io/2020/02/23/vue%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%B1%9E%E6%80%A7%E5%8A%9F%E8%83%BD/" target="_blank" rel="noopener">vue对象的属性功能</a></p>
<p><a href="https://rogerxs80.github.io/2020/02/23/axios%E4%B8%8E%E7%BB%84%E4%BB%B6%E5%8C%96%E5%BC%80%E5%8F%91/" target="_blank" rel="noopener">axios与组件化开发</a></p>
<p><a href="https://rogerxs80.github.io/2020/02/25/Vue%E8%87%AA%E5%8A%A8%E5%8C%96%E5%B7%A5%E5%85%B7%EF%BC%88Vue-cli%EF%BC%89/" target="_blank" rel="noopener">Vue自动化工具（Vue-cli）</a></p>
<p><a href="https://rogerxs80.github.io/2020/02/26/vue%E5%AE%A2%E6%88%B7%E7%AB%AF%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/" target="_blank" rel="noopener">vue客户端项目搭建</a></p>
]]></content>
      <categories>
        <category>前端框架</category>
      </categories>
      <tags>
        <tag>vue框架</tag>
      </tags>
  </entry>
  <entry>
    <title>[MySOL数据库]</title>
    <url>/2020/03/08/MySOL%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
    <content><![CDATA[<h2 id="MySQL数据库"><a href="#MySQL数据库" class="headerlink" title="MySQL数据库"></a>MySQL数据库</h2><p>MySQL是一种开放源代码的关系型数据库管理系统（RDBMS），使用最常用的数据库管理语言–结构化查询语言（SQL）进行数据库管理。 MySQL是开放源代码的，因此任何人都可以在General Public License的许可下下载并根据个性化的需要对其进行修改。 MySQL因为其速度、可靠性和适应性而备受关注。</p>
<p><a href="https://rogerxs80.github.io/2020/03/09/%E5%88%9D%E8%AF%86%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%8Emysql%E5%AE%89%E8%A3%85/" target="_blank" rel="noopener">mysql安装</a></p>
<p><a href="https://rogerxs80.github.io/2020/03/09/%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/" target="_blank" rel="noopener">存储引擎与数据类型</a></p>
<p><a href="https://rogerxs80.github.io/2020/03/10/%E7%BA%A6%E6%9D%9F%E6%9D%A1%E4%BB%B6%E4%B8%8E%E8%A1%A8%E5%85%B3%E7%B3%BB/" target="_blank" rel="noopener">约束条件与表关系</a></p>
<p><a href="https://rogerxs80.github.io/2020/03/11/%E8%81%9A%E5%90%88%E5%87%BD%E6%95%B0/" target="_blank" rel="noopener">聚合函数</a></p>
<p><a href="https://rogerxs80.github.io/2020/03/12/navicat%E5%AE%89%E8%A3%85%E4%B8%8Epymysql%E6%A8%A1%E5%9D%97/" target="_blank" rel="noopener">navicat安装与pymysql模块</a></p>
<p><a href="https://rogerxs80.github.io/2020/03/13/%E4%BA%8B%E5%8A%A1%E4%B8%8E%E5%85%B6%E4%BB%96%E4%BB%8B%E7%BB%8D/" target="_blank" rel="noopener">事务与开发模型</a></p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>[前端开发]</title>
    <url>/2019/07/12/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<h1 id="前端开发"><a href="#前端开发" class="headerlink" title="前端开发"></a>前端开发</h1><p>前端开发是创建Web页面或app等前端界面呈现给用户的过程，通过HTML，CSS及JavaScript以及衍生出来的各种技术、框架、解决方案，来实现互联网产品的用户界面交互 。它从网页制作演变而来，名称上有很明显的时代特征。在互联网的演化进程中，网页制作是Web1.0时代的产物，早期网站主要内容都是静态，以图片和文字为主，用户使用网站的行为也以浏览为主。随着互联网技术的发展和HTML5、CSS3的应用，现代网页更加美观，交互效果显著，功能更加强大。</p>
<p><a href="https://rogerxs80.github.io/2019/07/12/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8%E4%B8%8E%E6%A0%87%E7%AD%BE%E4%BD%BF%E7%94%A8/" target="_blank" rel="noopener">前端入门与标签使用</a></p>
<p><a href="https://rogerxs80.github.io/2019/07/12/CSS%E9%80%89%E6%8B%A9%E5%99%A8%E4%B8%8E%E5%B1%9E%E6%80%A7/" target="_blank" rel="noopener">CSS选择器与属性</a></p>
<p><a href="https://rogerxs80.github.io/2019/07/12/JavaScript%E5%85%A5%E9%97%A8/" target="_blank" rel="noopener">JavaScript入门</a></p>
<p><a href="https://rogerxs80.github.io/2019/07/12/JQuery%E5%85%A5%E9%97%A8/" target="_blank" rel="noopener">JQury入门</a></p>
<p><a href="https://www.notion.so/day58_BootStrap-7f9e180acabc40848c19a905a2b1f7d4" target="_blank" rel="noopener">BootStrap框架</a></p>
]]></content>
      <categories>
        <category>前端开发</category>
      </categories>
      <tags>
        <tag>前端入门</tag>
      </tags>
  </entry>
  <entry>
    <title>[用Hexo+Github搭建个人博客]</title>
    <url>/2020/07/08/%E7%94%A8Hexo-Github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h1 id="hexo框架搭建个人博客"><a href="#hexo框架搭建个人博客" class="headerlink" title="hexo框架搭建个人博客"></a>hexo框架搭建个人博客</h1><h2 id="1-github配置"><a href="#1-github配置" class="headerlink" title="1. github配置"></a>1. github配置</h2><h3 id="下载安装git"><a href="#下载安装git" class="headerlink" title="下载安装git"></a>下载安装git</h3><h3 id="https-git-scm-com"><a href="#https-git-scm-com" class="headerlink" title="https://git-scm.com/"></a><a href="https://git-scm.com/" target="_blank" rel="noopener">https://git-scm.com/</a></h3><h3 id="桌面右击打开Git-Bash-Here"><a href="#桌面右击打开Git-Bash-Here" class="headerlink" title="桌面右击打开Git Bash Here"></a>桌面右击打开Git Bash Here</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git config --global user.name <span class="string">"用户名"</span></span><br><span class="line"></span><br><span class="line">$ git config --global user.email <span class="string">"邮箱"</span></span><br></pre></td></tr></table></figure>

<h3 id="登录github"><a href="#登录github" class="headerlink" title="登录github"></a>登录github</h3><p><img src="/images/github.png" alt="github.png"></p>
<h3 id="创建新仓库"><a href="#创建新仓库" class="headerlink" title="创建新仓库"></a>创建新仓库</h3><p><img src="/images/hexo%20b6a26e944b45432b84f717029640e041.png" alt="hexo%20b6a26e944b45432b84f717029640e041.png"></p>
<h3 id="仓库名是固定的，用户名-github-io，这边已经创建过，所以飘红"><a href="#仓库名是固定的，用户名-github-io，这边已经创建过，所以飘红" class="headerlink" title="仓库名是固定的，用户名+github.io，这边已经创建过，所以飘红"></a>仓库名是固定的，用户名+github.io，这边已经创建过，所以飘红</h3><p><img src="/images/2.png" alt="2.png"></p>
<h3 id="生成key，在到ssh-key位置"><a href="#生成key，在到ssh-key位置" class="headerlink" title="生成key，在到ssh-key位置"></a>生成key，在到ssh-key位置</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ssh-keygen -t -rsa -C <span class="string">"fastsword66@gmail.com"</span></span><br></pre></td></tr></table></figure>

<p><img src="/images/ssh-keygen.png" alt="ssh-keygen.png"></p>
<h3 id="找到ssh-keygen目录，复制id-rsa-pub中的内容"><a href="#找到ssh-keygen目录，复制id-rsa-pub中的内容" class="headerlink" title="找到ssh-keygen目录，复制id_rsa.pub中的内容"></a>找到ssh-keygen目录，复制id_rsa.pub中的内容</h3><p><img src="/images/ssh-keygen%201.png" alt="ssh-keygen%201.png"></p>
<h3 id="到github的settings中设置ssh-keys，把复制的内容copy进去"><a href="#到github的settings中设置ssh-keys，把复制的内容copy进去" class="headerlink" title="到github的settings中设置ssh-keys，把复制的内容copy进去"></a>到github的settings中设置ssh-keys，把复制的内容copy进去</h3><p><img src="/images/ssh.png" alt="ssh.png"></p>
<p><img src="/images/copy-key.png" alt="copy-key.png"></p>
<h3 id="确认key是否能够使用"><a href="#确认key是否能够使用" class="headerlink" title="确认key是否能够使用"></a>确认key是否能够使用</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ssh -T git@github.com</span><br></pre></td></tr></table></figure>

<h2 id="2-hexo框架"><a href="#2-hexo框架" class="headerlink" title="2. hexo框架"></a>2. hexo框架</h2><h3 id="查看npm版本号"><a href="#查看npm版本号" class="headerlink" title="查看npm版本号"></a>查看npm版本号</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm -v</span><br></pre></td></tr></table></figure>

<h3 id="如果有就通过npm安装hexo"><a href="#如果有就通过npm安装hexo" class="headerlink" title="如果有就通过npm安装hexo"></a>如果有就通过npm安装hexo</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g hexo</span><br></pre></td></tr></table></figure>

<p><img src="/images/hexo.png" alt="hexo.png"></p>
<h3 id="选个位置创建个新文件夹myblog，在文件夹中右键打开Git-Bash-Here，初始化hexo"><a href="#选个位置创建个新文件夹myblog，在文件夹中右键打开Git-Bash-Here，初始化hexo" class="headerlink" title="选个位置创建个新文件夹myblog，在文件夹中右键打开Git Bash Here，初始化hexo"></a>选个位置创建个新文件夹myblog，在文件夹中右键打开Git Bash Here，初始化hexo</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo init</span><br></pre></td></tr></table></figure>

<h3 id="安装hexo-deploy-git，方便以后用hexo-deoloy去部署网站"><a href="#安装hexo-deploy-git，方便以后用hexo-deoloy去部署网站" class="headerlink" title="安装hexo-deploy-git，方便以后用hexo-deoloy去部署网站"></a>安装hexo-deploy-git，方便以后用hexo-deoloy去部署网站</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<h3 id="本地测试是否能预览博客，复制地址"><a href="#本地测试是否能预览博客，复制地址" class="headerlink" title="本地测试是否能预览博客，复制地址"></a>本地测试是否能预览博客，复制地址</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p><img src="/images/hexo%20b6a26e944b45432b84f717029640e041%201.png" alt="hexo%20b6a26e944b45432b84f717029640e041%201.png"></p>
<h3 id="打开-config设置deployment"><a href="#打开-config设置deployment" class="headerlink" title="打开_config设置deployment"></a>打开_config设置deployment</h3><p><img src="/images/deployment.png" alt="deployment.png"></p>
<h3 id="repository从你的仓库中copy"><a href="#repository从你的仓库中copy" class="headerlink" title="repository从你的仓库中copy"></a>repository从你的仓库中copy</h3><p><img src="/images/1593523025(1).png" alt="1593523025(1).png"></p>
<h3 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ctrl+c 退出server</span><br><span class="line"></span><br><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<h2 id="3-更换主题"><a href="#3-更换主题" class="headerlink" title="3. 更换主题"></a>3. 更换主题</h2><h3 id="到hexo官网：-https-hexo-io-zh-cn"><a href="#到hexo官网：-https-hexo-io-zh-cn" class="headerlink" title="到hexo官网： https://hexo.io/zh-cn/"></a>到hexo官网： <a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">https://hexo.io/zh-cn/</a></h3><p><img src="/images/hexo%20b6a26e944b45432b84f717029640e041%202.png" alt="hexo%20b6a26e944b45432b84f717029640e041%202.png"></p>
<p><img src="/images/2%201.png" alt="2%201.png"></p>
<h3 id="下载主题"><a href="#下载主题" class="headerlink" title="下载主题"></a>下载主题</h3><p><img src="/images/hexo%20b6a26e944b45432b84f717029640e041%203.png" alt="hexo%20b6a26e944b45432b84f717029640e041%203.png"></p>
<h3 id="解压后放到myblog中的themes"><a href="#解压后放到myblog中的themes" class="headerlink" title="解压后放到myblog中的themes"></a>解压后放到myblog中的themes</h3><p><img src="/images/1593525431(1).png" alt="1593525431(1).png"></p>
<h3 id="打开-config设置主题，名称是主题文件夹名字，可以更改"><a href="#打开-config设置主题，名称是主题文件夹名字，可以更改" class="headerlink" title="打开_config设置主题，名称是主题文件夹名字，可以更改"></a>打开_config设置主题，名称是主题文件夹名字，可以更改</h3><p><img src="/images/hexo%20b6a26e944b45432b84f717029640e041%204.png" alt="hexo%20b6a26e944b45432b84f717029640e041%204.png"></p>
<h3 id="生成静态文件-1"><a href="#生成静态文件-1" class="headerlink" title="生成静态文件"></a>生成静态文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<h3 id="部署发布"><a href="#部署发布" class="headerlink" title="部署发布"></a>部署发布</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<h3 id="完成，是不是非常简单"><a href="#完成，是不是非常简单" class="headerlink" title="完成，是不是非常简单"></a>完成，是不是非常简单</h3><p><img src="/images/hexo%20b6a26e944b45432b84f717029640e041%205.png" alt="hexo%20b6a26e944b45432b84f717029640e041%205.png"></p>
<h2 id="Ending…"><a href="#Ending…" class="headerlink" title="Ending…"></a>Ending…</h2>]]></content>
      <categories>
        <category>技能get</category>
      </categories>
      <tags>
        <tag>博客搭建</tag>
      </tags>
  </entry>
  <entry>
    <title>[用PicGo+Gitee（码云）搭建Markdown图床]</title>
    <url>/2020/07/08/%E7%94%A8PicGo-Gitee%EF%BC%88%E7%A0%81%E4%BA%91%EF%BC%89%E6%90%AD%E5%BB%BAMarkdown%E5%9B%BE%E5%BA%8A/</url>
    <content><![CDATA[<h1 id="用PicGo-Gitee（码云）搭建Markdown图床"><a href="#用PicGo-Gitee（码云）搭建Markdown图床" class="headerlink" title="用PicGo+Gitee（码云）搭建Markdown图床"></a>用PicGo+Gitee（码云）搭建Markdown图床</h1><h2 id="一：引言"><a href="#一：引言" class="headerlink" title="一：引言"></a>一：引言</h2><p>图床一般是指储存图片的服务器，有国内和国外之分。国外的图床由于有空间距离等因素决定访问速度很慢影响图片显示速度。国内也分为单线空间、多线空间和cdn加速三种。</p>
<p>简单来说，图床就是自动把本地图片转换成链接的一款工具，网络上有很多图床工具，就目前使用种类而言，PicGo 算得上一款比较优秀的图床工具。它是一款用 Electron-vue 开发的软件，可以支持微博，七牛云，腾讯云COS，又拍云，GitHub，阿里云OSS，<a href="http://sm.ms/" target="_blank" rel="noopener">SM.MS</a>，imgur 等8种常用图床，功能强大，简单易用，同时，它也支持Gitee（码云）。</p>
<h2 id="二：需要用到的软件"><a href="#二：需要用到的软件" class="headerlink" title="二：需要用到的软件"></a>二：需要用到的软件</h2><h3 id="1-Typora（Markdown文本编辑软件）"><a href="#1-Typora（Markdown文本编辑软件）" class="headerlink" title="1.Typora（Markdown文本编辑软件）"></a><strong>1.Typora（Markdown文本编辑软件）</strong></h3><h3 id="Typora-是一款支持实时预览的-Markdown-文本编辑器，并且完全免费。"><a href="#Typora-是一款支持实时预览的-Markdown-文本编辑器，并且完全免费。" class="headerlink" title="Typora 是一款支持实时预览的 Markdown 文本编辑器，并且完全免费。"></a><strong>Typora 是一款支持实时预览的 Markdown 文本编辑器，并且完全免费。</strong></h3><h3 id="下载地址：https-www-typora-io"><a href="#下载地址：https-www-typora-io" class="headerlink" title="下载地址：https://www.typora.io/"></a><strong>下载地址：<a href="https://www.typora.io/" target="_blank" rel="noopener">https://www.typora.io/</a></strong></h3><h3 id="使用教程：https-www-cnblogs-com-xuexianqi-p-13260516-html"><a href="#使用教程：https-www-cnblogs-com-xuexianqi-p-13260516-html" class="headerlink" title="使用教程：https://www.cnblogs.com/xuexianqi/p/13260516.html"></a><strong>使用教程：<a href="https://www.cnblogs.com/xuexianqi/p/13260516.html" target="_blank" rel="noopener">https://www.cnblogs.com/xuexianqi/p/13260516.html</a></strong></h3><h3 id="进入下载地址后，根据系统来选择安装包，下载完成后，直接无脑下一步即可，路径默认"><a href="#进入下载地址后，根据系统来选择安装包，下载完成后，直接无脑下一步即可，路径默认" class="headerlink" title="进入下载地址后，根据系统来选择安装包，下载完成后，直接无脑下一步即可，路径默认"></a><strong>进入下载地址后，根据系统来选择安装包，下载完成后，直接无脑下一步即可，路径默认</strong></h3><p><img src="/images/o_20070611481801.png" alt="o_20070611481801.png"></p>
<h3 id="2-PicGo（图床软件）"><a href="#2-PicGo（图床软件）" class="headerlink" title="2.PicGo（图床软件）"></a><strong>2.PicGo（图床软件）</strong></h3><h3 id="一个图床，一个用于快速上传图片并获取图片URL链接的工具，也完全免费。"><a href="#一个图床，一个用于快速上传图片并获取图片URL链接的工具，也完全免费。" class="headerlink" title="一个图床，一个用于快速上传图片并获取图片URL链接的工具，也完全免费。"></a><strong>一个图床，一个用于快速上传图片并获取图片URL链接的工具，也完全免费。</strong></h3><h3 id="官方指南：https-picgo-github-io-PicGo-Doc-zh-guide"><a href="#官方指南：https-picgo-github-io-PicGo-Doc-zh-guide" class="headerlink" title="官方指南：https://picgo.github.io/PicGo-Doc/zh/guide/"></a><strong>官方指南：<a href="https://picgo.github.io/PicGo-Doc/zh/guide/" target="_blank" rel="noopener">https://picgo.github.io/PicGo-Doc/zh/guide/</a></strong></h3><h3 id="下载地址：https-github-com-Molunerfinn-PicGo-releases"><a href="#下载地址：https-github-com-Molunerfinn-PicGo-releases" class="headerlink" title="下载地址：https://github.com/Molunerfinn/PicGo/releases"></a><strong>下载地址：<a href="https://github.com/Molunerfinn/PicGo/releases" target="_blank" rel="noopener">https://github.com/Molunerfinn/PicGo/releases</a></strong></h3><h3 id="GitHub网站进不去的点这里：https-www-cnblogs-com-xuexianqi-p-13219719-html"><a href="#GitHub网站进不去的点这里：https-www-cnblogs-com-xuexianqi-p-13219719-html" class="headerlink" title="GitHub网站进不去的点这里：https://www.cnblogs.com/xuexianqi/p/13219719.html"></a><strong>GitHub网站进不去的点这里：<a href="https://www.cnblogs.com/xuexianqi/p/13219719.html" target="_blank" rel="noopener">https://www.cnblogs.com/xuexianqi/p/13219719.html</a></strong></h3><h3 id="进入下载地址后，选择最新版本，Windows系统点击-exe文件进行下载，安装直接无脑下一步，路径默认即可（MacOS系统点击-dmg文件，Linux系统点击tar-gz下载）"><a href="#进入下载地址后，选择最新版本，Windows系统点击-exe文件进行下载，安装直接无脑下一步，路径默认即可（MacOS系统点击-dmg文件，Linux系统点击tar-gz下载）" class="headerlink" title="进入下载地址后，选择最新版本，Windows系统点击.exe文件进行下载，安装直接无脑下一步，路径默认即可（MacOS系统点击.dmg文件，Linux系统点击tar.gz下载）"></a><strong>进入下载地址后，选择最新版本，Windows系统点击.exe文件进行下载，安装直接无脑下一步，路径默认即可（MacOS系统点击.dmg文件，Linux系统点击tar.gz下载）</strong></h3><p><img src="/images/o_20070611482102.png" alt="o_20070611482102.png"></p>
<h3 id="3-Gitee（码云）"><a href="#3-Gitee（码云）" class="headerlink" title="3.Gitee（码云）"></a><strong>3.Gitee（码云）</strong></h3><h3 id="码云，一款基于-Git-的代码托管和研发协作平台官方，又称为国内的github。"><a href="#码云，一款基于-Git-的代码托管和研发协作平台官方，又称为国内的github。" class="headerlink" title="码云，一款基于 Git 的代码托管和研发协作平台官方，又称为国内的github。"></a><strong>码云，一款基于 Git 的代码托管和研发协作平台官方，又称为国内的github。</strong></h3><h3 id="官方网站：https-gitee-com"><a href="#官方网站：https-gitee-com" class="headerlink" title="官方网站：https://gitee.com/"></a><strong>官方网站：<a href="https://gitee.com/" target="_blank" rel="noopener">https://gitee.com/</a></strong></h3><h3 id="注册网址：https-gitee-com-signup"><a href="#注册网址：https-gitee-com-signup" class="headerlink" title="注册网址：https://gitee.com/signup"></a><strong>注册网址：<a href="http://www.baidu.com/link?url=Q9yIAdEvisuJfrmu8LQ_LZt3jRfQICY7Q4jyCEKyPdkDfh2x1FcKkIfyg-7bkdLc" target="_blank" rel="noopener">https://gitee.com/signup</a></strong></h3><h1 id="三：搭建教程"><a href="#三：搭建教程" class="headerlink" title="三：搭建教程"></a><strong>三：搭建教程</strong></h1><h3 id="1-创建好Gitee账号后，点击右上角加号-“-”，点击：新建仓库"><a href="#1-创建好Gitee账号后，点击右上角加号-“-”，点击：新建仓库" class="headerlink" title="1.创建好Gitee账号后，点击右上角加号 “+”，点击：新建仓库"></a>1.创建好Gitee账号后，点击右上角加号 “+”，点击：新建仓库</h3><h3 id="2-仓库名称（自定义）-路径（自定义）-公开-使用Readme文件初始化这个仓库-创建"><a href="#2-仓库名称（自定义）-路径（自定义）-公开-使用Readme文件初始化这个仓库-创建" class="headerlink" title="2.仓库名称（自定义） - 路径（自定义） - 公开 - 使用Readme文件初始化这个仓库 - 创建"></a>2.仓库名称（自定义） - 路径（自定义） - 公开 - 使用Readme文件初始化这个仓库 - 创建</h3><p><img src="/images/o_20070710300302.png" alt="o_20070710300302.png"></p>
<h3 id="3-点击右上角用户头像右边的下拉框，点击：设置"><a href="#3-点击右上角用户头像右边的下拉框，点击：设置" class="headerlink" title="3.点击右上角用户头像右边的下拉框，点击：设置"></a>3.点击右上角用户头像右边的下拉框，点击：设置</h3><h3 id="4-点击左侧-：私人令牌"><a href="#4-点击左侧-：私人令牌" class="headerlink" title="4.点击左侧 ：私人令牌"></a>4.点击左侧 ：私人令牌</h3><h3 id="5-点击：生成新令牌"><a href="#5-点击：生成新令牌" class="headerlink" title="5.点击：生成新令牌"></a>5.点击：生成新令牌</h3><h3 id="6-私人令牌描述（自定义）-选择-“peojects”-提交"><a href="#6-私人令牌描述（自定义）-选择-“peojects”-提交" class="headerlink" title="6.私人令牌描述（自定义） - 选择 “peojects” - 提交"></a>6.私人令牌描述（自定义） - 选择 “peojects” - 提交</h3><p><img src="/images/o_20070710303206.png" alt="o_20070710303206.png"></p>
<h3 id="7-Note-自定义一个名称，repo-打上-√"><a href="#7-Note-自定义一个名称，repo-打上-√" class="headerlink" title="7.Note 自定义一个名称，repo 打上 √"></a>7.Note 自定义一个名称，repo 打上 √</h3><h3 id="8-输入登录码云的密码，点击：验证"><a href="#8-输入登录码云的密码，点击：验证" class="headerlink" title="8.输入登录码云的密码，点击：验证"></a>8.输入登录码云的密码，点击：验证</h3><p><img src="/images/o_20070710303507.png" alt="o_20070710303507.png"></p>
<h3 id="9-现在生成的是一串Token，只会在现在显示一次，所以要妥善保管好，点击：复制-打勾“我已经了解…”-确认并关闭"><a href="#9-现在生成的是一串Token，只会在现在显示一次，所以要妥善保管好，点击：复制-打勾“我已经了解…”-确认并关闭" class="headerlink" title="9.现在生成的是一串Token，只会在现在显示一次，所以要妥善保管好，点击：复制 - 打勾“我已经了解…” - 确认并关闭"></a>9.现在生成的是一串Token，只会在现在显示一次，所以要妥善保管好，点击：复制 - 打勾“我已经了解…” - 确认并关闭</h3><p><img src="/images/o_20070710303808.png" alt="o_20070710303808.png"></p>
<h3 id="10-打开PicGo，点击左侧-插件设置-搜索框输入：gitee-点击右边的gitee-uploader：安装"><a href="#10-打开PicGo，点击左侧-插件设置-搜索框输入：gitee-点击右边的gitee-uploader：安装" class="headerlink" title="10.打开PicGo，点击左侧 - 插件设置 - 搜索框输入：gitee - 点击右边的gitee-uploader：安装"></a>10.打开PicGo，点击左侧 - 插件设置 - 搜索框输入：gitee - 点击右边的gitee-uploader：安装</h3><p><img src="/images/o_20070710304309.png" alt="o_20070710304309.png"></p>
<h3 id="11-点击左侧：图床设置-gitee，进行如下设置"><a href="#11-点击左侧：图床设置-gitee，进行如下设置" class="headerlink" title="11.点击左侧：图床设置 - gitee，进行如下设置"></a>11.点击左侧：图床设置 - gitee，进行如下设置</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">repo：  填写用户名/仓库名</span><br><span class="line"></span><br><span class="line">branch：  填写：master</span><br><span class="line"></span><br><span class="line">token：  填写刚才生成的那一串token</span><br><span class="line"></span><br><span class="line">path：  填写：img</span><br><span class="line"></span><br><span class="line">customPath：  默认即可，不用填写</span><br><span class="line"></span><br><span class="line">customUrl：  默认即可，不用填写</span><br></pre></td></tr></table></figure>

<p><img src="/images/1594124775(1).png" alt="1594124775(1).png"></p>
<h2 id="四：图片上传至图库的方法1（推荐）"><a href="#四：图片上传至图库的方法1（推荐）" class="headerlink" title="四：图片上传至图库的方法1（推荐）"></a><strong>四：图片上传至图库的方法1（推荐）</strong></h2><h3 id="1-打开Typora，点击左上角：文件-偏好设置"><a href="#1-打开Typora，点击左上角：文件-偏好设置" class="headerlink" title="1.打开Typora，点击左上角：文件 - 偏好设置"></a><strong>1.打开Typora，点击左上角：文件 - 偏好设置</strong></h3><h3 id="2-点击：图像-插入图片时（下拉选择：上传图片）-对网络位置的图片应用上述规则（可选可不选，选中就是图片也会复制到本地）-允许根据YAML设置自动上传图片-上传服务：下拉后选择-PicGo（app）-选择PicGo路径"><a href="#2-点击：图像-插入图片时（下拉选择：上传图片）-对网络位置的图片应用上述规则（可选可不选，选中就是图片也会复制到本地）-允许根据YAML设置自动上传图片-上传服务：下拉后选择-PicGo（app）-选择PicGo路径" class="headerlink" title="2.点击：图像 - 插入图片时（下拉选择：上传图片） - 对网络位置的图片应用上述规则（可选可不选，选中就是图片也会复制到本地） - 允许根据YAML设置自动上传图片 - 上传服务：下拉后选择 PicGo（app） - 选择PicGo路径"></a>2.点击：图像 - 插入图片时（下拉选择：上传图片） - 对网络位置的图片应用上述规则（可选可不选，选中就是图片也会复制到本地） - 允许根据YAML设置自动上传图片 - 上传服务：下拉后选择 PicGo（app） - 选择PicGo路径</h3><p><img src="/images/o_20070612482223.png" alt="o_20070612482223.png"></p>
<h3 id="3-找到PicGo的安装路径，默认是C-Program-Files-PicGo点击：打开"><a href="#3-找到PicGo的安装路径，默认是C-Program-Files-PicGo点击：打开" class="headerlink" title="3.找到PicGo的安装路径，默认是C:\Program Files\PicGo点击：打开"></a>3.找到PicGo的安装路径，默认是C:\Program Files\PicGo点击：打开</h3><p><img src="/images/o_20070612104519.png" alt="o_20070612104519.png"></p>
<h3 id="4-点击：验证图片上传选项，显示绿色字-“成功上床图片并获得新的URL”，点击：OK"><a href="#4-点击：验证图片上传选项，显示绿色字-“成功上床图片并获得新的URL”，点击：OK" class="headerlink" title="4.点击：验证图片上传选项，显示绿色字 “成功上床图片并获得新的URL”，点击：OK"></a>4.点击：验证图片上传选项，显示绿色字 “成功上床图片并获得新的URL”，点击：OK</h3><p><img src="/images/20200707184938.png" alt="20200707184938.png"></p>
<h3 id="5-此时，截完图之后，直接按粘贴快捷键（Ctrl-V）即可将图片上传到图库"><a href="#5-此时，截完图之后，直接按粘贴快捷键（Ctrl-V）即可将图片上传到图库" class="headerlink" title="5.此时，截完图之后，直接按粘贴快捷键（Ctrl+V）即可将图片上传到图库"></a>5.此时，截完图之后，直接按粘贴快捷键（Ctrl+V）即可将图片上传到图库</h3><h3 id="6-也成功显示出来了"><a href="#6-也成功显示出来了" class="headerlink" title="6.也成功显示出来了"></a>6.也成功显示出来了</h3><p><img src="/images/20200707185045.png" alt="20200707185045.png"></p>
<h1 id="五：图片上传至图库的方法2"><a href="#五：图片上传至图库的方法2" class="headerlink" title="五：图片上传至图库的方法2"></a><strong>五：图片上传至图库的方法2</strong></h1><h3 id="1-设置快捷键"><a href="#1-设置快捷键" class="headerlink" title="1.设置快捷键"></a>1.设置快捷键</h3><p><img src="/images/o_20070611485712.png" alt="o_20070611485712.png"></p>
<h3 id="2-点击：编辑"><a href="#2-点击：编辑" class="headerlink" title="2.点击：编辑"></a>2.点击：编辑</h3><p><img src="/images/o_20070611490013.png" alt="o_20070611490013.png"></p>
<h3 id="3-同时按住Ctrl、Shift、V-组合键（当然，也可以自定义），点击：确定"><a href="#3-同时按住Ctrl、Shift、V-组合键（当然，也可以自定义），点击：确定" class="headerlink" title="3.同时按住Ctrl、Shift、V 组合键（当然，也可以自定义），点击：确定"></a>3.同时按住Ctrl、Shift、V 组合键（当然，也可以自定义），点击：确定</h3><p><img src="/images/o_20070611490414.png" alt="o_20070611490414.png"></p>
<h3 id="4-我们截完图之后，直接按下快捷键（Ctrl-Shift-V）就把截图上传到图库了，并且自动复制了图片的外链，然后我们直接按下快捷键（Ctr-V）就可以粘贴了"><a href="#4-我们截完图之后，直接按下快捷键（Ctrl-Shift-V）就把截图上传到图库了，并且自动复制了图片的外链，然后我们直接按下快捷键（Ctr-V）就可以粘贴了" class="headerlink" title="4.我们截完图之后，直接按下快捷键（Ctrl+Shift+V）就把截图上传到图库了，并且自动复制了图片的外链，然后我们直接按下快捷键（Ctr+V）就可以粘贴了"></a>4.我们截完图之后，直接按下快捷键（Ctrl+Shift+V）就把截图上传到图库了，并且自动复制了图片的外链，然后我们直接按下快捷键（Ctr+V）就可以粘贴了</h3><p><img src="/images/20200707185135.png" alt="20200707185135.png"></p>
<h3 id="5-单击图片即可看到图片的外链"><a href="#5-单击图片即可看到图片的外链" class="headerlink" title="5.单击图片即可看到图片的外链"></a>5.单击图片即可看到图片的外链</h3><p><img src="/images/20200707185144.png" alt="20200707185144.png"></p>
<h2 id="Ending…"><a href="#Ending…" class="headerlink" title="Ending…."></a>Ending….</h2>]]></content>
      <categories>
        <category>技能get</category>
      </categories>
      <tags>
        <tag>图床制作</tag>
      </tags>
  </entry>
  <entry>
    <title>[DRF框架中常用的组件]</title>
    <url>/2020/04/22/DRF%E6%A1%86%E6%9E%B6%E4%B8%AD%E5%B8%B8%E7%94%A8%E7%9A%84%E7%BB%84%E4%BB%B6/</url>
    <content><![CDATA[<h1 id="DRF框架中常用的组件"><a href="#DRF框架中常用的组件" class="headerlink" title="DRF框架中常用的组件"></a>DRF框架中常用的组件</h1><p>为了方便接下来的学习，我们创建一个新的子应用 opt</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python manage.py startapp opt</span><br></pre></td></tr></table></figure>

<p>提前在总路由和配置文件中注册子应用和配置总路由。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># settings.py中注册子应用：</span></span><br><span class="line">INSTALLED_APPS = [</span><br><span class="line">	<span class="comment"># ....</span></span><br><span class="line">	<span class="string">'opt'</span>,        <span class="comment"># drf的常用组件</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 总路由中加上：</span></span><br><span class="line">	path(<span class="string">"opt/"</span>,include(<span class="string">"opt.urls"</span>)),</span><br></pre></td></tr></table></figure>

<p>因为接下来的功能中需要使用到登陆功能，所以我们使用django内置admin站点并创建一个管理员.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python manage.py createsuperuser</span><br></pre></td></tr></table></figure>

<p><img src="/images/1557276390641.png" alt=""></p>
<p>创建管理员以后，访问admin站点，先修改站点的语言配置</p>
<p>settings.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">LANGUAGE_CODE = <span class="string">'zh-hans'</span></span><br><span class="line"></span><br><span class="line">TIME_ZONE = <span class="string">'Asia/Shanghai'</span></span><br></pre></td></tr></table></figure>

<p><img src="/images/1553043081445.png" alt=""></p>
<p>访问admin 站点效果：</p>
<p><img src="/images/1553043054133.png" alt=""></p>
<h1 id="1-认证Authentication"><a href="#1-认证Authentication" class="headerlink" title="1. 认证Authentication"></a>1. 认证Authentication</h1><p>可以在配置文件中配置全局默认的认证方案</p>
<p>/home/moluo/.virtualenvs/drfdemo/lib/python3.6/site-packages/rest_framework/settings.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 可以在项目的主应用的settings.py配置文件中加入以下配置覆盖全局默认的配置方案。</span></span><br><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="string">'DEFAULT_AUTHENTICATION_CLASSES'</span>: (</span><br><span class="line">        <span class="string">'rest_framework.authentication.SessionAuthentication'</span>,  <span class="comment"># session认证</span></span><br><span class="line">        <span class="string">'rest_framework.authentication.BasicAuthentication'</span>,    <span class="comment"># 基本认证</span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>也可以在每个视图中通过设置authentication_classess类属性来设置</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.authentication <span class="keyword">import</span> SessionAuthentication, BasicAuthentication</span><br><span class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> APIView</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExampleView</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    <span class="comment"># 类属性</span></span><br><span class="line">    authentication_classes = [SessionAuthentication, BasicAuthentication]</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self,request)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<p>认证失败会有两种可能的返回值，这个需要我们配合权限组件来使用：</p>
<ul>
<li>401 Unauthorized 未认证</li>
<li>403 Permission Denied 权限被禁止</li>
</ul>
<h1 id="2-权限Permissions"><a href="#2-权限Permissions" class="headerlink" title="2. 权限Permissions"></a>2. 权限Permissions</h1><p>权限控制可以限制用户对于视图的访问和对于具体数据对象的访问。</p>
<ul>
<li>在执行视图的as_view()方法的dispatch()方法前，会先进行视图访问权限的判断</li>
<li>在通过get_object()获取具体模型对象时，会进行模型对象访问权限的判断</li>
</ul>
<h3 id="提供的权限"><a href="#提供的权限" class="headerlink" title="提供的权限"></a>提供的权限</h3><ul>
<li>AllowAny 允许所有用户</li>
<li>IsAuthenticated 仅通过登录认证的用户</li>
<li>IsAdminUser 仅管理员用户</li>
<li>IsAuthenticatedOrReadOnly 已经登陆认证的用户可以对数据进行增删改操作，没有登陆认证的只能查看数据。</li>
</ul>
<h3 id="配置使用"><a href="#配置使用" class="headerlink" title="配置使用"></a>配置使用</h3><p>chorme浏览器进入无痕模式的快捷键，Ctrl+Shift+N</p>
<p>可以在配置文件settings.py中全局设置默认的权限管理类，如</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># drf的配置信息，需要卸载django的配置文件，而且必须写在REST_FRAMEWORK的字典中，才能被drf识别</span></span><br><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    ....</span><br><span class="line">    <span class="comment">#  权限[全局配置，所有的视图都会被影响到]</span></span><br><span class="line">    <span class="string">'DEFAULT_PERMISSION_CLASSES'</span>: (</span><br><span class="line">        <span class="string">'rest_framework.permissions.IsAuthenticated'</span>, <span class="comment"># 已经登录认证的用户才能访问</span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果未指明，则采用如下默认配置</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">'DEFAULT_PERMISSION_CLASSES'</span>: (</span><br><span class="line">   <span class="string">'rest_framework.permissions.AllowAny'</span>,</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>也可以在具体的视图中通过permission_classes属性来设置，如</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.permissions <span class="keyword">import</span> IsAuthenticated</span><br><span class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> APIView</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExampleView</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    permission_classes = (IsAuthenticated,)</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure>

<h3 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.authentication <span class="keyword">import</span> SessionAuthentication</span><br><span class="line"><span class="keyword">from</span> rest_framework.permissions <span class="keyword">import</span> IsAuthenticated</span><br><span class="line"><span class="keyword">from</span> rest_framework.generics <span class="keyword">import</span> RetrieveAPIView</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentAPIView</span><span class="params">(RetrieveAPIView)</span>:</span></span><br><span class="line">    queryset = Student.objects.all()</span><br><span class="line">    serializer_class = StudentSerializer</span><br><span class="line">    authentication_classes = [SessionAuthentication]</span><br><span class="line">    permission_classes = [IsAuthenticated]</span><br></pre></td></tr></table></figure>

<h3 id="自定义权限"><a href="#自定义权限" class="headerlink" title="自定义权限"></a>自定义权限</h3><p>如需自定义权限，需继承rest_framework.permissions.BasePermission父类，并实现以下两个任何一个方法或全部</p>
<ul>
<li><p><code>.has_permission(self, request, view)</code></p>
<p>是否可以访问视图， view表示当前视图对象</p>
</li>
<li><p><code>.has_object_permission(self, request, view, obj)</code></p>
<p>是否可以访问数据对象， view表示当前视图， obj为模型数据对象</p>
</li>
</ul>
<p>例如：</p>
<p>在当前子应用下，创建一个权限文件permissions.py中声明自定义权限类:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.permissions <span class="keyword">import</span> BasePermission</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IsXiaoMingPermission</span><span class="params">(BasePermission)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">has_permission</span><span class="params">(self, request, view)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> request.user <span class="keyword">and</span> request.user.username == <span class="string">"xiaoming"</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> .permissions <span class="keyword">import</span> IsXiaoMingPermission</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentViewSet</span><span class="params">(ModelViewSet)</span>:</span></span><br><span class="line">    queryset = Student.objects.all()</span><br><span class="line">    serializer_class = StudentSerializer</span><br><span class="line">    permission_classes = [IsXiaoMingPermission]</span><br></pre></td></tr></table></figure>

<h1 id="3-限流Throttling"><a href="#3-限流Throttling" class="headerlink" title="3. 限流Throttling"></a>3. 限流Throttling</h1><p>可以对接口访问的频次进行限制，以减轻服务器压力，或者实现特定的业务。</p>
<p>一般用于付费购买次数,投票等场景使用.</p>
<h3 id="可选限流类"><a href="#可选限流类" class="headerlink" title="可选限流类"></a>可选限流类</h3><p>1） AnonRateThrottle</p>
<p>限制所有匿名未认证用户，使用IP区分用户。</p>
<p>使用<code>DEFAULT_THROTTLE_RATES[&#39;anon&#39;]</code> 来设置频次</p>
<p>2）UserRateThrottle</p>
<p>限制认证用户，使用User id 来区分。</p>
<p>使用<code>DEFAULT_THROTTLE_RATES[&#39;user&#39;]</code> 来设置频次</p>
<p>3）ScopedRateThrottle</p>
<p>限制用户对于每个视图的访问频次，使用ip或user id。</p>
<p>例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ContactListView</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    throttle_scope = <span class="string">'contacts'</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ContactDetailView</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    throttle_scope = <span class="string">'contacts'</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UploadView</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    throttle_scope = <span class="string">'uploads'</span></span><br><span class="line">    ...</span><br><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="string">'DEFAULT_THROTTLE_CLASSES'</span>: (</span><br><span class="line">        <span class="string">'rest_framework.throttling.ScopedRateThrottle'</span>,</span><br><span class="line">    ),</span><br><span class="line">    <span class="string">'DEFAULT_THROTTLE_RATES'</span>: &#123;</span><br><span class="line">        <span class="string">'contacts'</span>: <span class="string">'1000/day'</span>,</span><br><span class="line">        <span class="string">'uploads'</span>: <span class="string">'20/day'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>可以在配置文件中，使用<code>DEFAULT_THROTTLE_CLASSES</code> 和 <code>DEFAULT_THROTTLE_RATES</code>进行全局配置，</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="string">'DEFAULT_THROTTLE_CLASSES'</span>: ( <span class="comment"># 启用的限制类</span></span><br><span class="line">        <span class="string">'rest_framework.throttling.AnonRateThrottle'</span>,</span><br><span class="line">        <span class="string">'rest_framework.throttling.UserRateThrottle'</span></span><br><span class="line">    ),</span><br><span class="line">    <span class="string">'DEFAULT_THROTTLE_RATES'</span>: &#123;   <span class="comment"># 限制频率</span></span><br><span class="line">        <span class="string">'anon'</span>: <span class="string">'100/day'</span>,</span><br><span class="line">        <span class="string">'user'</span>: <span class="string">'1000/day'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>DEFAULT_THROTTLE_RATES</code> 可以使用 <code>second</code>, <code>minute</code>, <code>hour</code> 或<code>day</code>来指明周期。</p>
<p>也可以在具体视图中通过throttle_classess属性来配置，如</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.throttling <span class="keyword">import</span> UserRateThrottle</span><br><span class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> APIView</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExampleView</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    throttle_classes = (UserRateThrottle,)</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure>

<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>全局配置中设置访问频率，settings.py代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="comment"># 权限[全局配置，会被局部配置覆盖]</span></span><br><span class="line">    <span class="comment"># 'DEFAULT_PERMISSION_CLASSES': (</span></span><br><span class="line">    <span class="comment">#     'rest_framework.permissions.IsAuthenticated',</span></span><br><span class="line">    <span class="comment"># ),</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 限流</span></span><br><span class="line">    <span class="comment"># 'DEFAULT_THROTTLE_CLASSES': (  # 全局启用的限制类</span></span><br><span class="line">    <span class="comment">#     'rest_framework.throttling.AnonRateThrottle', # 匿名用户,游客</span></span><br><span class="line">    <span class="comment">#     'rest_framework.throttling.UserRateThrottle'  # 登录用户</span></span><br><span class="line">    <span class="comment"># ),</span></span><br><span class="line">    <span class="string">'DEFAULT_THROTTLE_RATES'</span>: &#123;  <span class="comment"># 限制频率</span></span><br><span class="line">        <span class="string">'anon'</span>: <span class="string">'3/minute'</span>,</span><br><span class="line">        <span class="string">'user'</span>: <span class="string">'10/minute'</span>,</span><br><span class="line">        <span class="string">'access'</span>: <span class="string">'5/minute'</span>, <span class="comment"># 这个是自定义限流的频率配置</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>视图代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> students.models <span class="keyword">import</span> Student</span><br><span class="line"><span class="keyword">from</span> students.serializers <span class="keyword">import</span> StudentModelSerializer</span><br><span class="line"><span class="keyword">from</span> rest_framework.viewsets <span class="keyword">import</span> ModelViewSet</span><br><span class="line"><span class="keyword">from</span> rest_framework.permissions <span class="keyword">import</span> AllowAny,IsAuthenticated,IsAuthenticatedOrReadOnly,IsAdminUser</span><br><span class="line"><span class="keyword">from</span> .permission <span class="keyword">import</span> ISMingGe</span><br><span class="line"><span class="keyword">from</span> rest_framework.throttling <span class="keyword">import</span> UserRateThrottle,AnonRateThrottle,ScopedRateThrottle</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Students8APIView</span><span class="params">(ModelViewSet)</span>:</span></span><br><span class="line">    serializer_class = StudentModelSerializer</span><br><span class="line">    queryset = Student.objects.all()</span><br><span class="line">    <span class="comment"># 权限配置</span></span><br><span class="line">    permission_classes = [AllowAny]</span><br><span class="line">    <span class="comment"># 限流配置</span></span><br><span class="line">    <span class="comment"># throttle_classes = [AnonRateThrottle,UserRateThrottle]</span></span><br><span class="line">    <span class="comment"># 自定义限流配置</span></span><br><span class="line">    throttle_classes = [ScopedRateThrottle]</span><br><span class="line">    throttle_scope = <span class="string">'access'</span></span><br></pre></td></tr></table></figure>

<h1 id="4-过滤Filtering"><a href="#4-过滤Filtering" class="headerlink" title="4. 过滤Filtering"></a>4. 过滤Filtering</h1><p>对于列表数据可能需要根据字段进行过滤，我们可以通过添加django-fitlter扩展来增强支持。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip install django-filter</span><br></pre></td></tr></table></figure>

<p>在配置文件settings.py中增加过滤组件的设置：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    ...</span><br><span class="line">    <span class="string">'django_filters'</span>,  <span class="comment"># 需要注册应用，</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment"># 全局配置，也可以使用局部配置</span></span><br><span class="line">    <span class="string">'DEFAULT_FILTER_BACKENDS'</span>: (<span class="string">'django_filters.rest_framework.DjangoFilterBackend'</span>,)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在视图类中添加类属性filter_fields，指定可以过滤的字段</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentListView</span><span class="params">(ListAPIView)</span>:</span></span><br><span class="line">    queryset = Student.objects.all()</span><br><span class="line">    serializer_class = StudentSerializer</span><br><span class="line">    filter_fields = (<span class="string">'age'</span>, <span class="string">'sex'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 127.0.0.1:8000/opt/students/?sex=true  #单个过滤条件</span></span><br><span class="line"><span class="comment"># http://127.0.0.1:8000/opt/students/?sex=false&amp;age=27 # 多个并列的过滤条件</span></span><br></pre></td></tr></table></figure>

<h1 id="5-排序"><a href="#5-排序" class="headerlink" title="5. 排序"></a>5. 排序</h1><p>对于列表数据，REST framework提供了<strong>OrderingFilter</strong>过滤器来帮助我们快速指明数据按照指定字段进行排序。</p>
<p>使用方法：</p>
<p>在类视图中设置filter_backends，使用<code>rest_framework.filters.OrderingFilter</code>过滤器，REST framework会在请求的查询字符串参数中检查是否包含了ordering参数，如果包含了ordering参数，则按照ordering参数指明的排序字段对数据集进行排序。</p>
<p>前端可以传递的ordering参数的可选字段值需要在ordering_fields中指明。</p>
<p>示例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentListView</span><span class="params">(ListAPIView)</span>:</span></span><br><span class="line">    queryset = Student.objects.all()</span><br><span class="line">    serializer_class = StudentModelSerializer</span><br><span class="line">    filter_backends = [OrderingFilter]</span><br><span class="line">    ordering_fields = (<span class="string">'id'</span>, <span class="string">'age'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 127.0.0.1:8000/books/?ordering=-age</span></span><br><span class="line"><span class="comment"># -id 表示针对id字段进行倒序排序</span></span><br><span class="line"><span class="comment"># id  表示针对id字段进行升序排序</span></span><br></pre></td></tr></table></figure>

<p>如果需要在过滤以后再次进行排序，则需要两者同步。要么一起写在全局配置中，要么一起写在视图类中。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.generics <span class="keyword">import</span> ListAPIView</span><br><span class="line"><span class="keyword">from</span> students.models <span class="keyword">import</span> Student</span><br><span class="line"><span class="keyword">from</span> .serializers <span class="keyword">import</span> StudentModelSerializer</span><br><span class="line"><span class="keyword">from</span> django_filters.rest_framework <span class="keyword">import</span> DjangoFilterBackend</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student3ListView</span><span class="params">(ListAPIView)</span>:</span></span><br><span class="line">    queryset = Student.objects.all()</span><br><span class="line">    serializer_class = StudentModelSerializer</span><br><span class="line">    filter_fields = (<span class="string">'age'</span>, <span class="string">'sex'</span>)</span><br><span class="line">    <span class="comment"># 因为排序配置和过滤配置使用同一个类属性，所以当视图中需要使用排序和过滤时，</span></span><br><span class="line">    <span class="comment"># 要么大家一起在视图类中局部配置，要么大家一起在全局中配置，否则会出现过滤组件使用无效的情况</span></span><br><span class="line">    <span class="comment"># filter_backends = [DjangoFilterBackend,OrderingFilter]</span></span><br><span class="line">    ordering_fields = (<span class="string">'id'</span>, <span class="string">'age'</span>)</span><br></pre></td></tr></table></figure>

<p>配置文件：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 过滤组件[全局引入]</span></span><br><span class="line">    <span class="comment"># 'DEFAULT_FILTER_BACKENDS': ('django_filters.rest_framework.DjangoFilterBackend','rest_framework.filters.OrderingFilter')</span></span><br></pre></td></tr></table></figure>

<h1 id="6-分页Pagination"><a href="#6-分页Pagination" class="headerlink" title="6. 分页Pagination"></a>6. 分页Pagination</h1><p>REST framework提供了分页的支持。</p>
<p>我们可以在配置文件中设置全局的分页方式，如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="string">'DEFAULT_PAGINATION_CLASS'</span>:  <span class="string">'rest_framework.pagination.PageNumberPagination'</span>,</span><br><span class="line">    <span class="string">'PAGE_SIZE'</span>: <span class="number">100</span>  <span class="comment"># 每页数目</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">如果在配置settings.py文件中， 设置了全局分页，那么在drf中凡是调用了ListModelMixin的list()，</span><br><span class="line">都会自动分页。如果项目中出现大量需要分页的数据，只有少数部分的分页，则可以在少部分的视图类中关闭分页功能。</span><br><span class="line"><span class="class"><span class="keyword">class</span> 视图类<span class="params">(ListAPIView)</span>:</span></span><br><span class="line">	pagination_class = <span class="literal">None</span></span><br></pre></td></tr></table></figure>

<p>也可通过自定义Pagination类，来为视图添加不同分页行为。在视图中通过<code>pagination_clas</code>属性来指明。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LargeResultsSetPagination</span><span class="params">(PageNumberPagination)</span>:</span></span><br><span class="line">    page_size = <span class="number">1000</span></span><br><span class="line">    page_size_query_param = <span class="string">'page_size'</span></span><br><span class="line">    max_page_size = <span class="number">10000</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookDetailView</span><span class="params">(RetrieveAPIView)</span>:</span></span><br><span class="line">    queryset = BookInfo.objects.all()</span><br><span class="line">    serializer_class = BookInfoSerializer</span><br><span class="line">    pagination_class = LargeResultsSetPagination</span><br></pre></td></tr></table></figure>

<h2 id="可选分页器"><a href="#可选分页器" class="headerlink" title="可选分页器"></a>可选分页器</h2><p>1） <strong>PageNumberPagination</strong></p>
<p>前端访问网址形式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET  http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;students&#x2F;?page&#x3D;4</span><br></pre></td></tr></table></figure>

<p>可以在子类中定义的属性：</p>
<ul>
<li>page_size 每页数目</li>
<li>page_query_param 前端发送的页数关键字名，默认为“page”</li>
<li>page_size_query_param 前端发送的每页数目关键字名，默认为None</li>
<li>max_page_size 前端最多能设置的每页数量</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 声明分页的配置类</span></span><br><span class="line"><span class="keyword">from</span> rest_framework.pagination <span class="keyword">import</span> PageNumberPagination</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StandardPageNumberPagination</span><span class="params">(PageNumberPagination)</span>:</span></span><br><span class="line">    <span class="comment"># 默认每一页显示的数据量</span></span><br><span class="line">    page_size = <span class="number">2</span></span><br><span class="line">    <span class="comment"># 允许客户端通过get参数来控制每一页的数据量</span></span><br><span class="line">    page_size_query_param = <span class="string">"size"</span></span><br><span class="line">    max_page_size = <span class="number">10</span></span><br><span class="line">    <span class="comment"># 自定义页码的参数名</span></span><br><span class="line">    page_query_param = <span class="string">"p"</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentAPIView</span><span class="params">(ListAPIView)</span>:</span></span><br><span class="line">    queryset = Student.objects.all()</span><br><span class="line">    serializer_class = StudentModelSerializer</span><br><span class="line">    pagination_class = StandardPageNumberPagination</span><br><span class="line"></span><br><span class="line"><span class="comment"># 127.0.0.1/four/students/?p=1&amp;size=5</span></span><br></pre></td></tr></table></figure>

<p>2）<strong>LimitOffsetPagination</strong></p>
<p>前端访问网址形式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET http:&#x2F;&#x2F;127.0.0.1&#x2F;four&#x2F;students&#x2F;?limit&#x3D;100&amp;offset&#x3D;100</span><br></pre></td></tr></table></figure>

<p>可以在子类中定义的属性：</p>
<ul>
<li>default_limit 默认限制，默认值与<code>PAGE_SIZE</code>设置一直</li>
<li>limit_query_param limit参数名，默认’limit’</li>
<li>offset_query_param offset参数名，默认’offset’</li>
<li>max_limit 最大limit限制，默认None</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.pagination <span class="keyword">import</span> LimitOffsetPagination</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StandardLimitOffsetPagination</span><span class="params">(LimitOffsetPagination)</span>:</span></span><br><span class="line">    <span class="comment"># 默认每一页查询的数据量,类似上面的page_size</span></span><br><span class="line">    default_limit = <span class="number">2</span></span><br><span class="line">    limit_query_param = <span class="string">"size"</span></span><br><span class="line">    offset_query_param = <span class="string">"start"</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentAPIView</span><span class="params">(ListAPIView)</span>:</span></span><br><span class="line">    queryset = Student.objects.all()</span><br><span class="line">    serializer_class = StudentModelSerializer</span><br><span class="line">    <span class="comment"># 调用页码分页类</span></span><br><span class="line">    <span class="comment"># pagination_class = StandardPageNumberPagination</span></span><br><span class="line">    <span class="comment"># 调用查询偏移分页类</span></span><br><span class="line">    pagination_class = StandardLimitOffsetPagination</span><br></pre></td></tr></table></figure>

<h1 id="7-异常处理-Exceptions"><a href="#7-异常处理-Exceptions" class="headerlink" title="7. 异常处理 Exceptions"></a>7. 异常处理 Exceptions</h1><p>REST framework提供了自定义异常处理，我们可以自定义的方式来编写异常处理函数。例如我们想在要创建一个自定义异常函数，</p>
<p>这个函数，我们保存到当前主应用中[注意在实际工作中，我们可以设置一个单独的独立的公共目录来保存这种公共的函数/工具/类库]。</p>
<p>drfdemo/exceptions.py，代码；</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> exception_handler <span class="keyword">as</span> drf_exception_handler</span><br><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> DatabaseError</span><br><span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> status</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">custom_exception_handler</span><span class="params">(exc, context)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    自定义异常处理函数</span></span><br><span class="line"><span class="string">    :param exc: 异常对象，本次发生的异常对象</span></span><br><span class="line"><span class="string">    :param context: 字典，异常出现时的执行上下文环境</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="comment"># 先让drf进行异常判断</span></span><br><span class="line">    response = drf_exception_handler(exc, context)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 判断response对象是否为None</span></span><br><span class="line">    <span class="keyword">if</span> response <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="string">"""出现drf不能处理的异常"""</span></span><br><span class="line">        <span class="keyword">if</span> isinstance(exc, DatabaseError):</span><br><span class="line">            view = context.get(<span class="string">"view"</span>)</span><br><span class="line">            print(<span class="string">'数据库报错，[%s]: %s'</span> % (view, exc))</span><br><span class="line">            <span class="keyword">return</span> Response(&#123;<span class="string">"detail"</span>:<span class="string">"服务器内部错误!"</span>&#125;, status=status.HTTP_507_INSUFFICIENT_STORAGE)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> isinstance(exc, ZeroDivisionError):</span><br><span class="line">            view = context.get(<span class="string">"view"</span>)</span><br><span class="line">            print(<span class="string">"0不能作为除数! [%s]: %s"</span> % (view, exc) )</span><br><span class="line">            <span class="keyword">return</span> Response(&#123;<span class="string">"detail"</span>:<span class="string">"服务器内部错误!"</span>&#125;, status=status.HTTP_500_INTERNAL_SERVER_ERROR)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure>

<p>在主应用的配置文件settings.py中声明自定义的异常处理</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="comment"># 异常处理</span></span><br><span class="line">    <span class="string">'EXCEPTION_HANDLER'</span>: <span class="string">'drfdemo.exceptions.custom_exception_handler'</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果未声明，会采用默认的方式，如下</p>
<p>rest_frame/settings.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="string">'EXCEPTION_HANDLER'</span>: <span class="string">'rest_framework.views.exception_handler'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="REST-framework定义的异常"><a href="#REST-framework定义的异常" class="headerlink" title="REST framework定义的异常"></a>REST framework定义的异常</h3><ul>
<li>APIException drf中所有异常的父类</li>
<li>ParseError 解析错误</li>
<li>AuthenticationFailed 认证失败</li>
<li>NotAuthenticated 尚未认证</li>
<li>PermissionDenied 权限受限</li>
<li>NotFound 未找到</li>
<li>MethodNotAllowed 请求方式不支持</li>
<li>NotAcceptable 要获取的数据格式不支持</li>
<li>Throttled 超过限流次数</li>
<li>ValidationError 校验失败</li>
</ul>
<p>也就是说，很多的没有在上面列出来的异常，就需要我们在自定义异常中自己处理了。</p>
<h1 id="8-自动生成接口文档"><a href="#8-自动生成接口文档" class="headerlink" title="8. 自动生成接口文档"></a>8. 自动生成接口文档</h1><p>官方文档：<a href="http://core-api.github.io/python-client/" target="_blank" rel="noopener">http://core-api.github.io/python-client/</a></p>
<p>REST framework可以自动帮助我们生成接口文档。</p>
<p>接口文档以网页的方式呈现。</p>
<p>自动接口文档能生成的是继承自<code>APIView</code>及其子类的视图。</p>
<h2 id="8-1-安装依赖"><a href="#8-1-安装依赖" class="headerlink" title="8.1. 安装依赖"></a>8.1. 安装依赖</h2><p>REST framewrok生成接口文档需要<code>coreapi</code>库的支持。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install coreapi</span><br></pre></td></tr></table></figure>

<h2 id="8-2-设置接口文档访问路径"><a href="#8-2-设置接口文档访问路径" class="headerlink" title="8.2. 设置接口文档访问路径"></a>8.2. 设置接口文档访问路径</h2><p>在settings.py中配置接口文档。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="comment"># 。。。 其他选项</span></span><br><span class="line">    <span class="comment"># 接口文档</span></span><br><span class="line">    <span class="string">'DEFAULT_SCHEMA_CLASS'</span>: <span class="string">'rest_framework.schemas.AutoSchema'</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在总路由中添加接口文档路径。</p>
<p>文档路由对应的视图配置为<code>rest_framework.documentation.include_docs_urls</code>，</p>
<p>参数<code>title</code>为接口文档网站的标题。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.documentation <span class="keyword">import</span> include_docs_urls</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    ...</span><br><span class="line">    path(<span class="string">'docs/'</span>, include_docs_urls(title=<span class="string">'站点页面标题'</span>))</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>8.3. 文档描述说明的定义位置</p>
<p>1） 单一方法的视图，可直接使用类视图的文档字符串，如</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookListView</span><span class="params">(generics.ListAPIView)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    返回所有图书信息.</span></span><br><span class="line"><span class="string">    """</span></span><br></pre></td></tr></table></figure>

<p>2）包含多个方法的视图，在类视图的文档字符串中，分开方法定义，如</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookListCreateView</span><span class="params">(generics.ListCreateAPIView)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    get:</span></span><br><span class="line"><span class="string">    返回所有图书信息.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    post:</span></span><br><span class="line"><span class="string">    新建图书.</span></span><br><span class="line"><span class="string">    """</span></span><br></pre></td></tr></table></figure>

<p>3）对于视图集ViewSet，仍在类视图的文档字符串中封开定义，但是应使用action名称区分，如</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookInfoViewSet</span><span class="params">(mixins.ListModelMixin, mixins.RetrieveModelMixin, GenericViewSet)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    list:</span></span><br><span class="line"><span class="string">    返回图书列表数据</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    retrieve:</span></span><br><span class="line"><span class="string">    返回图书详情数据</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    latest:</span></span><br><span class="line"><span class="string">    返回最新的图书数据</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    read:</span></span><br><span class="line"><span class="string">    修改图书的阅读量</span></span><br><span class="line"><span class="string">    """</span></span><br></pre></td></tr></table></figure>

<h2 id="8-4-访问接口文档网页"><a href="#8-4-访问接口文档网页" class="headerlink" title="8.4. 访问接口文档网页"></a>8.4. 访问接口文档网页</h2><p>浏览器访问 127.0.0.1:8000/docs/，即可看到自动生成的接口文档。</p>
<p><img src="/images/drf%205%2089be22d379b34dacb463a31e54a46e7f.png" alt=""></p>
<h3 id="两点说明："><a href="#两点说明：" class="headerlink" title="两点说明："></a>两点说明：</h3><p>1） 视图集ViewSet中的retrieve名称，在接口文档网站中叫做read</p>
<p>2）参数的Description需要在模型类或序列化器类的字段中以help_text选项定义，如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    ...</span><br><span class="line">    age = models.IntegerField(default=<span class="number">0</span>, verbose_name=<span class="string">'年龄'</span>, help_text=<span class="string">'年龄'</span>)</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure>

<p>或</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentSerializer</span><span class="params">(serializers.ModelSerializer)</span>:</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = Student</span><br><span class="line">        fields = <span class="string">"__all__"</span></span><br><span class="line">        extra_kwargs = &#123;</span><br><span class="line">            <span class="string">'age'</span>: &#123;</span><br><span class="line">                <span class="string">'required'</span>: <span class="literal">True</span>,</span><br><span class="line">                <span class="string">'help_text'</span>: <span class="string">'年龄'</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>Django Rest_Framework</tag>
      </tags>
  </entry>
  <entry>
    <title>[视图View与路由Router]</title>
    <url>/2020/04/22/%E8%A7%86%E5%9B%BEView%E4%B8%8E%E8%B7%AF%E7%94%B1Router/</url>
    <content><![CDATA[<h1 id="1-视图"><a href="#1-视图" class="headerlink" title="1. 视图"></a>1. 视图</h1><p>Django REST framwork 提供的视图的主要作用：</p>
<ul>
<li>控制序列化器的执行（检验、保存、转换数据）</li>
<li>控制数据库查询的执行[数据库的删除/查询代码写在视图中，更新和添加写在序列化器]</li>
</ul>
<h2 id="1-2-视图"><a href="#1-2-视图" class="headerlink" title="1.2 视图"></a>1.2 视图</h2><p>REST framework 提供了众多的通用视图基类与扩展类，以简化视图的编写。</p>
<h3 id="1-2-1-2个视图基类"><a href="#1-2-1-2个视图基类" class="headerlink" title="1.2.1 2个视图基类"></a>1.2.1 2个视图基类</h3><h3 id="1-2-1-1-APIView"><a href="#1-2-1-1-APIView" class="headerlink" title="1.2.1.1 APIView"></a>1.2.1.1 APIView</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">rest_framework.views.APIView</span><br></pre></td></tr></table></figure>

<p><code>APIView</code>是REST framework提供的所有视图的基类，继承自Django的<code>View</code>父类。</p>
<p>drf的<code>APIView</code>与django<code>View</code>的不同之处在于：</p>
<ul>
<li>传入到视图方法中的是REST framework的<code>Request</code>对象，而不是Django的<code>HttpRequeset</code>对象；</li>
<li>视图方法可以返回REST framework的<code>Response</code>对象，视图会为响应数据设置（render）符合前端要求的格式；</li>
<li>任何<code>APIException</code>异常都会被捕获到，并且处理成合适的响应信息；</li>
<li>重写了as_view()，在进行dispatch()路由分发前，会对http请求进行身份认证、权限检查、访问流量控制。</li>
</ul>
<p>支持定义的类属性</p>
<ul>
<li><strong>authentication_classes</strong> 列表或元组，身份认证类</li>
<li><strong>permissoin_classes</strong> 列表或元组，权限检查类</li>
<li><strong>throttle_classes</strong> 列表或元祖，流量控制类</li>
</ul>
<p>在<code>APIView</code>中仍以常规的类视图定义方法来实现get() 、post() 或者其他请求方式的方法。</p>
<p>举例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"><span class="string">"""APIView是drf里面提供的所有视图类的父类</span></span><br><span class="line"><span class="string">   APIView提供的功能/属性/方法是最少的,所以使用APIView基本类似我们使用django的View</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">GET   /students/ 获取多个学生信息 </span></span><br><span class="line"><span class="string">POST  /students/ 添加一个学生信息</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">GET    /students/&lt;pk&gt;/  获取一个学生信息 </span></span><br><span class="line"><span class="string">PUT    /students/&lt;pk&gt;/  修改一个学生信息</span></span><br><span class="line"><span class="string">DELETE /students/&lt;pk&gt;/  删除一个学生信息</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> APIView</span><br><span class="line"><span class="keyword">from</span> students.models <span class="keyword">import</span> Student</span><br><span class="line"><span class="keyword">from</span> .serializers <span class="keyword">import</span> StudentModelSerializer</span><br><span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> status</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentAPIView</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self,request)</span>:</span></span><br><span class="line">        <span class="comment"># 1. 获取学生信息的数据模型</span></span><br><span class="line">        student_list = Student.objects.all()</span><br><span class="line">        <span class="comment"># 2. 调用序列化器</span></span><br><span class="line">        serializer = StudentModelSerializer(instance=student_list, many=<span class="literal">True</span>)</span><br><span class="line">        <span class="comment"># 3. 返回数据</span></span><br><span class="line">        <span class="keyword">return</span> Response(serializer.data)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self,request)</span>:</span></span><br><span class="line">        <span class="comment"># 1. 调用序列化器对用户提交的数据进行验证</span></span><br><span class="line">        serializer = StudentModelSerializer(data=request.data)</span><br><span class="line">        serializer.is_valid(raise_exception=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 2. 调用序列化器进行数据库操作</span></span><br><span class="line">        instance = serializer.save() <span class="comment"># save()方法返回的是添加成功以后的模型对象</span></span><br><span class="line"></span><br><span class="line">        serializer = StudentModelSerializer(instance=instance)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 3. 返回新增数据</span></span><br><span class="line">        <span class="keyword">return</span> Response(serializer.data, status=status.HTTP_201_CREATED)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student2APIView</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self,request,pk)</span>:</span></span><br><span class="line">        <span class="comment"># 1. 根据pk获取模型对象</span></span><br><span class="line">        student = Student.objects.get(pk=pk)</span><br><span class="line">        <span class="comment"># 2. 序列化器转换数据</span></span><br><span class="line">        serializer = StudentModelSerializer(instance=student)</span><br><span class="line">        <span class="comment"># 3. 响应数据</span></span><br><span class="line">        <span class="keyword">return</span> Response(serializer.data)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">put</span><span class="params">(self,request,pk)</span>:</span></span><br><span class="line">        <span class="comment"># 1. 通过pk查询学生信息</span></span><br><span class="line">        student = Student.objects.get(pk=pk)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 3. 调用序列化器对客户端发送过来的数据进行验证</span></span><br><span class="line">        serializer = StudentModelSerializer(instance=student, data=request.data)</span><br><span class="line">        serializer.is_valid(raise_exception=<span class="literal">True</span>)</span><br><span class="line">        <span class="comment"># 4. 保存数据</span></span><br><span class="line">        instance = serializer.save()</span><br><span class="line"></span><br><span class="line">        serializer = StudentModelSerializer(instance=instance)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 5. 返回结果</span></span><br><span class="line">        <span class="keyword">return</span> Response(serializer.data, status=status.HTTP_201_CREATED)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(self, request, pk)</span>:</span></span><br><span class="line">        <span class="comment"># 1. 通过pk查询学生信息</span></span><br><span class="line">        Student.objects.get(pk=pk).delete()</span><br><span class="line">        <span class="keyword">return</span> Response(&#123;<span class="string">"message"</span>:<span class="string">"ok"</span>&#125;, status=status.HTTP_204_NO_CONTENT)</span><br></pre></td></tr></table></figure>

<h3 id="1-2-1-2-GenericAPIView"><a href="#1-2-1-2-GenericAPIView" class="headerlink" title="1.2.1.2 GenericAPIView"></a>1.2.1.2 GenericAPIView</h3><p>通用视图类主要作用就是把视图中的独特的代码抽取出来，让视图方法中的代码更加通用，方便把通用代码进行简写。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">rest_framework.generics.GenericAPIView</span><br></pre></td></tr></table></figure>

<p>继承自<code>APIView</code>，<strong>主要增加了操作序列化器和数据库查询的类属性，作用是为下面Mixin视图扩展类的执行提供方法支持。通常在使用时，可搭配一个或多个Mixin扩展类。</strong></p>
<p>提供的关于序列化器使用的属性与方法</p>
<ul>
<li><p>属性：</p>
<ul>
<li><strong>serializer_class</strong> 指明视图使用的序列化器类</li>
</ul>
</li>
<li><p>方法：</p>
<ul>
<li><p><strong>get_serializer_class(self)</strong></p>
<p>当出现一个视图类中调用多个序列化器时,那么可以通过条件判断在get_serializer_class方法中通过返回不同的序列化器类名就可以让视图方法执行不同的序列化器对象了。</p>
<p>返回序列化器类，默认返回<code>serializer_class</code>，可以重写，例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_serializer_class</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> self.request.user.is_staff:</span><br><span class="line">        <span class="keyword">return</span> FullAccountSerializer</span><br><span class="line">    <span class="keyword">return</span> BasicAccountSerializer</span><br></pre></td></tr></table></figure>
</li>
<li><p>get_serializer(self, <em>args, *</em>kwargs)</p>
<p>返回序列化器对象，主要用来提供给Mixin扩展类使用，如果我们在视图中想要获取序列化器对象，也可以直接调用此方法。</p>
<p><strong>注意，该方法在提供序列化器对象的时候，会向序列化器对象的context属性补充三个数据：request、format、view，这三个数据对象可以在定义序列化器时使用。</strong></p>
<ul>
<li><strong>request</strong> 当前视图的请求对象</li>
<li><strong>view</strong> 当前请求的类视图对象</li>
<li>format 当前请求期望返回的数据格式</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>提供的关于数据库查询的属性与方法</p>
<ul>
<li><p>属性：</p>
<ul>
<li><strong>queryset</strong> 指明使用的数据查询集</li>
</ul>
</li>
<li><p>方法：</p>
<ul>
<li><p><strong>get_queryset(self)</strong></p>
<p>返回视图使用的查询集，主要用来提供给Mixin扩展类使用，是列表视图与详情视图获取数据的基础，默认返回<code>queryset</code>属性，可以重写，例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_queryset</span><span class="params">(self)</span>:</span></span><br><span class="line">    user = self.request.user</span><br><span class="line">    <span class="keyword">return</span> user.accounts.all()</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>get_object(self)</strong></p>
<p>返回详情视图所需的模型类数据对象，主要用来提供给Mixin扩展类使用。</p>
<p>在试图中可以调用该方法获取详情信息的模型类对象。</p>
<p><strong>若详情访问的模型类对象不存在，会返回404。</strong></p>
<p>该方法会默认使用APIView提供的check_object_permissions方法检查当前对象是否有权限被访问。</p>
<p>举例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># url(r'^books/(?P&lt;pk&gt;\d+)/$', views.BookDetailView.as_view()),</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookDetailView</span><span class="params">(GenericAPIView)</span>:</span></span><br><span class="line">    queryset = BookInfo.objects.all()</span><br><span class="line">    serializer_class = BookInfoSerializer</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request, pk)</span>:</span></span><br><span class="line">        book = self.get_object() <span class="comment"># get_object()方法根据pk参数查找queryset中的数据对象</span></span><br><span class="line">        serializer = self.get_serializer(book)</span><br><span class="line">        <span class="keyword">return</span> Response(serializer.data)</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<p>其他可以设置的属性</p>
<ul>
<li><strong>pagination_class</strong> 指明分页控制类</li>
<li><strong>filter_backends</strong> 指明过滤控制后端</li>
</ul>
<p>为了方便学习上面的GenericAPIView通用视图类，我们新建一个子应用。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python manage.py startapp gen</span><br></pre></td></tr></table></figure>

<p>代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.generics <span class="keyword">import</span> GenericAPIView</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> students.models <span class="keyword">import</span> Student</span><br><span class="line"><span class="keyword">from</span> .serializers <span class="keyword">import</span> StudentModelSerializer, StudentModel2Serializer</span><br><span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentsGenericAPIView</span><span class="params">(GenericAPIView)</span>:</span></span><br><span class="line">    <span class="comment"># 本次视图类中要操作的数据[必填]</span></span><br><span class="line">    queryset = Student.objects.all()</span><br><span class="line">    <span class="comment"># 本次视图类中要调用的默认序列化器[玄天]</span></span><br><span class="line">    serializer_class = StudentModelSerializer</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        <span class="string">"""获取所有学生信息"""</span></span><br><span class="line">        serializer = self.get_serializer(instance=self.get_queryset(), many=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Response(serializer.data)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self,request)</span>:</span></span><br><span class="line"></span><br><span class="line">        data = request.data</span><br><span class="line"></span><br><span class="line">        serializer = self.get_serializer(data=data)</span><br><span class="line"></span><br><span class="line">        serializer.is_valid(raise_exception=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">        instance = serializer.save()</span><br><span class="line"></span><br><span class="line">        serializer = self.get_serializer(instance=instance)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Response(serializer.data)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentGenericAPIView</span><span class="params">(GenericAPIView)</span>:</span></span><br><span class="line">    queryset = Student.objects.all()</span><br><span class="line">    serializer_class = StudentModelSerializer</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_serializer_class</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""重写获取序列化器类的方法"""</span></span><br><span class="line">        <span class="keyword">if</span> self.request.method == <span class="string">"GET"</span>:</span><br><span class="line">            <span class="keyword">return</span> StudentModel2Serializer</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> StudentModelSerializer</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 在使用GenericAPIView视图获取或操作单个数据时,视图方法中的代表主键的参数最好是pk</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self,request,pk)</span>:</span></span><br><span class="line">        <span class="string">"""获取一条数据"""</span></span><br><span class="line">        serializer = self.get_serializer(instance=self.get_object())</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Response(serializer.data)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">put</span><span class="params">(self,request,pk)</span>:</span></span><br><span class="line"></span><br><span class="line">        data = request.data</span><br><span class="line"></span><br><span class="line">        serializer = self.get_serializer(instance=self.get_object(),data=data)</span><br><span class="line"></span><br><span class="line">        serializer.is_valid(raise_exception=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">        serializer.save()</span><br><span class="line"></span><br><span class="line">        serializer = self.get_serializer(instance=self.get_object())</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Response(serializer.data)</span><br></pre></td></tr></table></figure>

<p>序列化器类：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> students.models <span class="keyword">import</span> Student</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentModelSerializer</span><span class="params">(serializers.ModelSerializer)</span>:</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model= Student</span><br><span class="line">        fields = <span class="string">"__all__"</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentModel2Serializer</span><span class="params">(serializers.ModelSerializer)</span>:</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model= Student</span><br><span class="line">        fields = (<span class="string">"name"</span>,<span class="string">"class_null"</span>)</span><br></pre></td></tr></table></figure>

<h3 id="1-2-2-5个视图扩展类"><a href="#1-2-2-5个视图扩展类" class="headerlink" title="1.2.2 5个视图扩展类"></a>1.2.2 5个视图扩展类</h3><p>作用：</p>
<p>提供了几种后端视图（对数据资源进行曾删改查）处理流程的实现，如果需要编写的视图属于这五种，则视图可以通过继承相应的扩展类来复用代码，减少自己编写的代码量。</p>
<p>这五个扩展类需要搭配GenericAPIView父类，因为五个扩展类的实现需要调用GenericAPIView提供的序列化器与数据库查询的方法。</p>
<h3 id="1）ListModelMixin"><a href="#1）ListModelMixin" class="headerlink" title="1）ListModelMixin"></a>1）ListModelMixin</h3><p>列表视图扩展类，提供<code>list(request, *args, **kwargs)</code>方法快速实现列表视图，返回200状态码。</p>
<p>该Mixin的list方法会对数据进行过滤和分页。</p>
<p>源代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListModelMixin</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    List a queryset.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">list</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="comment"># 过滤</span></span><br><span class="line">        queryset = self.filter_queryset(self.get_queryset())</span><br><span class="line">        <span class="comment"># 分页</span></span><br><span class="line">        page = self.paginate_queryset(queryset)</span><br><span class="line">        <span class="keyword">if</span> page <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            serializer = self.get_serializer(page, many=<span class="literal">True</span>)</span><br><span class="line">            <span class="keyword">return</span> self.get_paginated_response(serializer.data)</span><br><span class="line">        <span class="comment"># 序列化</span></span><br><span class="line">        serializer = self.get_serializer(queryset, many=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">return</span> Response(serializer.data)</span><br></pre></td></tr></table></figure>

<p>举例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.mixins <span class="keyword">import</span> ListModelMixin</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookListView</span><span class="params">(ListModelMixin, GenericAPIView)</span>:</span></span><br><span class="line">    queryset = BookInfo.objects.all()</span><br><span class="line">    serializer_class = BookInfoSerializer</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.list(request)</span><br></pre></td></tr></table></figure>

<h3 id="2）CreateModelMixin"><a href="#2）CreateModelMixin" class="headerlink" title="2）CreateModelMixin"></a>2）CreateModelMixin</h3><p>创建视图扩展类，提供<code>create(request, *args, **kwargs)</code>方法快速实现创建资源的视图，成功返回201状态码。</p>
<p>如果序列化器对前端发送的数据验证失败，返回400错误。</p>
<p>源代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CreateModelMixin</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Create a model instance.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">create</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="comment"># 获取序列化器</span></span><br><span class="line">        serializer = self.get_serializer(data=request.data)</span><br><span class="line">        <span class="comment"># 验证</span></span><br><span class="line">        serializer.is_valid(raise_exception=<span class="literal">True</span>)</span><br><span class="line">        <span class="comment"># 保存</span></span><br><span class="line">        self.perform_create(serializer)</span><br><span class="line">        headers = self.get_success_headers(serializer.data)</span><br><span class="line">        <span class="keyword">return</span> Response(serializer.data, status=status.HTTP_201_CREATED, headers=headers)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">perform_create</span><span class="params">(self, serializer)</span>:</span></span><br><span class="line">        serializer.save()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_success_headers</span><span class="params">(self, data)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">return</span> &#123;<span class="string">'Location'</span>: str(data[api_settings.URL_FIELD_NAME])&#125;</span><br><span class="line">        <span class="keyword">except</span> (TypeError, KeyError):</span><br><span class="line">            <span class="keyword">return</span> &#123;&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3）RetrieveModelMixin"><a href="#3）RetrieveModelMixin" class="headerlink" title="3）RetrieveModelMixin"></a>3）RetrieveModelMixin</h3><p>详情视图扩展类，提供<code>retrieve(request, *args, **kwargs)</code>方法，可以快速实现返回一个存在的数据对象。</p>
<p>如果存在，返回200， 否则返回404。</p>
<p>源代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RetrieveModelMixin</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Retrieve a model instance.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">retrieve</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="comment"># 获取对象，会检查对象的权限</span></span><br><span class="line">        instance = self.get_object()</span><br><span class="line">        <span class="comment"># 序列化</span></span><br><span class="line">        serializer = self.get_serializer(instance)</span><br><span class="line">        <span class="keyword">return</span> Response(serializer.data)</span><br></pre></td></tr></table></figure>

<p>举例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookDetailView</span><span class="params">(RetrieveModelMixin, GenericAPIView)</span>:</span></span><br><span class="line">    queryset = BookInfo.objects.all()</span><br><span class="line">    serializer_class = BookInfoSerializer</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request, pk)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.retrieve(request)</span><br></pre></td></tr></table></figure>

<h3 id="4）UpdateModelMixin"><a href="#4）UpdateModelMixin" class="headerlink" title="4）UpdateModelMixin"></a>4）UpdateModelMixin</h3><p>更新视图扩展类，提供<code>update(request, *args, **kwargs)</code>方法，可以快速实现更新一个存在的数据对象。</p>
<p>同时也提供<code>partial_update(request, *args, **kwargs)</code>方法，可以实现局部更新。</p>
<p>成功返回200，序列化器校验数据失败时，返回400错误。</p>
<p>源代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UpdateModelMixin</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Update a model instance.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        partial = kwargs.pop(<span class="string">'partial'</span>, <span class="literal">False</span>)</span><br><span class="line">        instance = self.get_object()</span><br><span class="line">        serializer = self.get_serializer(instance, data=request.data, partial=partial)</span><br><span class="line">        serializer.is_valid(raise_exception=<span class="literal">True</span>)</span><br><span class="line">        self.perform_update(serializer)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> getattr(instance, <span class="string">'_prefetched_objects_cache'</span>, <span class="literal">None</span>):</span><br><span class="line">            <span class="comment"># If 'prefetch_related' has been applied to a queryset, we need to</span></span><br><span class="line">            <span class="comment"># forcibly invalidate the prefetch cache on the instance.</span></span><br><span class="line">            instance._prefetched_objects_cache = &#123;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Response(serializer.data)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">perform_update</span><span class="params">(self, serializer)</span>:</span></span><br><span class="line">        serializer.save()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">partial_update</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        kwargs[<span class="string">'partial'</span>] = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> self.update(request, *args, **kwargs)</span><br></pre></td></tr></table></figure>

<h3 id="5）DestroyModelMixin"><a href="#5）DestroyModelMixin" class="headerlink" title="5）DestroyModelMixin"></a>5）DestroyModelMixin</h3><p>删除视图扩展类，提供<code>destroy(request, *args, **kwargs)</code>方法，可以快速实现删除一个存在的数据对象。</p>
<p>成功返回204，不存在返回404。</p>
<p>源代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DestroyModelMixin</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Destroy a model instance.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">destroy</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        instance = self.get_object()</span><br><span class="line">        self.perform_destroy(instance)</span><br><span class="line">        <span class="keyword">return</span> Response(status=status.HTTP_204_NO_CONTENT)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">perform_destroy</span><span class="params">(self, instance)</span>:</span></span><br><span class="line">        instance.delete()</span><br></pre></td></tr></table></figure>

<p>使用GenericAPIView和视图扩展类，实现api接口，代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""GenericAPIView结合视图扩展类实现api接口"""</span></span><br><span class="line"><span class="keyword">from</span> rest_framework.mixins <span class="keyword">import</span> ListModelMixin,CreateModelMixin</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Students2GenericAPIView</span><span class="params">(GenericAPIView,ListModelMixin,CreateModelMixin)</span>:</span></span><br><span class="line">    <span class="comment"># 本次视图类中要操作的数据[必填]</span></span><br><span class="line">    queryset = Student.objects.all()</span><br><span class="line">    <span class="comment"># 本次视图类中要调用的默认序列化器[玄天]</span></span><br><span class="line">    serializer_class = StudentModelSerializer</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        <span class="string">"""获取多个学生信息"""</span></span><br><span class="line">        <span class="keyword">return</span> self.list(request)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self,request)</span>:</span></span><br><span class="line">        <span class="string">"""添加学生信息"""</span></span><br><span class="line">        <span class="keyword">return</span> self.create(request)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> rest_framework.mixins <span class="keyword">import</span> RetrieveModelMixin,UpdateModelMixin,DestroyModelMixin</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student2GenericAPIView</span><span class="params">(GenericAPIView,RetrieveModelMixin,UpdateModelMixin,DestroyModelMixin)</span>:</span></span><br><span class="line">    queryset = Student.objects.all()</span><br><span class="line"></span><br><span class="line">    serializer_class = StudentModelSerializer</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 在使用GenericAPIView视图获取或操作单个数据时,视图方法中的代表主键的参数最好是pk</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self,request,pk)</span>:</span></span><br><span class="line">        <span class="string">"""获取一条数据"""</span></span><br><span class="line">        <span class="keyword">return</span> self.retrieve(request,pk)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">put</span><span class="params">(self,request,pk)</span>:</span></span><br><span class="line">        <span class="string">"""更新一条数据"""</span></span><br><span class="line">        <span class="keyword">return</span> self.update(request,pk)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(self,request,pk)</span>:</span></span><br><span class="line">        <span class="string">"""删除一条数据"""</span></span><br><span class="line">        <span class="keyword">return</span> self.destroy(request,pk)</span><br></pre></td></tr></table></figure>

<h3 id="1-2-3-GenericAPIView的视图子类"><a href="#1-2-3-GenericAPIView的视图子类" class="headerlink" title="1.2.3 GenericAPIView的视图子类"></a>1.2.3 GenericAPIView的视图子类</h3><h3 id="1）CreateAPIView"><a href="#1）CreateAPIView" class="headerlink" title="1）CreateAPIView"></a>1）CreateAPIView</h3><p>提供 post 方法</p>
<p>继承自： GenericAPIView、CreateModelMixin</p>
<h3 id="2）ListAPIView"><a href="#2）ListAPIView" class="headerlink" title="2）ListAPIView"></a>2）ListAPIView</h3><p>提供 get 方法</p>
<p>继承自：GenericAPIView、ListModelMixin</p>
<h3 id="3）RetrieveAPIView"><a href="#3）RetrieveAPIView" class="headerlink" title="3）RetrieveAPIView"></a>3）RetrieveAPIView</h3><p>提供 get 方法</p>
<p>继承自: GenericAPIView、RetrieveModelMixin</p>
<h3 id="4）DestoryAPIView"><a href="#4）DestoryAPIView" class="headerlink" title="4）DestoryAPIView"></a>4）DestoryAPIView</h3><p>提供 delete 方法</p>
<p>继承自：GenericAPIView、DestoryModelMixin</p>
<h3 id="5）UpdateAPIView"><a href="#5）UpdateAPIView" class="headerlink" title="5）UpdateAPIView"></a>5）UpdateAPIView</h3><p>提供 put 和 patch 方法</p>
<p>继承自：GenericAPIView、UpdateModelMixin</p>
<h3 id="6）RetrieveUpdateAPIView"><a href="#6）RetrieveUpdateAPIView" class="headerlink" title="6）RetrieveUpdateAPIView"></a>6）RetrieveUpdateAPIView</h3><p>提供 get、put、patch方法</p>
<p>继承自： GenericAPIView、RetrieveModelMixin、UpdateModelMixin</p>
<h3 id="7）RetrieveUpdateDestoryAPIView"><a href="#7）RetrieveUpdateDestoryAPIView" class="headerlink" title="7）RetrieveUpdateDestoryAPIView"></a>7）RetrieveUpdateDestoryAPIView</h3><p>提供 get、put、patch、delete方法</p>
<p>继承自：GenericAPIView、RetrieveModelMixin、UpdateModelMixin、DestoryModelMixin</p>
<h2 id="1-3-视图集ViewSet"><a href="#1-3-视图集ViewSet" class="headerlink" title="1.3 视图集ViewSet"></a>1.3 视图集ViewSet</h2><p>使用视图集ViewSet，可以将一系列逻辑相关的动作放到一个类中：</p>
<ul>
<li>list() 提供一组数据</li>
<li>retrieve() 提供单个数据</li>
<li>create() 创建数据</li>
<li>update() 保存数据</li>
<li>destory() 删除数据</li>
</ul>
<p>ViewSet视图集类不再实现get()、post()等方法，而是实现动作 <strong>action</strong> 如 list() 、create() 等。</p>
<p>视图集只在使用as_view()方法的时候，才会将<strong>action</strong>动作与具体请求方式对应上。如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookInfoViewSet</span><span class="params">(viewsets.ViewSet)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">list</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        books = BookInfo.objects.all()</span><br><span class="line">        serializer = BookInfoSerializer(books, many=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">return</span> Response(serializer.data)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">retrieve</span><span class="params">(self, request, pk=None)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            books = BookInfo.objects.get(id=pk)</span><br><span class="line">        <span class="keyword">except</span> BookInfo.DoesNotExist:</span><br><span class="line">            <span class="keyword">return</span> Response(status=status.HTTP_404_NOT_FOUND)</span><br><span class="line">        serializer = BookInfoSerializer(books)</span><br><span class="line">        <span class="keyword">return</span> Response(serializer.data)</span><br></pre></td></tr></table></figure>

<p>在设置路由时，我们可以如下操作</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r'^books/$'</span>, BookInfoViewSet.as_view(&#123;<span class="string">'get'</span>:<span class="string">'list'</span>&#125;),</span><br><span class="line">    url(<span class="string">r'^books/(?P&lt;pk&gt;\d+)/$'</span>, BookInfoViewSet.as_view(&#123;<span class="string">'get'</span>: <span class="string">'retrieve'</span>&#125;)</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h3 id="1-3-1-常用视图集父类"><a href="#1-3-1-常用视图集父类" class="headerlink" title="1.3.1 常用视图集父类"></a>1.3.1 常用视图集父类</h3><h3 id="1）-ViewSet"><a href="#1）-ViewSet" class="headerlink" title="1） ViewSet"></a>1） ViewSet</h3><p>继承自<code>APIView</code>与<code>ViewSetMixin</code>，作用也与APIView基本类似，提供了身份认证、权限校验、流量管理等。</p>
<p><strong>ViewSet主要通过继承ViewSetMixin来实现在调用as_view()时传入字典（如{‘get’:‘list’}）的映射处理工作。</strong></p>
<p>在ViewSet中，没有提供任何动作action方法，需要我们自己实现action方法。</p>
<h3 id="2）GenericViewSet"><a href="#2）GenericViewSet" class="headerlink" title="2）GenericViewSet"></a>2）GenericViewSet</h3><p>使用ViewSet通常并不方便，因为list、retrieve、create、update、destory等方法都需要自己编写，而这些方法与前面讲过的Mixin扩展类提供的方法同名，所以我们可以通过继承Mixin扩展类来复用这些方法而无需自己编写。但是Mixin扩展类依赖与<code>GenericAPIView</code>，所以还需要继承<code>GenericAPIView</code>。</p>
<p><strong>GenericViewSet</strong>就帮助我们完成了这样的继承工作，继承自<code>GenericAPIView</code>与<code>ViewSetMixin</code>，在实现了调用as_view()时传入字典（如<code>{&#39;get&#39;:&#39;list&#39;}</code>）的映射处理工作的同时，还提供了<code>GenericAPIView</code>提供的基础方法，可以直接搭配Mixin扩展类使用。</p>
<p>举例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.viewsets <span class="keyword">import</span> GenericViewSet</span><br><span class="line"><span class="keyword">from</span> rest_framework.mixins <span class="keyword">import</span> ListModelMixin,CreateModelMixin,RetrieveModelMixin,UpdateModelMixin,DestroyModelMixin</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student4ViewSet</span><span class="params">(GenericViewSet,ListModelMixin,CreateModelMixin,RetrieveModelMixin,UpdateModelMixin,DestroyModelMixin)</span>:</span></span><br><span class="line">    queryset = Student.objects.all()</span><br><span class="line">    serializer_class = StudentModelSerializer</span><br></pre></td></tr></table></figure>

<p>url的定义</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">"students7/"</span>, views.Student4ViewSet.as_view(&#123;<span class="string">"get"</span>: <span class="string">"list"</span>, <span class="string">"post"</span>: <span class="string">"create"</span>&#125;)),</span><br><span class="line">    re_path(<span class="string">"students7/(?P&lt;pk&gt;\d+)/"</span>, views.Student4ViewSet.as_view(&#123;<span class="string">"get"</span>: <span class="string">"retrieve"</span>,<span class="string">"put"</span>:<span class="string">"update"</span>,<span class="string">"delete"</span>:<span class="string">"destroy"</span>&#125;)),</span><br><span class="line"></span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h3 id="3）ModelViewSet"><a href="#3）ModelViewSet" class="headerlink" title="3）ModelViewSet"></a>3）ModelViewSet</h3><p>继承自<code>GenericViewSet</code>，同时包括了ListModelMixin、RetrieveModelMixin、CreateModelMixin、UpdateModelMixin、DestoryModelMixin。</p>
<h3 id="4）ReadOnlyModelViewSet"><a href="#4）ReadOnlyModelViewSet" class="headerlink" title="4）ReadOnlyModelViewSet"></a>4）ReadOnlyModelViewSet</h3><p>继承自<code>GenericViewSet</code>，同时包括了ListModelMixin、RetrieveModelMixin。</p>
<h3 id="1-3-2-视图集中定义附加action动作"><a href="#1-3-2-视图集中定义附加action动作" class="headerlink" title="1.3.2 视图集中定义附加action动作"></a>1.3.2 视图集中定义附加action动作</h3><p>在视图集中，除了上述默认的方法动作外，还可以添加自定义动作。</p>
<p>举例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.viewsets <span class="keyword">import</span> ModelViewSet,ReadOnlyModelViewSet</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentModelViewSet</span><span class="params">(ModelViewSet)</span>:</span></span><br><span class="line">    queryset = Student.objects.all()</span><br><span class="line">    serializer_class = StudentModelSerializer</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(self,request)</span>:</span></span><br><span class="line">        <span class="string">"""学生登录功能"""</span></span><br><span class="line">        <span class="keyword">return</span> Response(&#123;<span class="string">"message"</span>:<span class="string">"登录成功"</span>&#125;)</span><br></pre></td></tr></table></figure>

<p>url的定义</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">"students8/"</span>, views.StudentModelViewSet.as_view(&#123;<span class="string">"get"</span>: <span class="string">"list"</span>, <span class="string">"post"</span>: <span class="string">"create"</span>&#125;)),</span><br><span class="line">    re_path(<span class="string">"students8/(?P&lt;pk&gt;\d+)/"</span>,</span><br><span class="line">            views.StudentModelViewSet.as_view(&#123;<span class="string">"get"</span>: <span class="string">"retrieve"</span>, <span class="string">"put"</span>: <span class="string">"update"</span>, <span class="string">"delete"</span>: <span class="string">"destroy"</span>&#125;)),</span><br><span class="line"></span><br><span class="line">    path(<span class="string">"stu/login/"</span>,views.StudentModelViewSet.as_view(&#123;<span class="string">"get"</span>:<span class="string">"login"</span>&#125;))</span><br><span class="line"></span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h3 id="1-3-3-action属性"><a href="#1-3-3-action属性" class="headerlink" title="1.3.3 action属性"></a>1.3.3 action属性</h3><p>在视图集中，我们可以通过action对象属性来获取当前请求视图集时的action动作是哪个。</p>
<p>例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.viewsets <span class="keyword">import</span> ModelViewSet</span><br><span class="line"><span class="keyword">from</span> students.models <span class="keyword">import</span> Student</span><br><span class="line"><span class="keyword">from</span> .serializers <span class="keyword">import</span> StudentModelSerializer</span><br><span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentModelViewSet</span><span class="params">(ModelViewSet)</span>:</span></span><br><span class="line">    queryset = Student.objects.all()</span><br><span class="line">    serializer_class = StudentModelSerializer</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_new_5</span><span class="params">(self,request)</span>:</span></span><br><span class="line">        <span class="string">"""获取最近添加的5个学生信息"""</span></span><br><span class="line">        <span class="comment"># 操作数据库</span></span><br><span class="line">        print(self.action) <span class="comment"># 获取本次请求的视图方法名</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">通过路由访问到当前方法中.可以看到本次的action就是请求的方法名</span><br></pre></td></tr></table></figure>

<h1 id="2-路由Routers"><a href="#2-路由Routers" class="headerlink" title="2. 路由Routers"></a>2. 路由Routers</h1><p>对于视图集ViewSet，我们除了可以自己手动指明请求方式与动作action之间的对应关系外，还可以使用Routers来帮助我们快速实现路由信息。</p>
<p>REST framework提供了两个router</p>
<ul>
<li><strong>SimpleRouter</strong></li>
<li><strong>DefaultRouter</strong></li>
</ul>
<h2 id="2-1-使用方法"><a href="#2-1-使用方法" class="headerlink" title="2.1 使用方法"></a>2.1 使用方法</h2><p>1） 创建router对象，并注册视图集，例如</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> routers</span><br><span class="line"></span><br><span class="line">router = routers.DefaultRouter()</span><br><span class="line">router.register(<span class="string">r'router_stu'</span>, StudentModelViewSet, base_name=<span class="string">'student'</span>)</span><br></pre></td></tr></table></figure>

<p>register(prefix, viewset, base_name)</p>
<ul>
<li>prefix 该视图集的路由前缀</li>
<li>viewset 视图集</li>
<li>base_name 路由别名的前缀</li>
</ul>
<p>如上述代码会形成的路由如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">^books/$    name: book-list</span><br><span class="line">^books/&#123;pk&#125;/$   name: book-detail</span><br></pre></td></tr></table></figure>

<p>2）添加路由数据</p>
<p>可以有两种方式：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">urlpatterns = [</span><br><span class="line">    ...</span><br><span class="line">]</span><br><span class="line">urlpatterns += router.urls</span><br></pre></td></tr></table></figure>

<p>或</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">urlpatterns = [</span><br><span class="line">    ...</span><br><span class="line">    url(<span class="string">r'^'</span>, include(router.urls))</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>使用路由类给视图集生成了路由地址</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.viewsets <span class="keyword">import</span> ModelViewSet,ReadOnlyModelViewSet</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentModelViewSet</span><span class="params">(ModelViewSet)</span>:</span></span><br><span class="line">    queryset = Student.objects.all()</span><br><span class="line">    serializer_class = StudentModelSerializer</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(self,request)</span>:</span></span><br><span class="line">        <span class="string">"""学生登录功能"""</span></span><br><span class="line">        print(self.action)</span><br><span class="line">        <span class="keyword">return</span> Response(&#123;<span class="string">"message"</span>:<span class="string">"登录成功"</span>&#125;)</span><br></pre></td></tr></table></figure>

<p>路由代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, re_path</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line">urlpatterns = [</span><br><span class="line">    ...</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="string">"""使用drf提供路由类router给视图集生成路由列表"""</span></span><br><span class="line"><span class="comment"># 实例化路由类</span></span><br><span class="line"><span class="comment"># drf提供一共提供了两个路由类给我们使用,他们用法一致,功能几乎一样</span></span><br><span class="line"><span class="keyword">from</span> rest_framework.routers <span class="keyword">import</span> DefaultRouter</span><br><span class="line">router = DefaultRouter()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注册视图集</span></span><br><span class="line"><span class="comment"># router.register("路由前缀",视图集类)</span></span><br><span class="line">router.register(<span class="string">"router_stu"</span>,views.StudentModelViewSet)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 把生成的路由列表追加到urlpatterns</span></span><br><span class="line">print( router.urls )</span><br><span class="line">urlpatterns += router.urls</span><br></pre></td></tr></table></figure>

<p>上面的代码就成功生成了路由地址[增/删/改/查一条/查多条的功能]，但是不会自动我们在视图集自定义方法的路由。</p>
<p>所以我们如果也要给自定义方法生成路由，则需要进行action动作的声明。</p>
<h2 id="2-2-视图集中附加action的声明"><a href="#2-2-视图集中附加action的声明" class="headerlink" title="2.2 视图集中附加action的声明"></a>2.2 视图集中附加action的声明</h2><p>在视图集中，如果想要让Router自动帮助我们为自定义的动作生成路由信息，需要使用<code>rest_framework.decorators.action</code>装饰器。</p>
<p>以action装饰器装饰的方法名会作为action动作名，与list、retrieve等同。</p>
<p>action装饰器可以接收两个参数：</p>
<ul>
<li><p><strong>methods</strong>: 声明该action对应的请求方式，列表传递</p>
</li>
<li><p>detail声明该action的路径是否与单一资源对应，及是否是</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">xxx/&lt;pk&gt;/action方法名/</span><br></pre></td></tr></table></figure>

<ul>
<li>True 表示路径格式是<code>xxx/&lt;pk&gt;/action方法名/</code></li>
<li>False 表示路径格式是<code>xxx/action方法名/</code></li>
</ul>
</li>
</ul>
<p>举例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.viewsets <span class="keyword">import</span> ModelViewSet</span><br><span class="line"><span class="keyword">from</span> rest_framework.decorators <span class="keyword">import</span> action</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentModelViewSet</span><span class="params">(ModelViewSet)</span>:</span></span><br><span class="line">    queryset = Student.objects.all()</span><br><span class="line">    serializer_class = StudentModelSerializer</span><br><span class="line"></span><br><span class="line">    <span class="comment"># methods 设置当前方法允许哪些http请求访问当前视图方法</span></span><br><span class="line">    <span class="comment"># detail 设置当前视图方法是否是操作一个数据</span></span><br><span class="line">    <span class="comment"># detail为True，表示路径名格式应该为 router_stu/&#123;pk&#125;/login/</span></span><br><span class="line"><span class="meta">    @action(methods=['get'], detail=True)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(self, request,pk)</span>:</span></span><br><span class="line">        <span class="string">"""登录"""</span></span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">    <span class="comment"># detail为False 表示路径名格式应该为 router_stu/get_new_5/</span></span><br><span class="line"><span class="meta">    @action(methods=['put'], detail=False)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_new_5</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        <span class="string">"""获取最新添加的5个学生信息"""</span></span><br><span class="line">        ...</span><br></pre></td></tr></table></figure>

<p>由路由器自动为此视图集自定义action方法形成的路由会是如下内容：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">^router_stu/get_new_5/$    name: router_stu-get_new_5</span><br><span class="line">^router_stu/&#123;pk&#125;/login/$   name: router_stu-login</span><br></pre></td></tr></table></figure>

<h2 id="2-3-路由router形成URL的方式"><a href="#2-3-路由router形成URL的方式" class="headerlink" title="2.3 路由router形成URL的方式"></a>2.3 路由router形成URL的方式</h2><p>1） SimpleRouter</p>
<p><img src="/imamges/SimpleRouter.png" alt=""></p>
<p>2）DefaultRouter</p>
<p><img src="/imamges/DefaultRouter.png" alt=""></p>
<p>DefaultRouter与SimpleRouter的区别是，DefaultRouter会多附带一个默认的API根视图，返回一个包含所有列表视图的超链接响应数据。</p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>Django Rest_Framework</tag>
      </tags>
  </entry>
  <entry>
    <title>[HTTP请求处理]</title>
    <url>/2020/04/22/HTTP%E8%AF%B7%E6%B1%82%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<h1 id="1-http请求处理"><a href="#1-http请求处理" class="headerlink" title="1. http请求处理"></a>1. http请求处理</h1><p>drf除了在数据序列化部分简写代码以外，还在视图中提供了简写操作。所以在django原有的django.views.View类基础上，drf封装了多个视图子类出来提供给我们使用。</p>
<p>Django REST framwork 提供的视图的主要作用：</p>
<ul>
<li>控制序列化器的执行（检验、保存、转换数据）</li>
<li>控制数据库查询的执行</li>
<li>调用请求类和响应类[这两个类也是由drf帮我们再次扩展了一些功能类。]</li>
</ul>
<p>为了方便我们学习，所以先创建一个子应用req</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python manage.py startapp req</span><br></pre></td></tr></table></figure>

<p>注册子引用：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">'django.contrib.admin'</span>,</span><br><span class="line">    <span class="string">'django.contrib.auth'</span>,</span><br><span class="line">    <span class="string">'django.contrib.contenttypes'</span>,</span><br><span class="line">    <span class="string">'django.contrib.sessions'</span>,</span><br><span class="line">    <span class="string">'django.contrib.messages'</span>,</span><br><span class="line">    <span class="string">'django.contrib.staticfiles'</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 注册 rest_framework　的子应用</span></span><br><span class="line">    <span class="string">'rest_framework'</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">'students'</span>,</span><br><span class="line">    <span class="string">'sers'</span>,</span><br><span class="line">    <span class="string">'unsers'</span>,</span><br><span class="line">    <span class="string">'homework'</span>,</span><br><span class="line">    <span class="string">'req'</span>,     <span class="comment"># 请求与响应</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>注册路由</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 子应用路由</span></span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line">urlpatterns = [</span><br><span class="line"></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 总路由</span></span><br><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path,include</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'admin/'</span>, admin.site.urls),</span><br><span class="line">    path(<span class="string">'students/'</span>, include(<span class="string">"students.urls"</span>)),</span><br><span class="line">    path(<span class="string">'sers/'</span>, include(<span class="string">"sers.urls"</span>)),</span><br><span class="line">    path(<span class="string">'unsers/'</span>, include(<span class="string">"unsers.urls"</span>)),</span><br><span class="line">    path(<span class="string">'req/'</span>, include(<span class="string">"req.urls"</span>)),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h2 id="1-1-请求与响应"><a href="#1-1-请求与响应" class="headerlink" title="1.1. 请求与响应"></a>1.1. 请求与响应</h2><h3 id="1-1-1-Request"><a href="#1-1-1-Request" class="headerlink" title="1.1.1 Request"></a>1.1.1 Request</h3><p>REST framework 传入视图的request对象不再是Django默认的HttpRequest对象，而是REST framework提供的扩展了HttpRequest类的<strong>Request</strong>类的对象。</p>
<p>REST framework 提供了<strong>Parser</strong>解析器，在接收到请求后会自动根据Content-Type指明的请求数据类型（如JSON、表单等）将请求数据进行parse解析，解析为类字典[QueryDict]对象保存到<strong>Request</strong>对象中。</p>
<p><strong>Request对象的数据是自动根据前端发送数据的格式进行解析之后的结果。</strong></p>
<p>无论前端发送的哪种格式的数据，我们都可以以统一的方式读取数据。</p>
<h3 id="1-1-1-1-常用属性"><a href="#1-1-1-1-常用属性" class="headerlink" title="1.1.1.1 常用属性"></a>1.1.1.1 常用属性</h3><h3 id="1）-data"><a href="#1）-data" class="headerlink" title="1）.data"></a>1）.data</h3><p><code>request.data</code> 返回解析之后的请求体数据。类似于Django中标准的<code>request.POST</code>和 <code>request.FILES</code>属性，但提供如下特性：</p>
<ul>
<li>包含了解析之后的文件和非文件数据</li>
<li>包含了对POST、PUT、PATCH请求方式解析后的数据</li>
<li>利用了REST framework的parsers解析器，不仅支持表单类型数据，也支持JSON数据</li>
</ul>
<h3 id="2）-query-params"><a href="#2）-query-params" class="headerlink" title="2）.query_params"></a>2）.query_params</h3><p><code>request.query_params</code>返回解析之后的查询字符串数据</p>
<p><code>request.query_params</code>与Django标准的<code>request.GET</code>相同，只是更换了更正确的名称而已。</p>
<h3 id="1-1-2-Response"><a href="#1-1-2-Response" class="headerlink" title="1.1.2 Response"></a>1.1.2 Response</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">rest_framework.response.Response</span><br></pre></td></tr></table></figure>

<p>REST framework提供了一个响应类<code>Response</code>，使用该类构造响应对象时，响应的具体数据内容会被转换（render渲染器）成符合前端需求的类型。</p>
<p>REST framework提供了<code>Renderer</code> 渲染器，用来根据请求头中的<code>Accept</code>（接收数据类型声明）来自动转换响应数据到对应格式。如果前端请求中未进行Accept声明，则会采用默认方式处理响应数据，我们可以通过配置来修改默认响应格式。【简而言之，就是Renderer能通过请求找的Accept查询出客户端支持和希望的数据类型，把视图的结果以客户端能识别的格式返回】</p>
<p>可以在<strong>rest_framework.settings.py</strong>查找所有的drf默认配置项</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="string">'DEFAULT_RENDERER_CLASSES'</span>: (  <span class="comment"># 默认响应渲染类</span></span><br><span class="line">        <span class="string">'rest_framework.renderers.JSONRenderer'</span>,  <span class="comment"># json渲染器</span></span><br><span class="line">        <span class="string">'rest_framework.renderers.BrowsableAPIRenderer'</span>,  <span class="comment"># 浏览器API渲染器</span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-1-2-1-构造方式"><a href="#1-1-2-1-构造方式" class="headerlink" title="1.1.2.1 构造方式"></a>1.1.2.1 构造方式</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Response(data, status=<span class="literal">None</span>, template_name=<span class="literal">None</span>, headers=<span class="literal">None</span>, content_type=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure>

<p><code>data</code>数据不要是render处理之后的数据，只需传递python的内建类型数据即可，REST framework会使用<code>renderer</code>渲染器处理<code>data</code>。</p>
<p><code>data</code>不能是复杂结构的数据，如Django的模型类对象，对于这样的数据我们可以使用<code>Serializer</code>序列化器序列化处理后（转为了Python字典类型）再传递给<code>data</code>参数。</p>
<p>参数说明：</p>
<ul>
<li><code>data</code>: 为响应准备的序列化处理后的数据；</li>
<li><code>status</code>: 状态码，默认200；</li>
<li><code>template_name</code>: 模板名称，如果使用<code>HTMLRenderer</code> 时需指明；</li>
<li><code>headers</code>: 用于存放响应头信息的字典；</li>
<li><code>content_type</code>: 响应数据的Content-Type，通常此参数无需传递，REST framework会根据前端所需类型数据来设置该参数。</li>
</ul>
<h3 id="1-1-2-2-常用属性"><a href="#1-1-2-2-常用属性" class="headerlink" title="1.1.2.2 常用属性"></a>1.1.2.2 常用属性</h3><h3 id="1）-data-1"><a href="#1）-data-1" class="headerlink" title="1）.data"></a>1）.data</h3><p>传给response对象的序列化后，但尚未render处理的数据</p>
<h3 id="2）-status-code"><a href="#2）-status-code" class="headerlink" title="2）.status_code"></a>2）.status_code</h3><p>状态码的数字</p>
<h3 id="3）-content"><a href="#3）-content" class="headerlink" title="3）.content"></a>3）.content</h3><p>经过render处理后的响应数据</p>
<h3 id="1-1-2-3-状态码"><a href="#1-1-2-3-状态码" class="headerlink" title="1.1.2.3 状态码"></a>1.1.2.3 状态码</h3><p>为了方便设置状态码，REST framewrok在<code>rest_framework.status</code>模块中提供了常用状态码常量。</p>
<h3 id="1）信息告知-1xx"><a href="#1）信息告知-1xx" class="headerlink" title="1）信息告知 - 1xx"></a>1）信息告知 - 1xx</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">HTTP_100_CONTINUE</span><br><span class="line">HTTP_101_SWITCHING_PROTOCOLS</span><br></pre></td></tr></table></figure>

<h3 id="2）成功-2xx"><a href="#2）成功-2xx" class="headerlink" title="2）成功 - 2xx"></a>2）成功 - 2xx</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">HTTP_200_OK</span><br><span class="line">HTTP_201_CREATED</span><br><span class="line">HTTP_202_ACCEPTED</span><br><span class="line">HTTP_203_NON_AUTHORITATIVE_INFORMATION</span><br><span class="line">HTTP_204_NO_CONTENT</span><br><span class="line">HTTP_205_RESET_CONTENT</span><br><span class="line">HTTP_206_PARTIAL_CONTENT</span><br><span class="line">HTTP_207_MULTI_STATUS</span><br></pre></td></tr></table></figure>

<h3 id="3）重定向-3xx"><a href="#3）重定向-3xx" class="headerlink" title="3）重定向 - 3xx"></a>3）重定向 - 3xx</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">HTTP_300_MULTIPLE_CHOICES</span><br><span class="line">HTTP_301_MOVED_PERMANENTLY</span><br><span class="line">HTTP_302_FOUND</span><br><span class="line">HTTP_303_SEE_OTHER</span><br><span class="line">HTTP_304_NOT_MODIFIED</span><br><span class="line">HTTP_305_USE_PROXY</span><br><span class="line">HTTP_306_RESERVED</span><br><span class="line">HTTP_307_TEMPORARY_REDIRECT</span><br></pre></td></tr></table></figure>

<h3 id="4）客户端错误-4xx"><a href="#4）客户端错误-4xx" class="headerlink" title="4）客户端错误 - 4xx"></a>4）客户端错误 - 4xx</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">HTTP_400_BAD_REQUEST</span><br><span class="line">HTTP_401_UNAUTHORIZED</span><br><span class="line">HTTP_402_PAYMENT_REQUIRED</span><br><span class="line">HTTP_403_FORBIDDEN</span><br><span class="line">HTTP_404_NOT_FOUND</span><br><span class="line">HTTP_405_METHOD_NOT_ALLOWED</span><br><span class="line">HTTP_406_NOT_ACCEPTABLE</span><br><span class="line">HTTP_407_PROXY_AUTHENTICATION_REQUIRED</span><br><span class="line">HTTP_408_REQUEST_TIMEOUT</span><br><span class="line">HTTP_409_CONFLICT</span><br><span class="line">HTTP_410_GONE</span><br><span class="line">HTTP_411_LENGTH_REQUIRED</span><br><span class="line">HTTP_412_PRECONDITION_FAILED</span><br><span class="line">HTTP_413_REQUEST_ENTITY_TOO_LARGE</span><br><span class="line">HTTP_414_REQUEST_URI_TOO_LONG</span><br><span class="line">HTTP_415_UNSUPPORTED_MEDIA_TYPE</span><br><span class="line">HTTP_416_REQUESTED_RANGE_NOT_SATISFIABLE</span><br><span class="line">HTTP_417_EXPECTATION_FAILED</span><br><span class="line">HTTP_422_UNPROCESSABLE_ENTITY</span><br><span class="line">HTTP_423_LOCKED</span><br><span class="line">HTTP_424_FAILED_DEPENDENCY</span><br><span class="line">HTTP_428_PRECONDITION_REQUIRED</span><br><span class="line">HTTP_429_TOO_MANY_REQUESTS</span><br><span class="line">HTTP_431_REQUEST_HEADER_FIELDS_TOO_LARGE</span><br><span class="line">HTTP_451_UNAVAILABLE_FOR_LEGAL_REASONS</span><br></pre></td></tr></table></figure>

<h3 id="5）服务器错误-5xx"><a href="#5）服务器错误-5xx" class="headerlink" title="5）服务器错误 - 5xx"></a>5）服务器错误 - 5xx</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">HTTP_500_INTERNAL_SERVER_ERROR</span><br><span class="line">HTTP_501_NOT_IMPLEMENTED</span><br><span class="line">HTTP_502_BAD_GATEWAY</span><br><span class="line">HTTP_503_SERVICE_UNAVAILABLE</span><br><span class="line">HTTP_504_GATEWAY_TIMEOUT</span><br><span class="line">HTTP_505_HTTP_VERSION_NOT_SUPPORTED</span><br><span class="line">HTTP_507_INSUFFICIENT_STORAGE</span><br><span class="line">HTTP_511_NETWORK_AUTHENTICATION_REQUIRED</span><br></pre></td></tr></table></figure>

<p>为了方便演示，所以视图里面的内容知识，我们另外创建一个子应用来展示</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python manage.py startapp demo</span><br></pre></td></tr></table></figure>

<p>注册子应用</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">'django.contrib.admin'</span>,</span><br><span class="line">    <span class="string">'django.contrib.auth'</span>,</span><br><span class="line">    <span class="string">'django.contrib.contenttypes'</span>,</span><br><span class="line">    <span class="string">'django.contrib.sessions'</span>,</span><br><span class="line">    <span class="string">'django.contrib.messages'</span>,</span><br><span class="line">    <span class="string">'django.contrib.staticfiles'</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 注册 rest_framework　的子应用</span></span><br><span class="line">    <span class="string">'rest_framework'</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">'students'</span>,</span><br><span class="line">    <span class="string">'sers'</span>,</span><br><span class="line">    <span class="string">'unsers'</span>,</span><br><span class="line">    <span class="string">'homework'</span>,</span><br><span class="line">    <span class="string">'req'</span>,     <span class="comment"># 请求与响应</span></span><br><span class="line">    <span class="string">'demo'</span>,     <span class="comment"># 视图类的学习</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>注册路由，</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path,include</span><br><span class="line"><span class="comment"># 新版的django把url拆分成了2个路由函数</span></span><br><span class="line"><span class="comment"># django.urls.path 专门编写字符串路由</span></span><br><span class="line"><span class="comment"># django.urls.re_path 专门编写正则路由</span></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'admin/'</span>, admin.site.urls),</span><br><span class="line">    path(<span class="string">'students/'</span>, include(<span class="string">"students.urls"</span>)),</span><br><span class="line">    path(<span class="string">'sers/'</span>, include(<span class="string">"sers.urls"</span>)),</span><br><span class="line">    path(<span class="string">'unsers/'</span>, include(<span class="string">"unsers.urls"</span>)),</span><br><span class="line">    path(<span class="string">'req/'</span>, include(<span class="string">"req.urls"</span>)),</span><br><span class="line">    path(<span class="string">"demo/"</span>,include(<span class="string">"demo.urls"</span>)),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>Django Rest_Framework</tag>
      </tags>
  </entry>
  <entry>
    <title>[序列化器-Serializer]</title>
    <url>/2020/04/22/%E5%BA%8F%E5%88%97%E5%8C%96%E5%99%A8-Serializer/</url>
    <content><![CDATA[<h1 id="7-序列化器-Serializer"><a href="#7-序列化器-Serializer" class="headerlink" title="7. 序列化器-Serializer"></a>7. 序列化器-Serializer</h1><p>作用：</p>
<ol>
<li>序列化,序列化器会把模型对象转换成字典,将来提供给视图经过response以后变成json字符串</li>
<li>反序列化,把客户端发送过来的数据,经过视图调用request以后变成python字典,序列化器可以把字典转成模型</li>
<li>反序列化,完成数据校验功能和操作数据库</li>
</ol>
<h2 id="7-1-定义序列化器"><a href="#7-1-定义序列化器" class="headerlink" title="7.1 定义序列化器"></a>7.1 定义序列化器</h2><p>Django REST framework中的Serializer使用类来定义，须继承自rest_framework.serializers.Serializer。</p>
<p>接下来，为了方便演示序列化器的使用，我们另外创建一个新的子应用sers</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python manage.py startapp sers</span><br></pre></td></tr></table></figure>

<p>先注册子应用到项目中，settings.py，代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">'django.contrib.admin'</span>,</span><br><span class="line">    <span class="string">'django.contrib.auth'</span>,</span><br><span class="line">    <span class="string">'django.contrib.contenttypes'</span>,</span><br><span class="line">    <span class="string">'django.contrib.sessions'</span>,</span><br><span class="line">    <span class="string">'django.contrib.messages'</span>,</span><br><span class="line">    <span class="string">'django.contrib.staticfiles'</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">'rest_framework'</span>, <span class="comment"># 把drf框架注册到django项目中</span></span><br><span class="line"></span><br><span class="line">    <span class="string">'students'</span>, <span class="comment"># 注册子应用</span></span><br><span class="line">    <span class="string">'sers'</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>因为我们已有了一个数据库模型类students/Student，我们直接在接下来的演示中使用这个模型。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="comment"># 模型字段</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">100</span>,verbose_name=<span class="string">"姓名"</span>)</span><br><span class="line">    sex = models.BooleanField(default=<span class="number">1</span>,verbose_name=<span class="string">"性别"</span>)</span><br><span class="line">    age = models.IntegerField(verbose_name=<span class="string">"年龄"</span>)</span><br><span class="line">    class_number = models.CharField(max_length=<span class="number">5</span>,verbose_name=<span class="string">"班级编号"</span>)</span><br><span class="line">    description = models.TextField(max_length=<span class="number">1000</span>,verbose_name=<span class="string">"个性签名"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        db_table=<span class="string">"tb_student"</span></span><br><span class="line">        verbose_name = <span class="string">"学生"</span></span><br><span class="line">        verbose_name_plural = verbose_name</span><br></pre></td></tr></table></figure>

<p>我们想为这个模型类提供一个序列化器，可以命名为<code>StudentSerializer</code>，</p>
<p>我们都会把序列化器代码保存到当前子应用下的serializers.py模块中，</p>
<p>可以定义如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"></span><br><span class="line"><span class="comment"># 声明序列化器，所有的序列化器都要直接或者间接继承于 Serializer</span></span><br><span class="line"><span class="comment"># 其中，ModelSerializer是Serializer的子类，ModelSerializer在Serializer的基础上进行了代码简化</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentSerializer</span><span class="params">(serializers.Serializer)</span>:</span></span><br><span class="line">    <span class="string">"""学生信息序列化器"""</span></span><br><span class="line">    <span class="comment"># 1. 需要进行数据转换的字段</span></span><br><span class="line">    id = serializers.IntegerField()</span><br><span class="line">    name = serializers.CharField()</span><br><span class="line">    age = serializers.IntegerField()</span><br><span class="line">    sex = serializers.BooleanField()</span><br><span class="line">    description = serializers.CharField()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2. 如果序列化器集成的是ModelSerializer，则需要声明调用的模型信息</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 3. 验证代码</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 4. 编写添加和更新模型的代码</span></span><br></pre></td></tr></table></figure>

<p><strong>注意：serializer不是只能为数据库模型类定义，也可以为非数据库模型类的数据定义。</strong>serializer是独立于数据库之外的存在。</p>
<p><strong>常用字段类型</strong>：</p>
<table>
<thead>
<tr>
<th>字段</th>
<th>字段构造方式</th>
</tr>
</thead>
<tbody><tr>
<td><strong>BooleanField</strong></td>
<td>BooleanField()</td>
</tr>
<tr>
<td><strong>NullBooleanField</strong></td>
<td>NullBooleanField()</td>
</tr>
<tr>
<td><strong>CharField</strong></td>
<td>CharField(max_length=None, min_length=None, allow_blank=False, trim_whitespace=True)</td>
</tr>
<tr>
<td><strong>EmailField</strong></td>
<td>EmailField(max_length=None, min_length=None, allow_blank=False)</td>
</tr>
<tr>
<td><strong>RegexField</strong></td>
<td>RegexField(regex, max_length=None, min_length=None, allow_blank=False)</td>
</tr>
<tr>
<td><strong>SlugField</strong></td>
<td>SlugField(max<em>length=50, min_length=None, allow_blank=False) 正则字段，验证正则模式 [a-zA-Z0-9</em>-]+</td>
</tr>
<tr>
<td><strong>URLField</strong></td>
<td>URLField(max_length=200, min_length=None, allow_blank=False)</td>
</tr>
<tr>
<td><strong>UUIDField</strong></td>
<td>UUIDField(format=’hex_verbose’)  format:  1) <code>&#39;hex_verbose&#39;</code> 如<code>&quot;5ce0e9a5-5ffa-654b-cee0-1238041fb31a&quot;</code>  2） <code>&#39;hex&#39;</code> 如 <code>&quot;5ce0e9a55ffa654bcee01238041fb31a&quot;</code>  3）<code>&#39;int&#39;</code> - 如: <code>&quot;123456789012312313134124512351145145114&quot;</code>  4）<code>&#39;urn&#39;</code> 如: <code>&quot;urn:uuid:5ce0e9a5-5ffa-654b-cee0-1238041fb31a&quot;</code></td>
</tr>
<tr>
<td><strong>IPAddressField</strong></td>
<td>IPAddressField(protocol=’both’, unpack_ipv4=False, **options)</td>
</tr>
<tr>
<td><strong>IntegerField</strong></td>
<td>IntegerField(max_value=None, min_value=None)</td>
</tr>
<tr>
<td><strong>FloatField</strong></td>
<td>FloatField(max_value=None, min_value=None)</td>
</tr>
<tr>
<td><strong>DecimalField</strong></td>
<td>DecimalField(max_digits, decimal_places, coerce_to_string=None, max_value=None, min_value=None) max_digits: 最多位数 decimal_palces: 小数点位置</td>
</tr>
<tr>
<td><strong>DateTimeField</strong></td>
<td>DateTimeField(format=api_settings.DATETIME_FORMAT, input_formats=None)</td>
</tr>
<tr>
<td><strong>DateField</strong></td>
<td>DateField(format=api_settings.DATE_FORMAT, input_formats=None)</td>
</tr>
<tr>
<td><strong>TimeField</strong></td>
<td>TimeField(format=api_settings.TIME_FORMAT, input_formats=None)</td>
</tr>
<tr>
<td><strong>DurationField</strong></td>
<td>DurationField()</td>
</tr>
<tr>
<td><strong>ChoiceField</strong></td>
<td>ChoiceField(choices) choices与Django的用法相同</td>
</tr>
<tr>
<td><strong>MultipleChoiceField</strong></td>
<td>MultipleChoiceField(choices)</td>
</tr>
<tr>
<td><strong>FileField</strong></td>
<td>FileField(max_length=None, allow_empty_file=False, use_url=UPLOADED_FILES_USE_URL)</td>
</tr>
<tr>
<td><strong>ImageField</strong></td>
<td>ImageField(max_length=None, allow_empty_file=False, use_url=UPLOADED_FILES_USE_URL)</td>
</tr>
<tr>
<td><strong>ListField</strong></td>
<td>ListField(child=, min_length=None, max_length=None)</td>
</tr>
<tr>
<td><strong>DictField</strong></td>
<td>DictField(child=)</td>
</tr>
</tbody></table>
<p><strong>选项参数：</strong></p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td><strong>max_length</strong></td>
<td>最大长度[适用于字符串，列表，文件]</td>
</tr>
<tr>
<td><strong>min_lenght</strong></td>
<td>最小长度[适用于字符串，列表，文件]</td>
</tr>
<tr>
<td><strong>allow_blank</strong></td>
<td>是否允许数据的值为空，如果使用这个选项，则前端传递过来的数据必须有这个属性。</td>
</tr>
<tr>
<td><strong>trim_whitespace</strong></td>
<td>是否截断空白字符</td>
</tr>
<tr>
<td><strong>max_value</strong></td>
<td>【数值】最小值</td>
</tr>
<tr>
<td><strong>min_value</strong></td>
<td>【数值】最大值</td>
</tr>
</tbody></table>
<p>通用参数：</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><strong>read_only</strong></td>
<td>表明该字段仅用于序列化输出，默认False</td>
</tr>
<tr>
<td><strong>write_only</strong></td>
<td>表明该字段仅用于反序列化输入，默认False</td>
</tr>
<tr>
<td><strong>required</strong></td>
<td>表明该字段在反序列化时必须输入，默认True</td>
</tr>
<tr>
<td><strong>default</strong></td>
<td>反序列化时使用的默认值</td>
</tr>
<tr>
<td><strong>allow_null</strong></td>
<td>表明该字段是否允许传入None，默认False</td>
</tr>
<tr>
<td><strong>validators</strong></td>
<td>该字段使用的验证器</td>
</tr>
<tr>
<td><strong>error_messages</strong></td>
<td>包含错误编号与错误信息的字典</td>
</tr>
<tr>
<td><strong>label</strong></td>
<td>用于HTML展示API页面时，显示的字段名称</td>
</tr>
<tr>
<td><strong>help_text</strong></td>
<td>用于HTML展示API页面时，显示的字段帮助提示信息</td>
</tr>
</tbody></table>
<h2 id="7-2-创建Serializer对象"><a href="#7-2-创建Serializer对象" class="headerlink" title="7.2 创建Serializer对象"></a>7.2 创建Serializer对象</h2><p>定义好Serializer类后，就可以创建Serializer对象了。</p>
<p>Serializer的构造方法为：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Serializer(instance=<span class="literal">None</span>, data=empty, **kwarg)</span><br></pre></td></tr></table></figure>

<p>说明：</p>
<p>1）用于序列化时，将模型类对象传入<strong>instance</strong>参数</p>
<p>2）用于反序列化时，将要被反序列化的数据传入<strong>data</strong>参数</p>
<p>3）除了instance和data参数外，在构造Serializer对象时，还可通过<strong>context</strong>参数额外添加数据，如</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">serializer = StudentSerializer(student, context=&#123;<span class="string">'request'</span>: request&#125;,many=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure>

<p><strong>通过context参数附加的数据，可以通过Serializer对象的self.context属性获取。</strong></p>
<ol>
<li>使用序列化器的时候一定要注意，序列化器声明了以后，不会自动执行，需要我们在视图中进行调用才可以。</li>
<li>序列化器无法直接接收客户端的请求数据，需要我们在视图中创建序列化器对象时把使用的数据传递过来。</li>
<li>序列化器的字段声明类似于我们前面使用过的表单系统。</li>
<li>开发restful api时，序列化器会帮我们把模型数据转换成字典.</li>
<li>drf提供的视图会帮我们把字典转换成json,或者把客户端发送过来的数据转换字典.</li>
</ol>
<h2 id="7-3-序列化器的使用"><a href="#7-3-序列化器的使用" class="headerlink" title="7.3 序列化器的使用"></a>7.3 序列化器的使用</h2><p>序列化器的使用分两个阶段：</p>
<ol>
<li>在客户端请求时，使用序列化器可以完成对数据的反序列化。</li>
<li>在服务器响应时，使用序列化器可以完成对数据的序列化。</li>
</ol>
<h3 id="7-3-1-序列化"><a href="#7-3-1-序列化" class="headerlink" title="7.3.1 序列化"></a>7.3.1 序列化</h3><h3 id="7-3-1-1-基本使用"><a href="#7-3-1-1-基本使用" class="headerlink" title="7.3.1.1 基本使用"></a>7.3.1.1 基本使用</h3><p>1） 先查询出一个学生对象</p>
<p>视图中获取模型对象，代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> students.models <span class="keyword">import</span> Student</span><br><span class="line"></span><br><span class="line">student = Student.objects.get(pk=<span class="number">3</span>)</span><br></pre></td></tr></table></figure>

<p>2） 构造序列化器对象</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> .serializers <span class="keyword">import</span> StudentSerializer</span><br><span class="line"></span><br><span class="line">serializer = StudentSerializer(instance=student)</span><br></pre></td></tr></table></figure>

<p>3）获取序列化数据</p>
<p>通过data属性可以获取序列化后的数据</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">serializer.data</span><br><span class="line"><span class="comment"># &#123;'id': 4, 'name': '小张', 'age': 18, 'sex': True, 'description': '猴赛雷'&#125;</span></span><br></pre></td></tr></table></figure>

<p>完整视图代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student2APIView</span><span class="params">(View)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self,request)</span>:</span></span><br><span class="line">        <span class="string">"""返回一个学生信息"""</span></span><br><span class="line">        <span class="comment"># 读取模型对象</span></span><br><span class="line">        student = Student.objects.get(pk=<span class="number">1</span>)</span><br><span class="line">        <span class="comment"># 实例化序列化器</span></span><br><span class="line">        serializer = StudentSerializer(instance=student)</span><br><span class="line">        print( serializer.data )</span><br><span class="line">        <span class="string">"""打印效果：</span></span><br><span class="line"><span class="string">        &#123;'id': 1, 'name': '张三', 'sex': True, 'age': 18&#125;</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">return</span> JsonResponse(serializer.data)</span><br></pre></td></tr></table></figure>

<p>4）如果要被序列化的是包含多条数据的查询集QuerySet，可以通过添加<strong>many=True</strong>参数补充说明</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">目前我们先学习序列化器，所以我们还是使用原来django内置的视图类和路由。</span></span><br><span class="line"><span class="string">使用序列化器对数据进行序列化器，一般用于返回数据给客户端。</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">from</span> django.views <span class="keyword">import</span> View</span><br><span class="line"><span class="keyword">from</span> .serializers <span class="keyword">import</span> StudentSerializer</span><br><span class="line"><span class="keyword">from</span> students.models <span class="keyword">import</span> Student</span><br><span class="line"><span class="keyword">from</span> django.http.response <span class="keyword">import</span> JsonResponse</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student1APIView</span><span class="params">(View)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self,request)</span>:</span></span><br><span class="line">        <span class="string">"""返回所有学生给客户端"""</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        序列化器对象初始化有３个参数:</span></span><br><span class="line"><span class="string">        1. instance，模型对象或者模型对象组成的列表，用于对数据进行序列化，把模型转换成字典</span></span><br><span class="line"><span class="string">        2. data，字典，用于对数据进行反序列化，把数据进行验证和保存到数据库</span></span><br><span class="line"><span class="string">        3. context，字典，用于把路由或者视图的自定义参数传递到序列化器里面使用</span></span><br><span class="line"><span class="string">                 context将来作为序列化器对象的子属性</span></span><br><span class="line"><span class="string">        4. many，当序列化器进行序列化时，如果模型有多个，则many必须为True</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        student_list = Student.objects.all()</span><br><span class="line">        serializer = StudentSerializer(instance=student_list, many=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">        print(<span class="string">'student_list===&gt;'</span>,student_list)</span><br><span class="line">        print(<span class="string">'serializer===&gt;'</span>, serializer)</span><br><span class="line">        print(<span class="string">'转换的结果===&gt;'</span>, serializer.data)</span><br><span class="line">        <span class="string">"""打印效果：</span></span><br><span class="line"><span class="string">        [</span></span><br><span class="line"><span class="string">            OrderedDict([('name', '张三'), ('sex', True), ('age', 18), ('class_null', '3011')]), </span></span><br><span class="line"><span class="string">            OrderedDict([('name', '张三'), ('sex', True), ('age', 18), ('class_null', '309')]), </span></span><br><span class="line"><span class="string">            OrderedDict([('name', '张三'), ('sex', True), ('age', 18), ('class_null', '309')]), </span></span><br><span class="line"><span class="string">            ....    </span></span><br><span class="line"><span class="string">        ]</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        说明：</span></span><br><span class="line"><span class="string">        OrderedDict是python内置的高级数据类型，表示有序字典，因为普通数据类型中的字典是无序的.</span></span><br><span class="line"><span class="string">        有序字典的成员读取方式，和无序字典一样</span></span><br><span class="line"><span class="string">        导入路径：</span></span><br><span class="line"><span class="string">        from collections import OrderedDict</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># jsonResponse的第一个参数如果是列表则必须声明safe=False，否则报错如下：</span></span><br><span class="line">        <span class="comment"># In order to allow non-dict objects to be serialized set the safe parameter to False.</span></span><br><span class="line">        <span class="keyword">return</span> JsonResponse(serializer.data, safe=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure>

<h3 id="7-3-2-反序列化"><a href="#7-3-2-反序列化" class="headerlink" title="7.3.2 反序列化"></a>7.3.2 反序列化</h3><h3 id="7-3-2-1-数据验证"><a href="#7-3-2-1-数据验证" class="headerlink" title="7.3.2.1 数据验证"></a>7.3.2.1 数据验证</h3><p>开发中，用户的数据都是不可信任的。</p>
<p>使用序列化器进行反序列化时，需要对数据进行验证后，才能获取验证成功的数据或保存成模型类对象。</p>
<p>在获取反序列化的客户端数据前，必须在视图中调用序列化对象的<strong>is_valid()</strong>方法，序列化器内部是在<strong>is_valid</strong>方法内部调用验证选项和验证方法进行验证，验证成功返回True，否则返回False。</p>
<p>验证失败，可以通过序列化器对象的<strong>errors</strong>属性获取错误信息，返回字典，包含了字段和字段的错误提示。如果是非字段错误，可以通过修改REST framework配置中的<strong>NON_FIELD_ERRORS_KEY</strong>来控制错误字典中的键名。</p>
<p>验证成功，可以通过序列化器对象的<strong>validated_data</strong>属性获取数据。</p>
<p>在定义序列化器时，指明每个字段的序列化类型和选项参数，本身就是一种验证行为。</p>
<p>为了方便演示，我们这里采用另一个图书模型来完成反序列化的学习。当然也创建一个新的子应用unsers。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python manage.py startapp unsers</span><br></pre></td></tr></table></figure>

<p>注册子应用，setting.py注册子应用，代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">'django.contrib.admin'</span>,</span><br><span class="line">    <span class="string">'django.contrib.auth'</span>,</span><br><span class="line">    <span class="string">'django.contrib.contenttypes'</span>,</span><br><span class="line">    <span class="string">'django.contrib.sessions'</span>,</span><br><span class="line">    <span class="string">'django.contrib.messages'</span>,</span><br><span class="line">    <span class="string">'django.contrib.staticfiles'</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">'rest_framework'</span>, <span class="comment"># 把drf框架注册到django项目中</span></span><br><span class="line"></span><br><span class="line">    <span class="string">'students'</span>, <span class="comment"># 注册子应用</span></span><br><span class="line">    <span class="string">'sers'</span>,     <span class="comment"># 演示序列化</span></span><br><span class="line">    <span class="string">'unsers'</span>,     <span class="comment"># 演示反序列化</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>注意：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">接下来的内容涉及到postman post提交数据，所以在此时我们没有学习到drf视图方法时，我i们把settings.py中的中间件的csrf关闭.</span><br><span class="line"></span><br><span class="line">MIDDLEWARE = [</span><br><span class="line">    <span class="string">'django.middleware.security.SecurityMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.contrib.sessions.middleware.SessionMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.middleware.common.CommonMiddleware'</span>,</span><br><span class="line">    <span class="comment"># 'django.middleware.csrf.CsrfViewMiddleware',</span></span><br><span class="line">    <span class="string">'django.contrib.auth.middleware.AuthenticationMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.contrib.messages.middleware.MessageMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.middleware.clickjacking.XFrameOptionsMiddleware'</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>模型代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your models here.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookInfo</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="string">"""图书信息"""</span></span><br><span class="line">    title = models.CharField(max_length=<span class="number">20</span>, verbose_name=<span class="string">'标题'</span>)</span><br><span class="line">    pub_date = models.DateField(verbose_name=<span class="string">'发布日期'</span>)</span><br><span class="line">    image = models.ImageField(verbose_name=<span class="string">'图书封面'</span>)</span><br><span class="line">    price = models.DecimalField(max_digits=<span class="number">8</span>, decimal_places=<span class="number">2</span>, verbose_name=<span class="string">"价格"</span>)</span><br><span class="line">    read = models.IntegerField(verbose_name=<span class="string">'阅读量'</span>)</span><br><span class="line">    comment = models.IntegerField(verbose_name=<span class="string">'评论量'</span>)</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        <span class="comment"># db_table = "表名"</span></span><br><span class="line">        db_table = <span class="string">"tb_book_info"</span></span><br><span class="line">        verbose_name = <span class="string">"图书"</span></span><br><span class="line">        verbose_name_plural = verbose_name</span><br></pre></td></tr></table></figure>

<p>注意：因为当前模型中， 设置到图片上传处理，所以我们需要安装<code>PIL</code>库</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip install Pillow</span><br></pre></td></tr></table></figure>

<p>数据迁移</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python manage.py makemigrationspython manage.py migrate</span><br></pre></td></tr></table></figure>

<p>经过上面的准备工作，我们接下来就可以给图书信息增加图书的功能，那么我们需要对来自客户端的数据进行处理，例如，验证和保存到数据库中，此时，我们就可以使用序列化器的反序列化器，接下来，我们就可以参考之前定义学生信息的序列化器那样，定义一个图书的序列化器，当然，不同的是，接下来的序列化器主要用于反序列化器阶段，在unsers子应用，创建serializers.py，代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookInfoSerializer</span><span class="params">(serializers.Serializer)</span>:</span></span><br><span class="line">    <span class="comment"># 这里声明的字段用于进行反序列化器</span></span><br><span class="line">    <span class="comment"># 字段名 = serializers.字段类型(验证选项)</span></span><br><span class="line">    title = serializers.CharField(max_length=<span class="number">20</span>, label=<span class="string">"标题"</span>, help_text=<span class="string">"标题"</span>)</span><br><span class="line">    <span class="comment"># required=True 当前字段必填</span></span><br><span class="line">    pub_date = serializers.DateField(required=<span class="literal">True</span>,label=<span class="string">"发布日期"</span>, help_text=<span class="string">"发布日期"</span>)</span><br><span class="line">    image = serializers.ImageField(max_length=<span class="number">3</span>*<span class="number">1024</span>*<span class="number">1024</span>, label=<span class="string">"图书封面"</span>, help_text=<span class="string">"图书封面"</span>)</span><br><span class="line">    price = serializers.DecimalField(max_digits=<span class="number">8</span>, decimal_places=<span class="number">2</span>, required=<span class="literal">True</span>, label=<span class="string">"价格"</span>, help_text=<span class="string">"价格"</span>)</span><br><span class="line">    read  = serializers.IntegerField(min_value=<span class="number">0</span>, default=<span class="number">0</span>, label=<span class="string">"阅读量"</span>, help_text=<span class="string">"阅读量"</span>)</span><br><span class="line">    comment = serializers.IntegerField(min_value=<span class="number">0</span>, default=<span class="number">0</span>, label=<span class="string">"评论量"</span>, help_text=<span class="string">"评论量"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 关于继承数据库选项</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 验证部分的代码</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 数据库</span></span><br></pre></td></tr></table></figure>

<p>通过构造序列化器对象，并将要反序列化的数据传递给data构造参数，进而进行验证</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"><span class="keyword">from</span> django.views <span class="keyword">import</span> View</span><br><span class="line"><span class="keyword">from</span> django.http.response <span class="keyword">import</span> HttpResponse</span><br><span class="line"><span class="keyword">from</span> .serializers <span class="keyword">import</span> BookInfoSerializer</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookInfoView</span><span class="params">(View)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self,request)</span>:</span></span><br><span class="line">        <span class="string">"""模拟客户端发送过来的数据"""</span></span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">"title"</span>:<span class="string">"西厢记"</span>,</span><br><span class="line">            <span class="string">"pub_date"</span>:<span class="string">"1980-10-10"</span>,</span><br><span class="line">            <span class="string">"price"</span>: <span class="number">19.80</span>,</span><br><span class="line">            <span class="string">"read"</span>: <span class="number">100</span>,</span><br><span class="line">            <span class="string">"comment"</span>: <span class="number">-1</span>,</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 对上面的数据进行反序列化器处理</span></span><br><span class="line">        <span class="comment"># 1. 初始化，填写data属性</span></span><br><span class="line">        serializer = BookInfoSerializer(data=data)</span><br><span class="line">        <span class="comment"># 2. 调用序列化器提供的is_valid方法进行验证</span></span><br><span class="line">        <span class="comment"># raise_exception=True 表示终断程序，直接抛出错误</span></span><br><span class="line">        ret = serializer.is_valid(raise_exception=<span class="literal">True</span>)</span><br><span class="line">        print(ret) <span class="comment"># is_valid的方法值就是验证结果，只会是True/False</span></span><br><span class="line">        <span class="keyword">if</span> ret:</span><br><span class="line">            <span class="comment"># 3.1 验证通过后，可以通过validated_data得到数据</span></span><br><span class="line">            print(<span class="string">"验证成功，ret=%s"</span> % ret)</span><br><span class="line">            print(serializer.validated_data)  <span class="comment"># 验证处理后的数据</span></span><br><span class="line">            <span class="string">"""打印结果：</span></span><br><span class="line"><span class="string">            OrderedDict([('title', '西厢记'), ('pub_date', datetime.date(1980, 10, 10)), ('price', Decimal('19.80')), ('read', 100), ('comment', 15)])</span></span><br><span class="line"><span class="string">            """</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"验证失败，ret=%s"</span> % ret)</span><br><span class="line">            <span class="comment"># 3.1 验证没通过，可以通过</span></span><br><span class="line">            print( serializer.errors )</span><br><span class="line">            <span class="string">"""打印结果：</span></span><br><span class="line"><span class="string">            &#123;'comment': [ErrorDetail(string='Ensure this value is greater than or equal to 0.', code='min_value')]&#125;</span></span><br><span class="line"><span class="string">            """</span></span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">"ok"</span>)</span><br></pre></td></tr></table></figure>

<p>is_valid()方法还可以在验证失败时抛出异常serializers.ValidationError，可以通过传递<strong>raise_exception=True</strong>参数开启，REST framework接收到此异常，会向前端返回HTTP 400 Bad Request响应。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Return a 400 response if the data was invalid.</span></span><br><span class="line">serializer.is_valid(raise_exception=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>

<p>如果觉得这些还不够，需要再补充定义验证行为，可以使用以下三种方法：</p>
<h3 id="1-validate-字段名"><a href="#1-validate-字段名" class="headerlink" title="1) validate_字段名"></a>1) validate_字段名</h3><p>对<code>&lt;field_name&gt;</code>字段进行验证，如</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookInfoSerializer</span><span class="params">(serializers.Serializer)</span>:</span></span><br><span class="line">    <span class="string">"""图书数据序列化器"""</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 单个字段的验证，方法名必须： validate_&lt;字段名&gt;(self,data)    # data 就是当前字段中客户端提交的数据</span></span><br><span class="line">    <span class="comment"># validate_price 会被is_valid调用</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">validate_price</span><span class="params">(self, data)</span>:</span></span><br><span class="line">        <span class="string">""""""</span></span><br><span class="line">        <span class="keyword">if</span> data &lt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">raise</span> serializers.ValidationError(<span class="string">"对不起，价格不能低于0元"</span>)</span><br><span class="line">        <span class="comment"># 验证通过以后，必须要返回验证的结果数据，否则序列化器的validated_data无法得到当前字段的结果</span></span><br><span class="line">        <span class="keyword">return</span> data</span><br></pre></td></tr></table></figure>

<p>把前面的例子的price改为-19.80，运行就可以测试了。</p>
<h3 id="2-validate"><a href="#2-validate" class="headerlink" title="2) validate"></a>2) validate</h3><p>在序列化器中需要同时对多个字段进行比较验证时，可以定义validate方法来验证，如</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookInfoSerializer</span><span class="params">(serializers.Serializer)</span>:</span></span><br><span class="line">    <span class="string">"""图书数据序列化器"""</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 多个字段的验证，必须方法名叫 "validate"</span></span><br><span class="line">    <span class="comment"># data 表示客户端发送过来的所有数据，字典格式</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">validate</span><span class="params">(self, data)</span>:</span></span><br><span class="line">        <span class="comment"># 判断图书的阅读量不能低于评论量</span></span><br><span class="line">        read = data.get(<span class="string">"read"</span>)</span><br><span class="line">        comment = data.get(<span class="string">"comment"</span>)</span><br><span class="line">        <span class="keyword">if</span> read &lt; comment:</span><br><span class="line">            <span class="keyword">raise</span> serializers.ValidationError(<span class="string">"对不起，阅读量不能低于评论量"</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> data</span><br></pre></td></tr></table></figure>

<p>运行之前的例子，把read改为1，comment改为100，访问测试。</p>
<h3 id="3-validators验证器"><a href="#3-validators验证器" class="headerlink" title="3) validators验证器"></a>3) validators验证器</h3><p>验证器类似于验证方法，但是验证方法只属于当前序列化器，如果有多个序列化器共用同样的验证功能，则可以把验证代码分离到序列化器外部，作为一个普通函数，由validators加载到序列化器中使用。</p>
<p>在字段中添加validators选项参数，也可以补充验证行为，如</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以把验证函数进行多次使用，提供不用的字段或者不同的序列化器里面使用</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">about_django</span><span class="params">(data)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">"django"</span> <span class="keyword">in</span> data:</span><br><span class="line">        <span class="keyword">raise</span> serializers.ValidationError(<span class="string">"对不起，图书标题不能出现关键字django"</span>)</span><br><span class="line">    <span class="comment"># 返回验证以后的数据</span></span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookInfoSerializer</span><span class="params">(serializers.Serializer)</span>:</span></span><br><span class="line">    <span class="comment"># 这里声明的字段用于进行反序列化器</span></span><br><span class="line">    <span class="comment"># 字段名 = serializers.字段类型(验证选项)</span></span><br><span class="line">    title = serializers.CharField(max_length=<span class="number">20</span>,validators=[about_django], label=<span class="string">"标题"</span>, help_text=<span class="string">"标题"</span>)</span><br><span class="line">    <span class="comment"># required=True 当前字段必填</span></span><br><span class="line">    pub_date = serializers.DateField(required=<span class="literal">True</span>, label=<span class="string">"发布日期"</span>, help_text=<span class="string">"发布日期"</span>)</span><br><span class="line">    <span class="comment"># max_length 文件的大小</span></span><br><span class="line">    <span class="comment"># allow_null=True 允许传递的image数据为None</span></span><br><span class="line">    image = serializers.ImageField(required=<span class="literal">False</span>, allow_null=<span class="literal">True</span>, max_length=<span class="number">3</span>*<span class="number">1024</span>*<span class="number">1024</span>, label=<span class="string">"图书封面"</span>, help_text=<span class="string">"图书封面"</span>)</span><br><span class="line">    price = serializers.DecimalField(max_digits=<span class="number">8</span>, decimal_places=<span class="number">2</span>, required=<span class="literal">True</span>, label=<span class="string">"价格"</span>, help_text=<span class="string">"价格"</span>)</span><br><span class="line">    <span class="comment"># min_value 数值大小</span></span><br><span class="line">    <span class="comment"># default 设置默认值</span></span><br><span class="line">    read  = serializers.IntegerField(min_value=<span class="number">0</span>, default=<span class="number">0</span>, label=<span class="string">"阅读量"</span>, help_text=<span class="string">"阅读量"</span>)</span><br><span class="line">    comment = serializers.IntegerField(min_value=<span class="number">0</span>, default=<span class="number">0</span>, label=<span class="string">"评论量"</span>, help_text=<span class="string">"评论量"</span>)</span><br></pre></td></tr></table></figure>

<p>把前面的例子修改成title=“西厢记django版本”，然后运行测试</p>
<p>视图代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"><span class="keyword">from</span> django.views <span class="keyword">import</span> View</span><br><span class="line"><span class="keyword">from</span> django.http.response <span class="keyword">import</span> HttpResponse</span><br><span class="line"><span class="keyword">from</span> .serializers <span class="keyword">import</span> BookInfoSerializer</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookInfoView</span><span class="params">(View)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self,request)</span>:</span></span><br><span class="line">        <span class="string">"""模拟客户端发送过来的数据"""</span></span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">"title"</span>:<span class="string">"西厢记django版本"</span>,</span><br><span class="line">            <span class="string">"pub_date"</span>:<span class="string">"1980-10-10"</span>,</span><br><span class="line">            <span class="string">"price"</span>: <span class="number">19.80</span>,</span><br><span class="line">            <span class="string">"read"</span>: <span class="number">10000</span>,</span><br><span class="line">            <span class="string">"comment"</span>: <span class="number">100</span>,</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 对上面的数据进行反序列化器处理</span></span><br><span class="line">        <span class="comment"># 1. 初始化，填写data属性</span></span><br><span class="line">        serializer = BookInfoSerializer(data=data)</span><br><span class="line">        <span class="comment"># 2. 调用序列化器提供的is_valid方法进行验证</span></span><br><span class="line">        <span class="comment"># raise_exception=True 表示终断程序，直接抛出错误</span></span><br><span class="line">        ret = serializer.is_valid(raise_exception=<span class="literal">True</span>)</span><br><span class="line">        print(ret) <span class="comment"># is_valid的方法值就是验证结果，只会是True/False</span></span><br><span class="line">        <span class="keyword">if</span> ret:</span><br><span class="line">            <span class="comment"># 3.1 验证通过后，可以通过validated_data得到数据</span></span><br><span class="line">            print(<span class="string">"验证成功，ret=%s"</span> % ret)</span><br><span class="line">            print(serializer.validated_data)  <span class="comment"># 验证处理后的数据</span></span><br><span class="line">            <span class="string">"""打印结果：</span></span><br><span class="line"><span class="string">            OrderedDict([('title', '西厢记'), ('pub_date', datetime.date(1980, 10, 10)), ('price', Decimal('19.80')), ('read', 100), ('comment', 15)])</span></span><br><span class="line"><span class="string">            """</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"验证失败，ret=%s"</span> % ret)</span><br><span class="line">            <span class="comment"># 3.1 验证没通过，可以通过</span></span><br><span class="line">            print( serializer.errors )</span><br><span class="line">            <span class="string">"""打印结果：</span></span><br><span class="line"><span class="string">            &#123;'comment': [ErrorDetail(string='Ensure this value is greater than or equal to 0.', code='min_value')]&#125;</span></span><br><span class="line"><span class="string">            """</span></span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">"ok"</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">is_valid实际上内部执行了三种不同的验证方式：</span><br><span class="line"><span class="number">1.</span> 先执行了字段内置的验证选项</span><br><span class="line"><span class="number">2.</span> 在执行了validators自定义选项</span><br><span class="line"><span class="number">3.</span> 最后执行了validate自定义验证方法[包含了validate_&lt;字段&gt;, validate]</span><br></pre></td></tr></table></figure>

<h3 id="7-3-2-2-数据保存"><a href="#7-3-2-2-数据保存" class="headerlink" title="7.3.2.2 数据保存"></a>7.3.2.2 数据保存</h3><p>通过序列化器来完成数据的更新或者添加，把视图中对于模型中的操作代码移出视图中，放入到序列化器。</p>
<p>前面的验证数据成功后,我们可以使用序列化器来完成数据反序列化的过程.这个过程可以把数据转成模型类对象.</p>
<p>可以通过实现create()和update()两个方法来实现。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以把验证函数进行多次使用，提供不用的字段或者不同的序列化器里面使用</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">about_django</span><span class="params">(data)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">"django"</span> <span class="keyword">in</span> data:</span><br><span class="line">        <span class="keyword">raise</span> serializers.ValidationError(<span class="string">"对不起，图书标题不能出现关键字django"</span>)</span><br><span class="line">    <span class="comment"># 返回验证以后的数据</span></span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookInfoSerializer</span><span class="params">(serializers.Serializer)</span>:</span></span><br><span class="line">    <span class="comment"># 这里声明的字段用于进行反序列化器</span></span><br><span class="line">    <span class="comment"># 字段名 = serializers.字段类型(验证选项)</span></span><br><span class="line">    title = serializers.CharField(max_length=<span class="number">20</span>,validators=[about_django], label=<span class="string">"标题"</span>, help_text=<span class="string">"标题"</span>)</span><br><span class="line">    <span class="comment"># required=True 当前字段必填</span></span><br><span class="line">    pub_date = serializers.DateField(required=<span class="literal">True</span>, label=<span class="string">"发布日期"</span>, help_text=<span class="string">"发布日期"</span>)</span><br><span class="line">    <span class="comment"># max_length 文件的大小</span></span><br><span class="line">    <span class="comment"># allow_null=True 允许传递的image数据为None</span></span><br><span class="line">    image = serializers.ImageField(required=<span class="literal">False</span>, allow_null=<span class="literal">True</span>, max_length=<span class="number">3</span>*<span class="number">1024</span>*<span class="number">1024</span>, label=<span class="string">"图书封面"</span>, help_text=<span class="string">"图书封面"</span>)</span><br><span class="line">    price = serializers.DecimalField(max_digits=<span class="number">8</span>, decimal_places=<span class="number">2</span>, required=<span class="literal">True</span>, label=<span class="string">"价格"</span>, help_text=<span class="string">"价格"</span>)</span><br><span class="line">    <span class="comment"># min_value 数值大小</span></span><br><span class="line">    <span class="comment"># default 设置默认值</span></span><br><span class="line">    read  = serializers.IntegerField(min_value=<span class="number">0</span>, default=<span class="number">0</span>, label=<span class="string">"阅读量"</span>, help_text=<span class="string">"阅读量"</span>)</span><br><span class="line">    comment = serializers.IntegerField(min_value=<span class="number">0</span>, default=<span class="number">0</span>, label=<span class="string">"评论量"</span>, help_text=<span class="string">"评论量"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 关于继承数据库选项</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 自定义验证的代码</span></span><br><span class="line">    <span class="comment"># 单个字段的验证，方法名必须： validate_&lt;字段名&gt;(self,data)    # data 就是当前字段中客户端提交的数据</span></span><br><span class="line">    <span class="comment"># validate_price 会被is_valid调用</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">validate_price</span><span class="params">(self, data)</span>:</span></span><br><span class="line">        <span class="string">""""""</span></span><br><span class="line">        <span class="keyword">if</span> data &lt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">raise</span> serializers.ValidationError(<span class="string">"对不起，价格不能低于0元"</span>)</span><br><span class="line">        <span class="comment"># 验证通过以后，必须要返回验证的结果数据，否则序列化器的validated_data无法得到当前字段的结果</span></span><br><span class="line">        <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 多个字段的验证，必须方法名叫 "validate"</span></span><br><span class="line">    <span class="comment"># data 表示客户端发送过来的所有数据，字典格式</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">validate</span><span class="params">(self, data)</span>:</span></span><br><span class="line">        <span class="comment"># 判断图书的阅读量不能低于评论量</span></span><br><span class="line">        read = data.get(<span class="string">"read"</span>)</span><br><span class="line">        comment = data.get(<span class="string">"comment"</span>)</span><br><span class="line">        <span class="keyword">if</span> read &lt; comment:</span><br><span class="line">            <span class="keyword">raise</span> serializers.ValidationError(<span class="string">"对不起，阅读量不能低于评论量"</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 数据库操作</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">create</span><span class="params">(self, validated_data)</span>:</span> <span class="comment"># 这里会在调用时，由序列化器补充验证成功以后的数据进来</span></span><br><span class="line">        <span class="string">"""完成添加操作"""</span></span><br><span class="line">        print(validated_data) <span class="comment"># 字典</span></span><br><span class="line">        <span class="comment"># 导入模型</span></span><br><span class="line">        <span class="keyword">from</span> .models <span class="keyword">import</span> BookInfo</span><br><span class="line">        <span class="comment"># 添加数据</span></span><br><span class="line">        book = BookInfo.objects.create(</span><br><span class="line">            title=validated_data.get(<span class="string">"title"</span>),</span><br><span class="line">            price=validated_data.get(<span class="string">"price"</span>),</span><br><span class="line">            pub_date=validated_data.get(<span class="string">"pub_date"</span>),</span><br><span class="line">            read=validated_data.get(<span class="string">"read"</span>),</span><br><span class="line">            comment=validated_data.get(<span class="string">"comment"</span>),</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> book</span><br><span class="line"></span><br><span class="line">    <span class="comment"># instance就是要修改的模型，系统会自动从对象初始化时的instance提取过来</span></span><br><span class="line">    <span class="comment"># validated_data 就是经过验证以后的客户端提交的数据</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update</span><span class="params">(self, instance, validated_data)</span>:</span></span><br><span class="line">        <span class="string">"""更新操作"""</span></span><br><span class="line">        instance.title = validated_data.get(<span class="string">'title'</span>)</span><br><span class="line">        instance.pub_date = validated_data.get(<span class="string">'pub_date'</span>)</span><br><span class="line">        instance.comment = validated_data.get(<span class="string">'comment'</span>)</span><br><span class="line">        instance.price = validated_data.get(<span class="string">'price'</span>)</span><br><span class="line">        instance.read = validated_data.get(<span class="string">'read'</span>)</span><br><span class="line">        instance.save()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> instance</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编写的create和update方法都是对于数据库的操作，所以不能保证百分百的操作成功,那么此时我们应该在数据库操作中进行容错处理</span></span><br><span class="line"><span class="comment"># try...except...，当然自然也需要抛出异常提供给视图,由视图转发给客户端,抛出异常则使用raise serializers.ValidationError</span></span><br></pre></td></tr></table></figure>

<p>视图代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"><span class="keyword">from</span> django.views <span class="keyword">import</span> View</span><br><span class="line"><span class="keyword">from</span> django.http.response <span class="keyword">import</span> HttpResponse</span><br><span class="line"><span class="keyword">from</span> .serializers <span class="keyword">import</span> BookInfoSerializer</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookInfoView</span><span class="params">(View)</span>:</span></span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self,request)</span>:</span></span><br><span class="line">        <span class="string">"""保存数据[更新]"""</span></span><br><span class="line">        <span class="comment"># 客户端提交数据过来</span></span><br><span class="line">        id = <span class="number">2</span></span><br><span class="line">        data = &#123; <span class="comment"># 模拟客户端发送过来的数据</span></span><br><span class="line">            <span class="string">"title"</span>: <span class="string">"东游记"</span>,</span><br><span class="line">            <span class="string">"pub_date"</span>: <span class="string">"1998-10-01"</span>,</span><br><span class="line">            <span class="string">"price"</span>: <span class="number">19.98</span>,</span><br><span class="line">            <span class="string">"read"</span>: <span class="number">330</span>,</span><br><span class="line">            <span class="string">"comment"</span>: <span class="number">100</span>,</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">from</span> .models <span class="keyword">import</span> BookInfo</span><br><span class="line">        book = BookInfo.objects.get(pk=id)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 使用序列化器验证数据[如果是更新操作，需要传入2个参数，分别是instance和data]</span></span><br><span class="line">        serializer = BookInfoSerializer(instance=book,data=data)</span><br><span class="line">        serializer.is_valid()</span><br><span class="line">        book = serializer.save() <span class="comment"># 此时，我们必须在序列化器中预先声明update方法</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        serailzier对象调用的save方法是什么？怎么做到自动调用update和create?</span></span><br><span class="line"><span class="string">        1. 这里的save不是数据库ORM模型对象的save，是BaseSerializer定义的。</span></span><br><span class="line"><span class="string">        2. save方法中根据实例化serializer时是否传入instance参数来判断执行update还是create的</span></span><br><span class="line"><span class="string">           当传入instance时，则instance.save调用的就是update方法</span></span><br><span class="line"><span class="string">           没有传入instance，则instance.save调用的就是create方法</span></span><br><span class="line"><span class="string">        3. serializer.save使用前提是必须在序列化器中声明create或者update方法，否则报错！！！</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        print(book)</span><br><span class="line">        <span class="string">"""打印结果：</span></span><br><span class="line"><span class="string">        BookInfo object (2)</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">"ok"</span>)</span><br></pre></td></tr></table></figure>

<p>在序列化器实现了create和update两个方法后，在反序列化数据的时候，就可以通过save()方法返回一个数据对象实例了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">book = serializer.save()</span><br></pre></td></tr></table></figure>

<p>如果创建序列化器对象的时候，没有传递instance实例，则调用save()方法的时候，create()被调用，相反，如果传递了instance实例，则调用save()方法的时候，update()被调用。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">serailzier对象调用的save方法是什么？怎么做到自动调用update和create?</span><br><span class="line"><span class="number">1.</span> 这里的save不是数据库ORM模型对象的save，是BaseSerializer定义的。</span><br><span class="line"><span class="number">2.</span> save方法中根据实例化serializer时是否传入instance参数来判断执行update还是create的</span><br><span class="line">当传入instance时，则instance.save调用的就是update方法</span><br><span class="line">没有传入instance，则instance.save调用的就是create方法</span><br><span class="line"><span class="number">3.</span> serializer.save使用前提是必须在序列化器中声明create或者update方法，否则报错！！！</span><br></pre></td></tr></table></figure>

<p>BaseSerializer中定义的save方法源码：</p>
<p><img src="/images/1582086563954.png" alt=""></p>
<h3 id="7-3-2-3-附加参数说明"><a href="#7-3-2-3-附加参数说明" class="headerlink" title="7.3.2.3 附加参数说明"></a>7.3.2.3 附加参数说明</h3><p>1） 在对序列化器进行save()保存时，可以额外传递数据，这些数据可以在create()和update()中的validated_data参数获取到</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 可以传递任意参数到数据保存方法中</span></span><br><span class="line"><span class="comment"># 例如：request.user 是django中记录当前登录用户的模型对象</span></span><br><span class="line">serializer.save(owner=request.user)</span><br></pre></td></tr></table></figure>

<p>2）默认序列化器必须传递所有必填字段[required=True]，否则会抛出验证异常。但是我们可以使用partial参数来允许部分字段更新</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Update `BookInfo` with partial data</span></span><br><span class="line"><span class="comment"># partial=True 设置序列化器只是针对客户端提交的字段进行验证，没有提交的字段，即便有验证选项或方法也不进行验证。</span></span><br><span class="line">serializer = BookInfoSerializer(book, data=data, partial=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>

<h3 id="7-3-3-模型类序列化器"><a href="#7-3-3-模型类序列化器" class="headerlink" title="7.3.3 模型类序列化器"></a>7.3.3 模型类序列化器</h3><p>如果我们想要使用序列化器对应的是Django的模型类，DRF为我们提供了ModelSerializer模型类序列化器来帮助我们快速创建一个Serializer类。</p>
<p>ModelSerializer与常规的Serializer相同，但提供了：</p>
<ul>
<li>基于模型类自动生成一系列序列化器字段</li>
<li>基于模型类自动为Serializer生成validators，比如unique_together</li>
<li>包含默认的create()和update()的实现</li>
</ul>
<h3 id="7-3-3-1-定义"><a href="#7-3-3-1-定义" class="headerlink" title="7.3.3.1 定义"></a>7.3.3.1 定义</h3><p>比如我们创建一个BookInfoSerializer</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookInfoSerializer</span><span class="params">(serializers.ModelSerializer)</span>:</span></span><br><span class="line">    <span class="string">"""图书数据序列化器"""</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = BookInfo</span><br><span class="line">        fields = <span class="string">'__all__'</span></span><br></pre></td></tr></table></figure>

<ul>
<li>model 指明参照哪个模型类</li>
<li>fields 指明为模型类的哪些字段生成</li>
</ul>
<p>我们可以在python manage.py shell中查看自动生成的BookInfoSerializer的具体实现</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> booktest.serializers <span class="keyword">import</span> BookInfoSerializer</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>serializer = BookInfoSerializer()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>serializer</span><br><span class="line">BookInfoSerializer():</span><br><span class="line">    id = IntegerField(label=<span class="string">'ID'</span>, read_only=<span class="literal">True</span>)</span><br><span class="line">    btitle = CharField(label=<span class="string">'名称'</span>, max_length=<span class="number">20</span>)</span><br><span class="line">    bpub_date = DateField(allow_null=<span class="literal">True</span>, label=<span class="string">'发布日期'</span>, required=<span class="literal">False</span>)</span><br><span class="line">    bread = IntegerField(label=<span class="string">'阅读量'</span>, max_value=<span class="number">2147483647</span>, min_value=<span class="number">-2147483648</span>, required=<span class="literal">False</span>)</span><br><span class="line">    bcomment = IntegerField(label=<span class="string">'评论量'</span>, max_value=<span class="number">2147483647</span>, min_value=<span class="number">-2147483648</span>, required=<span class="literal">False</span>)</span><br><span class="line">    image = ImageField(allow_null=<span class="literal">True</span>, label=<span class="string">'图片'</span>, max_length=<span class="number">100</span>, required=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure>

<h3 id="7-3-3-2-指定字段"><a href="#7-3-3-2-指定字段" class="headerlink" title="7.3.3.2 指定字段"></a>7.3.3.2 指定字段</h3><ul>
<li>使用<strong>fields</strong>来明确字段，<code>__all__</code>表名包含所有字段，也可以写明具体哪些字段，如</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookInfoSerializer</span><span class="params">(serializers.ModelSerializer)</span>:</span></span><br><span class="line">    <span class="string">"""图书数据序列化器"""</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = BookInfo</span><br><span class="line">        fields = (<span class="string">'id'</span>, <span class="string">'btitle'</span>, <span class="string">'bpub_date'</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>使用<strong>exclude</strong>可以明确排除掉哪些字段</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookInfoSerializer</span><span class="params">(serializers.ModelSerializer)</span>:</span></span><br><span class="line">    <span class="string">"""图书数据序列化器"""</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = BookInfo</span><br><span class="line">        exclude = (<span class="string">'image'</span>,)</span><br></pre></td></tr></table></figure>

<ul>
<li>显示指明字段，如：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HeroInfoSerializer</span><span class="params">(serializers.ModelSerializer)</span>:</span></span><br><span class="line">    hbook = BookInfoSerializer()</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = HeroInfo</span><br><span class="line">        fields = (<span class="string">'id'</span>, <span class="string">'hname'</span>, <span class="string">'hgender'</span>, <span class="string">'hcomment'</span>, <span class="string">'hbook'</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>指明只读字段</li>
</ul>
<p>可以通过<strong>read_only_fields</strong>指明只读字段，即仅用于序列化输出的字段</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookInfoSerializer</span><span class="params">(serializers.ModelSerializer)</span>:</span></span><br><span class="line">    <span class="string">"""图书数据序列化器"""</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = BookInfo</span><br><span class="line">        fields = (<span class="string">'id'</span>, <span class="string">'title'</span>, <span class="string">'pub_date'</span>， <span class="string">'read'</span>, <span class="string">'comment'</span>)</span><br><span class="line">        read_only_fields = (<span class="string">'id'</span>, <span class="string">'read'</span>, <span class="string">'comment'</span>)</span><br></pre></td></tr></table></figure>

<h3 id="7-3-3-3-添加额外参数"><a href="#7-3-3-3-添加额外参数" class="headerlink" title="7.3.3.3 添加额外参数"></a>7.3.3.3 添加额外参数</h3><p>我们可以使用<strong>extra_kwargs</strong>参数为ModelSerializer添加或修改原有的选项参数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookInfoSerializer</span><span class="params">(serializers.ModelSerializer)</span>:</span></span><br><span class="line">    <span class="string">"""图书数据序列化器"""</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = BookInfo</span><br><span class="line">        fields = (<span class="string">'id'</span>, <span class="string">'btitle'</span>, <span class="string">'bpub_date'</span>, <span class="string">'bread'</span>, <span class="string">'bcomment'</span>)</span><br><span class="line">        extra_kwargs = &#123;</span><br><span class="line">            <span class="string">'bread'</span>: &#123;<span class="string">'min_value'</span>: <span class="number">0</span>, <span class="string">'required'</span>: <span class="literal">True</span>&#125;,</span><br><span class="line">            <span class="string">'bcomment'</span>: &#123;<span class="string">'min_value'</span>: <span class="number">0</span>, <span class="string">'required'</span>: <span class="literal">True</span>&#125;,</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># BookInfoSerializer():</span></span><br><span class="line"><span class="comment">#    id = IntegerField(label='ID', read_only=True)</span></span><br><span class="line"><span class="comment">#    btitle = CharField(label='名称', max_length=20)</span></span><br><span class="line"><span class="comment">#    bpub_date = DateField(allow_null=True, label='发布日期', required=False)</span></span><br><span class="line"><span class="comment">#    bread = IntegerField(label='阅读量', max_value=2147483647, min_value=0, required=True)</span></span><br><span class="line"><span class="comment">#    bcomment = IntegerField(label='评论量', max_value=2147483647, min_value=0, required=True)</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>Django Rest_Framework</tag>
      </tags>
  </entry>
  <entry>
    <title>[restful API规范与DRF安装]</title>
    <url>/2020/04/22/API%E8%A7%84%E8%8C%83%E4%B8%8Edrf%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<p>程序的客户端有很多：硬件设备，游戏，APP，软件，其他的外部服务端。</p>
<h1 id="1-Web应用模式"><a href="#1-Web应用模式" class="headerlink" title="1. Web应用模式"></a>1. Web应用模式</h1><p>在开发Web应用中，有两种应用模式：</p>
<ol>
<li><p>前后端不分离[客户端看到的内容和所有界面效果都是由服务端提供出来的。]</p>
<p>这种情况下，前端页面中会出现很多涉及到服务端的模板语法。</p>
</li>
</ol>
<p><img src="/images/depended_frontend_backend.png" alt=""></p>
<p>前后端不分离</p>
<ol>
<li><p>前后端分离【把前端的界面效果(html，css，js分离到另一个项目中，python服务端只需要返回数据即可)】</p>
<p>前端形成一个独立的网站，服务端构成一个独立的网站</p>
</li>
</ol>
<p><img src="/images/indepent_frontend_backend.png" alt=""></p>
<p>前后端分离</p>
<p>django，一般都是做web网站，如果可以利用django实现前后端分离，则django就可以完成地铁站的运营调度系统，路由的终端系统，pos机的服务端系统，游戏的服务端后台，软件的服务端后台。</p>
<h1 id="2-api接口"><a href="#2-api接口" class="headerlink" title="2. api接口"></a>2. api接口</h1><p>为了在团队内部形成共识、防止个人习惯差异引起的混乱，我们需要找到一种大家都觉得很好的接口实现规范，而且这种规范能够让后端写的接口，用途一目了然，减少双方之间的合作成本。</p>
<p>目前市面上大部分公司开发人员使用的接口服务架构主要有：restful、rpc，soap。</p>
<p>rpc: 翻译成中文:远程过程调用[远程服务调用].</p>
<p>服务端提供单一的请求数据的api地址：<a href="http://api.renran.cn/" target="_blank" rel="noopener">http://api.renran.cn/</a></p>
<p>post请求</p>
<p>action=get_all_student&amp;class=301&amp;sex=1</p>
<p>优势：</p>
<ol>
<li>不需要管当前操作是什么http请求，也不需要操作url地址的编写，对接简单</li>
</ol>
<p>缺点：</p>
<ol>
<li>接口多了,对应函数名和参数就多了,前端在请求api接口时,就会比较难找.容易出现重复的接口</li>
</ol>
<p>restful: 翻译成中文: 资源状态转换.</p>
<p>把后端所有的数据/文件都看成资源.</p>
<p>那么接口请求数据,本质上来说就是对资源的操作了.</p>
<p>web项目中操作资源,无非就是增删查改.所以要求在地址栏中声明要操作的资源是什么,然后通过http请求动词来说明对资源进行哪一种操作.</p>
<p>POST <a href="http://www.renran.cn/api/students/" target="_blank" rel="noopener">http://www.renran.cn/api/students/</a> 添加学生数据</p>
<p>GET <a href="http://www.renran.cn/api/students/" target="_blank" rel="noopener">http://www.renran.cn/api/students/</a> 获取所有学生</p>
<p>DELETE <a href="http://www.renran.cn/api/students//" target="_blank" rel="noopener">http://www.renran.cn/api/students//</a> 删除id=pk的一个学生</p>
<p>PUT <a href="http://www.renran.cn/api/students//" target="_blank" rel="noopener">http://www.renran.cn/api/students//</a> 修改一个学生的全部信息 [id,name,sex,age,]</p>
<p>PATCH <a href="http://www.renran.cn/api/students//" target="_blank" rel="noopener">http://www.renran.cn/api/students//</a> 修改一个学生的部分信息[age]</p>
<p>优点：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 维护开发简单，可以保证后期的开发不会出现太多重复接口</span><br></pre></td></tr></table></figure>

<p>缺点：</p>
<ol>
<li>有部分接口不会有明确的增删查改这种区分的，所以会出现一些不伦不类的接口。会因为这些语义不明，不伦不类的接口导致后期的维护成本上升。</li>
<li>因为restful把对于资源的操作都理解成了增删查改，建议使用http，所以restful接口天生局限于web开发。</li>
</ol>
<h1 id="3-RESTful-API规范"><a href="#3-RESTful-API规范" class="headerlink" title="3. RESTful API规范"></a>3. RESTful API规范</h1><p><img src="/images/restful.gif" alt=""></p>
<p>REST全称是Representational State Transfer，中文意思是表述（编者注：通常译为表征）性状态转移。 它首次出现在2000年Roy Fielding的博士论文中。</p>
<p>RESTful是一种定义Web API接口的设计风格，尤其适用于前后端分离的应用模式中。</p>
<p>这种风格的理念认为后端开发任务就是提供数据的，对外提供的是数据资源的访问接口，所以在定义接口时，客户端访问的URL路径就表示这种要操作的数据资源。</p>
<p>而对于数据资源分别使用POST、DELETE、GET、UPDATE等请求动作来表达对数据的增删查改。</p>
<p><a href="/images/d114eb0f25d14d698081068cdb57094a"></a></p>
<p>事实上，我们可以使用任何一个框架都可以实现符合restful规范的API接口。</p>
<p>参考文档：<a href="http://www.runoob.com/w3cnote/restful-architecture.html" target="_blank" rel="noopener">http://www.runoob.com/w3cnote/restful-architecture.html</a></p>
<p>接口实施过程中，会存在幂等性。所谓幂等性是指代客户端发起多次请求是否对于服务端里面的资源产生不同结果。如果多次请求，服务端结果还是一样，则属于幂等接口，如果多次请求，服务端产生结果是不一样的，则属于非幂等接口。在http请求，get/put/patch/delete都属于幂等性接口，post属于非幂等接口。</p>
<p>为什么要考虑幂等性？主要就是接口操作的安全性问题。</p>
<p>delete /api/students/1</p>
<p>get /api/students/</p>
<p>post /api/students/</p>
<h1 id="4-序列化"><a href="#4-序列化" class="headerlink" title="4. 序列化"></a>4. 序列化</h1><p>api接口开发，最核心最常见的一个过程就是序列化，所谓序列化就是把<strong>数据转换格式</strong>，序列化可以分两个阶段：</p>
<p><strong>序列化</strong>： 把我们识别的数据转换成指定的格式提供给别人。</p>
<p>例如：我们在django中获取到的数据默认是模型对象，但是模型对象数据无法直接提供给前端或别的平台使用，所以我们需要把数据进行序列化，变成字符串或者json数据，提供给前端或者其他平台。</p>
<p><strong>反序列化</strong>：把别人提供的数据转换/还原成我们需要的格式。</p>
<p>例如：前端js提供过来的json数据，对于python而言就是字符串，我们需要进行反序列化换成模型类对象，这样我们才能把数据保存到数据库中。</p>
<h1 id="5-Django-Rest-Framework"><a href="#5-Django-Rest-Framework" class="headerlink" title="5. Django Rest_Framework"></a>5. Django Rest_Framework</h1><p>核心思想: 缩减编写api接口的代码</p>
<p>Django REST framework是一个建立在Django基础之上的Web 应用开发框架,本质上就是一个内置在django里面的子应用，可以快速的开发REST API接口应用。</p>
<p>在REST framework中，提供了序列化器对象Serialzier的定义，可以帮助我们简化序列化与反序列化的过程，不仅如此，还提供丰富的类视图、扩展类、视图集来简化视图的编写工作。REST framework还提供了认证、权限、限流、过滤、分页、接口文档等功能支持。REST framework提供了一个用于测试API接口 的可视化Web界面【可以浏览器直接访问接口，drf的api接口测试页面非常美观】。</p>
<p><img src="/images/drf_logo.png" alt=""></p>
<p>中文文档：<a href="https://q1mi.github.io/Django-REST-framework-documentation/#django-rest-framework" target="_blank" rel="noopener">https://q1mi.github.io/Django-REST-framework-documentation/#django-rest-framework</a></p>
<p>github: <a href="https://github.com/encode/django-rest-framework/tree/master" target="_blank" rel="noopener">https://github.com/encode/django-rest-framework/tree/master</a></p>
<h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul>
<li>提供了定义序列化器Serializer的方法，可以快速根据 Django ORM 或者其它库自动序列化/反序列化；</li>
<li>提供了丰富的类视图、Mixin扩展类，简化视图的编写；</li>
<li>丰富的定制层级：函数视图、类视图、视图集合到自动生成 API，满足各种需要；</li>
<li>多种身份认证和权限认证方式的支持；[jwt Json web token]</li>
<li>内置了限流系统；</li>
<li>直观的 API web 界面；【方便我们调试开发api接口】</li>
<li>可扩展性，插件丰富</li>
</ul>
<h1 id="6-环境安装与配置"><a href="#6-环境安装与配置" class="headerlink" title="6. 环境安装与配置"></a>6. 环境安装与配置</h1><p>DRF需要以下依赖：</p>
<ul>
<li>Python (2.7, 3.2以上)</li>
<li>Django (1.10, 1.11, 2.0以上)</li>
</ul>
<p><strong>DRF是以Django扩展应用的方式提供的，所以我们可以直接利用已有的Django环境而无需从新创建。（若没有Django环境，需要先创建环境安装Django）</strong></p>
<h2 id="6-1-安装DRF"><a href="#6-1-安装DRF" class="headerlink" title="6.1 安装DRF"></a>6.1 安装DRF</h2><p>前提是已经安装了django，建议安装在虚拟环境</p>
<p>windows的复制粘贴在linux终端是无效的，在ubuntu终端下粘贴的快捷键是 shift+insert</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># mkvirtualenv drfdemo -p python3</span></span><br><span class="line"><span class="comment"># pip install django==2.2.0  -i https://pypi.douban.com/simple</span></span><br><span class="line"></span><br><span class="line">pip install djangorestframework -i https://pypi.douban.com/simple</span><br><span class="line"></span><br><span class="line"><span class="comment"># 因为我们需要接下来，需要开发api接口肯定要操作数据，所以安装pymysql</span></span><br><span class="line">pip install pymysql -i https://pypi.douban.com/simple</span><br></pre></td></tr></table></figure>

<p>linux的终端下 粘贴内容 快捷键： shift+insert</p>
<h3 id="6-1-1-创建django项目"><a href="#6-1-1-创建django项目" class="headerlink" title="6.1.1 创建django项目"></a>6.1.1 创建django项目</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/Desktop</span><br><span class="line">django-admin startproject drfdemo</span><br></pre></td></tr></table></figure>

<p><img src="/images/1557022536078.png" alt=""></p>
<p>使用pycharm打开项目，设置虚拟环境的解析器，并修改manage.py中的后缀参数。</p>
<p><img src="d/images/1592883758431.png" alt=""></p>
<h2 id="6-2-添加rest-framework应用"><a href="#6-2-添加rest-framework应用" class="headerlink" title="6.2 添加rest_framework应用"></a>6.2 添加rest_framework应用</h2><p>在<strong>settings.py</strong>的<strong>INSTALLED_APPS</strong>中添加’rest_framework’。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">INSTALLED_APPS = [    ...    <span class="string">'rest_framework'</span>,]</span><br></pre></td></tr></table></figure>

<p>接下来就可以使用DRF提供的功能进行api接口开发了。在项目中如果使用rest_framework框架实现API接口，主要有以下三个步骤：</p>
<ul>
<li>将请求的数据（如JSON格式）转换为模型类对象</li>
<li>通过模型类对象进行数据库操作，完成客户端请求的增删查改</li>
<li>将模型类对象转换为响应的数据（如JSON格式）</li>
</ul>
<p>接下来，我们快速体验下四天后我们学习完成drf以后的开发代码。接下来代码不需要理解，看步骤。</p>
<h2 id="6-3-体验drf完全简写代码的过程"><a href="#6-3-体验drf完全简写代码的过程" class="headerlink" title="6.3 体验drf完全简写代码的过程"></a>6.3 体验drf完全简写代码的过程</h2><h3 id="6-3-0-创建子应用"><a href="#6-3-0-创建子应用" class="headerlink" title="6.3.0 创建子应用"></a>6.3.0 创建子应用</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 项目根目录下创建子应用，用于展示当前例子。</span></span><br><span class="line"></span><br><span class="line">python manage.py startapp students</span><br></pre></td></tr></table></figure>

<h3 id="6-3-1-创建模型操作类"><a href="#6-3-1-创建模型操作类" class="headerlink" title="6.3.1. 创建模型操作类"></a>6.3.1. 创建模型操作类</h3><p>子应用的models.py文件中创建模型对象。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your models here.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="comment"># 表字段声明</span></span><br><span class="line">    <span class="comment"># 字段名=models.数据类型(字段约束)</span></span><br><span class="line">    name = models.CharField(null=<span class="literal">False</span>, max_length=<span class="number">32</span>, verbose_name=<span class="string">"姓名"</span>)</span><br><span class="line">    sex  = models.BooleanField(default=<span class="literal">True</span>, verbose_name=<span class="string">"性别"</span>)</span><br><span class="line">    age  = models.IntegerField(verbose_name=<span class="string">"年龄"</span>)</span><br><span class="line">    class_num = models.CharField(max_length=<span class="number">5</span>, verbose_name=<span class="string">"班级编号"</span>)</span><br><span class="line">    description = models.TextField(max_length=<span class="number">1000</span>, verbose_name=<span class="string">"个性签名"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 表信息</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        <span class="comment"># 设置表名</span></span><br><span class="line">        db_table=<span class="string">"tb_students"</span></span><br><span class="line">        verbose_name=<span class="string">"学生"</span></span><br><span class="line">        verbose_name_plural=verbose_name</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 模型的操作方法</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br></pre></td></tr></table></figure>

<p>为了方便测试，所以我们可以先创建一个数据库。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">create database students charset=utf8;</span><br></pre></td></tr></table></figure>

<p><img src="/images/1557023744365.png" alt=""></p>
<h3 id="6-3-1-1-执行数据迁移"><a href="#6-3-1-1-执行数据迁移" class="headerlink" title="6.3.1.1 执行数据迁移"></a>6.3.1.1 执行数据迁移</h3><p>把students子应用添加到INSTALL_APPS中</p>
<p><img src="/images/1557023819604.png" alt=""></p>
<p>初始化数据库连接</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">安装pymysql</span><br><span class="line">pip install pymysql</span><br></pre></td></tr></table></figure>

<p>主引用中<code>__init__.py</code>设置使用pymysql作为数据库驱动</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysqlpymysql.install_as_MySQLdb()</span><br></pre></td></tr></table></figure>

<p>settings.py配置文件中设置mysql的账号密码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">DATABASES = &#123;</span><br><span class="line">    <span class="comment"># 'default': &#123;</span></span><br><span class="line">    <span class="comment">#     'ENGINE': 'django.db.backends.sqlite3',</span></span><br><span class="line">    <span class="comment">#     'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),</span></span><br><span class="line">    <span class="comment"># &#125;,</span></span><br><span class="line">    <span class="string">'default'</span>: &#123;</span><br><span class="line">        <span class="string">'ENGINE'</span>: <span class="string">'django.db.backends.mysql'</span>,</span><br><span class="line">        <span class="string">'NAME'</span>: <span class="string">"students"</span>,</span><br><span class="line">        <span class="string">"HOST"</span>: <span class="string">"127.0.0.1"</span>,</span><br><span class="line">        <span class="string">"PORT"</span>: <span class="number">3306</span>,</span><br><span class="line">        <span class="string">"USER"</span>: <span class="string">"root"</span>,</span><br><span class="line">        <span class="string">"PASSWORD"</span>:<span class="string">"123"</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>终端下，执行数据迁移。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python manage.py makemigrations</span><br><span class="line">python manage.py migrate</span><br></pre></td></tr></table></figure>

<p>错误列表</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 执行数据迁移 python manage.py makemigrations 报错如下：</span><br></pre></td></tr></table></figure>

<p><img src="/images/1557024349366.png" alt=""></p>
<p>解决方案：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">注释掉 backends&#x2F;mysql&#x2F;base.py中的35和36行代码。</span><br></pre></td></tr></table></figure>

<p><img src="/images/1557025991751.png" alt=""></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 执行数据迁移发生以下错误：</span><br></pre></td></tr></table></figure>

<p><img src="/images/1557026113769.png" alt=""></p>
<p>解决方法：</p>
<p>backends/mysql/operations.py146行里面把decode换成encode：</p>
<p><img src="/images/1592885187223.png" alt=""></p>
<h3 id="6-3-2-创建序列化器"><a href="#6-3-2-创建序列化器" class="headerlink" title="6.3.2. 创建序列化器"></a>6.3.2. 创建序列化器</h3><p>在students应用目录中新建serializers.py用于保存该应用的序列化器。</p>
<p>创建一个StudentModelSerializer用于序列化与反序列化。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建序列化器类，回头会在试图中被调用</span></span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Student</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentModelSerializer</span><span class="params">(serializers.ModelSerializer)</span>:</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = Student</span><br><span class="line">        fields = <span class="string">"__all__"</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>model</strong> 指明该序列化器处理的数据字段从模型类BookInfo参考生成</li>
<li><strong>fields</strong> 指明该序列化器包含模型类中的哪些字段，’<strong>all</strong>’指明包含所有字段</li>
</ul>
<h3 id="6-3-3-编写视图"><a href="#6-3-3-编写视图" class="headerlink" title="6.3.3. 编写视图"></a>6.3.3. 编写视图</h3><p>在students应用的views.py中创建视图StudentViewSet，这是一个视图集合。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.viewsets <span class="keyword">import</span> ModelViewSet</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Student</span><br><span class="line"><span class="keyword">from</span> .serializers <span class="keyword">import</span> StudentModelSerializer</span><br><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentViewSet</span><span class="params">(ModelViewSet)</span>:</span></span><br><span class="line">    queryset = Student.objects.all()</span><br><span class="line">    serializer_class = StudentModelSerializer</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>queryset</strong> 指明该视图集在查询数据时使用的查询集</li>
<li><strong>serializer_class</strong> 指明该视图在进行序列化或反序列化时使用的序列化器</li>
</ul>
<h3 id="6-3-4-定义路由"><a href="#6-3-4-定义路由" class="headerlink" title="6.3.4. 定义路由"></a>6.3.4. 定义路由</h3><p>在students应用的urls.py中定义路由信息。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line"><span class="keyword">from</span> rest_framework.routers <span class="keyword">import</span> DefaultRouter</span><br><span class="line"></span><br><span class="line"><span class="comment"># 路由列表</span></span><br><span class="line">urlpatterns = []</span><br><span class="line"></span><br><span class="line">router = DefaultRouter()  <span class="comment"># 可以处理视图的路由器</span></span><br><span class="line">router.register(<span class="string">'students'</span>, views.StudentViewSet)  <span class="comment"># 向路由器中注册视图集</span></span><br><span class="line"></span><br><span class="line">urlpatterns += router.urls  <span class="comment"># 将路由器中的所以路由信息追到到django的路由列表中</span></span><br></pre></td></tr></table></figure>

<p>最后把students子应用中的路由文件加载到总路由文件中.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path,include</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'admin/'</span>, admin.site.urls),</span><br><span class="line">    path(<span class="string">"student/"</span>,include(<span class="string">"students.urls"</span>)),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h3 id="6-3-5-运行测试"><a href="#6-3-5-运行测试" class="headerlink" title="6.3.5. 运行测试"></a>6.3.5. 运行测试</h3><p>运行当前程序（与运行Django一样）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python manage.py runserver</span><br></pre></td></tr></table></figure>

<p>在浏览器中输入网址127.0.0.1:8000，可以看到DRF提供的API Web浏览页面：</p>
<p><img src="/images/1557027948031.png" alt=""></p>
<p>1）点击链接127.0.0.1:8000/stu/students 可以访问<strong>获取所有数据的接口</strong>，呈现如下页面：</p>
<p><img src="/images/1557027878963.png" alt=""></p>
<p>2）在页面底下表单部分填写学生信息，可以访问<strong>添加新学生的接口</strong>，保存学生信息：</p>
<p><img src="/images/1557027999506.png" alt=""></p>
<p>点击POST后，返回如下页面信息：</p>
<p><img src="/images/1557028072470.png" alt=""></p>
<p>3）在浏览器中输入网址127.0.0.1:8000/stu/students/5/，可以访问<strong>获取单一学生信息的接口</strong>（id为5的学生），呈现如下页面：</p>
<p><img src="/images/1557028115925.png" alt=""></p>
<p>4）在页面底部表单中填写学生信息，可以访问<strong>修改学生的接口</strong>：</p>
<p><img src="/images/1557028168350.png" alt=""></p>
<p>点击PUT，返回如下页面信息：</p>
<p><img src="/images/1557028208243.png" alt=""></p>
<p>5）点击DELETE按钮，可以访问<strong>删除学生的接口</strong>：</p>
<p><img src="/images/1557028242637.png" alt=""></p>
<p>返回，如下页面：</p>
<p><img src="/images/1557028266190.png" alt=""></p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>Django Rest_Framework</tag>
      </tags>
  </entry>
  <entry>
    <title>[荏苒商城注册登录功能]</title>
    <url>/2020/03/25/%E8%8D%8F%E8%8B%92%E5%95%86%E5%9F%8E%E6%B3%A8%E5%86%8C%E7%99%BB%E5%BD%95%E5%8A%9F%E8%83%BD/</url>
    <content><![CDATA[<h1 id="2-登录注册"><a href="#2-登录注册" class="headerlink" title="2-登录注册"></a>2-登录注册</h1><h1 id="用户的登陆认证"><a href="#用户的登陆认证" class="headerlink" title="用户的登陆认证"></a>用户的登陆认证</h1><h2 id="前端显示登陆页面"><a href="#前端显示登陆页面" class="headerlink" title="前端显示登陆页面"></a>前端显示登陆页面</h2><h3 id="登录页组件"><a href="#登录页组件" class="headerlink" title="登录页组件"></a>登录页组件</h3><p>components/Login.vue</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"sign"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"logo"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"/static/image/nav-logo.png"</span> <span class="attr">alt</span>=<span class="string">"Logo"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span> <span class="attr">class</span>=<span class="string">"title"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"normal-title"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"active"</span> <span class="attr">href</span>=<span class="string">"/login"</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">b</span>&gt;</span>·<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">"js-sign-up-btn"</span> <span class="attr">class</span>=<span class="string">""</span> <span class="attr">href</span>=<span class="string">"/register"</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"js-sign-in-container"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">"new_session"</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"input-prepend restyle js-normal"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">placeholder</span>=<span class="string">"手机号或邮箱"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"session[email_or_mobile_number]"</span> <span class="attr">id</span>=<span class="string">"session_email_or_mobile_number"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"iconfont ic-user"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 海外登录登录名输入框 --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"input-prepend"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">placeholder</span>=<span class="string">"密码"</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">id</span>=<span class="string">"session_password"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"iconfont ic-password"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"remember-btn"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">value</span>=<span class="string">"true"</span> <span class="attr">checked</span>=<span class="string">"checked"</span> <span class="attr">name</span>=<span class="string">"remember_me"</span> <span class="attr">id</span>=<span class="string">"session_remember_me"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>记住我<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"forget-btn"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">""</span> <span class="attr">data-toggle</span>=<span class="string">"dropdown"</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>登录遇到问题?<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"sign-in-button"</span> <span class="attr">id</span>=<span class="string">"sign-in-form-submit-btn"</span> <span class="attr">type</span>=<span class="string">"button"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"sign-in-loading"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      登录</span><br><span class="line">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 更多登录方式 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"more-sign"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h6</span>&gt;</span>社交帐号登录<span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">"weibo-link-wrap"</span> <span class="attr">class</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"weibo"</span> <span class="attr">id</span>=<span class="string">"weibo-link"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"iconfont ic-weibo"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">"weixin"</span> <span class="attr">class</span>=<span class="string">"weixin"</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"iconfont ic-wechat"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">"qq"</span> <span class="attr">class</span>=<span class="string">"qq"</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"iconfont ic-qq_connect"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">        name: <span class="string">"Login"</span></span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line">input&#123;</span><br><span class="line">  outline: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="css">*, <span class="selector-pseudo">:after</span>, <span class="selector-pseudo">:before</span> &#123;</span></span><br><span class="line">    box-sizing: border-box;</span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> &#123;</span></span><br><span class="line">    height: 100%;</span><br><span class="line">    min-height: 750px;</span><br><span class="line">    text-align: center;</span><br><span class="line">    font-size: 14px;</span><br><span class="line"><span class="css">    <span class="selector-tag">background-color</span>: <span class="selector-id">#f1f1f1</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span><span class="selector-pseudo">:before</span> &#123;</span></span><br><span class="line">    content: "";</span><br><span class="line">    display: inline-block;</span><br><span class="line">    height: 85%;</span><br><span class="line">    vertical-align: middle</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.disable</span>,<span class="selector-class">.sign</span> <span class="selector-class">.disable-gray</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">opacity</span>: <span class="selector-class">.5</span>;</span></span><br><span class="line">    pointer-events: none</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.disable-gray</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">background-color</span>: <span class="selector-id">#969696</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.tooltip-error</span> &#123;</span></span><br><span class="line">    font-size: 14px;</span><br><span class="line">    line-height: 25px;</span><br><span class="line">    white-space: nowrap;</span><br><span class="line">    background: none</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.tooltip-error</span> <span class="selector-class">.tooltip-inner</span> &#123;</span></span><br><span class="line">    max-width: 280px;</span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#333</span>;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ea6f5a</span>;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">background-color</span>: <span class="selector-id">#fff</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.tooltip-error</span> <span class="selector-class">.tooltip-inner</span> <span class="selector-tag">i</span> &#123;</span></span><br><span class="line">    position: static;</span><br><span class="line">    margin-right: 5px;</span><br><span class="line">    font-size: 20px;</span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#ea6f5a</span>;</span></span><br><span class="line">    vertical-align: middle</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.tooltip-error</span> <span class="selector-class">.tooltip-inner</span> <span class="selector-tag">span</span> &#123;</span></span><br><span class="line">    vertical-align: middle;</span><br><span class="line">    display: inline-block;</span><br><span class="line">    white-space: normal;</span><br><span class="line">    max-width: 230px</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.tooltip-error</span><span class="selector-class">.right</span> <span class="selector-class">.tooltip-arrow-border</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">border-right-color</span>: <span class="selector-id">#ea6f5a</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.tooltip-error</span><span class="selector-class">.right</span> <span class="selector-class">.tooltip-arrow-bg</span> &#123;</span></span><br><span class="line">    left: 2px;</span><br><span class="line"><span class="css">    <span class="selector-tag">border-right-color</span>: <span class="selector-id">#fff</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.slide-error</span> &#123;</span></span><br><span class="line">    position: relative;</span><br><span class="line">    padding: 10px 0;</span><br><span class="line"><span class="css">    <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#c8c8c8</span>;</span></span><br><span class="line">    border-radius: 4px</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.slide-error</span> <span class="selector-tag">i</span> &#123;</span></span><br><span class="line">    position: static!important;</span><br><span class="line">    margin-right: 10px;</span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#ea6f5a</span>!<span class="selector-tag">important</span>;</span></span><br><span class="line">    vertical-align: middle</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.slide-error</span> <span class="selector-tag">span</span> &#123;</span></span><br><span class="line">    font-size: 15px;</span><br><span class="line">    vertical-align: middle</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.slide-error</span> <span class="selector-tag">div</span> &#123;</span></span><br><span class="line">    margin-top: 10px;</span><br><span class="line">    font-size: 13px</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.slide-error</span> <span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#3194d0</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.js-sign-up-forbidden</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#999</span>;</span></span><br><span class="line">    padding: 80px 0 100px</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.js-sign-up-container</span> <span class="selector-class">.slide-error</span> &#123;</span></span><br><span class="line">    border-bottom: none;</span><br><span class="line">    border-radius: 0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.logo</span> &#123;</span></span><br><span class="line">    position: absolute;</span><br><span class="line">    top: 56px;</span><br><span class="line">    margin-left: 50px</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.logo</span> <span class="selector-tag">img</span> &#123;</span></span><br><span class="line">    width: 100px</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.main</span> &#123;</span></span><br><span class="line">    width: 400px;</span><br><span class="line">    margin: 60px auto 0;</span><br><span class="line">    padding: 50px 50px 30px;</span><br><span class="line"><span class="css">    <span class="selector-tag">background-color</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line">    border-radius: 4px;</span><br><span class="line"><span class="css">    <span class="selector-tag">box-shadow</span>: 0 0 8<span class="selector-tag">px</span> <span class="selector-tag">rgba</span>(0,0,0,<span class="selector-class">.1</span>);</span></span><br><span class="line">    vertical-align: middle;</span><br><span class="line">    display: inline-block</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.reset-title</span>,<span class="selector-class">.sign</span> <span class="selector-class">.title</span> &#123;</span></span><br><span class="line">    margin: 0 auto 50px;</span><br><span class="line">    padding: 10px;</span><br><span class="line">    font-weight: 400;</span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#969696</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.reset-title</span> <span class="selector-tag">a</span>,<span class="selector-class">.sign</span> <span class="selector-class">.title</span> <span class="selector-tag">a</span> &#123;</span></span><br><span class="line">    padding: 10px;</span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#969696</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.reset-title</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>,<span class="selector-class">.sign</span> <span class="selector-class">.title</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">border-bottom</span>: 2<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ea6f5a</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.reset-title</span> <span class="selector-class">.active</span>,<span class="selector-class">.sign</span> <span class="selector-class">.title</span> <span class="selector-class">.active</span> &#123;</span></span><br><span class="line">    font-weight: 700;</span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#ea6f5a</span>;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">border-bottom</span>: 2<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ea6f5a</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.reset-title</span> <span class="selector-tag">b</span>,<span class="selector-class">.sign</span> <span class="selector-class">.title</span> <span class="selector-tag">b</span> &#123;</span></span><br><span class="line">    padding: 10px</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.reset-title</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#333</span>;</span></span><br><span class="line">    font-weight: 700</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-tag">form</span> &#123;</span></span><br><span class="line">    margin-bottom: 30px</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-tag">form</span> <span class="selector-class">.input-prepend</span> &#123;</span></span><br><span class="line">    position: relative;</span><br><span class="line">    width: 100%</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-tag">form</span> <span class="selector-class">.input-prepend</span> <span class="selector-tag">input</span> &#123;</span></span><br><span class="line">    width: 100%;</span><br><span class="line">    height: 50px;</span><br><span class="line">    margin-bottom: 0;</span><br><span class="line">    padding: 4px 12px 4px 35px;</span><br><span class="line"><span class="css">    <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#c8c8c8</span>;</span></span><br><span class="line">    border-radius: 0 0 4px 4px;</span><br><span class="line"><span class="css">    <span class="selector-tag">background-color</span>: <span class="selector-tag">hsla</span>(0,0%,71%,<span class="selector-class">.1</span>);</span></span><br><span class="line">    vertical-align: middle</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-tag">form</span> <span class="selector-class">.input-prepend</span> <span class="selector-tag">i</span> &#123;</span></span><br><span class="line">    position: absolute;</span><br><span class="line">    top: 14px;</span><br><span class="line">    left: 10px;</span><br><span class="line">    font-size: 18px;</span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#969696</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-tag">form</span> <span class="selector-class">.input-prepend</span> <span class="selector-tag">span</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#333</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-tag">form</span> <span class="selector-class">.input-prepend</span> <span class="selector-class">.ic-show</span> &#123;</span></span><br><span class="line">    top: 18px;</span><br><span class="line">    left: auto;</span><br><span class="line">    right: 8px;</span><br><span class="line">    font-size: 12px</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-tag">form</span> <span class="selector-class">.geetest-placeholder</span> &#123;</span></span><br><span class="line">    height: 44px;</span><br><span class="line">    border-radius: 4px;</span><br><span class="line"><span class="css">    <span class="selector-tag">background-color</span>: <span class="selector-tag">hsla</span>(0,0%,71%,<span class="selector-class">.1</span>);</span></span><br><span class="line">    text-align: center;</span><br><span class="line">    line-height: 44px;</span><br><span class="line">    font-size: 14px;</span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#999</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-tag">form</span> <span class="selector-class">.restyle</span> &#123;</span></span><br><span class="line">    margin-bottom: 0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-tag">form</span> <span class="selector-class">.restyle</span> <span class="selector-tag">input</span> &#123;</span></span><br><span class="line">    border-bottom: none;</span><br><span class="line">    border-radius: 4px 4px 0 0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-tag">form</span> <span class="selector-class">.no-radius</span> <span class="selector-tag">input</span> &#123;</span></span><br><span class="line">    border-radius: 0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-tag">form</span> <span class="selector-class">.slide-security-placeholder</span> &#123;</span></span><br><span class="line">    height: 32px;</span><br><span class="line"><span class="css">    <span class="selector-tag">background-color</span>: <span class="selector-tag">hsla</span>(0,0%,71%,<span class="selector-class">.1</span>);</span></span><br><span class="line">    border-radius: 4px</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-tag">form</span> <span class="selector-class">.slide-security-placeholder</span> <span class="selector-tag">p</span> &#123;</span></span><br><span class="line">    padding-top: 7px;</span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#999</span>;</span></span><br><span class="line">    margin-right: -7px</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.overseas-btn</span> &#123;</span></span><br><span class="line">    font-size: 14px;</span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#999</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.overseas-btn</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#2f2f2f</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.remember-btn</span> &#123;</span></span><br><span class="line">    float: left;</span><br><span class="line">    margin: 15px 0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.remember-btn</span> <span class="selector-tag">span</span> &#123;</span></span><br><span class="line">    margin-left: 5px;</span><br><span class="line">    font-size: 15px;</span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#969696</span>;</span></span><br><span class="line">    vertical-align: middle</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.forget-btn</span> &#123;</span></span><br><span class="line">    float: right;</span><br><span class="line">    position: relative;</span><br><span class="line">    margin: 15px 0;</span><br><span class="line">    font-size: 14px</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.forget-btn</span> <span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#999</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.forget-btn</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#333</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.forget-btn</span> <span class="selector-class">.dropdown-menu</span> &#123;</span></span><br><span class="line">    top: 20px;</span><br><span class="line">    left: auto;</span><br><span class="line">    right: 0;</span><br><span class="line">    border-radius: 4px</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.forget-btn</span> <span class="selector-class">.dropdown-menu</span> <span class="selector-tag">a</span> &#123;</span></span><br><span class="line">    padding: 10px 20px;</span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#333</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-id">#sign-in-loading</span> &#123;</span></span><br><span class="line">    position: relative;</span><br><span class="line">    width: 20px;</span><br><span class="line">    height: 20px;</span><br><span class="line">    vertical-align: middle;</span><br><span class="line">    margin-top: -4px;</span><br><span class="line">    margin-right: 2px;</span><br><span class="line">    display: none</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-id">#sign-in-loading</span><span class="selector-pseudo">:after</span> &#123;</span></span><br><span class="line">    content: "";</span><br><span class="line">    position: absolute;</span><br><span class="line">    left: 0;</span><br><span class="line">    top: 0;</span><br><span class="line">    width: 100%;</span><br><span class="line">    height: 100%;</span><br><span class="line">    background-color: transparent</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-id">#sign-in-loading</span><span class="selector-pseudo">:before</span> &#123;</span></span><br><span class="line">    content: "";</span><br><span class="line">    position: absolute;</span><br><span class="line">    top: 50%;</span><br><span class="line">    left: 50%;</span><br><span class="line">    width: 20px;</span><br><span class="line">    height: 20px;</span><br><span class="line">    margin: -10px 0 0 -10px;</span><br><span class="line">    border-radius: 10px;</span><br><span class="line"><span class="css">    <span class="selector-tag">border</span>: 2<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#fff</span>;</span></span><br><span class="line">    border-bottom-color: transparent;</span><br><span class="line">    vertical-align: middle;</span><br><span class="line"><span class="css">    <span class="selector-tag">-webkit-animation</span>: <span class="selector-tag">rolling</span> <span class="selector-class">.8s</span> <span class="selector-tag">infinite</span> <span class="selector-tag">linear</span>;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">animation</span>: <span class="selector-tag">rolling</span> <span class="selector-class">.8s</span> <span class="selector-tag">infinite</span> <span class="selector-tag">linear</span>;</span></span><br><span class="line">    z-index: 1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.sign-in-button</span>,<span class="selector-class">.sign</span> <span class="selector-class">.sign-up-button</span> &#123;</span></span><br><span class="line">    margin-top: 20px;</span><br><span class="line">    width: 100%;</span><br><span class="line">    padding: 9px 18px;</span><br><span class="line">    font-size: 18px;</span><br><span class="line">    border: none;</span><br><span class="line">    border-radius: 25px;</span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">background</span>: <span class="selector-id">#42c02e</span>;</span></span><br><span class="line">    cursor: pointer;</span><br><span class="line">    outline: none;</span><br><span class="line">    display: block;</span><br><span class="line">    clear: both</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.sign-in-button</span><span class="selector-pseudo">:hover</span>,<span class="selector-class">.sign</span> <span class="selector-class">.sign-up-button</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">background</span>: <span class="selector-id">#3db922</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.sign-in-button</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">background</span>: <span class="selector-id">#3194d0</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.sign-in-button</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">background</span>: <span class="selector-id">#187cb7</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.btn-in-resend</span>,<span class="selector-class">.sign</span> <span class="selector-class">.btn-up-resend</span> &#123;</span></span><br><span class="line">    position: absolute;</span><br><span class="line">    top: 7px;</span><br><span class="line">    right: 7px;</span><br><span class="line">    width: 100px;</span><br><span class="line">    height: 36px;</span><br><span class="line">    font-size: 13px;</span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">background-color</span>: <span class="selector-id">#42c02e</span>;</span></span><br><span class="line">    border-radius: 20px;</span><br><span class="line">    line-height: 36px</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.btn-in-resend</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">background-color</span>: <span class="selector-id">#3194d0</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.sign-up-msg</span> &#123;</span></span><br><span class="line">    margin: 10px 0;</span><br><span class="line">    padding: 0;</span><br><span class="line">    text-align: center;</span><br><span class="line">    font-size: 12px;</span><br><span class="line">    line-height: 20px;</span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#969696</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.sign-up-msg</span> <span class="selector-tag">a</span>,<span class="selector-class">.sign</span> <span class="selector-class">.sign-up-msg</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#3194d0</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.overseas</span> <span class="selector-tag">input</span> &#123;</span></span><br><span class="line">    padding-left: 110px!important</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.overseas</span> <span class="selector-class">.overseas-number</span> &#123;</span></span><br><span class="line">    position: absolute;</span><br><span class="line">    top: 0;</span><br><span class="line">    left: 0;</span><br><span class="line">    width: 100px;</span><br><span class="line">    height: 50px;</span><br><span class="line">    font-size: 18px;</span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#969696</span>;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">border-right</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#c8c8c8</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.overseas</span> <span class="selector-class">.overseas-number</span> <span class="selector-tag">span</span> &#123;</span></span><br><span class="line">    margin-top: 17px;</span><br><span class="line">    padding-left: 35px;</span><br><span class="line">    text-align: left;</span><br><span class="line">    font-size: 14px;</span><br><span class="line">    display: block</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.overseas</span> <span class="selector-class">.dropdown-menu</span> &#123;</span></span><br><span class="line">    width: 100%;</span><br><span class="line">    max-height: 285px;</span><br><span class="line">    font-size: 14px;</span><br><span class="line">    border-radius: 0 0 4px 4px;</span><br><span class="line">    overflow-y: auto</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.overseas</span> <span class="selector-class">.dropdown-menu</span> <span class="selector-tag">li</span> <span class="selector-class">.nation-code</span> &#123;</span></span><br><span class="line">    width: 65px;</span><br><span class="line">    display: inline-block</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.overseas</span> <span class="selector-class">.dropdown-menu</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span> &#123;</span></span><br><span class="line">    padding: 6px 20px;</span><br><span class="line">    font-size: 14px;</span><br><span class="line">    line-height: 20px</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.overseas</span> <span class="selector-class">.dropdown-menu</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span><span class="selector-pseudo">::hover</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">background-color</span>: <span class="selector-id">#f5f5f5</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.more-sign</span> &#123;</span></span><br><span class="line">    margin-top: 50px</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.more-sign</span> <span class="selector-tag">h6</span> &#123;</span></span><br><span class="line">    position: relative;</span><br><span class="line">    margin: 0 0 10px;</span><br><span class="line">    font-size: 12px;</span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#b5b5b5</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.more-sign</span> <span class="selector-tag">h6</span><span class="selector-pseudo">:before</span> &#123;</span></span><br><span class="line">    left: 30px</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.more-sign</span> <span class="selector-tag">h6</span><span class="selector-pseudo">:after</span>,<span class="selector-class">.sign</span> <span class="selector-class">.more-sign</span> <span class="selector-tag">h6</span><span class="selector-pseudo">:before</span> &#123;</span></span><br><span class="line">    content: "";</span><br><span class="line"><span class="css">    <span class="selector-tag">border-top</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#b5b5b5</span>;</span></span><br><span class="line">    display: block;</span><br><span class="line">    position: absolute;</span><br><span class="line">    width: 60px;</span><br><span class="line">    top: 5px</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.more-sign</span> <span class="selector-tag">h6</span><span class="selector-pseudo">:after</span> &#123;</span></span><br><span class="line">    right: 30px</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.more-sign</span> <span class="selector-tag">ul</span> &#123;</span></span><br><span class="line">    margin-bottom: 10px;</span><br><span class="line">    list-style: none</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.more-sign</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> &#123;</span></span><br><span class="line">    margin: 0 5px;</span><br><span class="line">    display: inline-block</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.more-sign</span> <span class="selector-tag">ul</span> <span class="selector-tag">a</span> &#123;</span></span><br><span class="line">    width: 50px;</span><br><span class="line">    height: 50px;</span><br><span class="line">    line-height: 50px;</span><br><span class="line">    display: block</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.more-sign</span> <span class="selector-tag">ul</span> <span class="selector-tag">i</span> &#123;</span></span><br><span class="line">    font-size: 28px</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.more-sign</span> <span class="selector-class">.ic-weibo</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#e05244</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.more-sign</span> <span class="selector-class">.ic-wechat</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#00bb29</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.more-sign</span> <span class="selector-class">.ic-qq_connect</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#498ad5</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.more-sign</span> <span class="selector-class">.ic-douban</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#00820f</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.more-sign</span> <span class="selector-class">.ic-more</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#999</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.more-sign</span> <span class="selector-class">.weibo-loading</span> &#123;</span></span><br><span class="line">    pointer-events: none;</span><br><span class="line">    cursor: pointer;</span><br><span class="line">    position: relative</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.more-sign</span> <span class="selector-class">.weibo-loading</span><span class="selector-pseudo">:after</span> &#123;</span></span><br><span class="line">    content: "";</span><br><span class="line">    position: absolute;</span><br><span class="line">    left: 0;</span><br><span class="line">    top: 0;</span><br><span class="line">    width: 100%;</span><br><span class="line">    height: 100%;</span><br><span class="line"><span class="css">    <span class="selector-tag">background-color</span>: <span class="selector-id">#fff</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-tag">body</span><span class="selector-class">.reader-night-mode</span> <span class="selector-class">.sign</span> <span class="selector-class">.more-sign</span> <span class="selector-class">.weibo-loading</span><span class="selector-pseudo">:after</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">background-color</span>: <span class="selector-id">#3f3f3f</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.more-sign</span> <span class="selector-class">.weibo-loading</span><span class="selector-pseudo">:before</span> &#123;</span></span><br><span class="line">    content: "";</span><br><span class="line">    position: absolute;</span><br><span class="line">    top: 50%;</span><br><span class="line">    left: 50%;</span><br><span class="line">    width: 20px;</span><br><span class="line">    height: 20px;</span><br><span class="line">    margin: -10px 0 0 -10px;</span><br><span class="line">    border-radius: 10px;</span><br><span class="line"><span class="css">    <span class="selector-tag">border</span>: 2<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#e05244</span>;</span></span><br><span class="line">    border-bottom-color: transparent;</span><br><span class="line">    vertical-align: middle;</span><br><span class="line"><span class="css">    <span class="selector-tag">-webkit-animation</span>: <span class="selector-tag">rolling</span> <span class="selector-class">.8s</span> <span class="selector-tag">infinite</span> <span class="selector-tag">linear</span>;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">animation</span>: <span class="selector-tag">rolling</span> <span class="selector-class">.8s</span> <span class="selector-tag">infinite</span> <span class="selector-tag">linear</span>;</span></span><br><span class="line">    z-index: 1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="keyword">@keyframes</span> rolling &#123;</span></span><br><span class="line">    0% &#123;</span><br><span class="line">        -webkit-transform: rotate(0deg);</span><br><span class="line">        transform: rotate(0deg)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    to &#123;</span><br><span class="line">        -webkit-transform: rotate(1turn);</span><br><span class="line">        transform: rotate(1turn)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="keyword">@-webkit-keyframes</span> rolling &#123;</span></span><br><span class="line">    0% &#123;</span><br><span class="line">        -webkit-transform: rotate(0deg)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    to &#123;</span><br><span class="line">        -webkit-transform: rotate(1turn)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.reset-password-input</span> &#123;</span></span><br><span class="line">    border-radius: 4px!important</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.return</span> &#123;</span></span><br><span class="line">    margin-left: -8px;</span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#969696</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.return</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#333</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.return</span> <span class="selector-tag">i</span> &#123;</span></span><br><span class="line">    margin-right: 5px</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.icheckbox_square-green</span> &#123;</span></span><br><span class="line">    display: inline-block;</span><br><span class="line">    *display: inline;</span><br><span class="line">    vertical-align: middle;</span><br><span class="line">    margin: 0;</span><br><span class="line">    padding: 0;</span><br><span class="line">    width: 18px;</span><br><span class="line">    height: 18px;</span><br><span class="line">    background: url(/static/image/green.png) no-repeat;</span><br><span class="line">    border: none;</span><br><span class="line">    cursor: pointer;</span><br><span class="line">    background-position: 0 0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.icheckbox_square-green</span><span class="selector-class">.hover</span> &#123;</span></span><br><span class="line">    background-position: -20px 0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.icheckbox_square-green</span><span class="selector-class">.checked</span> &#123;</span></span><br><span class="line">    background-position: -40px 0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.icheckbox_square-green</span><span class="selector-class">.disabled</span> &#123;</span></span><br><span class="line">    background-position: -60px 0;</span><br><span class="line">    cursor: default</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.icheckbox_square-green</span><span class="selector-class">.checked</span><span class="selector-class">.disabled</span> &#123;</span></span><br><span class="line">    background-position: -80px 0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.geetest_panel_box</span>&gt;* &#123;</span></span><br><span class="line">    box-sizing: content-box</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="keyword">@media</span> (<span class="attribute">max-width:</span><span class="number">768px</span>) &#123;</span></span><br><span class="line">    body &#123;</span><br><span class="line">        min-width: 0</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.sign</span> &#123;</span></span><br><span class="line">        height: auto;</span><br><span class="line">        min-height: 0;</span><br><span class="line">        background-color: transparent</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.sign</span> <span class="selector-class">.logo</span> &#123;</span></span><br><span class="line">        display: none</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.sign</span> <span class="selector-class">.main</span> &#123;</span></span><br><span class="line">        position: absolute;</span><br><span class="line">        left: 50%;</span><br><span class="line">        margin: 0 0 0 -200px;</span><br><span class="line">        box-shadow: none</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>把素材中的iconfont.css和iconfont.eof字体文件,放到项目中引入进来,因为在别的页面也会使用到图标,所以我们直接的入口文件index.html或者main.js中全局引入.</p>
<p>main.js,代码:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">// 全局导入字体图标</span><br><span class="line"><span class="keyword">import</span> <span class="string">"../static/css/iconfont.css"</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">"../static/css/iconfont.eot"</span>;</span><br></pre></td></tr></table></figure>

<h3 id="绑定登陆页面路由地址"><a href="#绑定登陆页面路由地址" class="headerlink" title="绑定登陆页面路由地址"></a>绑定登陆页面路由地址</h3><p>router/index.js</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">"vue"</span></span><br><span class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">"vue-router"</span></span><br><span class="line"></span><br><span class="line">// 导入需要注册路由的组件</span><br><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">"../components/Home"</span></span><br><span class="line"><span class="keyword">import</span> Login <span class="keyword">from</span> <span class="string">"../components/Login"</span></span><br><span class="line">Vue.use(Router);</span><br><span class="line"></span><br><span class="line">// 配置路由列表</span><br><span class="line">export default new Router(&#123;</span><br><span class="line">  mode:<span class="string">"history"</span>,</span><br><span class="line">  routes:[</span><br><span class="line">    // 路由列表</span><br><span class="line">		...</span><br><span class="line">    &#123;</span><br><span class="line">      name:<span class="string">"Login"</span>,</span><br><span class="line">      path: <span class="string">"/login"</span>,</span><br><span class="line">      component:Login,</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="调整首页头部子组件中登陆按钮的链接信息"><a href="#调整首页头部子组件中登陆按钮的链接信息" class="headerlink" title="调整首页头部子组件中登陆按钮的链接信息"></a>调整首页头部子组件中登陆按钮的链接信息</h3><p>Header.vue</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">class</span>=<span class="string">"btn log-in"</span> <span class="attr">id</span>=<span class="string">"sign_in"</span> <span class="attr">to</span>=<span class="string">"/login"</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Login.vue</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"logo"</span>&gt;</span><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"/static/image/nav-logo.png"</span> <span class="attr">alt</span>=<span class="string">"Logo"</span>&gt;</span><span class="tag">&lt;/<span class="name">router-link</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">class</span>=<span class="string">"active"</span> <span class="attr">to</span>=<span class="string">"/user/login"</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="后端实现登陆认证"><a href="#后端实现登陆认证" class="headerlink" title="后端实现登陆认证"></a>后端实现登陆认证</h2><p>Django默认已经提供了认证系统Auth模块。认证系统包含：</p>
<ul>
<li>用户管理</li>
<li>权限系统【RBAC权限机制 Role-Base Access Control基于用户角色的访问控制机制】</li>
<li>用户组管理</li>
<li>密码哈希系统[密码加密和验证加密，无法解密]</li>
<li>用户登录或内容显示的表单和视图</li>
<li>一个可插拔的后台系统【admin后台运营站点，实际开发中大部分人使用的是xadmin后台运营站点】</li>
</ul>
<p>Django默认用户的认证机制依赖Session机制，我们在项目中将引入JWT认证机制，将用户的身份凭据存放在Token字符串中，然后对接Django的认证系统，帮助我们来实现：</p>
<ul>
<li>用户的数据模型</li>
<li>用户密码的加密与验证</li>
<li>用户的权限系统</li>
</ul>
<h3 id="Django用户模型类"><a href="#Django用户模型类" class="headerlink" title="Django用户模型类"></a>Django用户模型类</h3><p>django内置的用户模型文件： django/contrib/auth/model.py</p>
<p>Django认证系统中提供了用户模型类User保存用户的数据，默认的User包含以下常见的基本字段：</p>
<p><a href="https://www.notion.so/da82efa5e7a443ac8cb8d87017a9c026" target="_blank" rel="noopener">Untitled</a></p>
<h3 id="常用方法："><a href="#常用方法：" class="headerlink" title="常用方法："></a>常用方法：</h3><ul>
<li><p><code>set_password</code>(<em>raw_password</em>)</p>
<p>设置用户的密码为给定的原始字符串，并负责密码的。 不会保存<code>User</code> 对象。当<code>None</code>为<code>raw_password</code> 时，密码将设置为一个不可用的密码。</p>
</li>
<li><p><code>check_password</code>(<em>raw_password</em>)</p>
<p>如果给定的raw_password是用户的真实密码，则返回True，可以在校验用户密码时使用。</p>
</li>
</ul>
<h3 id="管理器方法："><a href="#管理器方法：" class="headerlink" title="管理器方法："></a>管理器方法：</h3><p>管理器方法即可以通过<code>User.objects.</code> 进行调用的方法。</p>
<ul>
<li><p><code>create_user</code>(<em>username</em>, <em>email=None</em>, <em>password=None</em>, <em>**extra_fields</em>)</p>
<p>创建、保存并返回一个<code>User</code>对象。</p>
</li>
<li><p><code>create_superuser</code>(<em>username</em>, <em>email</em>, <em>password</em>, <em>**extra_fields</em>)</p>
<p>与<code>create_user()</code> 相同，但是设置<code>is_staff</code> 和<code>is_superuser</code> 为<code>True</code>。</p>
</li>
</ul>
<h3 id="创建用户模块的子应用"><a href="#创建用户模块的子应用" class="headerlink" title="创建用户模块的子应用"></a>创建用户模块的子应用</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> renranapi/apps</span><br><span class="line">python ../../manage.py startapp users</span><br></pre></td></tr></table></figure>

<p>在settings/dev.py中注册users子应用。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">		...</span><br><span class="line">  	<span class="string">'users'</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>解决因为我们调整子应用保存目录以后导致django无法识别子应用的BUG</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 解决方案：通过把apps设置为导包路径即可解决。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment"># Build paths inside the project like this: os.path.join(BASE_DIR, ...)</span></span><br><span class="line">BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 把网站子应用所在目录设置为了导报路径</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.path.insert(<span class="number">0</span>,os.path.join(BASE_DIR, <span class="string">"apps"</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># Quick-start development settings - unsuitable for production</span></span><br><span class="line"><span class="comment"># See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># SECURITY WARNING: keep the secret key used in production secret!</span></span><br><span class="line">SECRET_KEY = <span class="string">'%=l9-5s0i26qd9687f75&amp;wd60_f-9%*s9df4$l@x(34qey)n3b'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># SECURITY WARNING: don't run with debug turned on in production!</span></span><br><span class="line">DEBUG = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">ALLOWED_HOSTS = [</span><br><span class="line">    <span class="string">"api.renran.cn"</span>,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># CORS的白名单[只有在白名单里面的客户端地址才可以通过ajax访问服务端]</span></span><br><span class="line">CORS_ORIGIN_WHITELIST = (</span><br><span class="line">    <span class="string">'http://www.moluo.net:8080'</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 允许ajax跨域请求时携带cookie</span></span><br><span class="line">CORS_ALLOW_CREDENTIALS = <span class="literal">False</span> <span class="comment"># 表示禁止</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Application definition</span></span><br><span class="line"></span><br><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">'django.contrib.admin'</span>,</span><br><span class="line">    <span class="string">'django.contrib.auth'</span>,</span><br><span class="line">    <span class="string">'django.contrib.contenttypes'</span>,</span><br><span class="line">    <span class="string">'django.contrib.sessions'</span>,</span><br><span class="line">    <span class="string">'django.contrib.messages'</span>,</span><br><span class="line">    <span class="string">'django.contrib.staticfiles'</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">'corsheaders'</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">'users'</span>,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># ...后面省略</span></span><br></pre></td></tr></table></figure>

<h3 id="创建自定义的用户模型类"><a href="#创建自定义的用户模型类" class="headerlink" title="创建自定义的用户模型类"></a>创建自定义的用户模型类</h3><p>Django认证系统中提供的用户模型类及方法很方便，我们可以使用这个模型类，但是字段有些无法满足项目需求，如本项目中需要保存用户的手机号，需要给模型类添加额外的字段。</p>
<p>Django提供了<code>django.contrib.auth.models.AbstractUser</code>用户抽象模型类允许我们继承，扩展字段来使用Django认证系统的用户模型类。</p>
<p><strong>我们可以在apps中创建Django应用users，并在配置文件中注册users应用。</strong></p>
<p>在创建好的应用models.py中定义用户的用户模型类。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> AbstractUser</span><br><span class="line"><span class="comment"># Create your models here.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(AbstractUser)</span>:</span></span><br><span class="line">    <span class="string">"""用户模型类"""</span></span><br><span class="line">    mobile = models.CharField(max_length=<span class="number">15</span>, null=<span class="literal">True</span>, unique=<span class="literal">True</span>, help_text=<span class="string">"手机号码"</span>,verbose_name=<span class="string">"手机号码"</span>)</span><br><span class="line">    wxchat = models.CharField(max_length=<span class="number">100</span>, null=<span class="literal">True</span>, unique=<span class="literal">True</span>, help_text=<span class="string">"微信账号"</span>,verbose_name=<span class="string">"微信账号"</span>)</span><br><span class="line">    alipay = models.CharField(max_length=<span class="number">100</span>, null=<span class="literal">True</span>, unique=<span class="literal">True</span>, help_text=<span class="string">"支付宝账号"</span>,verbose_name=<span class="string">"支付宝账号"</span>)</span><br><span class="line">    qq_number = models.CharField(max_length=<span class="number">11</span>, null=<span class="literal">True</span>, unique=<span class="literal">True</span>, help_text=<span class="string">"QQ号"</span>,verbose_name=<span class="string">"QQ号"</span>)</span><br><span class="line">    <span class="comment"># 保存文件的子目录</span></span><br><span class="line">    avatar = models.ImageField(upload_to=<span class="string">"avatar"</span>, null=<span class="literal">True</span>, default=<span class="literal">None</span>, verbose_name=<span class="string">"头像"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        db_table = <span class="string">"rr_users"</span></span><br><span class="line">        verbose_name = <span class="string">"用户信息"</span></span><br><span class="line">        verbose_name_plural = verbose_name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.username</span><br></pre></td></tr></table></figure>

<p>我们自定义的用户模型类还不能直接被Django的认证系统所识别，需要在配置文件中告知Django认证系统使用我们自定义的模型类。</p>
<p>在配置文件settings/dev.py，中进行设置</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">AUTH_USER_MODEL = <span class="string">'users.User'</span></span><br></pre></td></tr></table></figure>

<p><code>AUTH_USER_MODEL</code> 参数的设置以<code>点.</code>来分隔，表示<code>应用名.模型类名</code>。</p>
<p><strong>注意：Django强烈建议我们对于AUTH_USER_MODEL参数的设置一定要在第一次数据库迁移之前就设置好，否则后续使用可能出现未知错误。</strong></p>
<p>执行数据库迁移</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python manage.py makemigrations</span><br><span class="line">python manage.py migrate</span><br></pre></td></tr></table></figure>

<h3 id="Django-REST-framework-JWT"><a href="#Django-REST-framework-JWT" class="headerlink" title="Django REST framework JWT"></a>Django REST framework JWT</h3><blockquote>
<p>Json web token (JWT), 是为了在网络应用环境间传递声明而执行的一种基于JSON的开放标准（(RFC 7519).该token被设计为紧凑且安全的，特别适用于分布式站点的单点登录（SSO）场景。JWT的声明一般被用来在身份提供者和服务提供者间传递被认证的用户身份信息，以便于从资源服务器获取资源，也可以增加一些额外的其它业务逻辑所必须的声明信息，该token也可直接被用于认证，也可被加密。</p>
</blockquote>
<p>在用户注册或登录后，我们想记录用户的登录状态，或者为用户创建身份认证的凭证。我们不再使用Session认证机制，而使用Json Web Token认证机制。</p>
<h3 id="JWT的构成"><a href="#JWT的构成" class="headerlink" title="JWT的构成"></a>JWT的构成</h3><p>JWT就一段字符串，由三段信息构成的，将这三段信息文本用<code>.</code>链接一起就构成了Jwt字符串。就像这样:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ</span><br></pre></td></tr></table></figure>

<p>第一部分我们称它为头部（header),第二部分我们称其为载荷（payload, 类似于飞机上承载的物品)，第三部分是签证（signature).</p>
<h3 id="header"><a href="#header" class="headerlink" title="header"></a>header</h3><p>jwt的头部承载两部分信息：</p>
<ul>
<li>声明类型，这里是jwt</li>
<li>声明加密的算法 通常直接使用 HMAC SHA256</li>
</ul>
<p>完整的头部就像下面这样的JSON：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  'typ': 'JWT',</span><br><span class="line">  'alg': 'HS256'</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后将头部进行base64加密（该加密是可以对称解密的),构成了第一部分.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># python代码：</span></span><br><span class="line">headers = <span class="string">'&#123;"tpy":"JWT","alg":"HS256"&#125;'</span></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">header_str = base64.b64encode(headers.encode()).decode()</span><br><span class="line">print(header_str)</span><br><span class="line"><span class="comment"># 打印效果：</span></span><br><span class="line"><span class="comment"># eyJ0cHkiOiJKV1QiLCJhbGciOiJIUzI1NiJ9</span></span><br></pre></td></tr></table></figure>

<h3 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h3><p>载荷就是存放有效信息的地方。这个名字像是特指飞机上承载的货品，这些有效信息包含三个部分</p>
<ul>
<li>标准声明</li>
<li>公共声明</li>
<li>私有声明</li>
</ul>
<p><strong>标准中注册的声明</strong> (建议但不强制使用) ：</p>
<ul>
<li><strong>iss</strong>: jwt签发者</li>
<li><strong>sub</strong>: jwt所面向的用户</li>
<li><strong>aud</strong>: 接收jwt的一方</li>
<li><strong>exp</strong>: jwt的过期时间，这个过期时间必须要大于签发时间</li>
<li><strong>nbf</strong>: 定义在什么时间之前，该jwt都是不可用的.</li>
<li><strong>iat</strong>: jwt的签发时间</li>
<li><strong>jti</strong>: jwt的唯一身份标识，主要用来作为一次性token,从而回避重放攻击。</li>
</ul>
<p><strong>公共的声明</strong> ： 公共的声明可以添加任何的信息，一般添加用户的相关信息或其他业务需要的必要信息.但不建议添加敏感信息，因为该部分在客户端可解密.</p>
<p><strong>私有的声明</strong> ： 私有声明是提供者和消费者所共同定义的声明，一般不建议存放敏感信息，因为base64是对称解密的，意味着该部分信息可以归类为明文信息。</p>
<p>定义一个payload:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"sub"</span>: <span class="string">"1234567890"</span>,</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"John Doe"</span>,</span><br><span class="line">  <span class="attr">"admin"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"auth"</span>: <span class="string">"2dsg343sdaq223256ddd5454"</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后将其进行base64加密，得到JWT的第二部分。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9</span><br></pre></td></tr></table></figure>

<h3 id="signature"><a href="#signature" class="headerlink" title="signature"></a>signature</h3><p>JWT的第三部分是一个签证信息，这个签证信息的主要作用并非防止解密，而是为了防止别人恶意串改，由三部分组成：</p>
<ul>
<li>header (base64后的)</li>
<li>payload (base64后的)</li>
<li>secret密钥</li>
</ul>
<p>这个部分需要base64加密后的header和base64加密后的payload使用<code>.</code>连接组成的字符串，然后通过header中声明的加密方式进行加盐<code>secret</code>组合加密，然后就构成了jwt的第三部分。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// javascript如果要模拟生成你的jwttoken，可能可以采用以下代码生成[注意：伪代码]</span></span><br><span class="line"><span class="keyword">var</span> encodedString = base64UrlEncode(header) + <span class="string">'.'</span> + base64UrlEncode(payload);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> signature = HMACSHA256(encodedString, <span class="string">'secret'</span>); <span class="comment">// TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ</span></span><br></pre></td></tr></table></figure>

<p>将这三部分用<code>.</code>连接成一个完整的字符串,构成了最终的jwt:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ</span><br></pre></td></tr></table></figure>

<p><strong>注意：secret是保存在服务器端的，jwt的签发生成也是在服务器端的，secret就是用来进行jwt的签发和jwt的验证，所以，它就是你服务端的私钥，在任何场景都不应该流露出去。一旦客户端得知这个secret, 那就意味着客户端是可以自我签发jwt了。</strong></p>
<p><strong>关于签发和核验JWT，我们可以使用Django REST framework JWT扩展来完成。</strong></p>
<p>文档网站<a href="http://getblimp.github.io/django-rest-framework-jwt/" target="_blank" rel="noopener">http://getblimp.github.io/django-rest-framework-jwt/</a></p>
<h3 id="安装配置JWT"><a href="#安装配置JWT" class="headerlink" title="安装配置JWT"></a>安装配置JWT</h3><p>安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install djangorestframework-jwt</span><br></pre></td></tr></table></figure>

<p>settings/dev.py配置文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="string">'DEFAULT_AUTHENTICATION_CLASSES'</span>: (</span><br><span class="line">        <span class="string">'rest_framework_jwt.authentication.JSONWebTokenAuthentication'</span>,</span><br><span class="line">        <span class="string">'rest_framework.authentication.SessionAuthentication'</span>,</span><br><span class="line">        <span class="string">'rest_framework.authentication.BasicAuthentication'</span>,</span><br><span class="line">    ),</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line">JWT_AUTH = &#123;</span><br><span class="line">    <span class="string">'JWT_EXPIRATION_DELTA'</span>: datetime.timedelta(days=<span class="number">1</span>),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>JWT_EXPIRATION_DELTA 指明token的有效期</li>
</ul>
<h3 id="手动生成jwt"><a href="#手动生成jwt" class="headerlink" title="手动生成jwt"></a>手动生成jwt</h3><p>Django REST framework JWT 扩展的说明文档中提供了手动签发JWT的方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from rest_framework_jwt.settings import api_settings</span><br><span class="line"></span><br><span class="line">jwt_payload_handler &#x3D; api_settings.JWT_PAYLOAD_HANDLER</span><br><span class="line">jwt_encode_handler &#x3D; api_settings.JWT_ENCODE_HANDLER</span><br><span class="line"></span><br><span class="line">payload &#x3D; jwt_payload_handler(user)</span><br><span class="line">token &#x3D; jwt_encode_handler(payload)</span><br></pre></td></tr></table></figure>

<p>在用户注册或登录成功后，在序列化器中返回用户信息以后同时返回token即可。</p>
<h3 id="后端实现登陆认证接口"><a href="#后端实现登陆认证接口" class="headerlink" title="后端实现登陆认证接口"></a>后端实现登陆认证接口</h3><p>Django REST framework JWT提供了登录获取token的视图，可以直接使用</p>
<p>在子应用users路由urls.py中</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from rest_framework_jwt.views import obtain_jwt_token</span><br><span class="line"></span><br><span class="line">urlpatterns &#x3D; [</span><br><span class="line">    path(&#39;login&#x2F;&#39;, obtain_jwt_token),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>在主路由中，引入当前子应用的路由文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">urlpatterns &#x3D; [</span><br><span class="line">		...</span><br><span class="line">    path(&#39;users&#x2F;&#39;, include(&quot;users.urls&quot;)),</span><br><span class="line">    # include 的值必须是 模块名.urls 格式,字符串中间只能出现一个圆点</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>接下来，我们可以通过postman来测试下功能</p>
<p>注意，测试之前因为我们上面自定义用户模型，所以删除了数据库信息，所以需要我们再次补充。</p>
<p><img src="/images/1553572597916.png" alt="1553572597916.png"></p>
<h2 id="前端实现登陆功能"><a href="#前端实现登陆功能" class="headerlink" title="前端实现登陆功能"></a>前端实现登陆功能</h2><p>在登陆组件中找到登陆按钮，绑定点击事件</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"login_btn"</span> @<span class="attr">click</span>=<span class="string">"loginhander"</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在methods中请求后端</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"sign"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"logo"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"/static/image/nav-logo.png"</span> <span class="attr">alt</span>=<span class="string">"Logo"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span> <span class="attr">class</span>=<span class="string">"title"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"normal-title"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">class</span>=<span class="string">"active"</span> <span class="attr">to</span>=<span class="string">"/user/login"</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">b</span>&gt;</span>·<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">"js-sign-up-btn"</span> <span class="attr">class</span>=<span class="string">""</span> <span class="attr">href</span>=<span class="string">"/register"</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"js-sign-in-container"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">"new_session"</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"input-prepend restyle js-normal"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">placeholder</span>=<span class="string">"登录账号或手机号或邮箱"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"username"</span> <span class="attr">id</span>=<span class="string">"session_email_or_mobile_number"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"iconfont ic-user"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 海外登录登录名输入框 --&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"input-prepend"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">placeholder</span>=<span class="string">"密码"</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">v-model</span>=<span class="string">"password"</span> <span class="attr">id</span>=<span class="string">"session_password"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"iconfont ic-password"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"remember-btn"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">value</span>=<span class="string">"true"</span> <span class="attr">checked</span>=<span class="string">"checked"</span> <span class="attr">v-model</span>=<span class="string">"remember_me"</span> <span class="attr">id</span>=<span class="string">"session_remember_me"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>记住我<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"forget-btn"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">""</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>登录遇到问题?<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"sign-in-button"</span> <span class="attr">id</span>=<span class="string">"sign-in-form-submit-btn"</span> <span class="attr">type</span>=<span class="string">"button"</span> @<span class="attr">click.prevent</span>=<span class="string">"loginhander"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"sign-in-loading"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>登录</span><br><span class="line">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 更多登录方式 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"more-sign"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h6</span>&gt;</span>社交帐号登录<span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">"weibo-link-wrap"</span> <span class="attr">class</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"weibo"</span> <span class="attr">id</span>=<span class="string">"weibo-link"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"iconfont ic-weibo"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">"weixin"</span> <span class="attr">class</span>=<span class="string">"weixin"</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"iconfont ic-wechat"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">"qq"</span> <span class="attr">class</span>=<span class="string">"qq"</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"iconfont ic-qq_connect"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">        name: <span class="string">"Login"</span>,</span></span><br><span class="line">        data()&#123;</span><br><span class="line"><span class="actionscript">          <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">             username:<span class="string">""</span>,</span></span><br><span class="line"><span class="actionscript">             password:<span class="string">""</span>,</span></span><br><span class="line"><span class="actionscript">             remember_me: <span class="literal">false</span>,</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line"><span class="actionscript">          <span class="comment">// 登录</span></span></span><br><span class="line">          loginhander()&#123;</span><br><span class="line"><span class="actionscript">            <span class="keyword">this</span>.$axios.post(<span class="keyword">this</span>.$settings.Host+<span class="string">"/users/login/"</span>,</span></span><br><span class="line">              &#123;</span><br><span class="line"><span class="actionscript">                <span class="string">"username"</span>:<span class="keyword">this</span>.username,</span></span><br><span class="line"><span class="actionscript">                <span class="string">"password"</span>:<span class="keyword">this</span>.password</span></span><br><span class="line"><span class="javascript">              &#125;).then(<span class="function"><span class="params">response</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="javascript">              <span class="built_in">console</span>.log(response.data)</span></span><br><span class="line"><span class="javascript">              &#125;).catch(<span class="function"><span class="params">error</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(error);</span></span><br><span class="line">              &#125;)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-3-7-前端保存jwt"><a href="#2-3-7-前端保存jwt" class="headerlink" title="2.3.7 前端保存jwt"></a>2.3.7 前端保存jwt</h3><p>我们可以将JWT保存在cookie中，也可以保存在浏览器的本地存储里，我们保存在浏览器本地存储中</p>
<p>浏览器的本地存储提供了sessionStorage 和 localStorage 两种：</p>
<ul>
<li><strong>sessionStorage</strong> 浏览器关闭即失效</li>
<li><strong>localStorage</strong> 长期有效</li>
</ul>
<p>使用方法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sessionStorage.变量名 = 变量值   // 保存数据</span><br><span class="line">sessionStorage.变量名  // 读取数据</span><br><span class="line">sessionStorage.clear()  // 清除所有sessionStorage保存的数据</span><br><span class="line"></span><br><span class="line">localStorage.变量名 = 变量值   // 保存数据</span><br><span class="line">localStorage.变量名  // 读取数据</span><br><span class="line">localStorage.clear()  // 清除所有localStorage保存的数据</span><br></pre></td></tr></table></figure>

<p>登陆组件代码Login.vue</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">methods:&#123;</span><br><span class="line">          <span class="comment">// 登录</span></span><br><span class="line">          loginhander()&#123;</span><br><span class="line">            <span class="keyword">this</span>.$axios.post(<span class="keyword">this</span>.$settings.Host+<span class="string">"/users/login/"</span>,</span><br><span class="line">              &#123;</span><br><span class="line">                <span class="string">"username"</span>:<span class="keyword">this</span>.username,</span><br><span class="line">                <span class="string">"password"</span>:<span class="keyword">this</span>.password</span><br><span class="line">              &#125;).then(<span class="function"><span class="params">response</span>=&gt;</span>&#123;</span><br><span class="line">                  <span class="comment">// 使用浏览器本地存储保存token</span></span><br><span class="line">                  <span class="keyword">if</span> (<span class="keyword">this</span>.remember_me) &#123;</span><br><span class="line">                    <span class="comment">// 记住登录</span></span><br><span class="line">                    sessionStorage.clear();</span><br><span class="line">                    localStorage.user_token = response.data.token;</span><br><span class="line">                  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// 未记住登录</span></span><br><span class="line">                    localStorage.clear();</span><br><span class="line">                    sessionStorage.user_token = response.data.token;</span><br><span class="line">                  &#125;</span><br><span class="line"></span><br><span class="line">                  <span class="keyword">this</span>.$confirm(<span class="string">'登录成功, 欢迎回来！'</span>, <span class="string">'提示'</span>, &#123;</span><br><span class="line">                    confirmButtonText: <span class="string">'返回首页'</span>,</span><br><span class="line">                    cancelButtonText: <span class="string">'返回上一页'</span>,</span><br><span class="line">                    type: <span class="string">'success'</span></span><br><span class="line">                  &#125;).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">this</span>.$router.push(<span class="string">"/"</span>);</span><br><span class="line">                  &#125;).catch(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">this</span>.$router.go(<span class="number">-1</span>);</span><br><span class="line">                  &#125;);</span><br><span class="line"></span><br><span class="line">              &#125;).catch(<span class="function"><span class="params">error</span>=&gt;</span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(error);</span><br><span class="line">              &#125;)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br></pre></td></tr></table></figure>

<p>默认的返回值仅有token，我们还需在返回值中增加username和id，方便在客户端页面中显示当前登陆用户</p>
<p>通过修改该视图的返回值可以完成我们的需求。</p>
<p>在users/utils.py 中，创建</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">def jwt_response_payload_handler(token, user=None, request=None):</span><br><span class="line">    <span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string">    自定义jwt认证成功返回数据</span></span><br><span class="line"><span class="string">    "</span><span class="string">""</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="string">'token'</span>: token,</span><br><span class="line">        <span class="string">'id'</span>: user.id,</span><br><span class="line">        <span class="string">'username'</span>: user.username,</span><br><span class="line">        <span class="string">'avatar'</span>: user.avatar.url,</span><br><span class="line">        <span class="string">'nickname'</span>: user.nickname,</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>修改settings/dev.py配置文件</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"># JWT</span><br><span class="line">JWT_AUTH = &#123;</span><br><span class="line">    <span class="string">'JWT_EXPIRATION_DELTA'</span>: datetime.timedelta(days=<span class="number">1</span>),</span><br><span class="line">    <span class="string">'JWT_RESPONSE_PAYLOAD_HANDLER'</span>: <span class="string">'users.utils.jwt_response_payload_handler'</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>登陆组件代码Login.vue</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">methods:&#123;</span><br><span class="line">          <span class="comment">// 登录</span></span><br><span class="line">          loginhander()&#123;</span><br><span class="line">            <span class="keyword">this</span>.$axios.post(<span class="keyword">this</span>.$settings.Host+<span class="string">"/users/login/"</span>,</span><br><span class="line">              &#123;</span><br><span class="line">                <span class="string">"username"</span>:<span class="keyword">this</span>.username,</span><br><span class="line">                <span class="string">"password"</span>:<span class="keyword">this</span>.password</span><br><span class="line">              &#125;).then(<span class="function"><span class="params">response</span>=&gt;</span>&#123;</span><br><span class="line">                  <span class="comment">// 使用浏览器本地存储保存token</span></span><br><span class="line">                  <span class="keyword">if</span> (<span class="keyword">this</span>.remember_me) &#123;</span><br><span class="line">                    <span class="comment">// 记住登录</span></span><br><span class="line">                    sessionStorage.removeItem(<span class="string">"user_token"</span>);</span><br><span class="line">                    sessionStorage.removeItem(<span class="string">"user_id"</span>);</span><br><span class="line">                    sessionStorage.removeItem(<span class="string">"user_name"</span>);</span><br><span class="line">                    sessionStorage.removeItem(<span class="string">"user_avatar"</span>);</span><br><span class="line">                    sessionStorage.removeItem(<span class="string">"user_nickname"</span>);</span><br><span class="line">                    localStorage.user_token = response.data.token;</span><br><span class="line">                    localStorage.user_id = response.data.id;</span><br><span class="line">                    localStorage.user_name = response.data.username;</span><br><span class="line">                    localStorage.user_avatar = response.data.avatar;</span><br><span class="line">                    localStorage.user_nickname = response.data.nickname;</span><br><span class="line">                  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// 未记住登录</span></span><br><span class="line">                    localStorage.removeItem(<span class="string">"user_token"</span>);</span><br><span class="line">                    localStorage.removeItem(<span class="string">"user_id"</span>);</span><br><span class="line">                    localStorage.removeItem(<span class="string">"user_name"</span>);</span><br><span class="line">                    localStorage.removeItem(<span class="string">"user_avatar"</span>);</span><br><span class="line">                    localStorage.removeItem(<span class="string">"user_nickname"</span>);</span><br><span class="line">                    sessionStorage.user_token = response.data.token;</span><br><span class="line">                    sessionStorage.user_id = response.data.id;</span><br><span class="line">                    sessionStorage.user_name = response.data.username;</span><br><span class="line">                    sessionStorage.user_avatar = response.data.avatar;</span><br><span class="line">                    sessionStorage.user_nickname = response.data.nickname;</span><br><span class="line">                  &#125;</span><br><span class="line">                  <span class="keyword">this</span>.$confirm(<span class="string">'登录成功, 欢迎回来！'</span>, <span class="string">'提示'</span>, &#123;</span><br><span class="line">                    confirmButtonText: <span class="string">'返回首页'</span>,</span><br><span class="line">                    cancelButtonText: <span class="string">'返回上一页'</span>,</span><br><span class="line">                    type: <span class="string">'success'</span></span><br><span class="line">                  &#125;).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">this</span>.$router.push(<span class="string">"/"</span>);</span><br><span class="line">                  &#125;).catch(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">this</span>.$router.go(<span class="number">-1</span>);</span><br><span class="line">                  &#125;);</span><br><span class="line"></span><br><span class="line">              &#125;).catch(<span class="function"><span class="params">error</span>=&gt;</span>&#123;</span><br><span class="line">                  <span class="keyword">this</span>.$message.error(<span class="string">"登录失败！账号或密码错误！"</span>);</span><br><span class="line">                  <span class="keyword">this</span>.username = <span class="string">""</span>;</span><br><span class="line">                  <span class="keyword">this</span>.password = <span class="string">""</span>;</span><br><span class="line">              &#125;)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br></pre></td></tr></table></figure>

<h3 id="2-3-9-多条件登录"><a href="#2-3-9-多条件登录" class="headerlink" title="2.3.9 多条件登录"></a>2.3.9 多条件登录</h3><p>JWT扩展的登录视图，在收到用户名与密码时，也是调用Django的认证系统中提供的<strong>authenticate()</strong>来检查用户名与密码是否正确。</p>
<p>我们可以通过修改Django认证系统的认证后端（主要是authenticate方法）来支持登录账号既可以是用户名也可以是手机号。</p>
<p><strong>修改Django认证系统的认证后端需要继承django.contrib.auth.backends.ModelBackend，并重写authenticate方法。</strong></p>
<p><code>authenticate(self, request, username=None, password=None, **kwargs)</code>方法的参数说明：</p>
<ul>
<li>request 本次认证的请求对象</li>
<li>username 本次认证提供的用户账号</li>
<li>password 本次认证提供的密码</li>
</ul>
<p><strong>我们想要让用户既可以以用户名登录，也可以以手机号登录，那么对于authenticate方法而言，username参数即表示用户名或者手机号。</strong></p>
<p>重写authenticate方法的思路：</p>
<ol>
<li>根据username参数查找用户User对象，username参数可能是用户名，也可能是手机号</li>
<li>若查找到User对象，调用User对象的 check_password 方法检查密码是否正确</li>
</ol>
<p>在users/utils.py中编写：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib.auth.backends <span class="keyword">import</span> ModelBackend</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> User</span><br><span class="line"><span class="keyword">from</span> django.db.models <span class="keyword">import</span> Q</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_user_by_account</span><span class="params">(account)</span>:</span></span><br><span class="line">    <span class="string">"""根据账号信息获取用户模型"""</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        user = User.objects.get(Q(mobile=account) | Q(email=account)| Q(username=account))</span><br><span class="line">    <span class="keyword">except</span> User.DoesNotExist:</span><br><span class="line">        user = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> user</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UsernameMobileAuthBackend</span><span class="params">(ModelBackend)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">authenticate</span><span class="params">(self, request, username=None, password=None, **kwargs)</span>:</span></span><br><span class="line">        <span class="comment"># 进行登录判断</span></span><br><span class="line">        user = get_user_by_account(username)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 账号通过了还要进行密码的验证,以及判断当前站好是否是激活状态</span></span><br><span class="line">        <span class="keyword">if</span> isinstance(user,User) <span class="keyword">and</span> user.check_password(password) <span class="keyword">and</span> self.user_can_authenticate(user):</span><br><span class="line">            <span class="keyword">return</span> user</span><br></pre></td></tr></table></figure>

<p>在配置文件settings/dev.py中告知Django使用我们自定义的认证后端</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">AUTHENTICATION_BACKENDS = [</span><br><span class="line">    <span class="string">'users.utils.UsernameMobileAuthBackend'</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h2 id="在登录认证中接入腾讯防水墙验证码"><a href="#在登录认证中接入腾讯防水墙验证码" class="headerlink" title="在登录认证中接入腾讯防水墙验证码"></a>在登录认证中接入腾讯防水墙验证码</h2><p>官网： <a href="https://007.qq.com/" target="_blank" rel="noopener">https://007.qq.com</a></p>
<p>使用微信扫码登录腾讯云控制台，然后根据官方文档，把验证码集成到项目中</p>
<p>快速接入：<a href="https://007.qq.com/python-access.html?ADTAG=acces.start" target="_blank" rel="noopener">https://007.qq.com/python-access.html?ADTAG=acces.start</a></p>
<ol>
<li><p>访问地址: <a href="https://cloud.tencent.com/document/product/1110/36839" target="_blank" rel="noopener">https://cloud.tencent.com/document/product/1110/36839</a></p>
</li>
<li><p>访问云API秘钥</p>
</li>
<li><p>访问验证码控制台: <a href="https://console.cloud.tencent.com/captcha" target="_blank" rel="noopener">https://console.cloud.tencent.com/captcha</a></p>
</li>
<li><p>新建验证[ 新用户可以领取一个免费的验证码套餐 ]</p>
<p><img src="/images/1578277301522.png" alt="1578277301522.png"></p>
</li>
</ol>
<p><img src="/images/1578277415727.png" alt="1578277415727.png"></p>
<p>点击详情:</p>
<p><img src="/images/1578277442350.png" alt="1578277442350.png"></p>
<p>获取当前验证码应用的应用ID和应用秘钥.</p>
<p><img src="/images/1578277500168.png" alt="1578277500168.png"></p>
<p>把秘钥和ID保存到settings/dev.py配置文件中.</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"># 腾讯防水墙配置</span><br><span class="line">TENCENT_CAPTCHA = &#123;</span><br><span class="line">    "GATEWAY": "https://ssl.captcha.qq.com/ticket/verify",</span><br><span class="line">    "APPID": "2086888489",</span><br><span class="line">    "App_Secret_Key": "0TGMvQXvBZ54r9bOWrNYEhA**",</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="前端获取显示并校验验证码"><a href="#前端获取显示并校验验证码" class="headerlink" title="前端获取显示并校验验证码"></a>前端获取显示并校验验证码</h3><p>把防水墙的前端核心js文件通过index.html引入。</p>
<p>下载地址：<a href="https://ssl.captcha.qq.com/TCaptcha.js" target="_blank" rel="noopener">https://ssl.captcha.qq.com/TCaptcha.js</a></p>
<p>在settings.js中添加配置：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">export default &#123;</span><br><span class="line">  Host:"http://api.renran.cn:8000",</span><br><span class="line">  TC_captcha:&#123;</span><br><span class="line">    app_id: "2086888489",</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Login.vue代码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"sign"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"logo"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"/static/image/nav-logo.png"</span> <span class="attr">alt</span>=<span class="string">"Logo"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span> <span class="attr">class</span>=<span class="string">"title"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"normal-title"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">class</span>=<span class="string">"active"</span> <span class="attr">to</span>=<span class="string">"/user/login"</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">b</span>&gt;</span>·<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">"js-sign-up-btn"</span> <span class="attr">class</span>=<span class="string">""</span> <span class="attr">href</span>=<span class="string">"/register"</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"js-sign-in-container"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">"new_session"</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"input-prepend restyle js-normal"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">placeholder</span>=<span class="string">"登录账号或手机号或邮箱"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"username"</span> <span class="attr">id</span>=<span class="string">"session_email_or_mobile_number"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"iconfont ic-user"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 海外登录登录名输入框 --&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"input-prepend"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">placeholder</span>=<span class="string">"密码"</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">v-model</span>=<span class="string">"password"</span> <span class="attr">id</span>=<span class="string">"session_password"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"iconfont ic-password"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"remember-btn"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">value</span>=<span class="string">"true"</span> <span class="attr">checked</span>=<span class="string">"checked"</span> <span class="attr">v-model</span>=<span class="string">"remember_me"</span> <span class="attr">id</span>=<span class="string">"session_remember_me"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>记住我<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"forget-btn"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">""</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>登录遇到问题?<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"sign-in-button"</span> <span class="attr">id</span>=<span class="string">"sign-in-form-submit-btn"</span> <span class="attr">type</span>=<span class="string">"button"</span> @<span class="attr">click.prevent</span>=<span class="string">"show_captcha"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"sign-in-loading"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>登录</span><br><span class="line">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 更多登录方式 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"more-sign"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h6</span>&gt;</span>社交帐号登录<span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">"weibo-link-wrap"</span> <span class="attr">class</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"weibo"</span> <span class="attr">id</span>=<span class="string">"weibo-link"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"iconfont ic-weibo"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">"weixin"</span> <span class="attr">class</span>=<span class="string">"weixin"</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"iconfont ic-wechat"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">"qq"</span> <span class="attr">class</span>=<span class="string">"qq"</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"iconfont ic-qq_connect"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="meta"><span class="meta-keyword">import</span> "../../static/js/TCaptcha";</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">        name: <span class="string">"Login"</span>,</span></span><br><span class="line">        data()&#123;</span><br><span class="line"><span class="actionscript">          <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">             username:<span class="string">""</span>,</span></span><br><span class="line"><span class="actionscript">             password:<span class="string">""</span>,</span></span><br><span class="line"><span class="actionscript">             remember_me: <span class="literal">false</span>,</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line"><span class="actionscript">          <span class="comment">// 登录</span></span></span><br><span class="line">          loginhander()&#123;</span><br><span class="line"><span class="actionscript">            <span class="keyword">this</span>.$axios.post(<span class="keyword">this</span>.$settings.Host+<span class="string">"/users/login/"</span>,</span></span><br><span class="line">              &#123;</span><br><span class="line"><span class="actionscript">                <span class="string">"username"</span>:<span class="keyword">this</span>.username,</span></span><br><span class="line"><span class="actionscript">                <span class="string">"password"</span>:<span class="keyword">this</span>.password</span></span><br><span class="line"><span class="javascript">              &#125;).then(<span class="function"><span class="params">response</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="actionscript">                  <span class="comment">// 使用浏览器本地存储保存token</span></span></span><br><span class="line"><span class="actionscript">                  <span class="keyword">if</span> (<span class="keyword">this</span>.remember_me) &#123;</span></span><br><span class="line"><span class="actionscript">                    <span class="comment">// 记住登录</span></span></span><br><span class="line"><span class="actionscript">                    sessionStorage.removeItem(<span class="string">"user_token"</span>);</span></span><br><span class="line"><span class="actionscript">                    sessionStorage.removeItem(<span class="string">"user_id"</span>);</span></span><br><span class="line"><span class="actionscript">                    sessionStorage.removeItem(<span class="string">"user_name"</span>);</span></span><br><span class="line"><span class="actionscript">                    sessionStorage.removeItem(<span class="string">"user_avatar"</span>);</span></span><br><span class="line">                    localStorage.user_token = response.data.token;</span><br><span class="line">                    localStorage.user_id = response.data.id;</span><br><span class="line">                    localStorage.user_name = response.data.username;</span><br><span class="line">                    localStorage.user_avatar = response.data.avatar;</span><br><span class="line"><span class="actionscript">                  &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="actionscript">                    <span class="comment">// 未记住登录</span></span></span><br><span class="line"><span class="actionscript">                    localStorage.removeItem(<span class="string">"user_token"</span>);</span></span><br><span class="line"><span class="actionscript">                    localStorage.removeItem(<span class="string">"user_id"</span>);</span></span><br><span class="line"><span class="actionscript">                    localStorage.removeItem(<span class="string">"user_name"</span>);</span></span><br><span class="line"><span class="actionscript">                    localStorage.removeItem(<span class="string">"user_avatar"</span>);</span></span><br><span class="line">                    sessionStorage.user_token = response.data.token;</span><br><span class="line">                    sessionStorage.user_id = response.data.id;</span><br><span class="line">                    sessionStorage.user_name = response.data.username;</span><br><span class="line">                    sessionStorage.user_avatar = response.data.avatar;</span><br><span class="line">                  &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">                  <span class="keyword">this</span>.$confirm(<span class="string">'登录成功, 欢迎回来！'</span>, <span class="string">'提示'</span>, &#123;</span></span><br><span class="line"><span class="actionscript">                    confirmButtonText: <span class="string">'返回首页'</span>,</span></span><br><span class="line"><span class="actionscript">                    cancelButtonText: <span class="string">'返回上一页'</span>,</span></span><br><span class="line"><span class="actionscript">                    type: <span class="string">'success'</span></span></span><br><span class="line"><span class="javascript">                  &#125;).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">this</span>.$router.push(<span class="string">"/"</span>);</span></span><br><span class="line"><span class="javascript">                  &#125;).catch(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">this</span>.$router.go(<span class="number">-1</span>);</span></span><br><span class="line">                  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="javascript">              &#125;).catch(<span class="function"><span class="params">error</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="actionscript">                  <span class="keyword">this</span>.$message.error(<span class="string">"登录失败！账号或密码错误！"</span>);</span></span><br><span class="line"><span class="actionscript">                  <span class="keyword">this</span>.username = <span class="string">""</span>;</span></span><br><span class="line"><span class="actionscript">                  <span class="keyword">this</span>.password = <span class="string">""</span>;</span></span><br><span class="line">              &#125;)</span><br><span class="line">          &#125;,</span><br><span class="line">          show_captcha()&#123;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">            <span class="comment">// 判断手机号或者密码是否为空！</span></span></span><br><span class="line"><span class="actionscript">            <span class="keyword">if</span>(<span class="keyword">this</span>.username.length&lt;<span class="number">1</span> || <span class="keyword">this</span>.password.length&lt;<span class="number">1</span>)&#123;</span></span><br><span class="line"><span class="actionscript">              <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// 阻止代码继续往下执行</span></span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">            <span class="comment">// 验证码</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> self = <span class="keyword">this</span>;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 生成一个验证码对象</span></span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> captcha1 = <span class="keyword">new</span> TencentCaptcha(<span class="keyword">this</span>.$settings.TC_captcha.app_id, <span class="function"><span class="keyword">function</span><span class="params">(res)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">              <span class="built_in">console</span>.log(res);</span></span><br><span class="line"><span class="actionscript">              <span class="comment">// res（未通过验证）= &#123;ret: 1, ticket: null&#125;</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">              <span class="comment">// ticket 验证成功的票据，当且仅当ret=0时ticket有值</span></span></span><br><span class="line"><span class="actionscript">              <span class="comment">// res（验证成功） = &#123;ret: 0, ticket: "String", randstr: "String"&#125;</span></span></span><br><span class="line">              if (res.ret === 0) &#123;</span><br><span class="line"><span class="actionscript">                <span class="comment">// 随机码</span></span></span><br><span class="line"><span class="actionscript">                <span class="comment">// api服务端校验验证码的结果</span></span></span><br><span class="line"><span class="javascript">                self.$axios.get(<span class="string">`<span class="subst">$&#123;self.$settings.Host&#125;</span>/users/captcha/`</span>,&#123;</span></span><br><span class="line">                  params:&#123;</span><br><span class="line">                    ticket: res.ticket,</span><br><span class="line">                    randstr: res.randstr,</span><br><span class="line">                  &#125;</span><br><span class="line"><span class="javascript">                &#125;).then(<span class="function"><span class="params">response</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="actionscript">                  <span class="comment">// 进行登录处理</span></span></span><br><span class="line">                  self.loginhander();</span><br><span class="line"><span class="javascript">                &#125;).catch(<span class="function"><span class="params">error</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="actionscript">                  self.$message.error(<span class="string">"验证码校验错误！"</span>);</span></span><br><span class="line">                &#125;)</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line"><span class="actionscript">            <span class="comment">// 显示验证码</span></span></span><br><span class="line">            captcha1.show();</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line">input&#123;</span><br><span class="line">  outline: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="css">*, <span class="selector-pseudo">:after</span>, <span class="selector-pseudo">:before</span> &#123;</span></span><br><span class="line">    box-sizing: border-box;</span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> &#123;</span></span><br><span class="line">    height: 100%;</span><br><span class="line">    min-height: 750px;</span><br><span class="line">    text-align: center;</span><br><span class="line">    font-size: 14px;</span><br><span class="line"><span class="css">    <span class="selector-tag">background-color</span>: <span class="selector-id">#f1f1f1</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span><span class="selector-pseudo">:before</span> &#123;</span></span><br><span class="line">    content: "";</span><br><span class="line">    display: inline-block;</span><br><span class="line">    height: 85%;</span><br><span class="line">    vertical-align: middle</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.disable</span>,<span class="selector-class">.sign</span> <span class="selector-class">.disable-gray</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">opacity</span>: <span class="selector-class">.5</span>;</span></span><br><span class="line">    pointer-events: none</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.disable-gray</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">background-color</span>: <span class="selector-id">#969696</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.tooltip-error</span> &#123;</span></span><br><span class="line">    font-size: 14px;</span><br><span class="line">    line-height: 25px;</span><br><span class="line">    white-space: nowrap;</span><br><span class="line">    background: none</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.tooltip-error</span> <span class="selector-class">.tooltip-inner</span> &#123;</span></span><br><span class="line">    max-width: 280px;</span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#333</span>;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ea6f5a</span>;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">background-color</span>: <span class="selector-id">#fff</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.tooltip-error</span> <span class="selector-class">.tooltip-inner</span> <span class="selector-tag">i</span> &#123;</span></span><br><span class="line">    position: static;</span><br><span class="line">    margin-right: 5px;</span><br><span class="line">    font-size: 20px;</span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#ea6f5a</span>;</span></span><br><span class="line">    vertical-align: middle</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.tooltip-error</span> <span class="selector-class">.tooltip-inner</span> <span class="selector-tag">span</span> &#123;</span></span><br><span class="line">    vertical-align: middle;</span><br><span class="line">    display: inline-block;</span><br><span class="line">    white-space: normal;</span><br><span class="line">    max-width: 230px</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.tooltip-error</span><span class="selector-class">.right</span> <span class="selector-class">.tooltip-arrow-border</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">border-right-color</span>: <span class="selector-id">#ea6f5a</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.tooltip-error</span><span class="selector-class">.right</span> <span class="selector-class">.tooltip-arrow-bg</span> &#123;</span></span><br><span class="line">    left: 2px;</span><br><span class="line"><span class="css">    <span class="selector-tag">border-right-color</span>: <span class="selector-id">#fff</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.slide-error</span> &#123;</span></span><br><span class="line">    position: relative;</span><br><span class="line">    padding: 10px 0;</span><br><span class="line"><span class="css">    <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#c8c8c8</span>;</span></span><br><span class="line">    border-radius: 4px</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.slide-error</span> <span class="selector-tag">i</span> &#123;</span></span><br><span class="line">    position: static!important;</span><br><span class="line">    margin-right: 10px;</span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#ea6f5a</span>!<span class="selector-tag">important</span>;</span></span><br><span class="line">    vertical-align: middle</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.slide-error</span> <span class="selector-tag">span</span> &#123;</span></span><br><span class="line">    font-size: 15px;</span><br><span class="line">    vertical-align: middle</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.slide-error</span> <span class="selector-tag">div</span> &#123;</span></span><br><span class="line">    margin-top: 10px;</span><br><span class="line">    font-size: 13px</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.slide-error</span> <span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#3194d0</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.js-sign-up-forbidden</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#999</span>;</span></span><br><span class="line">    padding: 80px 0 100px</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.js-sign-up-container</span> <span class="selector-class">.slide-error</span> &#123;</span></span><br><span class="line">    border-bottom: none;</span><br><span class="line">    border-radius: 0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.logo</span> &#123;</span></span><br><span class="line">    position: absolute;</span><br><span class="line">    top: 56px;</span><br><span class="line">    margin-left: 50px</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.logo</span> <span class="selector-tag">img</span> &#123;</span></span><br><span class="line">    width: 100px</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.main</span> &#123;</span></span><br><span class="line">    width: 400px;</span><br><span class="line">    margin: 60px auto 0;</span><br><span class="line">    padding: 50px 50px 30px;</span><br><span class="line"><span class="css">    <span class="selector-tag">background-color</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line">    border-radius: 4px;</span><br><span class="line"><span class="css">    <span class="selector-tag">box-shadow</span>: 0 0 8<span class="selector-tag">px</span> <span class="selector-tag">rgba</span>(0,0,0,<span class="selector-class">.1</span>);</span></span><br><span class="line">    vertical-align: middle;</span><br><span class="line">    display: inline-block</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.reset-title</span>,<span class="selector-class">.sign</span> <span class="selector-class">.title</span> &#123;</span></span><br><span class="line">    margin: 0 auto 50px;</span><br><span class="line">    padding: 10px;</span><br><span class="line">    font-weight: 400;</span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#969696</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.reset-title</span> <span class="selector-tag">a</span>,<span class="selector-class">.sign</span> <span class="selector-class">.title</span> <span class="selector-tag">a</span> &#123;</span></span><br><span class="line">    padding: 10px;</span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#969696</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.reset-title</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>,<span class="selector-class">.sign</span> <span class="selector-class">.title</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">border-bottom</span>: 2<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ea6f5a</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.reset-title</span> <span class="selector-class">.active</span>,<span class="selector-class">.sign</span> <span class="selector-class">.title</span> <span class="selector-class">.active</span> &#123;</span></span><br><span class="line">    font-weight: 700;</span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#ea6f5a</span>;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">border-bottom</span>: 2<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ea6f5a</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.reset-title</span> <span class="selector-tag">b</span>,<span class="selector-class">.sign</span> <span class="selector-class">.title</span> <span class="selector-tag">b</span> &#123;</span></span><br><span class="line">    padding: 10px</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.reset-title</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#333</span>;</span></span><br><span class="line">    font-weight: 700</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-tag">form</span> &#123;</span></span><br><span class="line">    margin-bottom: 30px</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-tag">form</span> <span class="selector-class">.input-prepend</span> &#123;</span></span><br><span class="line">    position: relative;</span><br><span class="line">    width: 100%</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-tag">form</span> <span class="selector-class">.input-prepend</span> <span class="selector-tag">input</span> &#123;</span></span><br><span class="line">    width: 100%;</span><br><span class="line">    height: 50px;</span><br><span class="line">    margin-bottom: 0;</span><br><span class="line">    padding: 4px 12px 4px 35px;</span><br><span class="line"><span class="css">    <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#c8c8c8</span>;</span></span><br><span class="line">    border-radius: 0 0 4px 4px;</span><br><span class="line"><span class="css">    <span class="selector-tag">background-color</span>: <span class="selector-tag">hsla</span>(0,0%,71%,<span class="selector-class">.1</span>);</span></span><br><span class="line">    vertical-align: middle</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-tag">form</span> <span class="selector-class">.input-prepend</span> <span class="selector-tag">i</span> &#123;</span></span><br><span class="line">    position: absolute;</span><br><span class="line">    top: 14px;</span><br><span class="line">    left: 10px;</span><br><span class="line">    font-size: 18px;</span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#969696</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-tag">form</span> <span class="selector-class">.input-prepend</span> <span class="selector-tag">span</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#333</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-tag">form</span> <span class="selector-class">.input-prepend</span> <span class="selector-class">.ic-show</span> &#123;</span></span><br><span class="line">    top: 18px;</span><br><span class="line">    left: auto;</span><br><span class="line">    right: 8px;</span><br><span class="line">    font-size: 12px</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-tag">form</span> <span class="selector-class">.geetest-placeholder</span> &#123;</span></span><br><span class="line">    height: 44px;</span><br><span class="line">    border-radius: 4px;</span><br><span class="line"><span class="css">    <span class="selector-tag">background-color</span>: <span class="selector-tag">hsla</span>(0,0%,71%,<span class="selector-class">.1</span>);</span></span><br><span class="line">    text-align: center;</span><br><span class="line">    line-height: 44px;</span><br><span class="line">    font-size: 14px;</span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#999</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-tag">form</span> <span class="selector-class">.restyle</span> &#123;</span></span><br><span class="line">    margin-bottom: 0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-tag">form</span> <span class="selector-class">.restyle</span> <span class="selector-tag">input</span> &#123;</span></span><br><span class="line">    border-bottom: none;</span><br><span class="line">    border-radius: 4px 4px 0 0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-tag">form</span> <span class="selector-class">.no-radius</span> <span class="selector-tag">input</span> &#123;</span></span><br><span class="line">    border-radius: 0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-tag">form</span> <span class="selector-class">.slide-security-placeholder</span> &#123;</span></span><br><span class="line">    height: 32px;</span><br><span class="line"><span class="css">    <span class="selector-tag">background-color</span>: <span class="selector-tag">hsla</span>(0,0%,71%,<span class="selector-class">.1</span>);</span></span><br><span class="line">    border-radius: 4px</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-tag">form</span> <span class="selector-class">.slide-security-placeholder</span> <span class="selector-tag">p</span> &#123;</span></span><br><span class="line">    padding-top: 7px;</span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#999</span>;</span></span><br><span class="line">    margin-right: -7px</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.overseas-btn</span> &#123;</span></span><br><span class="line">    font-size: 14px;</span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#999</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.overseas-btn</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#2f2f2f</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.remember-btn</span> &#123;</span></span><br><span class="line">    float: left;</span><br><span class="line">    margin: 15px 0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.remember-btn</span> <span class="selector-tag">span</span> &#123;</span></span><br><span class="line">    margin-left: 5px;</span><br><span class="line">    font-size: 15px;</span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#969696</span>;</span></span><br><span class="line">    vertical-align: middle</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.forget-btn</span> &#123;</span></span><br><span class="line">    float: right;</span><br><span class="line">    position: relative;</span><br><span class="line">    margin: 15px 0;</span><br><span class="line">    font-size: 14px</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.forget-btn</span> <span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#999</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.forget-btn</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#333</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.forget-btn</span> <span class="selector-class">.dropdown-menu</span> &#123;</span></span><br><span class="line">    top: 20px;</span><br><span class="line">    left: auto;</span><br><span class="line">    right: 0;</span><br><span class="line">    border-radius: 4px</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.forget-btn</span> <span class="selector-class">.dropdown-menu</span> <span class="selector-tag">a</span> &#123;</span></span><br><span class="line">    padding: 10px 20px;</span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#333</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-id">#sign-in-loading</span> &#123;</span></span><br><span class="line">    position: relative;</span><br><span class="line">    width: 20px;</span><br><span class="line">    height: 20px;</span><br><span class="line">    vertical-align: middle;</span><br><span class="line">    margin-top: -4px;</span><br><span class="line">    margin-right: 2px;</span><br><span class="line">    display: none</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-id">#sign-in-loading</span><span class="selector-pseudo">:after</span> &#123;</span></span><br><span class="line">    content: "";</span><br><span class="line">    position: absolute;</span><br><span class="line">    left: 0;</span><br><span class="line">    top: 0;</span><br><span class="line">    width: 100%;</span><br><span class="line">    height: 100%;</span><br><span class="line">    background-color: transparent</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-id">#sign-in-loading</span><span class="selector-pseudo">:before</span> &#123;</span></span><br><span class="line">    content: "";</span><br><span class="line">    position: absolute;</span><br><span class="line">    top: 50%;</span><br><span class="line">    left: 50%;</span><br><span class="line">    width: 20px;</span><br><span class="line">    height: 20px;</span><br><span class="line">    margin: -10px 0 0 -10px;</span><br><span class="line">    border-radius: 10px;</span><br><span class="line"><span class="css">    <span class="selector-tag">border</span>: 2<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#fff</span>;</span></span><br><span class="line">    border-bottom-color: transparent;</span><br><span class="line">    vertical-align: middle;</span><br><span class="line"><span class="css">    <span class="selector-tag">-webkit-animation</span>: <span class="selector-tag">rolling</span> <span class="selector-class">.8s</span> <span class="selector-tag">infinite</span> <span class="selector-tag">linear</span>;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">animation</span>: <span class="selector-tag">rolling</span> <span class="selector-class">.8s</span> <span class="selector-tag">infinite</span> <span class="selector-tag">linear</span>;</span></span><br><span class="line">    z-index: 1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.sign-in-button</span>,<span class="selector-class">.sign</span> <span class="selector-class">.sign-up-button</span> &#123;</span></span><br><span class="line">    margin-top: 20px;</span><br><span class="line">    width: 100%;</span><br><span class="line">    padding: 9px 18px;</span><br><span class="line">    font-size: 18px;</span><br><span class="line">    border: none;</span><br><span class="line">    border-radius: 25px;</span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">background</span>: <span class="selector-id">#42c02e</span>;</span></span><br><span class="line">    cursor: pointer;</span><br><span class="line">    outline: none;</span><br><span class="line">    display: block;</span><br><span class="line">    clear: both</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.sign-in-button</span><span class="selector-pseudo">:hover</span>,<span class="selector-class">.sign</span> <span class="selector-class">.sign-up-button</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">background</span>: <span class="selector-id">#3db922</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.sign-in-button</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">background</span>: <span class="selector-id">#3194d0</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.sign-in-button</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">background</span>: <span class="selector-id">#187cb7</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.btn-in-resend</span>,<span class="selector-class">.sign</span> <span class="selector-class">.btn-up-resend</span> &#123;</span></span><br><span class="line">    position: absolute;</span><br><span class="line">    top: 7px;</span><br><span class="line">    right: 7px;</span><br><span class="line">    width: 100px;</span><br><span class="line">    height: 36px;</span><br><span class="line">    font-size: 13px;</span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">background-color</span>: <span class="selector-id">#42c02e</span>;</span></span><br><span class="line">    border-radius: 20px;</span><br><span class="line">    line-height: 36px</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.btn-in-resend</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">background-color</span>: <span class="selector-id">#3194d0</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.sign-up-msg</span> &#123;</span></span><br><span class="line">    margin: 10px 0;</span><br><span class="line">    padding: 0;</span><br><span class="line">    text-align: center;</span><br><span class="line">    font-size: 12px;</span><br><span class="line">    line-height: 20px;</span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#969696</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.sign-up-msg</span> <span class="selector-tag">a</span>,<span class="selector-class">.sign</span> <span class="selector-class">.sign-up-msg</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#3194d0</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.overseas</span> <span class="selector-tag">input</span> &#123;</span></span><br><span class="line">    padding-left: 110px!important</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.overseas</span> <span class="selector-class">.overseas-number</span> &#123;</span></span><br><span class="line">    position: absolute;</span><br><span class="line">    top: 0;</span><br><span class="line">    left: 0;</span><br><span class="line">    width: 100px;</span><br><span class="line">    height: 50px;</span><br><span class="line">    font-size: 18px;</span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#969696</span>;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">border-right</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#c8c8c8</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.overseas</span> <span class="selector-class">.overseas-number</span> <span class="selector-tag">span</span> &#123;</span></span><br><span class="line">    margin-top: 17px;</span><br><span class="line">    padding-left: 35px;</span><br><span class="line">    text-align: left;</span><br><span class="line">    font-size: 14px;</span><br><span class="line">    display: block</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.overseas</span> <span class="selector-class">.dropdown-menu</span> &#123;</span></span><br><span class="line">    width: 100%;</span><br><span class="line">    max-height: 285px;</span><br><span class="line">    font-size: 14px;</span><br><span class="line">    border-radius: 0 0 4px 4px;</span><br><span class="line">    overflow-y: auto</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.overseas</span> <span class="selector-class">.dropdown-menu</span> <span class="selector-tag">li</span> <span class="selector-class">.nation-code</span> &#123;</span></span><br><span class="line">    width: 65px;</span><br><span class="line">    display: inline-block</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.overseas</span> <span class="selector-class">.dropdown-menu</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span> &#123;</span></span><br><span class="line">    padding: 6px 20px;</span><br><span class="line">    font-size: 14px;</span><br><span class="line">    line-height: 20px</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.overseas</span> <span class="selector-class">.dropdown-menu</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span><span class="selector-pseudo">::hover</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">background-color</span>: <span class="selector-id">#f5f5f5</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.more-sign</span> &#123;</span></span><br><span class="line">    margin-top: 50px</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.more-sign</span> <span class="selector-tag">h6</span> &#123;</span></span><br><span class="line">    position: relative;</span><br><span class="line">    margin: 0 0 10px;</span><br><span class="line">    font-size: 12px;</span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#b5b5b5</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.more-sign</span> <span class="selector-tag">h6</span><span class="selector-pseudo">:before</span> &#123;</span></span><br><span class="line">    left: 30px</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.more-sign</span> <span class="selector-tag">h6</span><span class="selector-pseudo">:after</span>,<span class="selector-class">.sign</span> <span class="selector-class">.more-sign</span> <span class="selector-tag">h6</span><span class="selector-pseudo">:before</span> &#123;</span></span><br><span class="line">    content: "";</span><br><span class="line"><span class="css">    <span class="selector-tag">border-top</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#b5b5b5</span>;</span></span><br><span class="line">    display: block;</span><br><span class="line">    position: absolute;</span><br><span class="line">    width: 60px;</span><br><span class="line">    top: 5px</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.more-sign</span> <span class="selector-tag">h6</span><span class="selector-pseudo">:after</span> &#123;</span></span><br><span class="line">    right: 30px</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.more-sign</span> <span class="selector-tag">ul</span> &#123;</span></span><br><span class="line">    margin-bottom: 10px;</span><br><span class="line">    list-style: none</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.more-sign</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> &#123;</span></span><br><span class="line">    margin: 0 5px;</span><br><span class="line">    display: inline-block</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.more-sign</span> <span class="selector-tag">ul</span> <span class="selector-tag">a</span> &#123;</span></span><br><span class="line">    width: 50px;</span><br><span class="line">    height: 50px;</span><br><span class="line">    line-height: 50px;</span><br><span class="line">    display: block</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.more-sign</span> <span class="selector-tag">ul</span> <span class="selector-tag">i</span> &#123;</span></span><br><span class="line">    font-size: 28px</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.more-sign</span> <span class="selector-class">.ic-weibo</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#e05244</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.more-sign</span> <span class="selector-class">.ic-wechat</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#00bb29</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.more-sign</span> <span class="selector-class">.ic-qq_connect</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#498ad5</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.more-sign</span> <span class="selector-class">.ic-douban</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#00820f</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.more-sign</span> <span class="selector-class">.ic-more</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#999</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.more-sign</span> <span class="selector-class">.weibo-loading</span> &#123;</span></span><br><span class="line">    pointer-events: none;</span><br><span class="line">    cursor: pointer;</span><br><span class="line">    position: relative</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.more-sign</span> <span class="selector-class">.weibo-loading</span><span class="selector-pseudo">:after</span> &#123;</span></span><br><span class="line">    content: "";</span><br><span class="line">    position: absolute;</span><br><span class="line">    left: 0;</span><br><span class="line">    top: 0;</span><br><span class="line">    width: 100%;</span><br><span class="line">    height: 100%;</span><br><span class="line"><span class="css">    <span class="selector-tag">background-color</span>: <span class="selector-id">#fff</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-tag">body</span><span class="selector-class">.reader-night-mode</span> <span class="selector-class">.sign</span> <span class="selector-class">.more-sign</span> <span class="selector-class">.weibo-loading</span><span class="selector-pseudo">:after</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">background-color</span>: <span class="selector-id">#3f3f3f</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.more-sign</span> <span class="selector-class">.weibo-loading</span><span class="selector-pseudo">:before</span> &#123;</span></span><br><span class="line">    content: "";</span><br><span class="line">    position: absolute;</span><br><span class="line">    top: 50%;</span><br><span class="line">    left: 50%;</span><br><span class="line">    width: 20px;</span><br><span class="line">    height: 20px;</span><br><span class="line">    margin: -10px 0 0 -10px;</span><br><span class="line">    border-radius: 10px;</span><br><span class="line"><span class="css">    <span class="selector-tag">border</span>: 2<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#e05244</span>;</span></span><br><span class="line">    border-bottom-color: transparent;</span><br><span class="line">    vertical-align: middle;</span><br><span class="line"><span class="css">    <span class="selector-tag">-webkit-animation</span>: <span class="selector-tag">rolling</span> <span class="selector-class">.8s</span> <span class="selector-tag">infinite</span> <span class="selector-tag">linear</span>;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">animation</span>: <span class="selector-tag">rolling</span> <span class="selector-class">.8s</span> <span class="selector-tag">infinite</span> <span class="selector-tag">linear</span>;</span></span><br><span class="line">    z-index: 1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="keyword">@keyframes</span> rolling &#123;</span></span><br><span class="line">    0% &#123;</span><br><span class="line">        -webkit-transform: rotate(0deg);</span><br><span class="line">        transform: rotate(0deg)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    to &#123;</span><br><span class="line">        -webkit-transform: rotate(1turn);</span><br><span class="line">        transform: rotate(1turn)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="keyword">@-webkit-keyframes</span> rolling &#123;</span></span><br><span class="line">    0% &#123;</span><br><span class="line">        -webkit-transform: rotate(0deg)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    to &#123;</span><br><span class="line">        -webkit-transform: rotate(1turn)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.reset-password-input</span> &#123;</span></span><br><span class="line">    border-radius: 4px!important</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.return</span> &#123;</span></span><br><span class="line">    margin-left: -8px;</span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#969696</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.return</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#333</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.return</span> <span class="selector-tag">i</span> &#123;</span></span><br><span class="line">    margin-right: 5px</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.icheckbox_square-green</span> &#123;</span></span><br><span class="line">    display: inline-block;</span><br><span class="line">    *display: inline;</span><br><span class="line">    vertical-align: middle;</span><br><span class="line">    margin: 0;</span><br><span class="line">    padding: 0;</span><br><span class="line">    width: 18px;</span><br><span class="line">    height: 18px;</span><br><span class="line">    background: url(/static/image/green.png) no-repeat;</span><br><span class="line">    border: none;</span><br><span class="line">    cursor: pointer;</span><br><span class="line">    background-position: 0 0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.icheckbox_square-green</span><span class="selector-class">.hover</span> &#123;</span></span><br><span class="line">    background-position: -20px 0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.icheckbox_square-green</span><span class="selector-class">.checked</span> &#123;</span></span><br><span class="line">    background-position: -40px 0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.icheckbox_square-green</span><span class="selector-class">.disabled</span> &#123;</span></span><br><span class="line">    background-position: -60px 0;</span><br><span class="line">    cursor: default</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.icheckbox_square-green</span><span class="selector-class">.checked</span><span class="selector-class">.disabled</span> &#123;</span></span><br><span class="line">    background-position: -80px 0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.geetest_panel_box</span>&gt;* &#123;</span></span><br><span class="line">    box-sizing: content-box</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="keyword">@media</span> (<span class="attribute">max-width:</span><span class="number">768px</span>) &#123;</span></span><br><span class="line">    body &#123;</span><br><span class="line">        min-width: 0</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.sign</span> &#123;</span></span><br><span class="line">        height: auto;</span><br><span class="line">        min-height: 0;</span><br><span class="line">        background-color: transparent</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.sign</span> <span class="selector-class">.logo</span> &#123;</span></span><br><span class="line">        display: none</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.sign</span> <span class="selector-class">.main</span> &#123;</span></span><br><span class="line">        position: absolute;</span><br><span class="line">        left: 50%;</span><br><span class="line">        margin: 0 0 0 -200px;</span><br><span class="line">        box-shadow: none</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>api服务端接入验证码的文档说明: <a href="https://007.qq.com/python-access.html?ADTAG=acces.start" target="_blank" rel="noopener">https://007.qq.com/python-access.html?ADTAG=acces.start</a></p>
<p>服务端接受验证结果并返回，代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> APIView</span><br><span class="line"><span class="keyword">from</span> django.conf <span class="keyword">import</span> settings</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlencode</span><br><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlopen</span><br><span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> status</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CaptchaAPIView</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self,request)</span>:</span></span><br><span class="line">        <span class="string">"""验证码的验证结果校验"""</span></span><br><span class="line">        AppSecretKey = settings.TENCENT_CAPTCHA[<span class="string">"App_Secret_Key"</span>]</span><br><span class="line">        appid = settings.TENCENT_CAPTCHA[<span class="string">"APPID"</span>]</span><br><span class="line">        Ticket = request.query_params.get(<span class="string">"ticket"</span>)</span><br><span class="line">        Randstr = request.query_params.get(<span class="string">"randstr"</span>)</span><br><span class="line">        UserIP = request._request.META.get(<span class="string">"REMOTE_ADDR"</span>)</span><br><span class="line">        print(<span class="string">"用户ID地址：%s"</span> % UserIP)</span><br><span class="line">        params = &#123;</span><br><span class="line">            <span class="string">"aid"</span>: appid,</span><br><span class="line">            <span class="string">"AppSecretKey"</span>: AppSecretKey,</span><br><span class="line">            <span class="string">"Ticket"</span>: Ticket,</span><br><span class="line">            <span class="string">"Randstr"</span>: Randstr,</span><br><span class="line">            <span class="string">"UserIP"</span>: UserIP</span><br><span class="line">        &#125;</span><br><span class="line">        params = urlencode(params)</span><br><span class="line"></span><br><span class="line">        f = urlopen(<span class="string">"%s?%s"</span> % (settings.TENCENT_CAPTCHA[<span class="string">"GATEWAY"</span>], params))</span><br><span class="line">        content = f.read()</span><br><span class="line">        res = json.loads(content)</span><br><span class="line">        print(res)</span><br><span class="line">        <span class="keyword">if</span> res:</span><br><span class="line">            error_code = res[<span class="string">"response"</span>]</span><br><span class="line">            <span class="keyword">if</span> int(error_code) == <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">return</span> Response(<span class="string">"验证通过！"</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> Response(<span class="string">"验证失败！%s"</span> % res[<span class="string">"err_msg"</span>], status=status.HTTP_400_BAD_REQUEST)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> Response(<span class="string">"验证失败！"</span>, status=status.HTTP_400_BAD_REQUEST)</span><br></pre></td></tr></table></figure>

<p>路由，代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 子应用路由：</span></span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">"captcha/"</span>, views.CaptchaAPIView.as_view()),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h1 id="用户的注册认证"><a href="#用户的注册认证" class="headerlink" title="用户的注册认证"></a>用户的注册认证</h1><p>前端显示注册页面并调整首页头部和登陆页面的注册按钮的链接。</p>
<p>注册页面Register.vue,主要是通过登录页面进行改成而成</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"sign"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"logo"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"/static/image/nav-logo.png"</span> <span class="attr">alt</span>=<span class="string">"Logo"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h4</span> <span class="attr">class</span>=<span class="string">"title"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"normal-title"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/user/login"</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">b</span>&gt;</span>·<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">id</span>=<span class="string">"js-sign-up-btn"</span> <span class="attr">class</span>=<span class="string">"active"</span> <span class="attr">to</span>=<span class="string">"/user/register"</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"js-sign-up-container"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">"new_user"</span> <span class="attr">id</span>=<span class="string">"new_user"</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">accept-charset</span>=<span class="string">"UTF-8"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"input-prepend restyle"</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">input</span> <span class="attr">placeholder</span>=<span class="string">"你的昵称"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">value</span>=<span class="string">""</span> <span class="attr">v-model</span>=<span class="string">"nickname"</span> <span class="attr">id</span>=<span class="string">"user_nickname"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"iconfont ic-user"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"input-prepend restyle no-radius js-normal"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">placeholder</span>=<span class="string">"手机号"</span> <span class="attr">type</span>=<span class="string">"tel"</span> <span class="attr">v-model</span>=<span class="string">"mobile"</span> <span class="attr">id</span>=<span class="string">"user_mobile_number"</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"iconfont ic-phonenumber"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"input-prepend restyle no-radius security-up-code js-security-number"</span> <span class="attr">v-if</span>=<span class="string">"is_show_sms_code"</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"sms_code"</span> <span class="attr">id</span>=<span class="string">"sms_code"</span> <span class="attr">placeholder</span>=<span class="string">"手机验证码"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"iconfont ic-verify"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">tabindex</span>=<span class="string">"-1"</span> <span class="attr">class</span>=<span class="string">"btn-up-resend js-send-code-button disable"</span> <span class="attr">href</span>=<span class="string">"javascript:void(0);"</span> <span class="attr">id</span>=<span class="string">"send_code"</span>&gt;</span>&#123;&#123;sms_code_text&#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"security_number"</span> <span class="attr">id</span>=<span class="string">"security_number"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"input-prepend"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">placeholder</span>=<span class="string">"设置密码"</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">v-model</span>=<span class="string">"password"</span> <span class="attr">id</span>=<span class="string">"user_password"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"iconfont ic-password"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">name</span>=<span class="string">"commit"</span> <span class="attr">value</span>=<span class="string">"注册"</span> <span class="attr">class</span>=<span class="string">"sign-up-button"</span> <span class="attr">id</span>=<span class="string">"sign_up_btn"</span> <span class="attr">data-disable-with</span>=<span class="string">"注册"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"sign-up-msg"</span>&gt;</span>点击 “注册” 即表示您同意并愿意遵守荏苒<span class="tag">&lt;<span class="name">br</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>用户协议<span class="tag">&lt;/<span class="name">a</span>&gt;</span> 和 <span class="tag">&lt;<span class="name">a</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>隐私政策<span class="tag">&lt;/<span class="name">a</span>&gt;</span> 。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 更多注册方式 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"more-sign"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">h6</span>&gt;</span>社交帐号直接注册<span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">"weixin"</span> <span class="attr">class</span>=<span class="string">"weixin"</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"iconfont ic-wechat"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">"qq"</span> <span class="attr">class</span>=<span class="string">"qq"</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"iconfont ic-qq_connect"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">        name: <span class="string">"Register"</span>,</span></span><br><span class="line">        data()&#123;</span><br><span class="line"><span class="actionscript">          <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">            nickname:<span class="string">""</span>,</span></span><br><span class="line"><span class="actionscript">            mobile:<span class="string">""</span>,</span></span><br><span class="line"><span class="actionscript">            sms_code:<span class="string">""</span>,</span></span><br><span class="line"><span class="actionscript">            password:<span class="string">""</span>,</span></span><br><span class="line"><span class="actionscript">            sms_code_text:<span class="string">"发送验证码"</span>,</span></span><br><span class="line"><span class="actionscript">            is_show_sms_code:<span class="literal">false</span>,</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        watch:&#123;</span><br><span class="line">          mobile()&#123;</span><br><span class="line"><span class="javascript">            <span class="keyword">if</span>(<span class="regexp">/^1[3-9]\d&#123;9&#125;$/</span>.test(<span class="keyword">this</span>.mobile))&#123;</span></span><br><span class="line"><span class="actionscript">              <span class="keyword">this</span>.is_show_sms_code = <span class="literal">true</span>;</span></span><br><span class="line"><span class="actionscript">            &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="actionscript">              <span class="keyword">this</span>.is_show_sms_code = <span class="literal">false</span>;</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line">input&#123;</span><br><span class="line">  outline: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="css">*, <span class="selector-pseudo">:after</span>, <span class="selector-pseudo">:before</span> &#123;</span></span><br><span class="line">    box-sizing: border-box;</span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> &#123;</span></span><br><span class="line">	height: 100%;</span><br><span class="line">	min-height: 750px;</span><br><span class="line">	text-align: center;</span><br><span class="line">	font-size: 14px;</span><br><span class="line"><span class="css">	<span class="selector-tag">background-color</span>: <span class="selector-id">#f1f1f1</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span><span class="selector-pseudo">:before</span> &#123;</span></span><br><span class="line">	content: "";</span><br><span class="line">	display: inline-block;</span><br><span class="line">	height: 85%;</span><br><span class="line">	vertical-align: middle</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.disable</span>,<span class="selector-class">.sign</span> <span class="selector-class">.disable-gray</span> &#123;</span></span><br><span class="line"><span class="css">	<span class="selector-tag">opacity</span>: <span class="selector-class">.5</span>;</span></span><br><span class="line">	pointer-events: none</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.disable-gray</span> &#123;</span></span><br><span class="line"><span class="css">	<span class="selector-tag">background-color</span>: <span class="selector-id">#969696</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.tooltip-error</span> &#123;</span></span><br><span class="line">	font-size: 14px;</span><br><span class="line">	line-height: 25px;</span><br><span class="line">	white-space: nowrap;</span><br><span class="line">	background: none</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.tooltip-error</span> <span class="selector-class">.tooltip-inner</span> &#123;</span></span><br><span class="line">	max-width: 280px;</span><br><span class="line"><span class="css">	<span class="selector-tag">color</span>: <span class="selector-id">#333</span>;</span></span><br><span class="line"><span class="css">	<span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ea6f5a</span>;</span></span><br><span class="line"><span class="css">	<span class="selector-tag">background-color</span>: <span class="selector-id">#fff</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.tooltip-error</span> <span class="selector-class">.tooltip-inner</span> <span class="selector-tag">i</span> &#123;</span></span><br><span class="line">	position: static;</span><br><span class="line">	margin-right: 5px;</span><br><span class="line">	font-size: 20px;</span><br><span class="line"><span class="css">	<span class="selector-tag">color</span>: <span class="selector-id">#ea6f5a</span>;</span></span><br><span class="line">	vertical-align: middle</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.tooltip-error</span> <span class="selector-class">.tooltip-inner</span> <span class="selector-tag">span</span> &#123;</span></span><br><span class="line">	vertical-align: middle;</span><br><span class="line">	display: inline-block;</span><br><span class="line">	white-space: normal;</span><br><span class="line">	max-width: 230px</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.tooltip-error</span><span class="selector-class">.right</span> <span class="selector-class">.tooltip-arrow-border</span> &#123;</span></span><br><span class="line"><span class="css">	<span class="selector-tag">border-right-color</span>: <span class="selector-id">#ea6f5a</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.tooltip-error</span><span class="selector-class">.right</span> <span class="selector-class">.tooltip-arrow-bg</span> &#123;</span></span><br><span class="line">	left: 2px;</span><br><span class="line"><span class="css">	<span class="selector-tag">border-right-color</span>: <span class="selector-id">#fff</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.slide-error</span> &#123;</span></span><br><span class="line">	position: relative;</span><br><span class="line">	padding: 10px 0;</span><br><span class="line"><span class="css">	<span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#c8c8c8</span>;</span></span><br><span class="line">	border-radius: 4px</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.slide-error</span> <span class="selector-tag">i</span> &#123;</span></span><br><span class="line">	position: static!important;</span><br><span class="line">	margin-right: 10px;</span><br><span class="line"><span class="css">	<span class="selector-tag">color</span>: <span class="selector-id">#ea6f5a</span>!<span class="selector-tag">important</span>;</span></span><br><span class="line">	vertical-align: middle</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.slide-error</span> <span class="selector-tag">span</span> &#123;</span></span><br><span class="line">	font-size: 15px;</span><br><span class="line">	vertical-align: middle</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.slide-error</span> <span class="selector-tag">div</span> &#123;</span></span><br><span class="line">	margin-top: 10px;</span><br><span class="line">	font-size: 13px</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.slide-error</span> <span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="css">	<span class="selector-tag">color</span>: <span class="selector-id">#3194d0</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.js-sign-up-forbidden</span> &#123;</span></span><br><span class="line"><span class="css">	<span class="selector-tag">color</span>: <span class="selector-id">#999</span>;</span></span><br><span class="line">	padding: 80px 0 100px</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.js-sign-up-container</span> <span class="selector-class">.slide-error</span> &#123;</span></span><br><span class="line">	border-bottom: none;</span><br><span class="line">	border-radius: 0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.logo</span> &#123;</span></span><br><span class="line">	position: absolute;</span><br><span class="line">	top: 56px;</span><br><span class="line">	margin-left: 50px</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.logo</span> <span class="selector-tag">img</span> &#123;</span></span><br><span class="line">	width: 100px</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.main</span> &#123;</span></span><br><span class="line">	width: 400px;</span><br><span class="line">	margin: 60px auto 0;</span><br><span class="line">	padding: 50px 50px 30px;</span><br><span class="line"><span class="css">	<span class="selector-tag">background-color</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line">	border-radius: 4px;</span><br><span class="line"><span class="css">	<span class="selector-tag">box-shadow</span>: 0 0 8<span class="selector-tag">px</span> <span class="selector-tag">rgba</span>(0,0,0,<span class="selector-class">.1</span>);</span></span><br><span class="line">	vertical-align: middle;</span><br><span class="line">	display: inline-block</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.reset-title</span>,<span class="selector-class">.sign</span> <span class="selector-class">.title</span> &#123;</span></span><br><span class="line">	margin: 0 auto 50px;</span><br><span class="line">	padding: 10px;</span><br><span class="line">	font-weight: 400;</span><br><span class="line"><span class="css">	<span class="selector-tag">color</span>: <span class="selector-id">#969696</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.reset-title</span> <span class="selector-tag">a</span>,<span class="selector-class">.sign</span> <span class="selector-class">.title</span> <span class="selector-tag">a</span> &#123;</span></span><br><span class="line">	padding: 10px;</span><br><span class="line"><span class="css">	<span class="selector-tag">color</span>: <span class="selector-id">#969696</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.reset-title</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>,<span class="selector-class">.sign</span> <span class="selector-class">.title</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="css">	<span class="selector-tag">border-bottom</span>: 2<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ea6f5a</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.reset-title</span> <span class="selector-class">.active</span>,<span class="selector-class">.sign</span> <span class="selector-class">.title</span> <span class="selector-class">.active</span> &#123;</span></span><br><span class="line">	font-weight: 700;</span><br><span class="line"><span class="css">	<span class="selector-tag">color</span>: <span class="selector-id">#ea6f5a</span>;</span></span><br><span class="line"><span class="css">	<span class="selector-tag">border-bottom</span>: 2<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ea6f5a</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.reset-title</span> <span class="selector-tag">b</span>,<span class="selector-class">.sign</span> <span class="selector-class">.title</span> <span class="selector-tag">b</span> &#123;</span></span><br><span class="line">	padding: 10px</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.reset-title</span> &#123;</span></span><br><span class="line"><span class="css">	<span class="selector-tag">color</span>: <span class="selector-id">#333</span>;</span></span><br><span class="line">	font-weight: 700</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-tag">form</span> &#123;</span></span><br><span class="line">	margin-bottom: 30px</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-tag">form</span> <span class="selector-class">.input-prepend</span> &#123;</span></span><br><span class="line">	position: relative;</span><br><span class="line">	width: 100%</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-tag">form</span> <span class="selector-class">.input-prepend</span> <span class="selector-tag">input</span> &#123;</span></span><br><span class="line">	width: 100%;</span><br><span class="line">	height: 50px;</span><br><span class="line">	margin-bottom: 0;</span><br><span class="line">	padding: 4px 12px 4px 35px;</span><br><span class="line"><span class="css">	<span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#c8c8c8</span>;</span></span><br><span class="line">	border-radius: 0 0 4px 4px;</span><br><span class="line"><span class="css">	<span class="selector-tag">background-color</span>: <span class="selector-tag">hsla</span>(0,0%,71%,<span class="selector-class">.1</span>);</span></span><br><span class="line">	vertical-align: middle</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-tag">form</span> <span class="selector-class">.input-prepend</span> <span class="selector-tag">i</span> &#123;</span></span><br><span class="line">	position: absolute;</span><br><span class="line">	top: 14px;</span><br><span class="line">	left: 10px;</span><br><span class="line">	font-size: 18px;</span><br><span class="line"><span class="css">	<span class="selector-tag">color</span>: <span class="selector-id">#969696</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-tag">form</span> <span class="selector-class">.input-prepend</span> <span class="selector-tag">span</span> &#123;</span></span><br><span class="line"><span class="css">	<span class="selector-tag">color</span>: <span class="selector-id">#333</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-tag">form</span> <span class="selector-class">.input-prepend</span> <span class="selector-class">.ic-show</span> &#123;</span></span><br><span class="line">	top: 18px;</span><br><span class="line">	left: auto;</span><br><span class="line">	right: 8px;</span><br><span class="line">	font-size: 12px</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-tag">form</span> <span class="selector-class">.geetest-placeholder</span> &#123;</span></span><br><span class="line">	height: 44px;</span><br><span class="line">	border-radius: 4px;</span><br><span class="line"><span class="css">	<span class="selector-tag">background-color</span>: <span class="selector-tag">hsla</span>(0,0%,71%,<span class="selector-class">.1</span>);</span></span><br><span class="line">	text-align: center;</span><br><span class="line">	line-height: 44px;</span><br><span class="line">	font-size: 14px;</span><br><span class="line"><span class="css">	<span class="selector-tag">color</span>: <span class="selector-id">#999</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-tag">form</span> <span class="selector-class">.restyle</span> &#123;</span></span><br><span class="line">	margin-bottom: 0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-tag">form</span> <span class="selector-class">.restyle</span> <span class="selector-tag">input</span> &#123;</span></span><br><span class="line">	border-bottom: none;</span><br><span class="line">	border-radius: 4px 4px 0 0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-tag">form</span> <span class="selector-class">.no-radius</span> <span class="selector-tag">input</span> &#123;</span></span><br><span class="line">	border-radius: 0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-tag">form</span> <span class="selector-class">.slide-security-placeholder</span> &#123;</span></span><br><span class="line">	height: 32px;</span><br><span class="line"><span class="css">	<span class="selector-tag">background-color</span>: <span class="selector-tag">hsla</span>(0,0%,71%,<span class="selector-class">.1</span>);</span></span><br><span class="line">	border-radius: 4px</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-tag">form</span> <span class="selector-class">.slide-security-placeholder</span> <span class="selector-tag">p</span> &#123;</span></span><br><span class="line">	padding-top: 7px;</span><br><span class="line"><span class="css">	<span class="selector-tag">color</span>: <span class="selector-id">#999</span>;</span></span><br><span class="line">	margin-right: -7px</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.overseas-btn</span> &#123;</span></span><br><span class="line">	font-size: 14px;</span><br><span class="line"><span class="css">	<span class="selector-tag">color</span>: <span class="selector-id">#999</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.overseas-btn</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="css">	<span class="selector-tag">color</span>: <span class="selector-id">#2f2f2f</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.remember-btn</span> &#123;</span></span><br><span class="line">	float: left;</span><br><span class="line">	margin: 15px 0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.remember-btn</span> <span class="selector-tag">span</span> &#123;</span></span><br><span class="line">	margin-left: 5px;</span><br><span class="line">	font-size: 15px;</span><br><span class="line"><span class="css">	<span class="selector-tag">color</span>: <span class="selector-id">#969696</span>;</span></span><br><span class="line">	vertical-align: middle</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.forget-btn</span> &#123;</span></span><br><span class="line">	float: right;</span><br><span class="line">	position: relative;</span><br><span class="line">	margin: 15px 0;</span><br><span class="line">	font-size: 14px</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.forget-btn</span> <span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="css">	<span class="selector-tag">color</span>: <span class="selector-id">#999</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.forget-btn</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="css">	<span class="selector-tag">color</span>: <span class="selector-id">#333</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.forget-btn</span> <span class="selector-class">.dropdown-menu</span> &#123;</span></span><br><span class="line">	top: 20px;</span><br><span class="line">	left: auto;</span><br><span class="line">	right: 0;</span><br><span class="line">	border-radius: 4px</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.forget-btn</span> <span class="selector-class">.dropdown-menu</span> <span class="selector-tag">a</span> &#123;</span></span><br><span class="line">	padding: 10px 20px;</span><br><span class="line"><span class="css">	<span class="selector-tag">color</span>: <span class="selector-id">#333</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-id">#sign-in-loading</span> &#123;</span></span><br><span class="line">	position: relative;</span><br><span class="line">	width: 20px;</span><br><span class="line">	height: 20px;</span><br><span class="line">	vertical-align: middle;</span><br><span class="line">	margin-top: -4px;</span><br><span class="line">	margin-right: 2px;</span><br><span class="line">	display: none</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-id">#sign-in-loading</span><span class="selector-pseudo">:after</span> &#123;</span></span><br><span class="line">	content: "";</span><br><span class="line">	position: absolute;</span><br><span class="line">	left: 0;</span><br><span class="line">	top: 0;</span><br><span class="line">	width: 100%;</span><br><span class="line">	height: 100%;</span><br><span class="line">	background-color: transparent</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-id">#sign-in-loading</span><span class="selector-pseudo">:before</span> &#123;</span></span><br><span class="line">	content: "";</span><br><span class="line">	position: absolute;</span><br><span class="line">	top: 50%;</span><br><span class="line">	left: 50%;</span><br><span class="line">	width: 20px;</span><br><span class="line">	height: 20px;</span><br><span class="line">	margin: -10px 0 0 -10px;</span><br><span class="line">	border-radius: 10px;</span><br><span class="line"><span class="css">	<span class="selector-tag">border</span>: 2<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#fff</span>;</span></span><br><span class="line">	border-bottom-color: transparent;</span><br><span class="line">	vertical-align: middle;</span><br><span class="line"><span class="css">	<span class="selector-tag">-webkit-animation</span>: <span class="selector-tag">rolling</span> <span class="selector-class">.8s</span> <span class="selector-tag">infinite</span> <span class="selector-tag">linear</span>;</span></span><br><span class="line"><span class="css">	<span class="selector-tag">animation</span>: <span class="selector-tag">rolling</span> <span class="selector-class">.8s</span> <span class="selector-tag">infinite</span> <span class="selector-tag">linear</span>;</span></span><br><span class="line">	z-index: 1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.sign-in-button</span>,<span class="selector-class">.sign</span> <span class="selector-class">.sign-up-button</span> &#123;</span></span><br><span class="line">	margin-top: 20px;</span><br><span class="line">	width: 100%;</span><br><span class="line">	padding: 9px 18px;</span><br><span class="line">	font-size: 18px;</span><br><span class="line">	border: none;</span><br><span class="line">	border-radius: 25px;</span><br><span class="line"><span class="css">	<span class="selector-tag">color</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line"><span class="css">	<span class="selector-tag">background</span>: <span class="selector-id">#42c02e</span>;</span></span><br><span class="line">	cursor: pointer;</span><br><span class="line">	outline: none;</span><br><span class="line">	display: block;</span><br><span class="line">	clear: both</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.sign-in-button</span><span class="selector-pseudo">:hover</span>,<span class="selector-class">.sign</span> <span class="selector-class">.sign-up-button</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="css">	<span class="selector-tag">background</span>: <span class="selector-id">#3db922</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.sign-in-button</span> &#123;</span></span><br><span class="line"><span class="css">	<span class="selector-tag">background</span>: <span class="selector-id">#3194d0</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.sign-in-button</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="css">	<span class="selector-tag">background</span>: <span class="selector-id">#187cb7</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.btn-in-resend</span>,<span class="selector-class">.sign</span> <span class="selector-class">.btn-up-resend</span> &#123;</span></span><br><span class="line">	position: absolute;</span><br><span class="line">	top: 7px;</span><br><span class="line">	right: 7px;</span><br><span class="line">	width: 100px;</span><br><span class="line">	height: 36px;</span><br><span class="line">	font-size: 13px;</span><br><span class="line"><span class="css">	<span class="selector-tag">color</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line"><span class="css">	<span class="selector-tag">background-color</span>: <span class="selector-id">#42c02e</span>;</span></span><br><span class="line">	border-radius: 20px;</span><br><span class="line">	line-height: 36px</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.btn-in-resend</span> &#123;</span></span><br><span class="line"><span class="css">	<span class="selector-tag">background-color</span>: <span class="selector-id">#3194d0</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.sign-up-msg</span> &#123;</span></span><br><span class="line">	margin: 10px 0;</span><br><span class="line">	padding: 0;</span><br><span class="line">	text-align: center;</span><br><span class="line">	font-size: 12px;</span><br><span class="line">	line-height: 20px;</span><br><span class="line"><span class="css">	<span class="selector-tag">color</span>: <span class="selector-id">#969696</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.sign-up-msg</span> <span class="selector-tag">a</span>,<span class="selector-class">.sign</span> <span class="selector-class">.sign-up-msg</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="css">	<span class="selector-tag">color</span>: <span class="selector-id">#3194d0</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.overseas</span> <span class="selector-tag">input</span> &#123;</span></span><br><span class="line">	padding-left: 110px!important</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.overseas</span> <span class="selector-class">.overseas-number</span> &#123;</span></span><br><span class="line">	position: absolute;</span><br><span class="line">	top: 0;</span><br><span class="line">	left: 0;</span><br><span class="line">	width: 100px;</span><br><span class="line">	height: 50px;</span><br><span class="line">	font-size: 18px;</span><br><span class="line"><span class="css">	<span class="selector-tag">color</span>: <span class="selector-id">#969696</span>;</span></span><br><span class="line"><span class="css">	<span class="selector-tag">border-right</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#c8c8c8</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.overseas</span> <span class="selector-class">.overseas-number</span> <span class="selector-tag">span</span> &#123;</span></span><br><span class="line">	margin-top: 17px;</span><br><span class="line">	padding-left: 35px;</span><br><span class="line">	text-align: left;</span><br><span class="line">	font-size: 14px;</span><br><span class="line">	display: block</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.overseas</span> <span class="selector-class">.dropdown-menu</span> &#123;</span></span><br><span class="line">	width: 100%;</span><br><span class="line">	max-height: 285px;</span><br><span class="line">	font-size: 14px;</span><br><span class="line">	border-radius: 0 0 4px 4px;</span><br><span class="line">	overflow-y: auto</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.overseas</span> <span class="selector-class">.dropdown-menu</span> <span class="selector-tag">li</span> <span class="selector-class">.nation-code</span> &#123;</span></span><br><span class="line">	width: 65px;</span><br><span class="line">	display: inline-block</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.overseas</span> <span class="selector-class">.dropdown-menu</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span> &#123;</span></span><br><span class="line">	padding: 6px 20px;</span><br><span class="line">	font-size: 14px;</span><br><span class="line">	line-height: 20px</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.overseas</span> <span class="selector-class">.dropdown-menu</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span><span class="selector-pseudo">::hover</span> &#123;</span></span><br><span class="line"><span class="css">	<span class="selector-tag">color</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line"><span class="css">	<span class="selector-tag">background-color</span>: <span class="selector-id">#f5f5f5</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.more-sign</span> &#123;</span></span><br><span class="line">	margin-top: 50px</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.more-sign</span> <span class="selector-tag">h6</span> &#123;</span></span><br><span class="line">	position: relative;</span><br><span class="line">	margin: 0 0 10px;</span><br><span class="line">	font-size: 12px;</span><br><span class="line"><span class="css">	<span class="selector-tag">color</span>: <span class="selector-id">#b5b5b5</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.more-sign</span> <span class="selector-tag">h6</span><span class="selector-pseudo">:before</span> &#123;</span></span><br><span class="line">	left: 30px</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.more-sign</span> <span class="selector-tag">h6</span><span class="selector-pseudo">:after</span>,<span class="selector-class">.sign</span> <span class="selector-class">.more-sign</span> <span class="selector-tag">h6</span><span class="selector-pseudo">:before</span> &#123;</span></span><br><span class="line">	content: "";</span><br><span class="line"><span class="css">	<span class="selector-tag">border-top</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#b5b5b5</span>;</span></span><br><span class="line">	display: block;</span><br><span class="line">	position: absolute;</span><br><span class="line">	width: 60px;</span><br><span class="line">	top: 5px</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.more-sign</span> <span class="selector-tag">h6</span><span class="selector-pseudo">:after</span> &#123;</span></span><br><span class="line">	right: 30px</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.more-sign</span> <span class="selector-tag">ul</span> &#123;</span></span><br><span class="line">	margin-bottom: 10px;</span><br><span class="line">	list-style: none</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.more-sign</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> &#123;</span></span><br><span class="line">	margin: 0 5px;</span><br><span class="line">	display: inline-block</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.more-sign</span> <span class="selector-tag">ul</span> <span class="selector-tag">a</span> &#123;</span></span><br><span class="line">	width: 50px;</span><br><span class="line">	height: 50px;</span><br><span class="line">	line-height: 50px;</span><br><span class="line">	display: block</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.more-sign</span> <span class="selector-tag">ul</span> <span class="selector-tag">i</span> &#123;</span></span><br><span class="line">	font-size: 28px</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.more-sign</span> <span class="selector-class">.ic-weibo</span> &#123;</span></span><br><span class="line"><span class="css">	<span class="selector-tag">color</span>: <span class="selector-id">#e05244</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.more-sign</span> <span class="selector-class">.ic-wechat</span> &#123;</span></span><br><span class="line"><span class="css">	<span class="selector-tag">color</span>: <span class="selector-id">#00bb29</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.more-sign</span> <span class="selector-class">.ic-qq_connect</span> &#123;</span></span><br><span class="line"><span class="css">	<span class="selector-tag">color</span>: <span class="selector-id">#498ad5</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.more-sign</span> <span class="selector-class">.ic-douban</span> &#123;</span></span><br><span class="line"><span class="css">	<span class="selector-tag">color</span>: <span class="selector-id">#00820f</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.more-sign</span> <span class="selector-class">.ic-more</span> &#123;</span></span><br><span class="line"><span class="css">	<span class="selector-tag">color</span>: <span class="selector-id">#999</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.more-sign</span> <span class="selector-class">.weibo-loading</span> &#123;</span></span><br><span class="line">	pointer-events: none;</span><br><span class="line">	cursor: pointer;</span><br><span class="line">	position: relative</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.more-sign</span> <span class="selector-class">.weibo-loading</span><span class="selector-pseudo">:after</span> &#123;</span></span><br><span class="line">	content: "";</span><br><span class="line">	position: absolute;</span><br><span class="line">	left: 0;</span><br><span class="line">	top: 0;</span><br><span class="line">	width: 100%;</span><br><span class="line">	height: 100%;</span><br><span class="line"><span class="css">	<span class="selector-tag">background-color</span>: <span class="selector-id">#fff</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-tag">body</span><span class="selector-class">.reader-night-mode</span> <span class="selector-class">.sign</span> <span class="selector-class">.more-sign</span> <span class="selector-class">.weibo-loading</span><span class="selector-pseudo">:after</span> &#123;</span></span><br><span class="line"><span class="css">	<span class="selector-tag">background-color</span>: <span class="selector-id">#3f3f3f</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.more-sign</span> <span class="selector-class">.weibo-loading</span><span class="selector-pseudo">:before</span> &#123;</span></span><br><span class="line">	content: "";</span><br><span class="line">	position: absolute;</span><br><span class="line">	top: 50%;</span><br><span class="line">	left: 50%;</span><br><span class="line">	width: 20px;</span><br><span class="line">	height: 20px;</span><br><span class="line">	margin: -10px 0 0 -10px;</span><br><span class="line">	border-radius: 10px;</span><br><span class="line"><span class="css">	<span class="selector-tag">border</span>: 2<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#e05244</span>;</span></span><br><span class="line">	border-bottom-color: transparent;</span><br><span class="line">	vertical-align: middle;</span><br><span class="line"><span class="css">	<span class="selector-tag">-webkit-animation</span>: <span class="selector-tag">rolling</span> <span class="selector-class">.8s</span> <span class="selector-tag">infinite</span> <span class="selector-tag">linear</span>;</span></span><br><span class="line"><span class="css">	<span class="selector-tag">animation</span>: <span class="selector-tag">rolling</span> <span class="selector-class">.8s</span> <span class="selector-tag">infinite</span> <span class="selector-tag">linear</span>;</span></span><br><span class="line">	z-index: 1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="keyword">@keyframes</span> rolling &#123;</span></span><br><span class="line">	0% &#123;</span><br><span class="line">		-webkit-transform: rotate(0deg);</span><br><span class="line">		transform: rotate(0deg)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	to &#123;</span><br><span class="line">		-webkit-transform: rotate(1turn);</span><br><span class="line">		transform: rotate(1turn)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="keyword">@-webkit-keyframes</span> rolling &#123;</span></span><br><span class="line">	0% &#123;</span><br><span class="line">		-webkit-transform: rotate(0deg)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	to &#123;</span><br><span class="line">		-webkit-transform: rotate(1turn)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.reset-password-input</span> &#123;</span></span><br><span class="line">	border-radius: 4px!important</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.return</span> &#123;</span></span><br><span class="line">	margin-left: -8px;</span><br><span class="line"><span class="css">	<span class="selector-tag">color</span>: <span class="selector-id">#969696</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.return</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="css">	<span class="selector-tag">color</span>: <span class="selector-id">#333</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.return</span> <span class="selector-tag">i</span> &#123;</span></span><br><span class="line">	margin-right: 5px</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.icheckbox_square-green</span> &#123;</span></span><br><span class="line">	display: inline-block;</span><br><span class="line">	*display: inline;</span><br><span class="line">	vertical-align: middle;</span><br><span class="line">	margin: 0;</span><br><span class="line">	padding: 0;</span><br><span class="line">	width: 18px;</span><br><span class="line">	height: 18px;</span><br><span class="line">	background: url(/static/image/green.png) no-repeat;</span><br><span class="line">	border: none;</span><br><span class="line">	cursor: pointer;</span><br><span class="line">	background-position: 0 0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.icheckbox_square-green</span><span class="selector-class">.hover</span> &#123;</span></span><br><span class="line">	background-position: -20px 0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.icheckbox_square-green</span><span class="selector-class">.checked</span> &#123;</span></span><br><span class="line">	background-position: -40px 0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.icheckbox_square-green</span><span class="selector-class">.disabled</span> &#123;</span></span><br><span class="line">	background-position: -60px 0;</span><br><span class="line">	cursor: default</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.icheckbox_square-green</span><span class="selector-class">.checked</span><span class="selector-class">.disabled</span> &#123;</span></span><br><span class="line">	background-position: -80px 0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.geetest_panel_box</span>&gt;* &#123;</span></span><br><span class="line">	box-sizing: content-box</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="keyword">@media</span> (<span class="attribute">max-width:</span><span class="number">768px</span>) &#123;</span></span><br><span class="line">	body &#123;</span><br><span class="line">		min-width: 0</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"><span class="css">	<span class="selector-class">.sign</span> &#123;</span></span><br><span class="line">		height: auto;</span><br><span class="line">		min-height: 0;</span><br><span class="line">		background-color: transparent</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"><span class="css">	<span class="selector-class">.sign</span> <span class="selector-class">.logo</span> &#123;</span></span><br><span class="line">		display: none</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"><span class="css">	<span class="selector-class">.sign</span> <span class="selector-class">.main</span> &#123;</span></span><br><span class="line">		position: absolute;</span><br><span class="line">		left: 50%;</span><br><span class="line">		margin: 0 0 0 -200px;</span><br><span class="line">		box-shadow: none</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>前端注册路由:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Register <span class="keyword">from</span> <span class="string">"../components/Register"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置路由列表</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Router(&#123;</span><br><span class="line">  mode:<span class="string">"history"</span>,</span><br><span class="line">  routes:[</span><br><span class="line">    <span class="comment">// 路由列表</span></span><br><span class="line">	...</span><br><span class="line">    &#123;</span><br><span class="line">      name:<span class="string">"Register"</span>,</span><br><span class="line">      path: <span class="string">"/register"</span>,</span><br><span class="line">      component:Register,</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>修改首页头部的连接:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"># Header.vue</span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"header-register"</span>&gt;</span><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/register"</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">#Login.vue</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"go_login"</span> &gt;</span>没有账号 <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/register"</span>&gt;</span>立即注册<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="注册功能的实现"><a href="#注册功能的实现" class="headerlink" title="注册功能的实现"></a>注册功能的实现</h2><h3 id="实现基本的账号信息注册"><a href="#实现基本的账号信息注册" class="headerlink" title="实现基本的账号信息注册"></a>实现基本的账号信息注册</h3><p>视图代码:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.generics <span class="keyword">import</span> CreateAPIView</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> User</span><br><span class="line"><span class="keyword">from</span> .serializers <span class="keyword">import</span> UserModelSerializer</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserCreateAPIView</span><span class="params">(CreateAPIView)</span>:</span></span><br><span class="line">    queryset = User.objects.all()</span><br><span class="line">    serializer_class = UserModelSerializer</span><br></pre></td></tr></table></figure>

<p>序列化器中,验证和保存数据,并返回jwt登录认证</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> User</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserModelSerializer</span><span class="params">(serializers.ModelSerializer)</span>:</span></span><br><span class="line">    <span class="string">"""用户信息序列化器"""</span></span><br><span class="line">    sms_code = serializers.CharField(required=<span class="literal">True</span>, write_only=<span class="literal">True</span>, max_length=<span class="number">5</span>, help_text=<span class="string">"短信验证码"</span>)</span><br><span class="line">    token = serializers.CharField(read_only=<span class="literal">True</span>, help_text=<span class="string">"jwt登录认证"</span>)</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = User</span><br><span class="line">        fields = [<span class="string">"id"</span>,<span class="string">"username"</span>,<span class="string">"mobile"</span>,<span class="string">"password"</span>,<span class="string">"nickname"</span>,<span class="string">"sms_code"</span>,<span class="string">"token"</span>]</span><br><span class="line">        extra_kwargs = &#123;</span><br><span class="line">            <span class="string">"id"</span>:&#123;<span class="string">"read_only"</span>:<span class="literal">True</span>, &#125;,</span><br><span class="line">            <span class="string">"username"</span>:&#123;<span class="string">"read_only"</span>:<span class="literal">True</span>, &#125;,</span><br><span class="line">            <span class="string">"mobile"</span>:&#123;<span class="string">"required"</span>:<span class="literal">True</span>, <span class="string">"write_only"</span>:<span class="literal">True</span>, &#125;,</span><br><span class="line">            <span class="string">"password"</span>:&#123;<span class="string">"required"</span>:<span class="literal">True</span>, <span class="string">"write_only"</span>:<span class="literal">True</span>, <span class="string">"max_length"</span>: <span class="number">16</span>, <span class="string">"min_length"</span>: <span class="number">6</span>&#125;,</span><br><span class="line">            <span class="string">"nickname"</span>:&#123;<span class="string">"required"</span>:<span class="literal">True</span> &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">validate</span><span class="params">(self, attrs)</span>:</span></span><br><span class="line">        <span class="comment"># 1. 验证手机号码是否格式正确</span></span><br><span class="line">        mobile = attrs.get(<span class="string">"mobile"</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> re.match(<span class="string">"^1[3-9]\d&#123;9&#125;$"</span>, mobile):</span><br><span class="line">            <span class="keyword">raise</span> serializers.ValidationError(<span class="string">"手机号码格式错误！"</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 2. 验证手机号是否注册了</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            User.objects.get(mobile=mobile)</span><br><span class="line">            <span class="keyword">raise</span> serializers.ValidationError(<span class="string">"手机号码被占用！"</span>)</span><br><span class="line">        <span class="keyword">except</span> User.DoesNotExist:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 3. 昵称是否被注册了</span></span><br><span class="line">        nickname = attrs.get(<span class="string">"nickname"</span>)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            User.objects.get(nickname=nickname)</span><br><span class="line">            <span class="keyword">raise</span> serializers.ValidationError(<span class="string">"用户昵称被占用！"</span>)</span><br><span class="line">        <span class="keyword">except</span> User.DoesNotExist:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># todo 4. 验证手机短信是否正确</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> attrs</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">create</span><span class="params">(self, validated_data)</span>:</span></span><br><span class="line">        <span class="string">"""保存用户注册信息"""</span></span><br><span class="line">        mobile = validated_data.get(<span class="string">"mobile"</span>)</span><br><span class="line">        nickname = validated_data.get(<span class="string">"nickname"</span>)</span><br><span class="line">        password = validated_data.get(<span class="string">"password"</span>)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            user = User.objects.create_user(mobile=mobile, nickname=nickname, password=password)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">raise</span> serializers.ValidationError(<span class="string">"用户信息注册失败！"</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 返回jwt登录token</span></span><br><span class="line">        <span class="keyword">from</span> rest_framework_jwt.settings <span class="keyword">import</span> api_settings</span><br><span class="line"></span><br><span class="line">        jwt_payload_handler = api_settings.JWT_PAYLOAD_HANDLER</span><br><span class="line">        jwt_encode_handler = api_settings.JWT_ENCODE_HANDLER</span><br><span class="line"></span><br><span class="line">        payload = jwt_payload_handler(user)</span><br><span class="line">        user.token = jwt_encode_handler(payload)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> user</span><br></pre></td></tr></table></figure>

<p>路由,代码:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">path(<span class="string">""</span>, views.UserCreateAPIView.as_view()),</span><br></pre></td></tr></table></figure>

<h3 id="客户端提交注册信息"><a href="#客户端提交注册信息" class="headerlink" title="客户端提交注册信息"></a>客户端提交注册信息</h3><p>register.vue,代码:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"sign"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"logo"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"/static/image/nav-logo.png"</span> <span class="attr">alt</span>=<span class="string">"Logo"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h4</span> <span class="attr">class</span>=<span class="string">"title"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"normal-title"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/user/login"</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">b</span>&gt;</span>·<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">id</span>=<span class="string">"js-sign-up-btn"</span> <span class="attr">class</span>=<span class="string">"active"</span> <span class="attr">to</span>=<span class="string">"/user/register"</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"js-sign-up-container"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">"new_user"</span> <span class="attr">id</span>=<span class="string">"new_user"</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">accept-charset</span>=<span class="string">"UTF-8"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"input-prepend restyle"</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">input</span> <span class="attr">placeholder</span>=<span class="string">"你的昵称"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">value</span>=<span class="string">""</span> <span class="attr">v-model</span>=<span class="string">"nickname"</span> <span class="attr">id</span>=<span class="string">"user_nickname"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"iconfont ic-user"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"input-prepend restyle no-radius js-normal"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">placeholder</span>=<span class="string">"手机号"</span> <span class="attr">type</span>=<span class="string">"tel"</span> <span class="attr">v-model</span>=<span class="string">"mobile"</span> <span class="attr">id</span>=<span class="string">"user_mobile_number"</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"iconfont ic-phonenumber"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"input-prepend restyle no-radius security-up-code js-security-number"</span> <span class="attr">v-if</span>=<span class="string">"is_show_sms_code"</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"sms_code"</span> <span class="attr">id</span>=<span class="string">"sms_code"</span> <span class="attr">placeholder</span>=<span class="string">"手机验证码"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"iconfont ic-verify"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">tabindex</span>=<span class="string">"-1"</span> <span class="attr">class</span>=<span class="string">"btn-up-resend js-send-code-button disable"</span> <span class="attr">href</span>=<span class="string">"javascript:void(0);"</span> <span class="attr">id</span>=<span class="string">"send_code"</span>&gt;</span>&#123;&#123;sms_code_text&#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"security_number"</span> <span class="attr">id</span>=<span class="string">"security_number"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"input-prepend"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">placeholder</span>=<span class="string">"设置密码"</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">v-model</span>=<span class="string">"password"</span> <span class="attr">id</span>=<span class="string">"user_password"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"iconfont ic-password"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">name</span>=<span class="string">"commit"</span> <span class="attr">value</span>=<span class="string">"注册"</span> <span class="attr">class</span>=<span class="string">"sign-up-button"</span> <span class="attr">id</span>=<span class="string">"sign_up_btn"</span> @<span class="attr">click.prevent</span>=<span class="string">"registerHandler"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"sign-up-msg"</span>&gt;</span>点击 “注册” 即表示您同意并愿意遵守荏苒<span class="tag">&lt;<span class="name">br</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>用户协议<span class="tag">&lt;/<span class="name">a</span>&gt;</span> 和 <span class="tag">&lt;<span class="name">a</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>隐私政策<span class="tag">&lt;/<span class="name">a</span>&gt;</span> 。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 更多注册方式 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"more-sign"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">h6</span>&gt;</span>社交帐号直接注册<span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">"weixin"</span> <span class="attr">class</span>=<span class="string">"weixin"</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"iconfont ic-wechat"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">"qq"</span> <span class="attr">class</span>=<span class="string">"qq"</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"iconfont ic-qq_connect"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">        name: <span class="string">"Register"</span>,</span></span><br><span class="line">        data()&#123;</span><br><span class="line"><span class="actionscript">          <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">            nickname:<span class="string">""</span>,</span></span><br><span class="line"><span class="actionscript">            mobile:<span class="string">""</span>,</span></span><br><span class="line"><span class="actionscript">            sms_code:<span class="string">""</span>,</span></span><br><span class="line"><span class="actionscript">            password:<span class="string">""</span>,</span></span><br><span class="line"><span class="actionscript">            sms_code_text:<span class="string">"发送验证码"</span>,</span></span><br><span class="line"><span class="actionscript">            is_show_sms_code:<span class="literal">false</span>,</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        watch: &#123;</span><br><span class="line">          mobile() &#123;</span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> (<span class="regexp">/^1[3-9]\d&#123;9&#125;$/</span>.test(<span class="keyword">this</span>.mobile)) &#123;</span></span><br><span class="line"><span class="actionscript">              <span class="keyword">this</span>.is_show_sms_code = <span class="literal">true</span>;</span></span><br><span class="line"><span class="actionscript">            &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="actionscript">              <span class="keyword">this</span>.is_show_sms_code = <span class="literal">false</span>;</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">          registerHandler()&#123;</span><br><span class="line"><span class="actionscript">            <span class="comment">// todo 数据验证</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">            <span class="comment">// 注册处理</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">this</span>.$axios.post(<span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.$settings.Host&#125;</span>/users/`</span>,&#123;</span></span><br><span class="line"><span class="actionscript">                mobile: <span class="keyword">this</span>.mobile,</span></span><br><span class="line"><span class="actionscript">                nickname: <span class="keyword">this</span>.nickname,</span></span><br><span class="line"><span class="actionscript">                password: <span class="keyword">this</span>.password,</span></span><br><span class="line"><span class="actionscript">                sms_code: <span class="keyword">this</span>.sms_code,</span></span><br><span class="line"><span class="javascript">            &#125;).then(<span class="function"><span class="params">response</span>=&gt;</span> &#123;</span></span><br><span class="line">              sessionStorage.user_token = response.data.token;</span><br><span class="line">              sessionStorage.user_id = response.data.id;</span><br><span class="line">              sessionStorage.user_name = response.data.username;</span><br><span class="line">              sessionStorage.user_avatar = response.data.avatar;</span><br><span class="line">              sessionStorage.user_nickname = response.data.nickname;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">              <span class="keyword">this</span>.$confirm(<span class="string">'注册成功, 欢迎加入荏苒！'</span>, <span class="string">'提示'</span>, &#123;</span></span><br><span class="line"><span class="actionscript">                confirmButtonText: <span class="string">'跳转到首页'</span>,</span></span><br><span class="line"><span class="actionscript">                cancelButtonText: <span class="string">'跳转上一页'</span>,</span></span><br><span class="line"><span class="actionscript">                type: <span class="string">'success'</span></span></span><br><span class="line"><span class="javascript">              &#125;).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.$router.push(<span class="string">"/"</span>);</span></span><br><span class="line"><span class="javascript">              &#125;).catch(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.$router.go(<span class="number">-1</span>);</span></span><br><span class="line">              &#125;);</span><br><span class="line"></span><br><span class="line"><span class="javascript">            &#125;).catch(<span class="function"><span class="params">error</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.$message.error(<span class="string">"用户注册失败！"</span>);</span></span><br><span class="line">            &#125;)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line">input&#123;</span><br><span class="line">  outline: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="css">*, <span class="selector-pseudo">:after</span>, <span class="selector-pseudo">:before</span> &#123;</span></span><br><span class="line">    box-sizing: border-box;</span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> &#123;</span></span><br><span class="line">    height: 100%;</span><br><span class="line">    min-height: 750px;</span><br><span class="line">    text-align: center;</span><br><span class="line">    font-size: 14px;</span><br><span class="line"><span class="css">    <span class="selector-tag">background-color</span>: <span class="selector-id">#f1f1f1</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span><span class="selector-pseudo">:before</span> &#123;</span></span><br><span class="line">    content: "";</span><br><span class="line">    display: inline-block;</span><br><span class="line">    height: 85%;</span><br><span class="line">    vertical-align: middle</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.disable</span>,<span class="selector-class">.sign</span> <span class="selector-class">.disable-gray</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">opacity</span>: <span class="selector-class">.5</span>;</span></span><br><span class="line">    pointer-events: none</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.disable-gray</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">background-color</span>: <span class="selector-id">#969696</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.tooltip-error</span> &#123;</span></span><br><span class="line">    font-size: 14px;</span><br><span class="line">    line-height: 25px;</span><br><span class="line">    white-space: nowrap;</span><br><span class="line">    background: none</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.tooltip-error</span> <span class="selector-class">.tooltip-inner</span> &#123;</span></span><br><span class="line">    max-width: 280px;</span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#333</span>;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ea6f5a</span>;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">background-color</span>: <span class="selector-id">#fff</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.tooltip-error</span> <span class="selector-class">.tooltip-inner</span> <span class="selector-tag">i</span> &#123;</span></span><br><span class="line">    position: static;</span><br><span class="line">    margin-right: 5px;</span><br><span class="line">    font-size: 20px;</span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#ea6f5a</span>;</span></span><br><span class="line">    vertical-align: middle</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.tooltip-error</span> <span class="selector-class">.tooltip-inner</span> <span class="selector-tag">span</span> &#123;</span></span><br><span class="line">    vertical-align: middle;</span><br><span class="line">    display: inline-block;</span><br><span class="line">    white-space: normal;</span><br><span class="line">    max-width: 230px</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.tooltip-error</span><span class="selector-class">.right</span> <span class="selector-class">.tooltip-arrow-border</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">border-right-color</span>: <span class="selector-id">#ea6f5a</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.tooltip-error</span><span class="selector-class">.right</span> <span class="selector-class">.tooltip-arrow-bg</span> &#123;</span></span><br><span class="line">    left: 2px;</span><br><span class="line"><span class="css">    <span class="selector-tag">border-right-color</span>: <span class="selector-id">#fff</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.slide-error</span> &#123;</span></span><br><span class="line">    position: relative;</span><br><span class="line">    padding: 10px 0;</span><br><span class="line"><span class="css">    <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#c8c8c8</span>;</span></span><br><span class="line">    border-radius: 4px</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.slide-error</span> <span class="selector-tag">i</span> &#123;</span></span><br><span class="line">    position: static!important;</span><br><span class="line">    margin-right: 10px;</span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#ea6f5a</span>!<span class="selector-tag">important</span>;</span></span><br><span class="line">    vertical-align: middle</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.slide-error</span> <span class="selector-tag">span</span> &#123;</span></span><br><span class="line">    font-size: 15px;</span><br><span class="line">    vertical-align: middle</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.slide-error</span> <span class="selector-tag">div</span> &#123;</span></span><br><span class="line">    margin-top: 10px;</span><br><span class="line">    font-size: 13px</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.slide-error</span> <span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#3194d0</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.js-sign-up-forbidden</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#999</span>;</span></span><br><span class="line">    padding: 80px 0 100px</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.js-sign-up-container</span> <span class="selector-class">.slide-error</span> &#123;</span></span><br><span class="line">    border-bottom: none;</span><br><span class="line">    border-radius: 0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.logo</span> &#123;</span></span><br><span class="line">    position: absolute;</span><br><span class="line">    top: 56px;</span><br><span class="line">    margin-left: 50px</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.logo</span> <span class="selector-tag">img</span> &#123;</span></span><br><span class="line">    width: 100px</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.main</span> &#123;</span></span><br><span class="line">    width: 400px;</span><br><span class="line">    margin: 60px auto 0;</span><br><span class="line">    padding: 50px 50px 30px;</span><br><span class="line"><span class="css">    <span class="selector-tag">background-color</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line">    border-radius: 4px;</span><br><span class="line"><span class="css">    <span class="selector-tag">box-shadow</span>: 0 0 8<span class="selector-tag">px</span> <span class="selector-tag">rgba</span>(0,0,0,<span class="selector-class">.1</span>);</span></span><br><span class="line">    vertical-align: middle;</span><br><span class="line">    display: inline-block</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.reset-title</span>,<span class="selector-class">.sign</span> <span class="selector-class">.title</span> &#123;</span></span><br><span class="line">    margin: 0 auto 50px;</span><br><span class="line">    padding: 10px;</span><br><span class="line">    font-weight: 400;</span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#969696</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.reset-title</span> <span class="selector-tag">a</span>,<span class="selector-class">.sign</span> <span class="selector-class">.title</span> <span class="selector-tag">a</span> &#123;</span></span><br><span class="line">    padding: 10px;</span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#969696</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.reset-title</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>,<span class="selector-class">.sign</span> <span class="selector-class">.title</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">border-bottom</span>: 2<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ea6f5a</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.reset-title</span> <span class="selector-class">.active</span>,<span class="selector-class">.sign</span> <span class="selector-class">.title</span> <span class="selector-class">.active</span> &#123;</span></span><br><span class="line">    font-weight: 700;</span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#ea6f5a</span>;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">border-bottom</span>: 2<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ea6f5a</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.reset-title</span> <span class="selector-tag">b</span>,<span class="selector-class">.sign</span> <span class="selector-class">.title</span> <span class="selector-tag">b</span> &#123;</span></span><br><span class="line">    padding: 10px</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.reset-title</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#333</span>;</span></span><br><span class="line">    font-weight: 700</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-tag">form</span> &#123;</span></span><br><span class="line">    margin-bottom: 30px</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-tag">form</span> <span class="selector-class">.input-prepend</span> &#123;</span></span><br><span class="line">    position: relative;</span><br><span class="line">    width: 100%</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-tag">form</span> <span class="selector-class">.input-prepend</span> <span class="selector-tag">input</span> &#123;</span></span><br><span class="line">    width: 100%;</span><br><span class="line">    height: 50px;</span><br><span class="line">    margin-bottom: 0;</span><br><span class="line">    padding: 4px 12px 4px 35px;</span><br><span class="line"><span class="css">    <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#c8c8c8</span>;</span></span><br><span class="line">    border-radius: 0 0 4px 4px;</span><br><span class="line"><span class="css">    <span class="selector-tag">background-color</span>: <span class="selector-tag">hsla</span>(0,0%,71%,<span class="selector-class">.1</span>);</span></span><br><span class="line">    vertical-align: middle</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-tag">form</span> <span class="selector-class">.input-prepend</span> <span class="selector-tag">i</span> &#123;</span></span><br><span class="line">    position: absolute;</span><br><span class="line">    top: 14px;</span><br><span class="line">    left: 10px;</span><br><span class="line">    font-size: 18px;</span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#969696</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-tag">form</span> <span class="selector-class">.input-prepend</span> <span class="selector-tag">span</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#333</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-tag">form</span> <span class="selector-class">.input-prepend</span> <span class="selector-class">.ic-show</span> &#123;</span></span><br><span class="line">    top: 18px;</span><br><span class="line">    left: auto;</span><br><span class="line">    right: 8px;</span><br><span class="line">    font-size: 12px</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-tag">form</span> <span class="selector-class">.geetest-placeholder</span> &#123;</span></span><br><span class="line">    height: 44px;</span><br><span class="line">    border-radius: 4px;</span><br><span class="line"><span class="css">    <span class="selector-tag">background-color</span>: <span class="selector-tag">hsla</span>(0,0%,71%,<span class="selector-class">.1</span>);</span></span><br><span class="line">    text-align: center;</span><br><span class="line">    line-height: 44px;</span><br><span class="line">    font-size: 14px;</span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#999</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-tag">form</span> <span class="selector-class">.restyle</span> &#123;</span></span><br><span class="line">    margin-bottom: 0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-tag">form</span> <span class="selector-class">.restyle</span> <span class="selector-tag">input</span> &#123;</span></span><br><span class="line">    border-bottom: none;</span><br><span class="line">    border-radius: 4px 4px 0 0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-tag">form</span> <span class="selector-class">.no-radius</span> <span class="selector-tag">input</span> &#123;</span></span><br><span class="line">    border-radius: 0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-tag">form</span> <span class="selector-class">.slide-security-placeholder</span> &#123;</span></span><br><span class="line">    height: 32px;</span><br><span class="line"><span class="css">    <span class="selector-tag">background-color</span>: <span class="selector-tag">hsla</span>(0,0%,71%,<span class="selector-class">.1</span>);</span></span><br><span class="line">    border-radius: 4px</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-tag">form</span> <span class="selector-class">.slide-security-placeholder</span> <span class="selector-tag">p</span> &#123;</span></span><br><span class="line">    padding-top: 7px;</span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#999</span>;</span></span><br><span class="line">    margin-right: -7px</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.overseas-btn</span> &#123;</span></span><br><span class="line">    font-size: 14px;</span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#999</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.overseas-btn</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#2f2f2f</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.remember-btn</span> &#123;</span></span><br><span class="line">    float: left;</span><br><span class="line">    margin: 15px 0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.remember-btn</span> <span class="selector-tag">span</span> &#123;</span></span><br><span class="line">    margin-left: 5px;</span><br><span class="line">    font-size: 15px;</span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#969696</span>;</span></span><br><span class="line">    vertical-align: middle</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.forget-btn</span> &#123;</span></span><br><span class="line">    float: right;</span><br><span class="line">    position: relative;</span><br><span class="line">    margin: 15px 0;</span><br><span class="line">    font-size: 14px</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.forget-btn</span> <span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#999</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.forget-btn</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#333</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.forget-btn</span> <span class="selector-class">.dropdown-menu</span> &#123;</span></span><br><span class="line">    top: 20px;</span><br><span class="line">    left: auto;</span><br><span class="line">    right: 0;</span><br><span class="line">    border-radius: 4px</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.forget-btn</span> <span class="selector-class">.dropdown-menu</span> <span class="selector-tag">a</span> &#123;</span></span><br><span class="line">    padding: 10px 20px;</span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#333</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-id">#sign-in-loading</span> &#123;</span></span><br><span class="line">    position: relative;</span><br><span class="line">    width: 20px;</span><br><span class="line">    height: 20px;</span><br><span class="line">    vertical-align: middle;</span><br><span class="line">    margin-top: -4px;</span><br><span class="line">    margin-right: 2px;</span><br><span class="line">    display: none</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-id">#sign-in-loading</span><span class="selector-pseudo">:after</span> &#123;</span></span><br><span class="line">    content: "";</span><br><span class="line">    position: absolute;</span><br><span class="line">    left: 0;</span><br><span class="line">    top: 0;</span><br><span class="line">    width: 100%;</span><br><span class="line">    height: 100%;</span><br><span class="line">    background-color: transparent</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-id">#sign-in-loading</span><span class="selector-pseudo">:before</span> &#123;</span></span><br><span class="line">    content: "";</span><br><span class="line">    position: absolute;</span><br><span class="line">    top: 50%;</span><br><span class="line">    left: 50%;</span><br><span class="line">    width: 20px;</span><br><span class="line">    height: 20px;</span><br><span class="line">    margin: -10px 0 0 -10px;</span><br><span class="line">    border-radius: 10px;</span><br><span class="line"><span class="css">    <span class="selector-tag">border</span>: 2<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#fff</span>;</span></span><br><span class="line">    border-bottom-color: transparent;</span><br><span class="line">    vertical-align: middle;</span><br><span class="line"><span class="css">    <span class="selector-tag">-webkit-animation</span>: <span class="selector-tag">rolling</span> <span class="selector-class">.8s</span> <span class="selector-tag">infinite</span> <span class="selector-tag">linear</span>;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">animation</span>: <span class="selector-tag">rolling</span> <span class="selector-class">.8s</span> <span class="selector-tag">infinite</span> <span class="selector-tag">linear</span>;</span></span><br><span class="line">    z-index: 1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.sign-in-button</span>,<span class="selector-class">.sign</span> <span class="selector-class">.sign-up-button</span> &#123;</span></span><br><span class="line">    margin-top: 20px;</span><br><span class="line">    width: 100%;</span><br><span class="line">    padding: 9px 18px;</span><br><span class="line">    font-size: 18px;</span><br><span class="line">    border: none;</span><br><span class="line">    border-radius: 25px;</span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">background</span>: <span class="selector-id">#42c02e</span>;</span></span><br><span class="line">    cursor: pointer;</span><br><span class="line">    outline: none;</span><br><span class="line">    display: block;</span><br><span class="line">    clear: both</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.sign-in-button</span><span class="selector-pseudo">:hover</span>,<span class="selector-class">.sign</span> <span class="selector-class">.sign-up-button</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">background</span>: <span class="selector-id">#3db922</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.sign-in-button</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">background</span>: <span class="selector-id">#3194d0</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.sign-in-button</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">background</span>: <span class="selector-id">#187cb7</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.btn-in-resend</span>,<span class="selector-class">.sign</span> <span class="selector-class">.btn-up-resend</span> &#123;</span></span><br><span class="line">    position: absolute;</span><br><span class="line">    top: 7px;</span><br><span class="line">    right: 7px;</span><br><span class="line">    width: 100px;</span><br><span class="line">    height: 36px;</span><br><span class="line">    font-size: 13px;</span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">background-color</span>: <span class="selector-id">#42c02e</span>;</span></span><br><span class="line">    border-radius: 20px;</span><br><span class="line">    line-height: 36px</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.btn-in-resend</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">background-color</span>: <span class="selector-id">#3194d0</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.sign-up-msg</span> &#123;</span></span><br><span class="line">    margin: 10px 0;</span><br><span class="line">    padding: 0;</span><br><span class="line">    text-align: center;</span><br><span class="line">    font-size: 12px;</span><br><span class="line">    line-height: 20px;</span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#969696</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.sign-up-msg</span> <span class="selector-tag">a</span>,<span class="selector-class">.sign</span> <span class="selector-class">.sign-up-msg</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#3194d0</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.overseas</span> <span class="selector-tag">input</span> &#123;</span></span><br><span class="line">    padding-left: 110px!important</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.overseas</span> <span class="selector-class">.overseas-number</span> &#123;</span></span><br><span class="line">    position: absolute;</span><br><span class="line">    top: 0;</span><br><span class="line">    left: 0;</span><br><span class="line">    width: 100px;</span><br><span class="line">    height: 50px;</span><br><span class="line">    font-size: 18px;</span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#969696</span>;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">border-right</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#c8c8c8</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.overseas</span> <span class="selector-class">.overseas-number</span> <span class="selector-tag">span</span> &#123;</span></span><br><span class="line">    margin-top: 17px;</span><br><span class="line">    padding-left: 35px;</span><br><span class="line">    text-align: left;</span><br><span class="line">    font-size: 14px;</span><br><span class="line">    display: block</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.overseas</span> <span class="selector-class">.dropdown-menu</span> &#123;</span></span><br><span class="line">    width: 100%;</span><br><span class="line">    max-height: 285px;</span><br><span class="line">    font-size: 14px;</span><br><span class="line">    border-radius: 0 0 4px 4px;</span><br><span class="line">    overflow-y: auto</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.overseas</span> <span class="selector-class">.dropdown-menu</span> <span class="selector-tag">li</span> <span class="selector-class">.nation-code</span> &#123;</span></span><br><span class="line">    width: 65px;</span><br><span class="line">    display: inline-block</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.overseas</span> <span class="selector-class">.dropdown-menu</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span> &#123;</span></span><br><span class="line">    padding: 6px 20px;</span><br><span class="line">    font-size: 14px;</span><br><span class="line">    line-height: 20px</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.overseas</span> <span class="selector-class">.dropdown-menu</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span><span class="selector-pseudo">::hover</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">background-color</span>: <span class="selector-id">#f5f5f5</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.more-sign</span> &#123;</span></span><br><span class="line">    margin-top: 50px</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.more-sign</span> <span class="selector-tag">h6</span> &#123;</span></span><br><span class="line">    position: relative;</span><br><span class="line">    margin: 0 0 10px;</span><br><span class="line">    font-size: 12px;</span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#b5b5b5</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.more-sign</span> <span class="selector-tag">h6</span><span class="selector-pseudo">:before</span> &#123;</span></span><br><span class="line">    left: 30px</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.more-sign</span> <span class="selector-tag">h6</span><span class="selector-pseudo">:after</span>,<span class="selector-class">.sign</span> <span class="selector-class">.more-sign</span> <span class="selector-tag">h6</span><span class="selector-pseudo">:before</span> &#123;</span></span><br><span class="line">    content: "";</span><br><span class="line"><span class="css">    <span class="selector-tag">border-top</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#b5b5b5</span>;</span></span><br><span class="line">    display: block;</span><br><span class="line">    position: absolute;</span><br><span class="line">    width: 60px;</span><br><span class="line">    top: 5px</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.more-sign</span> <span class="selector-tag">h6</span><span class="selector-pseudo">:after</span> &#123;</span></span><br><span class="line">    right: 30px</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.more-sign</span> <span class="selector-tag">ul</span> &#123;</span></span><br><span class="line">    margin-bottom: 10px;</span><br><span class="line">    list-style: none</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.more-sign</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> &#123;</span></span><br><span class="line">    margin: 0 5px;</span><br><span class="line">    display: inline-block</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.more-sign</span> <span class="selector-tag">ul</span> <span class="selector-tag">a</span> &#123;</span></span><br><span class="line">    width: 50px;</span><br><span class="line">    height: 50px;</span><br><span class="line">    line-height: 50px;</span><br><span class="line">    display: block</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.more-sign</span> <span class="selector-tag">ul</span> <span class="selector-tag">i</span> &#123;</span></span><br><span class="line">    font-size: 28px</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.more-sign</span> <span class="selector-class">.ic-weibo</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#e05244</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.more-sign</span> <span class="selector-class">.ic-wechat</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#00bb29</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.more-sign</span> <span class="selector-class">.ic-qq_connect</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#498ad5</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.more-sign</span> <span class="selector-class">.ic-douban</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#00820f</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.more-sign</span> <span class="selector-class">.ic-more</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#999</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.more-sign</span> <span class="selector-class">.weibo-loading</span> &#123;</span></span><br><span class="line">    pointer-events: none;</span><br><span class="line">    cursor: pointer;</span><br><span class="line">    position: relative</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.more-sign</span> <span class="selector-class">.weibo-loading</span><span class="selector-pseudo">:after</span> &#123;</span></span><br><span class="line">    content: "";</span><br><span class="line">    position: absolute;</span><br><span class="line">    left: 0;</span><br><span class="line">    top: 0;</span><br><span class="line">    width: 100%;</span><br><span class="line">    height: 100%;</span><br><span class="line"><span class="css">    <span class="selector-tag">background-color</span>: <span class="selector-id">#fff</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-tag">body</span><span class="selector-class">.reader-night-mode</span> <span class="selector-class">.sign</span> <span class="selector-class">.more-sign</span> <span class="selector-class">.weibo-loading</span><span class="selector-pseudo">:after</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">background-color</span>: <span class="selector-id">#3f3f3f</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.more-sign</span> <span class="selector-class">.weibo-loading</span><span class="selector-pseudo">:before</span> &#123;</span></span><br><span class="line">    content: "";</span><br><span class="line">    position: absolute;</span><br><span class="line">    top: 50%;</span><br><span class="line">    left: 50%;</span><br><span class="line">    width: 20px;</span><br><span class="line">    height: 20px;</span><br><span class="line">    margin: -10px 0 0 -10px;</span><br><span class="line">    border-radius: 10px;</span><br><span class="line"><span class="css">    <span class="selector-tag">border</span>: 2<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#e05244</span>;</span></span><br><span class="line">    border-bottom-color: transparent;</span><br><span class="line">    vertical-align: middle;</span><br><span class="line"><span class="css">    <span class="selector-tag">-webkit-animation</span>: <span class="selector-tag">rolling</span> <span class="selector-class">.8s</span> <span class="selector-tag">infinite</span> <span class="selector-tag">linear</span>;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">animation</span>: <span class="selector-tag">rolling</span> <span class="selector-class">.8s</span> <span class="selector-tag">infinite</span> <span class="selector-tag">linear</span>;</span></span><br><span class="line">    z-index: 1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="keyword">@keyframes</span> rolling &#123;</span></span><br><span class="line">    0% &#123;</span><br><span class="line">        -webkit-transform: rotate(0deg);</span><br><span class="line">        transform: rotate(0deg)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    to &#123;</span><br><span class="line">        -webkit-transform: rotate(1turn);</span><br><span class="line">        transform: rotate(1turn)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="keyword">@-webkit-keyframes</span> rolling &#123;</span></span><br><span class="line">    0% &#123;</span><br><span class="line">        -webkit-transform: rotate(0deg)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    to &#123;</span><br><span class="line">        -webkit-transform: rotate(1turn)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.reset-password-input</span> &#123;</span></span><br><span class="line">    border-radius: 4px!important</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.return</span> &#123;</span></span><br><span class="line">    margin-left: -8px;</span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#969696</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.return</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#333</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.return</span> <span class="selector-tag">i</span> &#123;</span></span><br><span class="line">    margin-right: 5px</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.icheckbox_square-green</span> &#123;</span></span><br><span class="line">    display: inline-block;</span><br><span class="line">    *display: inline;</span><br><span class="line">    vertical-align: middle;</span><br><span class="line">    margin: 0;</span><br><span class="line">    padding: 0;</span><br><span class="line">    width: 18px;</span><br><span class="line">    height: 18px;</span><br><span class="line">    background: url(/static/image/green.png) no-repeat;</span><br><span class="line">    border: none;</span><br><span class="line">    cursor: pointer;</span><br><span class="line">    background-position: 0 0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.icheckbox_square-green</span><span class="selector-class">.hover</span> &#123;</span></span><br><span class="line">    background-position: -20px 0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.icheckbox_square-green</span><span class="selector-class">.checked</span> &#123;</span></span><br><span class="line">    background-position: -40px 0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.icheckbox_square-green</span><span class="selector-class">.disabled</span> &#123;</span></span><br><span class="line">    background-position: -60px 0;</span><br><span class="line">    cursor: default</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.icheckbox_square-green</span><span class="selector-class">.checked</span><span class="selector-class">.disabled</span> &#123;</span></span><br><span class="line">    background-position: -80px 0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.geetest_panel_box</span>&gt;* &#123;</span></span><br><span class="line">    box-sizing: content-box</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="keyword">@media</span> (<span class="attribute">max-width:</span><span class="number">768px</span>) &#123;</span></span><br><span class="line">    body &#123;</span><br><span class="line">        min-width: 0</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.sign</span> &#123;</span></span><br><span class="line">        height: auto;</span><br><span class="line">        min-height: 0;</span><br><span class="line">        background-color: transparent</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.sign</span> <span class="selector-class">.logo</span> &#123;</span></span><br><span class="line">        display: none</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.sign</span> <span class="selector-class">.main</span> &#123;</span></span><br><span class="line">        position: absolute;</span><br><span class="line">        left: 50%;</span><br><span class="line">        margin: 0 0 0 -200px;</span><br><span class="line">        box-shadow: none</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="在注册功能中集成短信验证码功能"><a href="#在注册功能中集成短信验证码功能" class="headerlink" title="在注册功能中集成短信验证码功能"></a>在注册功能中集成短信验证码功能</h2><p>接下来，我们把注册过程中一些注册信息（例如：短信验证码）和session缓存到redis数据库中。</p>
<p>安装django-redis。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install django-redis</span><br></pre></td></tr></table></figure>

<p>在settings/dev.py配置中添加一下代码：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"># 设置redis缓存</span><br><span class="line">CACHES = &#123;</span><br><span class="line">    # 默认缓存</span><br><span class="line">    <span class="string">"default"</span>: &#123;</span><br><span class="line">        <span class="string">"BACKEND"</span>: <span class="string">"django_redis.cache.RedisCache"</span>,</span><br><span class="line">        # 项目上线时,需要调整这里的路径</span><br><span class="line">        <span class="string">"LOCATION"</span>: <span class="string">"redis://127.0.0.1:6379/0"</span>,</span><br><span class="line"></span><br><span class="line">        <span class="string">"OPTIONS"</span>: &#123;</span><br><span class="line">            <span class="string">"CLIENT_CLASS"</span>: <span class="string">"django_redis.client.DefaultClient"</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    # 提供给xadmin或者admin的session存储</span><br><span class="line">    <span class="string">"session"</span>: &#123;</span><br><span class="line">        <span class="string">"BACKEND"</span>: <span class="string">"django_redis.cache.RedisCache"</span>,</span><br><span class="line">        <span class="string">"LOCATION"</span>: <span class="string">"redis://127.0.0.1:6379/1"</span>,</span><br><span class="line">        <span class="string">"OPTIONS"</span>: &#123;</span><br><span class="line">            <span class="string">"CLIENT_CLASS"</span>: <span class="string">"django_redis.client.DefaultClient"</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    # 提供存储短信验证码</span><br><span class="line">    <span class="string">"sms_code"</span>:&#123;</span><br><span class="line">        <span class="string">"BACKEND"</span>: <span class="string">"django_redis.cache.RedisCache"</span>,</span><br><span class="line">        <span class="string">"LOCATION"</span>: <span class="string">"redis://127.0.0.1:6379/2"</span>,</span><br><span class="line">        <span class="string">"OPTIONS"</span>: &#123;</span><br><span class="line">            <span class="string">"CLIENT_CLASS"</span>: <span class="string">"django_redis.client.DefaultClient"</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 设置xadmin用户登录时,登录信息session保存到redis</span><br><span class="line">SESSION_ENGINE = <span class="string">"django.contrib.sessions.backends.cache"</span></span><br><span class="line">SESSION_CACHE_ALIAS = <span class="string">"session"</span></span><br></pre></td></tr></table></figure>

<p><strong>关于django-redis 的使用，说明文档可见<a href="http://django-redis-chs.readthedocs.io/zh_CN/latest/" target="_blank" rel="noopener">http://django-redis-chs.readthedocs.io/zh_CN/latest/</a></strong></p>
<p><strong>django-redis提供了get_redis_connection的方法，通过调用get_redis_connection方法传递redis的配置名称可获取到redis的连接对象，通过redis连接对象可以执行redis命令</strong></p>
<p><a href="https://redis-py.readthedocs.io/en/latest/" target="_blank" rel="noopener">https://redis-py.readthedocs.io/en/latest/</a></p>
<p>使用范例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django_redis <span class="keyword">import</span> get_redis_connection// 链接redis数据库redis_conn = get_redis_connection(<span class="string">"default"</span>)</span><br></pre></td></tr></table></figure>

<h3 id="使用云通讯发送短信"><a href="#使用云通讯发送短信" class="headerlink" title="使用云通讯发送短信"></a>使用云通讯发送短信</h3><p>在登录后的平台上面获取一下信息:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ACCOUNT SID：8aaf0708697b6beb01699f4442911776</span><br><span class="line">AUTH TOKEN : b4dea244f43a4e0f90e557f0a99c70fa</span><br><span class="line">AppID(默认)：8aaf0708697b6beb01699f4442e3177c</span><br><span class="line">Rest URL(生产)： app.cloopen.com:8883         [项目上线时使用真实短信发送服务器]</span><br><span class="line">Rest URL(开发)： sandboxapp.cloopen.com:8883  [项目开发时使用沙箱短信发送服务器]</span><br></pre></td></tr></table></figure>

<p>找到sdkdemo进行下载</p>
<p><img src="/images/1553677987640.png" alt="1553677987640.png"></p>
<p>在开发过程中,为了节约发送短信的成本,可以把自己的或者同事的手机加入到测试号码中.</p>
<p><img src="/images/1553678528811.png" alt="1553678528811.png"></p>
<h3 id="后端生成短信验证码"><a href="#后端生成短信验证码" class="headerlink" title="后端生成短信验证码"></a>后端生成短信验证码</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> renranapi.libs.yuntongxun.sms <span class="keyword">import</span> CCP</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> django_redis <span class="keyword">import</span> get_redis_connection</span><br><span class="line"><span class="keyword">from</span> renranapi.settings <span class="keyword">import</span> constants</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SMSCodeAPIView</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    短信验证码</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request, mobile)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        短信验证码</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment"># 生成短信验证码</span></span><br><span class="line">        sms_code = <span class="string">"%06d"</span> % random.randint(<span class="number">0</span>, <span class="number">999999</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 保存短信验证码与发送记录</span></span><br><span class="line">        redis_conn = get_redis_connection(<span class="string">'sms_code'</span>)</span><br><span class="line">        <span class="comment"># 使用redis提供的管道操作可以一次性执行多条redis命令</span></span><br><span class="line">        pl = redis_conn.pipeline()</span><br><span class="line">        pl.multi()</span><br><span class="line">        pl.setex(<span class="string">"sms_%s"</span> % mobile, constants.SMS_CODE_EXPIRE, sms_code)   <span class="comment"># 设置短信有效期为300s</span></span><br><span class="line">        pl.setex(<span class="string">"sms_time_%s"</span> % mobile, constants.SMS_CODE_INTERVAL, <span class="string">"_"</span>)    <span class="comment"># 设置发送短信间隔为60s</span></span><br><span class="line">        pl.execute()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 发送短信验证码</span></span><br><span class="line">        ccp = CCP()</span><br><span class="line">        ccp.send_template_sms(mobile, [sms_code, ], constants.SMS_CODE_EXPIRE//<span class="number">60</span>, settings.SMS.SMS_TEMPLATE_ID)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Response(&#123;<span class="string">"message"</span>: <span class="string">"OK"</span>&#125;, status.HTTP_200_OK)</span><br></pre></td></tr></table></figure>

<p>settings/constants.py代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 短信有效使用时间</span></span><br><span class="line">SMS_CODE_EXPIRE = <span class="number">300</span></span><br><span class="line"><span class="comment"># 短信发送冷却时间</span></span><br><span class="line">SMS_CODE_INTERVAL = <span class="number">60</span></span><br></pre></td></tr></table></figure>

<p>客户端发送注册信息和发送短信</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"sign"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"logo"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"/static/image/nav-logo.png"</span> <span class="attr">alt</span>=<span class="string">"Logo"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h4</span> <span class="attr">class</span>=<span class="string">"title"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"normal-title"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/user/login"</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">b</span>&gt;</span>·<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">id</span>=<span class="string">"js-sign-up-btn"</span> <span class="attr">class</span>=<span class="string">"active"</span> <span class="attr">to</span>=<span class="string">"/user/register"</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"js-sign-up-container"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">"new_user"</span> <span class="attr">id</span>=<span class="string">"new_user"</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">accept-charset</span>=<span class="string">"UTF-8"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"input-prepend restyle"</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">input</span> <span class="attr">placeholder</span>=<span class="string">"你的昵称"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">value</span>=<span class="string">""</span> <span class="attr">v-model</span>=<span class="string">"nickname"</span> <span class="attr">id</span>=<span class="string">"user_nickname"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"iconfont ic-user"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"input-prepend restyle no-radius js-normal"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">placeholder</span>=<span class="string">"手机号"</span> <span class="attr">type</span>=<span class="string">"tel"</span> <span class="attr">v-model</span>=<span class="string">"mobile"</span> <span class="attr">id</span>=<span class="string">"user_mobile_number"</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"iconfont ic-phonenumber"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"input-prepend restyle no-radius security-up-code js-security-number"</span> <span class="attr">v-if</span>=<span class="string">"is_show_sms_code"</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"sms_code"</span> <span class="attr">id</span>=<span class="string">"sms_code"</span> <span class="attr">placeholder</span>=<span class="string">"手机验证码"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"iconfont ic-verify"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">tabindex</span>=<span class="string">"-1"</span> <span class="attr">class</span>=<span class="string">"btn-up-resend js-send-code-button"</span>  <span class="attr">href</span>=<span class="string">"javascript:void(0);"</span> <span class="attr">id</span>=<span class="string">"send_code"</span> @<span class="attr">click.prevent</span>=<span class="string">"send_sms"</span>&gt;</span>&#123;&#123;sms_code_text&#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"security_number"</span> <span class="attr">id</span>=<span class="string">"security_number"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"input-prepend"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">placeholder</span>=<span class="string">"设置密码"</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">v-model</span>=<span class="string">"password"</span> <span class="attr">id</span>=<span class="string">"user_password"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"iconfont ic-password"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">name</span>=<span class="string">"commit"</span> <span class="attr">value</span>=<span class="string">"注册"</span> <span class="attr">class</span>=<span class="string">"sign-up-button"</span> <span class="attr">id</span>=<span class="string">"sign_up_btn"</span> @<span class="attr">click.prevent</span>=<span class="string">"registerHandler"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"sign-up-msg"</span>&gt;</span>点击 “注册” 即表示您同意并愿意遵守荏苒<span class="tag">&lt;<span class="name">br</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>用户协议<span class="tag">&lt;/<span class="name">a</span>&gt;</span> 和 <span class="tag">&lt;<span class="name">a</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>隐私政策<span class="tag">&lt;/<span class="name">a</span>&gt;</span> 。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 更多注册方式 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"more-sign"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">h6</span>&gt;</span>社交帐号直接注册<span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">"weixin"</span> <span class="attr">class</span>=<span class="string">"weixin"</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"iconfont ic-wechat"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">"qq"</span> <span class="attr">class</span>=<span class="string">"qq"</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"iconfont ic-qq_connect"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">        name: <span class="string">"Register"</span>,</span></span><br><span class="line">        data()&#123;</span><br><span class="line"><span class="actionscript">          <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">            nickname:<span class="string">""</span>,</span></span><br><span class="line"><span class="actionscript">            mobile:<span class="string">""</span>,</span></span><br><span class="line"><span class="actionscript">            sms_code:<span class="string">""</span>,</span></span><br><span class="line"><span class="actionscript">            password:<span class="string">""</span>,</span></span><br><span class="line"><span class="actionscript">            sms_code_text:<span class="string">"发送验证码"</span>,</span></span><br><span class="line"><span class="actionscript">            is_show_sms_code:<span class="literal">false</span>,</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        watch: &#123;</span><br><span class="line">          mobile() &#123;</span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> (<span class="regexp">/^1[3-9]\d&#123;9&#125;$/</span>.test(<span class="keyword">this</span>.mobile)) &#123;</span></span><br><span class="line"><span class="actionscript">              <span class="keyword">this</span>.is_show_sms_code = <span class="literal">true</span>;</span></span><br><span class="line"><span class="actionscript">            &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="actionscript">              <span class="keyword">this</span>.is_show_sms_code = <span class="literal">false</span>;</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">          registerHandler()&#123;</span><br><span class="line"><span class="actionscript">            <span class="comment">// todo 数据验证</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">            <span class="comment">// 注册处理</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">this</span>.$axios.post(<span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.$settings.Host&#125;</span>/users/`</span>,&#123;</span></span><br><span class="line"><span class="actionscript">                mobile: <span class="keyword">this</span>.mobile,</span></span><br><span class="line"><span class="actionscript">                nickname: <span class="keyword">this</span>.nickname,</span></span><br><span class="line"><span class="actionscript">                password: <span class="keyword">this</span>.password,</span></span><br><span class="line"><span class="actionscript">                sms_code: <span class="keyword">this</span>.sms_code,</span></span><br><span class="line"><span class="javascript">            &#125;).then(<span class="function"><span class="params">response</span>=&gt;</span> &#123;</span></span><br><span class="line">              sessionStorage.user_token = response.data.token;</span><br><span class="line">              sessionStorage.user_id = response.data.id;</span><br><span class="line">              sessionStorage.user_name = response.data.username;</span><br><span class="line">              sessionStorage.user_avatar = response.data.avatar;</span><br><span class="line">              sessionStorage.user_nickname = response.data.nickname;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">              <span class="keyword">this</span>.$confirm(<span class="string">'注册成功, 欢迎加入荏苒！'</span>, <span class="string">'提示'</span>, &#123;</span></span><br><span class="line"><span class="actionscript">                confirmButtonText: <span class="string">'跳转到首页'</span>,</span></span><br><span class="line"><span class="actionscript">                cancelButtonText: <span class="string">'跳转上一页'</span>,</span></span><br><span class="line"><span class="actionscript">                type: <span class="string">'success'</span></span></span><br><span class="line"><span class="javascript">              &#125;).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.$router.push(<span class="string">"/"</span>);</span></span><br><span class="line"><span class="javascript">              &#125;).catch(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.$router.go(<span class="number">-1</span>);</span></span><br><span class="line">              &#125;);</span><br><span class="line"></span><br><span class="line"><span class="javascript">            &#125;).catch(<span class="function"><span class="params">error</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.$message.error(<span class="string">"用户注册失败！"</span>);</span></span><br><span class="line">            &#125;)</span><br><span class="line">          &#125;,</span><br><span class="line">          send_sms()&#123;</span><br><span class="line"><span class="javascript">                <span class="keyword">if</span>( !<span class="regexp">/1[1-9]&#123;2&#125;\d&#123;8&#125;/</span>.test(<span class="keyword">this</span>.mobile) )&#123;</span></span><br><span class="line"><span class="actionscript">                  <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">                <span class="comment">// 如果 sms_code_text 不是文本,而是数字,则表示当前手机号码还在60秒的发送短信间隔内</span></span></span><br><span class="line"><span class="actionscript">                <span class="keyword">if</span>(<span class="keyword">this</span>.sms_code_text != <span class="string">"发送验证码"</span>)&#123;</span></span><br><span class="line"><span class="actionscript">                  <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">                <span class="comment">// 发送短信</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">let</span> _this = <span class="keyword">this</span>;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">this</span>.$axios.get(<span class="string">`<span class="subst">$&#123;_this.$settings.Host&#125;</span>/users/sms/<span class="subst">$&#123;_this.mobile&#125;</span>/`</span>).then(<span class="function"><span class="params">response</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="actionscript">                  <span class="comment">// 显示发送短信以后的文本倒计时</span></span></span><br><span class="line"><span class="javascript">                  <span class="keyword">let</span> time = <span class="number">60</span>;</span></span><br><span class="line"><span class="javascript">                  <span class="keyword">let</span> timer = setInterval(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span></span><br><span class="line">                    --time;</span><br><span class="line">                    if(time &lt;=1)&#123;</span><br><span class="line"><span class="actionscript">                      <span class="comment">// 如果倒计时为0,则关闭当前定时器</span></span></span><br><span class="line"><span class="actionscript">                      _this.sms_code_text = <span class="string">"发送验证码"</span>;</span></span><br><span class="line">                      clearInterval(timer);</span><br><span class="line">                      time = 60;</span><br><span class="line"><span class="actionscript">                    &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="actionscript">                        _this.sms_code_text = time+<span class="string">"秒"</span>;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                  &#125;,1000);</span><br><span class="line"></span><br><span class="line"><span class="javascript">                &#125;).catch(<span class="function"><span class="params">error</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="javascript">                  <span class="built_in">console</span>.log(error);</span></span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line">input&#123;</span><br><span class="line">  outline: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="css">*, <span class="selector-pseudo">:after</span>, <span class="selector-pseudo">:before</span> &#123;</span></span><br><span class="line">    box-sizing: border-box;</span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> &#123;</span></span><br><span class="line">	height: 100%;</span><br><span class="line">	min-height: 750px;</span><br><span class="line">	text-align: center;</span><br><span class="line">	font-size: 14px;</span><br><span class="line"><span class="css">	<span class="selector-tag">background-color</span>: <span class="selector-id">#f1f1f1</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span><span class="selector-pseudo">:before</span> &#123;</span></span><br><span class="line">	content: "";</span><br><span class="line">	display: inline-block;</span><br><span class="line">	height: 85%;</span><br><span class="line">	vertical-align: middle</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.disable</span>,<span class="selector-class">.sign</span> <span class="selector-class">.disable-gray</span> &#123;</span></span><br><span class="line"><span class="css">	<span class="selector-tag">opacity</span>: <span class="selector-class">.5</span>;</span></span><br><span class="line">	pointer-events: none</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.disable-gray</span> &#123;</span></span><br><span class="line"><span class="css">	<span class="selector-tag">background-color</span>: <span class="selector-id">#969696</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.tooltip-error</span> &#123;</span></span><br><span class="line">	font-size: 14px;</span><br><span class="line">	line-height: 25px;</span><br><span class="line">	white-space: nowrap;</span><br><span class="line">	background: none</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.tooltip-error</span> <span class="selector-class">.tooltip-inner</span> &#123;</span></span><br><span class="line">	max-width: 280px;</span><br><span class="line"><span class="css">	<span class="selector-tag">color</span>: <span class="selector-id">#333</span>;</span></span><br><span class="line"><span class="css">	<span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ea6f5a</span>;</span></span><br><span class="line"><span class="css">	<span class="selector-tag">background-color</span>: <span class="selector-id">#fff</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.tooltip-error</span> <span class="selector-class">.tooltip-inner</span> <span class="selector-tag">i</span> &#123;</span></span><br><span class="line">	position: static;</span><br><span class="line">	margin-right: 5px;</span><br><span class="line">	font-size: 20px;</span><br><span class="line"><span class="css">	<span class="selector-tag">color</span>: <span class="selector-id">#ea6f5a</span>;</span></span><br><span class="line">	vertical-align: middle</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.tooltip-error</span> <span class="selector-class">.tooltip-inner</span> <span class="selector-tag">span</span> &#123;</span></span><br><span class="line">	vertical-align: middle;</span><br><span class="line">	display: inline-block;</span><br><span class="line">	white-space: normal;</span><br><span class="line">	max-width: 230px</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.tooltip-error</span><span class="selector-class">.right</span> <span class="selector-class">.tooltip-arrow-border</span> &#123;</span></span><br><span class="line"><span class="css">	<span class="selector-tag">border-right-color</span>: <span class="selector-id">#ea6f5a</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.tooltip-error</span><span class="selector-class">.right</span> <span class="selector-class">.tooltip-arrow-bg</span> &#123;</span></span><br><span class="line">	left: 2px;</span><br><span class="line"><span class="css">	<span class="selector-tag">border-right-color</span>: <span class="selector-id">#fff</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.slide-error</span> &#123;</span></span><br><span class="line">	position: relative;</span><br><span class="line">	padding: 10px 0;</span><br><span class="line"><span class="css">	<span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#c8c8c8</span>;</span></span><br><span class="line">	border-radius: 4px</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.slide-error</span> <span class="selector-tag">i</span> &#123;</span></span><br><span class="line">	position: static!important;</span><br><span class="line">	margin-right: 10px;</span><br><span class="line"><span class="css">	<span class="selector-tag">color</span>: <span class="selector-id">#ea6f5a</span>!<span class="selector-tag">important</span>;</span></span><br><span class="line">	vertical-align: middle</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.slide-error</span> <span class="selector-tag">span</span> &#123;</span></span><br><span class="line">	font-size: 15px;</span><br><span class="line">	vertical-align: middle</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.slide-error</span> <span class="selector-tag">div</span> &#123;</span></span><br><span class="line">	margin-top: 10px;</span><br><span class="line">	font-size: 13px</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.slide-error</span> <span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="css">	<span class="selector-tag">color</span>: <span class="selector-id">#3194d0</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.js-sign-up-forbidden</span> &#123;</span></span><br><span class="line"><span class="css">	<span class="selector-tag">color</span>: <span class="selector-id">#999</span>;</span></span><br><span class="line">	padding: 80px 0 100px</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.js-sign-up-container</span> <span class="selector-class">.slide-error</span> &#123;</span></span><br><span class="line">	border-bottom: none;</span><br><span class="line">	border-radius: 0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.logo</span> &#123;</span></span><br><span class="line">	position: absolute;</span><br><span class="line">	top: 56px;</span><br><span class="line">	margin-left: 50px</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.logo</span> <span class="selector-tag">img</span> &#123;</span></span><br><span class="line">	width: 100px</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.main</span> &#123;</span></span><br><span class="line">	width: 400px;</span><br><span class="line">	margin: 60px auto 0;</span><br><span class="line">	padding: 50px 50px 30px;</span><br><span class="line"><span class="css">	<span class="selector-tag">background-color</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line">	border-radius: 4px;</span><br><span class="line"><span class="css">	<span class="selector-tag">box-shadow</span>: 0 0 8<span class="selector-tag">px</span> <span class="selector-tag">rgba</span>(0,0,0,<span class="selector-class">.1</span>);</span></span><br><span class="line">	vertical-align: middle;</span><br><span class="line">	display: inline-block</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.reset-title</span>,<span class="selector-class">.sign</span> <span class="selector-class">.title</span> &#123;</span></span><br><span class="line">	margin: 0 auto 50px;</span><br><span class="line">	padding: 10px;</span><br><span class="line">	font-weight: 400;</span><br><span class="line"><span class="css">	<span class="selector-tag">color</span>: <span class="selector-id">#969696</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.reset-title</span> <span class="selector-tag">a</span>,<span class="selector-class">.sign</span> <span class="selector-class">.title</span> <span class="selector-tag">a</span> &#123;</span></span><br><span class="line">	padding: 10px;</span><br><span class="line"><span class="css">	<span class="selector-tag">color</span>: <span class="selector-id">#969696</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.reset-title</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>,<span class="selector-class">.sign</span> <span class="selector-class">.title</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="css">	<span class="selector-tag">border-bottom</span>: 2<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ea6f5a</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.reset-title</span> <span class="selector-class">.active</span>,<span class="selector-class">.sign</span> <span class="selector-class">.title</span> <span class="selector-class">.active</span> &#123;</span></span><br><span class="line">	font-weight: 700;</span><br><span class="line"><span class="css">	<span class="selector-tag">color</span>: <span class="selector-id">#ea6f5a</span>;</span></span><br><span class="line"><span class="css">	<span class="selector-tag">border-bottom</span>: 2<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ea6f5a</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.reset-title</span> <span class="selector-tag">b</span>,<span class="selector-class">.sign</span> <span class="selector-class">.title</span> <span class="selector-tag">b</span> &#123;</span></span><br><span class="line">	padding: 10px</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.reset-title</span> &#123;</span></span><br><span class="line"><span class="css">	<span class="selector-tag">color</span>: <span class="selector-id">#333</span>;</span></span><br><span class="line">	font-weight: 700</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-tag">form</span> &#123;</span></span><br><span class="line">	margin-bottom: 30px</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-tag">form</span> <span class="selector-class">.input-prepend</span> &#123;</span></span><br><span class="line">	position: relative;</span><br><span class="line">	width: 100%</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-tag">form</span> <span class="selector-class">.input-prepend</span> <span class="selector-tag">input</span> &#123;</span></span><br><span class="line">	width: 100%;</span><br><span class="line">	height: 50px;</span><br><span class="line">	margin-bottom: 0;</span><br><span class="line">	padding: 4px 12px 4px 35px;</span><br><span class="line"><span class="css">	<span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#c8c8c8</span>;</span></span><br><span class="line">	border-radius: 0 0 4px 4px;</span><br><span class="line"><span class="css">	<span class="selector-tag">background-color</span>: <span class="selector-tag">hsla</span>(0,0%,71%,<span class="selector-class">.1</span>);</span></span><br><span class="line">	vertical-align: middle</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-tag">form</span> <span class="selector-class">.input-prepend</span> <span class="selector-tag">i</span> &#123;</span></span><br><span class="line">	position: absolute;</span><br><span class="line">	top: 14px;</span><br><span class="line">	left: 10px;</span><br><span class="line">	font-size: 18px;</span><br><span class="line"><span class="css">	<span class="selector-tag">color</span>: <span class="selector-id">#969696</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-tag">form</span> <span class="selector-class">.input-prepend</span> <span class="selector-tag">span</span> &#123;</span></span><br><span class="line"><span class="css">	<span class="selector-tag">color</span>: <span class="selector-id">#333</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-tag">form</span> <span class="selector-class">.input-prepend</span> <span class="selector-class">.ic-show</span> &#123;</span></span><br><span class="line">	top: 18px;</span><br><span class="line">	left: auto;</span><br><span class="line">	right: 8px;</span><br><span class="line">	font-size: 12px</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-tag">form</span> <span class="selector-class">.geetest-placeholder</span> &#123;</span></span><br><span class="line">	height: 44px;</span><br><span class="line">	border-radius: 4px;</span><br><span class="line"><span class="css">	<span class="selector-tag">background-color</span>: <span class="selector-tag">hsla</span>(0,0%,71%,<span class="selector-class">.1</span>);</span></span><br><span class="line">	text-align: center;</span><br><span class="line">	line-height: 44px;</span><br><span class="line">	font-size: 14px;</span><br><span class="line"><span class="css">	<span class="selector-tag">color</span>: <span class="selector-id">#999</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-tag">form</span> <span class="selector-class">.restyle</span> &#123;</span></span><br><span class="line">	margin-bottom: 0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-tag">form</span> <span class="selector-class">.restyle</span> <span class="selector-tag">input</span> &#123;</span></span><br><span class="line">	border-bottom: none;</span><br><span class="line">	border-radius: 4px 4px 0 0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-tag">form</span> <span class="selector-class">.no-radius</span> <span class="selector-tag">input</span> &#123;</span></span><br><span class="line">	border-radius: 0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-tag">form</span> <span class="selector-class">.slide-security-placeholder</span> &#123;</span></span><br><span class="line">	height: 32px;</span><br><span class="line"><span class="css">	<span class="selector-tag">background-color</span>: <span class="selector-tag">hsla</span>(0,0%,71%,<span class="selector-class">.1</span>);</span></span><br><span class="line">	border-radius: 4px</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-tag">form</span> <span class="selector-class">.slide-security-placeholder</span> <span class="selector-tag">p</span> &#123;</span></span><br><span class="line">	padding-top: 7px;</span><br><span class="line"><span class="css">	<span class="selector-tag">color</span>: <span class="selector-id">#999</span>;</span></span><br><span class="line">	margin-right: -7px</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.overseas-btn</span> &#123;</span></span><br><span class="line">	font-size: 14px;</span><br><span class="line"><span class="css">	<span class="selector-tag">color</span>: <span class="selector-id">#999</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.overseas-btn</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="css">	<span class="selector-tag">color</span>: <span class="selector-id">#2f2f2f</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.remember-btn</span> &#123;</span></span><br><span class="line">	float: left;</span><br><span class="line">	margin: 15px 0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.remember-btn</span> <span class="selector-tag">span</span> &#123;</span></span><br><span class="line">	margin-left: 5px;</span><br><span class="line">	font-size: 15px;</span><br><span class="line"><span class="css">	<span class="selector-tag">color</span>: <span class="selector-id">#969696</span>;</span></span><br><span class="line">	vertical-align: middle</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.forget-btn</span> &#123;</span></span><br><span class="line">	float: right;</span><br><span class="line">	position: relative;</span><br><span class="line">	margin: 15px 0;</span><br><span class="line">	font-size: 14px</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.forget-btn</span> <span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="css">	<span class="selector-tag">color</span>: <span class="selector-id">#999</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.forget-btn</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="css">	<span class="selector-tag">color</span>: <span class="selector-id">#333</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.forget-btn</span> <span class="selector-class">.dropdown-menu</span> &#123;</span></span><br><span class="line">	top: 20px;</span><br><span class="line">	left: auto;</span><br><span class="line">	right: 0;</span><br><span class="line">	border-radius: 4px</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.forget-btn</span> <span class="selector-class">.dropdown-menu</span> <span class="selector-tag">a</span> &#123;</span></span><br><span class="line">	padding: 10px 20px;</span><br><span class="line"><span class="css">	<span class="selector-tag">color</span>: <span class="selector-id">#333</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-id">#sign-in-loading</span> &#123;</span></span><br><span class="line">	position: relative;</span><br><span class="line">	width: 20px;</span><br><span class="line">	height: 20px;</span><br><span class="line">	vertical-align: middle;</span><br><span class="line">	margin-top: -4px;</span><br><span class="line">	margin-right: 2px;</span><br><span class="line">	display: none</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-id">#sign-in-loading</span><span class="selector-pseudo">:after</span> &#123;</span></span><br><span class="line">	content: "";</span><br><span class="line">	position: absolute;</span><br><span class="line">	left: 0;</span><br><span class="line">	top: 0;</span><br><span class="line">	width: 100%;</span><br><span class="line">	height: 100%;</span><br><span class="line">	background-color: transparent;              </span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-id">#sign-in-loading</span><span class="selector-pseudo">:before</span> &#123;</span></span><br><span class="line">	content: "";</span><br><span class="line">	position: absolute;</span><br><span class="line">	top: 50%;</span><br><span class="line">	left: 50%;</span><br><span class="line">	width: 20px;</span><br><span class="line">	height: 20px;</span><br><span class="line">	margin: -10px 0 0 -10px;</span><br><span class="line">	border-radius: 10px;</span><br><span class="line"><span class="css">	<span class="selector-tag">border</span>: 2<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#fff</span>;</span></span><br><span class="line">	border-bottom-color: transparent;</span><br><span class="line">	vertical-align: middle;</span><br><span class="line"><span class="css">	<span class="selector-tag">-webkit-animation</span>: <span class="selector-tag">rolling</span> <span class="selector-class">.8s</span> <span class="selector-tag">infinite</span> <span class="selector-tag">linear</span>;</span></span><br><span class="line"><span class="css">	<span class="selector-tag">animation</span>: <span class="selector-tag">rolling</span> <span class="selector-class">.8s</span> <span class="selector-tag">infinite</span> <span class="selector-tag">linear</span>;</span></span><br><span class="line">	z-index: 1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.sign-in-button</span>,<span class="selector-class">.sign</span> <span class="selector-class">.sign-up-button</span> &#123;</span></span><br><span class="line">	margin-top: 20px;</span><br><span class="line">	width: 100%;</span><br><span class="line">	padding: 9px 18px;</span><br><span class="line">	font-size: 18px;</span><br><span class="line">	border: none;</span><br><span class="line">	border-radius: 25px;</span><br><span class="line"><span class="css">	<span class="selector-tag">color</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line"><span class="css">	<span class="selector-tag">background</span>: <span class="selector-id">#42c02e</span>;</span></span><br><span class="line">	cursor: pointer;</span><br><span class="line">	outline: none;</span><br><span class="line">	display: block;</span><br><span class="line">	clear: both</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.sign-in-button</span><span class="selector-pseudo">:hover</span>,<span class="selector-class">.sign</span> <span class="selector-class">.sign-up-button</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="css">	<span class="selector-tag">background</span>: <span class="selector-id">#3db922</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.sign-in-button</span> &#123;</span></span><br><span class="line"><span class="css">	<span class="selector-tag">background</span>: <span class="selector-id">#3194d0</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.sign-in-button</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="css">	<span class="selector-tag">background</span>: <span class="selector-id">#187cb7</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.btn-in-resend</span>,<span class="selector-class">.sign</span> <span class="selector-class">.btn-up-resend</span> &#123;</span></span><br><span class="line">	position: absolute;</span><br><span class="line">	top: 7px;</span><br><span class="line">	right: 7px;</span><br><span class="line">	width: 100px;</span><br><span class="line">	height: 36px;</span><br><span class="line">	font-size: 13px;</span><br><span class="line"><span class="css">	<span class="selector-tag">color</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line"><span class="css">	<span class="selector-tag">background-color</span>: <span class="selector-id">#42c02e</span>;</span></span><br><span class="line">	border-radius: 20px;</span><br><span class="line">	line-height: 36px</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.btn-in-resend</span> &#123;</span></span><br><span class="line"><span class="css">	<span class="selector-tag">background-color</span>: <span class="selector-id">#3194d0</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.sign-up-msg</span> &#123;</span></span><br><span class="line">	margin: 10px 0;</span><br><span class="line">	padding: 0;</span><br><span class="line">	text-align: center;</span><br><span class="line">	font-size: 12px;</span><br><span class="line">	line-height: 20px;</span><br><span class="line"><span class="css">	<span class="selector-tag">color</span>: <span class="selector-id">#969696</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.sign-up-msg</span> <span class="selector-tag">a</span>,<span class="selector-class">.sign</span> <span class="selector-class">.sign-up-msg</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="css">	<span class="selector-tag">color</span>: <span class="selector-id">#3194d0</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.overseas</span> <span class="selector-tag">input</span> &#123;</span></span><br><span class="line">	padding-left: 110px!important</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.overseas</span> <span class="selector-class">.overseas-number</span> &#123;</span></span><br><span class="line">	position: absolute;</span><br><span class="line">	top: 0;</span><br><span class="line">	left: 0;</span><br><span class="line">	width: 100px;</span><br><span class="line">	height: 50px;</span><br><span class="line">	font-size: 18px;</span><br><span class="line"><span class="css">	<span class="selector-tag">color</span>: <span class="selector-id">#969696</span>;</span></span><br><span class="line"><span class="css">	<span class="selector-tag">border-right</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#c8c8c8</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.overseas</span> <span class="selector-class">.overseas-number</span> <span class="selector-tag">span</span> &#123;</span></span><br><span class="line">	margin-top: 17px;</span><br><span class="line">	padding-left: 35px;</span><br><span class="line">	text-align: left;</span><br><span class="line">	font-size: 14px;</span><br><span class="line">	display: block</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.overseas</span> <span class="selector-class">.dropdown-menu</span> &#123;</span></span><br><span class="line">	width: 100%;</span><br><span class="line">	max-height: 285px;</span><br><span class="line">	font-size: 14px;</span><br><span class="line">	border-radius: 0 0 4px 4px;</span><br><span class="line">	overflow-y: auto</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.overseas</span> <span class="selector-class">.dropdown-menu</span> <span class="selector-tag">li</span> <span class="selector-class">.nation-code</span> &#123;</span></span><br><span class="line">	width: 65px;</span><br><span class="line">	display: inline-block</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.overseas</span> <span class="selector-class">.dropdown-menu</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span> &#123;</span></span><br><span class="line">	padding: 6px 20px;</span><br><span class="line">	font-size: 14px;</span><br><span class="line">	line-height: 20px</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.overseas</span> <span class="selector-class">.dropdown-menu</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span><span class="selector-pseudo">::hover</span> &#123;</span></span><br><span class="line"><span class="css">	<span class="selector-tag">color</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line"><span class="css">	<span class="selector-tag">background-color</span>: <span class="selector-id">#f5f5f5</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.more-sign</span> &#123;</span></span><br><span class="line">	margin-top: 50px</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.more-sign</span> <span class="selector-tag">h6</span> &#123;</span></span><br><span class="line">	position: relative;</span><br><span class="line">	margin: 0 0 10px;</span><br><span class="line">	font-size: 12px;</span><br><span class="line"><span class="css">	<span class="selector-tag">color</span>: <span class="selector-id">#b5b5b5</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.more-sign</span> <span class="selector-tag">h6</span><span class="selector-pseudo">:before</span> &#123;</span></span><br><span class="line">	left: 30px</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.more-sign</span> <span class="selector-tag">h6</span><span class="selector-pseudo">:after</span>,<span class="selector-class">.sign</span> <span class="selector-class">.more-sign</span> <span class="selector-tag">h6</span><span class="selector-pseudo">:before</span> &#123;</span></span><br><span class="line">	content: "";</span><br><span class="line"><span class="css">	<span class="selector-tag">border-top</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#b5b5b5</span>;</span></span><br><span class="line">	display: block;</span><br><span class="line">	position: absolute;</span><br><span class="line">	width: 60px;</span><br><span class="line">	top: 5px</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.more-sign</span> <span class="selector-tag">h6</span><span class="selector-pseudo">:after</span> &#123;</span></span><br><span class="line">	right: 30px</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.more-sign</span> <span class="selector-tag">ul</span> &#123;</span></span><br><span class="line">	margin-bottom: 10px;</span><br><span class="line">	list-style: none</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.more-sign</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> &#123;</span></span><br><span class="line">	margin: 0 5px;</span><br><span class="line">	display: inline-block</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.more-sign</span> <span class="selector-tag">ul</span> <span class="selector-tag">a</span> &#123;</span></span><br><span class="line">	width: 50px;</span><br><span class="line">	height: 50px;</span><br><span class="line">	line-height: 50px;</span><br><span class="line">	display: block</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.more-sign</span> <span class="selector-tag">ul</span> <span class="selector-tag">i</span> &#123;</span></span><br><span class="line">	font-size: 28px</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.more-sign</span> <span class="selector-class">.ic-weibo</span> &#123;</span></span><br><span class="line"><span class="css">	<span class="selector-tag">color</span>: <span class="selector-id">#e05244</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.more-sign</span> <span class="selector-class">.ic-wechat</span> &#123;</span></span><br><span class="line"><span class="css">	<span class="selector-tag">color</span>: <span class="selector-id">#00bb29</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.more-sign</span> <span class="selector-class">.ic-qq_connect</span> &#123;</span></span><br><span class="line"><span class="css">	<span class="selector-tag">color</span>: <span class="selector-id">#498ad5</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.more-sign</span> <span class="selector-class">.ic-douban</span> &#123;</span></span><br><span class="line"><span class="css">	<span class="selector-tag">color</span>: <span class="selector-id">#00820f</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.more-sign</span> <span class="selector-class">.ic-more</span> &#123;</span></span><br><span class="line"><span class="css">	<span class="selector-tag">color</span>: <span class="selector-id">#999</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.more-sign</span> <span class="selector-class">.weibo-loading</span> &#123;</span></span><br><span class="line">	pointer-events: none;</span><br><span class="line">	cursor: pointer;</span><br><span class="line">	position: relative</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.more-sign</span> <span class="selector-class">.weibo-loading</span><span class="selector-pseudo">:after</span> &#123;</span></span><br><span class="line">	content: "";</span><br><span class="line">	position: absolute;</span><br><span class="line">	left: 0;</span><br><span class="line">	top: 0;</span><br><span class="line">	width: 100%;</span><br><span class="line">	height: 100%;</span><br><span class="line"><span class="css">	<span class="selector-tag">background-color</span>: <span class="selector-id">#fff</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-tag">body</span><span class="selector-class">.reader-night-mode</span> <span class="selector-class">.sign</span> <span class="selector-class">.more-sign</span> <span class="selector-class">.weibo-loading</span><span class="selector-pseudo">:after</span> &#123;</span></span><br><span class="line"><span class="css">	<span class="selector-tag">background-color</span>: <span class="selector-id">#3f3f3f</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.more-sign</span> <span class="selector-class">.weibo-loading</span><span class="selector-pseudo">:before</span> &#123;</span></span><br><span class="line">	content: "";</span><br><span class="line">	position: absolute;</span><br><span class="line">	top: 50%;</span><br><span class="line">	left: 50%;</span><br><span class="line">	width: 20px;</span><br><span class="line">	height: 20px;</span><br><span class="line">	margin: -10px 0 0 -10px;</span><br><span class="line">	border-radius: 10px;</span><br><span class="line"><span class="css">	<span class="selector-tag">border</span>: 2<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#e05244</span>;</span></span><br><span class="line">	border-bottom-color: transparent;</span><br><span class="line">	vertical-align: middle;</span><br><span class="line"><span class="css">	<span class="selector-tag">-webkit-animation</span>: <span class="selector-tag">rolling</span> <span class="selector-class">.8s</span> <span class="selector-tag">infinite</span> <span class="selector-tag">linear</span>;</span></span><br><span class="line"><span class="css">	<span class="selector-tag">animation</span>: <span class="selector-tag">rolling</span> <span class="selector-class">.8s</span> <span class="selector-tag">infinite</span> <span class="selector-tag">linear</span>;</span></span><br><span class="line">	z-index: 1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="keyword">@keyframes</span> rolling &#123;</span></span><br><span class="line">	0% &#123;</span><br><span class="line">		-webkit-transform: rotate(0deg);</span><br><span class="line">		transform: rotate(0deg)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	to &#123;</span><br><span class="line">		-webkit-transform: rotate(1turn);</span><br><span class="line">		transform: rotate(1turn)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="keyword">@-webkit-keyframes</span> rolling &#123;</span></span><br><span class="line">	0% &#123;</span><br><span class="line">		-webkit-transform: rotate(0deg)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	to &#123;</span><br><span class="line">		-webkit-transform: rotate(1turn)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.reset-password-input</span> &#123;</span></span><br><span class="line">	border-radius: 4px!important</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.return</span> &#123;</span></span><br><span class="line">	margin-left: -8px;</span><br><span class="line"><span class="css">	<span class="selector-tag">color</span>: <span class="selector-id">#969696</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.return</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="css">	<span class="selector-tag">color</span>: <span class="selector-id">#333</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.return</span> <span class="selector-tag">i</span> &#123;</span></span><br><span class="line">	margin-right: 5px</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.icheckbox_square-green</span> &#123;</span></span><br><span class="line">	display: inline-block;</span><br><span class="line">	*display: inline;</span><br><span class="line">	vertical-align: middle;</span><br><span class="line">	margin: 0;</span><br><span class="line">	padding: 0;</span><br><span class="line">	width: 18px;</span><br><span class="line">	height: 18px;</span><br><span class="line">	background: url(/static/image/green.png) no-repeat;</span><br><span class="line">	border: none;</span><br><span class="line">	cursor: pointer;</span><br><span class="line">	background-position: 0 0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.icheckbox_square-green</span><span class="selector-class">.hover</span> &#123;</span></span><br><span class="line">	background-position: -20px 0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.icheckbox_square-green</span><span class="selector-class">.checked</span> &#123;</span></span><br><span class="line">	background-position: -40px 0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.icheckbox_square-green</span><span class="selector-class">.disabled</span> &#123;</span></span><br><span class="line">	background-position: -60px 0;</span><br><span class="line">	cursor: default</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.sign</span> <span class="selector-class">.icheckbox_square-green</span><span class="selector-class">.checked</span><span class="selector-class">.disabled</span> &#123;</span></span><br><span class="line">	background-position: -80px 0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.geetest_panel_box</span>&gt;* &#123;</span></span><br><span class="line">	box-sizing: content-box</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="keyword">@media</span> (<span class="attribute">max-width:</span><span class="number">768px</span>) &#123;</span></span><br><span class="line">	body &#123;</span><br><span class="line">		min-width: 0</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"><span class="css">	<span class="selector-class">.sign</span> &#123;</span></span><br><span class="line">		height: auto;</span><br><span class="line">		min-height: 0;</span><br><span class="line">		background-color: transparent</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"><span class="css">	<span class="selector-class">.sign</span> <span class="selector-class">.logo</span> &#123;</span></span><br><span class="line">		display: none</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"><span class="css">	<span class="selector-class">.sign</span> <span class="selector-class">.main</span> &#123;</span></span><br><span class="line">		position: absolute;</span><br><span class="line">		left: 50%;</span><br><span class="line">		margin: 0 0 0 -200px;</span><br><span class="line">		box-shadow: none</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>服务端完成手机短信的校验和冷却的判断</p>
<p>视图代码，views.py，代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> APIView</span><br><span class="line"><span class="keyword">from</span> django.conf <span class="keyword">import</span> settings</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlencode</span><br><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlopen</span><br><span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> status</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CaptchaAPIView</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self,request)</span>:</span></span><br><span class="line">        <span class="string">"""验证码的验证结果校验"""</span></span><br><span class="line">        AppSecretKey = settings.TENCENT_CAPTCHA[<span class="string">"App_Secret_Key"</span>]</span><br><span class="line">        appid = settings.TENCENT_CAPTCHA[<span class="string">"APPID"</span>]</span><br><span class="line">        Ticket = request.query_params.get(<span class="string">"ticket"</span>)</span><br><span class="line">        Randstr = request.query_params.get(<span class="string">"randstr"</span>)</span><br><span class="line">        UserIP = request._request.META.get(<span class="string">"REMOTE_ADDR"</span>)</span><br><span class="line">        print(<span class="string">"用户ID地址：%s"</span> % UserIP)</span><br><span class="line">        params = &#123;</span><br><span class="line">            <span class="string">"aid"</span>: appid,</span><br><span class="line">            <span class="string">"AppSecretKey"</span>: AppSecretKey,</span><br><span class="line">            <span class="string">"Ticket"</span>: Ticket,</span><br><span class="line">            <span class="string">"Randstr"</span>: Randstr,</span><br><span class="line">            <span class="string">"UserIP"</span>: UserIP</span><br><span class="line">        &#125;</span><br><span class="line">        params = urlencode(params)</span><br><span class="line"></span><br><span class="line">        f = urlopen(<span class="string">"%s?%s"</span> % (settings.TENCENT_CAPTCHA[<span class="string">"GATEWAY"</span>], params))</span><br><span class="line">        content = f.read()</span><br><span class="line">        res = json.loads(content)</span><br><span class="line">        print(res)</span><br><span class="line">        <span class="keyword">if</span> res:</span><br><span class="line">            error_code = res[<span class="string">"response"</span>]</span><br><span class="line">            <span class="keyword">if</span> error_code == <span class="string">"1"</span>:</span><br><span class="line">                <span class="keyword">return</span> Response(<span class="string">"验证通过！"</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> Response(<span class="string">"验证失败！%s"</span> % res[<span class="string">"err_msg"</span>], status=status.HTTP_400_BAD_REQUEST)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> Response(<span class="string">"验证失败！"</span>, status=status.HTTP_400_BAD_REQUEST)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> rest_framework.generics <span class="keyword">import</span> CreateAPIView</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> User</span><br><span class="line"><span class="keyword">from</span> .serializers <span class="keyword">import</span> UserModelSerializer</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserCreateAPIView</span><span class="params">(CreateAPIView)</span>:</span></span><br><span class="line">    queryset = User.objects.all()</span><br><span class="line">    serializer_class = UserModelSerializer</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> renranapi.libs.yuntongxun.sms <span class="keyword">import</span> CCP</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> django_redis <span class="keyword">import</span> get_redis_connection</span><br><span class="line"><span class="keyword">from</span> renranapi.settings <span class="keyword">import</span> constants</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SMSCodeAPIView</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    短信验证码</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request, mobile)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        短信验证码</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        redis_conn = get_redis_connection(<span class="string">'sms_code'</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 手机号是否处于发送短信的冷却时间内</span></span><br><span class="line">        interval = redis_conn.get(<span class="string">"sms_time_%s"</span> % mobile)</span><br><span class="line">        <span class="keyword">if</span> interval <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> Response(<span class="string">"不能频繁发送短信！"</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 生成短信验证码</span></span><br><span class="line">        sms_code = <span class="string">"%06d"</span> % random.randint(<span class="number">0</span>, <span class="number">999999</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 保存短信验证码与发送记录</span></span><br><span class="line">        <span class="comment"># 使用redis提供的管道操作可以一次性执行多条redis命令</span></span><br><span class="line">        pl = redis_conn.pipeline()</span><br><span class="line">        pl.multi()</span><br><span class="line">        pl.setex(<span class="string">"sms_%s"</span> % mobile, constants.SMS_CODE_EXPIRE, sms_code)      <span class="comment"># 设置短信有效期</span></span><br><span class="line">        pl.setex(<span class="string">"sms_time_%s"</span> % mobile, constants.SMS_CODE_INTERVAL, <span class="string">"_"</span>)    <span class="comment"># 设置发送短信间隔为60s</span></span><br><span class="line">        pl.execute()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 发送短信验证码</span></span><br><span class="line">        ccp = CCP()</span><br><span class="line">        ccp.send_template_sms(mobile, [sms_code, constants.SMS_CODE_EXPIRE//<span class="number">60</span>], settings.SMS.get(<span class="string">"_templateID"</span>))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Response(&#123;<span class="string">"message"</span>: <span class="string">"OK"</span>&#125;, status.HTTP_200_OK)</span><br></pre></td></tr></table></figure>

<p>序列化器：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> User</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> django_redis <span class="keyword">import</span> get_redis_connection</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserModelSerializer</span><span class="params">(serializers.ModelSerializer)</span>:</span></span><br><span class="line">    <span class="string">"""用户信息序列化器"""</span></span><br><span class="line">    sms_code = serializers.CharField(required=<span class="literal">True</span>, write_only=<span class="literal">True</span>, max_length=<span class="number">5</span>, help_text=<span class="string">"短信验证码"</span>)</span><br><span class="line">    token = serializers.CharField(read_only=<span class="literal">True</span>, help_text=<span class="string">"jwt登录认证"</span>)</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = User</span><br><span class="line">        fields = [<span class="string">"id"</span>,<span class="string">"username"</span>,<span class="string">"mobile"</span>,<span class="string">"password"</span>,<span class="string">"nickname"</span>,<span class="string">"sms_code"</span>,<span class="string">"token"</span>]</span><br><span class="line">        extra_kwargs = &#123;</span><br><span class="line">            <span class="string">"id"</span>:&#123;<span class="string">"read_only"</span>:<span class="literal">True</span>, &#125;,</span><br><span class="line">            <span class="string">"username"</span>:&#123;<span class="string">"read_only"</span>:<span class="literal">True</span>, &#125;,</span><br><span class="line">            <span class="string">"mobile"</span>:&#123;<span class="string">"required"</span>:<span class="literal">True</span>, <span class="string">"write_only"</span>:<span class="literal">True</span>, &#125;,</span><br><span class="line">            <span class="string">"password"</span>:&#123;<span class="string">"required"</span>:<span class="literal">True</span>, <span class="string">"write_only"</span>:<span class="literal">True</span>, <span class="string">"max_length"</span>: <span class="number">16</span>, <span class="string">"min_length"</span>: <span class="number">6</span>&#125;,</span><br><span class="line">            <span class="string">"nickname"</span>:&#123;<span class="string">"required"</span>:<span class="literal">True</span> &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">validate</span><span class="params">(self, attrs)</span>:</span></span><br><span class="line">        <span class="comment"># 1. 验证手机号码是否格式正确</span></span><br><span class="line">        mobile = attrs.get(<span class="string">"mobile"</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> re.match(<span class="string">"^1[3-9]\d&#123;9&#125;$"</span>, mobile):</span><br><span class="line">            <span class="keyword">raise</span> serializers.ValidationError(<span class="string">"手机号码格式错误！"</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 2. 验证手机号是否注册了</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            User.objects.get(mobile=mobile)</span><br><span class="line">            <span class="keyword">raise</span> serializers.ValidationError(<span class="string">"手机号码被占用！"</span>)</span><br><span class="line">        <span class="keyword">except</span> User.DoesNotExist:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 3. 昵称是否被注册了</span></span><br><span class="line">        nickname = attrs.get(<span class="string">"nickname"</span>)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            User.objects.get(nickname=nickname)</span><br><span class="line">            <span class="keyword">raise</span> serializers.ValidationError(<span class="string">"用户昵称被占用！"</span>)</span><br><span class="line">        <span class="keyword">except</span> User.DoesNotExist:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># todo 4. 验证手机短信是否正确</span></span><br><span class="line">        redis_conn = get_redis_connection(<span class="string">"sms_code"</span>)</span><br><span class="line">        redis_sms_code = redis_conn.get(<span class="string">"sms_%s"</span> % mobile).decode()</span><br><span class="line">        client_sms_code = attrs.get(<span class="string">"sms_code"</span>)</span><br><span class="line">        <span class="keyword">if</span> redis_sms_code != client_sms_code:</span><br><span class="line">            <span class="keyword">raise</span> serializers.ValidationError(<span class="string">"短信验证码填写有误！"</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> attrs</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">create</span><span class="params">(self, validated_data)</span>:</span></span><br><span class="line">        <span class="string">"""保存用户注册信息"""</span></span><br><span class="line">        mobile = validated_data.get(<span class="string">"mobile"</span>)</span><br><span class="line">        nickname = validated_data.get(<span class="string">"nickname"</span>)</span><br><span class="line">        password = validated_data.get(<span class="string">"password"</span>)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            user = User.objects.create_user(</span><br><span class="line">                username=mobile,</span><br><span class="line">                mobile=mobile,</span><br><span class="line">                nickname=nickname,</span><br><span class="line">                password=password</span><br><span class="line">            )</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 清除redis中的短信记录</span></span><br><span class="line">            redis_conn = get_redis_connection(<span class="string">"sms_code"</span>)</span><br><span class="line">            redis_conn.delete(<span class="string">"sms_%s"</span> % mobile)</span><br><span class="line">            redis_conn.delete(<span class="string">"sms_time_%s"</span> % mobile)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">raise</span> serializers.ValidationError(<span class="string">"用户信息注册失败！"</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 返回jwt登录token</span></span><br><span class="line">        <span class="keyword">from</span> rest_framework_jwt.settings <span class="keyword">import</span> api_settings</span><br><span class="line"></span><br><span class="line">        jwt_payload_handler = api_settings.JWT_PAYLOAD_HANDLER</span><br><span class="line">        jwt_encode_handler = api_settings.JWT_ENCODE_HANDLER</span><br><span class="line"></span><br><span class="line">        payload = jwt_payload_handler(user)</span><br><span class="line">        user.token = jwt_encode_handler(payload)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> user</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>开源项目</category>
      </categories>
      <tags>
        <tag>荏苒商城</tag>
      </tags>
  </entry>
  <entry>
    <title>[荏苒商城项目配置]</title>
    <url>/2020/03/23/%E8%8D%8F%E8%8B%92%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h1 id="1-项目配置"><a href="#1-项目配置" class="headerlink" title="1-项目配置"></a>1-项目配置</h1><h2 id="4-5-日志配置"><a href="#4-5-日志配置" class="headerlink" title="4.5 日志配置"></a>4.5 日志配置</h2><p>刚搭建的web项目或者没有明确需要调用日志的系统，一般我们直接使用python提供的longging模块来配置日志功能即可。如果类似游戏或者需要对日志进行分析的系统，则一般在服务器中配置ELK日志分析系统的。</p>
<p>对于在django中配置的日志，那么django是没有自己实现日志功能的，而是调用了python解析器提供的日志模块loggings模块。所以，我们在settings/dev.py文件中追加如下配置：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 日志配置</span></span><br><span class="line">LOGGING = &#123;</span><br><span class="line">    <span class="string">'version'</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">'disable_existing_loggers'</span>: <span class="literal">False</span>,</span><br><span class="line">    <span class="string">'formatters'</span>: &#123; <span class="comment"># 日志的处理格式</span></span><br><span class="line">        <span class="string">'verbose'</span>: &#123;</span><br><span class="line">            <span class="string">'format'</span>: <span class="string">'%(levelname)s %(asctime)s %(module)s %(lineno)d %(message)s'</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">'simple'</span>: &#123;</span><br><span class="line">            <span class="string">'format'</span>: <span class="string">'%(levelname)s %(module)s %(lineno)d %(message)s'</span></span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'filters'</span>: &#123;</span><br><span class="line">        <span class="string">'require_debug_true'</span>: &#123;</span><br><span class="line">            <span class="string">'()'</span>: <span class="string">'django.utils.log.RequireDebugTrue'</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'handlers'</span>: &#123;</span><br><span class="line">        <span class="string">'console'</span>: &#123;</span><br><span class="line">            <span class="string">'level'</span>: <span class="string">'DEBUG'</span>,</span><br><span class="line">            <span class="string">'filters'</span>: [<span class="string">'require_debug_true'</span>],</span><br><span class="line">            <span class="string">'class'</span>: <span class="string">'logging.StreamHandler'</span>,</span><br><span class="line">            <span class="string">'formatter'</span>: <span class="string">'simple'</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">'file'</span>: &#123;</span><br><span class="line">            <span class="string">'level'</span>: <span class="string">'INFO'</span>,</span><br><span class="line">            <span class="string">'class'</span>: <span class="string">'logging.handlers.RotatingFileHandler'</span>,</span><br><span class="line">            <span class="comment"># 日志位置,日志文件名,日志保存目录必须手动创建</span></span><br><span class="line">            <span class="string">'filename'</span>: os.path.join(os.path.dirname(BASE_DIR), <span class="string">"logs/renran.log"</span>),</span><br><span class="line">            <span class="comment"># 单个日志文件的最大值,这里我们设置300M</span></span><br><span class="line">            <span class="string">'maxBytes'</span>: <span class="number">300</span> * <span class="number">1024</span> * <span class="number">1024</span>,</span><br><span class="line">            <span class="comment"># 备份日志文件的数量,设置最大日志数量为10</span></span><br><span class="line">            <span class="string">'backupCount'</span>: <span class="number">10</span>,</span><br><span class="line">            <span class="comment"># 日志格式:详细格式</span></span><br><span class="line">            <span class="string">'formatter'</span>: <span class="string">'verbose'</span></span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment"># 日志对象</span></span><br><span class="line">    <span class="string">'loggers'</span>: &#123;</span><br><span class="line">        <span class="string">'django'</span>: &#123; <span class="comment"># 固定，将来django内部也会有异常的处理，只会调用django下标的日志对象</span></span><br><span class="line">            <span class="string">'handlers'</span>: [<span class="string">'console'</span>, <span class="string">'file'</span>],</span><br><span class="line">            <span class="string">'propagate'</span>: <span class="literal">True</span>, <span class="comment"># 是否让日志信息继续冒泡给其他的日志处理系统</span></span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="4-6-异常处理"><a href="#4-6-异常处理" class="headerlink" title="4.6 异常处理"></a>4.6 异常处理</h2><p>新建utils/exceptions.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> exception_handler</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> DatabaseError</span><br><span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> status</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line">logger = logging.getLogger(<span class="string">'django'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">custom_exception_handler</span><span class="params">(exc, context)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    自定义异常处理</span></span><br><span class="line"><span class="string">    :param exc: 异常类</span></span><br><span class="line"><span class="string">    :param context: 抛出异常的上下文</span></span><br><span class="line"><span class="string">    :return: Response响应对象</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="comment"># 调用drf框架原生的异常处理方法</span></span><br><span class="line">    response = exception_handler(exc, context)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> response <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        view = context[<span class="string">'view'</span>]</span><br><span class="line">        <span class="keyword">if</span> isinstance(exc, DatabaseError):</span><br><span class="line">            <span class="comment"># 数据库异常</span></span><br><span class="line">            logger.error(<span class="string">'[%s] %s'</span> % (view, exc))</span><br><span class="line">            response = Response(&#123;<span class="string">'message'</span>: <span class="string">'服务器内部错误'</span>&#125;, status=status.HTTP_507_INSUFFICIENT_STORAGE)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure>

<p>settings/dev.py配置文件中添加</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">REST_FRAMEWORK &#x3D; &#123;</span><br><span class="line">    # 异常处理</span><br><span class="line">    &#39;EXCEPTION_HANDLER&#39;: &#39;renranapi.utils.exceptions.custom_exception_handler&#39;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="4-7-创建数据库"><a href="#4-7-创建数据库" class="headerlink" title="4.7 创建数据库"></a>4.7 创建数据库</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">create database renran default charset=utf8mb4;</span><br></pre></td></tr></table></figure>

<p>为当前项目创建数据库用户[这个用户只能看到这个数据库]</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># create user 用户名 identified by '登录密码';       # 创建用户</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># grant 权限 on 数据库名.表名 to '用户名'@'登录主机';   # 赋予权限给用户</span></span><br><span class="line"><span class="comment"># * 可以表示任意数据库，也可以表示任意表，也可以表示任意登录主机</span></span><br><span class="line"><span class="comment"># all privileges 表示所有权限，也可以设置 单个权限或多个权限</span></span><br><span class="line"><span class="comment"># grant select,insert,update,delete on ....  # 只赋予增删查改的权限</span></span><br><span class="line"><span class="comment"># grant select on ...   # 只赋予查询权限</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># flush privileges;                                # 刷新权限</span></span><br><span class="line"></span><br><span class="line">create user renran_user identified by <span class="string">'renran'</span>;</span><br><span class="line">grant all privileges on renran.* to <span class="string">'renran_user'</span>@<span class="string">'*'</span>;</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure>

<h2 id="4-8-配置数据库连接"><a href="#4-8-配置数据库连接" class="headerlink" title="4.8 配置数据库连接"></a>4.8 配置数据库连接</h2><p>打开settings/dev.py文件，并配置</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">DATABASES = &#123;</span><br><span class="line">    <span class="string">"default"</span>: &#123;</span><br><span class="line">        <span class="string">"ENGINE"</span>: <span class="string">"django.db.backends.mysql"</span>,</span><br><span class="line">        <span class="string">"HOST"</span>: <span class="string">"127.0.0.1"</span>,</span><br><span class="line">        <span class="string">"PORT"</span>: <span class="number">3306</span>,</span><br><span class="line">        <span class="string">"USER"</span>: <span class="string">"renran_user"</span>,</span><br><span class="line">        <span class="string">"PASSWORD"</span>: <span class="string">"renran"</span>,</span><br><span class="line">        <span class="string">"NAME"</span>: <span class="string">"renran"</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在项目主模块的 <code>__init__.py</code>中导入pymysql</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysqlpymysql.install_as_MySQLdb()</span><br></pre></td></tr></table></figure>

<h3 id="调整错误"><a href="#调整错误" class="headerlink" title="调整错误"></a>调整错误</h3><p>数据库版本检测导致的错误</p>
<p><img src="/images/1557453985484.png" alt="1557453985484.png"></p>
<p>数据库的版本检测代码注释掉。</p>
<p><img src="/images/1557454099123.png" alt="1557454099123.png"></p>
<p>因为python3版本的原因，字符串的编码问题</p>
<p><img src="/images/1557454044879.png" alt="1557454044879.png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">把<span class="number">146</span>的代码从下面改动query = query.decode(errors=<span class="string">'replace'</span>)改成：query = query.encode(errors=<span class="string">'replace'</span>)</span><br></pre></td></tr></table></figure>

<h1 id="5-搭建前端项目"><a href="#5-搭建前端项目" class="headerlink" title="5. 搭建前端项目"></a>5. 搭建前端项目</h1><h2 id="5-1-创建项目目录"><a href="#5-1-创建项目目录" class="headerlink" title="5.1 创建项目目录"></a>5.1 创建项目目录</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> 项目根目录vue init webpack 客户端项目目录</span><br></pre></td></tr></table></figure>

<p>例如，我要把项目保存在~/Desktop桌面目录下，可以如下操作：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/Desktop/renranvue init webpack renran_pc</span><br></pre></td></tr></table></figure>

<p>把vue项目构建好了，运行测试服务器。</p>
<blockquote>
<p>接下来，在ubuntu使用pycharm同时通过2个窗口打开项目，一般先打开前端项目，再打开服务端项目，否则可能出现卡死的情况，此时可以先通过终端黑窗口执行以下命令，关闭pycharm，再重新先打开前端项目，接着打开后端项目。ps aux | grep pycharm # 查看系统所有的进程ID，搜索出pycharmkill -9 5794 # 关闭指定进程ID对应的服务。</p>
</blockquote>
<p><img src="/images/1557451125218.png" alt="1557451125218.png"></p>
<p>打开项目已经，在pycharm的终端下运行vue项目，查看效果。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure>

<p>接下来，我们根据终端上效果显示的对应地址来访问项目(如果有多个vue项目在运行，8080端口被占据了，服务器会自动改端口，所以根据自己实际在操作中看到的地址来访问。)</p>
<p>访问：<a href="http://locahost:8080。效果：">http://locahost:8080。效果：</a></p>
<p><img src="/images/1557451188340.png" alt="1557451188340.png"></p>
<p>我们也可以把我们的前端项目进行git源代码管理</p>
<h2 id="5-2-初始化前端项目"><a href="#5-2-初始化前端项目" class="headerlink" title="5.2 初始化前端项目"></a>5.2 初始化前端项目</h2><p>清除默认的HelloWorld组件和APP.vue中的默认样式</p>
<p><img src="/images/1557451289161.png" alt="1557451289161.png"></p>
<p>接下来，我们可以查看效果了，一张白纸~</p>
<p><img src="/images/1557451300406.png" alt="1557451300406.png"></p>
<h2 id="5-3-安装路由vue-router"><a href="#5-3-安装路由vue-router" class="headerlink" title="5.3 安装路由vue-router"></a>5.3 安装路由vue-router</h2><h3 id="5-3-1-下载路由组件"><a href="#5-3-1-下载路由组件" class="headerlink" title="5.3.1 下载路由组件"></a>5.3.1 下载路由组件</h3><p>如果前面没有选择安装vue-router，则使用以下命令安装路由组件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i vue-router -S</span><br></pre></td></tr></table></figure>

<p>执行效果：</p>
<p><img src="/images/1557451350882.png" alt="1557451350882.png"></p>
<h3 id="5-3-2-配置路由"><a href="#5-3-2-配置路由" class="headerlink" title="5.3.2 配置路由"></a>5.3.2 配置路由</h3><h3 id="5-3-2-1-初始化路由对象"><a href="#5-3-2-1-初始化路由对象" class="headerlink" title="5.3.2.1 初始化路由对象"></a>5.3.2.1 初始化路由对象</h3><p>在src目录下创建router路由目录，在router目录下创建index.js路由文件</p>
<p>index.js路由文件中，编写初始化路由对象的代码 .</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">"vue"</span></span><br><span class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">"vue-router"</span></span><br><span class="line"></span><br><span class="line">// 这里导入可以让让用户访问的组件</span><br><span class="line"></span><br><span class="line">Vue.use(Router);</span><br><span class="line"></span><br><span class="line">export default new Router(&#123;</span><br><span class="line">  // 设置路由模式为‘history’，去掉默认的<span class="comment">#</span></span><br><span class="line">  mode: <span class="string">"history"</span>,</span><br><span class="line">  routes:[</span><br><span class="line">    // 路由列表</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">'/'</span>,</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p><img src="/images/1557451480681.png" alt="1557451480681.png"></p>
<h3 id="5-3-2-2-注册路由信息"><a href="#5-3-2-2-注册路由信息" class="headerlink" title="5.3.2.2 注册路由信息"></a>5.3.2.2 注册路由信息</h3><p>打开main.js文件，把router对象注册到vue中.代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">// The Vue build version to load <span class="keyword">with</span> the `<span class="keyword">import</span>` command</span><br><span class="line">// (runtime-only <span class="keyword">or</span> standalone) has been set <span class="keyword">in</span> webpack.base.conf <span class="keyword">with</span> an alias.</span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App'</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">'./routers/index'</span>;</span><br><span class="line"></span><br><span class="line">Vue.config.productionTip = false</span><br><span class="line"></span><br><span class="line">/* eslint-disable no-new */</span><br><span class="line">new Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  router,</span><br><span class="line">  components: &#123; App &#125;,</span><br><span class="line">  template: <span class="string">'&lt;App/&gt;'</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><img src="/images/1557451533378.png" alt="1557451533378.png"></p>
<h3 id="5-3-2-3-在视图中显示路由对应的内容"><a href="#5-3-2-3-在视图中显示路由对应的内容" class="headerlink" title="5.3.2.3 在视图中显示路由对应的内容"></a>5.3.2.3 在视图中显示路由对应的内容</h3><p>在App.vue组件中，添加显示路由对应的内容。</p>
<p><img src="/images/1557451572377.png" alt="1557451572377.png"></p>
<p>代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;router-view&#x2F;&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#39;App&#39;,</span><br><span class="line">  components: &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>

<h3 id="5-3-2-4-创建并提供前端首页的组件"><a href="#5-3-2-4-创建并提供前端首页的组件" class="headerlink" title="5.3.2.4 创建并提供前端首页的组件"></a>5.3.2.4 创建并提供前端首页的组件</h3><p>routers/index.js</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">// <span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">"vue"</span></span><br><span class="line">// <span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">"vue-router"</span></span><br><span class="line">//</span><br><span class="line">//</span><br><span class="line">// // 这里导入可以让让用户访问的组件</span><br><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">"../components/Home"</span></span><br><span class="line">// Vue.use(Router);</span><br><span class="line">//</span><br><span class="line">// export default new Router(&#123;</span><br><span class="line">//   // 设置路由模式为‘history’，去掉默认的<span class="comment">#</span></span><br><span class="line">//   mode: <span class="string">"history"</span>,</span><br><span class="line">//   routes:[</span><br><span class="line">//     // 路由列表</span><br><span class="line">     &#123;</span><br><span class="line">       name:<span class="string">"Home"</span>,</span><br><span class="line">       path:<span class="string">"/"</span>,</span><br><span class="line">       component:Home,</span><br><span class="line">     &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">       name:<span class="string">"Home"</span>,</span><br><span class="line">       path:<span class="string">"/home"</span>,</span><br><span class="line">       component:Home,</span><br><span class="line">     &#125;,</span><br><span class="line">   ]</span><br><span class="line">// &#125;)</span><br></pre></td></tr></table></figure>

<h3 id="创建Home组件"><a href="#创建Home组件" class="headerlink" title="创建Home组件"></a>创建Home组件</h3><p>components/Home.vue</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=<span class="string">"home"</span>&gt;</span><br><span class="line">    前端首页</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">      name:<span class="string">"Home"</span>,</span><br><span class="line">      data()&#123;</span><br><span class="line">          <span class="keyword">return</span> &#123;</span><br><span class="line">              </span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<p><img src="/images/1557451775965.png" alt="1557451775965.png"></p>
<p>1557451775965</p>
<h2 id="5-4-前端初始化全局变量和全局方法"><a href="#5-4-前端初始化全局变量和全局方法" class="headerlink" title="5.4 前端初始化全局变量和全局方法"></a>5.4 前端初始化全局变量和全局方法</h2><p>在src目录下创建settings.js站点开发配置文件：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">export default &#123;</span><br><span class="line">  Host:<span class="string">"http://127.0.0.1"</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在main.js中引入</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">// // The Vue build version to load <span class="keyword">with</span> the `<span class="keyword">import</span>` command</span><br><span class="line">// // (runtime-only <span class="keyword">or</span> standalone) has been set <span class="keyword">in</span> webpack.base.conf <span class="keyword">with</span> an alias.</span><br><span class="line">// <span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line">// <span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App'</span></span><br><span class="line">// <span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">'./routers/index'</span>;</span><br><span class="line"><span class="keyword">import</span> settings <span class="keyword">from</span> <span class="string">"./settings"</span></span><br><span class="line">// Vue.config.productionTip = false;</span><br><span class="line">Vue.prototype.$settings = settings;</span><br><span class="line">//</span><br><span class="line">// /* eslint-disable no-new */</span><br><span class="line">// new Vue(&#123;</span><br><span class="line">//   el: <span class="string">'#app'</span>,</span><br><span class="line">//   router,</span><br><span class="line">//   components: &#123; App &#125;,</span><br><span class="line">//   template: <span class="string">'&lt;App/&gt;'</span></span><br><span class="line">// &#125;);</span><br></pre></td></tr></table></figure>

<h2 id="5-5-引入ElementUI"><a href="#5-5-引入ElementUI" class="headerlink" title="5.5 引入ElementUI"></a>5.5 引入ElementUI</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i element-ui -S</span><br></pre></td></tr></table></figure>

<p>上面的命令等同于</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install element-ui --save</span><br></pre></td></tr></table></figure>

<p>执行命令效果：</p>
<p><img src="/images/1557452146253.png" alt="1557452146253.png"></p>
<h3 id="5-5-1-配置ElementUI到项目中"><a href="#5-5-1-配置ElementUI到项目中" class="headerlink" title="5.5.1 配置ElementUI到项目中"></a>5.5.1 配置ElementUI到项目中</h3><p>在main.js中导入ElementUI，并调用。</p>
<p>代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">// The Vue build version to load <span class="keyword">with</span> the `<span class="keyword">import</span>` command</span><br><span class="line">// (runtime-only <span class="keyword">or</span> standalone) has been set <span class="keyword">in</span> webpack.base.conf <span class="keyword">with</span> an alias.</span><br><span class="line">// <span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line">// <span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App'</span></span><br><span class="line">// <span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">'./routers/index'</span>;</span><br><span class="line"></span><br><span class="line">// 开发配置文件</span><br><span class="line">// <span class="keyword">import</span> settings <span class="keyword">from</span> <span class="string">"./settings"</span></span><br><span class="line">// Vue.prototype.$settings = settings;</span><br><span class="line"></span><br><span class="line">// elementUI 导入</span><br><span class="line"><span class="keyword">import</span> ElementUI <span class="keyword">from</span> <span class="string">'element-ui'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">"element-ui/lib/theme-chalk/index.css"</span>;</span><br><span class="line">// 调用插件</span><br><span class="line">Vue.use(ElementUI);</span><br><span class="line"></span><br><span class="line">// Vue.config.productionTip = false;</span><br><span class="line"></span><br><span class="line">/* eslint-disable no-new */</span><br><span class="line">// new Vue(&#123;</span><br><span class="line">//   el: <span class="string">'#app'</span>,</span><br><span class="line">//   router,</span><br><span class="line">//   components: &#123; App &#125;,</span><br><span class="line">//   template: <span class="string">'&lt;App/&gt;'</span></span><br><span class="line">// &#125;);</span><br></pre></td></tr></table></figure>

<p>效果：</p>
<p><img src="/images/1557452192638.png" alt="1557452192638.png"></p>
<p>重新项目，如果出现Error，关于.gitkeep，则直接删除这个文件即可。</p>
<p>成功引入了ElementUI以后，接下来我们就可以开始进入前端页面开发，首先是首页。</p>
<p>接下来我们把之前完成的首页，直接拿过来使用[注意除了组件以外,还有静态文件也需要拿过来,包括App.vue里面的公共样式]，并运行项目。</p>
<p>创建static/css/reset.css，全局css初始化代码</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span>,<span class="selector-tag">h1</span>,<span class="selector-tag">h2</span>,<span class="selector-tag">h3</span>,<span class="selector-tag">h4</span>,<span class="selector-tag">h5</span>,<span class="selector-tag">ul</span>,<span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin</span>:<span class="number">0</span>;</span><br><span class="line">    <span class="attribute">font-weight</span>: normal;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">body</span>&#123;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">80px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">a</span>&#123;</span><br><span class="line">    <span class="attribute">text-decoration</span>: none;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#4a4a4a</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#000</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">input</span>&#123;</span><br><span class="line">    <span class="attribute">outline</span>: none;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">ul</span>&#123;</span><br><span class="line">    <span class="attribute">list-style</span>: none;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">img</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.header</span> <span class="selector-class">.el-menu</span> <span class="selector-tag">li</span> <span class="selector-class">.el-submenu__title</span>&#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">26px</span><span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">26px</span><span class="meta">!important</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.el-menu--popup</span>&#123;</span><br><span class="line">    <span class="attribute">min-width</span>: <span class="number">140px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.el-checkbox__inner</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">16px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">16px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#999</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.el-checkbox__inner</span><span class="selector-pseudo">:after</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">6px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">8px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.el-form-item__content</span>&#123;</span><br><span class="line">    <span class="attribute">margin-left</span>:<span class="number">0px</span><span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.full-left</span>&#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.full-right</span>&#123;</span><br><span class="line">    <span class="attribute">float</span>: right;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>main.js</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">// 引入初始化样式<span class="keyword">import</span> <span class="string">"../static/css/reset.css"</span>;</span><br></pre></td></tr></table></figure>

<p>Home.vue中添加代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"home"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Header</span>&gt;</span><span class="tag">&lt;/<span class="name">Header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main"</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!-- Banner --&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"banner"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-carousel</span> <span class="attr">height</span>=<span class="string">"272px"</span> <span class="attr">indicator-position</span>=<span class="string">"none"</span> <span class="attr">interval</span>=<span class="string">"2000"</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">el-carousel-item</span> <span class="attr">v-for</span>=<span class="string">"item in 4"</span> <span class="attr">:key</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">"small"</span>&gt;</span>&#123;&#123; item &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">el-carousel-item</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-carousel</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"list-container"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 文章列表模块 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"note-list"</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"title"</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>常做此运动，让你性福加倍<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"abstract"</span>&gt;</span>运动，是人类在发展过程中有意识地对自己身体素质的培养的各种活动 运动的方式多种多样 不仅仅是我们常知的跑步，球类，游泳等 今天就为大家介绍一种男...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"meta"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"jsd-meta"</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"/static/image/paid1.svg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span> 4.8</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"nickname"</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>上班族也健身<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"/static/image/comment.svg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span> 4</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"/static/image/like.svg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span> 31<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"have-img"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"wrap-img"</span> <span class="attr">href</span>=<span class="string">""</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"img-blur-done"</span> <span class="attr">src</span>=<span class="string">"/static/image/10907624-107943365323e5b9.jpeg"</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"title"</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>“不耻下问”，正在毁掉你的人生<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"abstract"</span>&gt;</span></span><br><span class="line">                    在过去，遇到不懂的问题，你不耻下问，找个人问问就行；在现在，如果你还这么干，多半会被认为是“搜商低”。 昨天，35岁的表姐把我拉黑了。 表姐是医...</span><br><span class="line">                  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"meta"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"jsd-meta"</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"/static/image/paid1.svg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span> 6.7</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"nickname"</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>_飞鱼<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"/static/image/comment.svg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span> 33</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"/static/image/like.svg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span> 113<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"/static/image/shang.svg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span> 2<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 文章列表模块 --&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"load-more"</span>&gt;</span>阅读更多<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"aside"</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!-- 推荐作者 --&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"recommended-author-wrap"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!----&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"recommended-authors"</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"title"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span>&gt;</span>推荐作者<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"page-change"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"icon-change"</span> <span class="attr">src</span>=<span class="string">"/static/image/exchange-rate.svg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span>换一批<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"list"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">class</span>=<span class="string">"avatar"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"/static/image/avatar.webp"</span> /&gt;</span></span><br><span class="line">                  <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"follow"</span> <span class="attr">state</span>=<span class="string">"0"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"/static/image/follow.svg"</span> <span class="attr">alt</span>=<span class="string">""</span> /&gt;</span>关注<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">class</span>=<span class="string">"name"</span>&gt;</span>董克平日记<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">p</span>&gt;</span>写了807.1k字 · 2.5k喜欢<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">class</span>=<span class="string">"avatar"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"/static/image/avatar.webp"</span> /&gt;</span></span><br><span class="line">                  <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"follow"</span> <span class="attr">state</span>=<span class="string">"0"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"/static/image/follow.svg"</span> <span class="attr">alt</span>=<span class="string">""</span> /&gt;</span>关注<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">class</span>=<span class="string">"name"</span>&gt;</span>董克平日记<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">p</span>&gt;</span>写了807.1k字 · 2.5k喜欢<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"></span><br><span class="line">              <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">class</span>=<span class="string">"find-more"</span>&gt;</span>查看全部 &gt;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">              <span class="comment">&lt;!----&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Footer</span>&gt;</span><span class="tag">&lt;/<span class="name">Footer</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> Header <span class="keyword">from</span> <span class="string">"./common/Header"</span>;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> Footer <span class="keyword">from</span> <span class="string">"./common/Footer"</span>;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">      name:<span class="string">"Home"</span>,</span></span><br><span class="line">      data()&#123;</span><br><span class="line"><span class="actionscript">          <span class="keyword">return</span> &#123;</span></span><br><span class="line"></span><br><span class="line">          &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      components:&#123;</span><br><span class="line">        Header,</span><br><span class="line">        Footer,</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-class">.container</span>&#123;</span></span><br><span class="line">    width: 960px;</span><br><span class="line">    margin-right: auto;</span><br><span class="line">    margin-left: auto;</span><br><span class="line">    padding-left: 15px;</span><br><span class="line">    padding-right: 15px;</span><br><span class="line">    box-sizing: border-box;</span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="selector-class">.container</span><span class="selector-pseudo">:after</span>, <span class="selector-class">.container</span><span class="selector-pseudo">:before</span> &#123;</span></span><br><span class="line">    content: " ";</span><br><span class="line">    display: table;</span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="selector-class">.row</span> &#123;</span></span><br><span class="line">    margin-left: -15px;</span><br><span class="line">    margin-right: -15px;</span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="selector-class">.row</span><span class="selector-pseudo">:after</span>, <span class="selector-class">.row</span><span class="selector-pseudo">:before</span> &#123;</span></span><br><span class="line">    content: " ";</span><br><span class="line">    display: table;</span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="selector-class">.main</span> &#123;</span></span><br><span class="line">    padding-top: 30px;</span><br><span class="line">    padding-right: 0;</span><br><span class="line">    position: relative;</span><br><span class="line">    min-height: 1px;</span><br><span class="line">    padding-left: 15px;</span><br><span class="line"><span class="css">    <span class="selector-tag">width</span>: 66<span class="selector-class">.66667</span>%;</span></span><br><span class="line">    float: left;</span><br><span class="line">    box-sizing: border-box;</span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="selector-class">.main</span> <span class="selector-class">.banner</span>&#123;</span></span><br><span class="line">    width: 640px;</span><br><span class="line">    height: 272px;</span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="selector-class">.note-list</span> &#123;</span></span><br><span class="line">    margin: 0;</span><br><span class="line">    padding: 0;</span><br><span class="line">    list-style: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="selector-class">.note-list</span> <span class="selector-tag">li</span> &#123;</span></span><br><span class="line">    position: relative;</span><br><span class="line">    width: 100%;</span><br><span class="line">    margin: 0 0 15px;</span><br><span class="line">    padding: 15px 2px 20px 0;</span><br><span class="line"><span class="css">    <span class="selector-tag">border-bottom</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#f0f0f0</span>;</span></span><br><span class="line">    word-wrap: break-word;</span><br><span class="line">    line-height: 20px;</span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="selector-class">.note-list</span> <span class="selector-tag">li</span><span class="selector-class">.have-img</span> &#123;</span></span><br><span class="line">    min-height: 140px;</span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="selector-class">.note-list</span> <span class="selector-class">.have-img</span> <span class="selector-class">.wrap-img</span> &#123;</span></span><br><span class="line">    position: absolute;</span><br><span class="line">    top: 50%;</span><br><span class="line">    margin-top: -60px;</span><br><span class="line">    right: 0;</span><br><span class="line">    width: 150px;</span><br><span class="line">    height: 100px;</span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="selector-class">.note-list</span> <span class="selector-class">.have-img</span> <span class="selector-class">.wrap-img</span> <span class="selector-tag">img</span> &#123;</span></span><br><span class="line">    width: 100%;</span><br><span class="line">    height: 100%;</span><br><span class="line">    border-radius: 4px;</span><br><span class="line"><span class="css">    <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#f0f0f0</span>;</span></span><br><span class="line">    vertical-align: middle;</span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="selector-class">.main</span> <span class="selector-class">.note-list</span> <span class="selector-class">.have-img</span> <span class="selector-class">.content</span> &#123;</span></span><br><span class="line">    padding-right: 165px;</span><br><span class="line">    box-sizing: border-box;</span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="selector-class">.note-list</span> <span class="selector-class">.title</span> &#123;</span></span><br><span class="line">    margin: -7px 0 4px;</span><br><span class="line">    display: inherit;</span><br><span class="line">    font-size: 18px;</span><br><span class="line">    font-weight: 700;</span><br><span class="line"><span class="css">    <span class="selector-tag">line-height</span>: 1<span class="selector-class">.5</span>;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#333</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="selector-class">.note-list</span> <span class="selector-class">.title</span><span class="selector-pseudo">:hover</span>&#123;</span></span><br><span class="line">    text-decoration: underline;</span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="selector-class">.note-list</span> <span class="selector-class">.abstract</span> &#123;</span></span><br><span class="line">    margin: 0 0 8px;</span><br><span class="line">    font-size: 13px;</span><br><span class="line">    line-height: 24px;</span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#999</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="selector-class">.note-list</span> <span class="selector-class">.meta</span> &#123;</span></span><br><span class="line">    padding-right: 0!important;</span><br><span class="line">    font-size: 12px;</span><br><span class="line">    font-weight: 400;</span><br><span class="line">    line-height: 20px;</span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="selector-class">.note-list</span> <span class="selector-class">.meta</span> <span class="selector-tag">span</span> &#123;</span></span><br><span class="line">    margin-right: 10px;</span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#b4b4b4</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.jsd-meta</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#ea6f5a</span>!<span class="selector-tag">important</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="selector-class">.note-list</span> <span class="selector-class">.meta</span> <span class="selector-tag">a</span>, <span class="selector-class">.note-list</span> <span class="selector-class">.meta</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">transition</span>: <span class="selector-class">.1s</span> <span class="selector-tag">ease-in</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="selector-class">.note-list</span> <span class="selector-class">.meta</span> <span class="selector-tag">a</span> &#123;</span></span><br><span class="line">    margin-right: 10px;</span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#b4b4b4</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="selector-class">.note-list</span> <span class="selector-class">.meta</span> <span class="selector-tag">img</span>&#123;</span></span><br><span class="line">    width: 15px;</span><br><span class="line">    vertical-align: middle;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.main</span> <span class="selector-class">.load-more</span> &#123;</span></span><br><span class="line">    width: 100%;</span><br><span class="line">    border-radius: 20px;</span><br><span class="line"><span class="css">    <span class="selector-tag">background-color</span>: <span class="selector-id">#a5a5a5</span>;</span></span><br><span class="line">    margin: 30px auto 60px;</span><br><span class="line">    padding: 10px 15px;</span><br><span class="line">    text-align: center;</span><br><span class="line">    font-size: 15px;</span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line">    display: block;</span><br><span class="line"><span class="css">    <span class="selector-tag">line-height</span>: 1<span class="selector-class">.42857</span>;</span></span><br><span class="line">    box-sizing: border-box;</span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="selector-class">.main</span> <span class="selector-class">.load-more</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">background-color</span>: <span class="selector-id">#9b9b9b</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="selector-class">.aside</span> &#123;</span></span><br><span class="line">    padding: 30px 0 0;</span><br><span class="line"><span class="css">    <span class="selector-tag">margin-left</span>: 4<span class="selector-class">.16667</span>%;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">width</span>: 29<span class="selector-class">.16667</span>%;</span></span><br><span class="line">    float: left;</span><br><span class="line">    position: relative;</span><br><span class="line">    min-height: 1px;</span><br><span class="line">    box-sizing: border-box;</span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="selector-class">.recommended-authors</span> &#123;</span></span><br><span class="line">    margin-bottom: 20px;</span><br><span class="line">    padding-top: 0;</span><br><span class="line">    font-size: 13px;</span><br><span class="line">    text-align: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="selector-class">.recommended-authors</span> <span class="selector-class">.title</span> &#123;</span></span><br><span class="line">    text-align: left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="selector-class">.recommended-authors</span> <span class="selector-class">.title</span> <span class="selector-tag">span</span> &#123;</span></span><br><span class="line">    font-size: 14px;</span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#969696</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="selector-class">.recommended-authors</span> <span class="selector-class">.title</span> <span class="selector-class">.page-change</span> &#123;</span></span><br><span class="line">    float: right;</span><br><span class="line">    display: inline-block;</span><br><span class="line">    font-size: 16px;</span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#969696</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="selector-class">.icon-change</span>&#123;</span></span><br><span class="line">    width: 16px;</span><br><span class="line">    vertical-align: middle;</span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="selector-class">.recommended-authors</span> <span class="selector-class">.list</span> &#123;</span></span><br><span class="line">    margin: 0 0 20px;</span><br><span class="line">    text-align: left;</span><br><span class="line">    list-style: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="selector-class">.recommended-authors</span> <span class="selector-class">.list</span> <span class="selector-tag">li</span> &#123;</span></span><br><span class="line">    margin-top: 15px;</span><br><span class="line">    line-height: 20px;</span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="selector-class">.recommended-authors</span> <span class="selector-class">.list</span> <span class="selector-class">.avatar</span> &#123;</span></span><br><span class="line">    float: left;</span><br><span class="line">    width: 48px;</span><br><span class="line">    height: 48px;</span><br><span class="line">    margin-right: 10px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.avatar</span> &#123;</span></span><br><span class="line">    width: 24px;</span><br><span class="line">    height: 24px;</span><br><span class="line">    display: block;</span><br><span class="line">    cursor: pointer;</span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="selector-class">.avatar</span> <span class="selector-tag">img</span> &#123;</span></span><br><span class="line">    width: 100%;</span><br><span class="line">    height: 100%;</span><br><span class="line"><span class="css">    <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ddd</span>;</span></span><br><span class="line">    border-radius: 50%;</span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="selector-class">.follow</span>&#123;</span></span><br><span class="line">    font-size: 14px;</span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#42c02e</span>;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">border-color</span>: <span class="selector-id">#42c02e</span>;</span></span><br><span class="line">    font-weight: 400;</span><br><span class="line">    line-height: normal;</span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="selector-class">.follow</span> <span class="selector-tag">img</span>&#123;</span></span><br><span class="line">    width: 14px;</span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="selector-class">.recommended-authors</span> <span class="selector-class">.list</span> <span class="selector-class">.follow</span>, <span class="selector-class">.recommended-authors</span> <span class="selector-class">.list</span> <span class="selector-class">.follow-cancel</span>, <span class="selector-class">.recommended-authors</span> <span class="selector-class">.list</span> <span class="selector-class">.follow-each</span>, <span class="selector-class">.recommended-authors</span> <span class="selector-class">.list</span> <span class="selector-class">.following</span> &#123;</span></span><br><span class="line">    float: right;</span><br><span class="line">    margin-top: 5px;</span><br><span class="line">    padding: 0;</span><br><span class="line">    font-size: 13px;</span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#42c02e</span>;</span></span><br><span class="line">    box-sizing: border-box;</span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="selector-class">.recommended-authors</span> <span class="selector-class">.list</span> <span class="selector-class">.name</span> &#123;</span></span><br><span class="line">    padding-top: 5px;</span><br><span class="line">    margin-right: 60px;</span><br><span class="line">    font-size: 14px;</span><br><span class="line">    display: block;</span><br><span class="line">    box-sizing: border-box;</span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="selector-class">.recommended-authors</span> <span class="selector-class">.list</span> <span class="selector-tag">p</span> &#123;</span></span><br><span class="line">    font-size: 12px;</span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#969696</span>;</span></span><br><span class="line">    margin: 0 0 10px;</span><br><span class="line">    box-sizing: border-box;</span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="selector-class">.recommended-authors</span> <span class="selector-class">.find-more</span> &#123;</span></span><br><span class="line">    position: absolute;</span><br><span class="line">    padding: 7px 7px 7px 12px;</span><br><span class="line">    left: 0;</span><br><span class="line">    width: 100%;</span><br><span class="line">    font-size: 13px;</span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#787878</span>;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">background-color</span>: <span class="selector-id">#f7f7f7</span>;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#dcdcdc</span>;</span></span><br><span class="line">    border-radius: 4px;</span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="selector-class">.row</span><span class="selector-pseudo">:after</span> &#123;</span></span><br><span class="line">    clear: both;</span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="selector-class">.el-carousel__item</span> <span class="selector-tag">h3</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#475669</span>;</span></span><br><span class="line">    font-size: 14px;</span><br><span class="line"><span class="css">    <span class="selector-tag">opacity</span>: 0<span class="selector-class">.75</span>;</span></span><br><span class="line">    line-height: 150px;</span><br><span class="line">    margin: 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.el-carousel__item</span><span class="selector-pseudo">:nth-child(2n)</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">background-color</span>: <span class="selector-id">#99a9bf</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.el-carousel__item</span><span class="selector-pseudo">:nth-child(2n+1)</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">background-color</span>: <span class="selector-id">#d3dce6</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>main.js代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; iconfont字体import &quot;..&#x2F;static&#x2F;css&#x2F;iconfont.css&quot;;import &quot;..&#x2F;static&#x2F;css&#x2F;iconfont.eot&quot;;</span><br></pre></td></tr></table></figure>

<p>components/common/Header.vue</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;header&quot;&gt;</span><br><span class="line">    &lt;nav class&#x3D;&quot;navbar&quot;&gt;</span><br><span class="line">      &lt;div class&#x3D;&quot;width-limit&quot;&gt;</span><br><span class="line">        &lt;!-- 左上方 Logo --&gt;</span><br><span class="line">        &lt;a class&#x3D;&quot;logo&quot; href&#x3D;&quot;&#x2F;&quot;&gt;&lt;img src&#x3D;&quot;&#x2F;static&#x2F;image&#x2F;nav-logo.png&quot; &#x2F;&gt;&lt;&#x2F;a&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 右上角 --&gt;</span><br><span class="line">        &lt;!-- 未登录显示登录&#x2F;注册&#x2F;写文章 --&gt;</span><br><span class="line">        &lt;a class&#x3D;&quot;btn write-btn&quot; target&#x3D;&quot;_blank&quot; href&#x3D;&quot;&#x2F;writer&quot;&gt;&lt;img class&#x3D;&quot;icon-write&quot; src&#x3D;&quot;&#x2F;static&#x2F;image&#x2F;write.svg&quot;&gt;写文章&lt;&#x2F;a&gt;</span><br><span class="line">        &lt;a class&#x3D;&quot;btn sign-up&quot; id&#x3D;&quot;sign_up&quot; href&#x3D;&quot;&#x2F;register&quot;&gt;注册&lt;&#x2F;a&gt;</span><br><span class="line">        &lt;a class&#x3D;&quot;btn log-in&quot; id&#x3D;&quot;sign_in&quot; href&#x3D;&quot;&#x2F;login&quot;&gt;登录&lt;&#x2F;a&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;container&quot;&gt;</span><br><span class="line">          &lt;div class&#x3D;&quot;collapse navbar-collapse&quot; id&#x3D;&quot;menu&quot;&gt;</span><br><span class="line">            &lt;ul class&#x3D;&quot;nav navbar-nav&quot;&gt;</span><br><span class="line">              &lt;li class&#x3D;&quot;tab active&quot;&gt;</span><br><span class="line">                &lt;a href&#x3D;&quot;&#x2F;&quot;&gt;</span><br><span class="line">                  &lt;img class&#x3D;&quot;menu-icon&quot; src&#x3D;&quot;&#x2F;static&#x2F;image&#x2F;menu.svg&quot;&gt;</span><br><span class="line">                  &lt;span class&#x3D;&quot;menu-text&quot;&gt;首页&lt;&#x2F;span&gt;</span><br><span class="line">                &lt;&#x2F;a&gt;</span><br><span class="line">              &lt;&#x2F;li&gt;</span><br><span class="line">              &lt;li class&#x3D;&quot;search&quot;&gt;</span><br><span class="line">                &lt;form target&#x3D;&quot;_blank&quot; action&#x3D;&quot;&#x2F;search&quot; accept-charset&#x3D;&quot;UTF-8&quot; method&#x3D;&quot;get&quot;&gt;</span><br><span class="line">                  &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;q&quot; id&#x3D;&quot;q&quot; value&#x3D;&quot;&quot; autocomplete&#x3D;&quot;off&quot; placeholder&#x3D;&quot;搜索&quot; class&#x3D;&quot;search-input&quot;&gt;</span><br><span class="line">                  &lt;a class&#x3D;&quot;search-btn&quot; href&#x3D;&quot;javascript:void(0)&quot;&gt;&lt;&#x2F;a&gt;</span><br><span class="line">                &lt;&#x2F;form&gt;</span><br><span class="line">              &lt;&#x2F;li&gt;</span><br><span class="line">            &lt;&#x2F;ul&gt;</span><br><span class="line">          &lt;&#x2F;div&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 如果用户登录，显示下拉菜单 --&gt;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;nav&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default &#123;</span><br><span class="line">        name: &quot;Header&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.header&#123;</span><br><span class="line">  height: 56px;</span><br><span class="line">&#125;</span><br><span class="line">.container &#123;</span><br><span class="line">    width: 960px;</span><br><span class="line">    margin-right: auto;</span><br><span class="line">    margin-left: auto;</span><br><span class="line">    padding-left: 15px;</span><br><span class="line">    padding-right: 15px;</span><br><span class="line">&#125;</span><br><span class="line">.container:after, .container:before &#123;</span><br><span class="line">    content: &quot; &quot;;</span><br><span class="line">    display: table;</span><br><span class="line">&#125;</span><br><span class="line">.container:after &#123;</span><br><span class="line">    clear: both;</span><br><span class="line">&#125;</span><br><span class="line">.navbar &#123;</span><br><span class="line">    background-color: #fff;</span><br><span class="line">    border-color: #f0f0f0;</span><br><span class="line">    top: 0;</span><br><span class="line">    border-width: 0 0 1px;</span><br><span class="line">    border-radius: 0;</span><br><span class="line">&#125;</span><br><span class="line">.navbar-nav &#123;</span><br><span class="line">    float: left;</span><br><span class="line">    margin: 0;</span><br><span class="line">&#125;</span><br><span class="line">.navbar:after, .navbar:before &#123;</span><br><span class="line">    content: &quot; &quot;;</span><br><span class="line">    display: table;</span><br><span class="line">    box-sizing: border-box;</span><br><span class="line">&#125;</span><br><span class="line">.nav:after, .nav:before &#123;</span><br><span class="line">    content: &quot; &quot;;</span><br><span class="line">    display: table;</span><br><span class="line">&#125;</span><br><span class="line">nav .width-limit &#123;</span><br><span class="line">    min-width: 768px;</span><br><span class="line">    max-width: 1440px;</span><br><span class="line">    margin: 0 auto;</span><br><span class="line">&#125;</span><br><span class="line">nav .logo &#123;</span><br><span class="line">    float: left;</span><br><span class="line">    height: 56px;</span><br><span class="line">    padding: 0;</span><br><span class="line">&#125;</span><br><span class="line">nav .logo img &#123;</span><br><span class="line">    height: 100%;</span><br><span class="line">    vertical-align: middle;</span><br><span class="line">    border: 0;</span><br><span class="line">&#125;</span><br><span class="line">.btn &#123;</span><br><span class="line">    display: inline-block;</span><br><span class="line">    margin-bottom: 0;</span><br><span class="line">    font-weight: 400;</span><br><span class="line">    text-align: center;</span><br><span class="line">    vertical-align: middle;</span><br><span class="line">    touch-action: manipulation;</span><br><span class="line">    cursor: pointer;</span><br><span class="line">    background-image: none;</span><br><span class="line">    border: 1px solid transparent;</span><br><span class="line">    white-space: nowrap;</span><br><span class="line">    padding: 6px 12px;</span><br><span class="line">    font-size: 14px;</span><br><span class="line">    line-height: 1.42857;</span><br><span class="line">    border-radius: 4px;</span><br><span class="line">&#125;</span><br><span class="line">nav .write-btn &#123;</span><br><span class="line">    float: right;</span><br><span class="line">    width: 100px;</span><br><span class="line">    height: 24px;</span><br><span class="line">    line-height: 24px;</span><br><span class="line">    margin: 8px 12px 0;</span><br><span class="line">    border-radius: 20px;</span><br><span class="line">    font-size: 15px;</span><br><span class="line">    color: #fff;</span><br><span class="line">    background-color: #ea6f5a;</span><br><span class="line">    text-decoration: none;</span><br><span class="line">&#125;</span><br><span class="line">nav .log-in, nav .log-in:hover &#123;</span><br><span class="line">    color: #969696;</span><br><span class="line">&#125;</span><br><span class="line">nav .log-in &#123;</span><br><span class="line">    float: right;</span><br><span class="line">    margin: 11px 6px 0 10px;</span><br><span class="line">    font-size: 15px;</span><br><span class="line">&#125;</span><br><span class="line">nav .sign-up &#123;</span><br><span class="line">    float: right;</span><br><span class="line">    width: 80px;</span><br><span class="line">    height: 24px;</span><br><span class="line">    line-height: 24px;</span><br><span class="line">    margin: 9px 5px 0 15px;</span><br><span class="line">    border: 1px solid rgba(236,97,73,.7);</span><br><span class="line">    border-radius: 20px;</span><br><span class="line">    font-size: 15px;</span><br><span class="line">    color: #ea6f5a;</span><br><span class="line">    background-color: transparent;</span><br><span class="line">&#125;</span><br><span class="line">nav .icon-write &#123;</span><br><span class="line">    margin-right: 3px;</span><br><span class="line">    width: 19px;</span><br><span class="line">    height: 19px;</span><br><span class="line">    vertical-align: middle;</span><br><span class="line">&#125;</span><br><span class="line">nav .menu-text&#123;</span><br><span class="line">    font-size: 17px;</span><br><span class="line">    color: #ea6f5a;</span><br><span class="line">&#125;</span><br><span class="line">nav .menu-icon &#123;</span><br><span class="line">    width: 20px;</span><br><span class="line">    height: 20px;</span><br><span class="line">    vertical-align: sub;</span><br><span class="line">    margin-right: 3px;</span><br><span class="line">&#125;</span><br><span class="line">nav .nav .tab a &#123;</span><br><span class="line">    height: 56px;</span><br><span class="line">    line-height: 26px;</span><br><span class="line">    padding: 15px;</span><br><span class="line">    color: #ea6f5a;</span><br><span class="line">    background: none;</span><br><span class="line">&#125;</span><br><span class="line">nav .navbar-nav li &#123;</span><br><span class="line">    margin-right: 10px;</span><br><span class="line">    float: left;</span><br><span class="line">    position: relative;</span><br><span class="line">    display: block;</span><br><span class="line">    box-sizing: border-box;</span><br><span class="line">    height: 56px;</span><br><span class="line">    line-height: 56px;</span><br><span class="line">&#125;</span><br><span class="line">.navbar-nav &#123;</span><br><span class="line">    float: left;</span><br><span class="line">    margin: 0;</span><br><span class="line">&#125;</span><br><span class="line">nav form &#123;</span><br><span class="line">    position: relative;</span><br><span class="line">    top: 9px;</span><br><span class="line">    margin: 0 0 20px;</span><br><span class="line">    box-sizing: border-box;</span><br><span class="line">    line-height: 20px;</span><br><span class="line">&#125;</span><br><span class="line">nav form .search-input &#123;</span><br><span class="line">    padding: 0 40px 0 20px;</span><br><span class="line">    height: 38px;</span><br><span class="line">    font-size: 14px;</span><br><span class="line">    border: 1px solid #eee;</span><br><span class="line">    border-radius: 40px;</span><br><span class="line">    background: #eee;</span><br><span class="line">    transition: width .5s;</span><br><span class="line">    width: 240px;</span><br><span class="line">    outline: none;</span><br><span class="line">&#125;</span><br><span class="line">nav form .search-input:focus &#123;</span><br><span class="line">    width: 320px;</span><br><span class="line">    outline: none;</span><br><span class="line">&#125;</span><br><span class="line">.navbar-default .navbar-collapse, .navbar-default .navbar-form &#123;</span><br><span class="line">    border-color: #e7e7e7;</span><br><span class="line">    padding-left: 0;</span><br><span class="line">    padding-right: 0;</span><br><span class="line">    box-sizing: border-box;</span><br><span class="line">    width: auto;</span><br><span class="line">    border-top: 0;</span><br><span class="line">    box-shadow: none;</span><br><span class="line">&#125;</span><br><span class="line">.navbar &#123;</span><br><span class="line">    background-color: #fff;</span><br><span class="line">    top: 0;</span><br><span class="line">    border-radius: 0;</span><br><span class="line">    position: fixed;</span><br><span class="line">    right: 0;</span><br><span class="line">    left: 0;</span><br><span class="line">    z-index: 1030;</span><br><span class="line">    min-height: 50px;</span><br><span class="line">    margin-bottom: 20px;</span><br><span class="line">    border-bottom: 1px solid #f0f0f0;</span><br><span class="line">&#125;</span><br><span class="line">nav &#123;</span><br><span class="line">    height: 56px;</span><br><span class="line">&#125;</span><br><span class="line">.navbar:after, .navbar:before &#123;</span><br><span class="line">    content: &quot; &quot;;</span><br><span class="line">    display: table;</span><br><span class="line">&#125;</span><br><span class="line">nav form .search-btn &#123;</span><br><span class="line">    position: absolute;</span><br><span class="line">    display: block;</span><br><span class="line">    top: 0;</span><br><span class="line">    right: 10px;</span><br><span class="line">    width: 30px;</span><br><span class="line">    height: 30px;</span><br><span class="line">    padding: 0;</span><br><span class="line">    margin: 5px -1px 0 0;</span><br><span class="line">    background: transparent url(&quot;..&#x2F;..&#x2F;..&#x2F;static&#x2F;image&#x2F;search-focus.svg&quot;) no-repeat 6px 6px;</span><br><span class="line">    background-size: 20px;</span><br><span class="line">&#125;</span><br><span class="line">nav form .search-input:focus~a&#123;</span><br><span class="line">    border-radius: 50%;</span><br><span class="line">    background-color: #696969;</span><br><span class="line">    background-image: url(&quot;..&#x2F;..&#x2F;..&#x2F;static&#x2F;image&#x2F;search-blur.svg&quot;);</span><br><span class="line">&#125;</span><br><span class="line">nav .sign-up:hover &#123;</span><br><span class="line">    color: #ec6149;</span><br><span class="line">    border-color: #ec6149;</span><br><span class="line">    background-color: rgba(236,97,73,.05);</span><br><span class="line">&#125;</span><br><span class="line">nav .write-btn:focus, nav .write-btn:hover &#123;</span><br><span class="line">    color: #fff;</span><br><span class="line">    background-color: #ec6149;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>

<p>components/common/Footer.vue</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;footer <span class="class"><span class="keyword">class</span></span>=<span class="string">"container"</span>&gt;</span><br><span class="line">  &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"row"</span>&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"main"</span>&gt;</span><br><span class="line">      &lt;a target=<span class="string">"_blank"</span> href=<span class="string">""</span>&gt;关于荏苒&lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp">      &lt;em&gt; · &lt;/</span>em&gt;</span><br><span class="line">      &lt;a target=<span class="string">"_blank"</span> href=<span class="string">""</span>&gt;联系我们&lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp">      &lt;em&gt; · &lt;/</span>em&gt;</span><br><span class="line">      &lt;a target=<span class="string">"_blank"</span> href=<span class="string">""</span>&gt;加入我们&lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp">      &lt;em&gt; · &lt;/</span>em&gt;</span><br><span class="line">      &lt;a target=<span class="string">"_blank"</span> href=<span class="string">""</span>&gt;帮助中心&lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp">      &lt;em&gt; · &lt;/</span>em&gt;</span><br><span class="line">      &lt;a target=<span class="string">"_blank"</span> href=<span class="string">"http://www.jianshu.com/p/cabc8fa39830"</span>&gt;合作伙伴&lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp">      &lt;div class="icp"&gt;©2016-2019 广州荏苒信息科技有限公司 /</span> 荏苒 / 粤ICP备<span class="number">16018329</span>号<span class="number">-5</span> /&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>footer&gt;</span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">    export default &#123;</span></span><br><span class="line"><span class="regexp">        name: "Footer"</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.container &#123;</span><br><span class="line">    width: <span class="number">960</span>px;</span><br><span class="line">    margin-right: auto;</span><br><span class="line">    margin-left: auto;</span><br><span class="line">    padding-left: <span class="number">15</span>px;</span><br><span class="line">    padding-right: <span class="number">15</span>px;</span><br><span class="line">    margin-bottom: <span class="number">20</span>px;</span><br><span class="line">    box-sizing: border-box;</span><br><span class="line">&#125;</span><br><span class="line">.container:after, .container:before &#123;</span><br><span class="line">    content: <span class="string">" "</span>;</span><br><span class="line">    display: table;</span><br><span class="line">&#125;</span><br><span class="line">footer .row &#123;</span><br><span class="line">    padding-top: <span class="number">25</span>px;</span><br><span class="line">    box-sizing: border-box;</span><br><span class="line">    margin-left: <span class="number">-15</span>px;</span><br><span class="line">    margin-right: <span class="number">-15</span>px;</span><br><span class="line">&#125;</span><br><span class="line">footer .main &#123;</span><br><span class="line">    padding-right: <span class="number">0</span>;</span><br><span class="line">    font-size: <span class="number">13</span>px;</span><br><span class="line">    color: #969696;</span><br><span class="line">  width: <span class="number">70.83333</span>%;</span><br><span class="line">&#125;</span><br><span class="line">footer .icp, footer .icp a &#123;</span><br><span class="line">    color: #c8c8c8;</span><br><span class="line">&#125;</span><br><span class="line">footer .icp &#123;</span><br><span class="line">    margin-top: <span class="number">10</span>px;</span><br><span class="line">    font-size: <span class="number">12</span>px;</span><br><span class="line">&#125;</span><br><span class="line">footer .main a &#123;</span><br><span class="line">    color: #969696;</span><br><span class="line">    display: inline-block;</span><br><span class="line">&#125;</span><br><span class="line">.row:after &#123;</span><br><span class="line">    clear: both;</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/style&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="6-跨域CORS"><a href="#6-跨域CORS" class="headerlink" title="6. 跨域CORS"></a>6. 跨域CORS</h1><p>我们现在为前端和后端分别设置两个不同的域名：</p>
<p><a href="https://www.notion.so/6c3910a07a18421787f41719768f07f9" target="_blank" rel="noopener">Untitled</a></p>
<p>编辑<code>/etc/hosts</code>文件，可以设置本地域名</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/hosts</span><br></pre></td></tr></table></figure>

<p>在文件中增加两条信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">127.0.0.1   api.renran.cn</span><br><span class="line">127.0.0.1   www.moluo.net</span><br></pre></td></tr></table></figure>

<p>访问<a href="http://www.renrancn" target="_blank" rel="noopener">http://www.renrancn</a>网址，效果：</p>
<p><img src="/images/1572915815759.png" alt="1572915815759.png"></p>
<p>上面并不是错误，而是没人监听了这个地址和端口了，解决方法：</p>
<p>暂停运行前端项目，并修改配置文件config/index.js</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">host: <span class="string">'www.renran.cn'</span>, <span class="comment">// can be overwritten by process.env.HOST</span></span><br><span class="line">    port: <span class="number">8080</span>, <span class="comment">// can be overwritten by process.env.PORT, if port is in use, a free one will be determined</span></span><br><span class="line">    autoOpenBrowser: <span class="literal">true</span>,</span><br></pre></td></tr></table></figure>

<p>保存修改信息，并重启项目</p>
<p><img src="/images/1557454684623.png" alt="1557454684623.png"></p>
<p>通过浏览器访问drf项目,会出现以下错误信息</p>
<p><img src="/images/1557454965635.png" alt="1557454965635.png"></p>
<p>可以通过settings/dev.py的ALLOWED_HOSTS,设置允许访问</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设置哪些客户端可以通过地址访问到后端</span></span><br><span class="line">ALLOWED_HOSTS = [</span><br><span class="line">    <span class="string">'api.renran.cn'</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p><img src="/images/1557455086164.png" alt="1557455086164.png"></p>
<p>让用户访问的时候，使用api.renran.cn:8000</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 修改pycharm的manage.py的配置参数</span><br></pre></td></tr></table></figure>

<p><img src="/images/1557455152863.png" alt="1557455152863.png"></p>
<p>现在，前端与后端分处不同的域名，我们需要为后端添加跨域访问的支持</p>
<p>否则前端无法使用axios无法请求后端提供的api数据，我们使用CORS来解决后端对跨域访问的支持。</p>
<p>使用django-cors-headers扩展</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在 Response(headers&#x3D;&#123;&quot;Access-Control-Allow-Origin&quot;:&#39;客户端地址&#x2F;*&#39;&#125;)</span><br></pre></td></tr></table></figure>

<p>文档：<a href="https://github.com/ottoyiu/django-cors-headers/" target="_blank" rel="noopener">https://github.com/ottoyiu/django-cors-headers/</a></p>
<p>安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install django-cors-headers</span><br></pre></td></tr></table></figure>

<p>settings/dev.py，添加应用</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">INSTALLED_APPS = (</span><br><span class="line">    ...</span><br><span class="line">    <span class="string">'corsheaders'</span>,</span><br><span class="line">    ...</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>中间层设置【必须写在第一个位置】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">MIDDLEWARE = [</span><br><span class="line">    <span class="string">'corsheaders.middleware.CorsMiddleware'</span>,</span><br><span class="line">    ...</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>添加白名单</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># CORS组的配置信息</span></span><br><span class="line">CORS_ORIGIN_WHITELIST = (</span><br><span class="line">    <span class="string">'http://www.moluo.net:8080'</span>,</span><br><span class="line">)</span><br><span class="line">CORS_ALLOW_CREDENTIALS = <span class="literal">False</span>  <span class="comment"># 允许ajax跨域请求时携带cookie</span></span><br></pre></td></tr></table></figure>

<p><img src="/images/1572916750522.png" alt="1572916750522.png"></p>
<p>完成了上面的步骤，我们就可以通过后端提供数据给前端使用ajax访问了。</p>
<p>前端使用 axios就可以访问到后端提供给的数据接口，但是如果要附带cookie信息，前端还要设置一下。</p>
<p>前端引入axios插件并配置允许axios发送cookie信息[axios本身也不允许ajax发送cookie到后端]</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i axios -S</span><br></pre></td></tr></table></figure>

<p><img src="/images/1557455747921.png" alt="1557455747921.png"></p>
<p>在main.js中引用 axios插件</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span>; <span class="comment">// 从node_modules目录中导入包</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 允许ajax发送请求时附带cookie，设置为不允许</span></span><br><span class="line">axios.defaults.withCredentials = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">Vue.prototype.$axios = axios; <span class="comment">// 把对象挂载vue中</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>开源项目</category>
      </categories>
      <tags>
        <tag>荏苒商城</tag>
      </tags>
  </entry>
  <entry>
    <title>[荏苒商城项目分析]</title>
    <url>/2020/03/22/%E8%8D%8F%E8%8B%92%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h1 id="1-项目开发基础概念"><a href="#1-项目开发基础概念" class="headerlink" title="1. 项目开发基础概念"></a>1. 项目开发基础概念</h1><h2 id="1-1-企业的web项目类型"><a href="#1-1-企业的web项目类型" class="headerlink" title="1.1 企业的web项目类型"></a>1.1 企业的web项目类型</h2><ol>
<li><p>商城</p>
<p>主要把现实中的商务交易通过互联网平台实现的电子交易模式的网站。商城会根据不同的交易双方划分成不同的电子商务模式。根据不同的电子商务模式，有可能把商城划分成不同类型的商城，常见的电子商务模式：</p>
<p>B2C[企业对个人的交易，由企业提供商品，个人选购，Business-to-Consumer]: 一般常见的官网商城。</p>
<p>​    B2C也叫直销商城，或者垂直商城，也可以叫自营商城。</p>
<p>B2B[企业对企业的交易，由企业提供商品，另一个企业进行批发或采购，Business-to-Business]，</p>
<p>​    B2B也叫批发商城，例如与：1688</p>
<p>C2C[个人对个人的交易，网站官网不参与交易，而是提供了一个平台给用户之间进行交易，Consumer-to-Consumer]，一般常见的就是二手商品交易平台或者拍卖平台。例如淘宝，孔夫子二手书网。</p>
<p>B2B2C[一个商家在另一个企业平台上对个人的交易]，一般叫进驻商城，购物平台。例如：天猫，京东，当当。</p>
<p>C2B[个人对企业的交易，由个人发起需求，企业接单完成商品]，一般也叫订购(定制)商城，例如：小米，3D打印。</p>
<p>O2O[线上付费，线下体验的交易]，常见的外卖平台，大众点评，12306。。。</p>
<blockquote>
<p>  注意：不同的商城，会因为不同的电子商务模式而存在不同的功能和交易流程，所以，开发商城时，一定先分析清楚当前项目属于什么样的电子商务模式。当然，因为市场，需求和时间的改变，电子商务模式也会发生变化的。一旦发生电子商务模式的变化，在企业中，往往不适合在原有网站上面改造，而是建议重构。</p>
</blockquote>
</li>
</ol>
<ol start="2">
<li><p>门户网站[企业站和门户站]</p>
</li>
<li><p>社交网络</p>
<p>具备社交因素的网站。能够添加好友，发送私信，划分群组。。</p>
<p>例如：知乎，微博，脉脉，脸书</p>
</li>
</ol>
<ol start="4">
<li><p>资讯论坛</p>
<p>例如：招聘网站，今日头条，天涯，百度贴吧。。。</p>
</li>
</ol>
<ol start="5">
<li><p>内部系统</p>
<p>OA[线上办公管理系统]，CRM[客户关系管理系统]，ERP[企业权限管理系统]，要求权限比较高的，对于企业的业务进行专门定制的，很多时候开发过程中需要根据业务实现各种流程根据。</p>
</li>
</ol>
<ol start="6">
<li><p>个人博客</p>
<p>一般都是文章展示，往往就是团队，组织，机构，个人展示最近动态或者技术分享，生活分享的网站。</p>
</li>
</ol>
<ol start="7">
<li><p>内容收费站</p>
<p>妹子图，爱奇艺，优酷，软甲下载站，音乐下载网，音乐视听网。。。。</p>
</li>
</ol>
<h2 id="1-2-企业项目开发流程"><a href="#1-2-企业项目开发流程" class="headerlink" title="1.2 企业项目开发流程"></a>1.2 企业项目开发流程</h2><p><img src="/images/%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B.png" alt="开发流程"></p>
<p><img src="/images/0a4ede2ba0d4a7302763a65.jpg" alt="img"></p>
<h2 id="1-3-立项申请阶段"><a href="#1-3-立项申请阶段" class="headerlink" title="1.3 立项申请阶段"></a>1.3 立项申请阶段</h2><p>立项其实就是对产品项目能不能做和怎么做，提出理论基础。大的互联网公司都有比较正规的立项流程。</p>
<p><img src="https://gitee.com/wjxyzs/img/raw/master/img/1594224193(1).png" alt=""></p>
<p>通常公司内部要研发一款软硬件的产品之前，都要经过市场评估和调研分析，产生一份<code>产品项目立项报告</code>给公司。</p>
<p>产品项目立项报告一般包含以下内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">项目概述</span><br><span class="line">需求市场</span><br><span class="line">需求分析和项目建设的必要性</span><br><span class="line">业务分析</span><br><span class="line">总体建设方案</span><br><span class="line">项目风险和风险管理</span><br><span class="line">可行性分析阶段</span><br></pre></td></tr></table></figure>

<p>参考资料：<a href="https://blog.csdn.net/m0_37370820/article/details/81077886" target="_blank" rel="noopener">https://blog.csdn.net/m0_37370820/article/details/81077886</a></p>
<h1 id="2-需求分析"><a href="#2-需求分析" class="headerlink" title="2. 需求分析"></a>2. 需求分析</h1><h2 id="2-1-登录注册"><a href="#2-1-登录注册" class="headerlink" title="2.1 登录注册"></a>2.1 登录注册</h2><p>功能：用户登录、多条件登录、jwt认证、记住密码、QQ第三方登录、</p>
<p>​            用户注册、短信发送、短信冷却倒计时、腾讯防水墙验证码、Celery异步发送短信和邮件</p>
<p>​            邮箱找回重置密码、使用itsdangerous对数据进行加密解密</p>
<p><img src="/images/1577990861697.png" alt="1577990861697"></p>
<p><img src="/images/1577991263742.png" alt="1577991263742"></p>
<p><img src="/images/1577991344099.png" alt="1577991344099"></p>
<p><img src="/images/1577991766752.png" alt="1577991766752"></p>
<h2 id="2-2-首页"><a href="#2-2-首页" class="headerlink" title="2.2 首页"></a>2.2 首页</h2><p>功能：无限级别导航菜单、轮播图、退出登录、内容列表下拉刷新</p>
<p>​        采用分布式存储系统FastDFS存储网站内容图片，基于docker进行安装部署FastDFS</p>
<p>​            feed流内容推送[feed是将用户主动订阅的内容组合在一起形成内容聚合器，帮助用户持续地获取最新内容]</p>
<p>​        智能推荐原创作者、关注作者和取消关注</p>
<p>​        django集成markdown富文本编辑器</p>
<p><img src="/images/1577990588403.png" alt="1577990588403"></p>
<h2 id="2-3-内容详情"><a href="#2-3-内容详情" class="headerlink" title="2.3 内容详情"></a>2.3 内容详情</h2><p>功能：文章内容实现专题、文集等归纳类目</p>
<p>​           内容基本展示、作者信息展示、作者热门文章展示、同类专题内容推荐、</p>
<p>​           文章评论、无限级别评论回复、评论分页、评论排序、分享内容、收藏内容、评论点赞和踩</p>
<p>​           点赞内容、赞赏支持</p>
<p>​       基于redis保存我的浏览历史记录</p>
<p>​       内容购买</p>
<p><img src="/images/1577993236784.png" alt="1577993236784"></p>
<p><img src="/images/1577993459126.png" alt="1577993459126"></p>
<p><img src="/images/1577993610205.png" alt="1577993610205"></p>
<p><img src="/images/1577993632021.png" alt="1577993632021"></p>
<h2 id="2-4-内容搜索页"><a href="#2-4-内容搜索页" class="headerlink" title="2.4 内容搜索页"></a>2.4 内容搜索页</h2><p>功能：基于ElasticSearch实现中文分词，使用django-haystack配合完成内容搜索。</p>
<p>​            搜索内容结果实现分页展示</p>
<p>​        按不同条件筛选展示内容</p>
<p>​            搜索历史记录</p>
<p>​            </p>
<p><img src="/images/1577994346242.png" alt="1577994346242"></p>
<h2 id="2-5-个人中心"><a href="#2-5-个人中心" class="headerlink" title="2.5 个人中心"></a>2.5 个人中心</h2><h3 id="2-5-1-我的首页"><a href="#2-5-1-我的首页" class="headerlink" title="2.5.1 我的首页"></a>2.5.1 我的首页</h3><p>功能：个人信息基本展示、采用timeline模式展示我的动态、展示最新评论、展示我的热门内容、展示我的文集</p>
<p>​            基于ajax实现鱼书功能[在线聊天]、</p>
<p><img src="/images/1577994901235.png" alt="1577994901235"></p>
<p><img src="/images/1577995094611.png" alt="1577995094611"></p>
<h3 id="2-5-2-收藏和喜欢的的文章"><a href="#2-5-2-收藏和喜欢的的文章" class="headerlink" title="2.5.2 收藏和喜欢的的文章"></a>2.5.2 收藏和喜欢的的文章</h3><p><img src="/images/1577995261184.png" alt="1577995261184"></p>
<h3 id="2-4-3-我的钱包"><a href="#2-4-3-我的钱包" class="headerlink" title="2.4.3 我的钱包"></a>2.4.3 我的钱包</h3><p>功能：基于支付宝转账到个人账户接口实现余额提现、</p>
<p>​            资金流水记录</p>
<p>​        </p>
<p><img src="/images/1577995290426.png" alt="1577995290426"></p>
<h3 id="2-4-5-我的基本信息设置"><a href="#2-4-5-我的基本信息设置" class="headerlink" title="2.4.5 我的基本信息设置"></a>2.4.5 我的基本信息设置</h3><p>功能：基本信息修改、用户地址信息功能修改、账户所有内容打包下载</p>
<p><img src="/images/1577995354497.png" alt="1577995354497"></p>
<h3 id="2-4-6-我的粉丝"><a href="#2-4-6-我的粉丝" class="headerlink" title="2.4.6 我的粉丝"></a>2.4.6 我的粉丝</h3><p>功能：关注和取消关注</p>
<p><img src="/images/1577995776589.png" alt="1577995776589"></p>
<h1 id="3-环境搭建"><a href="#3-环境搭建" class="headerlink" title="3. 环境搭建"></a>3. 环境搭建</h1><h2 id="3-1-创建虚拟环境"><a href="#3-1-创建虚拟环境" class="headerlink" title="3.1 创建虚拟环境"></a>3.1 创建虚拟环境</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 如果当前系统中没有虚拟环境，则使用以下命令安装虚拟环境：</span></span><br><span class="line"><span class="comment"># pip3 install virtualenv  -i https://pypi.tuna.tsinghua.edu.cn/simple</span></span><br><span class="line"><span class="comment"># pip3 install virtualenvwrapper -i https://pypi.tuna.tsinghua.edu.cn/simple</span></span><br><span class="line"><span class="comment"># pip3 install virtualenvwrapper-win -i https://pypi.tuna.tsinghua.edu.cn/simple</span></span><br><span class="line"></span><br><span class="line">mkvirtualenv renran</span><br></pre></td></tr></table></figure>

<p>如果自己的开发机子中存在多个版本的python，则可以指定python解析器的版本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">mkvirtualenv renran -p python3</span><br></pre></td></tr></table></figure>



<h2 id="3-2-相关命令"><a href="#3-2-相关命令" class="headerlink" title="3.2 相关命令"></a>3.2 相关命令</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">创建虚拟环境：                mkvirtualenv 虚拟环境名称</span><br><span class="line">创建虚拟环境(指定python版本)： mkvirtualenv 虚拟环境名称 -p python3</span><br><span class="line">查看所有虚拟环境：             workon</span><br><span class="line">使用虚拟环境：                workon 虚拟环境名称</span><br><span class="line">退出虚拟环境：                deactivate</span><br><span class="line">删除虚拟环境（必须先退出虚拟环境内部才能删除当前虚拟环境）:</span><br><span class="line">                           	rmvirtualenv 虚拟环境名称</span><br><span class="line">    </span><br><span class="line">其他相关命令：</span><br><span class="line">查看虚拟环境中安装的包：              pip freeze  或者 pip list</span><br><span class="line">收集当前环境中安装的包及其版本：        pip freeze &gt; requirements.txt</span><br><span class="line">在部署项目的服务器中安装项目使用的模块： pip install -r requirements.txt</span><br></pre></td></tr></table></figure>

<p>提示:</p>
<ul>
<li><p>虚拟环境只会管理环境内部的模块和python解析器,对于源代码是毫无关系</p>
</li>
<li><p>创建虚拟环境需要联网</p>
</li>
<li><p>创建成功后, 会自动工作在这个虚拟环境上</p>
</li>
<li><p>工作在虚拟环境上, 提示符最前面会出现 “(虚拟环境名称)”</p>
</li>
</ul>
<h2 id="3-3-技术选型"><a href="#3-3-技术选型" class="headerlink" title="3.3 技术选型"></a>3.3 技术选型</h2><h3 id="外部依赖"><a href="#外部依赖" class="headerlink" title="外部依赖"></a>外部依赖</h3><ol>
<li><p>注册支付宝的开发者账号</p>
</li>
<li><p>注册阿里云/腾讯云账号,如果可以购买一个服务器【<a href="http://www.aliyun.com】" target="_blank" rel="noopener">www.aliyun.com】</a></p>
</li>
<li><p>注册容联云短信接口平台的账号【<a href="http://www.yuntongxun.com】" target="_blank" rel="noopener">www.yuntongxun.com】</a></p>
</li>
<li><p>注册腾讯开发者账户，申请QQ互联开发者实名认证【<a href="http://connect.qq.com】" target="_blank" rel="noopener">http://connect.qq.com】</a></p>
</li>
<li><p>申请163或者QQ邮箱开通smtp/pop3服务【<a href="http://mail.163.com】" target="_blank" rel="noopener">http://mail.163.com】</a></p>
</li>
<li><p>注册gitee[码云]的账号</p>
</li>
<li><p>如果有条件的,可以申请一个域名进行备案[ICP备案和公安部备案],如果没有的话, 可以注册natapp</p>
<p>公安部备案平台：<a href="http://www.beian.gov.cn/" target="_blank" rel="noopener">http://www.beian.gov.cn/</a></p>
</li>
</ol>
<h4 id="依赖包安装"><a href="#依赖包安装" class="headerlink" title="依赖包安装"></a>依赖包安装</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip install django&#x3D;&#x3D;2.2.0  -i https:&#x2F;&#x2F;pypi.douban.com&#x2F;simple</span><br><span class="line"></span><br><span class="line">pip install djangorestframework  -i https:&#x2F;&#x2F;pypi.douban.com&#x2F;simple</span><br><span class="line"></span><br><span class="line">pip install PymySQL  -i https:&#x2F;&#x2F;pypi.douban.com&#x2F;simple</span><br><span class="line"></span><br><span class="line">pip install Pillow  -i https:&#x2F;&#x2F;pypi.douban.com&#x2F;simple</span><br><span class="line"></span><br><span class="line">pip install django-redis  -i https:&#x2F;&#x2F;pypi.douban.com&#x2F;simple</span><br></pre></td></tr></table></figure>



<h1 id="4-搭建项目"><a href="#4-搭建项目" class="headerlink" title="4. 搭建项目"></a>4. 搭建项目</h1><h2 id="4-1-创建项目"><a href="#4-1-创建项目" class="headerlink" title="4.1 创建项目"></a>4.1 创建项目</h2><p>项目所在路径不要使用中文或者空格或者除了下划线的其它特殊符号</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cd ~/Desktop</span><br><span class="line">mkdir renran</span><br><span class="line">cd renran</span><br><span class="line">django-admin startproject renranapi</span><br></pre></td></tr></table></figure>



<h2 id="4-3-打开项目"><a href="#4-3-打开项目" class="headerlink" title="4.3 打开项目"></a>4.3 打开项目</h2><p>在pycharm中打开项目</p>
<p><img src="/images/1593659898433.png" alt="1593659898433"></p>
<p><img src="/images/1578105222972.png" alt="1578105222972"></p>
<p>选择菜单file, 点选settings… 设置虚拟环境</p>
<p><img src="/images/1553139497155.png" alt="1553139497155"></p>
<p>点击右边的齿轮，选择Add</p>
<p><img src="/images/1578104421692.png" alt="1578104421692"></p>
<p><img src="/images/1578104445382.png" alt="1578104445382"></p>
<p>启动django项目中的manage.py</p>
<p><img src="/images/1578105329159.png" alt="1578105329159"></p>
<p>因为仅启动manage.py，所以项目不会运行，所以需要配置启动manage.py的参数。</p>
<p><img src="/images/1578104595762.png" alt="1578104595762"></p>
<p>点选“Edit Configurations”，在新窗口中的Parammeters中加上以下内容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">runserver 0.0.0.0:8000</span><br></pre></td></tr></table></figure>

<p><img src="/images/1578104637328.png" alt="1578104637328"></p>
<p>再次运行manage.py</p>
<p><img src="/images/1578104662964.png" alt="1578104662964"></p>
<p>效果：</p>
<p><img src="/images/1557367991756.png" alt="1557367991756"></p>
<p>提示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在pycharm中如果要使用已经创建好的虚拟环境，则必须设置pycharm中的python解释器，设置为虚拟环境中的python。</span><br></pre></td></tr></table></figure>



<h2 id="4-2-调整目录"><a href="#4-2-调整目录" class="headerlink" title="4.2 调整目录"></a>4.2 调整目录</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">renran&#x2F;</span><br><span class="line">  ├── docs&#x2F;          # 项目相关资料保存目录</span><br><span class="line">      ├ 项目开发日志&#x2F;项目开发文档.md  </span><br><span class="line">  ├── reran_pc&#x2F;     # 前端项目目录</span><br><span class="line">  ├── reranapi&#x2F;      # api服务端项目目录</span><br><span class="line">       ├── logs&#x2F;          # 项目运行时&#x2F;开发时日志目录</span><br><span class="line">       ├── manage.py</span><br><span class="line">       ├── reranapi&#x2F;      # 项目主应用，开发时的代码保存</span><br><span class="line">       │    ├── apps&#x2F;      # 开发者的代码保存目录，以模块[子应用]为目录保存</span><br><span class="line">       │    ├── libs&#x2F;      # 第三方类库的保存目录[第三方组件、模块]</span><br><span class="line">       │    ├── settings&#x2F;</span><br><span class="line">       │         ├── dev.py   # 项目开发时的本地配置[不需要上传到线上或者服务器]</span><br><span class="line">       │         ├── prod.py  # 项目上线时的运行配置</span><br><span class="line">       │    ├── urls.py    # 总路由</span><br><span class="line">       │    ├── utils&#x2F;     # 多个模块[子应用]的公共函数类库[自己开发的组件]</span><br><span class="line">       └── scripts&#x2F;       # 保存项目运营时的脚本文件</span><br></pre></td></tr></table></figure>

<p>在编辑中开发项目时,必须指定项目目录才能运行,例如,开发后端项目,则必须选择的目录是luffyapi</p>
<h3 id="4-2-1-分不同环境进行项目配置"><a href="#4-2-1-分不同环境进行项目配置" class="headerlink" title="4.2.1 分不同环境进行项目配置"></a>4.2.1 分不同环境进行项目配置</h3><p>开发者本地的环境、目录、数据库密码和线上的服务器都会不一样,所以我们的配置文件可以针对不同的系统分成多分.</p>
<ol>
<li>在项目主应用下,创建一个settings的配置文件存储目录</li>
<li>根据线上线下两种情况分别创建2个配置文件 dev.py和prod.py</li>
<li>把原来项目主应用的 settings.py 配置内容复制2份到dev.py和prod.py里面</li>
<li>把原来的settings.py配置文件修改文件名，例如settings_old或者直接删除settings.py</li>
</ol>
<p>新的配置文件目录settings:</p>
<p><img src="/images/1578105541412.png" alt="1578105541412"></p>
<p>接下来,就可以在manage.py中根据不同的开发环境导入对应的配置文件了.</p>
<p><img src="/images/1557368958823.png" alt="1557368958823"></p>
<h2 id="4-3-创建代码版本"><a href="#4-3-创建代码版本" class="headerlink" title="4.3 创建代码版本"></a>4.3 创建代码版本</h2><p>cd进入到自己希望存储代码的目录路径，并创建本地仓库.git【pycharm直接打开终端就是项目根目录了。无须cd了】<br>新创建的本地仓库.git是个空仓库</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cd ~/Desktop/renran</span><br><span class="line">git init     <span class="comment"># 为当前目录创建一个git仓库</span></span><br><span class="line">ls -la       <span class="comment"># linux下列出当前目录所有目录文件，包括隐藏文件</span></span><br></pre></td></tr></table></figure>

<p><img src="/images//1585726362762.png" alt="1585726362762"></p>
<h3 id="4-3-1-配置用户名和邮箱"><a href="#4-3-1-配置用户名和邮箱" class="headerlink" title="4.3.1 配置用户名和邮箱"></a>4.3.1 配置用户名和邮箱</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --global user.name &#39;moluo&#39;</span><br><span class="line">git config --global user.email &#39;649641514@qq.com&#39;</span><br></pre></td></tr></table></figure>



<h2 id="4-4-在gitee平台创建工程"><a href="#4-4-在gitee平台创建工程" class="headerlink" title="4.4 在gitee平台创建工程"></a>4.4 在gitee平台创建工程</h2><p>公司一般都会有自己的代码仓库，一般都是自己搭建，也有使用第三方提供代码管理平台。</p>
<p>常用的代码管理平台：github、gitee(码云)</p>
<p>如果公司自己搭建的代码管理平台，gitlab框架</p>
<p>1） 创建私有项目库</p>
<p><img src="/images//1578106172369.png" alt="1578106172369"></p>
<p><img src="/images//1578106188249.png" alt="1578106188249"></p>
<p>创建私有/公有空仓库以后的界面:</p>
<p><img src="/images//1578106470078.png" alt="1578106470078"></p>
<p>2）克隆项目到本地</p>
<p>注意：<br>    我们当前项目不需要这个步骤<br>        这个步骤是 当以后我们进入公司里面，参与人家已经在做的项目时，别人已经有仓库了，但是我们是新人加入项目中的，那么我们不需要在自己本地进行git init，直接git clone 复制别人的仓库代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone 仓库地址</span><br><span class="line">注意，如果当前目录下出现git仓库同名目录时，会克隆失败。</span><br></pre></td></tr></table></figure>



<p>3）创建并切换分支到dev</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># git branch dev      # 创建本地分支dev,dev是自定义</span><br><span class="line"># git checkout dev    # 切换本地分支代码</span><br><span class="line">git checkout -b dev   # 这里是上面两句代码的简写</span><br><span class="line">git branch -d dev     # 删除分支</span><br></pre></td></tr></table></figure>



<p>git提交</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git add 代码目录   # 添加代码到上传队列</span><br><span class="line">git status        # 查看当前项目的版本状态</span><br><span class="line">git commit -m '添加项目代码'  # 提交代码到本地仓库， -m 表示本次提交的描述</span><br></pre></td></tr></table></figure>

<p>推送到远端</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git push origin dev:dev</span><br></pre></td></tr></table></figure>

<p>如果推送代码,出现以下提示: git pull ….,则表示当前本地的代码和线上的代码版本不同.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 把线上的代码执行以下命令,拉取到本地,进行同步</span><br><span class="line">git pull</span><br><span class="line"></span><br><span class="line">2. 根据提示,移除多余的冲突的文件,也可以删除.</span><br><span class="line">完成这些步骤以后,再次add,commit,push即可.</span><br></pre></td></tr></table></figure>



<p>接下来，我们就把上面创建好的本地项目提交到gitee码云上面</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># .表示当前目录下所有的文件或目录提交到上传队列[上传队列也叫"暂存区"]</span></span><br><span class="line"><span class="comment"># 切换当前工作目录到项目根目录 cd ~/Desktop/renran/</span></span><br><span class="line">git add .</span><br><span class="line"></span><br><span class="line"><span class="comment"># 把本地上传队列的代码提交到本地仓库</span></span><br><span class="line">git commit -m <span class="string">"项目初始化搭建"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 给本地的git版本控制软件设置项目的远程仓库地址</span></span><br><span class="line">git remote add origin https://gitee.com/moluo/renran.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交代码给远程仓库</span></span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure>



<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">扩展：</span><br><span class="line">1. 通过 git status 可以查看当前项目的代码版本状态</span><br><span class="line">2. 通过 git reflog 可以查看代码版本日志[简单格式]</span><br><span class="line">3. 通过 git log    可以查看代码版本日志[详细格式]</span><br></pre></td></tr></table></figure>

<p>最终就可以成功提交了代码版本到gitee平台。</p>
<p>上面虽然成功移交了代码版本，但是一些不需要的文件也被提交上去了。</p>
<p>所以，我们针对一些不需要的文件，可以选择从代码版本中删除，并且使用<code>.gitignore</code>把这些垃圾文件过滤掉。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git rm 文件  <span class="comment"># 删除单个文件</span></span><br><span class="line">git rm -rf 目录  <span class="comment"># 递归删除目录</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 以下操作建议通过ubuntu的终端来完成，不要使用pycharm提供，否则删除.idea还会继续生成。</span></span><br><span class="line">git rm -rf .idea</span><br><span class="line">git rm db.sqlite3</span><br><span class="line"><span class="comment"># 注意，上面的操作只是从项目的源代码中删除，但是git是不知情的，所以我们需要同步。</span></span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">"删除不必要的文件或目录"</span></span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure>

<p>使用<code>.gitignore</code>把一些垃圾文件过滤掉。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim .gitignore</span><br><span class="line"></span><br><span class="line">renranapi&#x2F;.idea</span><br><span class="line">renranapi&#x2F;.idea&#x2F;*</span><br><span class="line">renranapi&#x2F;db.sqlite3</span><br></pre></td></tr></table></figure>

<p>开发时我们经常会使用pycharm的提供的git管理工具来完成代码的拉取和推送。</p>
<p><img src="/images//1557375896356.png" alt="1557375896356"></p>
]]></content>
      <categories>
        <category>开源项目</category>
      </categories>
      <tags>
        <tag>荏苒商城</tag>
      </tags>
  </entry>
  <entry>
    <title>[事务与其他介绍]</title>
    <url>/2020/03/13/%E4%BA%8B%E5%8A%A1%E4%B8%8E%E5%85%B6%E4%BB%96%E4%BB%8B%E7%BB%8D/</url>
    <content><![CDATA[<h3 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h3><ul>
<li><p>什么是视图</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;&quot;&quot;</span><br><span class="line">视图就是通过查询得到一张虚拟表，然后保存下来，下次可以直接使用</span><br><span class="line">其实视图也是表</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>
</li>
<li><p>为什么要用视图</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;&quot;&quot;</span><br><span class="line">如果要频繁的操作一张虚拟表(拼表组成的)，你就可以制作成视图 后续直接操作</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>
</li>
<li><p>如何操作</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 固定语法</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">view</span> 表名 <span class="keyword">as</span> 虚拟表的查询<span class="keyword">sql</span>语句</span><br><span class="line"></span><br><span class="line"><span class="comment"># 具体操作</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">view</span> teacher2course <span class="keyword">as</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> teacher <span class="keyword">INNER</span> <span class="keyword">JOIN</span> course</span><br><span class="line"><span class="keyword">on</span> teacher.tid = course.teacher_id</span><br><span class="line">;</span><br></pre></td></tr></table></figure>
</li>
<li><p>注意</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;&quot;&quot;</span><br><span class="line">1 创建视图在硬盘上只会有表结构 没有表数据(数据还是来自于之前的表)</span><br><span class="line">2 视图一般只用来查询 里面的数据不要继续修改 可能会影响真正的表</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>
</li>
<li><p>视图到底使用频率高不高呢？</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;&quot;&quot;</span><br><span class="line">不高</span><br><span class="line">当你创建了很多视图之后 会造成表的不好维护 </span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"># 总结</span><br><span class="line">	视图了解即可 基本不用！！！</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="触发器-了解"><a href="#触发器-了解" class="headerlink" title="触发器(了解)"></a>触发器(了解)</h3><p>在满足对表数据进行增、删、改的情况下，自动触发的功能</p>
<p>使用触发器可以帮助我们实现监控、日志…</p>
<p>触发器可以在六种情况下自动触发 增前 增后 删前删后 改前改后</p>
<h3 id="基本语法结构"><a href="#基本语法结构" class="headerlink" title="基本语法结构"></a>基本语法结构</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">trigger</span> 触发器的名字  <span class="keyword">before</span>/<span class="keyword">after</span> <span class="keyword">insert</span>/<span class="keyword">update</span>/<span class="keyword">delete</span> <span class="keyword">on</span> 表名</span><br><span class="line"><span class="keyword">for</span> <span class="keyword">each</span> <span class="keyword">row</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">	<span class="keyword">sql</span>语句</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 具体使用 针对触发器的名字 我们通常需要做到见名知意</span></span><br><span class="line"><span class="comment"># 针对增</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">trigger</span> tri_before_insert_t1  <span class="keyword">before</span> <span class="keyword">insert</span> <span class="keyword">on</span> t1</span><br><span class="line"><span class="keyword">for</span> <span class="keyword">each</span> <span class="keyword">row</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">	<span class="keyword">sql</span>语句</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">trigger</span> tri_after_insert_t1  <span class="keyword">after</span> <span class="keyword">insert</span> <span class="keyword">on</span> t1</span><br><span class="line"><span class="keyword">for</span> <span class="keyword">each</span> <span class="keyword">row</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">	<span class="keyword">sql</span>语句</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="string">"""针对删除和修改 书写格式一致"""</span></span><br><span class="line"></span><br><span class="line">ps:修改MySQL默认的语句结束符  只作用于当前窗口</span><br><span class="line">	delimiter $$  将默认的结束符号由;改为$$</span><br><span class="line">    delimiter ;</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 案例</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> cmd (</span><br><span class="line">    <span class="keyword">id</span> <span class="built_in">INT</span> PRIMARY <span class="keyword">KEY</span> auto_increment,</span><br><span class="line">    <span class="keyword">USER</span> <span class="built_in">CHAR</span> (<span class="number">32</span>),</span><br><span class="line">    priv <span class="built_in">CHAR</span> (<span class="number">10</span>),</span><br><span class="line">    cmd <span class="built_in">CHAR</span> (<span class="number">64</span>),</span><br><span class="line">    sub_time datetime, <span class="comment">#提交时间</span></span><br><span class="line">    <span class="keyword">success</span> enum (<span class="string">'yes'</span>, <span class="string">'no'</span>) <span class="comment">#0代表执行失败</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> errlog (</span><br><span class="line">    <span class="keyword">id</span> <span class="built_in">INT</span> PRIMARY <span class="keyword">KEY</span> auto_increment,</span><br><span class="line">    err_cmd <span class="built_in">CHAR</span> (<span class="number">64</span>),</span><br><span class="line">    err_time datetime</span><br><span class="line">);</span><br><span class="line">"""</span><br><span class="line">当cmd表中的记录succes字段是no那么就触发触发器的执行去errlog表中插入数据</span><br><span class="line">NEW指代的就是一条条数据对象</span><br><span class="line">"""</span><br><span class="line">delimiter $$</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">trigger</span> tri_after_insert_cmd <span class="keyword">after</span> <span class="keyword">insert</span> <span class="keyword">on</span> cmd </span><br><span class="line"><span class="keyword">for</span> <span class="keyword">each</span> <span class="keyword">row</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">	<span class="keyword">if</span> NEW.success = <span class="string">'no'</span> <span class="keyword">then</span></span><br><span class="line">    	<span class="keyword">insert</span> <span class="keyword">into</span> errlog(err_cmd,err_time) <span class="keyword">values</span>(NEW.cmd,NEW.sub_time);</span><br><span class="line">    <span class="keyword">end</span> <span class="keyword">if</span>;</span><br><span class="line"><span class="keyword">end</span> $$</span><br><span class="line">delimiter ;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 朝cmd表插入数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> cmd (</span><br><span class="line">    <span class="keyword">USER</span>,</span><br><span class="line">    priv,</span><br><span class="line">    cmd,</span><br><span class="line">    sub_time,</span><br><span class="line">    <span class="keyword">success</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">    (<span class="string">'jason'</span>,<span class="string">'0755'</span>,<span class="string">'ls -l /etc'</span>,<span class="keyword">NOW</span>(),<span class="string">'yes'</span>),</span><br><span class="line">    (<span class="string">'jason'</span>,<span class="string">'0755'</span>,<span class="string">'cat /etc/passwd'</span>,<span class="keyword">NOW</span>(),<span class="string">'no'</span>),</span><br><span class="line">    (<span class="string">'jason'</span>,<span class="string">'0755'</span>,<span class="string">'useradd xxx'</span>,<span class="keyword">NOW</span>(),<span class="string">'no'</span>),</span><br><span class="line">    (<span class="string">'jason'</span>,<span class="string">'0755'</span>,<span class="string">'ps aux'</span>,<span class="keyword">NOW</span>(),<span class="string">'yes'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除触发器</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">trigger</span> tri_after_insert_cmd;</span><br></pre></td></tr></table></figure>

<h3 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h3><ul>
<li><p>什么是事务</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;&quot;&quot;</span><br><span class="line">开启一个事务可以包含多条sql语句 这些sql语句要么同时成功</span><br><span class="line">要么一个都别想成功 称之为事务的原子性</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>
</li>
<li><p>事务的作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;&quot;&quot;</span><br><span class="line">保证了对数据操作的安全性</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">eg:还钱的例子</span><br><span class="line">    egon用银行卡给我的支付宝转账1000</span><br><span class="line">    	1 将egon银行卡账户的数据减1000块</span><br><span class="line">        2 将jason支付宝账户的数据加1000块</span><br><span class="line">    </span><br><span class="line">   	你在操作多条数据的时候可能会出现某几条操作不成功的情况</span><br></pre></td></tr></table></figure>
</li>
<li><p>事务的四大特性</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;&quot;&quot;</span><br><span class="line">ACID</span><br><span class="line">A:原子性</span><br><span class="line">	一个事务是一个不可分割的单位，事务中包含的诸多操作</span><br><span class="line">	要么同时成功要么同时失败</span><br><span class="line">C:一致性</span><br><span class="line">	事务必须是使数据库从一个一致性的状态变到另外一个一致性的状态</span><br><span class="line">	一致性跟原子性是密切相关的</span><br><span class="line">I:隔离性</span><br><span class="line">	一个事务的执行不能被其他事务干扰</span><br><span class="line">	（即一个事务内部的操作及使用到的数据对并发的其他事务是隔离的，并发执行的事务之间也是互相不干扰的）</span><br><span class="line">D:持久性</span><br><span class="line">	也叫&quot;永久性&quot;</span><br><span class="line">	一个事务一旦提交成功执行成功 那么它对数据库中数据的修改应该是永久的</span><br><span class="line">	接下来的其他操作或者故障不应该对其有任何的影响</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>
</li>
<li><p>如何使用事务</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 事务相关的关键字</span></span><br><span class="line"><span class="comment"># 1 开启事务</span></span><br><span class="line"><span class="keyword">start</span> <span class="keyword">transaction</span>;</span><br><span class="line"><span class="comment"># 2 回滚(回到事务执行之前的状态)</span></span><br><span class="line"><span class="keyword">rollback</span>;</span><br><span class="line"><span class="comment"># 3 确认(确认之后就无法回滚了)</span></span><br><span class="line"><span class="keyword">commit</span>;</span><br><span class="line"></span><br><span class="line">"""模拟转账功能"""</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">user</span>(</span><br><span class="line">	<span class="keyword">id</span> <span class="built_in">int</span> primary <span class="keyword">key</span> auto_increment,</span><br><span class="line">    <span class="keyword">name</span> <span class="built_in">char</span>(<span class="number">16</span>),</span><br><span class="line">    balance <span class="built_in">int</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span>(<span class="keyword">name</span>,balance) <span class="keyword">values</span></span><br><span class="line">(<span class="string">'jason'</span>,<span class="number">1000</span>),</span><br><span class="line">(<span class="string">'egon'</span>,<span class="number">1000</span>),</span><br><span class="line">(<span class="string">'tank'</span>,<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1 先开启事务</span></span><br><span class="line"><span class="keyword">start</span> <span class="keyword">transaction</span>;</span><br><span class="line"><span class="comment"># 2 多条sql语句</span></span><br><span class="line"><span class="keyword">update</span> <span class="keyword">user</span> <span class="keyword">set</span> balance=<span class="number">900</span> <span class="keyword">where</span> <span class="keyword">name</span>=<span class="string">'jason'</span>;</span><br><span class="line"><span class="keyword">update</span> <span class="keyword">user</span> <span class="keyword">set</span> balance=<span class="number">1010</span> <span class="keyword">where</span> <span class="keyword">name</span>=<span class="string">'egon'</span>;</span><br><span class="line"><span class="keyword">update</span> <span class="keyword">user</span> <span class="keyword">set</span> balance=<span class="number">1090</span> <span class="keyword">where</span> <span class="keyword">name</span>=<span class="string">'tank'</span>;</span><br><span class="line"></span><br><span class="line">"""</span><br><span class="line">总结</span><br><span class="line">	当你想让多条sql语句保持一致性 要么同时成功要么同时失败 </span><br><span class="line">	你就应该考虑使用事务</span><br><span class="line">"""</span><br></pre></td></tr></table></figure>

<h3 id="存储过程-了解"><a href="#存储过程-了解" class="headerlink" title="存储过程(了解)"></a>存储过程(了解)</h3><p>存储过程就类似于python中的自定义函数</p>
<p>它的内部包含了一系列可以执行的sql语句，存储过程存放于MySQL服务端中，你可以直接通过调用存储过程触发内部sql语句的执行</p>
<p><strong>基本使用</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> 存储过程的名字(形参<span class="number">1</span>,形参<span class="number">2</span>,...)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">	<span class="keyword">sql</span>代码</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment"># 调用</span></span><br><span class="line"><span class="keyword">call</span> 存储过程的名字();</span><br></pre></td></tr></table></figure>

<h3 id="三种开发模型"><a href="#三种开发模型" class="headerlink" title="三种开发模型"></a>三种开发模型</h3><p>第一种</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;&quot;&quot;</span><br><span class="line">应用程序:程序员写代码开发</span><br><span class="line">MySQL:提前编写好存储过程，供应用程序调用</span><br><span class="line"></span><br><span class="line">好处:开发效率提升了 执行效率也上去了</span><br><span class="line">缺点:考虑到认为元素、跨部门沟通的问题  后续的存储过程的扩展性差</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>

<p>第二种</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;&quot;&quot;</span><br><span class="line">应用程序:程序员写代码开发之外 设计到数据库操作也自己动手写</span><br><span class="line">优点:扩展性很高</span><br><span class="line">缺点:</span><br><span class="line">	开发效率降低</span><br><span class="line">	编写sql语句太过繁琐 而且后续还需要考虑sql优化的问题</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>

<p>第三种</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;&quot;&quot;</span><br><span class="line">应用程序:只写程序代码 不写sql语句 基于别人写好的操作MySQL的python框架直接调用操作即可			ORM框架  </span><br><span class="line">优点:开发效率比上面两种情况都要高 </span><br><span class="line">缺点:语句的扩展性差 可能会出现效率低下的问题 </span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>

<p>第一种基本不用。一般都是第三种，出现效率问题再动手写sql</p>
</li>
<li><p>存储过程具体演示</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">delimiter $$</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> p1(</span><br><span class="line">	<span class="keyword">in</span> m <span class="built_in">int</span>,  <span class="comment"># 只进不出  m不能返回出去</span></span><br><span class="line">    <span class="keyword">in</span> n <span class="built_in">int</span>,</span><br><span class="line">    <span class="keyword">out</span> res <span class="built_in">int</span>  <span class="comment"># 该形参可以返回出去</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">	<span class="keyword">select</span> tname <span class="keyword">from</span> teacher <span class="keyword">where</span> tid&gt;m <span class="keyword">and</span> tid&lt;n;</span><br><span class="line">    <span class="keyword">set</span> res=<span class="number">666</span>;  <span class="comment"># 将res变量修改 用来标识当前的存储过程代码确实执行了</span></span><br><span class="line"><span class="keyword">end</span> $$</span><br><span class="line">delimiter ;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 针对形参res 不能直接传数据 应该传一个变量名</span></span><br><span class="line"><span class="comment"># 定义变量</span></span><br><span class="line"><span class="keyword">set</span> @ret = <span class="number">10</span>;</span><br><span class="line"><span class="comment"># 查看变量对应的值</span></span><br><span class="line"><span class="keyword">select</span> @ret;</span><br></pre></td></tr></table></figure>

<p>在pymysql模块中如何调用存储过程呢？</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">import pymysql</span><br><span class="line"></span><br><span class="line">conn = pymysql.connect(</span><br><span class="line">    host = '127.0.0.1',</span><br><span class="line">    port = 3306,</span><br><span class="line">    user = 'root',</span><br><span class="line">    passwd = '123456',</span><br><span class="line">    db = 'day48',</span><br><span class="line">    charset = 'utf8',</span><br><span class="line">    autocommit = True</span><br><span class="line">)</span><br><span class="line">cursor = conn.cursor(pymysql.cursors.DictCursor)</span><br><span class="line"><span class="comment"># 调用存储过程</span></span><br><span class="line">cursor.callproc('p1',(1,5,10))</span><br><span class="line">"""</span><br><span class="line">@_p1_0=1</span><br><span class="line">@_p1_1=5</span><br><span class="line">@_p1_2=10</span><br><span class="line">"""</span><br><span class="line"><span class="comment"># print(cursor.fetchall())</span></span><br><span class="line">cursor.execute(<span class="string">'select @_p1_2;'</span>)</span><br><span class="line">print(cursor.fetchall())</span><br></pre></td></tr></table></figure>

<h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p>跟存储过程是有区别的，存储过程是自定义函数，函数就类似于是内置函数</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">('jason','0755','ls -l /etc',NOW(),'yes')</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> blog (</span><br><span class="line">    <span class="keyword">id</span> <span class="built_in">INT</span> PRIMARY <span class="keyword">KEY</span> auto_increment,</span><br><span class="line">    <span class="keyword">NAME</span> <span class="built_in">CHAR</span> (<span class="number">32</span>),</span><br><span class="line">    sub_time datetime</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> blog (<span class="keyword">NAME</span>, sub_time)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">    (<span class="string">'第1篇'</span>,<span class="string">'2015-03-01 11:31:21'</span>),</span><br><span class="line">    (<span class="string">'第2篇'</span>,<span class="string">'2015-03-11 16:31:21'</span>),</span><br><span class="line">    (<span class="string">'第3篇'</span>,<span class="string">'2016-07-01 10:21:31'</span>),</span><br><span class="line">    (<span class="string">'第4篇'</span>,<span class="string">'2016-07-22 09:23:21'</span>),</span><br><span class="line">    (<span class="string">'第5篇'</span>,<span class="string">'2016-07-23 10:11:11'</span>),</span><br><span class="line">    (<span class="string">'第6篇'</span>,<span class="string">'2016-07-25 11:21:31'</span>),</span><br><span class="line">    (<span class="string">'第7篇'</span>,<span class="string">'2017-03-01 15:33:21'</span>),</span><br><span class="line">    (<span class="string">'第8篇'</span>,<span class="string">'2017-03-01 17:32:21'</span>),</span><br><span class="line">    (<span class="string">'第9篇'</span>,<span class="string">'2017-03-01 18:31:21'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">date_format</span>(sub_time,<span class="string">'%Y-%m'</span>),<span class="keyword">count</span>(<span class="keyword">id</span>) <span class="keyword">from</span> blog <span class="keyword">group</span> <span class="keyword">by</span> <span class="keyword">date_format</span>(sub_time,<span class="string">'%Y-%m'</span>);</span><br></pre></td></tr></table></figure>

<h3 id="流程控制-了解"><a href="#流程控制-了解" class="headerlink" title="流程控制(了解)"></a>流程控制(了解)</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment"># if判断</span></span><br><span class="line">delimiter //</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> proc_if ()</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">declare</span> i <span class="built_in">int</span> <span class="keyword">default</span> <span class="number">0</span>;</span><br><span class="line">    if i = 1 THEN</span><br><span class="line">        <span class="keyword">SELECT</span> <span class="number">1</span>;</span><br><span class="line">    ELSEIF i = 2 THEN</span><br><span class="line">        <span class="keyword">SELECT</span> <span class="number">2</span>;</span><br><span class="line">    ELSE</span><br><span class="line">        <span class="keyword">SELECT</span> <span class="number">7</span>;</span><br><span class="line">    <span class="keyword">END</span> <span class="keyword">IF</span>;</span><br><span class="line"><span class="keyword">END</span> //</span><br><span class="line">delimiter ;</span><br><span class="line"><span class="comment"># while循环</span></span><br><span class="line">delimiter //</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> proc_while ()</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">DECLARE</span> <span class="keyword">num</span> <span class="built_in">INT</span> ;</span><br><span class="line">    <span class="keyword">SET</span> <span class="keyword">num</span> = <span class="number">0</span> ;</span><br><span class="line">    WHILE num &lt; 10 DO</span><br><span class="line">        <span class="keyword">SELECT</span></span><br><span class="line">            <span class="keyword">num</span> ;</span><br><span class="line">        <span class="keyword">SET</span> <span class="keyword">num</span> = <span class="keyword">num</span> + <span class="number">1</span> ;</span><br><span class="line">    <span class="keyword">END</span> <span class="keyword">WHILE</span> ;</span><br></pre></td></tr></table></figure>

<h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><p>ps:数据都是存在与硬盘上的，查询数据不可避免的需要进行IO操作</p>
<p>索引:就是一种数据结构，类似于书的目录。意味着以后在查询数据的应该先找目录再找数据，而不是一页一页的翻书，从而提升查询速度降低IO操作</p>
<p>索引在MySQL中也叫“键”,是存储引擎用于快速查找记录的一种数据结构</p>
<ul>
<li>primary key</li>
<li>unique key</li>
<li>index key</li>
</ul>
<p>注意foreign key不是用来加速查询用的，不在我们的而研究范围之内</p>
<p>上面的三种key，前面两种除了可以增加查询速度之外各自还具有约束条件，而最后一种index key没有任何的约束条件，只是用来帮助你快速查询数据</p>
<p><strong>本质</strong></p>
<p>通过不断的缩小想要的数据范围筛选出最终的结果，同时将随机事件(一页一页的翻)</p>
<p>变成顺序事件(先找目录、找数据)</p>
<p>也就是说有了索引机制，我们可以总是用一种固定的方式查找数据</p>
<p>一张表中可以有多个索引(多个目录)</p>
<p>索引虽然能够帮助你加快查询速度但是也有缺点</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;&quot;&quot;</span><br><span class="line">1 当表中有大量数据存在的前提下 创建索引速度会很慢</span><br><span class="line">2 在索引创建完毕之后 对表的查询性能会大幅度的提升 但是写的性能也会大幅度的降低</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">索引不要随意的创建！！！</span><br></pre></td></tr></table></figure>

<h3 id="b-树"><a href="#b-树" class="headerlink" title="b+树"></a>b+树</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;&quot;&quot;</span><br><span class="line">只有叶子节点存放的是真实的数据 其他节点存放的是虚拟数据 仅仅是用来指路的</span><br><span class="line">树的层级越高查询数据所需要经历的步骤就越多(树有几层查询数据就需要几步)</span><br><span class="line"></span><br><span class="line">一个磁盘块存储是有限制的</span><br><span class="line">为什么建议你将id字段作为索引</span><br><span class="line">	占得空间少 一个磁盘块能够存储的数据多</span><br><span class="line">	那么久降低了树的高度 从而减少查询次数</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>

<h3 id="聚集索引-primary-key"><a href="#聚集索引-primary-key" class="headerlink" title="聚集索引(primary key)"></a>聚集索引(primary key)</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;&quot;&quot;</span><br><span class="line">聚集索引指的就是主键 </span><br><span class="line">Innodb  只有两个文件  直接将主键存放在了idb表中 </span><br><span class="line">MyIsam  三个文件  单独将索引存在一个文件</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>

<h3 id="辅助索引-unique-index"><a href="#辅助索引-unique-index" class="headerlink" title="辅助索引(unique,index)"></a>辅助索引(unique,index)</h3><p>查询数据的时候不可能一直使用到主键，也有可能会用到name,password等其他字段</p>
<p>那么这个时候你是没有办法利用聚集索引。这个时候你就可以根据情况给其他字段设置辅助索引(也是一个b+树）</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">"""</span><br><span class="line">叶子节点存放的是数据对应的主键值</span><br><span class="line">	先按照辅助索引拿到数据的主键值</span><br><span class="line">	之后还是需要去主键的聚集索引里面查询数据</span><br><span class="line">"""</span><br></pre></td></tr></table></figure>

<h3 id="覆盖索引"><a href="#覆盖索引" class="headerlink" title="覆盖索引"></a>覆盖索引</h3><p>在辅助索引的叶子节点就已经拿到了需要的数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 给name设置辅助索引</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">name</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> <span class="keyword">name</span>=<span class="string">'jason'</span>;</span><br><span class="line"><span class="comment"># 非覆盖索引</span></span><br><span class="line"><span class="keyword">select</span> age <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> <span class="keyword">name</span>=<span class="string">'jason'</span>;</span><br></pre></td></tr></table></figure>

<h3 id="测试索引是否有效的代码"><a href="#测试索引是否有效的代码" class="headerlink" title="测试索引是否有效的代码"></a>测试索引是否有效的代码</h3><p>感兴趣就自己试一试 不感兴趣直接忽略</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">**准备**</span><br><span class="line"></span><br><span class="line">​```mysql</span><br><span class="line"><span class="comment">#1. 准备表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> s1(</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">int</span>,</span><br><span class="line"><span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">20</span>),</span><br><span class="line">gender <span class="built_in">char</span>(<span class="number">6</span>),</span><br><span class="line">email <span class="built_in">varchar</span>(<span class="number">50</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">#2. 创建存储过程，实现批量插入记录</span></span><br><span class="line">delimiter $$ <span class="comment">#声明存储过程的结束符号为$$</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> auto_insert1()</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">declare</span> i <span class="built_in">int</span> <span class="keyword">default</span> <span class="number">1</span>;</span><br><span class="line">    while(i&lt;3000000)do</span><br><span class="line">        <span class="keyword">insert</span> <span class="keyword">into</span> s1 <span class="keyword">values</span>(i,<span class="string">'jason'</span>,<span class="string">'male'</span>,<span class="keyword">concat</span>(<span class="string">'jason'</span>,i,<span class="string">'@oldboy'</span>));</span><br><span class="line">        <span class="keyword">set</span> i=i+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">end</span> <span class="keyword">while</span>;</span><br><span class="line"><span class="keyword">END</span>$$ <span class="comment">#$$结束</span></span><br><span class="line">delimiter ; <span class="comment">#重新声明分号为结束符号</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#3. 查看存储过程</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">procedure</span> auto_insert1\G </span><br><span class="line"></span><br><span class="line"><span class="comment">#4. 调用存储过程</span></span><br><span class="line"><span class="keyword">call</span> auto_insert1();</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 表没有任何索引的情况下</span><br><span class="line">select * from s1 where id&#x3D;30000;</span><br><span class="line"># 避免打印带来的时间损耗</span><br><span class="line">select count(id) from s1 where id &#x3D; 30000;</span><br><span class="line">select count(id) from s1 where id &#x3D; 1;</span><br><span class="line"></span><br><span class="line"># 给id做一个主键</span><br><span class="line">alter table s1 add primary key(id);  # 速度很慢</span><br><span class="line"></span><br><span class="line">select count(id) from s1 where id &#x3D; 1;  # 速度相较于未建索引之前两者差着数量级</span><br><span class="line">select count(id) from s1 where name &#x3D; &#39;jason&#39;  # 速度仍然很慢</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">范围问题</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"># 并不是加了索引，以后查询的时候按照这个字段速度就一定快   </span><br><span class="line">select count(id) from s1 where id &gt; 1;  # 速度相较于id &#x3D; 1慢了很多</span><br><span class="line">select count(id) from s1 where id &gt;1 and id &lt; 3;</span><br><span class="line">select count(id) from s1 where id &gt; 1 and id &lt; 10000;</span><br><span class="line">select count(id) from s1 where id !&#x3D; 3;</span><br><span class="line"></span><br><span class="line">alter table s1 drop primary key;  # 删除主键 单独再来研究name字段</span><br><span class="line">select count(id) from s1 where name &#x3D; &#39;jason&#39;;  # 又慢了</span><br><span class="line"></span><br><span class="line">create index idx_name on s1(name);  # 给s1表的name字段创建索引</span><br><span class="line">select count(id) from s1 where name &#x3D; &#39;jason&#39;  # 仍然很慢！！！</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">再来看b+树的原理，数据需要区分度比较高，而我们这张表全是jason，根本无法区分</span><br><span class="line">那这个树其实就建成了“一根棍子”</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">select count(id) from s1 where name &#x3D; &#39;xxx&#39;;  </span><br><span class="line"># 这个会很快，我就是一根棍，第一个不匹配直接不需要再往下走了</span><br><span class="line">select count(id) from s1 where name like &#39;xxx&#39;;</span><br><span class="line">select count(id) from s1 where name like &#39;xxx%&#39;;</span><br><span class="line">select count(id) from s1 where name like &#39;%xxx&#39;;  # 慢 最左匹配特性</span><br><span class="line"></span><br><span class="line"># 区分度低的字段不能建索引</span><br><span class="line">drop index idx_name on s1;</span><br><span class="line"></span><br><span class="line"># 给id字段建普通的索引</span><br><span class="line">create index idx_id on s1(id);</span><br><span class="line">select count(id) from s1 where id &#x3D; 3;  # 快了</span><br><span class="line">select count(id) from s1 where id*12 &#x3D; 3;  # 慢了  索引的字段一定不要参与计算</span><br><span class="line"></span><br><span class="line">drop index idx_id on s1;</span><br><span class="line">select count(id) from s1 where name&#x3D;&#39;jason&#39; and gender &#x3D; &#39;male&#39; and id &#x3D; 3 and email &#x3D; &#39;xxx&#39;;</span><br><span class="line"># 针对上面这种连续多个and的操作，mysql会从左到右先找区分度比较高的索引字段，先将整体范围降下来再去比较其他条件</span><br><span class="line">create index idx_name on s1(name);</span><br><span class="line">select count(id) from s1 where name&#x3D;&#39;jason&#39; and gender &#x3D; &#39;male&#39; and id &#x3D; 3 and email &#x3D; &#39;xxx&#39;;  # 并没有加速</span><br><span class="line"></span><br><span class="line">drop index idx_name on s1;</span><br><span class="line"># 给name，gender这种区分度不高的字段加上索引并不难加快查询速度</span><br><span class="line"></span><br><span class="line">create index idx_id on s1(id);</span><br><span class="line">select count(id) from s1 where name&#x3D;&#39;jason&#39; and gender &#x3D; &#39;male&#39; and id &#x3D; 3 and email &#x3D; &#39;xxx&#39;;  # 快了  先通过id已经讲数据快速锁定成了一条了</span><br><span class="line">select count(id) from s1 where name&#x3D;&#39;jason&#39; and gender &#x3D; &#39;male&#39; and id &gt; 3 and email &#x3D; &#39;xxx&#39;;  # 慢了  基于id查出来的数据仍然很多，然后还要去比较其他字段</span><br><span class="line"></span><br><span class="line">drop index idx_id on s1</span><br><span class="line"></span><br><span class="line">create index idx_email on s1(email);</span><br><span class="line">select count(id) from s1 where name&#x3D;&#39;jason&#39; and gender &#x3D; &#39;male&#39; and id &gt; 3 and email &#x3D; &#39;xxx&#39;;  # 快 通过email字段一剑封喉</span><br></pre></td></tr></table></figure>

<h4 id="联合索引"><a href="#联合索引" class="headerlink" title="联合索引"></a>联合索引</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select count(id) from s1 where name&#x3D;&#39;jason&#39; and gender &#x3D; &#39;male&#39; and id &gt; 3 and email &#x3D; &#39;xxx&#39;;  </span><br><span class="line"># 如果上述四个字段区分度都很高，那给谁建都能加速查询</span><br><span class="line"># 给email加然而不用email字段</span><br><span class="line">select count(id) from s1 where name&#x3D;&#39;jason&#39; and gender &#x3D; &#39;male&#39; and id &gt; 3; </span><br><span class="line"># 给name加然而不用name字段</span><br><span class="line">select count(id) from s1 where gender &#x3D; &#39;male&#39; and id &gt; 3; </span><br><span class="line"># 给gender加然而不用gender字段</span><br><span class="line">select count(id) from s1 where id &gt; 3; </span><br><span class="line"></span><br><span class="line"># 带来的问题是所有的字段都建了索引然而都没有用到，还需要花费四次建立的时间</span><br><span class="line">create index idx_all on s1(email,name,gender,id);  # 最左匹配原则，区分度高的往左放</span><br><span class="line">select count(id) from s1 where name&#x3D;&#39;jason&#39; and gender &#x3D; &#39;male&#39; and id &gt; 3 and email &#x3D; &#39;xxx&#39;;  # 速度变快</span><br></pre></td></tr></table></figure>

<p>总结:上面这些操作，你感兴趣可以敲一敲，不感兴趣你就可以不用敲了，权当看个乐呵。理论掌握了就行了</p>
<p>慢查询日志</p>
<p>设定一个时间检测所有超出该时间的sql语句，然后针对性的进行优化！</p>
</li>
</ul>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>[Navicat安装与pymysql模块]</title>
    <url>/2020/03/12/Navicat%E5%AE%89%E8%A3%85%E4%B8%8Epymysql%E6%A8%A1%E5%9D%97/</url>
    <content><![CDATA[<h2 id="Navicat软件"><a href="#Navicat软件" class="headerlink" title="Navicat软件"></a>Navicat软件</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;&quot;&quot;</span><br><span class="line">一开始学习python的时候 下载python解释器然后直接在终端书写</span><br><span class="line">pycharm能够更加方便快捷的帮助你书写python代码</span><br><span class="line">excel word pdf</span><br><span class="line"></span><br><span class="line">我们在终端操作MySQL 也没有自动提示也无法保存等等 不方便开发</span><br><span class="line">Navicat内部封装了所有的操作数据库的命令 </span><br><span class="line">用户在使用它的时候只需要鼠标点点即可完成操作 无需书写sql语句</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>

<p><strong>安装</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">直接百度搜索 有破解版的也有非破解</span><br><span class="line">非破解的有试用期 你如果不嫌麻烦 你就用使用</span><br><span class="line">到期之后重新装再使用 或者破解一下也很简单</span><br><span class="line">https:&#x2F;&#x2F;www.cr173.com&#x2F;soft&#x2F;126934.html</span><br><span class="line">    </span><br><span class="line">下载完成后是一个压缩包 直接解压 然后点击安装 有提醒直接点击next即可</span><br><span class="line"></span><br><span class="line">navicat能够充当多个数据库的客户端</span><br><span class="line"></span><br><span class="line">navicat图形化界面有时候反应速度较慢 你可以选择刷新或者关闭当前窗口再次打开即可</span><br><span class="line"></span><br><span class="line">当你有一些需求该软件无法满足的时候 你就自己动手写sql</span><br></pre></td></tr></table></figure>

<h3 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">"""</span><br><span class="line">1 MySQL是不区分大小写的</span><br><span class="line">	验证码忽略大小写</span><br><span class="line">		内部统一转大写或者小写比较即可</span><br><span class="line">			upper</span><br><span class="line">			lower</span><br><span class="line"></span><br><span class="line">2 MySQL建议所有的关键字写大写</span><br><span class="line"></span><br><span class="line">3 MySQL中的注释 有两种</span><br><span class="line">	<span class="comment">--</span></span><br><span class="line">	<span class="comment">#</span></span><br><span class="line"></span><br><span class="line">4 在navicat中如何快速的注释和解注释</span><br><span class="line">	ctrl + ？  加注释</span><br><span class="line">	ctrl + ？  基于上述操作再来一次就是解开注释</span><br><span class="line">	如果你的navicat版本不一致还有可能是</span><br><span class="line">	ctrl + shift + ？解开注释</span><br><span class="line">"""</span><br></pre></td></tr></table></figure>

<h3 id="练习题"><a href="#练习题" class="headerlink" title="练习题"></a>练习题</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">"""</span><br><span class="line">课下一定要把握上课将的这几道题全部自己独立的理解并写出来</span><br><span class="line"></span><br><span class="line">在解决sql查询问题的时候 不要慌</span><br><span class="line">一步一步慢慢来  最终能够东拼西凑出来就过关了！！！</span><br><span class="line"></span><br><span class="line">"""</span><br><span class="line"><span class="comment">-- 1、查询所有的课程的名称以及对应的任课老师姓名</span></span><br><span class="line"><span class="comment">-- SELECT</span></span><br><span class="line"><span class="comment">-- 	course.cname,</span></span><br><span class="line"><span class="comment">-- 	teacher.tname </span></span><br><span class="line"><span class="comment">-- FROM</span></span><br><span class="line"><span class="comment">-- 	course</span></span><br><span class="line"><span class="comment">-- 	INNER JOIN teacher ON course.teacher_id = teacher.tid;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 4、查询平均成绩大于八十分的同学的姓名和平均成绩</span></span><br><span class="line"><span class="comment">-- SELECT</span></span><br><span class="line"><span class="comment">-- 	student.sname,</span></span><br><span class="line"><span class="comment">-- 	t1.avg_num </span></span><br><span class="line"><span class="comment">-- FROM</span></span><br><span class="line"><span class="comment">-- 	student</span></span><br><span class="line"><span class="comment">-- 	INNER JOIN (</span></span><br><span class="line"><span class="comment">-- 	SELECT</span></span><br><span class="line"><span class="comment">-- 		score.student_id,</span></span><br><span class="line"><span class="comment">-- 		avg( num ) AS avg_num </span></span><br><span class="line"><span class="comment">-- 	FROM</span></span><br><span class="line"><span class="comment">-- 		score</span></span><br><span class="line"><span class="comment">-- 		INNER JOIN student ON score.student_id = student.sid </span></span><br><span class="line"><span class="comment">-- 	GROUP BY</span></span><br><span class="line"><span class="comment">-- 		score.student_id </span></span><br><span class="line"><span class="comment">-- 	HAVING</span></span><br><span class="line"><span class="comment">-- 		AVG( num ) &gt; 80 </span></span><br><span class="line"><span class="comment">-- 	) AS t1 ON student.sid = t1.student_id;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 7、 查询没有报李平老师课的学生姓名</span></span><br><span class="line"><span class="comment"># 分步操作</span></span><br><span class="line"><span class="comment"># 1 先找到李平老师教授的课程id</span></span><br><span class="line"><span class="comment"># 2 再找所有报了李平老师课程的学生id</span></span><br><span class="line"><span class="comment"># 3 之后去学生表里面取反 就可以获取到没有报李平老师课程的学生姓名</span></span><br><span class="line"><span class="comment">-- SELECT</span></span><br><span class="line"><span class="comment">-- 	student.sname </span></span><br><span class="line"><span class="comment">-- FROM</span></span><br><span class="line"><span class="comment">-- 	student </span></span><br><span class="line"><span class="comment">-- WHERE</span></span><br><span class="line"><span class="comment">-- 	sid NOT IN (</span></span><br><span class="line"><span class="comment">-- 	SELECT DISTINCT</span></span><br><span class="line"><span class="comment">-- 		score.student_id </span></span><br><span class="line"><span class="comment">-- 	FROM</span></span><br><span class="line"><span class="comment">-- 		score </span></span><br><span class="line"><span class="comment">-- 	WHERE</span></span><br><span class="line"><span class="comment">-- 		score.course_id IN ( SELECT course.cid FROM teacher INNER JOIN course ON teacher.tid = course.teacher_id WHERE teacher.tname = '李平老师' ) </span></span><br><span class="line"><span class="comment">-- 	);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 8、 查询没有同时选修物理课程和体育课程的学生姓名</span></span><br><span class="line"><span class="comment">--     (只要选了一门的 选了两门和没有选的都不要)</span></span><br><span class="line"><span class="comment"># 1 先查物理和体育课程的id</span></span><br><span class="line"><span class="comment"># 2 再去获取所有选了物理和体育的学生数据</span></span><br><span class="line"><span class="comment"># 3 按照学生分组 利用聚合函数count筛选出只选了一门的学生id</span></span><br><span class="line"><span class="comment"># 4 依旧id获取学生姓名</span></span><br><span class="line"><span class="comment">-- SELECT</span></span><br><span class="line"><span class="comment">-- 	student.sname </span></span><br><span class="line"><span class="comment">-- FROM</span></span><br><span class="line"><span class="comment">-- 	student </span></span><br><span class="line"><span class="comment">-- WHERE</span></span><br><span class="line"><span class="comment">-- 	student.sid IN (</span></span><br><span class="line"><span class="comment">-- 	SELECT</span></span><br><span class="line"><span class="comment">-- 		score.student_id </span></span><br><span class="line"><span class="comment">-- 	FROM</span></span><br><span class="line"><span class="comment">-- 		score </span></span><br><span class="line"><span class="comment">-- 	WHERE</span></span><br><span class="line"><span class="comment">-- 		score.course_id IN ( SELECT course.cid FROM course WHERE course.cname IN ( '物理', '体育' ) ) </span></span><br><span class="line"><span class="comment">-- 	GROUP BY</span></span><br><span class="line"><span class="comment">-- 		score.student_id </span></span><br><span class="line"><span class="comment">-- 	HAVING</span></span><br><span class="line"><span class="comment">-- 		COUNT( score.course_id ) = 1 </span></span><br><span class="line"><span class="comment">-- 	);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 9、 查询挂科超过两门(包括两门)的学生姓名和班级</span></span><br><span class="line"><span class="comment"># 1 先筛选出所有分数小于60的数据</span></span><br><span class="line"><span class="comment"># 2 按照学生分组 对数据进行计数获取大于等于2的数据</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">	class.caption,</span><br><span class="line">	student.sname </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">	<span class="keyword">class</span></span><br><span class="line">	<span class="keyword">INNER</span> <span class="keyword">JOIN</span> student <span class="keyword">ON</span> class.cid = student.class_id </span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">	student.sid <span class="keyword">IN</span> (</span><br><span class="line">	<span class="keyword">SELECT</span></span><br><span class="line">		score.student_id </span><br><span class="line">	<span class="keyword">FROM</span></span><br><span class="line">		score </span><br><span class="line">	<span class="keyword">WHERE</span></span><br><span class="line">		score.num &lt; <span class="number">60</span> <span class="keyword">GROUP</span> <span class="keyword">BY</span> score.student_id <span class="keyword">HAVING</span> <span class="keyword">COUNT</span>( score.course_id ) &gt;= <span class="number">2</span> </span><br><span class="line">	);</span><br></pre></td></tr></table></figure>

<h2 id="pymysql模块"><a href="#pymysql模块" class="headerlink" title="pymysql模块"></a>pymysql模块</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">支持python代码操作数据库MySQL</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">pip3 install pymysql</span><br></pre></td></tr></table></figure>

<h3 id="sql注入"><a href="#sql注入" class="headerlink" title="sql注入"></a>sql注入</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">利用一些语法的特性 书写一些特点的语句实现固定的语法</span></span><br><span class="line"><span class="string">MySQL利用的是MySQL的注释语法</span></span><br><span class="line"><span class="string">select * from user where name='jason' -- jhsadklsajdkla' and password=''</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">select * from user where name='xxx' or 1=1 -- sakjdkljakldjasl' and password=''</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">日常生活中很多软件在注册的时候都不能含有特殊符号</span><br><span class="line">因为怕你构造出特定的语句入侵数据库 不安全</span><br><span class="line"></span><br><span class="line"><span class="comment"># 敏感的数据不要自己做拼接 交给execute帮你拼接即可</span></span><br><span class="line"><span class="comment"># 结合数据库完成一个用户的登录功能？</span></span><br><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line">conn = pymysql.connect(</span><br><span class="line">    host = <span class="string">'127.0.0.1'</span>,</span><br><span class="line">    port = <span class="number">3306</span>,</span><br><span class="line">    user = <span class="string">'root'</span>,</span><br><span class="line">    password = <span class="string">'123456'</span>,</span><br><span class="line">    database = <span class="string">'day48'</span>,</span><br><span class="line">    charset = <span class="string">'utf8'</span>  <span class="comment"># 编码千万不要加-</span></span><br><span class="line">)  <span class="comment"># 链接数据库</span></span><br><span class="line">cursor = conn.cursor(cursor=pymysql.cursors.DictCursor)</span><br><span class="line"></span><br><span class="line">username = input(<span class="string">'&gt;&gt;&gt;:'</span>)</span><br><span class="line">password = input(<span class="string">'&gt;&gt;&gt;:'</span>)</span><br><span class="line">sql = <span class="string">"select * from user where name=%s and password=%s"</span></span><br><span class="line"><span class="comment"># 不要手动拼接数据 先用%s占位 之后将需要拼接的数据直接交给execute方法即可</span></span><br><span class="line">print(sql)</span><br><span class="line">rows = cursor.execute(sql,(username,password))  <span class="comment"># 自动识别sql里面的%s用后面元组里面的数据替换</span></span><br><span class="line"><span class="keyword">if</span> rows:</span><br><span class="line">    print(<span class="string">'登录成功'</span>)</span><br><span class="line">    print(cursor.fetchall())</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'用户名密码错误'</span>)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>[聚合函数]</title>
    <url>/2020/03/11/%E8%81%9A%E5%90%88%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h3 id="前期表准备"><a href="#前期表准备" class="headerlink" title="前期表准备"></a>前期表准备</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> emp(</span><br><span class="line">  <span class="keyword">id</span> <span class="built_in">int</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">unique</span> auto_increment,</span><br><span class="line">  <span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">  sex enum(<span class="string">'male'</span>,<span class="string">'female'</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="string">'male'</span>, <span class="comment">#大部分是男的</span></span><br><span class="line">  age <span class="built_in">int</span>(<span class="number">3</span>) <span class="keyword">unsigned</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="number">28</span>,</span><br><span class="line">  hire_date <span class="built_in">date</span> <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">  post <span class="built_in">varchar</span>(<span class="number">50</span>),</span><br><span class="line">  post_comment <span class="built_in">varchar</span>(<span class="number">100</span>),</span><br><span class="line">  salary <span class="keyword">double</span>(<span class="number">15</span>,<span class="number">2</span>),</span><br><span class="line">  office <span class="built_in">int</span>, <span class="comment">#一个部门一个屋子</span></span><br><span class="line">  depart_id <span class="built_in">int</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">#插入记录</span></span><br><span class="line"><span class="comment">#三个部门：教学，销售，运营</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> emp(<span class="keyword">name</span>,sex,age,hire_date,post,salary,office,depart_id) <span class="keyword">values</span></span><br><span class="line">(<span class="string">'jason'</span>,<span class="string">'male'</span>,<span class="number">18</span>,<span class="string">'20170301'</span>,<span class="string">'张江第一帅形象代言'</span>,<span class="number">7300.33</span>,<span class="number">401</span>,<span class="number">1</span>), <span class="comment">#以下是教学部</span></span><br><span class="line">(<span class="string">'tom'</span>,<span class="string">'male'</span>,<span class="number">78</span>,<span class="string">'20150302'</span>,<span class="string">'teacher'</span>,<span class="number">1000000.31</span>,<span class="number">401</span>,<span class="number">1</span>),</span><br><span class="line">(<span class="string">'kevin'</span>,<span class="string">'male'</span>,<span class="number">81</span>,<span class="string">'20130305'</span>,<span class="string">'teacher'</span>,<span class="number">8300</span>,<span class="number">401</span>,<span class="number">1</span>),</span><br><span class="line">(<span class="string">'tony'</span>,<span class="string">'male'</span>,<span class="number">73</span>,<span class="string">'20140701'</span>,<span class="string">'teacher'</span>,<span class="number">3500</span>,<span class="number">401</span>,<span class="number">1</span>),</span><br><span class="line">(<span class="string">'owen'</span>,<span class="string">'male'</span>,<span class="number">28</span>,<span class="string">'20121101'</span>,<span class="string">'teacher'</span>,<span class="number">2100</span>,<span class="number">401</span>,<span class="number">1</span>),</span><br><span class="line">(<span class="string">'jack'</span>,<span class="string">'female'</span>,<span class="number">18</span>,<span class="string">'20110211'</span>,<span class="string">'teacher'</span>,<span class="number">9000</span>,<span class="number">401</span>,<span class="number">1</span>),</span><br><span class="line">(<span class="string">'jenny'</span>,<span class="string">'male'</span>,<span class="number">18</span>,<span class="string">'19000301'</span>,<span class="string">'teacher'</span>,<span class="number">30000</span>,<span class="number">401</span>,<span class="number">1</span>),</span><br><span class="line">(<span class="string">'sank'</span>,<span class="string">'male'</span>,<span class="number">48</span>,<span class="string">'20101111'</span>,<span class="string">'teacher'</span>,<span class="number">10000</span>,<span class="number">401</span>,<span class="number">1</span>),</span><br><span class="line">(<span class="string">'哈哈'</span>,<span class="string">'female'</span>,<span class="number">48</span>,<span class="string">'20150311'</span>,<span class="string">'sale'</span>,<span class="number">3000.13</span>,<span class="number">402</span>,<span class="number">2</span>),<span class="comment">#以下是销售部门</span></span><br><span class="line">(<span class="string">'呵呵'</span>,<span class="string">'female'</span>,<span class="number">38</span>,<span class="string">'20101101'</span>,<span class="string">'sale'</span>,<span class="number">2000.35</span>,<span class="number">402</span>,<span class="number">2</span>),</span><br><span class="line">(<span class="string">'西西'</span>,<span class="string">'female'</span>,<span class="number">18</span>,<span class="string">'20110312'</span>,<span class="string">'sale'</span>,<span class="number">1000.37</span>,<span class="number">402</span>,<span class="number">2</span>),</span><br><span class="line">(<span class="string">'乐乐'</span>,<span class="string">'female'</span>,<span class="number">18</span>,<span class="string">'20160513'</span>,<span class="string">'sale'</span>,<span class="number">3000.29</span>,<span class="number">402</span>,<span class="number">2</span>),</span><br><span class="line">(<span class="string">'拉拉'</span>,<span class="string">'female'</span>,<span class="number">28</span>,<span class="string">'20170127'</span>,<span class="string">'sale'</span>,<span class="number">4000.33</span>,<span class="number">402</span>,<span class="number">2</span>),</span><br><span class="line">(<span class="string">'僧龙'</span>,<span class="string">'male'</span>,<span class="number">28</span>,<span class="string">'20160311'</span>,<span class="string">'operation'</span>,<span class="number">10000.13</span>,<span class="number">403</span>,<span class="number">3</span>), <span class="comment">#以下是运营部门</span></span><br><span class="line">(<span class="string">'程咬金'</span>,<span class="string">'male'</span>,<span class="number">18</span>,<span class="string">'19970312'</span>,<span class="string">'operation'</span>,<span class="number">20000</span>,<span class="number">403</span>,<span class="number">3</span>),</span><br><span class="line">(<span class="string">'程咬银'</span>,<span class="string">'female'</span>,<span class="number">18</span>,<span class="string">'20130311'</span>,<span class="string">'operation'</span>,<span class="number">19000</span>,<span class="number">403</span>,<span class="number">3</span>),</span><br><span class="line">(<span class="string">'程咬铜'</span>,<span class="string">'male'</span>,<span class="number">18</span>,<span class="string">'20150411'</span>,<span class="string">'operation'</span>,<span class="number">18000</span>,<span class="number">403</span>,<span class="number">3</span>),</span><br><span class="line">(<span class="string">'程咬铁'</span>,<span class="string">'female'</span>,<span class="number">18</span>,<span class="string">'20140512'</span>,<span class="string">'operation'</span>,<span class="number">17000</span>,<span class="number">403</span>,<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment"># 当表字段特别多 展示的时候错乱 可以使用\G分行展示</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp\G;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 个别的电脑在插入中文的时候还是会出现乱码或者空白的现象 你可以将字符编码统一设置成GBK</span></span><br></pre></td></tr></table></figure>

<h3 id="几个重要关键字的执行顺序"><a href="#几个重要关键字的执行顺序" class="headerlink" title="几个重要关键字的执行顺序"></a>几个重要关键字的执行顺序</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 书写顺序</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">id</span>,<span class="keyword">name</span> <span class="keyword">from</span> emp <span class="keyword">where</span> <span class="keyword">id</span> &gt; <span class="number">3</span>;</span><br><span class="line"><span class="comment"># 执行顺序</span></span><br><span class="line">from</span><br><span class="line">where</span><br><span class="line"><span class="keyword">select</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">虽然执行顺序和书写顺序不一致 你在写sql语句的时候可能不知道怎么写</span></span><br><span class="line"><span class="string">你就按照书写顺序的方式写sql</span></span><br><span class="line"><span class="string">	select * 先用*号占位</span></span><br><span class="line"><span class="string">	之后去补全后面的sql语句</span></span><br><span class="line"><span class="string">	最后将*号替换后你想要的具体字段</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<h3 id="where筛选条件"><a href="#where筛选条件" class="headerlink" title="where筛选条件"></a>where筛选条件</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 作用:是对整体数据的一个筛选操作</span></span><br><span class="line"><span class="comment"># 1.查询id大于等于3小于等于6的数据</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">id</span>,<span class="keyword">name</span>,age <span class="keyword">from</span> emp <span class="keyword">where</span> <span class="keyword">id</span>&gt;=<span class="number">3</span> <span class="keyword">and</span> <span class="keyword">id</span>&lt;=<span class="number">6</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">id</span>,<span class="keyword">name</span> <span class="keyword">from</span> emp <span class="keyword">where</span> <span class="keyword">id</span> <span class="keyword">between</span> <span class="number">3</span> <span class="keyword">and</span> <span class="number">6</span>;  两者等价</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.查询薪资是20000或者18000或者17000的数据</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> salary=<span class="number">20000</span> <span class="keyword">or</span> salary=<span class="number">18000</span> <span class="keyword">or</span> salary=<span class="number">17000</span>;</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> salary <span class="keyword">in</span> (<span class="number">20000</span>,<span class="number">18000</span>,<span class="number">17000</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.查询员工姓名中包含字母o的员工的姓名和薪资</span></span><br><span class="line">"""</span><br><span class="line">模糊查询</span><br><span class="line">	like</span><br><span class="line">		%  匹配任意多个字符</span><br><span class="line">		_  匹配任意单个字符</span><br><span class="line">"""</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">name</span>,salary <span class="keyword">from</span> emp <span class="keyword">where</span> <span class="keyword">name</span> <span class="keyword">like</span> <span class="string">'%o%'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.查询员工姓名是由四个字符组成的 姓名和薪资  char_length()   _</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">name</span>,salary <span class="keyword">from</span> emp <span class="keyword">where</span> <span class="keyword">name</span> <span class="keyword">like</span> <span class="string">'____'</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">name</span>,salary <span class="keyword">from</span> emp <span class="keyword">where</span> <span class="keyword">char_length</span>(<span class="keyword">name</span>) = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5.查询id小于3或者id大于6的数据</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> <span class="keyword">id</span> <span class="keyword">not</span> <span class="keyword">between</span> <span class="number">3</span> <span class="keyword">and</span> <span class="number">6</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 6.查询薪资不在20000,18000,17000范围的数据</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> salary <span class="keyword">not</span> <span class="keyword">in</span> (<span class="number">20000</span>,<span class="number">18000</span>,<span class="number">17000</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment"># 7.查询岗位描述为空的员工姓名和岗位名  针对null不用等号 用is</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">name</span>,post <span class="keyword">from</span> emp <span class="keyword">where</span> post_comment = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">name</span>,post <span class="keyword">from</span> emp <span class="keyword">where</span> post_comment <span class="keyword">is</span> <span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure>

<h3 id="group-by分组"><a href="#group-by分组" class="headerlink" title="group by分组"></a>group by分组</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 分组实际应用场景  分组应用场景非常的多</span></span><br><span class="line">	男女比例</span><br><span class="line">    部门平均薪资</span><br><span class="line">    部门秃头率</span><br><span class="line">    国家之间数据统计</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1	按照部门分组</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> post;</span><br><span class="line">"""</span><br><span class="line">分组之后 最小可操作单位应该是组 还不再是组内的单个数据</span><br><span class="line">	上述命令在你没有设置严格模式的时候是可正常执行的 返回的是分组之后 每个组的第一条数据 </span><br><span class="line">	但是这不符合分组的规范:分组之后不应该考虑单个数据 而应该以组为操作单位(分组之后 没办法直接获取组内单个数据)</span><br><span class="line">	如果设置了严格模式 那么上述命令会直接报错 </span><br><span class="line">"""</span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> sql_mode = <span class="string">'strict_trans_tables,only_full_group_by'</span>;</span><br><span class="line"></span><br><span class="line">设置严格模式之后  分组 默认只能拿到分组的依据</span><br><span class="line"><span class="keyword">select</span> post <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> post;  </span><br><span class="line">按照什么分组就只能拿到分组 其他字段不能直接获取 需要借助于一些方法(聚合函数)</span><br><span class="line"></span><br><span class="line">"""</span><br><span class="line">什么时候需要分组啊？？？</span><br><span class="line">	关键字 </span><br><span class="line">		每个 平均 最高 最低 </span><br><span class="line">	</span><br><span class="line">	聚合函数</span><br><span class="line">		max</span><br><span class="line">		min</span><br><span class="line">		sum</span><br><span class="line">		count</span><br><span class="line">		avg</span><br><span class="line">"""</span><br><span class="line"><span class="comment"># 1.获取每个部门的最高薪资</span></span><br><span class="line"><span class="keyword">select</span> post,<span class="keyword">max</span>(salary) <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> post;</span><br><span class="line"><span class="keyword">select</span> post <span class="keyword">as</span> <span class="string">'部门'</span>,<span class="keyword">max</span>(salary) <span class="keyword">as</span> <span class="string">'最高薪资'</span> <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> post;</span><br><span class="line"><span class="keyword">select</span> post <span class="string">'部门'</span>,<span class="keyword">max</span>(salary) <span class="string">'最高薪资'</span> <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> post;</span><br><span class="line"><span class="comment"># as可以给字段起别名 也可以直接省略不写 但是不推荐 因为省略的话语意不明确 容易错乱</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.获取每个部门的最低薪资</span></span><br><span class="line"><span class="keyword">select</span> post,<span class="keyword">min</span>(salary) <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> post;</span><br><span class="line"><span class="comment"># 3.获取每个部门的平均薪资</span></span><br><span class="line"><span class="keyword">select</span> post,<span class="keyword">avg</span>(salary) <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> post;</span><br><span class="line"><span class="comment"># 4.获取每个部门的工资总和</span></span><br><span class="line"><span class="keyword">select</span> post,<span class="keyword">sum</span>(salary) <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> post;</span><br><span class="line"><span class="comment"># 5.获取每个部门的人数</span></span><br><span class="line"><span class="keyword">select</span> post,<span class="keyword">count</span>(<span class="keyword">id</span>) <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> post;  <span class="comment"># 常用 符合逻辑</span></span><br><span class="line"><span class="keyword">select</span> post,<span class="keyword">count</span>(salary) <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> post;</span><br><span class="line"><span class="keyword">select</span> post,<span class="keyword">count</span>(age) <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> post;</span><br><span class="line"><span class="keyword">select</span> post,<span class="keyword">count</span>(post_comment) <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> post;  null不行</span><br><span class="line"></span><br><span class="line"><span class="comment"># 6.查询分组之后的部门名称和每个部门下所有的员工姓名 </span></span><br><span class="line"><span class="comment"># group_concat不单单可以支持你获取分组之后的其他字段值 还支持拼接操作</span></span><br><span class="line"><span class="keyword">select</span> post,<span class="keyword">group_concat</span>(<span class="keyword">name</span>) <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> post;</span><br><span class="line"><span class="keyword">select</span> post,<span class="keyword">group_concat</span>(<span class="keyword">name</span>,<span class="string">'_DSB'</span>) <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> post;</span><br><span class="line"><span class="keyword">select</span> post,<span class="keyword">group_concat</span>(<span class="keyword">name</span>,<span class="string">':'</span>,salary) <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> post;</span><br><span class="line"><span class="comment"># concat不分组的时候用 </span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">concat</span>(<span class="string">'NAME:'</span>,<span class="keyword">name</span>),<span class="keyword">concat</span>(<span class="string">'SAL:'</span>,salary) <span class="keyword">from</span> emp;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 补充 as语法不单单可以给字段起别名 还可以给表临时起别名</span></span><br><span class="line"><span class="keyword">select</span> emp.id,emp.name <span class="keyword">from</span> emp;  </span><br><span class="line"><span class="keyword">select</span> emp.id,emp.name <span class="keyword">from</span> emp <span class="keyword">as</span> t1;   报错</span><br><span class="line"><span class="keyword">select</span> t1.id,t1.name <span class="keyword">from</span> emp <span class="keyword">as</span> t1;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询每个人的年薪  12薪</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">name</span>,salary*<span class="number">12</span> <span class="keyword">from</span> emp;</span><br></pre></td></tr></table></figure>

<h3 id="分组注意事项"><a href="#分组注意事项" class="headerlink" title="分组注意事项"></a>分组注意事项</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 关键字where和group by同时出现的时候group by必须在where的后面</span></span><br><span class="line">where先对整体数据进行过滤之后再分组操作</span><br><span class="line">where筛选条件不能使用聚合函数</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">id</span>,<span class="keyword">name</span>,age <span class="keyword">from</span> emp <span class="keyword">where</span> <span class="keyword">max</span>(salary) &gt; <span class="number">3000</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">max</span>(salary) <span class="keyword">from</span> emp;  <span class="comment"># 不分组 默认整体就是一组</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 统计各部门年龄在30岁以上的员工平均薪资</span></span><br><span class="line">	1 先求所有年龄大于30岁的员工</span><br><span class="line">    	<span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> age&gt;<span class="number">30</span>;</span><br><span class="line">    2 再对结果进行分组</span><br><span class="line">     	<span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> age&gt;<span class="number">30</span> <span class="keyword">group</span> <span class="keyword">by</span> post;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">select</span> post,<span class="keyword">avg</span>(salary) <span class="keyword">from</span> emp <span class="keyword">where</span> age&gt;<span class="number">30</span> <span class="keyword">group</span> <span class="keyword">by</span> post;</span><br></pre></td></tr></table></figure>

<h3 id="having分组之后的筛选条件"><a href="#having分组之后的筛选条件" class="headerlink" title="having分组之后的筛选条件"></a>having分组之后的筛选条件</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">"""</span><br><span class="line">having的语法根where是一致的</span><br><span class="line">只不过having是在分组之后进行的过滤操作</span><br><span class="line">即having是可以直接使用聚合函数的</span><br><span class="line">"""</span><br><span class="line"><span class="comment"># 统计各部门年龄在30岁以上的员工平均工资并且保留平均薪资大于10000的部门</span></span><br><span class="line"><span class="keyword">select</span> post,<span class="keyword">avg</span>(salary) <span class="keyword">from</span> emp </span><br><span class="line">		<span class="keyword">where</span> age&gt;<span class="number">30</span> </span><br><span class="line">    	<span class="keyword">group</span> <span class="keyword">by</span> post</span><br><span class="line">        <span class="keyword">having</span> <span class="keyword">avg</span>(salary) &gt; <span class="number">10000</span></span><br><span class="line">        ;</span><br></pre></td></tr></table></figure>

<h3 id="distinct去重"><a href="#distinct去重" class="headerlink" title="distinct去重"></a>distinct去重</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">"""</span><br><span class="line">一定要注意 必须是完全一样的数据才可以去重！！！</span><br><span class="line">一定不要将逐渐忽视了 有逐渐存在的情况下 是不可能去重的</span><br><span class="line">[</span><br><span class="line">&#123;'id':1,'name':'jason','age':18&#125;,</span><br><span class="line">&#123;'id':2,'name':'jason','age':18&#125;,</span><br><span class="line">&#123;'id':3,'name':'egon','age':18&#125;</span><br><span class="line">]</span><br><span class="line">ORM  对象关系映射   让不懂SQL语句的人也能够非常牛逼的操作数据库</span><br><span class="line">表								类</span><br><span class="line">一条条的数据						对象</span><br><span class="line">字段对应的值						对象的属性</span><br><span class="line"></span><br><span class="line">你再写类 就意味着在创建表</span><br><span class="line">用类生成对象 就意味着再创建数据</span><br><span class="line">对象点属性 就是在获取数据字段对应的值</span><br><span class="line">目的就是减轻python程序员的压力 只需要会python面向对象的知识点就可以操作MySQL</span><br><span class="line">"""</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> <span class="keyword">id</span>,age <span class="keyword">from</span> emp;</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> age <span class="keyword">from</span> emp;</span><br></pre></td></tr></table></figure>

<h3 id="order-by排序"><a href="#order-by排序" class="headerlink" title="order by排序"></a>order by排序</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">order</span> <span class="keyword">by</span> salary;</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">order</span> <span class="keyword">by</span> salary <span class="keyword">asc</span>;</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">order</span> <span class="keyword">by</span> salary <span class="keyword">desc</span>;</span><br><span class="line">"""</span><br><span class="line">order by默认是升序  asc 该asc可以省略不写</span><br><span class="line">也可以修改为降序     desc</span><br><span class="line">"""</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">order</span> <span class="keyword">by</span> age <span class="keyword">desc</span>,salary <span class="keyword">asc</span>;</span><br><span class="line"><span class="comment"># 先按照age降序排  如果碰到age相同 则再按照salary升序排</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 统计各部门年龄在10岁以上的员工平均工资并且保留平均薪资大于1000的部门,然后对平均工资降序排序</span></span><br><span class="line">	<span class="keyword">select</span> post,<span class="keyword">avg</span>(salary) <span class="keyword">from</span> emp </span><br><span class="line">		<span class="keyword">where</span> age&gt;<span class="number">10</span> </span><br><span class="line">    	<span class="keyword">group</span> <span class="keyword">by</span> post</span><br><span class="line">        <span class="keyword">having</span> <span class="keyword">avg</span>(salary) &gt; <span class="number">1000</span></span><br><span class="line">        <span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">avg</span>(salary) <span class="keyword">desc</span></span><br><span class="line">        ;</span><br></pre></td></tr></table></figure>

<h3 id="limit限制展示条数"><a href="#limit限制展示条数" class="headerlink" title="limit限制展示条数"></a>limit限制展示条数</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp;</span><br><span class="line">"""针对数据过多的情况 我们通常都是做分页处理"""</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">limit</span> <span class="number">3</span>;  <span class="comment"># 只展示三条数据</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">limit</span> <span class="number">0</span>,<span class="number">5</span>;</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">limit</span> <span class="number">5</span>,<span class="number">5</span>;</span><br><span class="line">第一个参数是起始位置</span><br><span class="line">第二个参数是展示条数</span><br></pre></td></tr></table></figure>

<h3 id="正则"><a href="#正则" class="headerlink" title="正则"></a>正则</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> <span class="keyword">name</span> regexp <span class="string">'^j.*(n|y)$'</span>;</span><br></pre></td></tr></table></figure>

<h3 id="多表操作"><a href="#多表操作" class="headerlink" title="多表操作"></a>多表操作</h3><p>前期表准备</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#建表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> dep(</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">int</span>,</span><br><span class="line"><span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">20</span>) </span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> emp(</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">int</span> primary <span class="keyword">key</span> auto_increment,</span><br><span class="line"><span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">20</span>),</span><br><span class="line">sex enum(<span class="string">'male'</span>,<span class="string">'female'</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="string">'male'</span>,</span><br><span class="line">age <span class="built_in">int</span>,</span><br><span class="line">dep_id <span class="built_in">int</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">#插入数据</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> dep <span class="keyword">values</span></span><br><span class="line">(<span class="number">200</span>,<span class="string">'技术'</span>),</span><br><span class="line">(<span class="number">201</span>,<span class="string">'人力资源'</span>),</span><br><span class="line">(<span class="number">202</span>,<span class="string">'销售'</span>),</span><br><span class="line">(<span class="number">203</span>,<span class="string">'运营'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> emp(<span class="keyword">name</span>,sex,age,dep_id) <span class="keyword">values</span></span><br><span class="line">(<span class="string">'jason'</span>,<span class="string">'male'</span>,<span class="number">18</span>,<span class="number">200</span>),</span><br><span class="line">(<span class="string">'egon'</span>,<span class="string">'female'</span>,<span class="number">48</span>,<span class="number">201</span>),</span><br><span class="line">(<span class="string">'kevin'</span>,<span class="string">'male'</span>,<span class="number">18</span>,<span class="number">201</span>),</span><br><span class="line">(<span class="string">'nick'</span>,<span class="string">'male'</span>,<span class="number">28</span>,<span class="number">202</span>),</span><br><span class="line">(<span class="string">'owen'</span>,<span class="string">'male'</span>,<span class="number">18</span>,<span class="number">203</span>),</span><br><span class="line">(<span class="string">'jerry'</span>,<span class="string">'female'</span>,<span class="number">18</span>,<span class="number">204</span>);</span><br></pre></td></tr></table></figure>

<h3 id="表查询"><a href="#表查询" class="headerlink" title="表查询"></a>表查询</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> dep,emp;  <span class="comment"># 结果   笛卡尔积</span></span><br><span class="line">"""</span><br><span class="line">了解即可 不知道也没关系</span><br><span class="line">"""</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp,dep <span class="keyword">where</span> emp.dep_id = dep.id;</span><br><span class="line"></span><br><span class="line">"""</span><br><span class="line">MySQL也知道 你在后面查询数据过程中 肯定会经常用到拼表操作 </span><br><span class="line">所以特地给你开设了对应的方法</span><br><span class="line">	inner join  内连接</span><br><span class="line">	left join   左连接</span><br><span class="line">	right join  右连接</span><br><span class="line">	union		全连接</span><br><span class="line">"""</span><br><span class="line"><span class="comment"># inner join  内连接</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">inner</span> <span class="keyword">join</span> dep <span class="keyword">on</span> emp.dep_id = dep.id;</span><br><span class="line"><span class="comment"># 只拼接两张表中公有的数据部分</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># left join   左连接</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">left</span> <span class="keyword">join</span> dep <span class="keyword">on</span> emp.dep_id = dep.id;</span><br><span class="line"><span class="comment"># 左表所有的数据都展示出来 没有对应的项就用NULL</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># right join  右连接</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">right</span> <span class="keyword">join</span> dep <span class="keyword">on</span> emp.dep_id = dep.id;</span><br><span class="line"><span class="comment"># 右表所有的数据都展示出来 没有对应的项就用NULL</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># union		全连接  左右两表所有的数据都展示出来</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">left</span> <span class="keyword">join</span> dep <span class="keyword">on</span> emp.dep_id = dep.id</span><br><span class="line"><span class="keyword">union</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">right</span> <span class="keyword">join</span> dep <span class="keyword">on</span> emp.dep_id = dep.id;</span><br></pre></td></tr></table></figure>

<h3 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">"""</span><br><span class="line">子查询就是我们平时解决问题的思路</span><br><span class="line">	分步骤解决问题</span><br><span class="line">		第一步</span><br><span class="line">		第二步</span><br><span class="line">		...</span><br><span class="line">将一个查询语句的结果当做另外一个查询语句的条件去用</span><br><span class="line">"""</span><br><span class="line"><span class="comment"># 查询部门是技术或者人力资源的员工信息</span></span><br><span class="line">	1 先获取部门的id号</span><br><span class="line">    2 再去员工表里面筛选出对应的员工</span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">id</span> <span class="keyword">from</span> dep <span class="keyword">where</span> <span class="keyword">name</span>=<span class="string">'技术'</span> <span class="keyword">or</span> <span class="keyword">name</span> = <span class="string">'人力资源'</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">name</span> <span class="keyword">from</span> emp <span class="keyword">where</span> dep_id <span class="keyword">in</span> (<span class="number">200</span>,<span class="number">201</span>);</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> dep_id <span class="keyword">in</span> (<span class="keyword">select</span> <span class="keyword">id</span> <span class="keyword">from</span> dep <span class="keyword">where</span> <span class="keyword">name</span>=<span class="string">'技术'</span> <span class="keyword">or</span> <span class="keyword">name</span> = <span class="string">'人力资源'</span>);</span><br></pre></td></tr></table></figure>

<p><strong>总结</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">表的查询结果可以作为其他表的查询条件</span><br><span class="line">也可以通过起别名的方式把它作为一个张虚拟表根其他表关联</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">多表查询就两种方式</span><br><span class="line">	先拼接表再查询</span><br><span class="line">	子查询 一步一步来</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>[约束条件与表关系]</title>
    <url>/2020/03/10/%E7%BA%A6%E6%9D%9F%E6%9D%A1%E4%BB%B6%E4%B8%8E%E8%A1%A8%E5%85%B3%E7%B3%BB/</url>
    <content><![CDATA[<h2 id="约束条件"><a href="#约束条件" class="headerlink" title="约束条件"></a>约束条件</h2><h3 id="default默认值"><a href="#default默认值" class="headerlink" title="default默认值"></a>default默认值</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 补充知识点  插入数据的时候可以指定字段</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t1(</span><br><span class="line">	<span class="keyword">id</span> <span class="built_in">int</span>,</span><br><span class="line">    <span class="keyword">name</span> <span class="built_in">char</span>(<span class="number">16</span>)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t1(<span class="keyword">name</span>,<span class="keyword">id</span>) <span class="keyword">values</span>(<span class="string">'jason'</span>,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t2(</span><br><span class="line">	<span class="keyword">id</span> <span class="built_in">int</span>,</span><br><span class="line">    <span class="keyword">name</span> <span class="built_in">char</span>(<span class="number">16</span>),</span><br><span class="line">    gender enum(<span class="string">'male'</span>,<span class="string">'female'</span>,<span class="string">'others'</span>) <span class="keyword">default</span> <span class="string">'male'</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t2(<span class="keyword">id</span>,<span class="keyword">name</span>) <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">'jason'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t2 <span class="keyword">values</span>(<span class="number">2</span>,<span class="string">'egon'</span>,<span class="string">'female'</span>);</span><br></pre></td></tr></table></figure>

<h3 id="unique唯一"><a href="#unique唯一" class="headerlink" title="unique唯一"></a>unique唯一</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 单列唯一</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t3(</span><br><span class="line">	<span class="keyword">id</span> <span class="built_in">int</span> <span class="keyword">unique</span>,</span><br><span class="line">    <span class="keyword">name</span> <span class="built_in">char</span>(<span class="number">16</span>)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t3 <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">'jason'</span>),(<span class="number">1</span>,<span class="string">'egon'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t3 <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">'jason'</span>),(<span class="number">2</span>,<span class="string">'egon'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment"># 联合唯一</span></span><br><span class="line">"""</span><br><span class="line">ip和port</span><br><span class="line">单个都可以重复 但是加载一起必须是唯一的</span><br><span class="line">"""</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t4(</span><br><span class="line">	<span class="keyword">id</span> <span class="built_in">int</span>,</span><br><span class="line">    ip <span class="built_in">char</span>(<span class="number">16</span>),</span><br><span class="line">    port <span class="built_in">int</span>,</span><br><span class="line">    <span class="keyword">unique</span>(ip,port)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t4 <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">'127.0.0.1'</span>,<span class="number">8080</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t4 <span class="keyword">values</span>(<span class="number">2</span>,<span class="string">'127.0.0.1'</span>,<span class="number">8081</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t4 <span class="keyword">values</span>(<span class="number">3</span>,<span class="string">'127.0.0.2'</span>,<span class="number">8080</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t4 <span class="keyword">values</span>(<span class="number">4</span>,<span class="string">'127.0.0.1'</span>,<span class="number">8080</span>);  报错</span><br></pre></td></tr></table></figure>

<h3 id="primary-key主键"><a href="#primary-key主键" class="headerlink" title="primary key主键"></a>primary key主键</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">"""</span><br><span class="line">1.单单从约束效果上来看primary key等价于not null + unique</span><br><span class="line">非空且唯一！！！</span><br><span class="line">"""</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t5(<span class="keyword">id</span> <span class="built_in">int</span> primary <span class="keyword">key</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t5 <span class="keyword">values</span>(<span class="literal">null</span>);  报错</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t5 <span class="keyword">values</span>(<span class="number">1</span>),(<span class="number">1</span>);  报错</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t5 <span class="keyword">values</span>(<span class="number">1</span>),(<span class="number">2</span>); </span><br><span class="line"></span><br><span class="line">"""</span><br><span class="line">2.它除了有约束效果之外 它还是Innodb存储引擎组织数据的依据</span><br><span class="line">Innodb存储引擎在创建表的时候必须要有primary key</span><br><span class="line">因为它类似于书的目录 能够帮助提示查询效率并且也是建表的依据</span><br><span class="line">"""</span><br><span class="line"><span class="comment"># 1 一张表中有且只有一个主键 如果你没有设置主键 那么会从上往下搜索直到遇到一个非空且唯一的字段将它自动升级为主键</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t6(</span><br><span class="line">	<span class="keyword">id</span> <span class="built_in">int</span>,</span><br><span class="line">    <span class="keyword">name</span> <span class="built_in">char</span>(<span class="number">16</span>),</span><br><span class="line">    age <span class="built_in">int</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">unique</span>,</span><br><span class="line">    addr <span class="built_in">char</span>(<span class="number">32</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">unique</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2 如果表中没有主键也没有其他任何的非空且唯一字段 那么Innodb会采用自己内部提供的一个隐藏字段作为主键，隐藏意味着你无法使用到它 就无法提示查询速度</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3 一张表中通常都应该有一个主键字段 并且通常将id/uid/sid字段作为主键</span></span><br><span class="line"><span class="comment"># 单个字段主键</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t5(</span><br><span class="line">    <span class="keyword">id</span> <span class="built_in">int</span> primary <span class="keyword">key</span></span><br><span class="line">	<span class="keyword">name</span> <span class="built_in">char</span>(<span class="number">16</span>)</span><br><span class="line">);</span><br><span class="line"><span class="comment"># 联合主键(多个字段联合起来作为表的主键 本质还是一个主键)</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t7(</span><br><span class="line">    ip <span class="built_in">char</span>(<span class="number">16</span>),</span><br><span class="line">    port <span class="built_in">int</span>,</span><br><span class="line">    primary <span class="keyword">key</span>(ip,port)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">"""</span><br><span class="line">也意味着 以后我们在创建表的时候id字段一定要加primary key</span><br><span class="line">"""</span><br></pre></td></tr></table></figure>

<h3 id="auto-increment自增"><a href="#auto-increment自增" class="headerlink" title="auto_increment自增"></a>auto_increment自增</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 当编号特别多的时候 人为的去维护太麻烦</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t8(</span><br><span class="line">	<span class="keyword">id</span> <span class="built_in">int</span> primary <span class="keyword">key</span> auto_increment,</span><br><span class="line">    <span class="keyword">name</span> <span class="built_in">char</span>(<span class="number">16</span>)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t8(<span class="keyword">name</span>) <span class="keyword">values</span>(<span class="string">'jason'</span>),(<span class="string">'egon'</span>),(<span class="string">'kevin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意auto_increment通常都是加在主键上的 不能给普通字段加</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t9(</span><br><span class="line">	<span class="keyword">id</span> <span class="built_in">int</span> primary <span class="keyword">key</span> auto_increment,</span><br><span class="line">    <span class="keyword">name</span> <span class="built_in">char</span>(<span class="number">16</span>),</span><br><span class="line">    cid <span class="built_in">int</span> auto_increment</span><br><span class="line">);</span><br><span class="line">ERROR 1075 (42000): Incorrect table definition; there can be only one auto column and it must be defined as a key</span><br></pre></td></tr></table></figure>

<p><strong>结论</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">"""以后在创建表的id(数据的唯一标识id、uid、sid)字段的时候id int primary key auto_increment"""</span><br></pre></td></tr></table></figure>

<p><strong>补充</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> t1  删除表中数据后 主键的自增不会停止<span class="keyword">truncate</span> t1  清空表数据并且重置主键</span><br></pre></td></tr></table></figure>

<h2 id="表与表之间建关系"><a href="#表与表之间建关系" class="headerlink" title="表与表之间建关系"></a>表与表之间建关系</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">"""</span><br><span class="line">定义一张员工表 表中有很多字段</span><br><span class="line">id name gender dep_name dep_desc</span><br><span class="line">"""</span><br><span class="line"><span class="comment"># 1 该表的组织结构不是很清晰(可忽视)</span></span><br><span class="line"><span class="comment"># 2 浪费硬盘空间(可忽视)</span></span><br><span class="line"><span class="comment"># 3 数据的扩展性极差(无法忽视的)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如何优化？</span></span><br><span class="line">"""上述问题就类似于你将所有的代码都写在了一个py文件中"""</span><br><span class="line">将员工表拆分  员工表和部门表</span><br></pre></td></tr></table></figure>

<h3 id="外键"><a href="#外键" class="headerlink" title="外键"></a>外键</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">"""</span><br><span class="line">外键就是用来帮助我们建立表与表之间关系的</span><br><span class="line">foreign key</span><br><span class="line">"""</span><br></pre></td></tr></table></figure>

<h3 id="表关系"><a href="#表关系" class="headerlink" title="表关系"></a>表关系</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;&quot;&quot;</span><br><span class="line">表与表之间最多只有四种关系</span><br><span class="line">	一对多关系</span><br><span class="line">		在MySQL的关系中没有多对一一说</span><br><span class="line">		一对多 多对一 都叫一对多！！！</span><br><span class="line">	多对多关系</span><br><span class="line">	一对一关系</span><br><span class="line">	没有关系</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>

<h3 id="一对多关系"><a href="#一对多关系" class="headerlink" title="一对多关系"></a>一对多关系</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">"""</span><br><span class="line">判断表与表之间关系的时候 前期不熟悉的情况下 一定要按照我给你的建议</span><br><span class="line">换位思考  分别站在两张表的角度考虑</span><br><span class="line"></span><br><span class="line">员工表与部门表为例</span><br><span class="line">	先站在员工表</span><br><span class="line">		思考一个员工能否对应多个部门(一条员工数据能否对应多条部门数据)</span><br><span class="line">			不能！！！</span><br><span class="line">			(不能直接得出结论 一定要两张表都考虑完全)</span><br><span class="line">	再站在部门表</span><br><span class="line">		思考一个部门能否对应多个员工(一个部门数据能否对应多条员工数据)</span><br><span class="line">			能！！！</span><br><span class="line">	得出结论</span><br><span class="line">		员工表与部门表示单向的一对多</span><br><span class="line">		所以表关系就是一对多</span><br><span class="line">"""</span><br><span class="line">foreign key</span><br><span class="line">	1 一对多表关系   外键字段建在多的一方</span><br><span class="line">    2 在创建表的时候 一定要先建被关联表 </span><br><span class="line">    3 在录入数据的时候 也必须先录入被关联表</span><br><span class="line"><span class="comment"># SQL语句建立表关系</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> dep(</span><br><span class="line">	<span class="keyword">id</span> <span class="built_in">int</span> primary <span class="keyword">key</span> auto_increment,</span><br><span class="line">    dep_name <span class="built_in">char</span>(<span class="number">16</span>),</span><br><span class="line">    dep_desc <span class="built_in">char</span>(<span class="number">32</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> emp(</span><br><span class="line">	<span class="keyword">id</span> <span class="built_in">int</span> primary <span class="keyword">key</span> auto_increment,</span><br><span class="line">    <span class="keyword">name</span> <span class="built_in">char</span>(<span class="number">16</span>),</span><br><span class="line">    gender enum(<span class="string">'male'</span>,<span class="string">'female'</span>,<span class="string">'others'</span>) <span class="keyword">default</span> <span class="string">'male'</span>,</span><br><span class="line">    dep_id <span class="built_in">int</span>,</span><br><span class="line">    <span class="keyword">foreign</span> <span class="keyword">key</span>(dep_id) <span class="keyword">references</span> dep(<span class="keyword">id</span>)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> dep(dep_name,dep_desc) <span class="keyword">values</span>(<span class="string">'sb教学部'</span>,<span class="string">'教书育人'</span>),(<span class="string">'外交部'</span>,<span class="string">'多人外交'</span>),(<span class="string">'nb技术部'</span>,<span class="string">'技术能力有限部门'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> emp(<span class="keyword">name</span>,dep_id) <span class="keyword">values</span>(<span class="string">'jason'</span>,<span class="number">2</span>),(<span class="string">'egon'</span>,<span class="number">1</span>),(<span class="string">'tank'</span>,<span class="number">1</span>),(<span class="string">'kevin'</span>,<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改dep表里面的id字段</span></span><br><span class="line"><span class="keyword">update</span> dep <span class="keyword">set</span> <span class="keyword">id</span>=<span class="number">200</span> <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">2</span>;  不行</span><br><span class="line"><span class="comment"># 删除dep表里面的数据</span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> dep;  不行</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1 先删除教学部对应的员工数据 之后再删除部门</span></span><br><span class="line">	操作太过繁琐</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 2 真正做到数据之间有关系</span></span><br><span class="line">	更新就同步更新</span><br><span class="line">    删除就同步删除</span><br><span class="line">"""</span><br><span class="line">级联更新   &gt;&gt;&gt;   同步更新</span><br><span class="line">级联删除   &gt;&gt;&gt;   同步删除</span><br><span class="line">"""</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> dep(</span><br><span class="line">	<span class="keyword">id</span> <span class="built_in">int</span> primary <span class="keyword">key</span> auto_increment,</span><br><span class="line">    dep_name <span class="built_in">char</span>(<span class="number">16</span>),</span><br><span class="line">    dep_desc <span class="built_in">char</span>(<span class="number">32</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> emp(</span><br><span class="line">	<span class="keyword">id</span> <span class="built_in">int</span> primary <span class="keyword">key</span> auto_increment,</span><br><span class="line">    <span class="keyword">name</span> <span class="built_in">char</span>(<span class="number">16</span>),</span><br><span class="line">    gender enum(<span class="string">'male'</span>,<span class="string">'female'</span>,<span class="string">'others'</span>) <span class="keyword">default</span> <span class="string">'male'</span>,</span><br><span class="line">    dep_id <span class="built_in">int</span>,</span><br><span class="line">    <span class="keyword">foreign</span> <span class="keyword">key</span>(dep_id) <span class="keyword">references</span> dep(<span class="keyword">id</span>) </span><br><span class="line">    <span class="keyword">on</span> <span class="keyword">update</span> <span class="keyword">cascade</span>  <span class="comment"># 同步更新</span></span><br><span class="line">    <span class="keyword">on</span> <span class="keyword">delete</span> <span class="keyword">cascade</span>  <span class="comment"># 同步删除</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> dep(dep_name,dep_desc) <span class="keyword">values</span>(<span class="string">'sb教学部'</span>,<span class="string">'教书育人'</span>),(<span class="string">'外交部'</span>,<span class="string">'多人外交'</span>),(<span class="string">'nb技术部'</span>,<span class="string">'技术能力有限部门'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> emp(<span class="keyword">name</span>,dep_id) <span class="keyword">values</span>(<span class="string">'jason'</span>,<span class="number">2</span>),(<span class="string">'egon'</span>,<span class="number">1</span>),(<span class="string">'tank'</span>,<span class="number">1</span>),(<span class="string">'kevin'</span>,<span class="number">3</span>);</span><br></pre></td></tr></table></figure>

<h3 id="多对多"><a href="#多对多" class="headerlink" title="多对多"></a>多对多</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">"""</span><br><span class="line">图书表和作者表</span><br><span class="line">"""</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> book(</span><br><span class="line">	<span class="keyword">id</span> <span class="built_in">int</span> primary <span class="keyword">key</span> auto_increment,</span><br><span class="line">    title <span class="built_in">varchar</span>(<span class="number">32</span>),</span><br><span class="line">    price <span class="built_in">int</span>,</span><br><span class="line">    author_id <span class="built_in">int</span>,</span><br><span class="line">    <span class="keyword">foreign</span> <span class="keyword">key</span>(author_id) <span class="keyword">references</span> author(<span class="keyword">id</span>) </span><br><span class="line">    <span class="keyword">on</span> <span class="keyword">update</span> <span class="keyword">cascade</span>  <span class="comment"># 同步更新</span></span><br><span class="line">    <span class="keyword">on</span> <span class="keyword">delete</span> <span class="keyword">cascade</span>  <span class="comment"># 同步删除</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> author(</span><br><span class="line">	<span class="keyword">id</span> <span class="built_in">int</span> primary <span class="keyword">key</span> auto_increment,</span><br><span class="line">    <span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">32</span>),</span><br><span class="line">    age <span class="built_in">int</span>,</span><br><span class="line">    book_id <span class="built_in">int</span>,</span><br><span class="line">    <span class="keyword">foreign</span> <span class="keyword">key</span>(book_id) <span class="keyword">references</span> book(<span class="keyword">id</span>) </span><br><span class="line">    <span class="keyword">on</span> <span class="keyword">update</span> <span class="keyword">cascade</span>  <span class="comment"># 同步更新</span></span><br><span class="line">    <span class="keyword">on</span> <span class="keyword">delete</span> <span class="keyword">cascade</span>  <span class="comment"># 同步删除</span></span><br><span class="line">);</span><br><span class="line">"""</span><br><span class="line">按照上述的方式创建 一个都别想成功！！！</span><br><span class="line">其实我们只是想记录书籍和作者的关系</span><br><span class="line">针对多对多字段表关系 不能在两张原有的表中创建外键</span><br><span class="line">需要你单独再开设一张 专门用来存储两张表数据之间的关系</span><br><span class="line">"""</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> book(</span><br><span class="line">	<span class="keyword">id</span> <span class="built_in">int</span> primary <span class="keyword">key</span> auto_increment,</span><br><span class="line">    title <span class="built_in">varchar</span>(<span class="number">32</span>),</span><br><span class="line">    price <span class="built_in">int</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> author(</span><br><span class="line">	<span class="keyword">id</span> <span class="built_in">int</span> primary <span class="keyword">key</span> auto_increment,</span><br><span class="line">    <span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">32</span>),</span><br><span class="line">    age <span class="built_in">int</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> book2author(</span><br><span class="line">	<span class="keyword">id</span> <span class="built_in">int</span> primary <span class="keyword">key</span> auto_increment,</span><br><span class="line">    author_id <span class="built_in">int</span>,</span><br><span class="line">    book_id <span class="built_in">int</span>,</span><br><span class="line">    <span class="keyword">foreign</span> <span class="keyword">key</span>(author_id) <span class="keyword">references</span> author(<span class="keyword">id</span>) </span><br><span class="line">    <span class="keyword">on</span> <span class="keyword">update</span> <span class="keyword">cascade</span>  <span class="comment"># 同步更新</span></span><br><span class="line">    <span class="keyword">on</span> <span class="keyword">delete</span> <span class="keyword">cascade</span>,  <span class="comment"># 同步删除</span></span><br><span class="line">    <span class="keyword">foreign</span> <span class="keyword">key</span>(book_id) <span class="keyword">references</span> book(<span class="keyword">id</span>) </span><br><span class="line">    <span class="keyword">on</span> <span class="keyword">update</span> <span class="keyword">cascade</span>  <span class="comment"># 同步更新</span></span><br><span class="line">    <span class="keyword">on</span> <span class="keyword">delete</span> <span class="keyword">cascade</span>  <span class="comment"># 同步删除</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h3 id="一对一"><a href="#一对一" class="headerlink" title="一对一"></a>一对一</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">"""</span><br><span class="line">id name age addr phone hobby email........</span><br><span class="line">如果一个表的字段特别多 每次查询又不是所有的字段都能用得到</span><br><span class="line">将表一分为二  </span><br><span class="line">	用户表</span><br><span class="line">		用户表</span><br><span class="line">			id name age</span><br><span class="line">		用户详情表</span><br><span class="line">			id addr phone hobby email........</span><br><span class="line">	</span><br><span class="line">	站在用户表</span><br><span class="line">		一个用户能否对应多个用户详情   不能！！！</span><br><span class="line">	站在详情表</span><br><span class="line">		一个详情能否属于多个用户      不能！！！</span><br><span class="line">	结论:单向的一对多都不成立 那么这个时候两者之间的表关系</span><br><span class="line">		就是一对一</span><br><span class="line">		或者没有关系(好判断)</span><br><span class="line"></span><br><span class="line">客户表和学生表</span><br><span class="line">	在你们报名之前你们是客户端</span><br><span class="line">	报名之后是学生(期间有一些客户不会报名)</span><br><span class="line">"""</span><br><span class="line"></span><br><span class="line">一对一 外键字段建在任意一方都可以 但是推荐你建在查询频率比较高的表中</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> authordetail(</span><br><span class="line">	<span class="keyword">id</span> <span class="built_in">int</span> primary <span class="keyword">key</span> auto_increment,</span><br><span class="line">    phone <span class="built_in">int</span>,</span><br><span class="line">    addr <span class="built_in">varchar</span>(<span class="number">64</span>)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> author(</span><br><span class="line">	<span class="keyword">id</span> <span class="built_in">int</span> primary <span class="keyword">key</span> auto_increment,</span><br><span class="line">    <span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">32</span>),</span><br><span class="line">    age <span class="built_in">int</span>,</span><br><span class="line">    authordetail_id <span class="built_in">int</span> <span class="keyword">unique</span>,</span><br><span class="line">    <span class="keyword">foreign</span> <span class="keyword">key</span>(authordetail_id) <span class="keyword">references</span> authordetail(<span class="keyword">id</span>) </span><br><span class="line">    <span class="keyword">on</span> <span class="keyword">update</span> <span class="keyword">cascade</span>  <span class="comment"># 同步更新</span></span><br><span class="line">    <span class="keyword">on</span> <span class="keyword">delete</span> <span class="keyword">cascade</span>  <span class="comment"># 同步删除</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p><strong>总结</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;&quot;&quot;</span><br><span class="line">表关系的建立需要用到foreign key</span><br><span class="line">	一对多</span><br><span class="line">		外键字段建在多的一方</span><br><span class="line">	多对多</span><br><span class="line">		自己开设第三张存储</span><br><span class="line">	一对一</span><br><span class="line">		建在任意一方都可以 但是推荐你建在查询频率较高的表中</span><br><span class="line"></span><br><span class="line">判断表之间关系的方式</span><br><span class="line">	换位思考！！！</span><br><span class="line">		员工与部门</span><br><span class="line">	</span><br><span class="line">		图书与作者</span><br><span class="line">	</span><br><span class="line">		作者与作者详情</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>

<h3 id="修改表-了解"><a href="#修改表-了解" class="headerlink" title="修改表(了解)"></a>修改表(了解)</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment"># MySQL对大小写是不敏感的</span></span><br><span class="line">"""</span><br><span class="line">1 修改表名</span><br><span class="line">	<span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">rename</span> 新表名;</span><br><span class="line"></span><br><span class="line">2 增加字段</span><br><span class="line">	<span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">add</span> 字段名 字段类型(宽度)  约束条件;</span><br><span class="line">	<span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">add</span> 字段名 字段类型(宽度)  约束条件 <span class="keyword">first</span>;</span><br><span class="line">	<span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">add</span> 字段名 字段类型(宽度)  约束条件 <span class="keyword">after</span> 字段名;</span><br><span class="line"></span><br><span class="line">3 删除字段</span><br><span class="line">	<span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">drop</span> 字段名;</span><br><span class="line"></span><br><span class="line">4 修改字段</span><br><span class="line">	<span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">modify</span> 字段名 字段类型(宽度) 约束条件;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">change</span> 旧字段名 新字段名 字段类型(宽度) 约束条件;</span><br><span class="line">	</span><br><span class="line">"""</span><br></pre></td></tr></table></figure>

<h3 id="复制表-了解"><a href="#复制表-了解" class="headerlink" title="复制表(了解)"></a>复制表(了解)</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">"""</span><br><span class="line">我们sql语句查询的结果其实也是一张虚拟表</span><br><span class="line">"""</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 表名 <span class="keyword">select</span> * <span class="keyword">from</span> 旧表;  不能复制主键 外键 ...</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> new_dep2 <span class="keyword">select</span> * <span class="keyword">from</span> dep <span class="keyword">where</span> <span class="keyword">id</span>&gt;<span class="number">3</span>;</span><br></pre></td></tr></table></figure>

<h3 id="练习："><a href="#练习：" class="headerlink" title="练习："></a>练习：</h3><p>练习：账号信息表，用户组，主机表，主机组</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#用户表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">user</span>(</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">int</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">unique</span> auto_increment,</span><br><span class="line">username <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line"><span class="keyword">password</span> <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">primary <span class="keyword">key</span>(username,<span class="keyword">password</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">#用户组表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> usergroup(</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">int</span> primary <span class="keyword">key</span> auto_increment,</span><br><span class="line">groupname <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">unique</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">#主机表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> host(</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">int</span> primary <span class="keyword">key</span> auto_increment,</span><br><span class="line">ip <span class="built_in">char</span>(<span class="number">15</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">unique</span> <span class="keyword">default</span> <span class="string">'127.0.0.1'</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">#业务线表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> business(</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">int</span> primary <span class="keyword">key</span> auto_increment,</span><br><span class="line">business <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">unique</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">#建关系：user与usergroup</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> user2usergroup(</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">int</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">unique</span> auto_increment,</span><br><span class="line">user_id <span class="built_in">int</span> <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line"><span class="keyword">group_id</span> <span class="built_in">int</span> <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">primary <span class="keyword">key</span>(user_id,<span class="keyword">group_id</span>),</span><br><span class="line"><span class="keyword">foreign</span> <span class="keyword">key</span>(user_id) <span class="keyword">references</span> <span class="keyword">user</span>(<span class="keyword">id</span>),</span><br><span class="line"><span class="keyword">foreign</span> <span class="keyword">key</span>(<span class="keyword">group_id</span>) <span class="keyword">references</span> usergroup(<span class="keyword">id</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">#建关系：host与business</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> host2business(</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">int</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">unique</span> auto_increment,</span><br><span class="line">host_id <span class="built_in">int</span> <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">business_id <span class="built_in">int</span> <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">primary <span class="keyword">key</span>(host_id,business_id),</span><br><span class="line"><span class="keyword">foreign</span> <span class="keyword">key</span>(host_id) <span class="keyword">references</span> host(<span class="keyword">id</span>),</span><br><span class="line"><span class="keyword">foreign</span> <span class="keyword">key</span>(business_id) <span class="keyword">references</span> business(<span class="keyword">id</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">#建关系：user与host</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> user2host(</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">int</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">unique</span> auto_increment,</span><br><span class="line">user_id <span class="built_in">int</span> <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">host_id <span class="built_in">int</span> <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">primary <span class="keyword">key</span>(user_id,host_id),</span><br><span class="line"><span class="keyword">foreign</span> <span class="keyword">key</span>(user_id) <span class="keyword">references</span> <span class="keyword">user</span>(<span class="keyword">id</span>),</span><br><span class="line"><span class="keyword">foreign</span> <span class="keyword">key</span>(host_id) <span class="keyword">references</span> host(<span class="keyword">id</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>练习:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 班级表</span></span><br><span class="line">cid	caption</span><br><span class="line"><span class="comment"># 学生表</span></span><br><span class="line">sid sname gender class_id</span><br><span class="line"><span class="comment"># 老师表</span></span><br><span class="line">tid	tname</span><br><span class="line"><span class="comment"># 课程表</span></span><br><span class="line">cid	cname	teacher_id</span><br><span class="line"><span class="comment"># 成绩表</span></span><br><span class="line">sid	student_id course_id number</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>[存储引擎与数据类型]</title>
    <url>/2020/03/09/%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<h3 id="存储引擎"><a href="#存储引擎" class="headerlink" title="存储引擎"></a>存储引擎</h3><p>日常生活中文件格式有很多中，并且针对不同的文件格式会有对应不同存储方式和处理机制(txt,pdf,word,mp4…)</p>
<p>针对不同的数据应该有对应的不同的处理机制来存储</p>
<p>存储引擎就是不同的处理机制</p>
<p><strong>MySQL主要存储引擎</strong></p>
<ul>
<li><p>Innodb</p>
<p>是MySQL5.5版本及之后默认的存储引擎</p>
<p>存储数据更加的安全</p>
</li>
<li><p>myisam</p>
<p>是MySQL5.5版本之前默认的存储引擎</p>
<p>速度要比Innodb更快 但是我们更加注重的是数据的安全</p>
</li>
<li><p>memory</p>
<p>内存引擎(数据全部存放在内存中) 断电数据丢失</p>
</li>
<li><p>blackhole</p>
<p>无论存什么，都立刻消失(黑洞)</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string"># 查看所有的存储引擎</span></span><br><span class="line"><span class="string">show engines;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 不同的存储引擎在存储表的时候 异同点</span></span><br><span class="line"><span class="string">create table t1(id int) engine=innodb;</span></span><br><span class="line"><span class="string">create table t2(id int) engine=myisam;</span></span><br><span class="line"><span class="string">create table t3(id int) engine=blackhole;</span></span><br><span class="line"><span class="string">create table t4(id int) engine=memory;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 存数据</span></span><br><span class="line"><span class="string">insert into t1 values(1);</span></span><br><span class="line"><span class="string">insert into t2 values(1);</span></span><br><span class="line"><span class="string">insert into t3 values(1);</span></span><br><span class="line"><span class="string">insert into t4 values(1);</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<p><img src="https://images.cnblogs.com/cnblogs_com/wjxyzs/1693949/o_200513125145%E5%82%A8%E5%AD%98%E5%BC%95%E6%93%8E.png" alt="https://images.cnblogs.com/cnblogs_com/wjxyzs/1693949/o_200513125145%E5%82%A8%E5%AD%98%E5%BC%95%E6%93%8E.png"></p>
<h3 id="创建表的完整语法"><a href="#创建表的完整语法" class="headerlink" title="创建表的完整语法"></a>创建表的完整语法</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 语法</span></span><br><span class="line">create table 表名(</span><br><span class="line">	字段名<span class="number">1</span> 类型(宽度) 约束条件,</span><br><span class="line">    字段名<span class="number">2</span> 类型(宽度) 约束条件,</span><br><span class="line">    字段名<span class="number">3</span> 类型(宽度) 约束条件</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意</span></span><br><span class="line"><span class="number">1</span> 在同一张表中字段名不能重复</span><br><span class="line"><span class="number">2</span> 宽度和约束条件是可选的(可写可不写) 而字段名和字段类型是必须的</span><br><span class="line">	约束条件写的话 也支持写多个</span><br><span class="line">    字段名<span class="number">1</span> 类型(宽度) 约束条件<span class="number">1</span> 约束条件<span class="number">2.</span>..,</span><br><span class="line">	create table t5(id);  报错</span><br><span class="line"><span class="number">3</span> 最后一行不能有逗号</span><br><span class="line">	create table t6(</span><br><span class="line">        id int,</span><br><span class="line">        name char,</span><br><span class="line">    );   报错</span><br><span class="line"></span><br><span class="line"><span class="string">"""补充"""</span></span><br><span class="line"><span class="comment"># 宽度</span></span><br><span class="line">	一般情况下指的是对存储数据的限制</span><br><span class="line">	create table t7(name char);  默认宽度是<span class="number">1</span></span><br><span class="line">    insert into t7 values(<span class="string">'jason'</span>);</span><br><span class="line">    insert into t7 values(null);  关键字NULL</span><br><span class="line">    针对不同的版本会出现不同的效果</span><br><span class="line">    <span class="number">5.6</span>版本默认没有开启严格模式 规定只能存一个字符你给了多个字符，那么我会自动帮你截取</span><br><span class="line">    <span class="number">5.7</span>版本及以上或者开启了严格模式 那么规定只能存几个 就不能超，一旦超出范围立刻报错 Data too long <span class="keyword">for</span> ....</span><br><span class="line"><span class="string">"""严格模式到底开不开呢？"""</span></span><br><span class="line">MySQL5<span class="number">.7</span>之后的版本默认都是开启严格模式的</span><br><span class="line">使用数据库的准则:</span><br><span class="line">	能尽量少的让数据库干活就尽量少 不要给数据库增加额外的压力</span><br><span class="line"></span><br><span class="line"><span class="comment"># 约束条件 null  not null不能插入null</span></span><br><span class="line">create table t8(id int,name char <span class="keyword">not</span> null);</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">宽度和约束条件到底是什么关系</span></span><br><span class="line"><span class="string">	宽度是用来限制数据的存储</span></span><br><span class="line"><span class="string">	约束条件是在宽度的基础之上增加的额外的约束</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<h3 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h3><p>整型</p>
<ul>
<li><p>分类</p>
<p>TINYINT SMALLINT MEDUIMINT INT BIGINT</p>
</li>
<li><p>作用</p>
<p>存储年龄、等级、id、号码等等</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">以TINYINT </span></span><br><span class="line"><span class="string">	是否有符号</span></span><br><span class="line"><span class="string">		默认情况下是带符号的</span></span><br><span class="line"><span class="string">	超出会如何</span></span><br><span class="line"><span class="string">		超出限制只存最大可接受值</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">create table t9(id tinyint);</span><br><span class="line">insert into t9 values(<span class="number">-129</span>),(<span class="number">256</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment"># 约束条件之unsigned 无符号</span></span><br><span class="line">create table t10(id tinyint unsigned);</span><br><span class="line"></span><br><span class="line">create table t11(id int);</span><br><span class="line"><span class="comment"># int默认也是带符号的  </span></span><br><span class="line"><span class="comment"># 整型默认情况下都是带有符号的</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 针对整型 括号内的宽度到底是干嘛的</span></span><br><span class="line">create table t12(id int(<span class="number">8</span>));</span><br><span class="line">insert into t12 values(<span class="number">123456789</span>);</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">特例:只有整型括号里面的数字不是表示限制位数</span></span><br><span class="line"><span class="string">id int(8)</span></span><br><span class="line"><span class="string">	如果数字没有超出8位 那么默认用空格填充至8位</span></span><br><span class="line"><span class="string">	如果数字超出了8位 那么有几位就存几位(但是还是要遵守最大范围)</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">create table t13(id int(<span class="number">8</span>) unsigned zerofill);</span><br><span class="line"><span class="comment"># 用0填充至8位</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 总结:</span></span><br><span class="line">针对整型字段 括号内无需指定宽度 因为它默认的宽度以及足够显示所有的数据了</span><br></pre></td></tr></table></figure>

<h3 id="严格模式"><a href="#严格模式" class="headerlink" title="严格模式"></a>严格模式</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 如何查看严格模式</span></span><br><span class="line">show variables like <span class="string">"%mode"</span>;</span><br><span class="line"></span><br><span class="line">模糊匹配/查询</span><br><span class="line">	关键字 like</span><br><span class="line">		%:匹配任意多个字符</span><br><span class="line">        _:匹配任意单个字符</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改严格模式</span></span><br><span class="line">	set session  只在当前窗口有效</span><br><span class="line">    set <span class="keyword">global</span>   全局有效</span><br><span class="line">    </span><br><span class="line">    set <span class="keyword">global</span> sql_mode = <span class="string">'STRICT_TRANS_TABLES'</span>;</span><br><span class="line">    </span><br><span class="line">    修改完之后 重新进入服务端即可</span><br></pre></td></tr></table></figure>

<h3 id="浮点型"><a href="#浮点型" class="headerlink" title="浮点型"></a>浮点型</h3><ul>
<li><p>分类</p>
<p>FLOAT、DOUBLE、DECIMAL</p>
</li>
<li><p>作用</p>
<p>身高、体重、薪资</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 存储限制</span></span><br><span class="line">float(<span class="number">255</span>,<span class="number">30</span>)  <span class="comment"># 总共255位 小数部分占30位</span></span><br><span class="line">double(<span class="number">255</span>,<span class="number">30</span>)  <span class="comment"># 总共255位 小数部分占30位</span></span><br><span class="line">decimal(<span class="number">65</span>,<span class="number">30</span>)  <span class="comment"># 总共65位 小数部分占30位</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 精确度验证</span></span><br><span class="line">create table t15(id float(<span class="number">255</span>,<span class="number">30</span>));</span><br><span class="line">create table t16(id double(<span class="number">255</span>,<span class="number">30</span>));</span><br><span class="line">create table t17(id decimal(<span class="number">65</span>,<span class="number">30</span>));</span><br><span class="line"><span class="string">"""你们在前期不要给我用反向键 所有的命令全部手敲！！！增加熟练度"""</span></span><br><span class="line"></span><br><span class="line">insert into t15 values(<span class="number">1.111111111111111111111111111111</span>);</span><br><span class="line">insert into t16 values(<span class="number">1.111111111111111111111111111111</span>);</span><br><span class="line">insert into t17 values(<span class="number">1.111111111111111111111111111111</span>);</span><br><span class="line"></span><br><span class="line">float &lt; double &lt; decimal</span><br><span class="line"><span class="comment"># 要结合实际应用场景 三者都能使用</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="字符类型"><a href="#字符类型" class="headerlink" title="字符类型"></a>字符类型</h3><ul>
<li><p>分类</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">char</span></span><br><span class="line"><span class="string">	定长</span></span><br><span class="line"><span class="string">	char(4)	 数据超过四个字符直接报错 不够四个字符空格补全</span></span><br><span class="line"><span class="string">varchar</span></span><br><span class="line"><span class="string">	变长</span></span><br><span class="line"><span class="string">	varchar(4)  数据超过四个字符直接报错 不够有几个存几个</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">create table t18(name char(<span class="number">4</span>));</span><br><span class="line">create table t19(name varchar(<span class="number">4</span>));</span><br><span class="line"></span><br><span class="line">insert into t18 values(<span class="string">'a'</span>);</span><br><span class="line">insert into t19 values(<span class="string">'a'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment"># 介绍一个小方法 char_length统计字段长度</span></span><br><span class="line">select char_length(name) <span class="keyword">from</span> t18;</span><br><span class="line">select char_length(name) <span class="keyword">from</span> t19;</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">首先可以肯定的是 char硬盘上存的绝对是真正的数据 带有空格的</span></span><br><span class="line"><span class="string">但是在显示的时候MySQL会自动将多余的空格剔除</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 再次修改sql_mode 让MySQL不要做自动剔除操作</span></span><br><span class="line">set <span class="keyword">global</span> sql_mode = <span class="string">'STRICT_TRANS_TABLES,PAD_CHAR_TO_FULL_LENGTH'</span>;</span><br></pre></td></tr></table></figure>

<h3 id="char与varchar对比"><a href="#char与varchar对比" class="headerlink" title="char与varchar对比"></a>char与varchar对比</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">char</span></span><br><span class="line"><span class="string">	缺点:浪费空间</span></span><br><span class="line"><span class="string">	优点:存取都很简单</span></span><br><span class="line"><span class="string">		直接按照固定的字符存取数据即可</span></span><br><span class="line"><span class="string">		jason egon alex wusir tank </span></span><br><span class="line"><span class="string">		存按照五个字符存 取也直接按照五个字符取</span></span><br><span class="line"><span class="string">		</span></span><br><span class="line"><span class="string">varchar</span></span><br><span class="line"><span class="string">	优点:节省空间</span></span><br><span class="line"><span class="string">	缺点:存取较为麻烦</span></span><br><span class="line"><span class="string">		1bytes+jason 1bytes+egon 1bytes+alex 1bytes+tank </span></span><br><span class="line"><span class="string">		</span></span><br><span class="line"><span class="string">		存的时候需要制作报头</span></span><br><span class="line"><span class="string">		取的时候也需要先读取报头 之后才能读取真实数据</span></span><br><span class="line"><span class="string">		</span></span><br><span class="line"><span class="string">以前基本上都是用的char 其实现在用varchar的也挺多</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">补充:</span><br><span class="line">    进来公司之后你完全不需要考虑字段类型和字段名</span><br><span class="line">    因为产品经理给你发的邮件上已经全部指明了</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="时间类型"><a href="#时间类型" class="headerlink" title="时间类型"></a>时间类型</h3><ul>
<li><p>分类</p>
<p>date:年月日 2020-5-4</p>
<p>datetime:年月日时分秒 2020-5-4 11:11:11</p>
<p>time:时分秒11:11:11</p>
<p>Year:2020</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">create table student(</span><br><span class="line">	id int,</span><br><span class="line">    name varchar(<span class="number">16</span>),</span><br><span class="line">    born_year year,</span><br><span class="line">    birth date,</span><br><span class="line">    study_time time,</span><br><span class="line">    reg_time datetime</span><br><span class="line">);</span><br><span class="line">insert into student values(<span class="number">1</span>,<span class="string">'egon'</span>,<span class="string">'1880'</span>,<span class="string">'1880-11-11'</span>,<span class="string">'11:11:11'</span>,<span class="string">'2020-11-11 11:11:11'</span>);</span><br><span class="line"></span><br><span class="line">ps:插入的时间是有限制的<span class="number">1900</span>年前不能添加</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="枚举与集合类型"><a href="#枚举与集合类型" class="headerlink" title="枚举与集合类型"></a>枚举与集合类型</h3><ul>
<li><p>分类</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">枚举(enum)  多选一</span></span><br><span class="line"><span class="string">集合(set)   多选多</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>具体使用</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">create table user(</span><br><span class="line">	id int,</span><br><span class="line">    name char(<span class="number">16</span>),</span><br><span class="line">    gender enum(<span class="string">'male'</span>,<span class="string">'female'</span>,<span class="string">'others'</span>)</span><br><span class="line">);</span><br><span class="line">insert into user values(<span class="number">1</span>,<span class="string">'jason'</span>,<span class="string">'male'</span>);  正常</span><br><span class="line">insert into user values(<span class="number">2</span>,<span class="string">'egon'</span>,<span class="string">'xxxxooo'</span>);  报错</span><br><span class="line"><span class="comment"># 枚举字段 后期在存数据的时候只能从枚举里面选择一个存储 </span></span><br><span class="line"></span><br><span class="line">create table teacher(</span><br><span class="line">	id int,</span><br><span class="line">    name char(<span class="number">16</span>),</span><br><span class="line">    gender enum(<span class="string">'male'</span>,<span class="string">'female'</span>,<span class="string">'others'</span>),</span><br><span class="line">    hobby set(<span class="string">'read'</span>,<span class="string">'DBJ'</span>,<span class="string">'hecha'</span>)</span><br><span class="line">);</span><br><span class="line">insert into teacher values(<span class="number">1</span>,<span class="string">'jason'</span>,<span class="string">'male'</span>,<span class="string">'read'</span>);  正常</span><br><span class="line">insert into teacher values(<span class="number">2</span>,<span class="string">'egon'</span>,<span class="string">'female'</span>,<span class="string">'DBJ,hecha'</span>);  正常</span><br><span class="line">insert into teacher values(<span class="number">3</span>,<span class="string">'tank'</span>,<span class="string">'others'</span>,<span class="string">'生蚝'</span>); 报错</span><br><span class="line"><span class="comment"># 集合可以只写一个  但是不能写没有列举的</span></span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>[初识数据库与mysql安装]</title>
    <url>/2020/03/09/%E5%88%9D%E8%AF%86%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%8Emysql%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h1 id="day44-mysql安装"><a href="#day44-mysql安装" class="headerlink" title="day44_mysql安装"></a>day44_mysql安装</h1><h1 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h1><h3 id="存储数据的演变过程"><a href="#存储数据的演变过程" class="headerlink" title="存储数据的演变过程"></a>存储数据的演变过程</h3><ul>
<li><p>随意的存到一个文件中、数据格式也是千差万别的完全取决于我们自己</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string"># 小李</span></span><br><span class="line"><span class="string">jason|123|NB</span></span><br><span class="line"><span class="string"># 小王</span></span><br><span class="line"><span class="string">egon-123-DBJ</span></span><br><span class="line"><span class="string"># 小红</span></span><br><span class="line"><span class="string">tank~123~hecha</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>软件开发目录规范</p>
<p>限制了存储数据的具体位置</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">bin</span></span><br><span class="line"><span class="string">conf</span></span><br><span class="line"><span class="string">core</span></span><br><span class="line"><span class="string">db</span></span><br><span class="line"><span class="string">lib</span></span><br><span class="line"><span class="string">readme</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<p>假设上述是一个单机游戏</p>
<p>那么每个人的游戏记录只会在自己的计算机上面保存</p>
<p>注册登录的账号也只能在自己的计算机上有效</p>
</li>
<li><p>如何将单机变成连网</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">将数据库保存部分全部统一起来</span></span><br><span class="line"><span class="string">所有人操作数据都来一个地方操作</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="数据库的本质"><a href="#数据库的本质" class="headerlink" title="数据库的本质"></a>数据库的本质</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">本质其实就是一款基于网络通信的应用程序</span></span><br><span class="line"><span class="string">那其实每个人都可以开发一款数据库软件 因为它仅仅就是一个基于网络通信的应用程序</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">也就意味着数据库软件其实有很多很多</span></span><br><span class="line"><span class="string">	关系型数据库</span></span><br><span class="line"><span class="string">		MySQL、oracle、db2、access、sql server</span></span><br><span class="line"><span class="string">	非关系型数据库</span></span><br><span class="line"><span class="string">		redis、mongodb、memcache</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment"># 关系型</span></span><br><span class="line">	<span class="number">1</span> 数据之间彼此有关系或者约束</span><br><span class="line">    	男生表和前女友表</span><br><span class="line">  <span class="number">2</span> 存储数据的表现形式通常是以表格存储	</span><br><span class="line">    	name     password		hobby</span><br><span class="line">        jason	  <span class="number">123</span>			学习</span><br><span class="line">        egon	  <span class="number">123</span>			女教练</span><br><span class="line">        tank	  <span class="number">123</span>			吃生蚝</span><br><span class="line">        每个字段还会有存储类型的限制</span><br><span class="line">        比如姓名只能存字符串...</span><br><span class="line"><span class="comment"># 非关系型</span></span><br><span class="line">	存储数据通常都是以k,v键值对的形式</span><br></pre></td></tr></table></figure>

<h3 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">任何基于网络通信的应用程序底层用的都是socket</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">-服务端</span></span><br><span class="line"><span class="string">	-基于socket通信</span></span><br><span class="line"><span class="string">	-收发消息</span></span><br><span class="line"><span class="string">	-SQL语句</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">-客户端</span></span><br><span class="line"><span class="string">	-基于socket通信</span></span><br><span class="line"><span class="string">	-收发消息</span></span><br><span class="line"><span class="string">	-SQL语句</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">MySQL不单单支持MySQL自己的客户端app还支持其他编程语言来充当客户端操作</span><br><span class="line">	如何解决语言沟通的障碍？</span><br><span class="line">    	<span class="comment"># 1 让服务端兼容所有的语言(一个人精通多国语言)</span></span><br><span class="line">        <span class="comment"># 2 采用统一的语言(SQL语句)</span></span><br></pre></td></tr></table></figure>

<h3 id="重要概念介绍"><a href="#重要概念介绍" class="headerlink" title="重要概念介绍"></a>重要概念介绍</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">库 			》》》			 文件夹</span></span><br><span class="line"><span class="string">表			》》》			 文件</span></span><br><span class="line"><span class="string">记录		   》》》			文件内一行行的数据</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    	name     password		hobby</span></span><br><span class="line"><span class="string">        jason	  123			学习</span></span><br><span class="line"><span class="string">        egon	  123			女教练</span></span><br><span class="line"><span class="string">        tank	  123			吃生蚝</span></span><br><span class="line"><span class="string">表头				表格的第一行字段</span></span><br><span class="line"><span class="string">字段				name、password、hobby</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<h3 id="MySQL的安装"><a href="#MySQL的安装" class="headerlink" title="MySQL的安装"></a>MySQL的安装</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">在IT界 一般都不会轻易的使用最新版本的软件，因为新版本可能会出现各种问题</span></span><br><span class="line"><span class="string">(你原本项目跑的好好的 非要画蛇添足更新版本 然后项目奔溃)</span></span><br><span class="line"><span class="string">小段子:</span></span><br><span class="line"><span class="string">	更新完没事 那么你还是一个普通员工</span></span><br><span class="line"><span class="string">	更新完出事 那么你就是一名"烈士"</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment"># MySQL有很多版本(5.6、5.7、8.0) 目前企业里面用的比较多的还是5.6左右</span></span><br></pre></td></tr></table></figure>

<p>参考网站:<a href="https://www.mysql.com/" target="_blank" rel="noopener">https://www.mysql.com/</a></p>
<p>下载5.6版本即可，如果你下载了其他版本问题也不大，因为sql语句是一样的学</p>
<p>按照教学方式下载，会将服务端和客户端一并下载到本地</p>
<p>为了学习方便我们将服务端和客户端都在本地启动，后期到了公司服务端会专门跑在一台服务器上，所有人基于网络连接服务端操作</p>
<h3 id="MySQL服务端与客户端"><a href="#MySQL服务端与客户端" class="headerlink" title="MySQL服务端与客户端"></a>MySQL服务端与客户端</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">服务端</span></span><br><span class="line"><span class="string">mysqld.exe</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">客户端</span></span><br><span class="line"><span class="string">mysql.exe</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<p><strong>注意</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">在前期配置MySQL的时候 cmd终端尽量以管理员的身份运行</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">windows+r 输入cmd  进入的是普通用户终端 有一些命令是无法执行的</span></span><br><span class="line"><span class="string">搜索cmd右键 以管理员身份运行</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><ul>
<li><p>先切换到mysqld所在的bin目录下，然后输入mysqld即可</p>
</li>
<li><p>保留原来的cmd窗口重新打开一个</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">常见软件的默认端口号</span></span><br><span class="line"><span class="string">	MySQL  3306</span></span><br><span class="line"><span class="string">	redis  6379</span></span><br><span class="line"><span class="string">	mongodb 27017</span></span><br><span class="line"><span class="string">	django  8000</span></span><br><span class="line"><span class="string">	flask   5000</span></span><br><span class="line"><span class="string">	...</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">MySQL第一次以管理员身份进入是没有密码的 直接回车即可</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">客户端连接服务端完整命令</span></span><br><span class="line"><span class="string">	mysql -h 127.0.0.1 -P 3306 -uroot -p</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="sql语句初识"><a href="#sql语句初识" class="headerlink" title="sql语句初识"></a>sql语句初识</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">1 MySQL中的sql语句是以分号作为结束的标志</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">2 基本命令</span></span><br><span class="line"><span class="string">	show databases;  查看所有的库名</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">3 连接服务端的命令可以简写</span></span><br><span class="line"><span class="string">	mysql -uroot -p</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">4 当你输入的命令不对 又不想让服务端执行并返回报错信息 可以用\c取消</span></span><br><span class="line"><span class="string">	错误命令  \c</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">5 客户端退出  退出命令加不加分号都可以执行</span></span><br><span class="line"><span class="string">	quit</span></span><br><span class="line"><span class="string">	exit</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">6 当你在连接服务端的时候 发现只输入mysql也能连接</span></span><br><span class="line"><span class="string">	但是你不是管理员身份 而只是一个游客模式</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<h3 id="环境变量配置及系统服务制作"><a href="#环境变量配置及系统服务制作" class="headerlink" title="环境变量配置及系统服务制作"></a>环境变量配置及系统服务制作</h3><p>小知识点补充</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">1 如何查看当前具体进程</span></span><br><span class="line"><span class="string">	tasklist</span></span><br><span class="line"><span class="string">	tasklist |findstr mysqld</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">2 如何杀死具体进程(只有在管理员cmd窗口下才能成功)</span></span><br><span class="line"><span class="string">	taskkill /F /PID PID号</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<p><strong>环境变量配置</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">每次启动mysqld需要先切到对应的文件路径下才能操作太多繁琐</span></span><br><span class="line"><span class="string">将mysqld所在的文件路径添加到系统环境变量中</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<p>还是繁琐 需要起两个cmd窗口 不好</p>
<p>将mysql服务端制作成系统服务(开机自启动)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">查看当前计算机的运行进程数</span></span><br><span class="line"><span class="string">	services.msc</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">将mysql制作成系统服务</span></span><br><span class="line"><span class="string">	mysqld --install</span></span><br><span class="line"><span class="string">移除mysql系统服务</span></span><br><span class="line"><span class="string">	mysqld --remove</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<h3 id="设置密码"><a href="#设置密码" class="headerlink" title="设置密码"></a>设置密码</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">mysqladmin -uroot -p原密码 password 新密码</span></span><br><span class="line"><span class="string">改命令直接在终端输入即可 无序进入客户端</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">mysqladmin -uroot -p123 password 123456</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<h3 id="破解密码"><a href="#破解密码" class="headerlink" title="破解密码"></a>破解密码</h3><p>出去玩了好几个月，回来返现密码忘了，死活进不去</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">你可以将mysql获取用户名和密码校验的功能看成是一个装饰器</span></span><br><span class="line"><span class="string">装饰在了客户端请求访问的功能上</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">我们如果将该装饰器移除 那么mysql服务端就不会校验用户名和密码了</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment"># 1 先关闭当前mysql服务端</span></span><br><span class="line"> 命令行的方式启动(让mysql跳过用户名密码验证功能)</span><br><span class="line"> mysqld --skip-grant-tables  </span><br><span class="line"><span class="comment"># 2 直接以无密码的方式连接</span></span><br><span class="line">	mysql -uroot -p   直接回车</span><br><span class="line"><span class="comment"># 3 修改当前用户的密码</span></span><br><span class="line">	update mysql.user set password=password(<span class="number">123456</span>) where 		user=<span class="string">'root'</span> <span class="keyword">and</span> host=<span class="string">'localhost'</span>;</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">真正存储用户表的密码字段 存储的肯定是密文 </span></span><br><span class="line"><span class="string">只有用户自己知道明文是什么 其他人都不知道 这样更加的安全</span></span><br><span class="line"><span class="string">密码比对也只能比对密文</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment"># 4 立刻将修改数据刷到硬盘</span></span><br><span class="line">	flush privileges;</span><br><span class="line"><span class="comment"># 5 关闭当前服务端 然后以正常校验授权表的形式启动</span></span><br></pre></td></tr></table></figure>

<h3 id="统一编码"><a href="#统一编码" class="headerlink" title="统一编码"></a>统一编码</h3><ul>
<li><p>mysql默认的配置文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">my-default.ini </span></span><br><span class="line"><span class="string">ini结尾的一般都是配置文件</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">程序启动会先加载配置文件中的配置之后才真正的启动</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">[mysqld]  <span class="comment"># 一旦服务端启动立刻加载下面的配置</span></span><br><span class="line">sql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES </span><br><span class="line">[mysql]  <span class="comment"># 一旦客户端启动立刻加载下面的配置</span></span><br><span class="line">...</span><br><span class="line">[client]  <span class="comment"># 其他客户端</span></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 需要你自己新建一个my.ini的配置文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证配置是否真的是自动加载</span></span><br><span class="line">[mysql]</span><br><span class="line">print(<span class="string">'hello world'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改配置文件后一定要重启服务才能生效</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 统一编码的配置 无需掌握 直接拷贝即可</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 偷懒 将管理员的用户名和密码也添加到配置文件中</span></span><br><span class="line">[mysqld]</span><br><span class="line">character-set-server=utf8</span><br><span class="line">collation-server=utf8_general_ci</span><br><span class="line">[client]</span><br><span class="line">default-character-set=utf8</span><br><span class="line">[mysql]</span><br><span class="line">user=<span class="string">"root"</span></span><br><span class="line">password=<span class="number">123456</span></span><br><span class="line">default-character-set=utf8</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="基本sql语句"><a href="#基本sql语句" class="headerlink" title="基本sql语句"></a>基本sql语句</h3><p>PS:大部分程序的业务逻辑其实都是增删改查</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">辛辛苦苦一个月 只为了一条sql语句(将自己账户的钱修改一下)</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<p><strong>针对库的增删改查(文件夹)</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 增</span></span><br><span class="line">create database db1;</span><br><span class="line">create database db2 charset=<span class="string">'gbk'</span>;</span><br><span class="line"><span class="comment"># 查</span></span><br><span class="line">show databases;  <span class="comment"># 查所有</span></span><br><span class="line">show create database db1;  <span class="comment"># 查单个</span></span><br><span class="line"><span class="comment"># 改</span></span><br><span class="line">alter database db2 charset=<span class="string">'utf8'</span>;</span><br><span class="line"><span class="comment"># 删</span></span><br><span class="line">drop database db2;</span><br></pre></td></tr></table></figure>

<p><strong>针对表的增删改查(文件)</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">在操作表(文件)的时候 需要指定所在的库(文件夹)</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment"># 查看当前所在的库的名字</span></span><br><span class="line">select database();</span><br><span class="line"><span class="comment"># 切换库</span></span><br><span class="line">use db1; </span><br><span class="line"></span><br><span class="line"><span class="comment"># 增</span></span><br><span class="line">create table t1(id int,name char(<span class="number">4</span>));</span><br><span class="line"><span class="comment"># 查</span></span><br><span class="line">show tables;  <span class="comment"># 查看当前库下面所有的表名</span></span><br><span class="line">show create table t1;</span><br><span class="line">describe t1;  <span class="comment"># 支持简写 desc t1;</span></span><br><span class="line"><span class="comment"># 改</span></span><br><span class="line">alter table t1 modify name char(<span class="number">16</span>);</span><br><span class="line"><span class="comment"># 删</span></span><br><span class="line">drop table t1;</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">create table db2.t1(id int);  也可以用绝对路径的形式操作不同的库</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<p><strong>针对数据的增删改查(一行行数据)</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">一定要先有库 有表 最后才能操作记录</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment"># 增</span></span><br><span class="line">insert into t1 values(<span class="number">1</span>,<span class="string">'jason'</span>);</span><br><span class="line">insert into t1 values(<span class="number">1</span>,<span class="string">'jason'</span>),(<span class="number">2</span>,<span class="string">'egon'</span>),(<span class="number">3</span>,<span class="string">'tank'</span>);</span><br><span class="line"><span class="comment"># 查</span></span><br><span class="line">select * <span class="keyword">from</span> t1;  <span class="comment"># 该命令当数据量特别大的时候不建议使用</span></span><br><span class="line">select name <span class="keyword">from</span> t1;</span><br><span class="line"><span class="comment"># 改</span></span><br><span class="line">update t1 set name=<span class="string">'DSB'</span> where id &gt; <span class="number">1</span>;</span><br><span class="line"><span class="comment"># 删</span></span><br><span class="line">delete <span class="keyword">from</span> t1 where id &gt; <span class="number">1</span>;</span><br><span class="line">delete <span class="keyword">from</span> t1 where name=<span class="string">'jason'</span>;</span><br><span class="line"><span class="comment"># 将表所有的数据清空</span></span><br><span class="line">delete <span class="keyword">from</span> t1;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>[vue客户端项目搭建]</title>
    <url>/2020/02/26/vue%E5%AE%A2%E6%88%B7%E7%AB%AF%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h1 id="2-客户端项目搭建"><a href="#2-客户端项目搭建" class="headerlink" title="2. 客户端项目搭建"></a>2. 客户端项目搭建</h1><h2 id="2-1-创建项目目录"><a href="#2-1-创建项目目录" class="headerlink" title="2.1 创建项目目录"></a>2.1 创建项目目录</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> 项目目录[荏苒资讯]</span><br><span class="line">vue init webpack renran</span><br></pre></td></tr></table></figure>

<p>例如，我要把项目保存在桌面下的子目录renran ~/Desktop/renran，可以如下操作：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> Desktop/renran</span><br><span class="line">vue init webpack renran_pc</span><br></pre></td></tr></table></figure>

<p><img src="/images/1581901045861.png" alt=""></p>
<p>打开项目已经，在pycharm的终端下运行vue项目，查看效果。</p>
<p><img src="/images/1581901177538.png" alt=""></p>
<p><img src="/images/1581901225429.png" alt=""></p>
<p>上面的操作步骤，等同于执行了下面这句命令。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure>

<p>接下来，我们根据终端上效果显示的对应地址来访问项目(如果有多个vue项目在运行，8080端口被占据了，服务器会自动改端口，所以根据自己实际在操作中看到的地址来访问。)</p>
<p>访问：<a href="http://localost:8080" target="_blank" rel="noopener">http://localost:8080</a></p>
<p><img src="/images/1581901294089.png" alt=""></p>
<h2 id="2-2-初始化项目"><a href="#2-2-初始化项目" class="headerlink" title="2.2 初始化项目"></a>2.2 初始化项目</h2><p>清除默认的HelloWorld.vue组件和APP.vue中的默认模板代码和默认css样式</p>
<p><img src="/images/1581901419680.png" alt=""></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line"></span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  name: <span class="string">'App'</span>,</span><br><span class="line">  components: &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;style&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;/</span>style&gt;</span><br></pre></td></tr></table></figure>

<p>接下来，我们可以查看效果了，一张白纸~</p>
<p><img src="/images/1556414476287.png" alt=""></p>
<h2 id="2-3-安装路由vue-router"><a href="#2-3-安装路由vue-router" class="headerlink" title="2.3 安装路由vue-router"></a>2.3 安装路由vue-router</h2><p>官方文档：<a href="https://router.vuejs.org/zh/" target="_blank" rel="noopener">https://router.vuejs.org/zh/</a></p>
<h3 id="2-3-1-下载安装路由组件"><a href="#2-3-1-下载安装路由组件" class="headerlink" title="2.3.1 下载安装路由组件"></a>2.3.1 下载安装路由组件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i vue-router -S<span class="comment"># npm install vue-router --save</span></span><br></pre></td></tr></table></figure>

<h3 id="2-3-2-配置路由"><a href="#2-3-2-配置路由" class="headerlink" title="2.3.2 配置路由"></a>2.3.2 配置路由</h3><h3 id="2-3-2-1-初始化路由对象"><a href="#2-3-2-1-初始化路由对象" class="headerlink" title="2.3.2.1 初始化路由对象"></a>2.3.2.1 初始化路由对象</h3><p>在src目录下创建routes路由目录，在router目录下创建index.js路由文件</p>
<p>index.js路由文件中，编写初始化路由对象的代码 .</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">// <span class="number">1.</span> 引入vue和vue-router组件核心对象，并在vue中通过use注册vue-router组件</span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">"vue"</span>;</span><br><span class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">"vue-router"</span>;</span><br><span class="line"></span><br><span class="line">Vue.use(Router);</span><br><span class="line"></span><br><span class="line">// <span class="number">2.</span> 暴露vue-router对象，并在vue-router里面编写路由，提供给main.js调用</span><br><span class="line">export default new Router(&#123;</span><br><span class="line">  // 设置路由模式为‘history’，去掉默认的<span class="comment">#</span></span><br><span class="line">  mode: <span class="string">"history"</span>,</span><br><span class="line">  routes:[</span><br><span class="line">    // 路由列表</span><br><span class="line">	</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="2-3-2-2-注册路由信息"><a href="#2-3-2-2-注册路由信息" class="headerlink" title="2.3.2.2 注册路由信息"></a>2.3.2.2 注册路由信息</h3><p>打开main.js文件，把router路由规则对象注册到vue中，代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">// The Vue build version to load <span class="keyword">with</span> the `<span class="keyword">import</span>` command</span><br><span class="line">// (runtime-only <span class="keyword">or</span> standalone) has been set <span class="keyword">in</span> webpack.base.conf <span class="keyword">with</span> an alias.</span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App'</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">'./router/index'</span>;</span><br><span class="line"></span><br><span class="line">Vue.config.productionTip = false</span><br><span class="line"></span><br><span class="line">/* eslint-disable no-new */</span><br><span class="line">new Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  router,</span><br><span class="line">  components: &#123; App &#125;,</span><br><span class="line">  template: <span class="string">'&lt;App/&gt;'</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="2-3-2-3-在视图中显示路由对应的内容"><a href="#2-3-2-3-在视图中显示路由对应的内容" class="headerlink" title="2.3.2.3 在视图中显示路由对应的内容"></a>2.3.2.3 在视图中显示路由对应的内容</h3><p>在App.vue组件中，添加显示路由对应的内容。代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 标签名必须是这个rouer-view --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">  name: <span class="string">'App'</span>,</span></span><br><span class="line">  components: &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>注意：如果在vue创建项目的时候，设置安装vue-router，则项目会自动帮我们生成上面的router目录和index.js里面的代码，以及自动到main.js里面注册路由对象。</p>
<h3 id="2-3-3-路由对象提供的操作"><a href="#2-3-3-路由对象提供的操作" class="headerlink" title="2.3.3 路由对象提供的操作"></a>2.3.3 路由对象提供的操作</h3><p>在我们安装注册了vue-router组件以后，vue-router在vue项目中会帮我们在全局范围内所有组件里面创建2个对象给我们使用：</p>
<ol>
<li><code>this.$router</code>，可用于在js代码中进行页面跳转。</li>
<li><code>this.$route</code>，可用于获取地址栏上面的url参数。</li>
</ol>
<h3 id="2-3-3-1-页面跳转"><a href="#2-3-3-1-页面跳转" class="headerlink" title="2.3.3.1 页面跳转"></a>2.3.3.1 页面跳转</h3><p>在vue-router提供的操作中， 进行页面跳转有2种方式：</p>
<ol>
<li><p>使用<code>&lt;router-link to=&quot;url地址&quot;&gt;</code>来跳转</p>
</li>
<li><p>在<code>&lt;script&gt;</code>中使用<code>this.$router.push(url地址)</code>来跳转</p>
<p>在<code>&lt;script&gt;</code>中还可以使用<code>this.$router.go(整数)</code>，表示跳转返回上一页或者上几页，下一个或者下几页</p>
</li>
</ol>
<h3 id="2-3-3-1-1-router-link标签"><a href="#2-3-3-1-1-router-link标签" class="headerlink" title="2.3.3.1.1 router-link标签"></a>2.3.3.1.1 router-link标签</h3><p>例如，我们就可以在Home.vue组件中，使用router-link跳转到User.vue组件中。</p>
<p>routes/index.js，代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">// <span class="number">1.</span> 引入vue和vue-router组件核心对象，并在vue中通过use注册vue-router组件</span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">"vue"</span>;</span><br><span class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">"vue-router"</span>;</span><br><span class="line"></span><br><span class="line">Vue.use(Router); // Router是类</span><br><span class="line">// <span class="number">2.</span> 暴露vue-router对象，并在vue-router里面编写路由，提供给main.js调用</span><br><span class="line"></span><br><span class="line">// 导入组件</span><br><span class="line">// <span class="keyword">import</span> 组件名 <span class="keyword">from</span> <span class="string">"../components/组件名"</span></span><br><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">"../components/Home"</span>;</span><br><span class="line"><span class="keyword">import</span> User <span class="keyword">from</span> <span class="string">"../components/User"</span>;</span><br><span class="line"></span><br><span class="line">export default new Router(&#123;</span><br><span class="line">  mode:<span class="string">"history"</span>,  // 路由地址的显示模式： 默认hash，表示地址栏上面出现<span class="comment">#</span></span><br><span class="line">  routes:[</span><br><span class="line">    // &#123;</span><br><span class="line">    //   name:<span class="string">"路由名称[对应组件的name值，将来用于跳转页面]"</span>,</span><br><span class="line">    //   path: <span class="string">"访问url路径"</span>,</span><br><span class="line">    //   component: 组件名</span><br><span class="line">    // &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      name:<span class="string">"Home"</span>,</span><br><span class="line">      path: <span class="string">"/"</span>,</span><br><span class="line">      component: Home</span><br><span class="line">    &#125;,&#123;</span><br><span class="line">      name:<span class="string">"User"</span>,</span><br><span class="line">      path: <span class="string">"/user"</span>,</span><br><span class="line">      component: User</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// vue-router除了可以进行组件和url地址的绑定以外，还可以</span><br><span class="line">// 进行不同组件的页面跳转，</span><br></pre></td></tr></table></figure>

<p>Home.vue代码：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      首页页面组件</span><br><span class="line">      &lt;a href=<span class="string">"/user"</span>&gt;个人中心&lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp">      &lt;!-- router-link标签，本质上就是a标签，只是由vue-router进行加工处理</span></span><br><span class="line"><span class="regexp">      可以显示局部页面刷新，不会重新加载内容，进行ajax跳转</span></span><br><span class="line"><span class="regexp">       --&gt;</span></span><br><span class="line"><span class="regexp">      &lt;router-link to="/u</span>ser<span class="string">"&gt;个人中心&lt;/router-link&gt;</span></span><br><span class="line"><span class="string">      &lt;router-link :to="</span>url<span class="string">"&gt;个人中心&lt;/router-link&gt;</span></span><br><span class="line"><span class="string">      &lt;router-link :to="</span>&#123;<span class="attr">name</span>:<span class="string">'User'</span>&#125;<span class="string">"&gt;个人中心&lt;/router-link&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;/template&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;script&gt;</span></span><br><span class="line"><span class="string">    export default &#123;</span></span><br><span class="line"><span class="string">        name: "</span>Home<span class="string">",</span></span><br><span class="line"><span class="string">        data()&#123;</span></span><br><span class="line"><span class="string">          return &#123;</span></span><br><span class="line"><span class="string">              url: "</span>/user<span class="string">",</span></span><br><span class="line"><span class="string">          &#125;</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        methods:&#123;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;style scoped&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;/style&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/images/1581908101280.png" alt=""></p>
<h3 id="2-3-3-1-2-this-router-push-跳转"><a href="#2-3-3-1-2-this-router-push-跳转" class="headerlink" title="2.3.3.1.2 this.$router.push()跳转"></a>2.3.3.1.2 <code>this.$router.push()</code>跳转</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      首页页面组件</span><br><span class="line">      &lt;a href=<span class="string">"/user"</span>&gt;个人中心&lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp">      &lt;!-- router-link标签，本质上就是a标签，只是由vue-router进行加工处理</span></span><br><span class="line"><span class="regexp">      可以显示局部页面刷新，不会重新加载内容，进行ajax跳转</span></span><br><span class="line"><span class="regexp">       --&gt;</span></span><br><span class="line"><span class="regexp">      &lt;router-link to="/u</span>ser<span class="string">"&gt;个人中心&lt;/router-link&gt;</span></span><br><span class="line"><span class="string">      &lt;router-link :to="</span>url<span class="string">"&gt;个人中心&lt;/router-link&gt;</span></span><br><span class="line"><span class="string">      &lt;router-link :to="</span>&#123;<span class="attr">name</span>:<span class="string">'User'</span>&#125;<span class="string">"&gt;个人中心&lt;/router-link&gt;</span></span><br><span class="line"><span class="string">      &lt;button @click="</span>jump<span class="string">"&gt;个人中心&lt;/button&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;/template&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;script&gt;</span></span><br><span class="line"><span class="string">    export default &#123;</span></span><br><span class="line"><span class="string">        name: "</span>Home<span class="string">",</span></span><br><span class="line"><span class="string">        data()&#123;</span></span><br><span class="line"><span class="string">          return &#123;</span></span><br><span class="line"><span class="string">              url: "</span>/user<span class="string">",</span></span><br><span class="line"><span class="string">          &#125;</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        methods:&#123;</span></span><br><span class="line"><span class="string">          jump()&#123;</span></span><br><span class="line"><span class="string">              // 开发中可以先进行权限，登录之类的判断，然后再进行跳转</span></span><br><span class="line"><span class="string">                // this.$router.back(); // 返回上一页，本质上就是 location.back()</span></span><br><span class="line"><span class="string">                // this.$router.go(-1); // 返回上一页，本质上就是 location.go()</span></span><br><span class="line"><span class="string">                // this.$router.forward(); // 跳转到下一页，本质上就是 location.forward()</span></span><br><span class="line"><span class="string">                this.$router.push("</span>/user<span class="string">"); // 跳转到站内的制定地址页面中，本质上就是 location.href</span></span><br><span class="line"><span class="string">                // 注意,this.$router.push() 不能跳转到其他网站。如果真的要跳转外站，则使用location.href="</span>站外地址，记得加上http:<span class="comment">//协议"</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;style scoped&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;/</span>style&gt;</span><br></pre></td></tr></table></figure>

<h3 id="2-3-3-2-参数传递"><a href="#2-3-3-2-参数传递" class="headerlink" title="2.3.3.2 参数传递"></a>2.3.3.2 参数传递</h3><p><code>vue-router</code>提供了<code>this.$route</code>，可以让我们接收来自其他页面的附带参数。参数有2种：</p>
<ol>
<li><p>查询字符串(<code>query string</code>)，就是地址栏上面<code>?</code>号后面的参数，</p>
<p>例如：<code>http://localhost:8008/user?name=xiaoming&amp;pwd=123</code>，这里<code>name=xiaoming&amp;pwd=123</code>就是查询字符串参数。</p>
</li>
<li><p>路由参数(<code>router params</code>)，就是地址栏上面路由路径的一部分，</p>
<p>例如：<code>http://localhost:8080/user/300/xiaoming</code>，此时，300属于路由路径的一部分，这个300就是路由参数.，当然，xiaoming,或者user也可以理解是路由参数，就是看我们的页面中是否需要接收而已。</p>
</li>
</ol>
<h3 id="2-3-3-2-1-获取查询字符串"><a href="#2-3-3-2-1-获取查询字符串" class="headerlink" title="2.3.3.2.1 获取查询字符串"></a>2.3.3.2.1 获取查询字符串</h3><ol>
<li>必须先有一个页面跳转发送参数。例如，在Home组件中跳转到User组件中，需要传递name和pwd查询字符串。</li>
</ol>
<p>Home.vue代码：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      首页页面组件</span><br><span class="line">&lt;!--      <span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/user"</span>&gt;</span>个人中心<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line">      &amp;lt;!&amp;ndash; router-link标签，本质上就是a标签，只是由vue-router进行加工处理</span><br><span class="line">      可以显示局部页面刷新，不会重新加载内容，进行ajax跳转</span><br><span class="line">       &amp;ndash;&amp;gt;</span><br><span class="line">      &lt;router-link to=<span class="string">"/user"</span>&gt;个人中心&lt;<span class="regexp">/router-link&gt;</span></span><br><span class="line"><span class="regexp">      &lt;router-link :to="url"&gt;个人中心&lt;/</span>router-link&gt;</span><br><span class="line">      &lt;router-link :to=<span class="string">"&#123;name:'User'&#125;"</span>&gt;个人中心&lt;<span class="regexp">/router-link&gt;</span></span><br><span class="line"><span class="regexp">      &lt;button @click="jump"&gt;个人中心&lt;/</span>button&gt;--&gt;</span><br><span class="line"></span><br><span class="line">      &lt;router-link :to=<span class="string">"`/user?name=$&#123;name&#125;&amp;pwd=$&#123;pwd&#125;`"</span>&gt;查询字符串参数&lt;<span class="regexp">/router-link&gt;</span></span><br><span class="line"><span class="regexp">      &lt;router-link :to="'/u</span>ser?name=<span class="string">'+name+'</span>&amp;pwd=<span class="string">'+pwd"&gt;查询字符串参数&lt;/router-link&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;/template&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;script&gt;</span></span><br><span class="line"><span class="string">    export default &#123;</span></span><br><span class="line"><span class="string">        name: "Home",</span></span><br><span class="line"><span class="string">        data()&#123;</span></span><br><span class="line"><span class="string">          return &#123;</span></span><br><span class="line"><span class="string">              name: "xiaoming",</span></span><br><span class="line"><span class="string">              pwd: "123",</span></span><br><span class="line"><span class="string">              url: "/user",</span></span><br><span class="line"><span class="string">          &#125;</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        methods:&#123;</span></span><br><span class="line"><span class="string">          jump()&#123;</span></span><br><span class="line"><span class="string">              // 开发中可以先进行权限，登录之类的判断，然后再进行跳转</span></span><br><span class="line"><span class="string">                // this.$router.back(); // 返回上一页，本质上就是 location.back()</span></span><br><span class="line"><span class="string">                // this.$router.go(-1); // 返回上一页，本质上就是 location.go()</span></span><br><span class="line"><span class="string">                // this.$router.forward(); // 跳转到下一页，本质上就是 location.forward()</span></span><br><span class="line"><span class="string">                this.$router.push("/user"); // 跳转到站内的制定地址页面中，本质上就是 location.href</span></span><br><span class="line"><span class="string">                // 注意,this.$router.push 不能跳转到其他网站。如果真的要跳转外站，则使用location.href="站外地址，记得加上http://协议"</span></span><br><span class="line"><span class="string">          &#125;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;style scoped&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;/style&gt;</span></span><br></pre></td></tr></table></figure>

<ol>
<li>可以下一个页面中，这里代表的就是User组件，接收来自Home组件的参数。</li>
</ol>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      用户中心页面组件</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">        name: <span class="string">"User"</span>,</span><br><span class="line">        created() &#123;</span><br><span class="line">            <span class="comment">// 接收地址栏上面的参数</span></span><br><span class="line">            <span class="comment">// this.$route是vue-router提供的一个用于接收地址参数的对象。</span></span><br><span class="line">            <span class="comment">// 经过main.js里面注册router对象以后，</span></span><br><span class="line">            <span class="comment">// 将来在所有的子组件中，可以通过this.$route来获取参数或者通过this.$router跳转页面</span></span><br><span class="line">            <span class="comment">// 查询字符串参数</span></span><br><span class="line">            <span class="comment">// query是this.$route里面的一个数组，this.$route会自动收集地址栏上所有的参数保存到query里面</span></span><br><span class="line">            <span class="comment">// let name = this.$route.query.name;</span></span><br><span class="line">            <span class="comment">// let pwd = this.$route.query.pwd;</span></span><br><span class="line">            <span class="comment">// console.log(`name=$&#123;name&#125;&amp;pwd=$&#123;pwd&#125;`);  // ``里面，$&#123;&#125;圈住的内容会被js当成变量来解析</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;style scoped&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;/</span>style&gt;</span><br></pre></td></tr></table></figure>

<h3 id="2-3-4-2-获取路由参数"><a href="#2-3-4-2-获取路由参数" class="headerlink" title="2.3.4.2 获取路由参数"></a>2.3.4.2 获取路由参数</h3><p>例如：我们用户的界面都是一样的，但是每一个用户来到自己的页面中，显示的内容肯定都是不一样的，此时，我们需要使用不同的路径来区分不同的用户。这时候，可以在路由路径中使用路由参数表示不同用户的id</p>
<p>例如：我们就需要设置一个route/index.js中路由信息里面，哪一段路由属于路由参数。</p>
<p>src/routes/index.js设置路由参数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">// <span class="number">1.</span> 引入vue和vue-router组件核心对象，并在vue中通过use注册vue-router组件</span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">"vue"</span>;</span><br><span class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">"vue-router"</span>;</span><br><span class="line"></span><br><span class="line">Vue.use(Router); // Router是类</span><br><span class="line">// <span class="number">2.</span> 暴露vue-router对象，并在vue-router里面编写路由，提供给main.js调用</span><br><span class="line"></span><br><span class="line">// 导入组件</span><br><span class="line">// <span class="keyword">import</span> 组件名 <span class="keyword">from</span> <span class="string">"../components/组件名"</span></span><br><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">"../components/Home"</span>;</span><br><span class="line"><span class="keyword">import</span> User <span class="keyword">from</span> <span class="string">"../components/User"</span>;</span><br><span class="line"></span><br><span class="line">export default new Router(&#123;</span><br><span class="line">  mode:<span class="string">"history"</span>,  // 路由地址的显示模式： 默认hash，表示地址栏上面出现<span class="comment">#</span></span><br><span class="line">  routes:[</span><br><span class="line">    // &#123;</span><br><span class="line">    //   name:<span class="string">"路由名称[对应组件的name值，将来用于跳转页面]"</span>,</span><br><span class="line">    //   path: <span class="string">"访问url路径"</span>,</span><br><span class="line">    //   component: 组件名</span><br><span class="line">    // &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      name:<span class="string">"Home"</span>,</span><br><span class="line">      path: <span class="string">"/"</span>,</span><br><span class="line">      component: Home</span><br><span class="line">    &#125;,&#123;</span><br><span class="line">      name:<span class="string">"User"</span>,</span><br><span class="line">      path: <span class="string">"/user/:id/img-:img_id"</span>,</span><br><span class="line">      component: User</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// vue-router除了可以进行组件和url地址的绑定以外，还可以</span><br><span class="line">// 进行不同组件的页面跳转，</span><br></pre></td></tr></table></figure>

<p>然后我们就是在Home中如果需要转到User里面。</p>
<p>Home.vue代码：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      首页页面组件</span><br><span class="line">&lt;!--      <span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/user"</span>&gt;</span>个人中心<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line">      &amp;lt;!&amp;ndash; router-link标签，本质上就是a标签，只是由vue-router进行加工处理</span><br><span class="line">      可以显示局部页面刷新，不会重新加载内容，进行ajax跳转</span><br><span class="line">       &amp;ndash;&amp;gt;</span><br><span class="line">      &lt;router-link to=<span class="string">"/user"</span>&gt;个人中心&lt;<span class="regexp">/router-link&gt;</span></span><br><span class="line"><span class="regexp">      &lt;router-link :to="url"&gt;个人中心&lt;/</span>router-link&gt;</span><br><span class="line">      &lt;router-link :to=<span class="string">"&#123;name:'User'&#125;"</span>&gt;个人中心&lt;<span class="regexp">/router-link&gt;</span></span><br><span class="line"><span class="regexp">      &lt;button @click="jump"&gt;个人中心&lt;/</span>button&gt;--&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--      <span class="xml"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">"`/user?name=$&#123;name&#125;&amp;pwd=$&#123;pwd&#125;`"</span>&gt;</span>查询字符串参数<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span>--&gt;</span><br><span class="line">&lt;!--      <span class="xml"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">"'/user?name='+name+'&amp;pwd='+pwd"</span>&gt;</span>查询字符串参数<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span>--&gt;</span><br><span class="line">      &lt;router-link to=<span class="string">"/user/100/img-10086"</span>&gt;路由参数&lt;<span class="regexp">/router-link&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">    export default &#123;</span></span><br><span class="line"><span class="regexp">        name: "Home",</span></span><br><span class="line"><span class="regexp">        data()&#123;</span></span><br><span class="line"><span class="regexp">          return &#123;</span></span><br><span class="line"><span class="regexp">              name: "xiaoming",</span></span><br><span class="line"><span class="regexp">              pwd: "123",</span></span><br><span class="line"><span class="regexp">              url: "/u</span>ser<span class="string">",</span></span><br><span class="line"><span class="string">          &#125;</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        methods:&#123;</span></span><br><span class="line"><span class="string">          jump()&#123;</span></span><br><span class="line"><span class="string">              // 开发中可以先进行权限，登录之类的判断，然后再进行跳转</span></span><br><span class="line"><span class="string">                // this.$router.back(); // 返回上一页，本质上就是 location.back()</span></span><br><span class="line"><span class="string">                // this.$router.go(-1); // 返回上一页，本质上就是 location.go()</span></span><br><span class="line"><span class="string">                // this.$router.forward(); // 跳转到下一页，本质上就是 location.forward()</span></span><br><span class="line"><span class="string">                this.$router.push("</span>/user<span class="string">"); // 跳转到站内的制定地址页面中，本质上就是 location.href</span></span><br><span class="line"><span class="string">                // 注意,this.$router.push 不能跳转到其他网站。如果真的要跳转外站，则使用location.href="</span>站外地址，记得加上http:<span class="comment">//协议"</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;style scoped&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;/</span>style&gt;</span><br></pre></td></tr></table></figure>

<p>User.vue，组件中可以通过<code>this.$route.params</code>接收路由参数。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      用户中心页面组件</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">        name: <span class="string">"User"</span>,</span><br><span class="line">        created() &#123;</span><br><span class="line">            <span class="comment">// 接收地址栏上面的参数</span></span><br><span class="line">            <span class="comment">// this.$route是vue-router提供的一个用于接收地址参数的对象。</span></span><br><span class="line">            <span class="comment">// 经过main.js里面注册router对象以后，</span></span><br><span class="line">            <span class="comment">// 将来在所有的子组件中，可以通过this.$route来获取参数或者通过this.$router跳转页面</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 查询字符串参数</span></span><br><span class="line">            <span class="comment">// query是this.$route里面的一个数组，this.$route会自动收集地址栏上所有的参数保存到query里面</span></span><br><span class="line">            <span class="comment">// let name = this.$route.query.name;</span></span><br><span class="line">            <span class="comment">// let pwd = this.$route.query.pwd;</span></span><br><span class="line">            <span class="comment">// console.log(`name=$&#123;name&#125;&amp;pwd=$&#123;pwd&#125;`);  // ``里面，$&#123;&#125;圈住的内容会被js当成变量来解析</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 路由参数</span></span><br><span class="line">            <span class="comment">// params是this.$route里面的一个数组，this.$route会自动收集路由列表中已经标记为路由参数所有内容保存到params中</span></span><br><span class="line">            <span class="keyword">let</span> id = <span class="keyword">this</span>.$route.params.id;</span><br><span class="line">            <span class="built_in">console</span>.log(id);</span><br><span class="line">            <span class="keyword">let</span> img_id = <span class="keyword">this</span>.$route.params.img_id;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">`img_id = <span class="subst">$&#123;img_id&#125;</span>`</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;style scoped&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;/</span>style&gt;</span><br></pre></td></tr></table></figure>

<h1 id="3-ElementUI"><a href="#3-ElementUI" class="headerlink" title="3. ElementUI"></a>3. ElementUI</h1><p>对于前端页面布局，我们可以使用一些开源的UI框架来配合开发，常用的UI框: bootstap，H-ui框架，lay-UI框架，Amaze UI，zui框架，ElementUI.</p>
<p>Vue开发前端项目中，比较常用的就是ElementUI了。</p>
<p>ElementUI是饿了么团队开发的一个UI组件框架，这个框架提前帮我们提供了很多已经写好的通用模块，我们可以在Vue项目中引入来使用，这个框架的使用类似于我们前面学习的bootstrap框架，也就是说，我们完全可以把官方文档中的组件代码拿来就用，有定制性的内容，可以直接通过样式进行覆盖修改就可以了。</p>
<p><img src="/images/1552501300174.png" alt=""></p>
<p>中文官网：<a href="http://element-cn.eleme.io/#/zh-CN" target="_blank" rel="noopener">http://element-cn.eleme.io/#/zh-CN</a></p>
<p>文档快速入门：<a href="http://element-cn.eleme.io/#/zh-CN/component/quickstart" target="_blank" rel="noopener">http://element-cn.eleme.io/#/zh-CN/component/quickstart</a></p>
<h3 id="3-1-快速安装ElementUI"><a href="#3-1-快速安装ElementUI" class="headerlink" title="3.1 快速安装ElementUI"></a>3.1 快速安装ElementUI</h3><p>项目根目录执行以下命令:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i element-ui -S</span><br></pre></td></tr></table></figure>

<p>上面的命令等同于 <code>npm install element-ui --save</code></p>
<p>执行命令效果：</p>
<p><img src="/images/1556417812874.png" alt=""></p>
<h3 id="3-2-配置ElementUI到项目中"><a href="#3-2-配置ElementUI到项目中" class="headerlink" title="3.2 配置ElementUI到项目中"></a>3.2 配置ElementUI到项目中</h3><p>在main.js中导入ElementUI，并调用。代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">// elementUI 导入</span><br><span class="line"><span class="keyword">import</span> ElementUI <span class="keyword">from</span> <span class="string">'element-ui'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'element-ui/lib/theme-chalk/index.css'</span>;</span><br><span class="line">// 调用插件</span><br><span class="line">Vue.use(ElementUI);</span><br></pre></td></tr></table></figure>

<p>成功引入了ElementUI以后，接下来我们就可以开始进入前端页面开发，首先是首页。</p>
<h1 id="4-首页"><a href="#4-首页" class="headerlink" title="4. 首页"></a>4. 首页</h1><p>首页采用了上下页面布局，首页是导航栏、轮播图。。。脚部等几个小模块。所以我们可以把首页作为一个组件进行开发，然后把首页的这些小模块作为单独的组件来进行开发。</p>
<h2 id="4-1-创建首页组件"><a href="#4-1-创建首页组件" class="headerlink" title="4.1 创建首页组件"></a>4.1 创建首页组件</h2><p>在src/components目录下创建文件 Home.vue</p>
<p>代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"home"</span>&gt;</span></span><br><span class="line">    首页</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">  name:<span class="string">"Home"</span>,</span></span><br><span class="line">  data()&#123;</span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="4-1-1-创建首页对应的路由"><a href="#4-1-1-创建首页对应的路由" class="headerlink" title="4.1.1 创建首页对应的路由"></a>4.1.1 创建首页对应的路由</h3><p>在router/index.js中引入Home组件，并设置Home组件作为首页路由。</p>
<p>代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">"vue"</span></span><br><span class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">"vue-router"</span></span><br><span class="line"></span><br><span class="line">// 后面这里引入可以被用户访问的页面组件</span><br><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">"../components/Home"</span></span><br><span class="line"></span><br><span class="line">Vue.use(Router);</span><br><span class="line"></span><br><span class="line">export default new Router(&#123;</span><br><span class="line">  // 路由跳转模式，注意使用 history</span><br><span class="line">  mode: <span class="string">"history"</span>,</span><br><span class="line"></span><br><span class="line">  // 路由规则</span><br><span class="line">  routes:[</span><br><span class="line">    &#123;</span><br><span class="line">      // name:<span class="string">"路由别名"</span>,</span><br><span class="line">      name:<span class="string">"Home"</span>,</span><br><span class="line">      // path: <span class="string">"路由地址"</span>,</span><br><span class="line">      path: <span class="string">"/"</span>,</span><br><span class="line">      // component: 组件类名,</span><br><span class="line">      component: Home,</span><br><span class="line">    &#125;,</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端框架</category>
      </categories>
      <tags>
        <tag>vue框架</tag>
      </tags>
  </entry>
  <entry>
    <title>[Vue自动化工具（Vue-cli）]</title>
    <url>/2020/02/25/Vue%E8%87%AA%E5%8A%A8%E5%8C%96%E5%B7%A5%E5%85%B7%EF%BC%88Vue-cli%EF%BC%89/</url>
    <content><![CDATA[<h2 id="5-1-组件-component"><a href="#5-1-组件-component" class="headerlink" title="5.1 组件[component]"></a>5.1 组件[component]</h2><p>组件（Component）是自定义封装代码的功能。在前端开发过程中，经常出现多个网页的功能是重复的，而且很多不同的页面之间，也存在同样的功能。</p>
<p>而在网页中实现一个功能，需要使用html定义功能的内容结构，使用css声明功能的外观样式，还要使用js来定义功能的特效，因此就产生了把一个功能相关的[HTML、css和javascript]代码封装在一起组成一个整体的代码块封装模式，我们称之为“组件”。</p>
<p>所以，组件就是一个html网页中的功能，一般就是一个标签，标签中有自己的html内容结构，css样式和js特效。</p>
<p>这样，前端人员就可以在组件化开发时，只需要书写一次代码，随处引入即可使用。</p>
<p>vue的组件有两种：默认组件[全局组件] 和 单文件组件</p>
<h3 id="5-1-1-默认组件"><a href="#5-1-1-默认组件" class="headerlink" title="5.1.1 默认组件"></a>5.1.1 默认组件</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;addnum&gt;&lt;<span class="regexp">/addnum&gt;</span></span><br><span class="line"><span class="regexp">    &lt;addnum&gt;&lt;/</span>addnum&gt;</span><br><span class="line">    &lt;addnum&gt;&lt;<span class="regexp">/addnum&gt;</span></span><br><span class="line"><span class="regexp">    &lt;addnum&gt;&lt;/</span>addnum&gt;</span><br><span class="line">    &lt;addnum&gt;&lt;<span class="regexp">/addnum&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    Vue.component(<span class="string">"addnum"</span>,&#123;</span><br><span class="line">        template:<span class="string">'&lt;div&gt;&lt;input type="text" v-model="num"&gt;&lt;button @click="num+=1"&gt;点击&lt;/button&gt;&lt;/div&gt;'</span>,</span><br><span class="line">        data: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="comment">// 写在这里的数据只有当前组件可以使用</span></span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                num:<span class="number">1</span>,</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">        el:<span class="string">"#app"</span>,</span><br><span class="line">        <span class="comment">// 这里写的数据是全局公用的，整个文件共享</span></span><br><span class="line">        data:&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="6-Vue自动化工具（Vue-cli）"><a href="#6-Vue自动化工具（Vue-cli）" class="headerlink" title="6. Vue自动化工具（Vue-cli）"></a>6. Vue自动化工具（Vue-cli）</h1><p>前面学习了普通组件以后，接下来我们继续学习单文件组件则需要提前先安装准备一些组件开发工具。否则无法使用和学习单文件组件。</p>
<p>一般情况下，单文件组件，我们运行在 自动化工具vue-CLI中，可以帮我们把单文件组件编译成普通的js代码。所以我们需要在电脑先安装搭建vue-CLI工具。</p>
<p>官网：<a href="https://cli.vuejs.org/zh/" target="_blank" rel="noopener">https://cli.vuejs.org/zh/</a></p>
<p>Vue CLI 需要 <a href="https://nodejs.org/" target="_blank" rel="noopener">Node.js</a> 8.9 或更高版本 (推荐 8.11.0+)。你可以使用 <a href="https://github.com/creationix/nvm" target="_blank" rel="noopener">nvm</a> 或 <a href="https://github.com/coreybutler/nvm-windows" target="_blank" rel="noopener">nvm-windows</a>在同一台电脑中管理多个 Node 版本。</p>
<p>nvm工具的下载和安装： </p>
<p><a href="https://www.jianshu.com/p/d0e0935b150a" target="_blank" rel="noopener">https://www.jianshu.com/p/d0e0935b150a</a></p>
<p> <a href="https://www.jianshu.com/p/622ad36ee020" target="_blank" rel="noopener">https://www.jianshu.com/p/622ad36ee020</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -o- https://github.com/nvm-sh/nvm/v0.35.3/install.sh | bash</span><br></pre></td></tr></table></figure>

<p>安装记录:</p>
<p>打开:<a href="https://github.com/coreybutler/nvm-windows/releases" target="_blank" rel="noopener">https://github.com/coreybutler/nvm-windows/releases</a></p>
<p>安装完成以后,先查看环境变量是否设置好了.</p>
<p><img src="/images/1552357036022.png" alt=""></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">常用的nvm命令</span><br><span class="line"></span><br><span class="line">nvm list   <span class="comment"># 列出目前在nvm里面安装的所有node版本</span></span><br><span class="line">nvm install node版本号      <span class="comment"># 安装指定版本的node.js</span></span><br><span class="line">nvm uninstall node版本号    <span class="comment"># 卸载指定版本的node.js</span></span><br><span class="line">nvm use node版本号          <span class="comment"># 切换当前使用的node.js版本</span></span><br></pre></td></tr></table></figure>

<p>如果使用nvm工具，则直接可以不用自己手动下载，如果使用nvm下载安装 node的npm比较慢的时候，可以修改nvm的配置文件(在安装根目录下)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># settings.txt</span><br><span class="line">root: C:\tool\nvm    [这里的目录地址是安装nvm时自己设置的地址,要根据实际修改]</span><br><span class="line">path: C:\tool\nodejs</span><br><span class="line">arch: 64</span><br><span class="line">proxy: none</span><br><span class="line">node_mirror: http:&#x2F;&#x2F;npm.taobao.org&#x2F;mirrors&#x2F;node&#x2F; </span><br><span class="line">npm_mirror: https:&#x2F;&#x2F;npm.taobao.org&#x2F;mirrors&#x2F;npm&#x2F;</span><br></pre></td></tr></table></figure>

<h2 id="6-1-安装node-js"><a href="#6-1-安装node-js" class="headerlink" title="6.1 安装node.js"></a>6.1 安装node.js</h2><p>Node.js是一个新的后端(后台)语言，它的语法和JavaScript类似，所以可以说它是属于前端的后端语言，后端语言和前端语言的区别：</p>
<ul>
<li>运行环境：后端语言一般运行在服务器端，前端语言运行在客户端的浏览器上</li>
<li>功能：后端语言可以操作文件，可以读写数据库，前端语言不能操作文件，不能读写数据库。</li>
</ul>
<p>我们一般安装LTS(长线支持版本 Long-Time Support)：</p>
<p>下载地址：<a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">https://nodejs.org/en/download/</a>【上面已经安装了nvm，那么这里不用手动安装了】</p>
<p>node.js的版本有两大分支：</p>
<p>官方发布的node.js版本：0.xx.xx 这种版本号就是官方发布的版本</p>
<p>社区发布的node.js版本：xx.xx.x 就是社区开发的版本</p>
<p>Node.js如果安装成功，可以查看Node.js的版本,在终端输入如下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure>

<h2 id="6-2-npm"><a href="#6-2-npm" class="headerlink" title="6.2 npm"></a>6.2 npm</h2><p>在安装node.js完成后，在node.js中会同时帮我们安装一个npm包管理器npm。我们可以借助npm命令来安装node.js的包。这个工具相当于python的pip管理器。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g 包名              <span class="comment"># 安装模块   -g表示全局安装，如果没有-g，则表示在当前项目安装</span></span><br><span class="line">npm list                        <span class="comment"># 查看当前目录下已安装的node包</span></span><br><span class="line">npm view 包名 engines            <span class="comment"># 查看包所依赖的Node的版本 </span></span><br><span class="line">npm outdated                    <span class="comment"># 检查包是否已经过时，命令会列出所有已过时的包</span></span><br><span class="line">npm update 包名                  <span class="comment"># 更新node包</span></span><br><span class="line">npm uninstall 包名               <span class="comment"># 卸载node包</span></span><br><span class="line">npm 命令 -h                      <span class="comment"># 查看指定命令的帮助文档</span></span><br></pre></td></tr></table></figure>

<h2 id="6-3-安装Vue-cli"><a href="#6-3-安装Vue-cli" class="headerlink" title="6.3 安装Vue-cli"></a>6.3 安装Vue-cli</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g vue-cli</span><br></pre></td></tr></table></figure>

<p>如果安装速度过慢，一直超时，可以考虑切换npm镜像源：<a href="http://npm.taobao.org/" target="_blank" rel="noopener">http://npm.taobao.org/</a></p>
<h2 id="6-4-使用Vue-CLI初始化创建前端项目"><a href="#6-4-使用Vue-CLI初始化创建前端项目" class="headerlink" title="6.4 使用Vue-CLI初始化创建前端项目"></a>6.4 使用Vue-CLI初始化创建前端项目</h2><h3 id="6-4-1-生成项目目录"><a href="#6-4-1-生成项目目录" class="headerlink" title="6.4.1 生成项目目录"></a>6.4.1 生成项目目录</h3><p>使用vue-cli自动化工具可以快速搭建单页应用项目目录。</p>
<p>该工具为现代化的前端开发工作流提供了开箱即用的构建配置。只需几分钟即可创建并启动一个带热重载、保存时静态检查以及可用于生产环境的构建配置的项目：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 生成一个基于 webpack 模板的新项目</span><br><span class="line">vue init webpack 项目目录名</span><br><span class="line">例如：</span><br><span class="line">vue init webpack myproject</span><br><span class="line"></span><br><span class="line">// 启动开发服务器 ctrl+c 停止服务</span><br><span class="line"><span class="built_in">cd</span> myproject</span><br><span class="line">npm run dev           <span class="comment"># 运行这个命令就可以启动node提供的测试http服务器</span></span><br></pre></td></tr></table></figure>

<p>运行了上面代码以后,终端下会出现以下效果提示：</p>
<p><img src="/images/1552187745456.png" alt=""></p>
<p>那么访问：<a href="http://localhost:8080/" target="_blank" rel="noopener">http://localhost:8080/</a></p>
<p><img src="/images/1552187794989.png" alt=""></p>
<h3 id="6-4-2-项目目录结构"><a href="#6-4-2-项目目录结构" class="headerlink" title="6.4.2 项目目录结构"></a>6.4.2 项目目录结构</h3><p>src 主开发目录，要开发的单文件组件全部在这个目录下的components目录下</p>
<p>static 静态资源目录，所有的css，js，图片等资源文件放在这个文件夹</p>
<p>dist项目打包发布文件夹，最后要上线单文件项目文件都在这个文件夹中[后面打包项目,让项目中的vue组件经过编译变成js 代码以后,dist就出现了]</p>
<p>node_modules目录是node的依赖包目录</p>
<p>config是配置目录，</p>
<p>build是项目打包时依赖的目录</p>
<p>src/router 路由,后面需要我们在使用Router路由的时候,自己声明.</p>
<h3 id="6-4-3-vue项目执行流程图"><a href="#6-4-3-vue项目执行流程图" class="headerlink" title="6.4.3 vue项目执行流程图"></a>6.4.3 vue项目执行流程图</h3><p><img src="/images/page_structrue.png" alt=""></p>
<p>page_structrue</p>
<p>整个项目是一个主文件index.html,index.html中会引入src文件夹中的main.js,main.js中会导入顶级单文件组件App.vue,App.vue中会通过组件嵌套或者路由来引用components文件夹中的其他单文件组件。</p>
<h2 id="7-单文件组件的使用"><a href="#7-单文件组件的使用" class="headerlink" title="7. 单文件组件的使用"></a>7. 单文件组件的使用</h2><p>组件有两种：普通组件、单文件组件</p>
<p>普通组件的缺点：</p>
<ol>
<li>html代码是作为js的字符串进行编写，所以组装和开发的时候不易理解，而且没有高亮效果。</li>
<li>普通组件用在小项目中非常合适，但是复杂的大项目中，如果把更多的组件放在html文件中，那么维护成本就会变得非常昂贵。</li>
<li>普通组件只是整合了js和html，但是css代码被剥离出去了。使用的时候的时候不好处理。</li>
</ol>
<p>将一个组件相关的html结构，css样式，以及交互的JavaScript代码从html文件中剥离出来，合成一个文件，这种文件就是单文件组件，相当于一个组件具有了结构、表现和行为的完整功能，方便组件之间随意组合以及组件的重用，这种文件的扩展名为“.vue”，比如：“Home.vue”。</p>
<ol>
<li>创建组件</li>
</ol>
<p><img src="/images/1552362045478.png" alt=""></p>
<p>在组件中编辑三个标签，编写视图、vm对象和css样式代码。</p>
<h3 id="7-1-template-编写html代码的地方"><a href="#7-1-template-编写html代码的地方" class="headerlink" title="7.1 template 编写html代码的地方"></a>7.1 template 编写html代码的地方</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"Home"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> @<span class="attr">click</span>=<span class="string">"num--"</span> <span class="attr">class</span>=<span class="string">"sub"</span>&gt;</span>-<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">size</span>=<span class="string">"1"</span> <span class="attr">v-model</span>=<span class="string">"num"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> @<span class="attr">click</span>=<span class="string">"num++"</span> <span class="attr">class</span>=<span class="string">"add"</span>&gt;</span>+<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="7-2-script编写vue-js代码"><a href="#7-2-script编写vue-js代码" class="headerlink" title="7.2 script编写vue.js代码"></a>7.2 script编写vue.js代码</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    name:<span class="string">"Home"</span>,</span><br><span class="line">    data: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        num:<span class="number">0</span>,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="7-3-style编写当前组件的样式代码"><a href="#7-3-style编写当前组件的样式代码" class="headerlink" title="7.3 style编写当前组件的样式代码"></a>7.3 style编写当前组件的样式代码</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.sub</span>,<span class="selector-class">.add</span>&#123;</span></span><br><span class="line">    border: 1px solid red;</span><br><span class="line">    padding: 4px 7px;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="7-4-完成案例-点击加减数字"><a href="#7-4-完成案例-点击加减数字" class="headerlink" title="7.4 完成案例-点击加减数字"></a>7.4 完成案例-点击加减数字</h3><p>创建Homes.vue</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"add_num"</span>&gt;</span><br><span class="line">      &lt;span @click=<span class="string">"num++"</span>&gt;+&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">      &lt;input type="text" size="2" v-model="num"&gt;</span></span><br><span class="line"><span class="regexp">      &lt;span @click="num--"&gt;-&lt;/</span>span&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line">    name:<span class="string">"AddNum"</span>,</span><br><span class="line">    data: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        num: <span class="number">0</span>,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;style scoped&gt;</span></span><br><span class="line"><span class="regexp">   .add_num&#123;</span></span><br><span class="line"><span class="regexp">      font-size: 32px;</span></span><br><span class="line"><span class="regexp">   &#125;</span></span><br><span class="line"><span class="regexp">&lt;/</span>style&gt;</span><br></pre></td></tr></table></figure>

<p>在App.vue组件中调用上面的组件</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=<span class="string">"Home"</span>&gt;</span><br><span class="line">    &lt;span @click=<span class="string">"num--"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"sub"</span>&gt;-&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">    &lt;input type="text" size="1" v-model="num"&gt;</span></span><br><span class="line"><span class="regexp">    &lt;span @click="num++" class="add"&gt;+&lt;/</span>span&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    name:<span class="string">"Home"</span>,</span><br><span class="line">    data: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        num:<span class="number">0</span>,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;style scoped&gt;</span></span><br><span class="line"><span class="regexp">  .sub,.add&#123;</span></span><br><span class="line"><span class="regexp">    border: 1px solid red;</span></span><br><span class="line"><span class="regexp">    padding: 4px 7px;</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&lt;/</span>style&gt;</span><br></pre></td></tr></table></figure>

<p>在开发vue项目之前，需要手动把 App.vue的HelloWorld组件代码以及默认的css样式，清楚。</p>
<p>上面的代码效果：</p>
<p><img src="/images/1552362182984.png" alt=""></p>
<h3 id="7-4-组件的嵌套"><a href="#7-4-组件的嵌套" class="headerlink" title="7.4 组件的嵌套"></a>7.4 组件的嵌套</h3><p>有时候开发vue项目时,页面也可以算是一个大组件,同时页面也可以分成多个子组件.</p>
<p>因为,产生了父组件调用子组件的情况.</p>
<p>例如,我们可以声明一个组件,作为父组件</p>
<p>在components/创建一个保存子组件的目录HomeSon</p>
<p><img src="/images/1552363669256.png" alt=""></p>
<p>在HomeSon目录下,可以创建当前页面的子组件,例如,是Menu.vue</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  组件中代码必须写在同一个标签中</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div id=<span class="string">"menu"</span>&gt;</span><br><span class="line">      &lt;span&gt;&#123;&#123;msg&#125;&#125;&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">      &lt;div&gt;hello&lt;/</span>div&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    name:<span class="string">"Menu"</span>,</span><br><span class="line">    data: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        msg:<span class="string">"这是Menu组件里面的菜单"</span>,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>

<p>然后，在父组件中调用上面声明的子组件。</p>
<p><img src="/images/1552363770013.png" alt=""></p>
<p>最后,父组件被App.vue调用.就可以看到页面效果.</p>
<p><img src="/images/1552363834171.png" alt=""></p>
<p><img src="/images/1552363702858.png" alt=""></p>
<p>效果:</p>
<p><img src="/images/1552363849977.png" alt=""></p>
<h3 id="7-5-传递数据"><a href="#7-5-传递数据" class="headerlink" title="7.5 传递数据"></a>7.5 传递数据</h3><h3 id="父组件的数据传递给子组件"><a href="#父组件的数据传递给子组件" class="headerlink" title="父组件的数据传递给子组件"></a>父组件的数据传递给子组件</h3><p>例如,我们希望把父组件的数据传递给子组件.</p>
<p>可以通过props属性来进行数据传递.</p>
<p>传递数据三个步骤：</p>
<ol>
<li><p>在父组件中，调用子组件的组名处，使用属性值的方式往下传递数据</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Menu</span> <span class="attr">:mynum</span>=<span class="string">"num"</span> <span class="attr">title</span>=<span class="string">"home里面写的数据"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"># 上面表示在父组件调用Menu子组件的时候传递了2个数据：</span><br><span class="line">  如果要传递变量[变量可以各种类型的数据]，属性名左边必须加上冒号:，同时，属性名是自定义的，会在子组件中使用。</span><br><span class="line">  如果要传递普通字符串数据，则不需要加上冒号:</span><br></pre></td></tr></table></figure>
</li>
<li><p>在子组件中接受上面父组件传递的数据，需要在vm组件对象中，使用props属性类接受。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    name:<span class="string">"Menu"</span>,</span><br><span class="line">    props:[<span class="string">"mynum"</span>,<span class="string">"title"</span>],</span><br><span class="line">    data: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        msg:<span class="string">"这是Menu组件里面的菜单"</span>,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 上面 props属性中表示接受了两个数据。</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在子组件中的template中使用父组件传递过来的数据.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"menu"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;msg&#125;&#125;，&#123;&#123;title&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>hello，&#123;&#123;mynum&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>效果：</p>
<p><img src="/images/1552364511546.png" alt=""></p>
<p>步骤流程:</p>
<p><img src="/images/1552364590540.png" alt=""></p>
<p>使用父组件传递数据给子组件时, 注意一下几点:</p>
<ol>
<li><p>传递数据是变量,则需要在属性左边添加冒号.</p>
<p>传递数据是变量,这种数据称之为“动态数据传递”</p>
<p>传递数据不是变量,这种数据称之为“静态数据传递”</p>
</li>
<li><p>父组件中修改了数据,在子组件中会被同步修改,但是,子组件中的数据修改了,是不是影响到父组件中的数据.</p>
<p>这种情况,在开发时,也被称为“单向数据流”</p>
</li>
</ol>
<h3 id="子组件传递数据给父组件"><a href="#子组件传递数据给父组件" class="headerlink" title="子组件传递数据给父组件"></a>子组件传递数据给父组件</h3><ol>
<li><p>在子组件中，通过<code>this.$emit()</code>来调用父组件中定义的事件.</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;p&gt;Post的子组件&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">      &lt;h2&gt;&#123;&#123;fnum&#125;&#125;&lt;/</span>h2&gt;</span><br><span class="line">      &lt;p&gt;data=&#123;&#123;data&#125;&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">      &lt;p&gt;fnum=&#123;&#123;fnum&#125;&#125;&lt;/</span>p&gt;</span><br><span class="line">      &lt;div&gt;<span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"fnum"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">        name: <span class="string">"PostSon"</span>,</span><br><span class="line">        <span class="comment">// 父组件传递数据给子组件: 1. 在父组件中调用子组件的组件名称标签上面声明属性和传递值，2. 在子组件中通过props进行接收</span></span><br><span class="line">        props:[<span class="string">"data"</span>,<span class="string">"fnum"</span>],  <span class="comment">// 接受父组件中传递过来的数据</span></span><br><span class="line">        <span class="comment">// 子组件传递数据给父组件[事件的方式进行传递]：</span></span><br><span class="line">        watch:&#123;</span><br><span class="line">          fnum()&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.fnum);</span><br><span class="line">            <span class="comment">// this.$emit("父元素的自定义事件","要传递的数据");  // 通过this.$emit()方法，子组件可以把数据传递给父组件</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">this</span>.$emit(<span class="string">"postparentdata"</span>,<span class="keyword">this</span>.fnum);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;style scoped&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;/</span>style&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>父组件中声明一个和子组件中<code>this.$emit(&quot;自定义事件名称&quot;)</code>对应的事件属性。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>num=&#123;&#123;num&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">Son</span> <span class="attr">data</span>=<span class="string">"我是付组件里面的内容"</span> <span class="attr">:fnum</span>=<span class="string">"num"</span> @<span class="attr">postparentdata</span>=<span class="string">"getsondata"</span>&gt;</span><span class="tag">&lt;/<span class="name">Son</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>父组件中，声明一个自定义方法，在事件被调用时，执行的。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">import</span> Son <span class="keyword">from</span> <span class="string">"./PostSon"</span></span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">        name: <span class="string">"Post"</span>,</span><br><span class="line">        data()&#123;</span><br><span class="line">          <span class="keyword">return</span> &#123;</span><br><span class="line">            num: <span class="number">100</span>,</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        components:&#123;</span><br><span class="line">          Son:Son,</span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">          getsondata(message)&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"父组件"</span>+message);</span><br><span class="line">            <span class="keyword">this</span>.num = message;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="8-在组件中使用axios获取数据"><a href="#8-在组件中使用axios获取数据" class="headerlink" title="8. 在组件中使用axios获取数据"></a>8. 在组件中使用axios获取数据</h2><p>默认情况下，我们的项目中并没有对axios包的支持，所以我们需要下载安装。</p>
<p>在项目根目录中使用 npm安装包</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install axios</span><br></pre></td></tr></table></figure>

<p>接着在main.js文件中，导入axios并把axios对象 挂载到vue属性中多为一个子对象，这样我们才能在组件中使用。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">// The Vue build version to load <span class="keyword">with</span> the `<span class="keyword">import</span>` command</span><br><span class="line">// (runtime-only <span class="keyword">or</span> standalone) has been set <span class="keyword">in</span> webpack.base.conf <span class="keyword">with</span> an alias.</span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App'</span> // 这里表示从别的目录下导入 单文件组件</span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span>; // 从node_modules目录中导入包</span><br><span class="line">Vue.config.productionTip = false</span><br><span class="line"></span><br><span class="line">Vue.prototype.$axios = axios; // 把对象挂载vue中</span><br><span class="line"></span><br><span class="line">/* eslint-disable no-new */</span><br><span class="line">new Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  components: &#123; App &#125;,</span><br><span class="line">  template: <span class="string">'&lt;App/&gt;'</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="8-1-在组建中使用axios获取数据"><a href="#8-1-在组建中使用axios获取数据" class="headerlink" title="8.1 在组建中使用axios获取数据"></a>8.1 在组建中使用axios获取数据</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line">	。。。</span><br><span class="line">	methods:&#123;</span><br><span class="line">      get_data:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">         <span class="comment">// 使用axios请求数据</span></span><br><span class="line">        <span class="keyword">this</span>.$axios.get(<span class="string">"http://wthrcdn.etouch.cn/weather_mini?city=深圳"</span>).then(<span class="function">(<span class="params">response</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(response);</span><br><span class="line">        &#125;).catch(<span class="function"><span class="params">error</span>=&gt;</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(error);</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果:</p>
<p><img src="/images/1552202922168.png" alt=""></p>
<p>使用的时候，因为本质上来说，我们还是原来的axios，所以也会收到同源策略的影响。</p>
]]></content>
      <categories>
        <category>前端框架</category>
      </categories>
      <tags>
        <tag>vue框架</tag>
      </tags>
  </entry>
  <entry>
    <title>[axios与组件化开发]</title>
    <url>/2020/02/23/axios%E4%B8%8E%E7%BB%84%E4%BB%B6%E5%8C%96%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<h1 id="4-通过axios实现数据请求"><a href="#4-通过axios实现数据请求" class="headerlink" title="4. 通过axios实现数据请求"></a>4. 通过axios实现数据请求</h1><p>vue.js默认没有提供ajax功能的。</p>
<p>所以使用vue的时候，一般都会使用axios的插件来实现ajax与后端服务器的数据交互。</p>
<p>注意，axios本质上就是javascript的ajax封装，所以会被<strong>同源策略</strong>限制。</p>
<p>下载地址：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;unpkg.com&#x2F;axios@0.18.0&#x2F;dist&#x2F;axios.js</span><br><span class="line">https:&#x2F;&#x2F;unpkg.com&#x2F;axios@0.18.0&#x2F;dist&#x2F;axios.min.js</span><br></pre></td></tr></table></figure>

<p>使用文档：<a href="https://www.kancloud.cn/yunye/axios/234845" target="_blank" rel="noopener">https://www.kancloud.cn/yunye/axios/234845</a> </p>
<p>axios提供发送http请求的常用方法有两个：axios.get() 和 axios.post() 。</p>
<p>增 post</p>
<p>删 delete</p>
<p>改 put/patch</p>
<p>查 get</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 发送get请求</span></span><br><span class="line">    <span class="comment">// 参数1: 必填，字符串，请求的数据接口的url地址，例如请求地址：http://www.baidu.com?id=200</span></span><br><span class="line">    <span class="comment">// 参数2：可选，请求参数和请求头内容，json对象，要提供给数据接口的参数</span></span><br><span class="line">	axios.get(<span class="string">'服务器的资源地址'</span>,&#123; <span class="comment">// http://www.baidu.com</span></span><br><span class="line">    	params:&#123;</span><br><span class="line">    		参数名:<span class="string">'参数值'</span>, <span class="comment">// id: 200,</span></span><br><span class="line">    	&#125;,</span><br><span class="line">        headers:&#123;</span><br><span class="line">            选项名:<span class="string">'选项值'</span>, <span class="comment">// 请求头</span></span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">    &#125;).then(<span class="function"><span class="params">response</span>=&gt;</span>&#123; <span class="comment">// 请求成功以后的回调函数</span></span><br><span class="line">    		<span class="built_in">console</span>.log(<span class="string">"请求成功"</span>);</span><br><span class="line">    		<span class="built_in">console</span>.log(response.data); <span class="comment">// 获取服务端提供的数据</span></span><br><span class="line">    </span><br><span class="line">    &#125;).catch(<span class="function"><span class="params">error</span>=&gt;</span>&#123;   <span class="comment">// 请求失败以后的回调函数</span></span><br><span class="line">    		<span class="built_in">console</span>.log(<span class="string">"请求失败"</span>);</span><br><span class="line">    		<span class="built_in">console</span>.log(error.response);  <span class="comment">// 获取错误信息</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 发送post请求，参数和使用和axios.get()类似。</span></span><br><span class="line">    <span class="comment">// 参数1: 必填，字符串，请求的数据接口的url地址</span></span><br><span class="line">    <span class="comment">// 参数2：必填，json对象，要提供给数据接口的参数,如果没有参数，则必须使用&#123;&#125;</span></span><br><span class="line">    <span class="comment">// 参数3：可选，json对象，请求头信息</span></span><br><span class="line">    axios.post(<span class="string">'服务器的资源地址'</span>,&#123;</span><br><span class="line">    	username: <span class="string">'xiaoming'</span>,</span><br><span class="line">    	password: <span class="string">'123456'</span></span><br><span class="line">    &#125;,&#123;</span><br><span class="line">        headers:&#123;</span><br><span class="line">            选项名:<span class="string">"选项值"</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    .then(<span class="function"><span class="params">response</span>=&gt;</span>&#123; <span class="comment">// 请求成功以后的回调函数</span></span><br><span class="line">      <span class="built_in">console</span>.log(response);</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(<span class="function"><span class="params">error</span>=&gt;</span>&#123;   <span class="comment">// 请求失败以后的回调函数</span></span><br><span class="line">      <span class="built_in">console</span>.log(error);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">	</span><br><span class="line">	<span class="comment">// b'firstName=Fred&amp;lastName=Flintstone'</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：axios.delete() 的用法和参数与axios.get()一样，axios.put()或者axios.patch的用法和参数与axios.post()一样。在http协议中，不同的请求动作都有不同的含义，例如：get 代表向目标服务器请求获取数据post 代表向目标服务器请求上传数据put 代表向目标服务器请求更新数据【修改全部数据】patch 代表向目标服务器请求更新数据【修改部分数据】patch 代表向目标服务器请求更新数据delete 代表向目标服务器请求删除数据</p>
</blockquote>
<h2 id="4-1-json"><a href="#4-1-json" class="headerlink" title="4.1 json"></a>4.1 json</h2><p>json是 JavaScript Object Notation 的首字母缩写，单词的意思是javascript对象表示法，这里说的json指的是类似于javascript对象的一种数据格式。</p>
<p>json的作用：在不同的系统平台，或不同编程语言之间传递数据。</p>
<h3 id="4-1-1-json数据的语法"><a href="#4-1-1-json数据的语法" class="headerlink" title="4.1.1 json数据的语法"></a>4.1.1 json数据的语法</h3><p>json数据对象类似于JavaScript中的对象，但是它的键对应的值里面是没有函数方法的，值可以是普通变量，不支持undefined，值还可以是数组或者json对象。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 原生的js的json对象</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  age:<span class="number">10</span>,</span><br><span class="line">  sex: <span class="string">'女'</span>,</span><br><span class="line">  work()&#123;                     <span class="comment">// work: function()&#123;&#125;的简写</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"好好学习"</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// json数据的对象格式,json数据格式,是没有方法的,只有属性,属性值：字符串，数值(整数，浮点数，布尔值), json，</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"name"</span>:<span class="string">"tom"</span>,</span><br><span class="line">    <span class="string">"age"</span>:<span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// json数据的数组格式：</span></span><br><span class="line">[<span class="string">"tom"</span>,<span class="number">18</span>,<span class="string">"programmer"</span>]</span><br></pre></td></tr></table></figure>

<p>复杂的json格式数据可以包含对象和数组的写法。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>:<span class="string">"小明"</span>,</span><br><span class="line">  <span class="attr">"age"</span>:<span class="number">200</span>,</span><br><span class="line">  <span class="attr">"is_delete"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"fav"</span>:[<span class="string">"code"</span>,<span class="string">"eat"</span>,<span class="string">"swim"</span>,<span class="string">"read"</span>],</span><br><span class="line">  <span class="attr">"son"</span>:&#123;</span><br><span class="line">    <span class="attr">"name"</span>:<span class="string">"小小明"</span>,</span><br><span class="line">    <span class="attr">"age"</span>:<span class="number">100</span>,</span><br><span class="line">    <span class="attr">"lve"</span>:[<span class="string">"code"</span>,<span class="string">"eat"</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数组结构也可以作为json传输数据。</span></span><br></pre></td></tr></table></figure>

<p>json数据可以保存在.json文件中，一般里面就只有一个json对象。</p>
<p>总结：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">1. json文件的后缀是.json</span><br><span class="line">2. json文件一般保存一个单一的json数据</span><br><span class="line">3. json数据的属性不能是方法或者undefined，属性值只能：数值[整数,小数,布尔值]、字符串、json和数组</span><br><span class="line">4. json数据只使用双引号、每一个属性成员之间使用逗号隔开，并且最后一个成员没有逗号。</span><br><span class="line">   &#123;</span><br><span class="line">      <span class="attr">"name"</span>:<span class="string">"小明"</span>,</span><br><span class="line">      <span class="attr">"age"</span>:<span class="number">200</span>,</span><br><span class="line">      <span class="attr">"fav"</span>:[<span class="string">"code"</span>,<span class="string">"eat"</span>,<span class="string">"swim"</span>,<span class="string">"read"</span>],</span><br><span class="line">      <span class="attr">"son"</span>:&#123;</span><br><span class="line">        <span class="attr">"name"</span>:<span class="string">"小小明"</span>,</span><br><span class="line">        <span class="attr">"age"</span>:<span class="number">100</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>工具：postman可以用于测试开发的数据接口。</p>
<p>postman就是一个软件，专门提供给开发者组织和测试http请求的。</p>
<h3 id="4-1-2-js中提供的json数据转换方法"><a href="#4-1-2-js中提供的json数据转换方法" class="headerlink" title="4.1.2 js中提供的json数据转换方法"></a>4.1.2 js中提供的json数据转换方法</h3><p>javascript提供了一个JSON对象来操作json数据的数据转换.</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>参数</th>
<th>返回值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>stringify</td>
<td>json对象</td>
<td>字符串</td>
<td>json对象转成字符串</td>
</tr>
<tr>
<td>parse</td>
<td>字符串</td>
<td>json对象</td>
<td>字符串格式的json数据转成json对象</td>
</tr>
</tbody></table>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// json语法</span></span><br><span class="line">    <span class="keyword">let</span> humen = &#123;</span><br><span class="line">        <span class="string">"username"</span>:<span class="string">"xiaohui"</span>,</span><br><span class="line">        <span class="string">"password"</span>:<span class="string">"1234567"</span>,</span><br><span class="line">        <span class="string">"age"</span>:<span class="number">20</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(humen);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span> humen);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// JSON对象提供对json格式数据的转换功能</span></span><br><span class="line">    <span class="comment">// stringify(json对象)  # 用于把json转换成字符串</span></span><br><span class="line">    <span class="keyword">let</span> result = <span class="built_in">JSON</span>.stringify(humen);</span><br><span class="line">    <span class="built_in">console</span>.log(result);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span> result);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// parse(字符串类型的json数据)  # 用于把字符串转成json对象</span></span><br><span class="line">    <span class="keyword">let</span> json_str = <span class="string">'&#123;"password":"1123","age":20,"name":"xiaobai"&#125;'</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(json_str)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span> json_str)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> json_obj = <span class="built_in">JSON</span>.parse(json_str);</span><br><span class="line">    <span class="built_in">console</span>.log(json_obj);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span> json_obj)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(json_obj.age)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="4-2-ajax"><a href="#4-2-ajax" class="headerlink" title="4.2 ajax"></a>4.2 ajax</h2><p>ajax，一般中文称之为：“阿贾克斯”，是英文 “Async Javascript And Xml”的简写，译作：异步js和xml数据传输数据。</p>
<p>ajax的作用： ajax可以让js代替浏览器向后端程序发送http请求，与后端通信，在用户不知道的情况下操作数据和信息，从而实现页面局部刷新数据/无刷新更新数据。</p>
<p>所以web开发中ajax是很常用的技术，主要用于操作后端提供的<code>数据接口</code>，从而实现网站的<code>前后端分离</code>。</p>
<p>ajax技术的原理是实例化js的XMLHttpRequest对象，使用此对象提供的内置方法就可以与后端进行数据通信。</p>
<blockquote>
<p>实际而言，axios或者jQuery提供的ajax，本质上就是XMLHttpRequest对象操作的封装。</p>
</blockquote>
<h3 id="4-2-1-数据接口"><a href="#4-2-1-数据接口" class="headerlink" title="4.2.1 数据接口"></a>4.2.1 数据接口</h3><p>数据接口，也叫api接口，表示<code>后端提供</code>操作数据/功能的url地址给客户端使用。</p>
<p>客户端通过发起请求向服务端提供的url地址申请操作数据【操作一般：增删查改】</p>
<p>同时在工作中，大部分数据接口都不是手写，而是通过函数库/框架来生成。</p>
<h3 id="4-2-3-ajax的使用"><a href="#4-2-3-ajax的使用" class="headerlink" title="4.2.3 ajax的使用"></a>4.2.3 ajax的使用</h3><p>ajax的使用必须与服务端程序配合使用，但是目前我们先学习ajax的使用，所以暂时先不涉及到服务端python代码的编写。因此，我们可以使用别人写好的数据接口进行调用。</p>
<p>jQuery将ajax封装成了一个函数$.ajax()，我们可以直接用这个函数来执行ajax请求。</p>
<table>
<thead>
<tr>
<th>接口</th>
<th>地址</th>
</tr>
</thead>
<tbody><tr>
<td>天气接口</td>
<td><a href="http://wthrcdn.etouch.cn/weather_mini?city=城市名称" target="_blank" rel="noopener">http://wthrcdn.etouch.cn/weather_mini?city=城市名称</a></td>
</tr>
<tr>
<td>音乐接口搜索</td>
<td><a href="http://tingapi.ting.baidu.com/v1/restserver/ting?method=baidu.ting.search.catalogSug&amp;query=歌曲标题" target="_blank" rel="noopener">http://tingapi.ting.baidu.com/v1/restserver/ting?method=baidu.ting.search.catalogSug&amp;query=歌曲标题</a></td>
</tr>
<tr>
<td>音乐信息接口</td>
<td><a href="http://tingapi.ting.baidu.com/v1/restserver/ting?method=baidu.ting.song.play&amp;songid=音乐ID" target="_blank" rel="noopener">http://tingapi.ting.baidu.com/v1/restserver/ting?method=baidu.ting.song.play&amp;songid=音乐ID</a></td>
</tr>
</tbody></table>
<p>编写代码获取接口提供的数据：</p>
<p>jQ版本</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">    &lt;script src="js/</span>jquery<span class="number">-1.12</span><span class="number">.4</span>.js<span class="string">"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">    &lt;script&gt;</span></span><br><span class="line"><span class="string">    $(function()&#123;</span></span><br><span class="line">        $("#btn").on("click",function()&#123;</span><br><span class="line">            $.ajax(&#123;</span><br><span class="line">                <span class="comment">// 后端程序的url地址</span></span><br><span class="line">                url: <span class="string">'http://wthrcdn.etouch.cn/weather_mini'</span>,</span><br><span class="line">                <span class="comment">// 也可以使用method，提交数据的方式，默认是'GET'，常用的还有'POST'</span></span><br><span class="line">                type: <span class="string">'get'</span>, </span><br><span class="line">                dataType: <span class="string">'json'</span>,  <span class="comment">// 返回的数据格式，常用的有是'json','html',"jsonp"</span></span><br><span class="line">                data:&#123; <span class="comment">// 设置发送给服务器的数据，如果是get请求，也可以写在url地址的?后面</span></span><br><span class="line">                    <span class="string">"city"</span>:<span class="string">'北京'</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">            .done(<span class="function"><span class="keyword">function</span>(<span class="params">resp</span>) </span>&#123;     <span class="comment">// 请求成功以后的操作</span></span><br><span class="line">                <span class="built_in">console</span>.log(resp);</span><br><span class="line">            &#125;)</span><br><span class="line">            .fail(<span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;    <span class="comment">// 请求失败以后的操作</span></span><br><span class="line">                <span class="built_in">console</span>.log(error);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">    &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;button id=<span class="string">"btn"</span>&gt;点击获取数据&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure>

<p>vue版本：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">    &lt;script src="js/</span>vue.js<span class="string">"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">    &lt;script src="</span>js/axios.js<span class="string">"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">    &lt;div id="</span>app<span class="string">"&gt;</span></span><br><span class="line"><span class="string">        &lt;input type="</span>text<span class="string">" v-model="</span>city<span class="string">"&gt;</span></span><br><span class="line"><span class="string">        &lt;button @click="</span>get_weather<span class="string">"&gt;点击获取天气&lt;/button&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;script&gt;</span></span><br><span class="line"><span class="string">        let vm = new Vue(&#123;</span></span><br><span class="line">            el:"#app",</span><br><span class="line">            data:&#123;</span><br><span class="line">                city:<span class="string">""</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">            methods:&#123;</span><br><span class="line">                get_weather()&#123;</span><br><span class="line">                    <span class="comment">// http://wthrcdn.etouch.cn/weather_mini?city=城市名称</span></span><br><span class="line">                    axios.get(<span class="string">"http://wthrcdn.etouch.cn/weather_mini?city="</span>+<span class="keyword">this</span>.city)</span><br><span class="line">                        .then(<span class="function"><span class="params">response</span>=&gt;</span>&#123;</span><br><span class="line">                            <span class="built_in">console</span>.log(response);</span><br><span class="line"></span><br><span class="line">                        &#125;).catch(<span class="function"><span class="params">error</span>=&gt;</span>&#123;</span><br><span class="line">                            <span class="built_in">console</span>.log(error.response)</span><br><span class="line">                    &#125;);</span><br><span class="line">                  <span class="comment">// 上面的参数写法,也可以是下面这种格式:</span></span><br><span class="line">                  <span class="comment">// axios.get("http://wthrcdn.etouch.cn/weather_mini",&#123;</span></span><br><span class="line">                  <span class="comment">//     // get请求的附带参数</span></span><br><span class="line">                  <span class="comment">//     params:&#123;</span></span><br><span class="line">                  <span class="comment">//         "city":"广州",</span></span><br><span class="line">                  <span class="comment">//     &#125;</span></span><br><span class="line">                  <span class="comment">// &#125;).then(response=&gt;&#123;</span></span><br><span class="line">                  <span class="comment">//     console.log(response.data);  // 获取接口数据</span></span><br><span class="line">                  <span class="comment">// &#125;).catch(error=&gt;&#123;</span></span><br><span class="line">                  <span class="comment">//     console.log(error.response); // 获取错误信息</span></span><br><span class="line">                  <span class="comment">// &#125;)</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="4-2-4-同源策略"><a href="#4-2-4-同源策略" class="headerlink" title="4.2.4 同源策略"></a>4.2.4 同源策略</h3><p>同源策略，是浏览器为了保护用户信息安全的一种安全机制。所谓的同源就是指代通信的两个地址（例如服务端接口地址与浏览器客户端页面地址）之间比较，是否协议、域名(IP)和端口相同。不同源的客户端脚本[javascript]在没有得到服务端的明确授权的情况下，浏览器会拒绝显示服务端信息提供给前端ajax。</p>
<p>ajax本质上还是javascript，是运行在浏览器中的脚本语言，所以会被受到浏览器的同源策略所限制。</p>
<table>
<thead>
<tr>
<th>前端地址：<code>http://www.oldboy.cn/index.html</code></th>
<th>是否同源</th>
<th>原因</th>
</tr>
</thead>
<tbody><tr>
<td><code>http://www.oldboy.cn/user/login.html</code></td>
<td>是</td>
<td>协议、域名、端口相同</td>
</tr>
<tr>
<td><code>http://www.oldboy.cn/about.html</code></td>
<td>是</td>
<td>协议、域名、端口相同</td>
</tr>
<tr>
<td><code>https://www.oldboy.cn:443/user/login.html</code></td>
<td>否</td>
<td>协议不同 ( https和http )</td>
</tr>
<tr>
<td><code>http:/www.oldboy.cn:5000/user/login.html</code></td>
<td>否</td>
<td>端口 不同( 5000和80)</td>
</tr>
<tr>
<td><code>http://bbs.oldboy.cn/user/login.html</code></td>
<td>否</td>
<td>域名不同 ( bbs和www )</td>
</tr>
</tbody></table>
<p>同源策略针对ajax的拦截，代码：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">    &lt;script src="js/</span>vue.js<span class="string">"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">    &lt;script src="</span>js/axios.js<span class="string">"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">    &lt;div id="</span>app<span class="string">"&gt;</span></span><br><span class="line"><span class="string">        &lt;input type="</span>text<span class="string">" v-model="</span>music<span class="string">"&gt;&lt;button @click="</span>get_music<span class="string">"&gt;查询歌曲&lt;/button&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;script&gt;</span></span><br><span class="line"><span class="string">        var vm = new Vue(&#123;</span></span><br><span class="line">            el:"#app",</span><br><span class="line">            data:&#123;</span><br><span class="line">                music:<span class="string">""</span>, <span class="comment">// 歌曲标题</span></span><br><span class="line">            &#125;,</span><br><span class="line">            methods:&#123;</span><br><span class="line">                get_music()&#123;</span><br><span class="line">                    axios.get(<span class="string">`http://tingapi.ting.baidu.com/v1/restserver/ting`</span>,&#123;</span><br><span class="line">                        params:&#123;</span><br><span class="line">                            method:<span class="string">"baidu.ting.search.catalogSug"</span>,</span><br><span class="line">                            query:<span class="keyword">this</span>.music,</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;).then(<span class="function"><span class="params">response</span>=&gt;</span>&#123;</span><br><span class="line">                        <span class="built_in">console</span>.log(<span class="string">"查询数据成功！"</span>);</span><br><span class="line">                    &#125;).catch(<span class="function"><span class="params">error</span>=&gt;</span>&#123;</span><br><span class="line">                        <span class="built_in">console</span>.log(<span class="string">"查询数据失败！"</span>);</span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure>

<p>上面代码运行错误如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Access to XMLHttpRequest at <span class="string">'http://tingapi.ting.baidu.com/v1/restserver/ting?method=baidu.ting.search.catalogSug&amp;query=%E6%88%91%E7%9A%84%E4%B8%AD%E5%9B%BD%E5%BF%83'</span> <span class="keyword">from</span> origin <span class="string">'http://localhost:63342'</span> has been blocked by CORS policy: No <span class="string">'Access-Control-Allow-Origin'</span> header <span class="keyword">is</span> present on the requested resource.</span><br></pre></td></tr></table></figure>

<p>上面错误，关键词：Access-Control-Allow-Origin</p>
<p>只要出现这个关键词，就是访问受限。出现同源策略的拦截问题。</p>
<h3 id="4-2-5-ajax跨域-跨源-方案之CORS"><a href="#4-2-5-ajax跨域-跨源-方案之CORS" class="headerlink" title="4.2.5 ajax跨域(跨源)方案之CORS"></a>4.2.5 ajax跨域(跨源)方案之CORS</h3><p>ajax跨域(跨源)方案：服务端授权[CORS]，jsonp，服务端代理</p>
<p> CORS是一个W3C标准，全称是“跨域资源共享”，它允许浏览器向跨源的后端服务器发出ajax请求，从而克服了AJAX只能同源使用的限制。</p>
<p> 实现CORS主要依靠后端服务器中响应数据中设置响应头信息返回的。</p>
<p>django的视图[伪代码]</p>
<p>def post(request):</p>
<p> response = new Response()</p>
<p> response .set_header(“Access-Control-Allow-Origin”,“<a href="http://localhost:63342”">http://localhost:63342”</a>)</p>
<p> return response;</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">// 在响应行信息里面设置以下内容：</span><br><span class="line">Access-Control-Allow-Origin: ajax所在的域名地址</span><br><span class="line"></span><br><span class="line">Access-Control-Allow-Origin: www.oldboy.cn  <span class="comment"># 表示只允许www.oldboy.cn域名的客户端的ajax跨域访问</span></span><br><span class="line"></span><br><span class="line">// * 表示任意源，表示允许任意源下的客户端的ajax都可以访问当前服务端信息</span><br><span class="line">Access-Control-Allow-Origin: *</span><br></pre></td></tr></table></figure>

<p><img src="/images/1556074087897.png" alt=""></p>
<p>总结：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0. 同源策略：浏览器的一种保护用户数据的一种安全机制。</span><br><span class="line">   浏览器会限制ajax不能跨源访问其他源的数据地址。</span><br><span class="line">   同源：判断两个通信的地址之间，是否协议，域名[IP]，端口一致。</span><br><span class="line">   </span><br><span class="line">   ajax：  http:&#x2F;&#x2F;127.0.0.1&#x2F;index.html</span><br><span class="line">   api数据接口：  http:&#x2F;&#x2F;localhost&#x2F;index</span><br><span class="line">   </span><br><span class="line">   这两个是同源么？不是同源的。是否同源的判断依据不会根据电脑来判断，而是通过协议、域名、端口的字符串是否来判断。</span><br><span class="line">   </span><br><span class="line">1. ajax默认情况下会受到同源策略的影响，一旦受到影响会报错误如下：</span><br><span class="line">	 No &#39;Access-Control-Allow-Origin&#39; header is present on the requested resource</span><br><span class="line"></span><br><span class="line">2. 解决ajax只能同源访问数据接口的方式：</span><br><span class="line">   1. CORS，跨域资源共享，在服务端的响应行中设置：</span><br><span class="line">      Access-Control-Allow-Origin: 允许访问的域名地址</span><br><span class="line">   2. jsonp</span><br><span class="line">   	  所谓的jsonp本质上来说不是ajax技术，jsonp的核心实现是依靠script本身加载外部js文件来实现的。</span><br><span class="line">   	  当然，实现jsonp技术，也需要服务端的配合</span><br><span class="line">   3. 是否服务端代理</span><br><span class="line">      思路：通过python来请求对应的服务器接口，客户端和python这边处于同源，那么就实现了服务端代理</span><br></pre></td></tr></table></figure>

<h1 id="5-组件化开发"><a href="#5-组件化开发" class="headerlink" title="5. 组件化开发"></a>5. 组件化开发</h1><h2 id="5-1-组件-component"><a href="#5-1-组件-component" class="headerlink" title="5.1 组件[component]"></a>5.1 组件[component]</h2><p>组件（Component）是自定义封装的功能。在前端开发过程中，经常出现多个网页的功能是重复的，而且很多不同的页面之间，也存在同样的功能。</p>
<p>而在网页中实现一个功能，需要使用html定义功能的内容结构，使用css声明功能的外观样式，还要使用js来定义功能的特效，因此就产生了把一个功能相关的[HTML、css和javascript]代码封装在一起组成一个整体的代码块封装模式，我们称之为“组件”。</p>
<p>所以，组件就是一个html网页中的功能，一般就是一个标签，标签中有自己的html内容结构，css样式和js特效。</p>
<p>这样，前端人员就可以在组件化开发时，只需要书写一次代码，随处引入即可使用。</p>
<p>vue的组件有两种：默认组件[全局组件] 和 单文件组件</p>
<h3 id="5-1-1-默认组件"><a href="#5-1-1-默认组件" class="headerlink" title="5.1.1 默认组件"></a>5.1.1 默认组件</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">addnum</span>&gt;</span><span class="tag">&lt;/<span class="name">addnum</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">addnum</span>&gt;</span><span class="tag">&lt;/<span class="name">addnum</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">addnum</span>&gt;</span><span class="tag">&lt;/<span class="name">addnum</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">addnum</span>&gt;</span><span class="tag">&lt;/<span class="name">addnum</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">addnum</span>&gt;</span><span class="tag">&lt;/<span class="name">addnum</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    Vue.component(<span class="string">"addnum"</span>,&#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">        template:'<span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"num"</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"num+=1"</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>',</span></span></span><br><span class="line"><span class="actionscript">        data: <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 写在这里的数据只有当前组件可以使用</span></span></span><br><span class="line"><span class="actionscript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line">                num:1,</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el:<span class="string">"#app"</span>,</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 这里写的数据是全局公用的，整个文件共享</span></span></span><br><span class="line">        data:&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="6-Vue自动化工具（Vue-cli）"><a href="#6-Vue自动化工具（Vue-cli）" class="headerlink" title="6. Vue自动化工具（Vue-cli）"></a>6. Vue自动化工具（Vue-cli）</h1><p>前面学习了普通组件以后，接下来我们继续学习单文件组件则需要提前先安装准备一些组件开发工具。否则无法使用和学习单文件组件。</p>
<p>一般情况下，单文件组件，我们运行在 自动化工具vue-CLI中，可以帮我们编译单文件组件。所以我们需要在系统中先搭建vue-CLI工具，</p>
<p>官网：<a href="https://cli.vuejs.org/zh/" target="_blank" rel="noopener">https://cli.vuejs.org/zh/</a></p>
<p>Vue CLI 需要 <a href="https://nodejs.org/" target="_blank" rel="noopener">Node.js</a> 8.9 或更高版本 (推荐 8.11.0+)。你可以使用 <a href="https://github.com/creationix/nvm" target="_blank" rel="noopener">nvm</a> 或 <a href="https://github.com/coreybutler/nvm-windows" target="_blank" rel="noopener">nvm-windows</a>在同一台电脑中管理多个 Node 版本。</p>
<p>nvm工具的下载和安装： </p>
<p><a href="https://www.jianshu.com/p/d0e0935b150a" target="_blank" rel="noopener">https://www.jianshu.com/p/d0e0935b150a</a></p>
<p><a href="https://www.jianshu.com/p/622ad36ee020" target="_blank" rel="noopener">​https://www.jianshu.com/p/622ad36ee020</a></p>
<p>安装记录:</p>
<p>打开:<a href="https://github.com/coreybutler/nvm-windows/releases" target="_blank" rel="noopener">https://github.com/coreybutler/nvm-windows/releases</a></p>
<p>安装完成以后,先查看环境变量是否设置好了.</p>
<p><img src="/images/1552357036022.png" alt=""></p>
<p>常用的nvm命令</p>
<p>nvm list # 列出目前在nvm里面安装的所有node版本 nvm install node版本号 # 安装指定版本的node.js nvm uninstall node版本号 # 卸载指定版本的node.js nvm use node版本号 # 切换当前使用的node.js版本</p>
<p>如果使用nvm工具，则直接可以不用自己手动下载，如果使用nvm下载安装 node的npm比较慢的时候，可以修改nvm的配置文件(在安装根目录下)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># settings.txt</span><br><span class="line">root: C:\tool\nvm    [这里的目录地址是安装nvm时自己设置的地址,要根据实际修改]</span><br><span class="line">path: C:\tool\nodejs</span><br><span class="line">arch: 64</span><br><span class="line">proxy: none</span><br><span class="line">node_mirror: http:&#x2F;&#x2F;npm.taobao.org&#x2F;mirrors&#x2F;node&#x2F; </span><br><span class="line">npm_mirror: https:&#x2F;&#x2F;npm.taobao.org&#x2F;mirrors&#x2F;npm&#x2F;</span><br></pre></td></tr></table></figure>

<h2 id="6-1-安装node-js"><a href="#6-1-安装node-js" class="headerlink" title="6.1 安装node.js"></a>6.1 安装node.js</h2><p>Node.js是一个新的后端(后台)语言，它的语法和JavaScript类似，所以可以说它是属于前端的后端语言，后端语言和前端语言的区别：</p>
<ul>
<li>运行环境：后端语言一般运行在服务器端，前端语言运行在客户端的浏览器上</li>
<li>功能：后端语言可以操作文件，可以读写数据库，前端语言不能操作文件，不能读写数据库。</li>
</ul>
<p>我们一般安装LTS(长线支持版本 Long-Time Support)：</p>
<p>下载地址：<a href="https://nodejs.org/en/download/【上面已经安装了nvm，那么这里不用手动安装了】" target="_blank" rel="noopener">https://nodejs.org/en/download/【上面已经安装了nvm，那么这里不用手动安装了】</a></p>
<p>node.js的版本有两大分支：</p>
<p>官方发布的node.js版本：0.xx.xx 这种版本号就是官方发布的版本</p>
<p>社区发布的node.js版本：xx.xx.x 就是社区开发的版本</p>
<p>Node.js如果安装成功，可以查看Node.js的版本,在终端输入如下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure>

<h2 id="6-2-npm"><a href="#6-2-npm" class="headerlink" title="6.2 npm"></a>6.2 npm</h2><p>在安装node.js完成后，在node.js中会同时帮我们安装一个npm包管理器npm。我们可以借助npm命令来安装node.js的包。这个工具相当于python的pip管理器。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g 包名              <span class="comment"># 安装模块   -g表示全局安装，如果没有-g，则表示在当前项目安装</span></span><br><span class="line">npm list                        <span class="comment"># 查看当前目录下已安装的node包</span></span><br><span class="line">npm view 包名 engines            <span class="comment"># 查看包所依赖的Node的版本 </span></span><br><span class="line">npm outdated                    <span class="comment"># 检查包是否已经过时，命令会列出所有已过时的包</span></span><br><span class="line">npm update 包名                  <span class="comment"># 更新node包</span></span><br><span class="line">npm uninstall 包名               <span class="comment"># 卸载node包</span></span><br><span class="line">npm 命令 -h                      <span class="comment"># 查看指定命令的帮助文档</span></span><br></pre></td></tr></table></figure>

<h2 id="6-3-安装Vue-cli"><a href="#6-3-安装Vue-cli" class="headerlink" title="6.3 安装Vue-cli"></a>6.3 安装Vue-cli</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g vue-cli</span><br></pre></td></tr></table></figure>

<p>如果安装速度过慢，一直超时，可以考虑切换npm镜像源：<a href="http://npm.taobao.org/" target="_blank" rel="noopener">http://npm.taobao.org/</a></p>
<h2 id="6-4-使用Vue-CLI初始化创建前端项目"><a href="#6-4-使用Vue-CLI初始化创建前端项目" class="headerlink" title="6.4 使用Vue-CLI初始化创建前端项目"></a>6.4 使用Vue-CLI初始化创建前端项目</h2><h3 id="6-4-1-生成项目目录"><a href="#6-4-1-生成项目目录" class="headerlink" title="6.4.1 生成项目目录"></a>6.4.1 生成项目目录</h3><p>使用vue自动化工具可以快速搭建单页应用项目目录。</p>
<p>该工具为现代化的前端开发工作流提供了开箱即用的构建配置。只需几分钟即可创建并启动一个带热重载、保存时静态检查以及可用于生产环境的构建配置的项目：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 生成一个基于 webpack 模板的新项目</span><br><span class="line">vue init webpack 项目目录名</span><br><span class="line">例如：</span><br><span class="line">vue init webpack myproject</span><br><span class="line"></span><br><span class="line">// 启动开发服务器 ctrl+c 停止服务</span><br><span class="line"><span class="built_in">cd</span> myproject</span><br><span class="line">npm run dev           <span class="comment"># 运行这个命令就可以启动node提供的测试http服务器</span></span><br></pre></td></tr></table></figure>

<p>运行了上面代码以后,终端下会出现以下效果提示：</p>
<p><img src="/images/1552187745456.png" alt=""></p>
<p>那么访问：<a href="http://localhost:8080/" target="_blank" rel="noopener">http://localhost:8080/</a></p>
<p><img src="/images/1552187794989.png" alt=""></p>
<h3 id="6-4-2-项目目录结构"><a href="#6-4-2-项目目录结构" class="headerlink" title="6.4.2 项目目录结构"></a>6.4.2 项目目录结构</h3><p>src 主开发目录，要开发的单文件组件全部在这个目录下的components目录下</p>
<p>static 静态资源目录，所有的css，js文件放在这个文件夹</p>
<p>dist项目打包发布文件夹，最后要上线单文件项目文件都在这个文件夹中[后面打包项目,让项目中的vue组件经过编译变成js 代码以后,dist就出现了]</p>
<p>node_modules目录是node的包目录，</p>
<p>config是配置目录，</p>
<p>build是项目打包时依赖的目录</p>
<p>src/router 路由,后面需要我们在使用Router路由的时候,自己声明.</p>
<h3 id="6-4-3-项目执行流程图"><a href="#6-4-3-项目执行流程图" class="headerlink" title="6.4.3 项目执行流程图"></a>6.4.3 项目执行流程图</h3><p><img src="/images/page_structrue.png" alt=""></p>
<p>page_structrue</p>
<p>整个项目是一个主文件index.html,index.html中会引入src文件夹中的main.js,main.js中会导入顶级单文件组件App.vue,App.vue中会通过组件嵌套或者路由来引用components文件夹中的其他单文件组件。</p>
<h2 id="7-单文件组件的使用"><a href="#7-单文件组件的使用" class="headerlink" title="7. 单文件组件的使用"></a>7. 单文件组件的使用</h2><p>组件有两种：普通组件、单文件组件</p>
<p>普通组件的缺点：</p>
<ol>
<li>html代码是作为js的字符串进行编写，所以组装和开发的时候不易理解，而且没有高亮效果。</li>
<li>普通组件用在小项目中非常合适，但是复杂的大项目中，如果把更多的组件放在html文件中，那么维护成本就会变得非常昂贵。</li>
<li>普通组件只是整合了js和html，但是css代码被剥离出去了。使用的时候的时候不好处理。</li>
</ol>
<p>将一个组件相关的html结构，css样式，以及交互的JavaScript代码从html文件中剥离出来，合成一个文件，这种文件就是单文件组件，相当于一个组件具有了结构、表现和行为的完整功能，方便组件之间随意组合以及组件的重用，这种文件的扩展名为“.vue”，比如：“Home.vue”。</p>
<ol>
<li>创建组件</li>
</ol>
<p><img src="/images/1552362045478.png" alt=""></p>
<p>在组件中编辑三个标签，编写视图、vm对象和css样式代码。</p>
<h3 id="7-1-template-编写html代码的地方"><a href="#7-1-template-编写html代码的地方" class="headerlink" title="7.1 template 编写html代码的地方"></a>7.1 template 编写html代码的地方</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"Home"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> @<span class="attr">click</span>=<span class="string">"num--"</span> <span class="attr">class</span>=<span class="string">"sub"</span>&gt;</span>-<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">size</span>=<span class="string">"1"</span> <span class="attr">v-model</span>=<span class="string">"num"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> @<span class="attr">click</span>=<span class="string">"num++"</span> <span class="attr">class</span>=<span class="string">"add"</span>&gt;</span>+<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="7-2-script编写vue-js代码"><a href="#7-2-script编写vue-js代码" class="headerlink" title="7.2 script编写vue.js代码"></a>7.2 script编写vue.js代码</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    name:<span class="string">"Home"</span>,</span><br><span class="line">    data: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        num:<span class="number">0</span>,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="7-3-style编写当前组件的样式代码"><a href="#7-3-style编写当前组件的样式代码" class="headerlink" title="7.3 style编写当前组件的样式代码"></a>7.3 style编写当前组件的样式代码</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;<span class="selector-tag">style</span> <span class="selector-tag">scoped</span>&gt;</span><br><span class="line">  <span class="selector-class">.sub</span>,<span class="selector-class">.add</span>&#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">4px</span> <span class="number">7px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<h3 id="7-4-完成案例-点击加减数字"><a href="#7-4-完成案例-点击加减数字" class="headerlink" title="7.4 完成案例-点击加减数字"></a>7.4 完成案例-点击加减数字</h3><p>创建Homes.vue</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"add_num"</span>&gt;</span><br><span class="line">      &lt;span @click=<span class="string">"num++"</span>&gt;+&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">      &lt;input type="text" size="2" v-model="num"&gt;</span></span><br><span class="line"><span class="regexp">      &lt;span @click="num--"&gt;-&lt;/</span>span&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line">    name:<span class="string">"AddNum"</span>,</span><br><span class="line">    data: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        num: <span class="number">0</span>,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;style scoped&gt;</span></span><br><span class="line"><span class="regexp">   .add_num&#123;</span></span><br><span class="line"><span class="regexp">      font-size: 32px;</span></span><br><span class="line"><span class="regexp">   &#125;</span></span><br><span class="line"><span class="regexp">&lt;/</span>style&gt;</span><br></pre></td></tr></table></figure>

<p>在App.vue组件中调用上面的组件</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=<span class="string">"Home"</span>&gt;</span><br><span class="line">    &lt;span @click=<span class="string">"num--"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"sub"</span>&gt;-&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">    &lt;input type="text" size="1" v-model="num"&gt;</span></span><br><span class="line"><span class="regexp">    &lt;span @click="num++" class="add"&gt;+&lt;/</span>span&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    name:<span class="string">"Home"</span>,</span><br><span class="line">    data: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        num:<span class="number">0</span>,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;style scoped&gt;</span></span><br><span class="line"><span class="regexp">  .sub,.add&#123;</span></span><br><span class="line"><span class="regexp">    border: 1px solid red;</span></span><br><span class="line"><span class="regexp">    padding: 4px 7px;</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&lt;/</span>style&gt;</span><br></pre></td></tr></table></figure>

<p>在开发vue项目之前，需要手动把 App.vue的HelloWorld组件代码以及默认的css样式，清楚。</p>
<p>上面的代码效果：</p>
<p><img src="/images/1552362182984.png" alt=""></p>
<h3 id="7-4-组件的嵌套"><a href="#7-4-组件的嵌套" class="headerlink" title="7.4 组件的嵌套"></a>7.4 组件的嵌套</h3><p>有时候开发vue项目时,页面也可以算是一个大组件,同时页面也可以分成多个子组件.</p>
<p>因为,产生了父组件调用子组件的情况.</p>
<p>例如,我们可以声明一个组件,作为父组件</p>
<p>在components/创建一个保存子组件的目录HomeSon</p>
<p><img src="/images/1552363669256.png" alt=""></p>
<p>在HomeSon目录下,可以创建当前页面的子组件,例如,是Menu.vue</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  组件中代码必须写在同一个标签中</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div id=<span class="string">"menu"</span>&gt;</span><br><span class="line">      &lt;span&gt;&#123;&#123;msg&#125;&#125;&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">      &lt;div&gt;hello&lt;/</span>div&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    name:<span class="string">"Menu"</span>,</span><br><span class="line">    data: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        msg:<span class="string">"这是Menu组件里面的菜单"</span>,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>

<p>然后，在父组件中调用上面声明的子组件。</p>
<p><img src="/images/1552363770013.png" alt=""></p>
<p>最后,父组件被App.vue调用.就可以看到页面效果.</p>
<p><img src="/images/1552363834171.png" alt=""></p>
<p><img src="/images/1552363849977.png" alt=""></p>
<p>效果:</p>
<p><img src="/images/1552363702858.png" alt=""></p>
<h3 id="7-5-传递数据"><a href="#7-5-传递数据" class="headerlink" title="7.5 传递数据"></a>7.5 传递数据</h3><h3 id="父组件的数据传递给子组件"><a href="#父组件的数据传递给子组件" class="headerlink" title="父组件的数据传递给子组件"></a>父组件的数据传递给子组件</h3><p>例如,我们希望把父组件的数据传递给子组件.</p>
<p>可以通过props属性来进行数据传递.</p>
<p>传递数据三个步骤：</p>
<ol>
<li><p>在父组件中，调用子组件的组名处，使用属性值的方式往下传递数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;Menu :mynum&#x3D;&quot;num&quot; title&#x3D;&quot;home里面写的数据&quot;&#x2F;&gt;</span><br><span class="line"></span><br><span class="line"># 上面表示在父组件调用Menu子组件的时候传递了2个数据：</span><br><span class="line">  如果要传递变量[变量可以各种类型的数据]，属性名左边必须加上冒号:，同时，属性名是自定义的，会在子组件中使用。</span><br><span class="line">  如果要传递普通字符串数据，则不需要加上冒号:</span><br></pre></td></tr></table></figure>
</li>
<li><p>在子组件中接受上面父组件传递的数据，需要在vm组件对象中，使用props属性类接受。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    name:<span class="string">"Menu"</span>,</span><br><span class="line">    props:[<span class="string">"mynum"</span>,<span class="string">"title"</span>],</span><br><span class="line">    data: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        msg:<span class="string">"这是Menu组件里面的菜单"</span>,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 上面 props属性中表示接受了两个数据。</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在子组件中的template中使用父组件传递过来的数据.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"menu"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;msg&#125;&#125;，&#123;&#123;title&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>hello，&#123;&#123;mynum&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>效果：</p>
<p><img src="/images/1552364511546.png" alt=""></p>
<p>步骤流程:</p>
<p><img src="/images/1552364590540.png" alt=""></p>
<p>使用父组件传递数据给子组件时, 注意一下几点:</p>
<ol>
<li><p>传递数据是变量,则需要在属性左边添加冒号.</p>
<p>传递数据是变量,这种数据称之为“动态数据传递”</p>
<p>传递数据不是变量,这种数据称之为“静态数据传递”</p>
</li>
<li><p>父组件中修改了数据,在子组件中会被同步修改,但是,子组件中的数据修改了,是不是影响到父组件中的数据.</p>
<p>这种情况,在开发时,也被称为“单向数据流”</p>
</li>
</ol>
<h3 id="子组件传递数据给父组件"><a href="#子组件传递数据给父组件" class="headerlink" title="子组件传递数据给父组件"></a>子组件传递数据给父组件</h3><ol>
<li><p>在子组件中，通过<code>this.$emit()</code>来调用父组件中定义的事件.</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;p&gt;Post的子组件&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">      &lt;h2&gt;&#123;&#123;fnum&#125;&#125;&lt;/</span>h2&gt;</span><br><span class="line">      &lt;p&gt;data=&#123;&#123;data&#125;&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">      &lt;p&gt;fnum=&#123;&#123;fnum&#125;&#125;&lt;/</span>p&gt;</span><br><span class="line">      &lt;div&gt;<span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"fnum"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">        name: <span class="string">"PostSon"</span>,</span><br><span class="line">        <span class="comment">// 父组件传递数据给子组件: 1. 在父组件中调用子组件的组件名称标签上面声明属性和传递值，2. 在子组件中通过props进行接收</span></span><br><span class="line">        props:[<span class="string">"data"</span>,<span class="string">"fnum"</span>],  <span class="comment">// 接受父组件中传递过来的数据</span></span><br><span class="line">        <span class="comment">// 子组件传递数据给父组件[事件的方式进行传递]：</span></span><br><span class="line">        watch:&#123;</span><br><span class="line">          fnum()&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.fnum);</span><br><span class="line">            <span class="comment">// this.$emit("父元素的自定义事件","要传递的数据");  // 通过this.$emit()方法，子组件可以把数据传递给父组件</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">this</span>.$emit(<span class="string">"postparentdata"</span>,<span class="keyword">this</span>.fnum);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;style scoped&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;/</span>style&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>父组件中声明一个和子组件中<code>this.$emit(&quot;自定义事件名称&quot;)</code>对应的事件属性。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>num=&#123;&#123;num&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">Son</span> <span class="attr">data</span>=<span class="string">"我是付组件里面的内容"</span> <span class="attr">:fnum</span>=<span class="string">"num"</span> @<span class="attr">postparentdata</span>=<span class="string">"getsondata"</span>&gt;</span><span class="tag">&lt;/<span class="name">Son</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>父组件中，声明一个自定义方法，在事件被调用时，执行的。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">import</span> Son <span class="keyword">from</span> <span class="string">"./PostSon"</span></span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">        name: <span class="string">"Post"</span>,</span><br><span class="line">        data()&#123;</span><br><span class="line">          <span class="keyword">return</span> &#123;</span><br><span class="line">            num: <span class="number">100</span>,</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        components:&#123;</span><br><span class="line">          Son:Son,</span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">          getsondata(message)&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"父组件"</span>+message);</span><br><span class="line">            <span class="keyword">this</span>.num = message;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>作业：</p>
<ol>
<li>使用组件化开发，完成之前的选项卡练习功能</li>
<li>使用组件化开发，完成之前的todolist功能</li>
<li>使用组件化开发，完成table表格的增删查改作业，数据使用本地存储进行保存</li>
</ol>
<h2 id="8-在组件中使用axios获取数据"><a href="#8-在组件中使用axios获取数据" class="headerlink" title="8. 在组件中使用axios获取数据"></a>8. 在组件中使用axios获取数据</h2><p>默认情况下，我们的项目中并没有对axios包的支持，所以我们需要下载安装。</p>
<p>在项目根目录中使用 npm安装包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install axios</span><br></pre></td></tr></table></figure>

<p>接着在main.js文件中，导入axios并把axios对象 挂载到vue属性中多为一个子对象，这样我们才能在组件中使用。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">// The Vue build version to load <span class="keyword">with</span> the `<span class="keyword">import</span>` command</span><br><span class="line">// (runtime-only <span class="keyword">or</span> standalone) has been set <span class="keyword">in</span> webpack.base.conf <span class="keyword">with</span> an alias.</span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App'</span> // 这里表示从别的目录下导入 单文件组件</span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span>; // 从node_modules目录中导入包</span><br><span class="line">Vue.config.productionTip = false</span><br><span class="line"></span><br><span class="line">Vue.prototype.$axios = axios; // 把对象挂载vue中</span><br><span class="line"></span><br><span class="line">/* eslint-disable no-new */</span><br><span class="line">new Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  components: &#123; App &#125;,</span><br><span class="line">  template: <span class="string">'&lt;App/&gt;'</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="8-1-在组建中使用axios获取数据"><a href="#8-1-在组建中使用axios获取数据" class="headerlink" title="8.1 在组建中使用axios获取数据"></a>8.1 在组建中使用axios获取数据</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line">	。。。</span><br><span class="line">	methods:&#123;</span><br><span class="line">      get_data:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">         <span class="comment">// 使用axios请求数据</span></span><br><span class="line">        <span class="keyword">this</span>.$axios.get(<span class="string">"http://wthrcdn.etouch.cn/weather_mini?city=深圳"</span>).then(<span class="function">(<span class="params">response</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(response);</span><br><span class="line">        &#125;).catch(<span class="function"><span class="params">error</span>=&gt;</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(error);</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果:</p>
<p><img src="/images/1552202922168.png" alt=""></p>
<p>使用的时候，因为本质上来说，我们还是原来的axios，所以也会收到同源策略的影响。</p>
]]></content>
      <categories>
        <category>前端框架</category>
      </categories>
      <tags>
        <tag>vue框架</tag>
      </tags>
  </entry>
  <entry>
    <title>[vue对象的属性功能]</title>
    <url>/2020/02/23/vue%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%B1%9E%E6%80%A7%E5%8A%9F%E8%83%BD/</url>
    <content><![CDATA[<h1 id="3-Vue对象提供的属性功能"><a href="#3-Vue对象提供的属性功能" class="headerlink" title="3. Vue对象提供的属性功能"></a>3. Vue对象提供的属性功能</h1><h2 id="3-1-过滤器"><a href="#3-1-过滤器" class="headerlink" title="3.1 过滤器"></a>3.1 过滤器</h2><p>过滤器，就是vue允许开发者自定义的文本格式化函数，可以使用在两个地方：输出内容和操作数据中。</p>
<p>定义过滤器的方式有两种。</p>
<h3 id="3-1-1-使用Vue-filter-进行全局定义"><a href="#3-1-1-使用Vue-filter-进行全局定义" class="headerlink" title="3.1.1 使用Vue.filter()进行全局定义"></a>3.1.1 使用Vue.filter()进行全局定义</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">Vue.filter("RMB1", function(v)&#123;</span><br><span class="line">  	//就是来格式化(处理)v这个数据的</span><br><span class="line">  	if(v==0)&#123;</span><br><span class="line">    		return v</span><br><span class="line">  	&#125;</span><br><span class="line"></span><br><span class="line">  	return v+"元"</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="3-1-2-在vue对象中通过filters属性来定义"><a href="#3-1-2-在vue对象中通过filters属性来定义" class="headerlink" title="3.1.2 在vue对象中通过filters属性来定义"></a>3.1.2 在vue对象中通过filters属性来定义</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">var vm = new Vue(&#123;</span><br><span class="line">  el:"#app",</span><br><span class="line">  data:&#123;&#125;,</span><br><span class="line">  filters:&#123;</span><br><span class="line">    RMB2:function(value)&#123;</span><br><span class="line">      if(value=='')&#123;</span><br><span class="line">        return;</span><br><span class="line">      &#125;else&#123;</span><br><span class="line">      	return '¥ '+value;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="3-4-计算和侦听属性"><a href="#3-4-计算和侦听属性" class="headerlink" title="3.4 计算和侦听属性"></a>3.4 计算和侦听属性</h2><h3 id="3-4-1-计算属性"><a href="#3-4-1-计算属性" class="headerlink" title="3.4.1 计算属性"></a>3.4.1 计算属性</h3><p>我们之前学习过字符串反转，如果直接把反转的代码写在元素中，则会使得其他同事在开发时时不易发现数据被调整了，所以vue提供了一个计算属性(computed)，可以让我们把调整data数据的代码存在在该属性中。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/vue.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">		<span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el:<span class="string">"#app"</span>,</span></span><br><span class="line">            data:&#123;</span><br><span class="line"><span class="actionscript">                str1: <span class="string">"abcdefgh"</span></span></span><br><span class="line">            &#125;,</span><br><span class="line"><span class="actionscript">            computed:&#123;   <span class="comment">//计算属性：里面的函数都必须有返回值</span></span></span><br><span class="line"><span class="actionscript">                strRevs: <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">var</span> ret = <span class="keyword">this</span>.str1.split(<span class="string">""</span>).reverse().join(<span class="string">""</span>);</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">return</span> ret</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; str1 &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; strRevs &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3-4-2-监听属性"><a href="#3-4-2-监听属性" class="headerlink" title="3.4.2 监听属性"></a>3.4.2 监听属性</h3><p>侦听属性，可以帮助我们侦听data某个数据的变化，从而做相应的自定义操作。</p>
<p>侦听属性是一个对象，它的键是要监听的对象或者变量，值一般是函数，当侦听的data数据发生变化时，会自定执行的对应函数，这个函数在被调用时，vue会传入两个形参，第一个是变化前的数据值，第二个是变化后的数据值。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/vue.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="actionscript">         <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el:<span class="string">"#app"</span>,</span></span><br><span class="line">            data:&#123;</span><br><span class="line">                num:20</span><br><span class="line">            &#125;,</span><br><span class="line">            watch:&#123;</span><br><span class="line"><span class="actionscript">                num:<span class="function"><span class="keyword">function</span><span class="params">(newval,oldval)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">                    <span class="comment">//num发生变化的时候，要执行的代码</span></span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(<span class="string">"num已经发生了变化！"</span>);</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; num &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"num++"</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="3-5-vue对象的生命周期"><a href="#3-5-vue对象的生命周期" class="headerlink" title="3.5 vue对象的生命周期"></a>3.5 vue对象的生命周期</h2><p>每个Vue对象在创建时都要经过一系列的初始化过程。在这个过程中Vue.js会自动运行一些叫做生命周期的的钩子函数，我们可以使用这些函数，在对象创建的不同阶段加上我们需要的代码，实现特定的功能。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">    &lt;script src="js/</span>vue.min.js<span class="string">"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">    &lt;script&gt;</span></span><br><span class="line"><span class="string">    window.onload = function()&#123;</span></span><br><span class="line"><span class="string">        var vm = new Vue(&#123;</span></span><br><span class="line">            el:"#app",</span><br><span class="line">            data:&#123;</span><br><span class="line">                num:<span class="number">0</span></span><br><span class="line">            &#125;,</span><br><span class="line">            beforeCreate:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"beforeCreate,vm对象尚未创建,num="</span>+ <span class="keyword">this</span>.num);  <span class="comment">//undefined</span></span><br><span class="line">                <span class="keyword">this</span>.name=<span class="number">10</span>; <span class="comment">// 此时没有this对象呢，所以设置的name无效，被在创建对象的时候被覆盖为0</span></span><br><span class="line">            &#125;,</span><br><span class="line">            created:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"created,vm对象创建完成,设置好了要控制的元素范围,num="</span>+<span class="keyword">this</span>.num );  <span class="comment">// 0</span></span><br><span class="line">                <span class="keyword">this</span>.num = <span class="number">20</span>;</span><br><span class="line">            &#125;,</span><br><span class="line">            beforeMount:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log( <span class="keyword">this</span>.$el.innerHTML ); <span class="comment">// &lt;p&gt;&#123;&#123;num&#125;&#125;&lt;/p&gt;</span></span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"beforeMount,vm对象尚未把data数据显示到页面中,num="</span>+<span class="keyword">this</span>.num ); <span class="comment">// 20</span></span><br><span class="line">                <span class="keyword">this</span>.num = <span class="number">30</span>;</span><br><span class="line">            &#125;,</span><br><span class="line">            mounted:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log( <span class="keyword">this</span>.$el.innerHTML ); <span class="comment">// &lt;p&gt;30&lt;/p&gt;</span></span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"mounted,vm对象已经把data数据显示到页面中,num="</span>+<span class="keyword">this</span>.num); <span class="comment">// 30</span></span><br><span class="line">            &#125;,</span><br><span class="line">            beforeUpdate:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="comment">// this.$el 就是我们上面的el属性了，$el表示当前vue.js所控制的元素#app</span></span><br><span class="line">                <span class="built_in">console</span>.log( <span class="keyword">this</span>.$el.innerHTML );  <span class="comment">// &lt;p&gt;30&lt;/p&gt;</span></span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"beforeUpdate,vm对象尚未把更新后的data数据显示到页面中,num="</span>+<span class="keyword">this</span>.num); <span class="comment">// beforeUpdate----31</span></span><br><span class="line">                </span><br><span class="line">            &#125;,</span><br><span class="line">            updated:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log( <span class="keyword">this</span>.$el.innerHTML ); <span class="comment">// &lt;p&gt;31&lt;/p&gt;</span></span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"updated,vm对象已经把过呢更新后的data数据显示到页面中,num="</span> + <span class="keyword">this</span>.num ); <span class="comment">// updated----31</span></span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">        &lt;p&gt;&#123;&#123;num&#125;&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">        &lt;button @click="num++"&gt;按钮&lt;/</span>button&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure>

<p>总结：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在vue使用的过程中，如果要初始化操作，把初始化操作的代码放在 mounted 中执行。</span><br><span class="line">mounted阶段就是在vm对象已经把data数据实现到页面以后。一般页面初始化使用。例如，用户访问页面加载成功以后，就要执行的ajax请求。</span><br><span class="line"></span><br><span class="line">另一个就是created，这个阶段就是在 vue对象创建以后，把ajax请求后端数据的代码放进 created</span><br></pre></td></tr></table></figure>

<h2 id="3-2-阻止事件冒泡和刷新页面"><a href="#3-2-阻止事件冒泡和刷新页面" class="headerlink" title="3.2 阻止事件冒泡和刷新页面"></a>3.2 阻止事件冒泡和刷新页面</h2><p>事件冒泡：指代js中子元素的事件触发以后，会导致父级元素的同类事件一并被触发到。</p>
<p>事件冒泡有好处，也有坏处。</p>
<p>好处：如果能正确利用这种现象，可以实现事件委托，提升特效的性能</p>
<p>坏处：如果没有正确使用，则会导致不必要的bug出现。</p>
<p>使用.stop和.prevent</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.box1</span>&#123;</span></span><br><span class="line">            width: 200px;</span><br><span class="line">            height: 200px;</span><br><span class="line"><span class="css">            <span class="selector-tag">background</span>: <span class="selector-id">#ccc</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.box2</span>&#123;</span></span><br><span class="line">            width: 100px;</span><br><span class="line">            height: 100px;</span><br><span class="line">            background: pink;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/vue.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el:<span class="string">"#app"</span>,</span></span><br><span class="line">            data:&#123;&#125;</span><br><span class="line">        &#125;)        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box1"</span> @<span class="attr">click</span>=<span class="string">"alert('box1')"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box2"</span> @<span class="attr">click.stop.prevent</span>=<span class="string">"alert('box2')"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>   <span class="comment">&lt;!-- @click.stop来阻止事件冒泡 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"#"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交02"</span> @<span class="attr">click.prevent</span>=<span class="string">""</span>&gt;</span> <span class="comment">&lt;!-- @click.prevent来阻止表单提交 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="3-3-综合案例-todolist"><a href="#3-3-综合案例-todolist" class="headerlink" title="3.3 综合案例-todolist"></a>3.3 综合案例-todolist</h2><p>我的计划列表</p>
<p>html代码:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>todolist<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css">		<span class="selector-class">.list_con</span>&#123;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">width</span><span class="selector-pseudo">:600px</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">margin</span><span class="selector-pseudo">:50px</span> <span class="selector-tag">auto</span> 0;</span></span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="selector-class">.inputtxt</span>&#123;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">width</span><span class="selector-pseudo">:550px</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">height</span><span class="selector-pseudo">:30px</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">border</span><span class="selector-pseudo">:1px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ccc</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">padding</span><span class="selector-pseudo">:0px</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">text-indent</span><span class="selector-pseudo">:10px</span>;</span></span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="selector-class">.inputbtn</span>&#123;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">width</span><span class="selector-pseudo">:40px</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">height</span><span class="selector-pseudo">:32px</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">padding</span><span class="selector-pseudo">:0px</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">border</span><span class="selector-pseudo">:1px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ccc</span>;</span></span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="selector-class">.list</span>&#123;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">margin</span><span class="selector-pseudo">:0</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">padding</span><span class="selector-pseudo">:0</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">list-style</span><span class="selector-pseudo">:none</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">margin-top</span><span class="selector-pseudo">:20px</span>;</span></span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="selector-class">.list</span> <span class="selector-tag">li</span>&#123;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">height</span><span class="selector-pseudo">:40px</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">line-height</span><span class="selector-pseudo">:40px</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">border-bottom</span><span class="selector-pseudo">:1px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ccc</span>;</span></span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line"><span class="css">		<span class="selector-class">.list</span> <span class="selector-tag">li</span> <span class="selector-tag">span</span>&#123;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">float</span><span class="selector-pseudo">:left</span>;</span></span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line"><span class="css">		<span class="selector-class">.list</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span>&#123;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">float</span><span class="selector-pseudo">:right</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">text-decoration</span><span class="selector-pseudo">:none</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">margin</span><span class="selector-pseudo">:0</span> 10<span class="selector-tag">px</span>;</span></span><br><span class="line">		&#125;</span><br><span class="line">	<span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list_con"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">h2</span>&gt;</span>To do list<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">"txt1"</span> <span class="attr">class</span>=<span class="string">"inputtxt"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">"增加"</span> <span class="attr">id</span>=<span class="string">"btn1"</span> <span class="attr">class</span>=<span class="string">"inputbtn"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"list"</span> <span class="attr">class</span>=<span class="string">"list"</span>&gt;</span></span><br><span class="line">			<span class="comment">&lt;!-- javascript:; # 阻止a标签跳转 --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">span</span>&gt;</span>学习html<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">class</span>=<span class="string">"up"</span>&gt;</span> ↑ <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">class</span>=<span class="string">"down"</span>&gt;</span> ↓ <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">class</span>=<span class="string">"del"</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>学习css<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">class</span>=<span class="string">"up"</span>&gt;</span> ↑ <span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">class</span>=<span class="string">"down"</span>&gt;</span> ↓ <span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">class</span>=<span class="string">"del"</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>学习javascript<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">class</span>=<span class="string">"up"</span>&gt;</span> ↑ <span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">class</span>=<span class="string">"down"</span>&gt;</span> ↓ <span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">class</span>=<span class="string">"del"</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>特效实现效果：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>todolist<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css">		<span class="selector-class">.list_con</span>&#123;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">width</span><span class="selector-pseudo">:600px</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">margin</span><span class="selector-pseudo">:50px</span> <span class="selector-tag">auto</span> 0;</span></span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="selector-class">.inputtxt</span>&#123;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">width</span><span class="selector-pseudo">:550px</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">height</span><span class="selector-pseudo">:30px</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">border</span><span class="selector-pseudo">:1px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ccc</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">padding</span><span class="selector-pseudo">:0px</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">text-indent</span><span class="selector-pseudo">:10px</span>;</span></span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="selector-class">.inputbtn</span>&#123;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">width</span><span class="selector-pseudo">:40px</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">height</span><span class="selector-pseudo">:32px</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">padding</span><span class="selector-pseudo">:0px</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">border</span><span class="selector-pseudo">:1px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ccc</span>;</span></span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="selector-class">.list</span>&#123;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">margin</span><span class="selector-pseudo">:0</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">padding</span><span class="selector-pseudo">:0</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">list-style</span><span class="selector-pseudo">:none</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">margin-top</span><span class="selector-pseudo">:20px</span>;</span></span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="selector-class">.list</span> <span class="selector-tag">li</span>&#123;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">height</span><span class="selector-pseudo">:40px</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">line-height</span><span class="selector-pseudo">:40px</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">border-bottom</span><span class="selector-pseudo">:1px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ccc</span>;</span></span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line"><span class="css">		<span class="selector-class">.list</span> <span class="selector-tag">li</span> <span class="selector-tag">span</span>&#123;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">float</span><span class="selector-pseudo">:left</span>;</span></span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line"><span class="css">		<span class="selector-class">.list</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span>&#123;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">float</span><span class="selector-pseudo">:right</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">text-decoration</span><span class="selector-pseudo">:none</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">margin</span><span class="selector-pseudo">:0</span> 10<span class="selector-tag">px</span>;</span></span><br><span class="line">		&#125;</span><br><span class="line">	<span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"todolist"</span> <span class="attr">class</span>=<span class="string">"list_con"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">h2</span>&gt;</span>To do list<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"message"</span> <span class="attr">class</span>=<span class="string">"inputtxt"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> @<span class="attr">click</span>=<span class="string">"addItem"</span> <span class="attr">value</span>=<span class="string">"增加"</span> <span class="attr">class</span>=<span class="string">"inputbtn"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"list"</span> <span class="attr">class</span>=<span class="string">"list"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"item,key in dolist"</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">a</span> @<span class="attr">click</span>=<span class="string">"upItem(key)"</span> <span class="attr">class</span>=<span class="string">"up"</span> &gt;</span> ↑ <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">a</span> @<span class="attr">click</span>=<span class="string">"downItem(key)"</span> <span class="attr">class</span>=<span class="string">"down"</span>&gt;</span> ↓ <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">a</span> @<span class="attr">click</span>=<span class="string">"delItem(key)"</span> <span class="attr">class</span>=<span class="string">"del"</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 计划列表代码</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el:<span class="string">"#todolist"</span>,</span></span><br><span class="line">        data:&#123;</span><br><span class="line"><span class="actionscript">            message:<span class="string">""</span>,</span></span><br><span class="line">            dolist:[</span><br><span class="line"><span class="actionscript">                <span class="string">"学习html"</span>,</span></span><br><span class="line"><span class="actionscript">                <span class="string">"学习css"</span>,</span></span><br><span class="line"><span class="actionscript">                <span class="string">"学习javascript"</span>,</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">            addItem()&#123;</span><br><span class="line"><span class="actionscript">                <span class="keyword">if</span>(<span class="keyword">this</span>.messsage==<span class="string">""</span>)&#123;</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.dolist.push(<span class="keyword">this</span>.message);</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.message = <span class="string">""</span></span></span><br><span class="line">            &#125;,</span><br><span class="line">            delItem(key)&#123;</span><br><span class="line"><span class="actionscript">                <span class="comment">// 删除和替换</span></span></span><br><span class="line"><span class="actionscript">                <span class="comment">// 参数1: 开始下表</span></span></span><br><span class="line"><span class="actionscript">                <span class="comment">// 参数2: 元素长度，如果不填默认删除到最后</span></span></span><br><span class="line"><span class="actionscript">                <span class="comment">// 参数3: 表示使用当前参数替换已经删除内容的位置</span></span></span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.dolist.splice(key, <span class="number">1</span>);</span></span><br><span class="line">            &#125;,</span><br><span class="line">            upItem(key)&#123;</span><br><span class="line">                if(key==0)&#123;</span><br><span class="line"><span class="actionscript">                    <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line">                &#125;</span><br><span class="line"><span class="actionscript">                <span class="comment">// 向上移动</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">let</span> result = <span class="keyword">this</span>.dolist.splice(key,<span class="number">1</span>);</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.dolist.splice(key<span class="number">-1</span>,<span class="number">0</span>,result[<span class="number">0</span>]);</span></span><br><span class="line">            &#125;,</span><br><span class="line">            downItem(key)&#123;</span><br><span class="line"><span class="actionscript">                <span class="comment">// 向下移动</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">let</span> result = <span class="keyword">this</span>.dolist.splice(key, <span class="number">1</span>);</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(result);</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.dolist.splice(key+<span class="number">1</span>,<span class="number">0</span>,result[<span class="number">0</span>]);</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端框架</category>
      </categories>
      <tags>
        <tag>vue框架</tag>
      </tags>
  </entry>
  <entry>
    <title>[vue快速入门使用]</title>
    <url>/2020/02/22/vue%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="1-vue-js的快速入门使用"><a href="#1-vue-js的快速入门使用" class="headerlink" title="1. vue.js的快速入门使用"></a>1. vue.js的快速入门使用</h1><h2 id="1-1-vue-js库的下载"><a href="#1-1-vue-js库的下载" class="headerlink" title="1.1 vue.js库的下载"></a>1.1 vue.js库的下载</h2><p>vue.js是目前前端web开发最流行的工具库，由尤雨溪在2014年2月发布的。</p>
<p>另外几个常见的工具库：react.js /angular.js/jQuery</p>
<p>官方网站：</p>
<p> 中文：<a href="https://cn.vuejs.org/" target="_blank" rel="noopener">https://cn.vuejs.org/</a></p>
<p> 英文：<a href="https://cn.vuejs.org/" target="_blank" rel="noopener">https://vuejs.org/</a></p>
<p>官方文档：<a href="https://cn.vuejs.org/v2/guide/" target="_blank" rel="noopener">https://cn.vuejs.org/v2/guide/</a></p>
<p>vue.js目前有1.x、2.x和3.x 版本，我们学习2.x版本的。</p>
<h2 id="1-2-vue-js库的基本使用"><a href="#1-2-vue-js库的基本使用" class="headerlink" title="1.2 vue.js库的基本使用"></a>1.2 vue.js库的基本使用</h2><p>在github下载：</p>
<p>在官网下载地址： <a href="https://cn.vuejs.org/v2/guide/installation.html" target="_blank" rel="noopener">https://cn.vuejs.org/v2/guide/installation.html</a></p>
<p>vue的引入类似于jQuery，开发中可以使用开发版本vue-x.x.x.js，产品上线要换成vue.min.js。</p>
<p>下图是github网站下载的vue.js目录</p>
<p><img src="/images/1544363032042.png" alt=""></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="actionscript">      	<span class="comment">// vue.js的代码开始于一个Vue对象。所以每次操作数据都要声明Vue对象开始。</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el:<span class="string">'#app'</span>,   <span class="comment">// 设置当前vue对象要控制的标签范围。</span></span></span><br><span class="line"><span class="actionscript">            data:&#123;  <span class="comment">// data是将要展示到HTML标签元素中的数据。</span></span></span><br><span class="line"><span class="actionscript">              message: <span class="string">'hello world!'</span>,</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &#123;&#123; message &#125;&#125; 表示把vue对象里面data属性中的对应数据输出到页面中 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 在双标签中显示数据要通过&#123;&#123;  &#125;&#125;来完成 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>总结：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">1. vue的使用要从创建Vue对象开始</span><br><span class="line">   var vm = new Vue();</span><br><span class="line">   </span><br><span class="line">2. 创建vue对象的时候，需要传递参数，是json对象，json对象对象必须至少有两个属性成员</span><br><span class="line">   var vm = new Vue(&#123;</span><br><span class="line">         el:"#app",</span><br><span class="line">	 	 data: &#123;</span><br><span class="line">             数据变量:"变量值",</span><br><span class="line">             数据变量:"变量值",</span><br><span class="line">             数据变量:"变量值",</span><br><span class="line">     	 &#125;,</span><br><span class="line">   &#125;);</span><br><span class="line">   </span><br><span class="line">   el:设置vue可以操作的html内容范围，值一般就是css的id选择器。</span><br><span class="line">   data: 保存vue.js中要显示到html页面的数据。</span><br><span class="line">   </span><br><span class="line">3. vue.js要控制器的内容范围，必须先通过id来设置。</span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="1-3-vue-js的M-V-VM思想"><a href="#1-3-vue-js的M-V-VM思想" class="headerlink" title="1.3 vue.js的M-V-VM思想"></a>1.3 vue.js的M-V-VM思想</h2><p>MVVM 是Model-View-ViewModel 的缩写，它是一种基于前端开发的架构模式。</p>
<p><code>Model</code> 指代的就是vue对象的data属性里面的数据。这里的数据要显示到页面中。</p>
<p><code>View</code> 指代的就是vue中数据要显示的HTML页面，在vue中，也称之为“视图模板” 。</p>
<p><code>ViewModel</code> 指代的是vue.js中我们编写代码时的vm对象了，它是vue.js的核心，负责连接 View 和 Model，保证视图和数据的一致性，所以前面代码中，data里面的数据被显示中p标签中就是vm对象自动完成的。</p>
<p><img src="/images/201105031754285061.png" alt=""></p>
<p>编写代码，让我们更加清晰的了解MVVM：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/vue.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 创建vm对象</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el: <span class="string">"#app"</span>,</span></span><br><span class="line">            data: &#123;</span><br><span class="line"><span class="actionscript">                name:<span class="string">"大标题"</span>,</span></span><br><span class="line">                age:16,</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 在双标签中显示数据要通过&#123;&#123;  &#125;&#125;来完成 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;age&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 在表单输入框中显示数据要使用v-model来完成，模板语法的时候，我们会详细学习 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"name"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在浏览器中可以在 console.log通过 vm对象可以直接访问el和data属性,甚至可以访问data里面的数据</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">console.log(vm.$el)        # #app  vm对象可以控制的范围</span><br><span class="line">console.log(vm.$data);     #    vm对象要显示到页面中的数据</span><br><span class="line">console.log(vm.$data.message);  # 访问data里面的数据</span><br><span class="line">console.log(vm.message);   # 这个 message就是data里面声明的数据,也可以使用 vm.变量名显示其他数据,message只是举例.</span><br></pre></td></tr></table></figure>

<p>总结：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> 如果要输出data里面的数据作为普通标签的内容，需要使用&#123;&#123;  &#125;&#125;</span><br><span class="line">   用法：</span><br><span class="line">      vue对象的data属性：</span><br><span class="line">          data:&#123;</span><br><span class="line">            name:<span class="string">"小明"</span>,</span><br><span class="line">          &#125;</span><br><span class="line">      标签元素：</span><br><span class="line">      		&lt;h1&gt;&#123;&#123; name &#125;&#125;&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">2. 如果要输出data里面的数据作为表单元素的值，需要使用vue.js提供的元素属性v-model</span></span><br><span class="line"><span class="regexp">   用法：</span></span><br><span class="line"><span class="regexp">      vue对象的data属性：</span></span><br><span class="line"><span class="regexp">          data:&#123;</span></span><br><span class="line"><span class="regexp">            name:"小明",</span></span><br><span class="line"><span class="regexp">          &#125;</span></span><br><span class="line"><span class="regexp">      表单元素：</span></span><br><span class="line"><span class="regexp">      		&lt;input v-model="name"&gt;</span></span><br><span class="line"><span class="regexp">      </span></span><br><span class="line"><span class="regexp">   使用v-model把data里面的数据显示到表单元素以后，一旦用户修改表单元素的值，则data里面对应数据的值也会随之发生改变，甚至，页面中凡是使用了这个数据都会发生变化。</span></span><br></pre></td></tr></table></figure>

<h2 id="1-4-显示数据"><a href="#1-4-显示数据" class="headerlink" title="1.4 显示数据"></a>1.4 显示数据</h2> 
1. 在双标签中显示数据要通过{{ }}来完成数据显示，双括号中还可以支持js表达式和符合js语法的代码，例如函数调用.
2. 在表单输入框中显示数据要使用v-model来完成数据显示

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/vue.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">          el:<span class="string">"#app"</span>,</span></span><br><span class="line">          data:&#123;</span><br><span class="line"><span class="actionscript">            str1: <span class="string">"hello"</span>,</span></span><br><span class="line">            num: 20,</span><br><span class="line">            price: 7.1,</span><br><span class="line"><span class="actionscript">            url1: <span class="string">"http://www.baidu.com"</span>,</span></span><br><span class="line"><span class="actionscript">            url2: <span class="string">"http://www.taobao.com"</span></span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)        </span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; str1 &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; str1.split("").reverse().join("") &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>num和num2中比较大的数是：&#123;&#123; num&gt;num2? num:num2 &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"name"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;(price+0.8).toFixed(2)&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>双花括号仅用输出文本内容,如果要输出html代码,则不能使用这个.要使用v-html来输出.</p>
<p>v-html必须在html标签里面作为属性写出来.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;title&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123;url1&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        &#123;&#123;img&#125;&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-html</span>=<span class="string">"img"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el:<span class="string">".app"</span>,</span></span><br><span class="line">            data:&#123;</span><br><span class="line"><span class="actionscript">                title:<span class="string">"我的vue"</span>,</span></span><br><span class="line"><span class="actionscript">                url1:<span class="string">"我的收获地址"</span>,</span></span><br><span class="line"><span class="handlebars"><span class="xml">                img:'<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/shendan.png"</span>&gt;</span>',</span></span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>总结：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">1. 可以在普通标签中使用&#123;&#123;  &#125;&#125; 或者 v-html 来输出data里面的数据</span><br><span class="line">   <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">2. 可以在表单标签中使用v-model属性来输出data里面的数据，同时还可以修改data里面的数据</span><br><span class="line">   <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"username"</span>&gt;</span></span><br></pre></td></tr></table></figure>
 
在输出内容到普通标签的使用{{ }}

v-model或者v-html等vue提供的属性，或者 {{}} 都支持js代码。

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;str1.split("").reverse().join("")&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 3.2 支持js的运算符--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;num1+3&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 3.3 js还有一种运算符,三元运算符,类似于python里面的三元表达式</span></span><br><span class="line"><span class="comment">        三元运算符的语法:</span></span><br><span class="line"><span class="comment">         判断条件 ? 条件为true : 条件为false的结果</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        python 三元表达式[三目运算符]的语法:</span></span><br><span class="line"><span class="comment">        a if 条件 else b</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>num1和num2之间进行比较,最大值:&#123;&#123; num2&gt;num1?num2:num1 &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>例子：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Vue的快速使用<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;url&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;text&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-html</span>=<span class="string">"text"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">"url"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>num是&#123;&#123;num%2==0?'偶数':'奇数'&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>num的下一个数字：&#123;&#123;num-0+1&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"num"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;message.split("").reverse().join("")&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"message"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el:<span class="string">"#app"</span>, <span class="comment">// 设置vue对象控制的标签范围</span></span></span><br><span class="line"><span class="actionscript">        data:&#123;     <span class="comment">// vue要操作的数据</span></span></span><br><span class="line"><span class="actionscript">            url:<span class="string">"http://www.luffycity.com"</span>,</span></span><br><span class="line"><span class="handlebars"><span class="xml">            text:"<span class="tag">&lt;<span class="name">h1</span>&gt;</span>大标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>",</span></span></span><br><span class="line">            num: 100,</span><br><span class="line"><span class="actionscript">            message:<span class="string">"abcdef"</span>,</span></span><br><span class="line">        &#125;,</span><br><span class="line">        </span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="2-常用指令"><a href="#2-常用指令" class="headerlink" title="2. 常用指令"></a>2. 常用指令</h1><p>指令 (Directives) 是带有“v-”前缀的特殊属性。每一个指令在vue中都有固定的作用。</p>
<p>在vue中，提供了很多指令，常用的有：v-if、v-model、v-for等等。</p>
<p>指令会在vm对象的data属性的数据发生变化时，会同时改变元素中的其控制的内容或属性。</p>
<p>因为vue的历史版本原因，所以有一部分指令都有两种写法：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">vue1.x写法             vue2.x的写法</span><br><span class="line">v-html         ----&gt;   v-html</span><br><span class="line">&#123;&#123; 普通文本 &#125;&#125;         &#123;&#123;普通文本&#125;&#125;</span><br><span class="line">v-bind:属性名   ----&gt;  :属性</span><br><span class="line">v-on:事件名     ----&gt;  @事件名</span><br></pre></td></tr></table></figure>

<h2 id="2-1-操作属性"><a href="#2-1-操作属性" class="headerlink" title="2.1 操作属性"></a>2.1 操作属性</h2><p>格式：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">标签名</span> <span class="attr">:</span>标签属性=<span class="string">"data属性"</span>&gt;</span><span class="tag">&lt;/<span class="name">标签名</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">:title</span>=<span class="string">"str1"</span>&gt;</span>&#123;&#123; str1 &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span> <span class="comment">&lt;!-- 也可以使用v-html显示双标签的内容，&#123;&#123;  &#125;&#125; 是简写 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">:href</span>=<span class="string">"url2"</span>&gt;</span>淘宝<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">"url1"</span>&gt;</span>百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span>  <span class="comment">&lt;!-- v-bind是vue1.x版本的写法 --&gt;</span></span><br></pre></td></tr></table></figure>

<p>显示wifi密码效果：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"index"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">"url"</span> <span class="attr">:alt</span>=<span class="string">"title"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">:type</span>=<span class="string">"type"</span> <span class="attr">placeholder</span>=<span class="string">"请输入wifi密码"</span>&gt;</span> <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"type='text'"</span>&gt;</span>显示密码<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el:<span class="string">"#index"</span>,</span></span><br><span class="line">        data:&#123;</span><br><span class="line"><span class="actionscript">          url:<span class="string">"https://www.luffycity.com/static/img/head-logo.a7cedf3.svg"</span>,</span></span><br><span class="line"><span class="actionscript">          title:<span class="string">"路飞学成"</span>,</span></span><br><span class="line"><span class="actionscript">          type:<span class="string">"password"</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="2-2-事件绑定"><a href="#2-2-事件绑定" class="headerlink" title="2.2 事件绑定"></a>2.2 事件绑定</h2><p>有两种事件操作的写法，@事件名 和 v-on:事件名</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"num++"</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span>   <span class="comment">&lt;!-- v-on 是vue1.x版本的写法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"num+=5"</span>&gt;</span>按钮2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>总结：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">1. 使用@事件名来进行事件的绑定</span><br><span class="line">   语法：</span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span> @<span class="attr">click</span>=<span class="string">"num++"</span>&gt;</span>&#123;&#123;num&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">2. 绑定的事件的事件名，全部都是js的事件名：</span><br><span class="line">   @submit   ---&gt;  onsubmit</span><br><span class="line">   @focus    ---&gt;  onfocus</span><br><span class="line">   @blur     ---&gt;  onblur</span><br><span class="line">   @click    ---&gt;  onclick</span><br><span class="line">   ....</span><br></pre></td></tr></table></figure>

<h3 id="例如-完成商城购物车中的商品增加减少数量"><a href="#例如-完成商城购物车中的商品增加减少数量" class="headerlink" title="例如:完成商城购物车中的商品增加减少数量"></a>例如:完成商城购物车中的商品增加减少数量</h3><p>步骤：</p>
<ol>
<li>给vue对象添加操作数据的方法</li>
<li>在标签中使用指令调用操作数据的方法</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"++num"</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"num"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"sub"</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el:<span class="string">"#box"</span>,</span></span><br><span class="line">            data:&#123;</span><br><span class="line">                num:0,</span><br><span class="line">            &#125;,</span><br><span class="line">            methods:&#123;</span><br><span class="line">                sub()&#123;</span><br><span class="line"><span class="actionscript">                    <span class="keyword">if</span>(<span class="keyword">this</span>.num&lt;=<span class="number">1</span>)&#123;</span></span><br><span class="line"><span class="actionscript">                        <span class="keyword">this</span>.num=<span class="number">0</span>;</span></span><br><span class="line"><span class="actionscript">                    &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="actionscript">                        <span class="keyword">this</span>.num--;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--#box&gt;(button+input+button) tab键--&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="2-3-操作样式"><a href="#2-3-操作样式" class="headerlink" title="2.3 操作样式"></a>2.3 操作样式</h2><p>操作样式，本质就是属性操作，使用冒号：</p>
<h3 id="2-3-1-控制标签class类名"><a href="#2-3-1-控制标签class类名" class="headerlink" title="2.3.1 控制标签class类名"></a>2.3.1 控制标签class类名</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">格式：</span><br><span class="line">   <span class="tag">&lt;<span class="name">h1</span> <span class="attr">:class</span>=<span class="string">"值"</span>&gt;</span>元素<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>  值可以是字符串、对象、对象名、数组</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.box1</span>&#123;</span></span><br><span class="line">        color: red;</span><br><span class="line"><span class="css">        <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#000</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.box2</span>&#123;</span></span><br><span class="line">        background-color: orange;</span><br><span class="line">        font-size: 32px;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--- 添加class类名，值是一个对象</span></span><br><span class="line"><span class="comment">        &#123;</span></span><br><span class="line"><span class="comment">         class类1:布尔值变量1,</span></span><br><span class="line"><span class="comment">         class类2:布尔值变量2,</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">         --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">:class</span>=<span class="string">"&#123;box1:myclass1&#125;"</span>&gt;</span>一个段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> @<span class="attr">click</span>=<span class="string">"myclass3=!myclass3"</span> <span class="attr">:class</span>=<span class="string">"&#123;box1:myclass2,box2:myclass3&#125;"</span>&gt;</span>一个段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> vm1=<span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el:<span class="string">"#box"</span>,</span></span><br><span class="line">            data:&#123;</span><br><span class="line"><span class="actionscript">                myclass1:<span class="literal">false</span>, <span class="comment">// 布尔值变量如果是false，则不会添加对象的属性名作为样式</span></span></span><br><span class="line"><span class="actionscript">                myclass2:<span class="literal">true</span>,  <span class="comment">// 布尔值变量如果是true，则不会添加对象的属性名作为样式</span></span></span><br><span class="line"><span class="actionscript">                myclass3:<span class="literal">false</span>,</span></span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 上面的代码可以:class的值保存到data里面的一个变量，然后使用该变量作为:class的值 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.box4</span>&#123;</span></span><br><span class="line">        background-color: red;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.box5</span>&#123;</span></span><br><span class="line">        color: green;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"mycls.box4=!mycls.box4"</span>&gt;</span>改变背景<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"mycls.box5=!mycls.box5"</span>&gt;</span>改变字体颜色<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">:class</span>=<span class="string">"mycls"</span>&gt;</span>第二个段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> vm2 = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el:<span class="string">"#app"</span>,</span></span><br><span class="line">            data:&#123;</span><br><span class="line">                mycls:&#123;</span><br><span class="line"><span class="actionscript">                    box4:<span class="literal">false</span>,</span></span><br><span class="line"><span class="actionscript">                    box5:<span class="literal">true</span></span></span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 批量给元素增加多个class样式类 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.box6</span>&#123;</span></span><br><span class="line">        background-color: red;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.box7</span>&#123;</span></span><br><span class="line">        color: green;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.box8</span>&#123;</span></span><br><span class="line">        border: 1px solid yellow;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app2"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span> <span class="attr">:class</span>=<span class="string">"[mycls1,mycls2]"</span>&gt;</span>第三个段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> vm3 = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el:<span class="string">"#app2"</span>,</span></span><br><span class="line">            data:&#123;</span><br><span class="line">                mycls1:&#123;</span><br><span class="line"><span class="actionscript">                    box6:<span class="literal">true</span>,</span></span><br><span class="line"><span class="actionscript">                    box7:<span class="literal">true</span>,</span></span><br><span class="line">                &#125;,</span><br><span class="line">                mycls2:&#123;</span><br><span class="line"><span class="actionscript">                    box8:<span class="literal">true</span>,</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>代码执行效果：</p>
<p><img src="/images/1552036325806.png" alt="/1552036325806"></p>
<p>总结：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">1. 给元素绑定class类名，最常用的就是第二种。</span><br><span class="line">    vue对象的data数据：</span><br><span class="line">        data:&#123;</span><br><span class="line">          myObj:&#123;</span><br><span class="line">            complete:true,</span><br><span class="line">            uncomplete:false,</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">		html元素：    </span><br><span class="line">    		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span> <span class="attr">:class</span>=<span class="string">"myObj"</span>&gt;</span>2222<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    最终浏览器效果：</span><br><span class="line">		    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box complete"</span>&gt;</span>2222<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-3-2-控制标签style样式"><a href="#2-3-2-控制标签style样式" class="headerlink" title="2.3.2 控制标签style样式"></a>2.3.2 控制标签style样式</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">格式1：值是json对象，对象写在元素的:style属性中</span><br><span class="line">	 标签元素：</span><br><span class="line">		     <span class="tag">&lt;<span class="name">div</span> <span class="attr">:style</span>=<span class="string">"&#123;color: activeColor, fontSize: fontSize + 'px' &#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	 data数据如下：</span><br><span class="line">         data: &#123;</span><br><span class="line">             activeColor: 'red',</span><br><span class="line">             fontSize: 30</span><br><span class="line">         &#125;</span><br><span class="line">格式2：值是对象变量名，对象在data中进行声明</span><br><span class="line">   标签元素：</span><br><span class="line">   			<span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:style</span>=<span class="string">"styleObject"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   data数据如下：</span><br><span class="line">         data: &#123;</span><br><span class="line">            	styleObject: &#123;</span><br><span class="line">             		color: 'red',</span><br><span class="line">             		fontSize: '13px'</span><br><span class="line">			  			&#125;</span><br><span class="line">				 &#125;</span><br><span class="line"></span><br><span class="line">格式3：值是数组</span><br><span class="line">  标签元素：</span><br><span class="line">				<span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:style</span>=<span class="string">"[style1, style2]"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	data数据如下：</span><br><span class="line">				data: &#123;</span><br><span class="line">                     style1:&#123;</span><br><span class="line">                       color:"red"</span><br><span class="line">                     &#125;,</span><br><span class="line">                     style2:&#123;</span><br><span class="line">                       background:"yellow",</span><br><span class="line">                       fontSize: "21px"</span><br><span class="line">                     &#125;</span><br><span class="line">				&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-3-2-实例-vue版本选项卡"><a href="#2-3-2-实例-vue版本选项卡" class="headerlink" title="2.3.2 实例-vue版本选项卡"></a>2.3.2 实例-vue版本选项卡</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-id">#card</span>&#123;</span></span><br><span class="line">            width: 500px;</span><br><span class="line">            height: 350px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.title</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">height</span><span class="selector-pseudo">:50px</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.title</span> <span class="selector-tag">span</span>&#123;</span></span><br><span class="line">            width: 100px;</span><br><span class="line">            height: 50px;</span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>:<span class="selector-id">#ccc</span>;</span></span><br><span class="line">            display: inline-block;</span><br><span class="line"><span class="css">            <span class="selector-tag">line-height</span>: 50<span class="selector-tag">px</span>; <span class="comment">/* 设置行和当前元素的高度相等,就可以让文本内容上下居中 */</span></span></span><br><span class="line"><span class="css">            <span class="selector-tag">text-align</span><span class="selector-pseudo">:center</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.content</span> <span class="selector-class">.list</span>&#123;</span></span><br><span class="line">            width: 500px;</span><br><span class="line">            height: 300px;</span><br><span class="line">            background-color: yellow;</span><br><span class="line">            display: none;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.content</span> <span class="selector-class">.active</span>&#123;</span></span><br><span class="line">            display: block;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.title</span> <span class="selector-class">.current</span>&#123;</span></span><br><span class="line">            background-color: yellow;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"card"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"title"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> @<span class="attr">click</span>=<span class="string">"num=0"</span> <span class="attr">:class</span>=<span class="string">"num==0?'current':''"</span>&gt;</span>国内新闻<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> @<span class="attr">click</span>=<span class="string">"num=1"</span> <span class="attr">:class</span>=<span class="string">"num==1?'current':''"</span>&gt;</span>国际新闻<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> @<span class="attr">click</span>=<span class="string">"num=2"</span> <span class="attr">:class</span>=<span class="string">"num==2?'current':''"</span>&gt;</span>银河新闻<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--&lt;span&gt;&#123;&#123;num&#125;&#125;&lt;/span&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list"</span> <span class="attr">:class</span>=<span class="string">"num==0?'active':''"</span>&gt;</span>国内新闻列表<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list"</span> <span class="attr">:class</span>=<span class="string">"num==1?'active':''"</span>&gt;</span>国际新闻列表<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list"</span> <span class="attr">:class</span>=<span class="string">"num==2?'active':''"</span>&gt;</span>银河新闻列表<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 思路：</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 当用户点击标题栏的按钮[span]时，显示对应索引下标的内容块[.list]</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 代码实现：</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> card = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el:<span class="string">"#card"</span>,</span></span><br><span class="line">            data:&#123;</span><br><span class="line">                num:0,</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>代码运行效果：</p>
<p><img src="/images/1552038219804.png" alt=""></p>
<h2 id="2-4-条件渲染指令"><a href="#2-4-条件渲染指令" class="headerlink" title="2.4 条件渲染指令"></a>2.4 条件渲染指令</h2><p>vue中提供了两个指令可以用于判断是否要显示元素，分别是v-if和v-show。</p>
<h3 id="2-4-1-v-if"><a href="#2-4-1-v-if" class="headerlink" title="2.4.1 v-if"></a>2.4.1 v-if</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">标签元素：</span><br><span class="line">      <span class="comment">&lt;!-- vue对象最终会把条件的结果变成布尔值 --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-if</span>=<span class="string">"ok"</span>&gt;</span>Yes<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  data数据：</span><br><span class="line">  		data:&#123;</span><br><span class="line">      		ok:false    // true则是显示，false是隐藏</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-4-2-v-else"><a href="#2-4-2-v-else" class="headerlink" title="2.4.2 v-else"></a>2.4.2 v-else</h3><p>v-else指令来表示 v-if 的“else 块”，v-else 元素必须紧跟在带 v-if 或者 v-else-if 的元素的后面，否则它将不会被识别。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">标签元素：</span><br><span class="line">			<span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-if</span>=<span class="string">"ok"</span>&gt;</span>Yes<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-else</span>&gt;</span>No<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  data数据：</span><br><span class="line">  		data:&#123;</span><br><span class="line">      		ok:false    // true则是显示，false是隐藏</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-4-3-v-else-if"><a href="#2-4-3-v-else-if" class="headerlink" title="2.4.3 v-else-if"></a>2.4.3 v-else-if</h3><p>可以出现多个v-else-if语句，但是v-else-if之前必须有一个v-if开头。后面可以跟着v-else，也可以没有。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">标签元素：</span><br><span class="line">			<span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-if</span>=<span class="string">"num==1"</span>&gt;</span>num的值为1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-else-if</span>=<span class="string">"num==2"</span>&gt;</span>num的值为2<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">		  <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-else</span>&gt;</span>num的值是&#123;&#123;num&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  data数据：</span><br><span class="line">  		data:&#123;</span><br><span class="line">      		num:2</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-4-4-v-show"><a href="#2-4-4-v-show" class="headerlink" title="2.4.4 v-show"></a>2.4.4 v-show</h3><p>用法和v-if大致一样，区别在于2点：</p>
<ol>
<li>v-show后面不能v-else或者v-else-if</li>
<li>v-show隐藏元素时，使用的是display:none来隐藏的，而v-if是直接从HTML文档中移除元素[ DOM操作中的remove ]</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">标签元素：</span><br><span class="line">			<span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-show</span>=<span class="string">"ok"</span>&gt;</span>Hello!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  data数据：</span><br><span class="line">  		data:&#123;</span><br><span class="line">      		ok:false    // true则是显示，false是隐藏</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-5-列表渲染指令"><a href="#2-5-列表渲染指令" class="headerlink" title="2.5 列表渲染指令"></a>2.5 列表渲染指令</h2><p>在vue中，可以通过v-for指令可以将一组数据渲染到页面中，数据可以是数组或者对象。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">数据是数组：        </span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--book是列表的每一个元素--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"book in book_list"</span>&gt;</span>&#123;&#123;book.title&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--book是列表的每一个元素，index是每个元素的下标--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(book, index) in book_list"</span>&gt;</span>第&#123;&#123; index+1&#125;&#125;本图书：&#123;&#123;book.title&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> vm1 = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">                el:<span class="string">"#app"</span>,</span></span><br><span class="line">                data:&#123;</span><br><span class="line">                    book_list:[</span><br><span class="line"><span class="actionscript">                        &#123;<span class="string">"id"</span>:<span class="number">1</span>,<span class="string">"title"</span>:<span class="string">"图书名称1"</span>,<span class="string">"price"</span>:<span class="number">200</span>&#125;,</span></span><br><span class="line"><span class="actionscript">                        &#123;<span class="string">"id"</span>:<span class="number">2</span>,<span class="string">"title"</span>:<span class="string">"图书名称2"</span>,<span class="string">"price"</span>:<span class="number">200</span>&#125;,</span></span><br><span class="line"><span class="actionscript">                        &#123;<span class="string">"id"</span>:<span class="number">3</span>,<span class="string">"title"</span>:<span class="string">"图书名称3"</span>,<span class="string">"price"</span>:<span class="number">200</span>&#125;,</span></span><br><span class="line"><span class="actionscript">                        &#123;<span class="string">"id"</span>:<span class="number">4</span>,<span class="string">"title"</span>:<span class="string">"图书名称4"</span>,<span class="string">"price"</span>:<span class="number">200</span>&#125;,</span></span><br><span class="line">                    ]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">数据是对象：</span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--i是每一个value值--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"value in book"</span>&gt;</span>&#123;&#123;value&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--i是每一个value值,j是每一个键名--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"attr, value in book"</span>&gt;</span>&#123;&#123;attr&#125;&#125;:&#123;&#123;value&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> vm1 = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">                el:<span class="string">"#app"</span>,</span></span><br><span class="line">                data:&#123;</span><br><span class="line">                    book: &#123;</span><br><span class="line"><span class="actionscript">                        <span class="comment">// "attr":"value"</span></span></span><br><span class="line"><span class="actionscript">                        <span class="string">"id"</span>:<span class="number">11</span>,</span></span><br><span class="line"><span class="actionscript">                        <span class="string">"title"</span>:<span class="string">"图书名称1"</span>,</span></span><br><span class="line"><span class="actionscript">                        <span class="string">"price"</span>:<span class="number">200</span></span></span><br><span class="line">                    &#125;,</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;)</span><br><span class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>练习：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">goods:[</span><br><span class="line">	&#123;"name":"python入门","price":150&#125;,</span><br><span class="line">	&#123;"name":"python进阶","price":100&#125;,</span><br><span class="line">	&#123;"name":"python高级","price":75&#125;,</span><br><span class="line">	&#123;"name":"python研究","price":60&#125;,</span><br><span class="line">	&#123;"name":"python放弃","price":110&#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"># 把上面的数据采用table表格输出到页面，价格大于60的数据需要添加背景色橙色[orange]</span><br></pre></td></tr></table></figure>

<h1 id="3-Vue对象提供的属性功能"><a href="#3-Vue对象提供的属性功能" class="headerlink" title="3. Vue对象提供的属性功能"></a>3. Vue对象提供的属性功能</h1><h2 id="3-1-过滤器"><a href="#3-1-过滤器" class="headerlink" title="3.1 过滤器"></a>3.1 过滤器</h2><p>过滤器，就是vue允许开发者自定义的文本格式化函数，可以使用在两个地方：输出内容和操作数据中。</p>
<p>定义过滤器的方式有两种。</p>
<h3 id="3-1-1-使用Vue-filter-进行全局定义"><a href="#3-1-1-使用Vue-filter-进行全局定义" class="headerlink" title="3.1.1 使用Vue.filter()进行全局定义"></a>3.1.1 使用Vue.filter()进行全局定义</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">Vue.filter("RMB1", function(v)&#123;</span><br><span class="line">  	//就是来格式化(处理)v这个数据的</span><br><span class="line">  	if(v==0)&#123;</span><br><span class="line">    		return v</span><br><span class="line">  	&#125;</span><br><span class="line"></span><br><span class="line">  	return v+"元"</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="3-1-2-在vue对象中通过filters属性来定义"><a href="#3-1-2-在vue对象中通过filters属性来定义" class="headerlink" title="3.1.2 在vue对象中通过filters属性来定义"></a>3.1.2 在vue对象中通过filters属性来定义</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">var vm = new Vue(&#123;</span><br><span class="line">  el:"#app",</span><br><span class="line">  data:&#123;&#125;,</span><br><span class="line">  filters:&#123;</span><br><span class="line">    RMB2:function(value)&#123;</span><br><span class="line">      if(value=='')&#123;</span><br><span class="line">        return;</span><br><span class="line">      &#125;else&#123;</span><br><span class="line">      	return '¥ '+value;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="3-4-计算和侦听属性"><a href="#3-4-计算和侦听属性" class="headerlink" title="3.4 计算和侦听属性"></a>3.4 计算和侦听属性</h2><h3 id="3-4-1-计算属性"><a href="#3-4-1-计算属性" class="headerlink" title="3.4.1 计算属性"></a>3.4.1 计算属性</h3><p>我们之前学习过字符串反转，如果直接把反转的代码写在元素中，则会使得其他同事在开发时时不易发现数据被调整了，所以vue提供了一个计算属性(computed)，可以让我们把调整data数据的代码存在在该属性中。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/vue.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">		<span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el:<span class="string">"#app"</span>,</span></span><br><span class="line">            data:&#123;</span><br><span class="line"><span class="actionscript">                str1: <span class="string">"abcdefgh"</span></span></span><br><span class="line">            &#125;,</span><br><span class="line"><span class="actionscript">            computed:&#123;   <span class="comment">//计算属性：里面的函数都必须有返回值</span></span></span><br><span class="line"><span class="actionscript">                strRevs: <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">var</span> ret = <span class="keyword">this</span>.str1.split(<span class="string">""</span>).reverse().join(<span class="string">""</span>);</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">return</span> ret</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; str1 &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; strRevs &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3-4-2-监听属性"><a href="#3-4-2-监听属性" class="headerlink" title="3.4.2 监听属性"></a>3.4.2 监听属性</h3><p>侦听属性，可以帮助我们侦听data某个数据的变化，从而做相应的自定义操作。</p>
<p>侦听属性是一个对象，它的键是要监听的对象或者变量，值一般是函数，当侦听的data数据发生变化时，会自定执行的对应函数，这个函数在被调用时，vue会传入两个形参，第一个是变化前的数据值，第二个是变化后的数据值。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/vue.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="actionscript">         <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el:<span class="string">"#app"</span>,</span></span><br><span class="line">            data:&#123;</span><br><span class="line">                num:20</span><br><span class="line">            &#125;,</span><br><span class="line">            watch:&#123;</span><br><span class="line"><span class="actionscript">                num:<span class="function"><span class="keyword">function</span><span class="params">(newval,oldval)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">                    <span class="comment">//num发生变化的时候，要执行的代码</span></span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(<span class="string">"num已经发生了变化！"</span>);</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; num &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"num++"</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="3-5-vue对象的生命周期"><a href="#3-5-vue对象的生命周期" class="headerlink" title="3.5 vue对象的生命周期"></a>3.5 vue对象的生命周期</h2><p>每个Vue对象在创建时都要经过一系列的初始化过程。在这个过程中Vue.js会自动运行一些叫做生命周期的的钩子函数，我们可以使用这些函数，在对象创建的不同阶段加上我们需要的代码，实现特定的功能。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/vue.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el:<span class="string">"#app"</span>,</span></span><br><span class="line">            data:&#123;</span><br><span class="line">                num:0</span><br><span class="line">            &#125;,</span><br><span class="line"><span class="actionscript">            beforeCreate:<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">"beforeCreate,vm对象尚未创建,num="</span>+ <span class="keyword">this</span>.num);  <span class="comment">//undefined</span></span></span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.name=<span class="number">10</span>; <span class="comment">// 此时没有this对象呢，所以设置的name无效，被在创建对象的时候被覆盖为0</span></span></span><br><span class="line">            &#125;,</span><br><span class="line"><span class="actionscript">            created:<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">"created,vm对象创建完成,设置好了要控制的元素范围,num="</span>+<span class="keyword">this</span>.num );  <span class="comment">// 0</span></span></span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.num = <span class="number">20</span>;</span></span><br><span class="line">            &#125;,</span><br><span class="line"><span class="actionscript">            beforeMount:<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log( <span class="keyword">this</span>.$el.innerHTML ); <span class="comment">// &lt;p&gt;&#123;&#123;num&#125;&#125;&lt;/p&gt;</span></span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">"beforeMount,vm对象尚未把data数据显示到页面中,num="</span>+<span class="keyword">this</span>.num ); <span class="comment">// 20</span></span></span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.num = <span class="number">30</span>;</span></span><br><span class="line">            &#125;,</span><br><span class="line"><span class="actionscript">            mounted:<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log( <span class="keyword">this</span>.$el.innerHTML ); <span class="comment">// &lt;p&gt;30&lt;/p&gt;</span></span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">"mounted,vm对象已经把data数据显示到页面中,num="</span>+<span class="keyword">this</span>.num); <span class="comment">// 30</span></span></span><br><span class="line">            &#125;,</span><br><span class="line"><span class="actionscript">            beforeUpdate:<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="comment">// this.$el 就是我们上面的el属性了，$el表示当前vue.js所控制的元素#app</span></span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log( <span class="keyword">this</span>.$el.innerHTML );  <span class="comment">// &lt;p&gt;30&lt;/p&gt;</span></span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">"beforeUpdate,vm对象尚未把更新后的data数据显示到页面中,num="</span>+<span class="keyword">this</span>.num); <span class="comment">// beforeUpdate----31</span></span></span><br><span class="line">                </span><br><span class="line">            &#125;,</span><br><span class="line"><span class="actionscript">            updated:<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log( <span class="keyword">this</span>.$el.innerHTML ); <span class="comment">// &lt;p&gt;31&lt;/p&gt;</span></span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">"updated,vm对象已经把过呢更新后的data数据显示到页面中,num="</span> + <span class="keyword">this</span>.num ); <span class="comment">// updated----31</span></span></span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;num&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"num++"</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>总结：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在vue使用的过程中，如果要初始化操作，把初始化操作的代码放在 mounted 中执行。</span><br><span class="line">mounted阶段就是在vm对象已经把data数据实现到页面以后。一般页面初始化使用。例如，用户访问页面加载成功以后，就要执行的ajax请求。</span><br><span class="line"></span><br><span class="line">另一个就是created，这个阶段就是在 vue对象创建以后，把ajax请求后端数据的代码放进 created</span><br></pre></td></tr></table></figure>

<h2 id="3-2-阻止事件冒泡和刷新页面"><a href="#3-2-阻止事件冒泡和刷新页面" class="headerlink" title="3.2 阻止事件冒泡和刷新页面"></a>3.2 阻止事件冒泡和刷新页面</h2><p>使用.stop和.prevent</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.box1</span>&#123;</span></span><br><span class="line">            width: 200px;</span><br><span class="line">            height: 200px;</span><br><span class="line"><span class="css">            <span class="selector-tag">background</span>: <span class="selector-id">#ccc</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.box2</span>&#123;</span></span><br><span class="line">            width: 100px;</span><br><span class="line">            height: 100px;</span><br><span class="line">            background: pink;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/vue.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el:<span class="string">"#app"</span>,</span></span><br><span class="line">            data:&#123;&#125;</span><br><span class="line">        &#125;)        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box1"</span> @<span class="attr">click</span>=<span class="string">"alert('box1')"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box2"</span> @<span class="attr">click.stop.prevent</span>=<span class="string">"alert('box2')"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>   <span class="comment">&lt;!-- @click.stop来阻止事件冒泡 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"#"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交02"</span> @<span class="attr">click.prevent</span>=<span class="string">""</span>&gt;</span> <span class="comment">&lt;!-- @click.prevent来阻止表单提交 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="3-3-综合案例-todolist"><a href="#3-3-综合案例-todolist" class="headerlink" title="3.3 综合案例-todolist"></a>3.3 综合案例-todolist</h2><p>我的计划列表</p>
<p>html代码:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>todolist<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css">		<span class="selector-class">.list_con</span>&#123;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">width</span><span class="selector-pseudo">:600px</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">margin</span><span class="selector-pseudo">:50px</span> <span class="selector-tag">auto</span> 0;</span></span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="selector-class">.inputtxt</span>&#123;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">width</span><span class="selector-pseudo">:550px</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">height</span><span class="selector-pseudo">:30px</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">border</span><span class="selector-pseudo">:1px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ccc</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">padding</span><span class="selector-pseudo">:0px</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">text-indent</span><span class="selector-pseudo">:10px</span>;</span></span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="selector-class">.inputbtn</span>&#123;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">width</span><span class="selector-pseudo">:40px</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">height</span><span class="selector-pseudo">:32px</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">padding</span><span class="selector-pseudo">:0px</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">border</span><span class="selector-pseudo">:1px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ccc</span>;</span></span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="selector-class">.list</span>&#123;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">margin</span><span class="selector-pseudo">:0</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">padding</span><span class="selector-pseudo">:0</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">list-style</span><span class="selector-pseudo">:none</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">margin-top</span><span class="selector-pseudo">:20px</span>;</span></span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="selector-class">.list</span> <span class="selector-tag">li</span>&#123;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">height</span><span class="selector-pseudo">:40px</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">line-height</span><span class="selector-pseudo">:40px</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">border-bottom</span><span class="selector-pseudo">:1px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ccc</span>;</span></span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line"><span class="css">		<span class="selector-class">.list</span> <span class="selector-tag">li</span> <span class="selector-tag">span</span>&#123;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">float</span><span class="selector-pseudo">:left</span>;</span></span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line"><span class="css">		<span class="selector-class">.list</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span>&#123;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">float</span><span class="selector-pseudo">:right</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">text-decoration</span><span class="selector-pseudo">:none</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">margin</span><span class="selector-pseudo">:0</span> 10<span class="selector-tag">px</span>;</span></span><br><span class="line">		&#125;</span><br><span class="line">	<span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list_con"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">h2</span>&gt;</span>To do list<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">"txt1"</span> <span class="attr">class</span>=<span class="string">"inputtxt"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">"增加"</span> <span class="attr">id</span>=<span class="string">"btn1"</span> <span class="attr">class</span>=<span class="string">"inputbtn"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"list"</span> <span class="attr">class</span>=<span class="string">"list"</span>&gt;</span></span><br><span class="line">			<span class="comment">&lt;!-- javascript:; # 阻止a标签跳转 --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">span</span>&gt;</span>学习html<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">class</span>=<span class="string">"up"</span>&gt;</span> ↑ <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">class</span>=<span class="string">"down"</span>&gt;</span> ↓ <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">class</span>=<span class="string">"del"</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>学习css<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">class</span>=<span class="string">"up"</span>&gt;</span> ↑ <span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">class</span>=<span class="string">"down"</span>&gt;</span> ↓ <span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">class</span>=<span class="string">"del"</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>学习javascript<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">class</span>=<span class="string">"up"</span>&gt;</span> ↑ <span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">class</span>=<span class="string">"down"</span>&gt;</span> ↓ <span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">class</span>=<span class="string">"del"</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>特效实现效果：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>todolist<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css">		<span class="selector-class">.list_con</span>&#123;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">width</span><span class="selector-pseudo">:600px</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">margin</span><span class="selector-pseudo">:50px</span> <span class="selector-tag">auto</span> 0;</span></span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="selector-class">.inputtxt</span>&#123;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">width</span><span class="selector-pseudo">:550px</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">height</span><span class="selector-pseudo">:30px</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">border</span><span class="selector-pseudo">:1px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ccc</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">padding</span><span class="selector-pseudo">:0px</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">text-indent</span><span class="selector-pseudo">:10px</span>;</span></span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="selector-class">.inputbtn</span>&#123;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">width</span><span class="selector-pseudo">:40px</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">height</span><span class="selector-pseudo">:32px</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">padding</span><span class="selector-pseudo">:0px</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">border</span><span class="selector-pseudo">:1px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ccc</span>;</span></span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="selector-class">.list</span>&#123;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">margin</span><span class="selector-pseudo">:0</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">padding</span><span class="selector-pseudo">:0</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">list-style</span><span class="selector-pseudo">:none</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">margin-top</span><span class="selector-pseudo">:20px</span>;</span></span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="selector-class">.list</span> <span class="selector-tag">li</span>&#123;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">height</span><span class="selector-pseudo">:40px</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">line-height</span><span class="selector-pseudo">:40px</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">border-bottom</span><span class="selector-pseudo">:1px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ccc</span>;</span></span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line"><span class="css">		<span class="selector-class">.list</span> <span class="selector-tag">li</span> <span class="selector-tag">span</span>&#123;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">float</span><span class="selector-pseudo">:left</span>;</span></span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line"><span class="css">		<span class="selector-class">.list</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span>&#123;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">float</span><span class="selector-pseudo">:right</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">text-decoration</span><span class="selector-pseudo">:none</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">margin</span><span class="selector-pseudo">:0</span> 10<span class="selector-tag">px</span>;</span></span><br><span class="line">		&#125;</span><br><span class="line">	<span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"todolist"</span> <span class="attr">class</span>=<span class="string">"list_con"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">h2</span>&gt;</span>To do list<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"message"</span> <span class="attr">class</span>=<span class="string">"inputtxt"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> @<span class="attr">click</span>=<span class="string">"addItem"</span> <span class="attr">value</span>=<span class="string">"增加"</span> <span class="attr">class</span>=<span class="string">"inputbtn"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"list"</span> <span class="attr">class</span>=<span class="string">"list"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"item,key in dolist"</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">a</span> @<span class="attr">click</span>=<span class="string">"upItem(key)"</span> <span class="attr">class</span>=<span class="string">"up"</span> &gt;</span> ↑ <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">a</span> @<span class="attr">click</span>=<span class="string">"downItem(key)"</span> <span class="attr">class</span>=<span class="string">"down"</span>&gt;</span> ↓ <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">a</span> @<span class="attr">click</span>=<span class="string">"delItem(key)"</span> <span class="attr">class</span>=<span class="string">"del"</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 计划列表代码</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el:<span class="string">"#todolist"</span>,</span></span><br><span class="line">        data:&#123;</span><br><span class="line"><span class="actionscript">            message:<span class="string">""</span>,</span></span><br><span class="line">            dolist:[</span><br><span class="line"><span class="actionscript">                <span class="string">"学习html"</span>,</span></span><br><span class="line"><span class="actionscript">                <span class="string">"学习css"</span>,</span></span><br><span class="line"><span class="actionscript">                <span class="string">"学习javascript"</span>,</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">            addItem()&#123;</span><br><span class="line"><span class="actionscript">                <span class="keyword">if</span>(<span class="keyword">this</span>.messsage==<span class="string">""</span>)&#123;</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.dolist.push(<span class="keyword">this</span>.message);</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.message = <span class="string">""</span></span></span><br><span class="line">            &#125;,</span><br><span class="line">            delItem(key)&#123;</span><br><span class="line"><span class="actionscript">                <span class="comment">// 删除和替换</span></span></span><br><span class="line"><span class="actionscript">                <span class="comment">// 参数1: 开始下表</span></span></span><br><span class="line"><span class="actionscript">                <span class="comment">// 参数2: 元素长度，如果不填默认删除到最后</span></span></span><br><span class="line"><span class="actionscript">                <span class="comment">// 参数3: 表示使用当前参数替换已经删除内容的位置</span></span></span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.dolist.splice(key, <span class="number">1</span>);</span></span><br><span class="line">            &#125;,</span><br><span class="line">            upItem(key)&#123;</span><br><span class="line">                if(key==0)&#123;</span><br><span class="line"><span class="actionscript">                    <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line">                &#125;</span><br><span class="line"><span class="actionscript">                <span class="comment">// 向上移动</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">let</span> result = <span class="keyword">this</span>.dolist.splice(key,<span class="number">1</span>);</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.dolist.splice(key<span class="number">-1</span>,<span class="number">0</span>,result[<span class="number">0</span>]);</span></span><br><span class="line">            &#125;,</span><br><span class="line">            downItem(key)&#123;</span><br><span class="line"><span class="actionscript">                <span class="comment">// 向下移动</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">let</span> result = <span class="keyword">this</span>.dolist.splice(key, <span class="number">1</span>);</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(result);</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.dolist.splice(key+<span class="number">1</span>,<span class="number">0</span>,result[<span class="number">0</span>]);</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端框架</category>
      </categories>
      <tags>
        <tag>vue框架</tag>
      </tags>
  </entry>
  <entry>
    <title>[了解知识]</title>
    <url>/2020/02/19/%E4%BA%86%E8%A7%A3%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<h3 id="名称空间-了解"><a href="#名称空间-了解" class="headerlink" title="名称空间(了解)"></a>名称空间(了解)</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 当多个应用出现了相同的别名 我们研究反向解析会不会自动识别应用前缀</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">正常情况下的反向解析是没有办法自动识别前缀的</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 名称空间</span></span><br><span class="line">	<span class="comment"># 总路由</span></span><br><span class="line">    url(<span class="string">r'^app01/'</span>,include(<span class="string">'app01.urls'</span>,namespace=<span class="string">'app01'</span>)),</span><br><span class="line">    url(<span class="string">r'^app02/'</span>,include(<span class="string">'app02.urls'</span>,namespace=<span class="string">'app02'</span>))</span><br><span class="line">  <span class="comment"># 解析的时候</span></span><br><span class="line">  	<span class="comment"># app01</span></span><br><span class="line">  	urlpatterns = [</span><br><span class="line">    url(<span class="string">r'^reg/'</span>,views.reg,name=<span class="string">'reg'</span>)</span><br><span class="line">		]</span><br><span class="line">    <span class="comment"># app02</span></span><br><span class="line">    urlpatterns = [</span><br><span class="line">    url(<span class="string">r'^reg/'</span>,views.reg,name=<span class="string">'reg'</span>)</span><br><span class="line">		]</span><br><span class="line">    </span><br><span class="line">  	reverse(<span class="string">'app01:reg'</span>)</span><br><span class="line">    reverse(<span class="string">'app02:reg'</span>)</span><br><span class="line">    </span><br><span class="line">    &#123;% url <span class="string">'app01:reg'</span> %&#125;</span><br><span class="line">    &#123;% url <span class="string">'app02:reg'</span> %&#125;</span><br><span class="line"><span class="comment"># 其实只要保证名字不冲突 就没有必要使用名称空间</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">一般情况下 有多个app的时候我们在起别名的时候会加上app的前缀</span></span><br><span class="line"><span class="string">这样的话就能够确保多个app之间名字不冲突的问题</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r'^reg/'</span>,views.reg,name=<span class="string">'app01_reg'</span>)</span><br><span class="line">]</span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r'^reg/'</span>,views.reg,name=<span class="string">'app02_reg'</span>)</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h3 id="伪静态-了解"><a href="#伪静态-了解" class="headerlink" title="伪静态(了解)"></a>伪静态(了解)</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">静态网页</span></span><br><span class="line"><span class="string">	数据是写死的 万年不变</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">伪静态</span></span><br><span class="line"><span class="string">	将一个动态网页伪装成静态网页</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">	为什么要伪装呢？</span></span><br><span class="line"><span class="string">		https://www.cnblogs.com/Dominic-Ji/p/9234099.html</span></span><br><span class="line"><span class="string">		伪装的目的在于增大本网站的seo查询力度</span></span><br><span class="line"><span class="string">		并且增加搜索引擎收藏本网上的概率</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">	搜索引擎本质上就是一个巨大的爬虫程序</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">	总结:</span></span><br><span class="line"><span class="string">		无论你怎么优化 怎么处理</span></span><br><span class="line"><span class="string">		始终还是干不过RMB玩家</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r'^reg.html'</span>,views.reg,name=<span class="string">'app02_reg'</span>)</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h3 id="虚拟环境-了解"><a href="#虚拟环境-了解" class="headerlink" title="虚拟环境(了解)"></a>虚拟环境(了解)</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">在正常开发中 我们会给每一个项目配备一个该项目独有的解释器环境</span></span><br><span class="line"><span class="string">该环境内只有该项目用到的模块 用不到一概不装</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">linux:缺什么才装什么</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">虚拟环境</span></span><br><span class="line"><span class="string">	你每创建一个虚拟环境就类似于重新下载了一个纯净的python解释器</span></span><br><span class="line"><span class="string">	但是虚拟环境不要创建太多，是需要消耗硬盘空间的</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">扩展:</span></span><br><span class="line"><span class="string">	每一个项目都需要用到很多模块 并且每个模块版本可能还不一样</span></span><br><span class="line"><span class="string">	那我该如何安装呢？ 一个个看一个个装？？？</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">	开发当中我们会给每一个项目配备一个requirements.txt文件</span></span><br><span class="line"><span class="string">	里面书写了该项目所有的模块即版本</span></span><br><span class="line"><span class="string">	你只需要直接输入一条命令即可一键安装所有模块即版本</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<h3 id="django版本区别"><a href="#django版本区别" class="headerlink" title="django版本区别"></a>django版本区别</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">1.django1.X路由层使用的是url方法</span></span><br><span class="line"><span class="string">	而在django2.Xhe3.X版本中路由层使用的是path方法</span></span><br><span class="line"><span class="string">	url()第一个参数支持正则</span></span><br><span class="line"><span class="string">	path()第一个参数是不支持正则的 写什么就匹配什么</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">	如果你习惯使用path那么也给你提供了另外一个方法</span></span><br><span class="line"><span class="string">		from django.urls import path, re_path</span></span><br><span class="line"><span class="string">		from django.conf.urls import url</span></span><br><span class="line"><span class="string">		</span></span><br><span class="line"><span class="string">		re_path(r'^index/',index),</span></span><br><span class="line"><span class="string">    url(r'^login/',login)</span></span><br><span class="line"><span class="string">  2.X和3.X里面的re_path就等价于1.X里面的url</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">2.虽然path不支持正则 但是它的内部支持五种转换器</span></span><br><span class="line"><span class="string">	path('index/&lt;int:id&gt;/',index)</span></span><br><span class="line"><span class="string">	# 将第二个路由里面的内容先转成整型然后以关键字的形式传递给后面的视图函数</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">	def index(request,id):</span></span><br><span class="line"><span class="string">    print(id,type(id))</span></span><br><span class="line"><span class="string">    return HttpResponse('index')</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">  str,匹配除了路径分隔符（/）之外的非空字符串，这是默认的形式</span></span><br><span class="line"><span class="string">	int,匹配正整数，包含0。</span></span><br><span class="line"><span class="string">	slug,匹配字母、数字以及横杠、下划线组成的字符串。</span></span><br><span class="line"><span class="string">	uuid,匹配格式化的uuid，如 075194d3-6885-417e-a8a8-6c931e272f00。</span></span><br><span class="line"><span class="string">	path,匹配任何非空字符串，包含了路径分隔符（/）（不能用？）</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">3.除了有默认的五个转换器之外 还支持自定义转换器(了解)</span></span><br><span class="line"><span class="string">	class MonthConverter:</span></span><br><span class="line"><span class="string">    regex='\d&#123;2&#125;' # 属性名必须为regex</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    def to_python(self, value):</span></span><br><span class="line"><span class="string">        return int(value)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    def to_url(self, value):</span></span><br><span class="line"><span class="string">        return value # 匹配的regex是两个数字，返回的结果也必须是两个数字</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">	from django.urls import path,register_converter</span></span><br><span class="line"><span class="string">	from app01.path_converts import MonthConverter</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">	# 先注册转换器</span></span><br><span class="line"><span class="string">	register_converter(MonthConverter,'mon')</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">	from app01 import views</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">	urlpatterns = [</span></span><br><span class="line"><span class="string">    path('articles/&lt;int:year&gt;/&lt;mon:month&gt;/&lt;slug:other&gt;/', 	views.article_detail, name='aaa'),</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">4.模型层里面1.X外键默认都是级联更新删除的</span></span><br><span class="line"><span class="string">但是到了2.X和3.X中需要你自己手动配置参数</span></span><br><span class="line"><span class="string">	models.ForeignKey(to='Publish')</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">	models.ForeignKey(to='Publish',on_delete=models.CASCADE...)</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>django框架</tag>
      </tags>
  </entry>
  <entry>
    <title>[MTV和MVC模型与Auth模块]</title>
    <url>/2020/02/17/MTV%E5%92%8CMVC%E6%A8%A1%E5%9E%8B%E4%B8%8EAuth%E6%A8%A1%E5%9D%97/</url>
    <content><![CDATA[<h3 id="MTV与MVC模型"><a href="#MTV与MVC模型" class="headerlink" title="MTV与MVC模型"></a>MTV与MVC模型</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># MTV:Django号称是MTV模型</span></span><br><span class="line">M:models</span><br><span class="line">T:templates</span><br><span class="line">V:views</span><br><span class="line"><span class="comment"># MVC:其实django本质也是MVC</span></span><br><span class="line">M:models</span><br><span class="line">V:views</span><br><span class="line">C:controller</span><br><span class="line">  </span><br><span class="line"><span class="comment"># vue框架:MVVM模型</span></span><br></pre></td></tr></table></figure>

<h3 id="Auth模块"><a href="#Auth模块" class="headerlink" title="Auth模块"></a>Auth模块</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">其实我们在创建好一个django项目之后直接执行数据库迁移命令会自动生成很多表</span></span><br><span class="line"><span class="string">	django_session</span></span><br><span class="line"><span class="string">	auth_user</span></span><br><span class="line"><span class="string">django在启动之后就可以直接访问admin路由，需要输入用户名和密码，数据参考的就是auth_user表,并且还必须是管理员用户才能进入</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">创建超级用户(管理员)</span></span><br><span class="line"><span class="string">	python3 manage.py createsuperuser</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">依赖于auth_user表完成用户相关的所有功能</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<h3 id="方法总结"><a href="#方法总结" class="headerlink" title="方法总结"></a>方法总结</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1.比对用户名和密码是否正确</span></span><br><span class="line">user_obj = auth.authenticate(request,username=username,password=password)</span><br><span class="line"><span class="comment"># 括号内必须同时传入用户名和密码</span></span><br><span class="line">print(user_obj)  <span class="comment"># 用户对象  jason   数据不符合则返回None</span></span><br><span class="line">print(user_obj.username)  <span class="comment"># jason</span></span><br><span class="line">print(user_obj.password)  <span class="comment"># 密文</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.保存用户状态</span></span><br><span class="line">auth.login(request,user_obj)  <span class="comment"># 类似于request.session[key] = user_obj</span></span><br><span class="line"><span class="comment"># 主要执行了该方法 你就可以在任何地方通过request.user获取到当前登陆的用户对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.判断当前用户是否登陆</span></span><br><span class="line">request.user.is_authenticated()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.获取当前登陆用户</span></span><br><span class="line">request.user</span><br><span class="line">用户不存在返回AnonmousUser匿名用户</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5.校验用户是否登陆装饰器</span></span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.decorators <span class="keyword">import</span> login_required</span><br><span class="line"><span class="comment"># 局部配置</span></span><br><span class="line"><span class="meta">@login_required(login_url='/login/') </span></span><br><span class="line"><span class="comment"># 全局配置</span></span><br><span class="line">LOGIN_URL = <span class="string">'/login/'</span></span><br><span class="line">	1.如果局部和全局都有 该听谁的?</span><br><span class="line">    局部 &gt; 全局</span><br><span class="line">	2.局部和全局哪个好呢?</span><br><span class="line">    全局的好处在于无需重复写代码 但是跳转的页面却很单一</span><br><span class="line">    局部的好处在于不同的视图函数在用户没有登陆的情况下可以跳转到不同的页面</span><br><span class="line"></span><br><span class="line"><span class="comment"># 6.比对原密码</span></span><br><span class="line">request.user.check_password(old_password)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 7.修改密码</span></span><br><span class="line">request.user.set_password(new_password)  <span class="comment"># 仅仅是在修改对象的属性</span></span><br><span class="line">request.user.save()  <span class="comment"># 这一步才是真正的操作数据库</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 8.注销</span></span><br><span class="line">auth.logout(request) </span><br><span class="line"></span><br><span class="line"><span class="comment"># 9.注册</span></span><br><span class="line"><span class="comment"># 操作auth_user表写入数据</span></span><br><span class="line">User.objects.create(username=username,password=password)  <span class="comment"># 写入数据  不能用create 密码没有加密处理</span></span><br><span class="line"><span class="comment"># 创建普通用户</span></span><br><span class="line">User.objects.create_user(username=username,password=password)</span><br><span class="line"><span class="comment"># 创建超级用户(了解):使用代码创建超级用户 邮箱是必填的 而用命令创建则可以不填</span></span><br><span class="line">User.objects.create_superuser(username=username,email=<span class="string">'123@qq.com'</span>,password=password)</span><br></pre></td></tr></table></figure>

<h3 id="如何扩展auth-user表"><a href="#如何扩展auth-user表" class="headerlink" title="如何扩展auth_user表"></a>如何扩展auth_user表</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> User,AbstractUser</span><br><span class="line"><span class="comment"># Create your models here.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第一种:一对一关系  不推荐</span></span><br><span class="line"><span class="comment"># class UserDetail(models.Model):</span></span><br><span class="line"><span class="comment">#     phone = models.BigIntegerField()</span></span><br><span class="line"><span class="comment">#     user = models.OneToOneField(to='User')</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二种:面向对象的继承</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserInfo</span><span class="params">(AbstractUser)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    如果继承了AbstractUser</span></span><br><span class="line"><span class="string">    那么在执行数据库迁移命令的时候auth_user表就不会再创建出来了</span></span><br><span class="line"><span class="string">    而UserInfo表中会出现auth_user所有的字段外加自己扩展的字段</span></span><br><span class="line"><span class="string">    这么做的好处在于你能够直接点击你自己的表更加快速的完成操作及扩展</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    前提:</span></span><br><span class="line"><span class="string">        1.在继承之前没有执行过数据库迁移命令</span></span><br><span class="line"><span class="string">            auth_user没有被创建，如果当前库已经创建了那么你就重新换一个库</span></span><br><span class="line"><span class="string">        2.继承的类里面不要覆盖AbstractUser里面的字段名</span></span><br><span class="line"><span class="string">            表里面有的字段都不要动，只扩展额外字段即可</span></span><br><span class="line"><span class="string">        3.需要在配置文件中告诉django你要用UserInfo替代auth_user(******)</span></span><br><span class="line"><span class="string">            AUTH_USER_MODEL = 'app01.UserInfo'</span></span><br><span class="line"><span class="string">                                '应用名.表名'</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    phone = models.BigIntegerField()</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">你如果自己写表替代了auth_user那么</span></span><br><span class="line"><span class="string">auth模块的功能还是照常使用，参考的表页由原来的auth_user变成了UserInfo</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>django框架</tag>
      </tags>
  </entry>
  <entry>
    <title>[Django中间件与csrf跨站请求伪造]</title>
    <url>/2020/02/17/Django%E4%B8%AD%E9%97%B4%E4%BB%B6%E4%B8%8Ecsrf%E8%B7%A8%E7%AB%99%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0/</url>
    <content><![CDATA[<h3 id="django中间件"><a href="#django中间件" class="headerlink" title="django中间件"></a>django中间件</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">django中间件是django的门户</span></span><br><span class="line"><span class="string">1.请求来的时候需要先经过中间件才能到达真正的django后端</span></span><br><span class="line"><span class="string">2.响应走的时候最后也需要经过中间件才能发送出去</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">django自带七个中间件</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">django请求生命周期流程图</span><br><span class="line"></span><br><span class="line">研究django中间件代码规律</span><br><span class="line">MIDDLEWARE = [</span><br><span class="line">    <span class="string">'django.middleware.security.SecurityMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.contrib.sessions.middleware.SessionMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.middleware.common.CommonMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.middleware.csrf.CsrfViewMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.contrib.auth.middleware.AuthenticationMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.contrib.messages.middleware.MessageMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.middleware.clickjacking.XFrameOptionsMiddleware'</span>,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SessionMiddleware</span><span class="params">(MiddlewareMixin)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_request</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        session_key = request.COOKIES.get(settings.SESSION_COOKIE_NAME)</span><br><span class="line">        request.session = self.SessionStore(session_key)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_response</span><span class="params">(self, request, response)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> response</span><br><span class="line">      </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CsrfViewMiddleware</span><span class="params">(MiddlewareMixin)</span>:</span></span><br><span class="line">  	<span class="function"><span class="keyword">def</span> <span class="title">process_request</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        csrf_token = self._get_token(request)</span><br><span class="line">        <span class="keyword">if</span> csrf_token <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="comment"># Use same token next time.</span></span><br><span class="line">            request.META[<span class="string">'CSRF_COOKIE'</span>] = csrf_token</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_view</span><span class="params">(self, request, callback, callback_args, callback_kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self._accept(request)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_response</span><span class="params">(self, request, response)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> response</span><br><span class="line">      </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AuthenticationMiddleware</span><span class="params">(MiddlewareMixin)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_request</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        request.user = SimpleLazyObject(<span class="keyword">lambda</span>: get_user(request))</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">django支持程序员自定义中间件并且暴露给程序员五个可以自定义的方法</span></span><br><span class="line"><span class="string">	1.必须掌握</span></span><br><span class="line"><span class="string">		process_request</span></span><br><span class="line"><span class="string">		</span></span><br><span class="line"><span class="string">		process_response</span></span><br><span class="line"><span class="string">	2.了解即可</span></span><br><span class="line"><span class="string">		process_view</span></span><br><span class="line"><span class="string">			</span></span><br><span class="line"><span class="string">		process_template_response</span></span><br><span class="line"><span class="string">		</span></span><br><span class="line"><span class="string">		process_exception</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<h3 id="如何自定义中间件"><a href="#如何自定义中间件" class="headerlink" title="如何自定义中间件"></a>如何自定义中间件</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">1.在项目名或者应用名下创建一个任意名称的文件夹</span></span><br><span class="line"><span class="string">2.在该文件夹内创建一个任意名称的py文件</span></span><br><span class="line"><span class="string">3.在该py文件内需要书写类(这个类必须继承MiddlewareMixin)</span></span><br><span class="line"><span class="string">	然后在这个类里面就可以自定义五个方法了</span></span><br><span class="line"><span class="string">	(这五个方法并不是全部都需要书写，用几个写几个)</span></span><br><span class="line"><span class="string">4.需要将类的路径以字符串的形式注册到配置文件中才能生效</span></span><br><span class="line"><span class="string">MIDDLEWARE = [</span></span><br><span class="line"><span class="string">    'django.middleware.security.SecurityMiddleware',</span></span><br><span class="line"><span class="string">    'django.contrib.sessions.middleware.SessionMiddleware',</span></span><br><span class="line"><span class="string">    'django.middleware.common.CommonMiddleware',</span></span><br><span class="line"><span class="string">    'django.middleware.csrf.CsrfViewMiddleware',</span></span><br><span class="line"><span class="string">    'django.contrib.auth.middleware.AuthenticationMiddleware',</span></span><br><span class="line"><span class="string">    'django.contrib.messages.middleware.MessageMiddleware',</span></span><br><span class="line"><span class="string">    'django.middleware.clickjacking.XFrameOptionsMiddleware',</span></span><br><span class="line"><span class="string">    '你自己写的中间件的路径1',</span></span><br><span class="line"><span class="string">    '你自己写的中间件的路径2',</span></span><br><span class="line"><span class="string">    '你自己写的中间件的路径3',</span></span><br><span class="line"><span class="string">]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">1.必须掌握</span></span><br><span class="line"><span class="string">		process_request </span></span><br><span class="line"><span class="string">			1.请求来的时候需要经过每一个中间件里面的process_request方法</span></span><br><span class="line"><span class="string">			结果的顺序是按照配置文件中注册的中间件从上往下的顺序依次执行</span></span><br><span class="line"><span class="string">			2.如果中间件里面没有定义该方法，那么直接跳过执行下一个中间件</span></span><br><span class="line"><span class="string">			3.如果该方法返回了HttpResponse对象，那么请求将不再继续往后执行</span></span><br><span class="line"><span class="string">			而是直接原路返回(校验失败不允许访问...)</span></span><br><span class="line"><span class="string">			process_request方法就是用来做全局相关的所有限制功能</span></span><br><span class="line"><span class="string">			</span></span><br><span class="line"><span class="string">		process_response</span></span><br><span class="line"><span class="string">			1.响应走的时候需要结果每一个中间件里面的process_response方法</span></span><br><span class="line"><span class="string">			该方法有两个额外的参数request,response</span></span><br><span class="line"><span class="string">			2.该方法必须返回一个HttpResponse对象</span></span><br><span class="line"><span class="string">				1.默认返回的就是形参response</span></span><br><span class="line"><span class="string">				2.你也可以自己返回自己的</span></span><br><span class="line"><span class="string">			3.顺序是按照配置文件中注册了的中间件从下往上依次经过</span></span><br><span class="line"><span class="string">				如果你没有定义的话 直接跳过执行下一个</span></span><br><span class="line"><span class="string">		</span></span><br><span class="line"><span class="string">		研究如果在第一个process_request方法就已经返回了HttpResponse对象，那么响应走的时候是经过所有的中间件里面的process_response还是有其他情况</span></span><br><span class="line"><span class="string">		是其他情况</span></span><br><span class="line"><span class="string">			就是会直接走同级别的process_reponse返回</span></span><br><span class="line"><span class="string">		</span></span><br><span class="line"><span class="string">		flask框架也有一个中间件但是它的规律</span></span><br><span class="line"><span class="string">			只要返回数据了就必须经过所有中间件里面的类似于process_reponse方法</span></span><br><span class="line"><span class="string">			</span></span><br><span class="line"><span class="string">			</span></span><br><span class="line"><span class="string">2.了解即可</span></span><br><span class="line"><span class="string">		process_view</span></span><br><span class="line"><span class="string">			路由匹配成功之后执行视图函数之前，会自动执行中间件里面的该放法</span></span><br><span class="line"><span class="string">			顺序是按照配置文件中注册的中间件从上往下的顺序依次执行</span></span><br><span class="line"><span class="string">			</span></span><br><span class="line"><span class="string">		process_template_response</span></span><br><span class="line"><span class="string">			返回的HttpResponse对象有render属性的时候才会触发</span></span><br><span class="line"><span class="string">			顺序是按照配置文件中注册了的中间件从下往上依次经过</span></span><br><span class="line"><span class="string">			</span></span><br><span class="line"><span class="string">		process_exception</span></span><br><span class="line"><span class="string">			当视图函数中出现异常的情况下触发</span></span><br><span class="line"><span class="string">			顺序是按照配置文件中注册了的中间件从下往上依次经过</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<h3 id="csrf跨站请求伪造"><a href="#csrf跨站请求伪造" class="headerlink" title="csrf跨站请求伪造"></a>csrf跨站请求伪造</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">钓鱼网站</span></span><br><span class="line"><span class="string">	我搭建一个跟正规网站一模一样的界面(中国银行)</span></span><br><span class="line"><span class="string">	用户不小心进入到了我们的网站，用户给某个人打钱</span></span><br><span class="line"><span class="string">	打钱的操作确确实实是提交给了中国银行的系统，用户的钱也确确实实减少了</span></span><br><span class="line"><span class="string">	但是唯一不同的时候打钱的账户不是用户想要打的账户变成了一个莫名其妙的账户</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">大学英语四六级</span></span><br><span class="line"><span class="string">	考之前需要学生自己网站登陆缴费</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">内部本质</span></span><br><span class="line"><span class="string">	我们在钓鱼网站的页面 针对对方账户 只给用户提供一个没有name属性的普通input框</span></span><br><span class="line"><span class="string">	然后我们在内部隐藏一个已经写好name和value的input框</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">如何规避上述问题</span></span><br><span class="line"><span class="string">	csrf跨站请求伪造校验</span></span><br><span class="line"><span class="string">		网站在给用户返回一个具有提交数据功能页面的时候会给这个页面加一个唯一标识</span></span><br><span class="line"><span class="string">		当这个页面朝后端发送post请求的时候 我的后端会先校验唯一标识，如果唯一标识不对直接拒绝(403 forbbiden)如果成功则正常执行	</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<h3 id="如何符合校验"><a href="#如何符合校验" class="headerlink" title="如何符合校验"></a>如何符合校验</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># form表单如何符合校验</span></span><br><span class="line">&lt;form action=<span class="string">""</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">    &#123;% csrf_token %&#125;</span><br><span class="line">    &lt;p&gt;username:&lt;input type="text" name="username"&gt;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;target_user:&lt;input type="text" name="target_user"&gt;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;money:&lt;input type="text" name="money"&gt;&lt;/p&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># ajax如何符合校验</span></span><br><span class="line">// 第一种 利用标签查找获取页面上的随机字符串</span><br><span class="line">&#123;<span class="comment">#data:&#123;"username":'jason','csrfmiddlewaretoken':$('[name=csrfmiddlewaretoken]').val()&#125;,#&#125;</span></span><br><span class="line">// 第二种 利用模版语法提供的快捷书写</span><br><span class="line">&#123;<span class="comment">#data:&#123;"username":'jason','csrfmiddlewaretoken':'&#123;&#123; csrf_token &#125;&#125;'&#125;,#&#125;</span></span><br><span class="line">// 第三种 通用方式直接拷贝js代码并应用到自己的html页面上即可</span><br><span class="line">data:&#123;<span class="string">"username"</span>:<span class="string">'jason'</span>&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">function getCookie(name) &#123;</span><br><span class="line">    var cookieValue = null;</span><br><span class="line">    <span class="keyword">if</span> (document.cookie &amp;&amp; document.cookie !== <span class="string">''</span>) &#123;</span><br><span class="line">        var cookies = document.cookie.split(<span class="string">';'</span>);</span><br><span class="line">        <span class="keyword">for</span> (var i = <span class="number">0</span>; i &lt; cookies.length; i++) &#123;</span><br><span class="line">            var cookie = jQuery.trim(cookies[i]);</span><br><span class="line">            // Does this cookie string begin with the name we want?</span><br><span class="line">            <span class="keyword">if</span> (cookie.substring(<span class="number">0</span>, name.length + <span class="number">1</span>) === (name + <span class="string">'='</span>)) &#123;</span><br><span class="line">                cookieValue = decodeURIComponent(cookie.substring(name.length + <span class="number">1</span>));</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cookieValue;</span><br><span class="line">&#125;</span><br><span class="line">var csrftoken = getCookie(<span class="string">'csrftoken'</span>);</span><br><span class="line"></span><br><span class="line">function csrfSafeMethod(method) &#123;</span><br><span class="line">  // these HTTP methods do <span class="keyword">not</span> require CSRF protection</span><br><span class="line">  <span class="keyword">return</span> (/^(GET|HEAD|OPTIONS|TRACE)$/.test(method));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$.ajaxSetup(&#123;</span><br><span class="line">  beforeSend: function (xhr, settings) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!csrfSafeMethod(settings.type) &amp;&amp; !this.crossDomain) &#123;</span><br><span class="line">      xhr.setRequestHeader(<span class="string">"X-CSRFToken"</span>, csrftoken);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="csrf相关装饰器"><a href="#csrf相关装饰器" class="headerlink" title="csrf相关装饰器"></a>csrf相关装饰器</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">1.网站整体都不校验csrf，就单单几个视图函数需要校验</span></span><br><span class="line"><span class="string">2.网站整体都校验csrf，就单单几个视图函数不校验</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">from</span> django.views.decorators.csrf <span class="keyword">import</span> csrf_protect,csrf_exempt</span><br><span class="line"><span class="keyword">from</span> django.utils.decorators <span class="keyword">import</span> method_decorator</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">csrf_protect  需要校验</span></span><br><span class="line"><span class="string">    针对csrf_protect符合我们之前所学的装饰器的三种玩法</span></span><br><span class="line"><span class="string">csrf_exempt   忽视校验</span></span><br><span class="line"><span class="string">    针对csrf_exempt只能给dispatch方法加才有效</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment"># @csrf_exempt</span></span><br><span class="line"><span class="comment"># @csrf_protect</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">transfer</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'POST'</span>:</span><br><span class="line">        username = request.POST.get(<span class="string">'username'</span>)</span><br><span class="line">        target_user = request.POST.get(<span class="string">'target_user'</span>)</span><br><span class="line">        money = request.POST.get(<span class="string">'money'</span>)</span><br><span class="line">        print(<span class="string">'%s给%s转了%s元'</span>%(username,target_user,money))</span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">'transfer.html'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.views <span class="keyword">import</span> View</span><br><span class="line"></span><br><span class="line"><span class="comment"># @method_decorator(csrf_protect,name='post')  # 针对csrf_protect 第二种方式可以</span></span><br><span class="line"><span class="comment"># @method_decorator(csrf_exempt,name='post')  # 针对csrf_exempt 第二种方式不可以</span></span><br><span class="line"><span class="meta">@method_decorator(csrf_exempt,name='dispatch')</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyCsrfToken</span><span class="params">(View)</span>:</span></span><br><span class="line">    <span class="comment"># @method_decorator(csrf_protect)  # 针对csrf_protect 第三种方式可以</span></span><br><span class="line">    <span class="comment"># @method_decorator(csrf_exempt)  # 针对csrf_exempt 第三种方式可以</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dispatch</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> super(MyCsrfToken, self).dispatch(request,*args,**kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self,request)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">'get'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># @method_decorator(csrf_protect)  # 针对csrf_protect 第一种方式可以</span></span><br><span class="line">    <span class="comment"># @method_decorator(csrf_exempt)  # 针对csrf_exempt 第一种方式不可以</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self,request)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">'post'</span>)</span><br></pre></td></tr></table></figure>

<h3 id="补充知识点"><a href="#补充知识点" class="headerlink" title="补充知识点"></a>补充知识点</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 模块:importlib</span></span><br><span class="line"><span class="keyword">import</span> importlib</span><br><span class="line">res = <span class="string">'myfile.b'</span></span><br><span class="line">ret = importlib.import_module(res)  <span class="comment"># from myfile import b</span></span><br><span class="line"><span class="comment"># 该方法最小只能到py文件名</span></span><br><span class="line">print(ret)</span><br></pre></td></tr></table></figure>

<h3 id="重要思想"><a href="#重要思想" class="headerlink" title="重要思想"></a>重要思想</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> settings</span><br><span class="line"><span class="keyword">import</span> importlib</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_all</span><span class="params">(content)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> path_str <span class="keyword">in</span> settings.NOTIFY_LIST:  <span class="comment">#'notify.email.Email'</span></span><br><span class="line">        module_path,class_name = path_str.rsplit(<span class="string">'.'</span>,maxsplit=<span class="number">1</span>)</span><br><span class="line">        <span class="comment"># module_path = 'notify.email'  class_name = 'Email'</span></span><br><span class="line">        <span class="comment"># 1 利用字符串导入模块</span></span><br><span class="line">        module = importlib.import_module(module_path)  <span class="comment"># from notify import email</span></span><br><span class="line">        <span class="comment"># 2 利用反射获取类名</span></span><br><span class="line">        cls = getattr(module,class_name)  <span class="comment"># Email、QQ、Wechat</span></span><br><span class="line">        <span class="comment"># 3 生成类的对象</span></span><br><span class="line">        obj = cls()</span><br><span class="line">        <span class="comment"># 4 利用鸭子类型直接调用send方法</span></span><br><span class="line">        obj.send(content)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>django框架</tag>
      </tags>
  </entry>
  <entry>
    <title>[Cookie与Session]</title>
    <url>/2020/02/16/Cookie%E4%B8%8ESession/</url>
    <content><![CDATA[<h3 id="cookie与session"><a href="#cookie与session" class="headerlink" title="cookie与session"></a>cookie与session</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">发展史</span></span><br><span class="line"><span class="string">	1.网站都没有保存用户功能的需求 所有用户访问返回的结果都是一样的</span></span><br><span class="line"><span class="string">		eg:新闻、博客、文章...</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">	2.出现了一些需要保存用户信息的网站</span></span><br><span class="line"><span class="string">		eg:淘宝、支付宝、京东...</span></span><br><span class="line"><span class="string">		</span></span><br><span class="line"><span class="string">		以登陆功能为例:如果不保存用户登陆状态 也就意味着用户每次访问网站都需要重复的输入用户名和密码(你觉得这样的网站你还想用吗？)</span></span><br><span class="line"><span class="string">		当用户第一次登陆成功之后 将用户的用户名密码返回给用户浏览器 让用户浏览器保存在本地，之后访问网站的时候浏览器自动将保存在浏览器上的用户名和密码发送给服务端，服务端获取之后自动验证</span></span><br><span class="line"><span class="string">		早起这种方式具有非常大的安全隐患</span></span><br><span class="line"><span class="string">		</span></span><br><span class="line"><span class="string">		</span></span><br><span class="line"><span class="string">		优化:</span></span><br><span class="line"><span class="string">			当用户登陆成功之后，服务端产生一个随机字符串(在服务端保存数据,用kv键值对的形式)，交由客户端浏览器保存</span></span><br><span class="line"><span class="string">			随机字符串1:用户1相关信息</span></span><br><span class="line"><span class="string">			随机字符串2:用户2相关信息</span></span><br><span class="line"><span class="string">			随机字符串3:用户3相关信息</span></span><br><span class="line"><span class="string">			之后访问服务端的时候，都带着该随机字符串，服务端去数据库中比对是否有对应的随机字符串从而获取到对应的用户信息</span></span><br><span class="line"><span class="string">			</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">但是如果你拿到了截获到了该随机字符串，那么你就可以冒充当前用户 其实还是有安全隐患的</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">你要知道在web领域没有绝对的安全也没有绝对的不安全</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">cookie</span><br><span class="line">	服务端保存在客户端浏览器上的信息都可以称之为cookie</span><br><span class="line">  它的表现形式一般都是k:v键值对(可以有多个)</span><br><span class="line">session</span><br><span class="line">	数据是保存在服务端的并且它的表现形式一般也是k:v键值对(可以有多个)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">下述内容暂时了解即可 先给我搞明白最简单的cookie与session使用再说话！</span><br><span class="line">token</span><br><span class="line">	session虽然数据是保存在服务端的 但是禁不住数据量大</span><br><span class="line">  服务端不再保存数据</span><br><span class="line">  	登陆成功之后 将一段用户信息进行加密处理(加密算法只有你公司开发知道)</span><br><span class="line">    将加密之后的结果拼接在信息后面 整体返回给浏览器保存 </span><br><span class="line">    浏览器下次访问的时候带着该信息 服务端自动切去前面一段信息再次使用自己的加密算法</span><br><span class="line">    跟浏览器尾部的密文进行比对</span><br><span class="line">jwt认证</span><br><span class="line">	三段信息</span><br><span class="line">  (后期会讲 结合django一起使用) </span><br><span class="line">	</span><br><span class="line">总结:</span><br><span class="line">  	<span class="number">1.</span>cookie就是保存在客户端浏览器上的信息</span><br><span class="line">    <span class="number">2.</span>session就是保存在服务端上的信息</span><br><span class="line">    <span class="number">3.</span>session是基于cookie工作的(其实大部分的保存用户状态的操作都需要使用到cookie)</span><br></pre></td></tr></table></figure>

<h3 id="Cookie操作"><a href="#Cookie操作" class="headerlink" title="Cookie操作"></a>Cookie操作</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 虽然cookie是服务端告诉客户端浏览器需要保存内容</span></span><br><span class="line"><span class="comment"># 但是客户端浏览器可以选择拒绝保存 如果禁止了 那么 只要是需要记录用户状态的网站登陆功能都无法使用了</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 视图函数的返回值</span></span><br><span class="line"><span class="keyword">return</span> HttpResponse()</span><br><span class="line"><span class="keyword">return</span> render()</span><br><span class="line"><span class="keyword">return</span> redirect()</span><br><span class="line"></span><br><span class="line">obj1 = HttpResponse()</span><br><span class="line"><span class="comment"># 操作cookie</span></span><br><span class="line"><span class="keyword">return</span> obj1</span><br><span class="line"></span><br><span class="line">obj2 = render()</span><br><span class="line"><span class="comment"># 操作cookie</span></span><br><span class="line"><span class="keyword">return</span> obj2</span><br><span class="line"></span><br><span class="line">obj3 = redirect()</span><br><span class="line"><span class="comment"># 操作cookie</span></span><br><span class="line"><span class="keyword">return</span> obj3</span><br><span class="line"><span class="comment"># 如果你想要操作cookie，你就不得不利用obj对象</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">设置cookie</span></span><br><span class="line"><span class="string">	obj.set_cookie(key,value)</span></span><br><span class="line"><span class="string">获取cookie</span></span><br><span class="line"><span class="string">	request.COOKIES.get(key)</span></span><br><span class="line"><span class="string">在设置cookie的时候可以添加一个超时时间</span></span><br><span class="line"><span class="string">	obj.set_cookie('username', 'jason666',max_age=3,expires=3)</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">	max_age</span></span><br><span class="line"><span class="string">	expires</span></span><br><span class="line"><span class="string">		两者都是设置超时时间的 并且都是以秒为单位</span></span><br><span class="line"><span class="string">		需要注意的是 针对IE浏览器需要使用expires</span></span><br><span class="line"><span class="string">主动删除cookie(注销功能)</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment"># 我们完成一个真正的登陆功能</span></span><br><span class="line"><span class="comment"># 校验用户是否登陆的装饰器</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">用户如果在没有登陆的情况下想访问一个需要登陆的页面</span></span><br><span class="line"><span class="string">那么先跳转到登陆页面 当用户输入正确的用户名和密码之后</span></span><br><span class="line"><span class="string">应该跳转到用户之前想要访问的页面去 而不是直接写死</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login_auth</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">(request,*args,**kwargs)</span>:</span></span><br><span class="line">        <span class="comment"># print(request.path_info)</span></span><br><span class="line">        <span class="comment"># print(request.get_full_path())  # 能够获取到用户上一次想要访问的url</span></span><br><span class="line">        target_url = request.get_full_path()</span><br><span class="line">        <span class="keyword">if</span> request.COOKIES.get(<span class="string">'username'</span>):</span><br><span class="line">            <span class="keyword">return</span> func(request,*args,**kwargs)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> redirect(<span class="string">'/login/?next=%s'</span>%target_url)</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'POST'</span>:</span><br><span class="line">        username = request.POST.get(<span class="string">'username'</span>)</span><br><span class="line">        password = request.POST.get(<span class="string">'password'</span>)</span><br><span class="line">        <span class="keyword">if</span> username == <span class="string">'jason'</span> <span class="keyword">and</span> password == <span class="string">'123'</span>:</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 获取用户上一次想要访问的url</span></span><br><span class="line">            target_url = request.GET.get(<span class="string">'next'</span>)  <span class="comment"># 这个结果可能是None</span></span><br><span class="line">            <span class="keyword">if</span> target_url:</span><br><span class="line">                obj = redirect(target_url)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># 保存用户登陆状态</span></span><br><span class="line">                obj = redirect(<span class="string">'/home/'</span>)</span><br><span class="line">            <span class="comment"># 让浏览器记录cookie数据</span></span><br><span class="line">            obj.set_cookie(<span class="string">'username'</span>, <span class="string">'jason666'</span>)</span><br><span class="line">            <span class="string">"""</span></span><br><span class="line"><span class="string">            浏览器不单单会帮你存</span></span><br><span class="line"><span class="string">            而且后面每次访问你的时候还会带着它过来</span></span><br><span class="line"><span class="string">            """</span></span><br><span class="line">            <span class="comment"># 跳转到一个需要用户登陆之后才能看的页面</span></span><br><span class="line">            <span class="keyword">return</span> obj</span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">'login.html'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@login_auth</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">home</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="comment"># 获取cookie信息 判断你有没有</span></span><br><span class="line">    <span class="comment"># if request.COOKIES.get('username') == 'jason666':</span></span><br><span class="line">    <span class="comment">#     return HttpResponse("我是home页面，只有登陆的用户才能进来哟~")</span></span><br><span class="line">    <span class="comment"># # 没有登陆应该跳转到登陆页面</span></span><br><span class="line">    <span class="comment"># return redirect('/login/')</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">"我是home页面，只有登陆的用户才能进来哟~"</span>)</span><br></pre></td></tr></table></figure>

<h3 id="session操作"><a href="#session操作" class="headerlink" title="session操作"></a>session操作</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">session数据是保存在服务端的(存？)，给客户端返回的是一个随机字符串</span></span><br><span class="line"><span class="string">	sessionid:随机字符串</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">1.在默认情况下操作session的时候需要django默认的一张django_session表</span></span><br><span class="line"><span class="string">	数据库迁移命令</span></span><br><span class="line"><span class="string">		django会自己创建很多表	django_session就是其中的一张</span></span><br><span class="line"><span class="string">		</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">django默认session的过期时间是14天</span></span><br><span class="line"><span class="string">	但是你也可以人为的修改它</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">设置session	</span></span><br><span class="line"><span class="string">request.session['key'] = value</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">获取session</span></span><br><span class="line"><span class="string">request.session.get('key')</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">设置过期时间</span></span><br><span class="line"><span class="string">request.session.set_expiry()</span></span><br><span class="line"><span class="string">	括号内可以放四种类型的参数</span></span><br><span class="line"><span class="string">		1.整数			   多少秒</span></span><br><span class="line"><span class="string">		2.日期对象			  到指定日期就失效</span></span><br><span class="line"><span class="string">		3.0					一旦当前浏览器窗口关闭立刻失效</span></span><br><span class="line"><span class="string">		4.不写			   失效时间就取决于django内部全局session默认的失效时间</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">清除session	</span></span><br><span class="line"><span class="string">	request.session.delete()  # 只删服务端的 客户端的不删</span></span><br><span class="line"><span class="string">	request.session.flush()  # 浏览器和服务端都清空(推荐使用)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">session是保存在服务端的 但是session的保存位置可以有多种选择</span></span><br><span class="line"><span class="string">	1.MySQL</span></span><br><span class="line"><span class="string">	2.文件</span></span><br><span class="line"><span class="string">	3.redis</span></span><br><span class="line"><span class="string">	4.memcache</span></span><br><span class="line"><span class="string">	...</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">django_session表中的数据条数是取决于浏览器的</span></span><br><span class="line"><span class="string">	同一个计算机上(IP地址)同一个浏览器只会有一条数据生效</span></span><br><span class="line"><span class="string">	(当session过期的时候可能会出现多条数据对应一个浏览器，但是该现象不会持续很久，内部会自动识别过期的数据清除 你也可以通过代码清除)</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">	主要是为了节省服务端数据库资源</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">request.session[<span class="string">'hobby'</span>] = <span class="string">'girl'</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    内部发送了那些事</span></span><br><span class="line"><span class="string">        1.django内部会自动帮你生成一个随机字符串</span></span><br><span class="line"><span class="string">        2.django内部自动将随机字符串和对应的数据存储到django_session表中</span></span><br><span class="line"><span class="string">            2.1先在内存中产生操作数据的缓存</span></span><br><span class="line"><span class="string">            2.2在响应结果django中间件的时候才真正的操作数据库</span></span><br><span class="line"><span class="string">        3.将产生的随机字符串返回给客户端浏览器保存</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">request.session.get(<span class="string">'hobby'</span>)</span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    内部发送了那些事</span></span><br><span class="line"><span class="string">        1.自动从浏览器请求中获取sessionid对应的随机字符串</span></span><br><span class="line"><span class="string">        2.拿着该随机字符串去django_session表中查找对应的数据</span></span><br><span class="line"><span class="string">        3.</span></span><br><span class="line"><span class="string">            如果比对上了 则将对应的数据取出并以字典的形式封装到request.session中</span></span><br><span class="line"><span class="string">            如果比对不上 则request.session.get()返回的是None</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 利用session实现登陆验证</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>django框架</tag>
      </tags>
  </entry>
  <entry>
    <title>[Forms组件]</title>
    <url>/2020/02/15/Forms%E7%BB%84%E4%BB%B6/</url>
    <content><![CDATA[<h3 id="前戏"><a href="#前戏" class="headerlink" title="前戏"></a>前戏</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">写一个注册功能</span></span><br><span class="line"><span class="string">	获取用户名和密码 利用form表单提交数据</span></span><br><span class="line"><span class="string">	在后端判断用户名和密码是否符合一定的条件</span></span><br><span class="line"><span class="string">		用户名中不能含有金瓶梅</span></span><br><span class="line"><span class="string">		密码不能少于三位</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">	如何符合条件需要你将提示信息展示到前端页面</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ab_form</span><span class="params">(request)</span>:</span></span><br><span class="line">    back_dic = &#123;<span class="string">'username'</span>:<span class="string">''</span>,<span class="string">'password'</span>:<span class="string">''</span>&#125;</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'POST'</span>:</span><br><span class="line">        username = request.POST.get(<span class="string">'username'</span>)</span><br><span class="line">        password = request.POST.get(<span class="string">'password'</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">'金瓶梅'</span> <span class="keyword">in</span> username:</span><br><span class="line">            back_dic[<span class="string">'username'</span>] = <span class="string">'不符合社会主义核心价值观'</span></span><br><span class="line">        <span class="keyword">if</span> len(password) &lt; <span class="number">3</span>:</span><br><span class="line">            back_dic[<span class="string">'password'</span>] = <span class="string">'不能太短 不好!'</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    无论是post请求还是get请求</span></span><br><span class="line"><span class="string">    页面都能够获取到字典 只不过get请求来的时候 字典值都是空的</span></span><br><span class="line"><span class="string">    而post请求来之后 字典可能有值</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">'ab_form.html'</span>,locals())</span><br><span class="line"></span><br><span class="line">&lt;form action=<span class="string">""</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">    &lt;p&gt;username:</span><br><span class="line">        &lt;input type=<span class="string">"text"</span> name=<span class="string">"username"</span>&gt;</span><br><span class="line">        &lt;span style="color: red"&gt;&#123;&#123; back_dic.username &#125;&#125;&lt;/span&gt;</span><br><span class="line">    &lt;/p&gt;</span><br><span class="line">    &lt;p&gt;password:</span><br><span class="line">        &lt;input type=<span class="string">"text"</span> name=<span class="string">"password"</span>&gt;</span><br><span class="line">        &lt;span style="color: red"&gt;&#123;&#123; back_dic.password &#125;&#125;&lt;/span&gt;</span><br><span class="line">    &lt;/p&gt;</span><br><span class="line">    &lt;input type="submit" class="btn btn-info"&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">1.手动书写前端获取用户数据的html代码						渲染html代码</span></span><br><span class="line"><span class="string">2.后端对用户数据进行校验											 校验数据</span></span><br><span class="line"><span class="string">3.对不符合要求的数据进行前端提示								展示提示信息</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">forms组件</span></span><br><span class="line"><span class="string">	能够完成的事情</span></span><br><span class="line"><span class="string">			1.渲染html代码</span></span><br><span class="line"><span class="string">			2.校验数据</span></span><br><span class="line"><span class="string">			3.展示提示信息</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">为什么数据校验非要去后端 不能在前端利用js直接完成呢？</span></span><br><span class="line"><span class="string">	数据校验前端可有可无</span></span><br><span class="line"><span class="string">	但是后端必须要有!!!</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">	因为前端的校验是弱不禁风的 你可以直接修改</span></span><br><span class="line"><span class="string">	或者利用爬虫程序绕过前端页面直接朝后端提交数据</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">	购物网站	</span></span><br><span class="line"><span class="string">		选取了货物之后 会计算一个价格发送给后端 如果后端不做价格的校验</span></span><br><span class="line"><span class="string">		</span></span><br><span class="line"><span class="string">		实际是获取到用户选择的所有商品的主键值</span></span><br><span class="line"><span class="string">		然后在后端查询出所有商品的价格 再次计算一遍</span></span><br><span class="line"><span class="string">		如果跟前端一致 那么完成支付如果不一致直接拒绝</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django <span class="keyword">import</span> forms</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyForm</span><span class="params">(forms.Form)</span>:</span></span><br><span class="line">    <span class="comment"># username字符串类型最小3位最大8位</span></span><br><span class="line">    username = forms.CharField(min_length=<span class="number">3</span>,max_length=<span class="number">8</span>)</span><br><span class="line">    <span class="comment"># password字符串类型最小3位最大8位</span></span><br><span class="line">    password = forms.CharField(min_length=<span class="number">3</span>,max_length=<span class="number">8</span>)</span><br><span class="line">    <span class="comment"># email字段必须符合邮箱格式  xxx@xx.com</span></span><br><span class="line">    email = forms.EmailField()</span><br></pre></td></tr></table></figure>

<h3 id="校验数据"><a href="#校验数据" class="headerlink" title="校验数据"></a>校验数据</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">1.测试环境的准备 可以自己拷贝代码准备</span></span><br><span class="line"><span class="string">2.其实在pycharm里面已经帮你准备一个测试环境</span></span><br><span class="line"><span class="string">	python console</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">from</span> app01 <span class="keyword">import</span> views</span><br><span class="line"><span class="comment"># 1 将带校验的数据组织成字典的形式传入即可</span></span><br><span class="line">form_obj = views.MyForm(&#123;<span class="string">'username'</span>:<span class="string">'jason'</span>,<span class="string">'password'</span>:<span class="string">'123'</span>,<span class="string">'email'</span>:<span class="string">'123'</span>&#125;)</span><br><span class="line"><span class="comment"># 2 判断数据是否合法		注意该方法只有在所有的数据全部合法的情况下才会返回True</span></span><br><span class="line">form_obj.is_valid()</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="comment"># 3 查看所有校验通过的数据</span></span><br><span class="line">form_obj.cleaned_data</span><br><span class="line">&#123;<span class="string">'username'</span>: <span class="string">'jason'</span>, <span class="string">'password'</span>: <span class="string">'123'</span>&#125;</span><br><span class="line"><span class="comment"># 4 查看所有不符合校验规则以及不符合的原因</span></span><br><span class="line">form_obj.errors</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">'email'</span>: [<span class="string">'Enter a valid email address.'</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 5 校验数据只校验类中出现的字段 多传不影响 多传的字段直接忽略</span></span><br><span class="line">form_obj = views.MyForm(&#123;<span class="string">'username'</span>:<span class="string">'jason'</span>,<span class="string">'password'</span>:<span class="string">'123'</span>,<span class="string">'email'</span>:<span class="string">'123@qq.com'</span>,<span class="string">'hobby'</span>:<span class="string">'study'</span>&#125;)</span><br><span class="line">form_obj.is_valid()</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="comment"># 6 校验数据 默认情况下 类里面所有的字段都必须传值</span></span><br><span class="line">form_obj = views.MyForm(&#123;<span class="string">'username'</span>:<span class="string">'jason'</span>,<span class="string">'password'</span>:<span class="string">'123'</span>&#125;)</span><br><span class="line">form_obj.is_valid()</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">也就意味着校验数据的时候 默认情况下数据可以多传但是绝不可能少传</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<h3 id="渲染标签"><a href="#渲染标签" class="headerlink" title="渲染标签"></a>渲染标签</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">forms组件只会自动帮你渲染获取用户输入的标签(input select radio checkbox)</span></span><br><span class="line"><span class="string">不能帮你渲染提交按钮</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="comment"># 1 先产生一个空对象</span></span><br><span class="line">    form_obj = MyForm()</span><br><span class="line">    <span class="comment"># 2 直接将该空对象传递给html页面</span></span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">'index.html'</span>,locals())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 前端利用空对象做操作</span></span><br><span class="line">    &lt;p&gt;第一种渲染方式:代码书写极少，封装程度太高 不便于后续的扩展 一般情况下只在本地测试使用&lt;/p&gt;</span><br><span class="line">    &#123;&#123; form_obj.as_p &#125;&#125;</span><br><span class="line">    &#123;&#123; form_obj.as_ul &#125;&#125;</span><br><span class="line">    &#123;&#123; form_obj.as_table &#125;&#125;</span><br><span class="line">    &lt;p&gt;第二种渲染方式:可扩展性很强 但是需要书写的代码太多  一般情况下不用&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123; form_obj.username.label &#125;&#125;:&#123;&#123; form_obj.username &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123; form_obj.password.label &#125;&#125;:&#123;&#123; form_obj.password &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123; form_obj.email.label &#125;&#125;:&#123;&#123; form_obj.email &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;第三种渲染方式(推荐使用):代码书写简单 并且扩展性也高&lt;/p&gt;</span><br><span class="line">    &#123;% <span class="keyword">for</span> form <span class="keyword">in</span> form_obj %&#125;</span><br><span class="line">        &lt;p&gt;&#123;&#123; form.label &#125;&#125;:&#123;&#123; form &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line"> </span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">label属性默认展示的是类中定义的字段首字母大写的形式</span></span><br><span class="line"><span class="string">也可以自己修改 直接给字段对象加label属性即可</span></span><br><span class="line"><span class="string">	 username = forms.CharField(min_length=3,max_length=8,label='用户名')</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<h3 id="展示提示信息"><a href="#展示提示信息" class="headerlink" title="展示提示信息"></a>展示提示信息</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">浏览器会自动帮你校验数据 但是前端的校验弱不禁风</span></span><br><span class="line"><span class="string">如何让浏览器不做校验</span></span><br><span class="line"><span class="string">	&lt;form action="" method="post" novalidate&gt;</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="comment"># 1 先产生一个空对象</span></span><br><span class="line">    form_obj = MyForm()</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'POST'</span>:</span><br><span class="line">        <span class="comment"># 获取用户数据并且校验</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        1.数据获取繁琐</span></span><br><span class="line"><span class="string">        2.校验数据需要构造成字典的格式传入才行</span></span><br><span class="line"><span class="string">        ps:但是request.POST可以看成就是一个字典</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment"># 3.校验数据</span></span><br><span class="line">        form_obj = MyForm(request.POST)</span><br><span class="line">        <span class="comment"># 4.判断数据是否合法</span></span><br><span class="line">        <span class="keyword">if</span> form_obj.is_valid():</span><br><span class="line">            <span class="comment"># 5.如果合法 操作数据库存储数据</span></span><br><span class="line">            <span class="keyword">return</span> HttpResponse(<span class="string">'OK'</span>)</span><br><span class="line">        <span class="comment"># 5.不合法 有错误</span></span><br><span class="line">    <span class="comment"># 2 直接将该空对象传递给html页面</span></span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">'index.html'</span>,locals())</span><br><span class="line"></span><br><span class="line">&#123;% <span class="keyword">for</span> form <span class="keyword">in</span> form_obj %&#125;</span><br><span class="line">        &lt;p&gt;</span><br><span class="line">            &#123;&#123; form.label &#125;&#125;:&#123;&#123; form &#125;&#125;</span><br><span class="line">            &lt;span style="color: red"&gt;&#123;&#123; form.errors.0 &#125;&#125;&lt;/span&gt;</span><br><span class="line">        &lt;/p&gt;</span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">1.必备的条件 get请求和post传给html页面对象变量名必须一样</span></span><br><span class="line"><span class="string">2.forms组件当你的数据不合法的情况下 会保存你上次的数据 让你基于之前的结果进行修改</span></span><br><span class="line"><span class="string">更加的人性化</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment"># 针对错误的提示信息还可以自己自定制</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyForm</span><span class="params">(forms.Form)</span>:</span></span><br><span class="line">    <span class="comment"># username字符串类型最小3位最大8位</span></span><br><span class="line">    username = forms.CharField(min_length=<span class="number">3</span>,max_length=<span class="number">8</span>,label=<span class="string">'用户名'</span>,</span><br><span class="line">                               error_messages=&#123;</span><br><span class="line">                                   <span class="string">'min_length'</span>:<span class="string">'用户名最少3位'</span>,</span><br><span class="line">                                   <span class="string">'max_length'</span>:<span class="string">'用户名最大8位'</span>,</span><br><span class="line">                                   <span class="string">'required'</span>:<span class="string">"用户名不能为空"</span></span><br><span class="line">                               &#125;</span><br><span class="line">                               )</span><br><span class="line">    <span class="comment"># password字符串类型最小3位最大8位</span></span><br><span class="line">    password = forms.CharField(min_length=<span class="number">3</span>,max_length=<span class="number">8</span>,label=<span class="string">'密码'</span>,</span><br><span class="line">                               error_messages=&#123;</span><br><span class="line">                                   <span class="string">'min_length'</span>: <span class="string">'密码最少3位'</span>,</span><br><span class="line">                                   <span class="string">'max_length'</span>: <span class="string">'密码最大8位'</span>,</span><br><span class="line">                                   <span class="string">'required'</span>: <span class="string">"密码不能为空"</span></span><br><span class="line">                               &#125;</span><br><span class="line">                               )</span><br><span class="line">    <span class="comment"># email字段必须符合邮箱格式  xxx@xx.com</span></span><br><span class="line">    email = forms.EmailField(label=<span class="string">'邮箱'</span>,</span><br><span class="line">                             error_messages=&#123;</span><br><span class="line">                                 <span class="string">'invalid'</span>:<span class="string">'邮箱格式不正确'</span>,</span><br><span class="line">                                 <span class="string">'required'</span>: <span class="string">"邮箱不能为空"</span></span><br><span class="line">                             &#125;</span><br><span class="line">                             )</span><br></pre></td></tr></table></figure>

<h3 id="钩子函数-HOOK"><a href="#钩子函数-HOOK" class="headerlink" title="钩子函数(HOOK)"></a>钩子函数(HOOK)</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">在特定的节点自动触发完成响应操作</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">钩子函数在forms组件中就类似于第二道关卡，能够让我们自定义校验规则</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">在forms组件中有两类钩子</span></span><br><span class="line"><span class="string">	1.局部钩子</span></span><br><span class="line"><span class="string">		当你需要给单个字段增加校验规则的时候可以使用</span></span><br><span class="line"><span class="string">	2.全局钩子</span></span><br><span class="line"><span class="string">  	当你需要给多个字段增加校验规则的时候可以使用</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment"># 实际案例</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.校验用户名中不能含有666				只是校验username字段  局部钩子</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.校验密码和确认密码是否一致			password confirm两个字段	全局钩子</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 钩子函数  在类里面书写方法即可</span></span><br><span class="line">    <span class="comment"># 局部钩子</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">clean_username</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 获取到用户名</span></span><br><span class="line">        username = self.cleaned_data.get(<span class="string">'username'</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">'666'</span> <span class="keyword">in</span> username:</span><br><span class="line">            <span class="comment"># 提示前端展示错误信息</span></span><br><span class="line">            self.add_error(<span class="string">'username'</span>,<span class="string">'光喊666是不行滴～'</span>)</span><br><span class="line">        <span class="comment"># 将钩子函数钩去出来数据再放回去</span></span><br><span class="line">        <span class="keyword">return</span> username</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 全局钩子</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">clean</span><span class="params">(self)</span>:</span></span><br><span class="line">        password = self.cleaned_data.get(<span class="string">'password'</span>)</span><br><span class="line">        confirm_password = self.cleaned_data.get(<span class="string">'confirm_password'</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> confirm_password == password:</span><br><span class="line">            self.add_error(<span class="string">'confirm_password'</span>,<span class="string">'两次密码不一致'</span>)</span><br><span class="line">        <span class="comment"># 将钩子函数钩出来数据再放回去</span></span><br><span class="line">        <span class="keyword">return</span> self.cleaned_data</span><br></pre></td></tr></table></figure>

<h3 id="forms组件其他参数及补充知识点"><a href="#forms组件其他参数及补充知识点" class="headerlink" title="forms组件其他参数及补充知识点"></a>forms组件其他参数及补充知识点</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">label		字段名</span><br><span class="line">error_messages  自定义报错信息</span><br><span class="line">initial  默认值</span><br><span class="line">required  控制字段是否必填</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">1.字段没有样式</span></span><br><span class="line"><span class="string">2.针对不同类型的input如何修改</span></span><br><span class="line"><span class="string">	text</span></span><br><span class="line"><span class="string">	password</span></span><br><span class="line"><span class="string">	date</span></span><br><span class="line"><span class="string">	radio</span></span><br><span class="line"><span class="string">	checkbox</span></span><br><span class="line"><span class="string">	...</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">widget=forms.widgets.PasswordInput(attrs=&#123;<span class="string">'class'</span>:<span class="string">'form-control c1 c2'</span>&#125;)</span><br><span class="line"><span class="comment"># 多个属性值的话 直接空格隔开即可</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第一道关卡里面还支持正则校验</span></span><br><span class="line"><span class="keyword">from</span> django.core.validators <span class="keyword">import</span> RegexValidator</span><br><span class="line">validators=[</span><br><span class="line">            RegexValidator(<span class="string">r'^[0-9]+$'</span>, <span class="string">'请输入数字'</span>),</span><br><span class="line">            RegexValidator(<span class="string">r'^159[0-9]+$'</span>, <span class="string">'数字必须以159开头'</span>)</span><br><span class="line">        ]</span><br></pre></td></tr></table></figure>

<p>其他类型渲染</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># radio</span></span><br><span class="line">    gender = forms.ChoiceField(</span><br><span class="line">        choices=((<span class="number">1</span>, <span class="string">"男"</span>), (<span class="number">2</span>, <span class="string">"女"</span>), (<span class="number">3</span>, <span class="string">"保密"</span>)),</span><br><span class="line">        label=<span class="string">"性别"</span>,</span><br><span class="line">        initial=<span class="number">3</span>,</span><br><span class="line">        widget=forms.widgets.RadioSelect()</span><br><span class="line">    )</span><br><span class="line">    <span class="comment"># select</span></span><br><span class="line">    hobby = forms.ChoiceField(</span><br><span class="line">        choices=((<span class="number">1</span>, <span class="string">"篮球"</span>), (<span class="number">2</span>, <span class="string">"足球"</span>), (<span class="number">3</span>, <span class="string">"双色球"</span>),),</span><br><span class="line">        label=<span class="string">"爱好"</span>,</span><br><span class="line">        initial=<span class="number">3</span>,</span><br><span class="line">        widget=forms.widgets.Select()</span><br><span class="line">    )</span><br><span class="line">    <span class="comment"># 多选</span></span><br><span class="line">    hobby1 = forms.MultipleChoiceField(</span><br><span class="line">        choices=((<span class="number">1</span>, <span class="string">"篮球"</span>), (<span class="number">2</span>, <span class="string">"足球"</span>), (<span class="number">3</span>, <span class="string">"双色球"</span>),),</span><br><span class="line">        label=<span class="string">"爱好"</span>,</span><br><span class="line">        initial=[<span class="number">1</span>, <span class="number">3</span>],</span><br><span class="line">        widget=forms.widgets.SelectMultiple()</span><br><span class="line">    )</span><br><span class="line">    <span class="comment"># 单选checkbox</span></span><br><span class="line">    keep = forms.ChoiceField(</span><br><span class="line">        label=<span class="string">"是否记住密码"</span>,</span><br><span class="line">        initial=<span class="string">"checked"</span>,</span><br><span class="line">        widget=forms.widgets.CheckboxInput()</span><br><span class="line">    )</span><br><span class="line">    <span class="comment"># 多选checkbox</span></span><br><span class="line">    hobby2 = forms.MultipleChoiceField(</span><br><span class="line">        choices=((<span class="number">1</span>, <span class="string">"篮球"</span>), (<span class="number">2</span>, <span class="string">"足球"</span>), (<span class="number">3</span>, <span class="string">"双色球"</span>),),</span><br><span class="line">        label=<span class="string">"爱好"</span>,</span><br><span class="line">        initial=[<span class="number">1</span>, <span class="number">3</span>],</span><br><span class="line">        widget=forms.widgets.CheckboxSelectMultiple()</span><br><span class="line">    )</span><br></pre></td></tr></table></figure>

<h3 id="forms组件源码"><a href="#forms组件源码" class="headerlink" title="forms组件源码"></a>forms组件源码</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">切入点:</span></span><br><span class="line"><span class="string">	form_obj.is_valid()</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_valid</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Returns True if the form has no errors. Otherwise, False. If errors are</span></span><br><span class="line"><span class="string">        being ignored, returns False.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">   <span class="keyword">return</span> self.is_bound <span class="keyword">and</span> <span class="keyword">not</span> self.errors</span><br><span class="line">   <span class="comment"># 如果is_valid要返回True的话 那么self.is_bound要为True self.errors要为Flase</span></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">self.is_bound = data <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">or</span> files <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>  <span class="comment"># 只要你传值了肯定为True</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@property</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">errors</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"Returns an ErrorDict for the data provided for the form"</span></span><br><span class="line">        <span class="keyword">if</span> self._errors <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            self.full_clean()</span><br><span class="line">        <span class="keyword">return</span> self._errors</span><br><span class="line"></span><br><span class="line"><span class="comment"># forms组件所有的功能基本都出自于该方法</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">full_clean</span><span class="params">(self)</span>:</span></span><br><span class="line">  	self._clean_fields()  <span class="comment"># 校验字段 + 局部钩子</span></span><br><span class="line">    self._clean_form()  <span class="comment"># 全局钩子</span></span><br><span class="line">    self._post_clean()</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>django框架</tag>
      </tags>
  </entry>
  <entry>
    <title>[批量插入与分页器]</title>
    <url>/2020/02/15/%E6%89%B9%E9%87%8F%E6%8F%92%E5%85%A5%E4%B8%8E%E5%88%86%E9%A1%B5%E5%99%A8/</url>
    <content><![CDATA[<h3 id="批量插入"><a href="#批量插入" class="headerlink" title="批量插入"></a>批量插入</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ab_pl</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="comment"># 先给Book插入一万条数据</span></span><br><span class="line">    <span class="comment"># for i in range(10000):</span></span><br><span class="line">    <span class="comment">#     models.Book.objects.create(title='第%s本书'%i)</span></span><br><span class="line">    <span class="comment"># # 再将所有的数据查询并展示到前端页面</span></span><br><span class="line">    book_queryset = models.Book.objects.all()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 批量插入</span></span><br><span class="line">    <span class="comment"># book_list = []</span></span><br><span class="line">    <span class="comment"># for i in range(100000):</span></span><br><span class="line">    <span class="comment">#     book_obj = models.Book(title='第%s本书'%i)</span></span><br><span class="line">    <span class="comment">#     book_list.append(book_obj)</span></span><br><span class="line">    <span class="comment"># models.Book.objects.bulk_create(book_list)</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    当你想要批量插入数据的时候 使用orm给你提供的bulk_create能够大大的减少操作时间</span></span><br><span class="line"><span class="string">    :param request: </span></span><br><span class="line"><span class="string">    :return: </span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">'ab_pl.html'</span>,locals())</span><br></pre></td></tr></table></figure>

<h3 id="分页器"><a href="#分页器" class="headerlink" title="分页器"></a>分页器</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">总数据100 每页展示10 需要10</span></span><br><span class="line"><span class="string">总数据101 每页展示10 需要11</span></span><br><span class="line"><span class="string">总数据99 每页展示10  需要10</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">如何通过代码动态的计算出到底需要多少页？</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">在制作页码个数的时候 一般情况下都是奇数个		符合中国人对称美的标准</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment"># 分页</span></span><br><span class="line">    book_list = models.Book.objects.all()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 想访问哪一页</span></span><br><span class="line">    current_page = request.GET.get(<span class="string">'page'</span>,<span class="number">1</span>)  <span class="comment"># 如果获取不到当前页码 就展示第一页</span></span><br><span class="line">    <span class="comment"># 数据类型转换</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        current_page = int(current_page)</span><br><span class="line">    <span class="keyword">except</span> Exception:</span><br><span class="line">        current_page = <span class="number">1</span></span><br><span class="line">    <span class="comment"># 每页展示多少条</span></span><br><span class="line">    per_page_num = <span class="number">10</span></span><br><span class="line">    <span class="comment"># 起始位置</span></span><br><span class="line">    start_page = (current_page - <span class="number">1</span>) * per_page_num</span><br><span class="line">    <span class="comment"># 终止位置</span></span><br><span class="line">    end_page = current_page * per_page_num</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 计算出到底需要多少页</span></span><br><span class="line">    all_count = book_list.count()</span><br><span class="line"></span><br><span class="line">    page_count, more = divmod(all_count, per_page_num)</span><br><span class="line">    <span class="keyword">if</span> more:</span><br><span class="line">        page_count += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    page_html = <span class="string">''</span></span><br><span class="line">    xxx = current_page</span><br><span class="line">    <span class="keyword">if</span> current_page &lt; <span class="number">6</span>:</span><br><span class="line">        current_page = <span class="number">6</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(current_page<span class="number">-5</span>,current_page+<span class="number">6</span>):</span><br><span class="line">        <span class="keyword">if</span> xxx == i:</span><br><span class="line">            page_html += <span class="string">'&lt;li class="active"&gt;&lt;a href="?page=%s"&gt;%s&lt;/a&gt;&lt;/li&gt;'</span>%(i,i)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            page_html += <span class="string">'&lt;li&gt;&lt;a href="?page=%s"&gt;%s&lt;/a&gt;&lt;/li&gt;'</span>%(i,i)</span><br><span class="line"></span><br><span class="line">    book_queryset =  book_list[start_page:end_page]</span><br><span class="line">    </span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">django中有自带的分页器模块 但是书写起来很麻烦并且功能太简单</span></span><br><span class="line"><span class="string">所以我们自己想法和设法的写自定义分页器</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">上述推导代码你无需掌握 只需要知道内部逻辑即可</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">我们基于上述的思路 已经封装好了我们自己的自定义分页器 </span></span><br><span class="line"><span class="string">之后需要使用直接拷贝即可</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<h3 id="自定义分页器的拷贝及使用"><a href="#自定义分页器的拷贝及使用" class="headerlink" title="自定义分页器的拷贝及使用"></a>自定义分页器的拷贝及使用</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">当我们需要使用到非django内置的第三方功能或者组件代码的时候</span></span><br><span class="line"><span class="string">我们一般情况下会创建一个名为utils文件夹 在该文件夹内对模块进行功能性划分</span></span><br><span class="line"><span class="string">	utils可以在每个应用下创建 具体结合实际情况</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">我们到了后期封装代码的时候 不再局限于函数</span></span><br><span class="line"><span class="string">还是尽量朝面向对象去封装</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">我们自定义的分页器是基于bootstrap样式来的 所以你需要提前导入bootstrap</span></span><br><span class="line"><span class="string">	bootstrap 版本 v3</span></span><br><span class="line"><span class="string">	jQuery		版本 v3</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment"># 后端</span></span><br><span class="line">book_queryset = models.Book.objects.all()</span><br><span class="line">current_page = request.GET.get(<span class="string">'page'</span>,<span class="number">1</span>)</span><br><span class="line">all_count = book_queryset.count()</span><br><span class="line"><span class="comment"># 1 传值生成对象</span></span><br><span class="line">page_obj = Pagination(current_page=current_page,all_count=all_count)</span><br><span class="line"><span class="comment"># 2 直接对总数据进行切片操作</span></span><br><span class="line">page_queryset = book_queryset[page_obj.start:page_obj.end]</span><br><span class="line"><span class="comment"># 3 将page_queryset传递到页面 替换之前的book_queryset</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 前端</span></span><br><span class="line">&#123;% <span class="keyword">for</span> book_obj <span class="keyword">in</span> page_queryset %&#125;</span><br><span class="line">    &lt;p&gt;&#123;&#123; book_obj.title &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;nav aria-label=<span class="string">"Page navigation"</span>&gt;</span><br><span class="line">&lt;/nav&gt;</span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line">&#123;<span class="comment">#利用自定义分页器直接显示分页器样式#&#125;</span></span><br><span class="line">&#123;&#123; page_obj.page_html|safe &#125;&#125;</span><br><span class="line">  </span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">你们只需要掌握如何拷贝使用 以及大致的推导思路即可</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>django框架</tag>
      </tags>
  </entry>
  <entry>
    <title>[Ajax操作]</title>
    <url>/2020/02/15/Ajax%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h3 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">异步提交</span></span><br><span class="line"><span class="string">局部刷新</span></span><br><span class="line"><span class="string">例子:github注册</span></span><br><span class="line"><span class="string">	动态获取用户名实时的跟后端确认并实时展示的前端(局部刷新)</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">朝发送请求的方式</span></span><br><span class="line"><span class="string">	1.浏览器地址栏直接输入url回车					 GET请求</span></span><br><span class="line"><span class="string">	2.a标签href属性									GET请求</span></span><br><span class="line"><span class="string">	3.form表单										GET请求/POST请求</span></span><br><span class="line"><span class="string">	4.ajax											GET请求/POST请求	</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">AJAX 不是新的编程语言，而是一种使用现有标准的新方法(比较装饰器)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">AJAX 最大的优点是在不重新加载整个页面的情况下，可以与服务器交换数据并更新部分网页内容。（这一特点给用户的感受是在不知不觉中完成请求和响应过程）</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Ajax我们只学习jQuery封装之后的版本(不学原生的 原生的复杂并且在实际项目中也一般不用)</span></span><br><span class="line"><span class="string">所以我们在前端页面使用ajax的时候需要确保导入了jQuery</span></span><br><span class="line"><span class="string">ps:并不只有jQuery能够实现ajax，其他的框架也可以 但是换汤不换药 原理是一样的</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<h3 id="小例子"><a href="#小例子" class="headerlink" title="小例子"></a>小例子</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">页面上有三个input框</span></span><br><span class="line"><span class="string">	在前两个框中输入数字 点击按钮 朝后端发送ajax请求</span></span><br><span class="line"><span class="string">	后端计算出结果 再返回给前端动态展示的到第三个input框中</span></span><br><span class="line"><span class="string">	(整个过程页面不准有刷新,也不能在前端计算)</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">$(<span class="string">'#btn'</span>).click(function () &#123;</span><br><span class="line">        // 朝后端发送ajax请求</span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            // <span class="number">1.</span>指定朝哪个后端发送ajax请求</span><br><span class="line">            url:<span class="string">''</span>, // 不写就是朝当前地址提交</span><br><span class="line">            // <span class="number">2.</span>请求方式</span><br><span class="line">            type:<span class="string">'post'</span>,  // 不指定默认就是get 都是小写</span><br><span class="line">            // <span class="number">3.</span>数据</span><br><span class="line">            &#123;<span class="comment">#data:&#123;'username':'jason','password':123&#125;,#&#125;</span></span><br><span class="line">            data:&#123;<span class="string">'i1'</span>:$(<span class="string">'#d1'</span>).val(),<span class="string">'i2'</span>:$(<span class="string">'#d2'</span>).val()&#125;,</span><br><span class="line">            // <span class="number">4.</span>回调函数:当后端给你返回结果的时候会自动触发 args接受后端的返回结果</span><br><span class="line">            success:function (args) &#123;</span><br><span class="line">                &#123;<span class="comment">#alert(args)  // 通过DOM操作动态渲染到第三个input里面#&#125;</span></span><br><span class="line">                &#123;<span class="comment">#$('#d3').val(args)#&#125;</span></span><br><span class="line">                console.log(typeof args)</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">              </span><br><span class="line">              </span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">针对后端如果是用HttpResponse返回的数据 回调函数不会自动帮你反序列化</span></span><br><span class="line"><span class="string">如果后端直接用的是JsonResponse返回的数据 回调函数会自动帮你反序列化</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">HttpResponse解决方式</span></span><br><span class="line"><span class="string">	1.自己在前端利用JSON.parse()</span></span><br><span class="line"><span class="string">	2.在ajax里面配置一个参数</span></span><br><span class="line"><span class="string">			(后面再讲)</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<h3 id="前后端传输数据的编码格式-contentType"><a href="#前后端传输数据的编码格式-contentType" class="headerlink" title="前后端传输数据的编码格式(contentType)"></a>前后端传输数据的编码格式(contentType)</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 我们主要研究post请求数据的编码格式</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">get请求数据就是直接放在url后面的</span></span><br><span class="line"><span class="string">url?username=jason&amp;password=123</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以朝后端发送post请求的方式</span></span><br><span class="line">	<span class="string">"""</span></span><br><span class="line"><span class="string">	1.form表单</span></span><br><span class="line"><span class="string">	2.ajax请求</span></span><br><span class="line"><span class="string">	"""</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">前后端传输数据的编码格式</span></span><br><span class="line"><span class="string">	urlencoded</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">	formdata</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">	json</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment"># 研究form表单</span></span><br><span class="line">	默认的数据编码格式是urlencoded</span><br><span class="line">    数据格式:username=jason&amp;password=<span class="number">123</span></span><br><span class="line">    django后端针对符合urlencoded编码格式的数据都会自动帮你解析封装到request.POST中</span><br><span class="line">  	username=jason&amp;password=<span class="number">123</span>	&gt;&gt;&gt; request.POST</span><br><span class="line">  </span><br><span class="line">    如果你把编码格式改成formdata，那么针对普通的键值对还是解析到request.POST中而将文件解析到request.FILES中</span><br><span class="line">  </span><br><span class="line">  form表单是没有办法发送json格式数据的</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="comment"># 研究ajax</span></span><br><span class="line">	默认的编码格式也是urlencoded</span><br><span class="line">  数据格式:username=jason&amp;age=<span class="number">20</span></span><br><span class="line">	django后端针对符合urlencoded编码格式的数据都会自动帮你解析封装到request.POST中</span><br><span class="line">  	username=jason&amp;age=<span class="number">20</span>	&gt;&gt;&gt; request.POST</span><br></pre></td></tr></table></figure>

<h3 id="ajax发送json格式数据"><a href="#ajax发送json格式数据" class="headerlink" title="ajax发送json格式数据"></a>ajax发送json格式数据</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">前后端传输数据的时候一定要确保编码格式跟数据真正的格式是一致的</span></span><br><span class="line"><span class="string">不要骗人家!!!</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#123;"username":"jason","age":25&#125;  </span></span><br><span class="line"><span class="string">	在request.POST里面肯定找不到</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">	django针对json格式的数据 不会做任何的处理 </span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">request对象方法补充</span></span><br><span class="line"><span class="string">	request.is_ajax()</span></span><br><span class="line"><span class="string">		判断当前请求是否是ajax请求 返回布尔值</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    $(<span class="string">'#d1'</span>).click(function () &#123;</span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            url:<span class="string">''</span>,</span><br><span class="line">            type:<span class="string">'post'</span>,</span><br><span class="line">            data:JSON.stringify(&#123;<span class="string">'username'</span>:<span class="string">'jason'</span>,<span class="string">'age'</span>:<span class="number">25</span>&#125;),</span><br><span class="line">            contentType:<span class="string">'application/json'</span>,  // 指定编码格式</span><br><span class="line">            success:function () &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">        json_bytes = request.body</span><br><span class="line">        json_str = json_bytes.decode(<span class="string">'utf-8'</span>)</span><br><span class="line">        json_dict = json.loads(json_str)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># json.loads括号内如果传入了一个二进制格式的数据那么内部自动解码再反序列化</span></span><br><span class="line">        json_dict = json.loads(json_bytes)</span><br><span class="line">        </span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">ajax发送json格式数据需要注意点</span></span><br><span class="line"><span class="string">	1.contentType参数指定成:application/json</span></span><br><span class="line"><span class="string">	2.数据是真正的json格式数据</span></span><br><span class="line"><span class="string">	3.django后端不会帮你处理json格式数据需要你自己去request.body获取并处理</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<h3 id="ajax发送文件"><a href="#ajax发送文件" class="headerlink" title="ajax发送文件"></a>ajax发送文件</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">ajax发送文件需要借助于js内置对象FormData</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    // 点击按钮朝后端发送普通键值对和文件数据</span><br><span class="line">    $(<span class="string">'#d4'</span>).on(<span class="string">'click'</span>,function () &#123;</span><br><span class="line">        // <span class="number">1</span> 需要先利用FormData内置对象</span><br><span class="line">        let formDateObj = new FormData();</span><br><span class="line">        // <span class="number">2</span> 添加普通的键值对</span><br><span class="line">        formDateObj.append(<span class="string">'username'</span>,$(<span class="string">'#d1'</span>).val());</span><br><span class="line">        formDateObj.append(<span class="string">'password'</span>,$(<span class="string">'#d2'</span>).val());</span><br><span class="line">        // <span class="number">3</span> 添加文件对象</span><br><span class="line">        formDateObj.append(<span class="string">'myfile'</span>,$(<span class="string">'#d3'</span>)[<span class="number">0</span>].files[<span class="number">0</span>])</span><br><span class="line">        // <span class="number">4</span> 将对象基于ajax发送给后端</span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            url:<span class="string">''</span>,</span><br><span class="line">            type:<span class="string">'post'</span>,</span><br><span class="line">            data:formDateObj,  // 直接将对象放在data后面即可</span><br><span class="line"></span><br><span class="line">            // ajax发送文件必须要指定的两个参数</span><br><span class="line">            contentType:false,  // 不需使用任何编码 django后端能够自动识别formdata对象</span><br><span class="line">            processData:false,  // 告诉你的浏览器不要对你的数据进行任何处理</span><br><span class="line"></span><br><span class="line">            success:function (args) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ab_file</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> request.is_ajax():</span><br><span class="line">        <span class="keyword">if</span> request.method == <span class="string">'POST'</span>:</span><br><span class="line">            print(request.POST)</span><br><span class="line">            print(request.FILES)</span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">'ab_file.html'</span>)</span><br><span class="line">  </span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">总结:</span></span><br><span class="line"><span class="string">	1.需要利用内置对象FormData</span></span><br><span class="line"><span class="string">				// 2 添加普通的键值对</span></span><br><span class="line"><span class="string">        formDateObj.append('username',$('#d1').val());</span></span><br><span class="line"><span class="string">        formDateObj.append('password',$('#d2').val());</span></span><br><span class="line"><span class="string">        // 3 添加文件对象</span></span><br><span class="line"><span class="string">        formDateObj.append('myfile',$('#d3')[0].files[0])</span></span><br><span class="line"><span class="string">	2.需要指定两个关键性的参数</span></span><br><span class="line"><span class="string">				contentType:false,  // 不需使用任何编码 django后端能够自动识别formdata对象</span></span><br><span class="line"><span class="string">        processData:false,  // 告诉你的浏览器不要对你的数据进行任何处理</span></span><br><span class="line"><span class="string">	3.django后端能够直接识别到formdata对象并且能够将内部的普通键值自动解析并封装到request.POST中 文件数据自动解析并封装到request.FILES中</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<h3 id="django自带的序列化组件-drf做铺垫"><a href="#django自带的序列化组件-drf做铺垫" class="headerlink" title="django自带的序列化组件(drf做铺垫)"></a>django自带的序列化组件(drf做铺垫)</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">如果发现你可以直接使用MySQL但是无法使用sqlite3</span></span><br><span class="line"><span class="string">不要慌张不要恐惧 你只需要按照之前MySQL的操作将sqlite3的驱动装一下即可</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment"># 需求:在前端给我获取到后端用户表里面所有的数据 并且要是列表套字典</span></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> JsonResponse</span><br><span class="line"><span class="keyword">from</span> django.core <span class="keyword">import</span> serializers</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ab_ser</span><span class="params">(request)</span>:</span></span><br><span class="line">    user_queryset = models.User.objects.all()</span><br><span class="line">    <span class="comment"># [&#123;&#125;,&#123;&#125;,&#123;&#125;,&#123;&#125;,&#123;&#125;]</span></span><br><span class="line">    <span class="comment"># user_list = []</span></span><br><span class="line">    <span class="comment"># for user_obj in user_queryset:</span></span><br><span class="line">    <span class="comment">#     tmp = &#123;</span></span><br><span class="line">    <span class="comment">#         'pk':user_obj.pk,</span></span><br><span class="line">    <span class="comment">#         'username':user_obj.username,</span></span><br><span class="line">    <span class="comment">#         'age':user_obj.age,</span></span><br><span class="line">    <span class="comment">#         'gender':user_obj.get_gender_display()</span></span><br><span class="line">    <span class="comment">#     &#125;</span></span><br><span class="line">    <span class="comment">#     user_list.append(tmp)</span></span><br><span class="line">    <span class="comment"># return JsonResponse(user_list,safe=False)</span></span><br><span class="line">    <span class="comment"># return render(request,'ab_ser.html',locals())</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 序列化</span></span><br><span class="line">    res = serializers.serialize(<span class="string">'json'</span>,user_queryset)</span><br><span class="line">    <span class="string">"""会自动帮你将数据变成json格式的字符串 并且内部非常的全面"""</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(res)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">[</span></span><br><span class="line"><span class="string"> &#123;"pk": 1, "username": "jason", "age": 25, "gender": "male"&#125;, </span></span><br><span class="line"><span class="string"> &#123;"pk": 2, "username": "egon", "age": 31, "gender": "female"&#125;,</span></span><br><span class="line"><span class="string"> &#123;"pk": 3, "username": "kevin", "age": 32, "gender": "others"&#125;, </span></span><br><span class="line"><span class="string"> &#123;"pk": 4, "username": "tank", "age": 40, "gender": 4&#125;</span></span><br><span class="line"><span class="string"> ]</span></span><br><span class="line"><span class="string">前后端分离的项目</span></span><br><span class="line"><span class="string">    作为后端开发的你只需要写代码将数据处理好</span></span><br><span class="line"><span class="string">    能够序列化返回给前端即可 </span></span><br><span class="line"><span class="string">        再写一个接口文档 告诉前端每个字段代表的意思即可</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">[</span></span><br><span class="line"><span class="string">&#123;   "model": "app01.user", </span></span><br><span class="line"><span class="string">    "pk": 1, </span></span><br><span class="line"><span class="string">    "fields": &#123;"username": "jason", "age": 25, "gender": 1&#125;&#125;, </span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">&#123;   "model": "app01.user", </span></span><br><span class="line"><span class="string">    "pk": 2, </span></span><br><span class="line"><span class="string">    "fields": &#123;"username": "egon", "age": 31, "gender": 2&#125;&#125;, </span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">&#123;   "model": "app01.user", </span></span><br><span class="line"><span class="string">    "pk": 3, </span></span><br><span class="line"><span class="string">    "fields": &#123;"username": "kevin", "age": 32, "gender": 3&#125;&#125;,</span></span><br><span class="line"><span class="string">     </span></span><br><span class="line"><span class="string">&#123;   "model": "app01.user", </span></span><br><span class="line"><span class="string">    "pk": 4, </span></span><br><span class="line"><span class="string">    "fields": &#123;"username": "tank", "age": 40, "gender": 4&#125;&#125;</span></span><br><span class="line"><span class="string">]</span></span><br><span class="line"><span class="string">写接口就是利用序列化组件渲染数据然后写一个接口文档 该交代交代一下就完事</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<h3 id="ajax结合sweetalert"><a href="#ajax结合sweetalert" class="headerlink" title="ajax结合sweetalert"></a>ajax结合sweetalert</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">自己要学会如何拷贝</span></span><br><span class="line"><span class="string">学会基于别人的基础之上做修改</span></span><br><span class="line"><span class="string">研究各个参数表示的意思 然后找葫芦画瓢</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    $(<span class="string">'.del'</span>).on(<span class="string">'click'</span>,function () &#123;</span><br><span class="line">        // 先将当前标签对象存储起来</span><br><span class="line">        let currentBtn = $(this);</span><br><span class="line">        // 二次确认弹框</span><br><span class="line">        swal(&#123;</span><br><span class="line">          title: <span class="string">"你确定要删吗?"</span>,</span><br><span class="line">          text: <span class="string">"你可要考虑清除哦，可能需要拎包跑路哦!"</span>,</span><br><span class="line">          type: <span class="string">"warning"</span>,</span><br><span class="line">          showCancelButton: true,</span><br><span class="line">          confirmButtonClass: <span class="string">"btn-danger"</span>,</span><br><span class="line">          confirmButtonText: <span class="string">"是的，老子就要删!"</span>,</span><br><span class="line">          cancelButtonText: <span class="string">"算了,算了!"</span>,</span><br><span class="line">          closeOnConfirm: false,</span><br><span class="line">          closeOnCancel: false,</span><br><span class="line">          showLoaderOnConfirm: true</span><br><span class="line">        &#125;,</span><br><span class="line">        function(isConfirm) &#123;</span><br><span class="line">          <span class="keyword">if</span> (isConfirm) &#123;</span><br><span class="line">                // 朝后端发送ajax请求删除数据之后 再弹下面的提示框</span><br><span class="line">                $.ajax(&#123;</span><br><span class="line">                    &#123;<span class="comment">#url:'/delete/user/' + currentBtn.attr('delete_id'),  // 1 传递主键值方式1#&#125;</span></span><br><span class="line">                    url:<span class="string">'/delete/user/'</span>,  // <span class="number">2</span> 放在请求体里面</span><br><span class="line">                    type:<span class="string">'post'</span>,</span><br><span class="line">                    data:&#123;<span class="string">'delete_id'</span>:currentBtn.attr(<span class="string">'delete_id'</span>)&#125;,</span><br><span class="line">                    success:function (args) &#123;  // args = &#123;<span class="string">'code'</span>:<span class="string">''</span>,<span class="string">'msg'</span>:<span class="string">''</span>&#125;</span><br><span class="line">                        // 判断响应状态码 然后做不同的处理</span><br><span class="line">                        <span class="keyword">if</span>(args.code === <span class="number">1000</span>)&#123;</span><br><span class="line">                            swal(<span class="string">"删了!"</span>, args.msg, <span class="string">"success"</span>);</span><br><span class="line">                            // <span class="number">1.l</span>owb版本 直接刷新当前页面</span><br><span class="line">                            &#123;<span class="comment">#window.location.reload()#&#125;</span></span><br><span class="line">                            // <span class="number">2.</span>利用DOM操作 动态刷新</span><br><span class="line">                            currentBtn.parent().parent().remove()</span><br><span class="line">                        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                            swal(<span class="string">'完了'</span>,<span class="string">'出现了位置的错误'</span>,<span class="string">'info'</span>)</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125;)</span><br><span class="line"></span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            swal(<span class="string">"怂逼"</span>, <span class="string">"不要说我认识你"</span>, <span class="string">"error"</span>);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>django框架</tag>
      </tags>
  </entry>
  <entry>
    <title>[模型层]</title>
    <url>/2020/02/12/%E6%A8%A1%E5%9E%8B%E5%B1%82/</url>
    <content><![CDATA[<h3 id="单表操作"><a href="#单表操作" class="headerlink" title="单表操作"></a>单表操作</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    age = models.IntegerField()</span><br><span class="line">    register_time = models.DateField()  <span class="comment"># 年月日</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    DateField</span></span><br><span class="line"><span class="string">    DateTimeField</span></span><br><span class="line"><span class="string">        两个重要参数 </span></span><br><span class="line"><span class="string">        auto_now:每次操作数据的时候 该字段会自动将当前时间更新</span></span><br><span class="line"><span class="string">        auto_now_add:在创建数据的时候会自动将当前创建时间记录下来 之后只要不认为的修改 那么就一直不变</span></span><br><span class="line"><span class="string">    """</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># django自带的sqlite3数据库对日期格式不是很敏感 处理的时候容易出错</span></span><br><span class="line"><span class="comment"># 增</span></span><br><span class="line">    <span class="comment"># res = models.User.objects.create(name='jason',age=18,register_time='2002-1-21')</span></span><br><span class="line">    <span class="comment"># print(res)</span></span><br><span class="line">    <span class="comment"># import datetime</span></span><br><span class="line">    <span class="comment"># ctime = datetime.datetime.now()</span></span><br><span class="line">    <span class="comment"># user_obj = models.User(name='egon',age=84,register_time=ctime)</span></span><br><span class="line">    <span class="comment"># user_obj.save()</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 删</span></span><br><span class="line">    <span class="comment"># res = models.User.objects.filter(pk=2).delete()</span></span><br><span class="line">    <span class="comment"># print(res)</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    pk会自动查找到当前表的主键字段 指代的就是当前表的主键字段</span></span><br><span class="line"><span class="string">    用了pk之后 你就不需要指代当前表的主键字段到底叫什么了</span></span><br><span class="line"><span class="string">        uid</span></span><br><span class="line"><span class="string">        pid</span></span><br><span class="line"><span class="string">        sid</span></span><br><span class="line"><span class="string">        ...</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="comment"># user_obj = models.User.objects.filter(pk=1).first()</span></span><br><span class="line">    <span class="comment"># user_obj.delete()</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 修改</span></span><br><span class="line">    <span class="comment"># models.User.objects.filter(pk=4).update(name='egonDSB')</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># user_obj = models.User.objects.get(pk=4)</span></span><br><span class="line">    <span class="comment"># user_obj = models.User.objects.filter(pk=6)</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    get方法返回的直接就是当前数据对象</span></span><br><span class="line"><span class="string">    但是该方法不推荐使用</span></span><br><span class="line"><span class="string">        一旦数据不存在该方法会直接报错</span></span><br><span class="line"><span class="string">        而filter则不会</span></span><br><span class="line"><span class="string">        所以我们还是用filter</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="comment"># user_obj.name = 'egonPPP'</span></span><br><span class="line">    <span class="comment"># user_obj.save()</span></span><br></pre></td></tr></table></figure>

<h3 id="必知必会13条"><a href="#必知必会13条" class="headerlink" title="必知必会13条"></a>必知必会13条</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 必知必会13条</span></span><br><span class="line">    <span class="comment"># 1.all()  查询所有数据</span></span><br><span class="line">    <span class="comment"># 2.filter()     带有过滤条件的查询</span></span><br><span class="line">    <span class="comment"># 3.get()        直接拿数据对象 但是条件不存在直接报错</span></span><br><span class="line">    <span class="comment"># 4.first()      拿queryset里面第一个元素</span></span><br><span class="line">    <span class="comment"># res = models.User.objects.all().first()</span></span><br><span class="line">    <span class="comment"># print(res)</span></span><br><span class="line">    <span class="comment"># 5.last()</span></span><br><span class="line">    <span class="comment"># res = models.User.objects.all().last()</span></span><br><span class="line">    <span class="comment"># print(res)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 6.values()  可以指定获取的数据字段  select name,age from ...     列表套字典</span></span><br><span class="line">    <span class="comment"># res = models.User.objects.values('name','age')  # &lt;QuerySet [&#123;'name': 'jason', 'age': 18&#125;, &#123;'name': 'egonPPP', 'age': 84&#125;]&gt;</span></span><br><span class="line">    <span class="comment"># print(res)</span></span><br><span class="line">    <span class="comment"># 7.values_list()  列表套元祖</span></span><br><span class="line">    <span class="comment"># res = models.User.objects.values_list('name','age')  # &lt;QuerySet [('jason', 18), ('egonPPP', 84)]&gt;</span></span><br><span class="line">    <span class="comment"># print(res)</span></span><br><span class="line">    <span class="comment"># """</span></span><br><span class="line">    <span class="comment">#  # 查看内部封装的sql语句</span></span><br><span class="line">    <span class="comment">#  上述查看sql语句的方式  只能用于queryset对象</span></span><br><span class="line">    <span class="comment">#  只有queryset对象才能够点击query查看内部的sql语句</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment"># """</span></span><br><span class="line">    <span class="comment"># 8.distinct()  去重</span></span><br><span class="line">    <span class="comment"># res = models.User.objects.values('name','age').distinct()</span></span><br><span class="line">    <span class="comment"># print(res)</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    去重一定要是一模一样的数据</span></span><br><span class="line"><span class="string">    如果带有主键那么肯定不一样 你在往后的查询中一定不要忽略主键</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="comment"># 9.order_by()</span></span><br><span class="line">    <span class="comment"># res = models.User.objects.order_by('age')  # 默认升序</span></span><br><span class="line">    <span class="comment"># res = models.User.objects.order_by('-age')  # 降序</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment"># print(res)</span></span><br><span class="line">    <span class="comment"># 10.reverse()  反转的前提是 数据已经排过序了  order_by()</span></span><br><span class="line">    <span class="comment"># res = models.User.objects.all()</span></span><br><span class="line">    <span class="comment"># res1 = models.User.objects.order_by('age').reverse()</span></span><br><span class="line">    <span class="comment"># print(res,res1)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 11.count()  统计当前数据的个数</span></span><br><span class="line">    <span class="comment"># res = models.User.objects.count()</span></span><br><span class="line">    <span class="comment"># print(res)</span></span><br><span class="line">    <span class="comment"># 12.exclude()  排除在外</span></span><br><span class="line">    <span class="comment"># res = models.User.objects.exclude(name='jason')</span></span><br><span class="line">    <span class="comment"># print(res)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 13.exists()  基本用不到因为数据本身就自带布尔值  返回的是布尔值</span></span><br><span class="line">    <span class="comment"># res = models.User.objects.filter(pk=10).exists()</span></span><br><span class="line">    <span class="comment"># print(res)</span></span><br></pre></td></tr></table></figure>

<h3 id="测试脚本"><a href="#测试脚本" class="headerlink" title="测试脚本"></a>测试脚本</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">当你只是想测试django中的某一个py文件内容 那么你可以不用书写前后端交互的形式</span></span><br><span class="line"><span class="string">而是直接写一个测试脚本即可</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">脚本代码无论是写在应用下的tests.py还是自己单独开设py文件都可以</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment"># 测试环境的准备 去manage.py中拷贝前四行代码 然后自己写两行</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    os.environ.setdefault(<span class="string">"DJANGO_SETTINGS_MODULE"</span>, <span class="string">"day64.settings"</span>)</span><br><span class="line">    <span class="keyword">import</span> django</span><br><span class="line">    django.setup()</span><br><span class="line">    <span class="comment"># 在这个代码块的下面就可以测试django里面的单个py文件了</span></span><br></pre></td></tr></table></figure>

<h3 id="查看内部sql语句的方式"><a href="#查看内部sql语句的方式" class="headerlink" title="查看内部sql语句的方式"></a>查看内部sql语句的方式</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 方式1</span></span><br><span class="line">res = models.User.objects.values_list(<span class="string">'name'</span>,<span class="string">'age'</span>)  <span class="comment"># &lt;QuerySet [('jason', 18), ('egonPPP', 84)]&gt;</span></span><br><span class="line">print(res.query)</span><br><span class="line">queryset对象才能够点击query查看内部的sql语句</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方式2:所有的sql语句都能查看</span></span><br><span class="line"><span class="comment"># 去配置文件中配置一下即可</span></span><br><span class="line">LOGGING = &#123;</span><br><span class="line">    <span class="string">'version'</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">'disable_existing_loggers'</span>: <span class="literal">False</span>,</span><br><span class="line">    <span class="string">'handlers'</span>: &#123;</span><br><span class="line">        <span class="string">'console'</span>:&#123;</span><br><span class="line">            <span class="string">'level'</span>:<span class="string">'DEBUG'</span>,</span><br><span class="line">            <span class="string">'class'</span>:<span class="string">'logging.StreamHandler'</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'loggers'</span>: &#123;</span><br><span class="line">        <span class="string">'django.db.backends'</span>: &#123;</span><br><span class="line">            <span class="string">'handlers'</span>: [<span class="string">'console'</span>],</span><br><span class="line">            <span class="string">'propagate'</span>: <span class="literal">True</span>,</span><br><span class="line">            <span class="string">'level'</span>:<span class="string">'DEBUG'</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="神奇的双下划线查询"><a href="#神奇的双下划线查询" class="headerlink" title="神奇的双下划线查询"></a>神奇的双下划线查询</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 一对多外键增删改查</span></span><br><span class="line">    <span class="comment"># 增</span></span><br><span class="line">    <span class="comment"># 1  直接写实际字段 id</span></span><br><span class="line">    <span class="comment"># models.Book.objects.create(title='论语',price=899.23,publish_id=1)</span></span><br><span class="line">    <span class="comment"># models.Book.objects.create(title='聊斋',price=444.23,publish_id=2)</span></span><br><span class="line">    <span class="comment"># models.Book.objects.create(title='老子',price=333.66,publish_id=1)</span></span><br><span class="line">    <span class="comment"># 2  虚拟字段 对象</span></span><br><span class="line">    <span class="comment"># publish_obj = models.Publish.objects.filter(pk=2).first()</span></span><br><span class="line">    <span class="comment"># models.Book.objects.create(title='红楼梦',price=666.23,publish=publish_obj)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 删</span></span><br><span class="line">    <span class="comment"># models.Publish.objects.filter(pk=1).delete()  # 级联删除</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 修改</span></span><br><span class="line">    <span class="comment"># models.Book.objects.filter(pk=1).update(publish_id=2)</span></span><br><span class="line">    <span class="comment"># publish_obj = models.Publish.objects.filter(pk=1).first()</span></span><br><span class="line">    <span class="comment"># models.Book.objects.filter(pk=1).update(publish=publish_obj)</span></span><br></pre></td></tr></table></figure>

<h3 id="一对多外键增删改查"><a href="#一对多外键增删改查" class="headerlink" title="一对多外键增删改查"></a>一对多外键增删改查</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 如何给书籍添加作者？</span></span><br><span class="line">    book_obj = models.Book.objects.filter(pk=<span class="number">1</span>).first()</span><br><span class="line">    <span class="comment"># print(book_obj.authors)  # 就类似于你已经到了第三张关系表了</span></span><br><span class="line">    <span class="comment"># book_obj.authors.add(1)  # 书籍id为1的书籍绑定一个主键为1 的作者</span></span><br><span class="line">    <span class="comment"># book_obj.authors.add(2,3)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># author_obj = models.Author.objects.filter(pk=1).first()</span></span><br><span class="line">    <span class="comment"># author_obj1 = models.Author.objects.filter(pk=2).first()</span></span><br><span class="line">    <span class="comment"># author_obj2 = models.Author.objects.filter(pk=3).first()</span></span><br><span class="line">    <span class="comment"># book_obj.authors.add(author_obj)</span></span><br><span class="line">    <span class="comment"># book_obj.authors.add(author_obj1,author_obj2)</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    add给第三张关系表添加数据</span></span><br><span class="line"><span class="string">        括号内既可以传数字也可以传对象 并且都支持多个</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 删</span></span><br><span class="line">    <span class="comment"># book_obj.authors.remove(2)</span></span><br><span class="line">    <span class="comment"># book_obj.authors.remove(1,3)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># author_obj = models.Author.objects.filter(pk=2).first()</span></span><br><span class="line">    <span class="comment"># author_obj1 = models.Author.objects.filter(pk=3).first()</span></span><br><span class="line">    <span class="comment"># book_obj.authors.remove(author_obj,author_obj1)</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    remove</span></span><br><span class="line"><span class="string">        括号内既可以传数字也可以传对象 并且都支持多个</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 修改</span></span><br><span class="line">    <span class="comment"># book_obj.authors.set([1,2])  # 括号内必须给一个可迭代对象</span></span><br><span class="line">    <span class="comment"># book_obj.authors.set([3])  # 括号内必须给一个可迭代对象</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># author_obj = models.Author.objects.filter(pk=2).first()</span></span><br><span class="line">    <span class="comment"># author_obj1 = models.Author.objects.filter(pk=3).first()</span></span><br><span class="line">    <span class="comment"># book_obj.authors.set([author_obj,author_obj1])  # 括号内必须给一个可迭代对象</span></span><br><span class="line"></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    set</span></span><br><span class="line"><span class="string">        括号内必须传一个可迭代对象，该对象内既可以数字也可以对象 并且都支持多个</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 清空</span></span><br><span class="line">    <span class="comment"># 在第三张关系表中清空某个书籍与作者的绑定关系</span></span><br><span class="line">    book_obj.authors.clear()</span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    clear</span></span><br><span class="line"><span class="string">        括号内不要加任何参数</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    """</span></span><br></pre></td></tr></table></figure>

<h3 id="多对多外键增删改查"><a href="#多对多外键增删改查" class="headerlink" title="多对多外键增删改查"></a>多对多外键增删改查</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 正向</span><br><span class="line"># 反向</span><br><span class="line">	外键字段在我手上那么，我查你就是正向</span><br><span class="line">  外键字段如果不在手上，我查你就是反向</span><br><span class="line">  </span><br><span class="line">  book &gt;&gt;&gt;外键字段在书那儿(正向)&gt;&gt;&gt; publish</span><br><span class="line">  publish	&gt;&gt;&gt;外键字段在书那儿(反向)&gt;&gt;&gt;book</span><br><span class="line">  </span><br><span class="line">  一对一和多对多正反向的判断也是如此</span><br><span class="line">  </span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">正向查询按字段</span><br><span class="line">反向查询按表名小写</span><br><span class="line">				_set</span><br><span class="line">				...</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>

<h3 id="正反向的概念"><a href="#正反向的概念" class="headerlink" title="正反向的概念"></a>正反向的概念</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 正向# 反向    外键字段在我手上那么，我查你就是正向  外键字段如果不在手上，我查你就是反向    book &gt;&gt;&gt;外键字段在书那儿(正向)&gt;&gt;&gt; publish  publish   &gt;&gt;&gt;外键字段在书那儿(反向)&gt;&gt;&gt;book    一对一和多对多正反向的判断也是如此  """正向查询按字段反向查询按表名小写                _set                ..."""</span></span><br></pre></td></tr></table></figure>

<h1 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h1><h3 id="子查询-基于对象的跨表查询"><a href="#子查询-基于对象的跨表查询" class="headerlink" title="子查询(基于对象的跨表查询)"></a>子查询(基于对象的跨表查询)</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1.查询书籍主键为1的出版社</span></span><br><span class="line">    <span class="comment"># book_obj = models.Book.objects.filter(pk=1).first()</span></span><br><span class="line">    <span class="comment"># # 书查出版社 正向</span></span><br><span class="line">    <span class="comment"># res = book_obj.publish</span></span><br><span class="line">    <span class="comment"># print(res)</span></span><br><span class="line">    <span class="comment"># print(res.name)</span></span><br><span class="line">    <span class="comment"># print(res.addr)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2.查询书籍主键为2的作者</span></span><br><span class="line">    <span class="comment"># book_obj = models.Book.objects.filter(pk=2).first()</span></span><br><span class="line">    <span class="comment"># # 书查作者 正向</span></span><br><span class="line">    <span class="comment"># # res = book_obj.authors  # app01.Author.None</span></span><br><span class="line">    <span class="comment"># res = book_obj.authors.all()  # &lt;QuerySet [&lt;Author: Author object&gt;, &lt;Author: Author object&gt;]&gt;</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment"># print(res)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 3.查询作者jason的电话号码</span></span><br><span class="line">    <span class="comment"># author_obj = models.Author.objects.filter(name='jason').first()</span></span><br><span class="line">    <span class="comment"># res = author_obj.author_detail</span></span><br><span class="line">    <span class="comment"># print(res)</span></span><br><span class="line">    <span class="comment"># print(res.phone)</span></span><br><span class="line">    <span class="comment"># print(res.addr)</span></span><br><span class="line"></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    在书写orm语句的时候跟写sql语句一样的</span></span><br><span class="line"><span class="string">    不要企图一次性将orm语句写完 如果比较复杂 就写一点看一点</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    正向什么时候需要加.all()</span></span><br><span class="line"><span class="string">        当你的结果可能有多个的时候就需要加.all()</span></span><br><span class="line"><span class="string">        如果是一个则直接拿到数据对象</span></span><br><span class="line"><span class="string">            book_obj.publish</span></span><br><span class="line"><span class="string">            book_obj.authors.all()</span></span><br><span class="line"><span class="string">            author_obj.author_detail</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="comment"># 4.查询出版社是东方出版社出版的书</span></span><br><span class="line">    <span class="comment"># publish_obj = models.Publish.objects.filter(name='东方出版社').first()</span></span><br><span class="line">    <span class="comment"># 出版社查书  反向</span></span><br><span class="line">    <span class="comment"># res = publish_obj.book_set  # app01.Book.None</span></span><br><span class="line">    <span class="comment"># res = publish_obj.book_set.all()</span></span><br><span class="line">    <span class="comment"># print(res)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 5.查询作者是jason写过的书</span></span><br><span class="line">    <span class="comment"># author_obj = models.Author.objects.filter(name='jason').first()</span></span><br><span class="line">    <span class="comment"># 作者查书      反向</span></span><br><span class="line">    <span class="comment"># res = author_obj.book_set  # app01.Book.None</span></span><br><span class="line">    <span class="comment"># res = author_obj.book_set.all()</span></span><br><span class="line">    <span class="comment"># print(res)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 6.查询手机号是110的作者姓名</span></span><br><span class="line">    <span class="comment"># author_detail_obj = models.AuthorDetail.objects.filter(phone=110).first()</span></span><br><span class="line">    <span class="comment"># res = author_detail_obj.author</span></span><br><span class="line">    <span class="comment"># print(res.name)</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    基于对象 </span></span><br><span class="line"><span class="string">        反向查询的时候</span></span><br><span class="line"><span class="string">            当你的查询结果可以有多个的时候 就必须加_set.all()</span></span><br><span class="line"><span class="string">            当你的结果只有一个的时候 不需要加_set.all()</span></span><br><span class="line"><span class="string">        自己总结出 自己方便记忆的即可 每个人都可以不一样</span></span><br><span class="line"><span class="string">    """</span></span><br></pre></td></tr></table></figure>

<h3 id="联表查询-基于双下划线的跨表查询"><a href="#联表查询-基于双下划线的跨表查询" class="headerlink" title="联表查询(基于双下划线的跨表查询)"></a>联表查询(基于双下划线的跨表查询)</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 基于双下划线的跨表查询</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 1.查询jason的手机号和作者姓名</span></span><br><span class="line">    <span class="comment"># res = models.Author.objects.filter(name='jason').values('author_detail__phone','name')</span></span><br><span class="line">    <span class="comment"># print(res)</span></span><br><span class="line">    <span class="comment"># 反向</span></span><br><span class="line">    <span class="comment"># res = models.AuthorDetail.objects.filter(author__name='jason')  # 拿作者姓名是jason的作者详情</span></span><br><span class="line">    <span class="comment"># res = models.AuthorDetail.objects.filter(author__name='jason').values('phone','author__name')</span></span><br><span class="line">    <span class="comment"># print(res)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2.查询书籍主键为1的出版社名称和书的名称</span></span><br><span class="line">    <span class="comment"># res = models.Book.objects.filter(pk=1).values('title','publish__name')</span></span><br><span class="line">    <span class="comment"># print(res)</span></span><br><span class="line">    <span class="comment"># 反向</span></span><br><span class="line">    <span class="comment"># res = models.Publish.objects.filter(book__id=1).values('name','book__title')</span></span><br><span class="line">    <span class="comment"># print(res)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 3.查询书籍主键为1的作者姓名</span></span><br><span class="line">    <span class="comment"># res = models.Book.objects.filter(pk=1).values('authors__name')</span></span><br><span class="line">    <span class="comment"># print(res)</span></span><br><span class="line">    <span class="comment"># 反向</span></span><br><span class="line">    <span class="comment"># res = models.Author.objects.filter(book__id=1).values('name')</span></span><br><span class="line">    <span class="comment"># print(res)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 查询书籍主键是1的作者的手机号</span></span><br><span class="line">    <span class="comment"># book author authordetail</span></span><br><span class="line">    <span class="comment"># res = models.Book.objects.filter(pk=1).values('authors__author_detail__phone')</span></span><br><span class="line">    <span class="comment"># print(res)</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    你只要掌握了正反向的概念</span></span><br><span class="line"><span class="string">    以及双下划线</span></span><br><span class="line"><span class="string">    那么你就可以无限制的跨表</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    """</span></span><br></pre></td></tr></table></figure>

<h3 id="聚合查询"><a href="#聚合查询" class="headerlink" title="聚合查询"></a>聚合查询</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 聚合查询      aggregate</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    聚合查询通常情况下都是配合分组一起使用的</span></span><br><span class="line"><span class="string">    只要是跟数据库相关的模块 </span></span><br><span class="line"><span class="string">        基本上都在django.db.models里面</span></span><br><span class="line"><span class="string">        如果上述没有那么应该在django.db里面</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">from</span> app01 <span class="keyword">import</span> models</span><br><span class="line">    <span class="keyword">from</span> django.db.models <span class="keyword">import</span> Max,Min,Sum,Count,Avg</span><br><span class="line">    <span class="comment"># 1 所有书的平均价格</span></span><br><span class="line">    <span class="comment"># res = models.Book.objects.aggregate(Avg('price'))</span></span><br><span class="line">    <span class="comment"># print(res)</span></span><br><span class="line">    <span class="comment"># 2.上述方法一次性使用</span></span><br><span class="line">    res = models.Book.objects.aggregate(Max(<span class="string">'price'</span>),Min(<span class="string">'price'</span>),Sum(<span class="string">'price'</span>),Count(<span class="string">'pk'</span>),Avg(<span class="string">'price'</span>))</span><br><span class="line">    print(res)</span><br></pre></td></tr></table></figure>

<h3 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 分组查询  annotate</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    MySQL分组查询都有哪些特点</span></span><br><span class="line"><span class="string">        分组之后默认只能获取到分组的依据 组内其他字段都无法直接获取了</span></span><br><span class="line"><span class="string">            严格模式</span></span><br><span class="line"><span class="string">                ONLY_FULL_GROUP_BY</span></span><br><span class="line"><span class="string">                </span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">from</span> django.db.models <span class="keyword">import</span> Max, Min, Sum, Count, Avg</span><br><span class="line">    <span class="comment"># 1.统计每一本书的作者个数</span></span><br><span class="line">    <span class="comment"># res = models.Book.objects.annotate()  # models后面点什么 就是按什么分组</span></span><br><span class="line">    <span class="comment"># res = models.Book.objects.annotate(author_num=Count('authors')).values('title','author_num')</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    author_num是我们自己定义的字段 用来存储统计出来的每本书对应的作者个数</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="comment"># res1 = models.Book.objects.annotate(author_num=Count('authors__id')).values('title','author_num')</span></span><br><span class="line">    <span class="comment"># print(res,res1)</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    代码没有补全 不要怕 正常写</span></span><br><span class="line"><span class="string">    补全给你是pycharm给你的 到后面在服务器上直接书写代码 什么补全都没有 颜色提示也没有</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2.统计每个出版社卖的最便宜的书的价格(作业:复习原生SQL语句 写出来)</span></span><br><span class="line">    <span class="comment"># res = models.Publish.objects.annotate(min_price=Min('book__price')).values('name','min_price')</span></span><br><span class="line">    <span class="comment"># print(res)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 3.统计不止一个作者的图书</span></span><br><span class="line">        <span class="comment"># 1.先按照图书分组 求每一本书对应的作者个数</span></span><br><span class="line">        <span class="comment"># 2.过滤出不止一个作者的图书</span></span><br><span class="line">    <span class="comment"># res = models.Book.objects.annotate(author_num=Count('authors')).filter(author_num__gt=1).values('title','author_num')</span></span><br><span class="line">    <span class="comment"># """</span></span><br><span class="line">    <span class="comment"># 只要你的orm语句得出的结果还是一个queryset对象</span></span><br><span class="line">    <span class="comment"># 那么它就可以继续无限制的点queryset对象封装的方法</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment"># """</span></span><br><span class="line">    <span class="comment"># print(res)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 4.查询每个作者出的书的总价格</span></span><br><span class="line">    <span class="comment"># res = models.Author.objects.annotate(sum_price=Sum('book__price')).values('name','sum_price')</span></span><br><span class="line">    <span class="comment"># print(res)</span></span><br><span class="line"></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    如果我想按照指定的字段分组该如何处理呢？</span></span><br><span class="line"><span class="string">        models.Book.objects.values('price').annotate()</span></span><br><span class="line"><span class="string">    后续BBS作业会使用</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    你们的机器上如果出现分组查询报错的情况</span></span><br><span class="line"><span class="string">        你需要修改数据库严格模式</span></span><br><span class="line"><span class="string">    """</span></span><br></pre></td></tr></table></figure>

<h3 id="F与Q查询"><a href="#F与Q查询" class="headerlink" title="F与Q查询"></a>F与Q查询</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># F查询</span><br><span class="line">    # 1.查询卖出数大于库存数的书籍</span><br><span class="line">    # F查询</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    能够帮助你直接获取到表中某个字段对应的数据</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    from django.db.models import F</span><br><span class="line">    # res &#x3D; models.Book.objects.filter(maichu__gt&#x3D;F(&#39;kucun&#39;))</span><br><span class="line">    # print(res)</span><br><span class="line"></span><br><span class="line">    # 2.将所有书籍的价格提升500块</span><br><span class="line">    # models.Book.objects.update(price&#x3D;F(&#39;price&#39;) + 500)</span><br><span class="line"></span><br><span class="line">    # 3.将所有书的名称后面加上爆款两个字</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    在操作字符类型的数据的时候 F不能够直接做到字符串的拼接</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    from django.db.models.functions import Concat</span><br><span class="line">    from django.db.models import Value</span><br><span class="line">    models.Book.objects.update(title&#x3D;Concat(F(&#39;title&#39;), Value(&#39;爆款&#39;)))</span><br><span class="line">    # models.Book.objects.update(title&#x3D;F(&#39;title&#39;) + &#39;爆款&#39;)  # 所有的名称会全部变成空白</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Q查询</span></span><br><span class="line">    <span class="comment"># 1.查询卖出数大于100或者价格小于600的书籍</span></span><br><span class="line">    <span class="comment"># res = models.Book.objects.filter(maichu__gt=100,price__lt=600)</span></span><br><span class="line">    <span class="string">"""filter括号内多个参数是and关系"""</span></span><br><span class="line">    <span class="keyword">from</span> django.db.models <span class="keyword">import</span> Q</span><br><span class="line">    <span class="comment"># res = models.Book.objects.filter(Q(maichu__gt=100),Q(price__lt=600))  # Q包裹逗号分割 还是and关系</span></span><br><span class="line">    <span class="comment"># res = models.Book.objects.filter(Q(maichu__gt=100)|Q(price__lt=600))  # | or关系</span></span><br><span class="line">    <span class="comment"># res = models.Book.objects.filter(~Q(maichu__gt=100)|Q(price__lt=600))  # ~ not关系</span></span><br><span class="line">    <span class="comment"># print(res)  # &lt;QuerySet []&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Q的高阶用法  能够将查询条件的左边也变成字符串的形式</span></span><br><span class="line">    q = Q()</span><br><span class="line">    q.connector = <span class="string">'or'</span></span><br><span class="line">    q.children.append((<span class="string">'maichu__gt'</span>,<span class="number">100</span>))</span><br><span class="line">    q.children.append((<span class="string">'price__lt'</span>,<span class="number">600</span>))</span><br><span class="line">    res = models.Book.objects.filter(q)  <span class="comment"># 默认还是and关系</span></span><br><span class="line">    print(res)</span><br></pre></td></tr></table></figure>

<h3 id="django中如何开启事务"><a href="#django中如何开启事务" class="headerlink" title="django中如何开启事务"></a>django中如何开启事务</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">事务</span></span><br><span class="line"><span class="string">	ACID</span></span><br><span class="line"><span class="string">		原子性</span></span><br><span class="line"><span class="string">			不可分割的最小单位</span></span><br><span class="line"><span class="string">		一致性</span></span><br><span class="line"><span class="string">			跟原子性是相辅相成</span></span><br><span class="line"><span class="string">		隔离性</span></span><br><span class="line"><span class="string">			事务之间互相不干扰</span></span><br><span class="line"><span class="string">		持久性</span></span><br><span class="line"><span class="string">			事务一旦确认永久生效</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">	事务的回滚 </span></span><br><span class="line"><span class="string">		rollback</span></span><br><span class="line"><span class="string">	事务的确认</span></span><br><span class="line"><span class="string">		commit</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment"># 目前你只需要掌握Django中如何简单的开启事务</span></span><br><span class="line"><span class="comment"># 事务</span></span><br><span class="line">    <span class="keyword">from</span> django.db <span class="keyword">import</span> transaction</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> transaction.atomic():</span><br><span class="line">            <span class="comment"># sql1</span></span><br><span class="line">            <span class="comment"># sql2</span></span><br><span class="line">            ...</span><br><span class="line">            <span class="comment"># 在with代码快内书写的所有orm操作都是属于同一个事务</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(e)</span><br><span class="line">    print(<span class="string">'执行其他操作'</span>)</span><br></pre></td></tr></table></figure>

<h3 id="orm中常用字段及参数"><a href="#orm中常用字段及参数" class="headerlink" title="orm中常用字段及参数"></a>orm中常用字段及参数</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">AutoField</span><br><span class="line">	主键字段 primary_key=<span class="literal">True</span></span><br><span class="line">  </span><br><span class="line">CharField			varchar</span><br><span class="line">	verbose_name	字段的注释</span><br><span class="line">    max_length		长度</span><br><span class="line">  </span><br><span class="line">IntegerField		int</span><br><span class="line">BigIntegerField		bigint</span><br><span class="line"></span><br><span class="line">DecimalField</span><br><span class="line">	max_digits=<span class="number">8</span></span><br><span class="line">  decimal_places=<span class="number">2</span></span><br><span class="line"></span><br><span class="line">EmailFiled				varchar(<span class="number">254</span>)</span><br><span class="line"></span><br><span class="line">DateField				date</span><br><span class="line">DateTimeField			datetime</span><br><span class="line">	auto_now:每次修改数据的时候都会自动更新当前时间</span><br><span class="line">    auto_now_add:只在创建数据的时候记录创建时间后续不会自动修改了</span><br><span class="line">    </span><br><span class="line">BooleanField(Field)				- 布尔值类型</span><br><span class="line">	该字段传布尔值(<span class="literal">False</span>/<span class="literal">True</span>) 	数据库里面存<span class="number">0</span>/<span class="number">1</span></span><br><span class="line"></span><br><span class="line">TextField(Field)					- 文本类型</span><br><span class="line">	该字段可以用来存大段内容(文章、博客...)  没有字数限制</span><br><span class="line">    后面的bbs作业 文章字段用的就是TextField</span><br><span class="line"></span><br><span class="line">FileField(Field)					- 字符类型</span><br><span class="line">   upload_to = <span class="string">"/data"</span></span><br><span class="line">   给该字段传一个文件对象，会自动将文件保存到/data目录下然后将文件路径保存到数据库中</span><br><span class="line">   /data/a.txt</span><br><span class="line">   后面bbs作业也会涉及</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更多字段</span></span><br><span class="line">直接参考博客:https://www.cnblogs.com/Dominic-Ji/p/<span class="number">9203990.</span>html</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="comment"># django除了给你提供了很多字段类型之外 还支持你自定义字段</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyCharField</span><span class="params">(models.Field)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,max_length,*args,**kwargs)</span>:</span></span><br><span class="line">        self.max_length = max_length</span><br><span class="line">        <span class="comment"># 调用父类的init方法</span></span><br><span class="line">        super().__init__(max_length=max_length,*args,**kwargs)  <span class="comment"># 一定要是关键字的形式传入</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">db_type</span><span class="params">(self, connection)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        返回真正的数据类型及各种约束条件</span></span><br><span class="line"><span class="string">        :param connection:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'char(%s)'</span>%self.max_length</span><br><span class="line"></span><br><span class="line"><span class="comment"># 自定义字段使用</span></span><br><span class="line">myfield = MyCharField(max_length=<span class="number">16</span>,null=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 外键字段及参数</span></span><br><span class="line">unique=<span class="literal">True</span></span><br><span class="line">	ForeignKey(unique=<span class="literal">True</span>)   ===	OneToOneField()</span><br><span class="line">  <span class="comment"># 你在用前面字段创建一对一 orm会有一个提示信息 orm推荐你使用后者但是前者也能用</span></span><br><span class="line">  </span><br><span class="line">db_index</span><br><span class="line">	如果db_index=<span class="literal">True</span> 则代表着为此字段设置索引</span><br><span class="line">  (复习索引是什么)</span><br><span class="line"></span><br><span class="line">to_field</span><br><span class="line">	设置要关联的表的字段  默认不写关联的就是另外一张的主键字段</span><br><span class="line"></span><br><span class="line">on_delete</span><br><span class="line">	当删除关联表中的数据时，当前表与其关联的行的行为。</span><br><span class="line">  <span class="string">"""</span></span><br><span class="line"><span class="string">  django2.X及以上版本 需要你自己指定外键字段的级联更新级联删除</span></span><br><span class="line"><span class="string">  """</span></span><br></pre></td></tr></table></figure>

<h3 id="数据库查询优化"><a href="#数据库查询优化" class="headerlink" title="数据库查询优化"></a>数据库查询优化</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">only与defer	</span><br><span class="line">select_related与prefetch_related</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">orm语句的特点:</span></span><br><span class="line"><span class="string">	惰性查询</span></span><br><span class="line"><span class="string">		如果你仅仅只是书写了orm语句 在后面根本没有用到该语句所查询出来的参数</span></span><br><span class="line"><span class="string">		那么orm会自动识别 直接不执行</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment"># only与defer</span></span><br><span class="line"><span class="comment"># res = models.Book.objects.all()</span></span><br><span class="line">    <span class="comment"># print(res)  # 要用数据了才会走数据库</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 想要获取书籍表中所有数的名字</span></span><br><span class="line">    <span class="comment"># res = models.Book.objects.values('title')</span></span><br><span class="line">    <span class="comment"># for d in res:</span></span><br><span class="line">    <span class="comment">#     print(d.get('title'))</span></span><br><span class="line">    <span class="comment"># 你给我实现获取到的是一个数据对象 然后点title就能够拿到书名 并且没有其他字段</span></span><br><span class="line">    <span class="comment"># res = models.Book.objects.only('title')</span></span><br><span class="line">    <span class="comment"># res = models.Book.objects.all()</span></span><br><span class="line">    <span class="comment"># print(res)  # &lt;QuerySet [&lt;Book: 三国演义爆款&gt;, &lt;Book: 红楼梦爆款&gt;, &lt;Book: 论语爆款&gt;, &lt;Book: 聊斋爆款&gt;, &lt;Book: 老子爆款&gt;]&gt;</span></span><br><span class="line">    <span class="comment"># for i in res:</span></span><br><span class="line">        <span class="comment"># print(i.title)  # 点击only括号内的字段 不会走数据库</span></span><br><span class="line">        <span class="comment"># print(i.price)  # 点击only括号内没有的字段 会重新走数据库查询而all不需要走了</span></span><br><span class="line"></span><br><span class="line">    res = models.Book.objects.defer(<span class="string">'title'</span>)  <span class="comment"># 对象除了没有title属性之外其他的都有</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> res:</span><br><span class="line">        print(i.price)</span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    defer与only刚好相反</span></span><br><span class="line"><span class="string">        defer括号内放的字段不在查询出来的对象里面 查询该字段需要重新走数据</span></span><br><span class="line"><span class="string">        而如果查询的是非括号内的字段 则不需要走数据库了</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># select_related与prefetch_related  跟跨表操作有关</span></span><br><span class="line">    <span class="comment"># res = models.Book.objects.all()</span></span><br><span class="line">    <span class="comment"># for i in res:</span></span><br><span class="line">    <span class="comment">#     print(i.publish.name)  # 每循环一次就要走一次数据库查询</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># res = models.Book.objects.select_related('authors')  # INNER JOIN</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    select_related内部直接先将book与publish连起来 然后一次性将大表里面的所有数据</span></span><br><span class="line"><span class="string">    全部封装给查询出来的对象</span></span><br><span class="line"><span class="string">        这个时候对象无论是点击book表的数据还是publish的数据都无需再走数据库查询了</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    select_related括号内只能放外键字段    一对多 一对一</span></span><br><span class="line"><span class="string">        多对多也不行</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="comment"># for i in res:</span></span><br><span class="line">    <span class="comment">#     print(i.publish.name)  # 每循环一次就要走一次数据库查询</span></span><br><span class="line"></span><br><span class="line">    res = models.Book.objects.prefetch_related(<span class="string">'publish'</span>)  <span class="comment"># 子查询</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    prefetch_related该方法内部其实就是子查询</span></span><br><span class="line"><span class="string">        将子查询查询出来的所有结果也给你封装到对象中</span></span><br><span class="line"><span class="string">        给你的感觉好像也是一次性搞定的</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> res:</span><br><span class="line">        print(i.publish.name)</span><br><span class="line">        </span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    看情况使用：拼表数据量大的话用子查询效率更高</span></span><br><span class="line"><span class="string">    """</span></span><br></pre></td></tr></table></figure>

<h3 id="choices参数-数据库字段设计常见"><a href="#choices参数-数据库字段设计常见" class="headerlink" title="choices参数(数据库字段设计常见)"></a>choices参数(数据库字段设计常见)</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">用户表	</span></span><br><span class="line"><span class="string">	性别</span></span><br><span class="line"><span class="string">	学历</span></span><br><span class="line"><span class="string">	工作经验</span></span><br><span class="line"><span class="string">	是否结婚</span></span><br><span class="line"><span class="string">	是否生子</span></span><br><span class="line"><span class="string">	客户来源</span></span><br><span class="line"><span class="string">	...</span></span><br><span class="line"><span class="string">针对某个可以列举完全的可能性字段，我们应该如何存储</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">只要某个字段的可能性是可以列举完全的，那么一般情况下都会采用choices参数</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    username = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    age = models.IntegerField()</span><br><span class="line">    <span class="comment"># 性别</span></span><br><span class="line">    gender_choices = (</span><br><span class="line">        (<span class="number">1</span>,<span class="string">'男'</span>),</span><br><span class="line">        (<span class="number">2</span>,<span class="string">'女'</span>),</span><br><span class="line">        (<span class="number">3</span>,<span class="string">'其他'</span>),</span><br><span class="line">    )</span><br><span class="line">    gender = models.IntegerField(choices=gender_choices)</span><br><span class="line">    </span><br><span class="line">    score_choices = (</span><br><span class="line">        (<span class="string">'A'</span>,<span class="string">'优秀'</span>),</span><br><span class="line">        (<span class="string">'B'</span>,<span class="string">'良好'</span>),</span><br><span class="line">        (<span class="string">'C'</span>,<span class="string">'及格'</span>),</span><br><span class="line">        (<span class="string">'D'</span>,<span class="string">'不合格'</span>),</span><br><span class="line">    )</span><br><span class="line">    <span class="comment"># 保证字段类型跟列举出来的元祖第一个数据类型一致即可</span></span><br><span class="line">    score = models.CharField(choices=score_choices,null=<span class="literal">True</span>)</span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    该gender字段存的还是数字 但是如果存的数字在上面元祖列举的范围之内</span></span><br><span class="line"><span class="string">    那么可以非常轻松的获取到数字对应的真正的内容</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    1.gender字段存的数字不在上述元祖列举的范围内容</span></span><br><span class="line"><span class="string">    2.如果在 如何获取对应的中文信息</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    </span><br><span class="line">      </span><br><span class="line">    <span class="keyword">from</span> app01 <span class="keyword">import</span> models</span><br><span class="line">    <span class="comment"># models.User.objects.create(username='jason',age=18,gender=1)</span></span><br><span class="line">    <span class="comment"># models.User.objects.create(username='egon',age=85,gender=2)</span></span><br><span class="line">    <span class="comment"># models.User.objects.create(username='tank',age=40,gender=3)</span></span><br><span class="line">    <span class="comment"># 存的时候 没有列举出来的数字也能存（范围还是按照字段类型决定）</span></span><br><span class="line">    <span class="comment"># models.User.objects.create(username='tony',age=45,gender=4)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 取</span></span><br><span class="line">    <span class="comment"># user_obj = models.User.objects.filter(pk=1).first()</span></span><br><span class="line">    <span class="comment"># print(user_obj.gender)</span></span><br><span class="line">    <span class="comment"># 只要是choices参数的字段 如果你想要获取对应信息 固定写法 get_字段名_display()</span></span><br><span class="line">    <span class="comment"># print(user_obj.get_gender_display())</span></span><br><span class="line"></span><br><span class="line">    user_obj = models.User.objects.filter(pk=<span class="number">4</span>).first()</span><br><span class="line">    <span class="comment"># 如果没有对应关系 那么字段是什么还是展示什么</span></span><br><span class="line">    print(user_obj.get_gender_display())  <span class="comment"># 4</span></span><br><span class="line">         </span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">chocies参数使用场景是非常广泛的</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<h3 id="多对多三种创建方式"><a href="#多对多三种创建方式" class="headerlink" title="多对多三种创建方式"></a>多对多三种创建方式</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 全自动:利用orm自动帮我们创建第三张关系表</span></span><br><span class="line">	<span class="class"><span class="keyword">class</span> <span class="title">Book</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    authors = models.ManyToManyField(to=<span class="string">'Author'</span>)</span><br><span class="line">	<span class="class"><span class="keyword">class</span> <span class="title">Author</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">	<span class="string">"""</span></span><br><span class="line"><span class="string">	优点:代码不需要你写 非常的方便 还支持orm提供操作第三张关系表的方法...</span></span><br><span class="line"><span class="string">	不足之处:第三张关系表的扩展性极差(没有办法额外添加字段...)</span></span><br><span class="line"><span class="string">	"""</span></span><br><span class="line"><span class="comment"># 纯手动</span></span><br><span class="line">	<span class="class"><span class="keyword">class</span> <span class="title">Book</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    </span><br><span class="line">	<span class="class"><span class="keyword">class</span> <span class="title">Author</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">  </span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Book2Author</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    book_id = models.ForeignKey(to=<span class="string">'Book'</span>)</span><br><span class="line">    author_id = models.ForeignKey(to=<span class="string">'Author'</span>)</span><br><span class="line">  <span class="string">'''</span></span><br><span class="line"><span class="string">  优点:第三张表完全取决于你自己进行额外的扩展</span></span><br><span class="line"><span class="string">  不足之处:需要写的代码较多，不能够再使用orm提供的简单的方法</span></span><br><span class="line"><span class="string">  不建议你用该方式</span></span><br><span class="line"><span class="string">  '''</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 半自动</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    authors = models.ManyToManyField(to=<span class="string">'Author'</span>,</span><br><span class="line">                                     through=<span class="string">'Book2Author'</span>,</span><br><span class="line">                                     through_fields=(<span class="string">'book'</span>,<span class="string">'author'</span>)</span><br><span class="line">                                     )</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Author</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    <span class="comment"># books = models.ManyToManyField(to='Book',</span></span><br><span class="line">    <span class="comment">#                                  through='Book2Author',</span></span><br><span class="line">    <span class="comment">#                                  through_fields=('author','book')</span></span><br><span class="line">    <span class="comment">#                                  )</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book2Author</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    book = models.ForeignKey(to=<span class="string">'Book'</span>)</span><br><span class="line">    author = models.ForeignKey(to=<span class="string">'Author'</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">through_fields字段先后顺序</span></span><br><span class="line"><span class="string">    判断的本质：</span></span><br><span class="line"><span class="string">        通过第三张表查询对应的表 需要用到哪个字段就把哪个字段放前面</span></span><br><span class="line"><span class="string">    你也可以简化判断</span></span><br><span class="line"><span class="string">        当前表是谁 就把对应的关联字段放前面</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">半自动:可以使用orm的正反向查询 但是没法使用add,set,remove,clear这四个方法</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 总结:你需要掌握的是全自动和半自动 为了扩展性更高 一般我们都会采用半自动(写代码要给自己留一条后路)</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>django框架</tag>
      </tags>
  </entry>
  <entry>
    <title>[模板层]</title>
    <url>/2020/02/12/%E6%A8%A1%E6%9D%BF%E5%B1%82/</url>
    <content><![CDATA[<h3 id="模版语法传值（又称DTL）"><a href="#模版语法传值（又称DTL）" class="headerlink" title="模版语法传值（又称DTL）"></a>模版语法传值（又称DTL）</h3> 
{{}}:变量相关

{%%}:逻辑相关

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="comment"># 模版语法可以传递的后端python数据类型</span></span><br><span class="line">    n = <span class="number">123</span></span><br><span class="line">    f = <span class="number">11.11</span></span><br><span class="line">    s = <span class="string">'我也想奔现'</span></span><br><span class="line">    b = <span class="literal">True</span></span><br><span class="line">    l = [<span class="string">'小红'</span>,<span class="string">'姗姗'</span>,<span class="string">'花花'</span>,<span class="string">'茹茹'</span>]</span><br><span class="line">    t = (<span class="number">111</span>,<span class="number">222</span>,<span class="number">333</span>,<span class="number">444</span>)</span><br><span class="line">    d = &#123;<span class="string">'username'</span>:<span class="string">'jason'</span>,<span class="string">'age'</span>:<span class="number">18</span>,<span class="string">'info'</span>:<span class="string">'这个人有点意思'</span>&#125;</span><br><span class="line">    se = &#123;<span class="string">'晶晶'</span>,<span class="string">'洋洋'</span>,<span class="string">'嘤嘤'</span>&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line">        print(<span class="string">'我被执行了'</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'你的另一半在等你'</span></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">MyClass</span><span class="params">(object)</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">get_self</span><span class="params">(self)</span>:</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">'self'</span></span><br><span class="line"></span><br><span class="line"><span class="meta">        @staticmethod</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">get_func</span><span class="params">()</span>:</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">'func'</span></span><br><span class="line"></span><br><span class="line"><span class="meta">        @classmethod</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">get_class</span><span class="params">(cls)</span>:</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">'cls'</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 对象被展示到html页面上 就类似于执行了打印操作也会触发__str__方法</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">'到底会不会？'</span>  </span><br><span class="line">        </span><br><span class="line">    obj = MyClass()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># return render(request,'index.html',&#123;&#125;)  # 一个个传</span></span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">'index.html'</span>,locals())</span><br><span class="line"></span><br><span class="line">&lt;p&gt;&#123;&#123; n &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;&#123;&#123; f &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;&#123;&#123; s &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;&#123;&#123; b &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;&#123;&#123; l &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;&#123;&#123; d &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;&#123;&#123; t &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;&#123;&#123; se &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;传递函数名会自动加括号调用 但是模版语法不支持给函数传额外的参数:&#123;&#123; func &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;传类名的时候也会自动加括号调用(实例化)&#123;&#123; MyClass &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;内部能够自动判断出当前的变量名是否可以加括号调用 如果可以就会自动执行  针对的是函数名和类名&lt;/p&gt;</span><br><span class="line">&lt;p&gt;&#123;&#123; obj &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;&#123;&#123; obj.get_self &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;&#123;&#123; obj.get_func &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;&#123;&#123; obj.get_class &#125;&#125;&lt;/p&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># django模版语法的取值 是固定的格式 只能采用“句点符” .</span></span><br><span class="line">&lt;p&gt;&#123;&#123; d.username &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;&#123;&#123; l.0 &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;&#123;&#123; d.hobby.3.info &#125;&#125;&lt;/p&gt;</span><br><span class="line"><span class="comment"># 即可以点键也可以点索引 还可以两者混用</span></span><br></pre></td></tr></table></figure>

<h3 id="过滤器-过滤器只能最多有两个参数"><a href="#过滤器-过滤器只能最多有两个参数" class="headerlink" title="过滤器(过滤器只能最多有两个参数)"></a>过滤器(过滤器只能最多有两个参数)</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 过滤器就类似于是模版语法内置的 内置方法</span></span><br><span class="line"><span class="comment"># django内置有60多个过滤器 我们不需要学这么多 了解10个左右就差不多了 后面碰到了再去记忆</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 基本语法</span></span><br><span class="line">&#123;&#123;数据|过滤器:参数&#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 转义</span></span><br><span class="line"><span class="comment"># 前端</span></span><br><span class="line">	|safe</span><br><span class="line"><span class="comment"># 后端</span></span><br><span class="line">	<span class="keyword">from</span> django.utils.safestring <span class="keyword">import</span> mark_safe</span><br><span class="line">	res = mark_safe(<span class="string">'&lt;h1&gt;新新&lt;/h1&gt;'</span>)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">以后你在全栈项目的时候 前端代码不一定非要在前端页面书写</span></span><br><span class="line"><span class="string">也可以现在先在后端写好 然后传递给前端页面</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">&lt;h1&gt;过滤器&lt;/h1&gt;</span><br><span class="line">&lt;p&gt;统计长度:&#123;&#123; s|length &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;默认值(第一个参数布尔值是True就展示第一个参数的值否在展示冒号后面的值):&#123;&#123; b|default:'啥也不是' &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;文件大小:&#123;&#123; file_size|filesizeformat &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;日期格式化:&#123;&#123; current_time|date:'Y-m-d H:i:s' &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;切片操作(支持步长):&#123;&#123; l|slice:'0:4:2' &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;切取字符(包含三个点):&#123;&#123; info|truncatechars:9 &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;切取单词(不包含三个点 按照空格切):&#123;&#123; egl|truncatewords:9 &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;切取单词(不包含三个点 按照空格切):&#123;&#123; info|truncatewords:9 &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;移除特定的字符:&#123;&#123; msg|cut:' ' &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;拼接操作:&#123;&#123; l|join:'$' &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;拼接操作(加法):&#123;&#123; n|add:10 &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;拼接操作(加法):&#123;&#123; s|add:msg &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;转义:&#123;&#123; hhh|safe &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;转义:&#123;&#123; sss|safe &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;转义:&#123;&#123; res &#125;&#125;&lt;/p&gt;</span><br></pre></td></tr></table></figure>

<h3 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># for循环</span></span><br><span class="line">	&#123;% <span class="keyword">for</span> foo <span class="keyword">in</span> l %&#125;</span><br><span class="line">    &lt;p&gt;&#123;&#123; forloop &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123; foo &#125;&#125;&lt;/p&gt;  一个个元素</span><br><span class="line">	&#123;% endfor %&#125;</span><br><span class="line">  &#123;<span class="string">'parentloop'</span>: &#123;&#125;, <span class="string">'counter0'</span>: <span class="number">0</span>, <span class="string">'counter'</span>: <span class="number">1</span>, <span class="string">'revcounter'</span>: <span class="number">6</span>, <span class="string">'revcounter0'</span>: 	<span class="number">5</span>, <span class="string">'first'</span>: <span class="literal">True</span>, <span class="string">'last'</span>: <span class="literal">False</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># if判断</span></span><br><span class="line">&#123;% <span class="keyword">if</span> b %&#125;</span><br><span class="line">    &lt;p&gt;baby&lt;/p&gt;</span><br><span class="line">&#123;% <span class="keyword">elif</span> s%&#125;</span><br><span class="line">    &lt;p&gt;都来把&lt;/p&gt;</span><br><span class="line">&#123;% <span class="keyword">else</span> %&#125;</span><br><span class="line">    &lt;p&gt;老baby&lt;/p&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># for与if混合使用</span></span><br><span class="line">&#123;% <span class="keyword">for</span> foo <span class="keyword">in</span> lll %&#125;</span><br><span class="line">    &#123;% <span class="keyword">if</span> forloop.first %&#125;</span><br><span class="line">        &lt;p&gt;这是我的第一次&lt;/p&gt;</span><br><span class="line">    &#123;% <span class="keyword">elif</span> forloop.last %&#125;</span><br><span class="line">        &lt;p&gt;这是最后一次啊&lt;/p&gt;</span><br><span class="line">    &#123;% <span class="keyword">else</span> %&#125;</span><br><span class="line">        &lt;p&gt;&#123;&#123; foo &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">    &#123;% empty %&#125;</span><br><span class="line">        &lt;p&gt;for循环的可迭代对象内部没有元素 根本没法循环&lt;/p&gt;</span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 处理字典其他方法</span></span><br><span class="line">&#123;% <span class="keyword">for</span> foo <span class="keyword">in</span> d.keys %&#125;</span><br><span class="line">    &lt;p&gt;&#123;&#123; foo &#125;&#125;&lt;/p&gt;</span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line">&#123;% <span class="keyword">for</span> foo <span class="keyword">in</span> d.values %&#125;</span><br><span class="line">    &lt;p&gt;&#123;&#123; foo &#125;&#125;&lt;/p&gt;</span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line">&#123;% <span class="keyword">for</span> foo <span class="keyword">in</span> d.items %&#125;</span><br><span class="line">    &lt;p&gt;&#123;&#123; foo &#125;&#125;&lt;/p&gt;</span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># with起别名</span></span><br><span class="line">&#123;% <span class="keyword">with</span> d.hobby<span class="number">.3</span>.info <span class="keyword">as</span> nb  %&#125;</span><br><span class="line">    &lt;p&gt;&#123;&#123; nb &#125;&#125;&lt;/p&gt;</span><br><span class="line">    在<span class="keyword">with</span>语法内就可以通过<span class="keyword">as</span>后面的别名快速的使用到前面非常复杂获取数据的方式</span><br><span class="line">    &lt;p&gt;&#123;&#123; d.hobby.3.info &#125;&#125;&lt;/p&gt;</span><br><span class="line">&#123;% endwith %&#125;</span><br></pre></td></tr></table></figure>

<h3 id="自定义过滤器、标签、inclusion-tag"><a href="#自定义过滤器、标签、inclusion-tag" class="headerlink" title="自定义过滤器、标签、inclusion_tag"></a>自定义过滤器、标签、inclusion_tag</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">先三步走</span></span><br><span class="line"><span class="string">	1.在应用下创建一个名字”必须“叫templatetags文件夹</span></span><br><span class="line"><span class="string">	2.在该文件夹内创建“任意”名称的py文件 eg:mytag.py</span></span><br><span class="line"><span class="string">	3.在该py文件内"必须"先书写下面两句话(单词一个都不能错)</span></span><br><span class="line"><span class="string">		from django import template</span></span><br><span class="line"><span class="string">		</span></span><br><span class="line"><span class="string">		register = template.Library()</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 自定义过滤器</span></span><br><span class="line"><span class="meta">@register.filter(name='baby')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_sum</span><span class="params">(v1, v2)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> v1 + v2</span><br><span class="line"><span class="comment"># 使用</span></span><br><span class="line">&#123;% load mytag %&#125;</span><br><span class="line">&lt;p&gt;&#123;&#123; n|baby:666 &#125;&#125;&lt;/p&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 自定义标签(参数可以有多个)			类似于自定义函数</span></span><br><span class="line"><span class="meta">@register.simple_tag(name='plus')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(a,b,c,d)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'%s-%s-%s-%s'</span>%(a,b,c,d)</span><br><span class="line"><span class="comment"># 使用</span></span><br><span class="line">标签多个参数彼此之间空格隔开</span><br><span class="line">&lt;p&gt;&#123;% plus 'jason' 123 123 123 %&#125;&lt;/p&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 自定义inclusion_tag</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">内部原理</span></span><br><span class="line"><span class="string">	先定义一个方法 </span></span><br><span class="line"><span class="string">	在页面上调用该方法 并且可以传值</span></span><br><span class="line"><span class="string">	该方法会生成一些数据然后传递给一个html页面</span></span><br><span class="line"><span class="string">	之后将渲染好的结果放到调用的位置</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="meta">@register.inclusion_tag('left_menu.html')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">left</span><span class="params">(n)</span>:</span></span><br><span class="line">    data = [<span class="string">'第&#123;&#125;项'</span>.format(i) <span class="keyword">for</span> i <span class="keyword">in</span> range(n)]</span><br><span class="line">    <span class="comment"># 第一种</span></span><br><span class="line">    <span class="comment"># return &#123;'data':data&#125;  # 将data传递给left_menu.html</span></span><br><span class="line">    <span class="comment"># 第二种</span></span><br><span class="line">    <span class="keyword">return</span> locals()  <span class="comment"># 将data传递给left_menu.html</span></span><br><span class="line">  </span><br><span class="line">&#123;% left <span class="number">5</span> %&#125;</span><br><span class="line"><span class="comment"># 总结:当html页面某一个地方的页面需要传参数才能够动态的渲染出来，并且在多个页面上都需要使用到该局部 那么就考虑将该局部页面做成inclusion_tag形式</span></span><br><span class="line">(在讲bbs的时候会使用到)</span><br></pre></td></tr></table></figure>

<h3 id="模版的继承"><a href="#模版的继承" class="headerlink" title="模版的继承"></a>模版的继承</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">你们有没有见过一些网站</span></span><br><span class="line"><span class="string">	这些网站页面整体都大差不差 只是某一些局部在做变化	</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment"># 模版的继承 你自己先选好一个你要想继承的模版页面</span></span><br><span class="line">&#123;% extends <span class="string">'home.html'</span> %&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 继承了之后子页面跟模版页面长的是一模一样的 你需要在模版页面上提前划定可以被修改的区域</span></span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line">	模版内容</span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 子页面就可以声明想要修改哪块划定了的区域</span></span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line">	子页面内容	</span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 一般情况下模版页面上应该至少有三块可以被修改的区域</span></span><br><span class="line">	<span class="number">1.</span>css区域</span><br><span class="line">  <span class="number">2.</span>html区域</span><br><span class="line">  <span class="number">3.j</span>s区域</span><br><span class="line">  &#123;% block css %&#125;</span><br><span class="line"></span><br><span class="line">	&#123;% endblock %&#125;</span><br><span class="line">  </span><br><span class="line">  &#123;% block content %&#125;</span><br><span class="line"></span><br><span class="line">	&#123;% endblock %&#125;</span><br><span class="line">  </span><br><span class="line">  &#123;% block js %&#125;</span><br><span class="line"></span><br><span class="line">	&#123;% endblock %&#125;</span><br><span class="line">  <span class="comment"># 每一个子页面就都可以有自己独有的css代码 html代码 js代码</span></span><br><span class="line">  </span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">一般情况下 模版的页面上划定的区域越多 那么该模版的扩展性就越高</span></span><br><span class="line"><span class="string">但是如果太多 那还不如自己直接写</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<h3 id="模版的导入"><a href="#模版的导入" class="headerlink" title="模版的导入"></a>模版的导入</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">将页面的某一个局部当成模块的形式</span></span><br><span class="line"><span class="string">哪个地方需要就可以直接导入使用即可</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">&#123;% include <span class="string">'wasai.html'</span> %&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>django框架</tag>
      </tags>
  </entry>
  <entry>
    <title>[视图层]</title>
    <url>/2020/02/12/%E8%A7%86%E5%9B%BE%E5%B1%82/</url>
    <content><![CDATA[<h3 id="三板斧"><a href="#三板斧" class="headerlink" title="三板斧"></a>三板斧</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">HttpResponse</span></span><br><span class="line"><span class="string">	返回字符串类型</span></span><br><span class="line"><span class="string">render</span></span><br><span class="line"><span class="string">	返回html页面 并且在返回给浏览器之前还可以给html文件传值</span></span><br><span class="line"><span class="string">redirect</span></span><br><span class="line"><span class="string">	重定向</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment"># 视图函数必须要返回一个HttpResponse对象  正确   研究三者的源码即可得处结论</span></span><br><span class="line">The view app01.views.index didn<span class="string">'t return an HttpResponse object. It returned None instead.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># render简单内部原理</span></span><br><span class="line"><span class="string">	from django.template import Template,Context</span></span><br><span class="line">    res = Template('&lt;h1&gt;&#123;&#123; user &#125;&#125;&lt;/h1&gt;')</span><br><span class="line">    con = Context(&#123;<span class="string">'user'</span>:&#123;<span class="string">'username'</span>:<span class="string">'jason'</span>,<span class="string">'password'</span>:<span class="number">123</span>&#125;&#125;)</span><br><span class="line">    ret = res.render(con)</span><br><span class="line">    print(ret)</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(ret)</span><br></pre></td></tr></table></figure>

<h3 id="JsonResponse对象"><a href="#JsonResponse对象" class="headerlink" title="JsonResponse对象"></a>JsonResponse对象</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">json格式的数据有什么用？</span></span><br><span class="line"><span class="string">	前后端数据交互需要使用到json作为过渡 实现跨语言传输数据</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">前端序列化</span></span><br><span class="line"><span class="string">	JSON.stringify()					json.dumps()</span></span><br><span class="line"><span class="string">	JSON.parse()						json.loads()</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> JsonResponse</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ab_json</span><span class="params">(request)</span>:</span></span><br><span class="line">    user_dict = &#123;<span class="string">'username'</span>:<span class="string">'jason好帅哦,我好喜欢!'</span>,<span class="string">'password'</span>:<span class="string">'123'</span>,<span class="string">'hobby'</span>:<span class="string">'girl'</span>&#125;</span><br><span class="line"></span><br><span class="line">    l = [<span class="number">111</span>,<span class="number">222</span>,<span class="number">333</span>,<span class="number">444</span>,<span class="number">555</span>]</span><br><span class="line">    <span class="comment"># 先转成json格式字符串</span></span><br><span class="line">    <span class="comment"># json_str = json.dumps(user_dict,ensure_ascii=False)</span></span><br><span class="line">    <span class="comment"># 将该字符串返回</span></span><br><span class="line">    <span class="comment"># return HttpResponse(json_str)</span></span><br><span class="line">    <span class="comment"># 读源码掌握用法</span></span><br><span class="line">    <span class="comment"># return JsonResponse(user_dict,json_dumps_params=&#123;'ensure_ascii':False&#125;)</span></span><br><span class="line">    <span class="comment"># In order to allow non-dict objects to be serialized set the safe parameter to False.</span></span><br><span class="line">    <span class="comment"># return JsonResponse(l,safe=False)  </span></span><br><span class="line">    <span class="comment"># 默认只能序列化字典 序列化其他需要加safe参数</span></span><br></pre></td></tr></table></figure>

<h3 id="form表单上传文件及后端如何操作"><a href="#form表单上传文件及后端如何操作" class="headerlink" title="form表单上传文件及后端如何操作"></a>form表单上传文件及后端如何操作</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">form表单上传文件类型的数据</span></span><br><span class="line"><span class="string">	1.method必须指定成post</span></span><br><span class="line"><span class="string">	2.enctype必须换成formdata</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ab_file</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'POST'</span>:</span><br><span class="line">        <span class="comment"># print(request.POST)  # 只能获取普通的键值对数据 文件不行</span></span><br><span class="line">        print(request.FILES)  <span class="comment"># 获取文件数据</span></span><br><span class="line">        <span class="comment"># &lt;MultiValueDict: &#123;'file': [&lt;InMemoryUploadedFile: u=1288812541,1979816195&amp;fm=26&amp;gp=0.jpg (image/jpeg)&gt;]&#125;&gt;</span></span><br><span class="line">        file_obj = request.FILES.get(<span class="string">'file'</span>)  <span class="comment"># 文件对象</span></span><br><span class="line">        print(file_obj.name)</span><br><span class="line">        <span class="keyword">with</span> open(file_obj.name,<span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            <span class="keyword">for</span> line <span class="keyword">in</span> file_obj.chunks():  <span class="comment"># 推荐加上chunks方法 其实跟不加是一样的都是一行行的读取</span></span><br><span class="line">                f.write(line)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">'form.html'</span>)</span><br></pre></td></tr></table></figure>

<h3 id="request对象方法"><a href="#request对象方法" class="headerlink" title="request对象方法"></a>request对象方法</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">request.method</span></span><br><span class="line"><span class="string">request.POST</span></span><br><span class="line"><span class="string">request.GET</span></span><br><span class="line"><span class="string">request.FILES</span></span><br><span class="line"><span class="string">request.body  # 原生的浏览器发过来的二进制数据  后面详细的讲</span></span><br><span class="line"><span class="string">request.path </span></span><br><span class="line"><span class="string">request.path_info</span></span><br><span class="line"><span class="string">request.get_full_path()  能过获取完整的url及问号后面的参数 </span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">    print(request.path)  <span class="comment"># /app01/ab_file/</span></span><br><span class="line">    print(request.path_info)  <span class="comment"># /app01/ab_file/</span></span><br><span class="line">    print(request.get_full_path())  <span class="comment"># /app01/ab_file/?username=jason</span></span><br></pre></td></tr></table></figure>

<h3 id="FBV与CBV"><a href="#FBV与CBV" class="headerlink" title="FBV与CBV"></a>FBV与CBV</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 视图函数既可以是函数也可以是类</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></span><br><span class="line">  <span class="keyword">return</span> HttpResponse(<span class="string">'index'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># CBV</span></span><br><span class="line">    <span class="comment"># CBV路由</span></span><br><span class="line">    url(<span class="string">r'^login/'</span>,views.MyLogin.as_view())</span><br><span class="line"></span><br><span class="line">		<span class="keyword">from</span> django.views <span class="keyword">import</span> View</span><br><span class="line"></span><br><span class="line">		<span class="class"><span class="keyword">class</span> <span class="title">MyLogin</span><span class="params">(View)</span>:</span></span><br><span class="line">    	<span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self,request)</span>:</span></span><br><span class="line">        	<span class="keyword">return</span> render(request,<span class="string">'form.html'</span>)</span><br><span class="line"></span><br><span class="line">    	<span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self,request)</span>:</span></span><br><span class="line">        	<span class="keyword">return</span> HttpResponse(<span class="string">'post方法'</span>)</span><br><span class="line">      </span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">FBV和CBV各有千秋</span></span><br><span class="line"><span class="string">CBV特点</span></span><br><span class="line"><span class="string">	能够直接根据请求方式的不同直接匹配到对应的方法执行</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">	内部到底是怎么实现的？</span></span><br><span class="line"><span class="string">		CBV内部源码(******)</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<h3 id="CBV源码剖析"><a href="#CBV源码剖析" class="headerlink" title="CBV源码剖析"></a>CBV源码剖析</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 你自己不要修改源码 除了bug很难找</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 突破口在urls.py</span></span><br><span class="line">url(<span class="string">r'^login/'</span>,views.MyLogin.as_view())</span><br><span class="line"><span class="comment"># url(r'^login/',views.view)  FBV一模一样</span></span><br><span class="line"><span class="comment"># CBV与FBV在路由匹配上本质是一样的 都是路由 对应 函数内存地址</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">函数名/方法名 加括号执行优先级最高</span></span><br><span class="line"><span class="string">猜测</span></span><br><span class="line"><span class="string">    as_view()</span></span><br><span class="line"><span class="string">        要么是被@staicmethod修饰的静态方法</span></span><br><span class="line"><span class="string">        要么是被@classmethod修饰的类方法  正确</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">    @classonlymethod</span></span><br><span class="line"><span class="string">    def as_view(cls, **initkwargs):</span></span><br><span class="line"><span class="string">        pass</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @classonlymethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">as_view</span><span class="params">(cls, **initkwargs)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        cls就是我们自己写的类   MyCBV</span></span><br><span class="line"><span class="string">        Main entry point for a request-response process.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">view</span><span class="params">(request, *args, **kwargs)</span>:</span></span><br><span class="line">            self = cls(**initkwargs)  <span class="comment"># cls是我们自己写的类</span></span><br><span class="line">            <span class="comment"># self = MyLogin(**initkwargs)  产生一个我们自己写的类的对象</span></span><br><span class="line">            <span class="keyword">return</span> self.dispatch(request, *args, **kwargs)</span><br><span class="line">            <span class="string">"""</span></span><br><span class="line"><span class="string">            以后你们会经常需要看源码 但是在看python源码的时候 一定要时刻提醒自己面向对象属性方法查找顺序</span></span><br><span class="line"><span class="string">                先从对象自己找</span></span><br><span class="line"><span class="string">                再去产生对象的类里面找</span></span><br><span class="line"><span class="string">                之后再去父类找</span></span><br><span class="line"><span class="string">                ...</span></span><br><span class="line"><span class="string">            总结:看源码只要看到了self点一个东西 一定要问你自己当前这个self到底是谁</span></span><br><span class="line"><span class="string">            """</span></span><br><span class="line">        <span class="keyword">return</span> view</span><br><span class="line">      </span><br><span class="line">		<span class="comment"># CBV的精髓</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dispatch</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="comment"># 获取当前请求的小写格式 然后比对当前请求方式是否合法</span></span><br><span class="line">        <span class="comment"># get请求为例</span></span><br><span class="line">        <span class="comment"># post请求</span></span><br><span class="line">        <span class="keyword">if</span> request.method.lower() <span class="keyword">in</span> self.http_method_names:</span><br><span class="line">            handler = getattr(self, request.method.lower(), 		  						self.http_method_not_allowed)</span><br><span class="line">            <span class="string">"""</span></span><br><span class="line"><span class="string">            反射:通过字符串来操作对象的属性或者方法</span></span><br><span class="line"><span class="string">                handler = getattr(自己写的类产生的对象,'get',当找不到get属性或者方法的时候					就会用第三个参数)</span></span><br><span class="line"><span class="string">                handler = 我们自己写的类里面的get方法</span></span><br><span class="line"><span class="string">            """</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            handler = self.http_method_not_allowed</span><br><span class="line">        	<span class="keyword">return</span> handler(request, *args, **kwargs)</span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        自动调用get方法</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 要求掌握到不看源码也能够描述出CBV的内部执行流程(******)</span></span><br></pre></td></tr></table></figure>

<h3 id="CBV如何添加装饰器"><a href="#CBV如何添加装饰器" class="headerlink" title="CBV如何添加装饰器"></a>CBV如何添加装饰器</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.views <span class="keyword">import</span> View</span><br><span class="line"><span class="keyword">from</span> django.utils.decorators <span class="keyword">import</span> method_decorator</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">CBV中django不建议你直接给类的方法加装饰器</span></span><br><span class="line"><span class="string">无论该装饰器能都正常给你 都不建议直接加</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># @method_decorator(login_auth,name='get')  # 方式2(可以添加多个针对不同的方法加不同的装饰器)</span></span><br><span class="line"><span class="comment"># @method_decorator(login_auth,name='post')</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyLogin</span><span class="params">(View)</span>:</span></span><br><span class="line"><span class="meta">    @method_decorator(login_auth)  # 方式3:它会直接作用于当前类里面的所有的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dispatch</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> super().dispatch(request,*args,**kwargs)</span><br><span class="line">    <span class="comment"># @method_decorator(login_auth)  # 方式1:指名道姓</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self,request)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">"get请求"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self,request)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">'post请求'</span>)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>django框架</tag>
      </tags>
  </entry>
  <entry>
    <title>[BBS博客表创建与注册登录功能]</title>
    <url>/2020/02/12/BBS%E5%8D%9A%E5%AE%A2%E8%A1%A8%E5%88%9B%E5%BB%BA%E4%B8%8E%E6%B3%A8%E5%86%8C%E7%99%BB%E5%BD%95%E5%8A%9F%E8%83%BD/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>开源项目</category>
      </categories>
      <tags>
        <tag>BBS博客</tag>
      </tags>
  </entry>
  <entry>
    <title>[数据编辑、orm表关系和路由层]</title>
    <url>/2020/02/11/%E6%95%B0%E6%8D%AE%E7%BC%96%E8%BE%91%E3%80%81orm%E8%A1%A8%E5%85%B3%E7%B3%BB%E5%92%8C%E8%B7%AF%E7%94%B1%E5%B1%82/</url>
    <content><![CDATA[<h3 id="数据的查，改，删"><a href="#数据的查，改，删" class="headerlink" title="数据的查，改，删"></a>数据的查，改，删</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 先讲数据库中的数据全部展示到前端 然后给每一个数据两个按钮 一个编辑一个删除</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">userlist</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="comment"># 查询出用户表里面所有的数据</span></span><br><span class="line">    <span class="comment"># 方式1</span></span><br><span class="line">    <span class="comment"># data = models.User.objects.filter()</span></span><br><span class="line">    <span class="comment"># print(data)</span></span><br><span class="line">    <span class="comment"># 方式2</span></span><br><span class="line">    user_queryset = models.User.objects.all()</span><br><span class="line">    <span class="comment"># return render(request,'userlist.html',&#123;'user_queryset':user_queryset&#125;)</span></span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">'userlist.html'</span>,locals())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编辑功能</span></span><br><span class="line">	<span class="comment"># 点击编辑按钮朝后端发送编辑数据的请求</span></span><br><span class="line">  <span class="string">"""</span></span><br><span class="line"><span class="string">  如何告诉后端用户想要编辑哪条数据?</span></span><br><span class="line"><span class="string">  	将编辑按钮所在的那一行数据的主键值发送给后端</span></span><br><span class="line"><span class="string">  	利用url问号后面携带参数的方式</span></span><br><span class="line"><span class="string">  	</span></span><br><span class="line"><span class="string">  	&#123;% for user_obj in user_queryset %&#125;</span></span><br><span class="line"><span class="string">                        &lt;tr&gt;</span></span><br><span class="line"><span class="string">                            &lt;td&gt;&#123;&#123; user_obj.id &#125;&#125;&lt;/td&gt;</span></span><br><span class="line"><span class="string">                            &lt;td&gt;&#123;&#123; user_obj.username &#125;&#125;&lt;/td&gt;</span></span><br><span class="line"><span class="string">                            &lt;td&gt;&#123;&#123; user_obj.password &#125;&#125;&lt;/td&gt;</span></span><br><span class="line"><span class="string">                            &lt;td&gt;</span></span><br><span class="line"><span class="string">                                &lt;a href="/edit_user/?user_id=&#123;&#123; user_obj.id &#125;&#125;" class="btn btn-primary btn-xs"&gt;编辑&lt;/a&gt;</span></span><br><span class="line"><span class="string">                                &lt;a href="" class="btn btn-danger btn-xs"&gt;删除&lt;/a&gt;</span></span><br><span class="line"><span class="string">                            &lt;/td&gt;</span></span><br><span class="line"><span class="string">                        &lt;/tr&gt;</span></span><br><span class="line"><span class="string">                    &#123;% endfor %&#125;</span></span><br><span class="line"><span class="string">  """</span></span><br><span class="line">  <span class="comment"># 后端查询出用户想要编辑的数据对象 展示到前端页面供用户查看和编辑</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">edit_user</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="comment"># 获取url问号后面的参数</span></span><br><span class="line">    edit_id = request.GET.get(<span class="string">'user_id'</span>)</span><br><span class="line">    <span class="comment"># 查询当前用户想要编辑的数据对象</span></span><br><span class="line">    edit_obj = models.User.objects.filter(id=edit_id).first()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">"POST"</span>:</span><br><span class="line">        username = request.POST.get(<span class="string">'username'</span>)</span><br><span class="line">        password = request.POST.get(<span class="string">'password'</span>)</span><br><span class="line">        <span class="comment"># 去数据库中修改对应的数据内容</span></span><br><span class="line">        <span class="comment"># 修改数据方式1</span></span><br><span class="line">        <span class="comment"># models.User.objects.filter(id=edit_id).update(username=username,password=password)</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">            将filter查询出来的列表中所有的对象全部更新            批量更新操作</span></span><br><span class="line"><span class="string">            只修改被修改的字段</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 修改数据方式2</span></span><br><span class="line">        edit_obj.username = username</span><br><span class="line">        edit_obj.password= password</span><br><span class="line">        edit_obj.save()</span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">            上述方法当字段特别多的时候效率会非常的低</span></span><br><span class="line"><span class="string">            从头到尾将数据的所有字段全部更新一边 无论该字段是否被修改</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 跳转到数据的展示页面</span></span><br><span class="line">        <span class="keyword">return</span> redirect(<span class="string">'/userlist/'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将数据对象展示到页面上</span></span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">'edit_user.html'</span>,locals())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除功能</span></span><br><span class="line">	<span class="string">"""</span></span><br><span class="line"><span class="string">	跟编辑功能逻辑类似</span></span><br><span class="line"><span class="string">	def delete_user(request):</span></span><br><span class="line"><span class="string">    # 获取用户想要删除的数据id值</span></span><br><span class="line"><span class="string">    delete_id = request.GET.get('user_id')</span></span><br><span class="line"><span class="string">    # 直接去数据库中找到对应的数据删除即可</span></span><br><span class="line"><span class="string">    models.User.objects.filter(id=delete_id).delete()</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">        批量删除</span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    # 跳转到展示页面</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    return redirect('/userlist/')	</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">	"""</span></span><br><span class="line"><span class="comment"># 真正的删除功能应该需要二次确认 我们这里先不做后面会讲</span></span><br><span class="line"><span class="comment"># 删除数据内部其实并不是真正的删除 我们会给数据添加一个标识字段用来表示当前数据是否被删除了，如果数据被删了仅仅只是讲字段修改一个状态</span></span><br><span class="line">	username password	is_delete</span><br><span class="line">  jason			<span class="number">123</span>				<span class="number">0</span></span><br><span class="line">  egon			<span class="number">123</span>				<span class="number">1</span></span><br></pre></td></tr></table></figure>

<h3 id="django-orm中如何创建表关系"><a href="#django-orm中如何创建表关系" class="headerlink" title="django orm中如何创建表关系"></a>django orm中如何创建表关系</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">表与表之间的关系</span></span><br><span class="line"><span class="string">	一对多</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">	多对多</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">	一对一</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">	没有关系</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">判断表关系的方法:换位思考</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">图书表</span><br><span class="line"></span><br><span class="line">出版社表</span><br><span class="line"></span><br><span class="line">作者表</span><br><span class="line"></span><br><span class="line">作者详情表</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">图书和出版社是一对多的关系 外键字段建在多的那一方 book</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">图书和作者是多对多的关系 需要创建第三张表来专门存储</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">作者与作者详情表是一对一</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your models here.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建表关系  先将基表创建出来 然后再添加外键字段</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    title = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    price = models.DecimalField(max_digits=<span class="number">8</span>,decimal_places=<span class="number">2</span>)</span><br><span class="line">    <span class="comment"># 总共八位 小数点后面占两位</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    图书和出版社是一对多 并且书是多的一方 所以外键字段放在书表里面</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    publish = models.ForeignKey(to=<span class="string">'Publish'</span>)  <span class="comment"># 默认就是与出版社表的主键字段做外键关联</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    如果字段对应的是ForeignKey 那么会orm会自动在字段的后面加_id</span></span><br><span class="line"><span class="string">    如果你自作聪明的加了_id那么orm还是会在后面继续加_id</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    后面在定义ForeignKey的时候就不要自己加_id</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    图书和作者是多对多的关系 外键字段建在任意一方均可 但是推荐你建在查询频率较高的一方</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    authors = models.ManyToManyField(to=<span class="string">'Author'</span>)</span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    authors是一个虚拟字段 主要是用来告诉orm 书籍表和作者表是多对多关系</span></span><br><span class="line"><span class="string">    让orm自动帮你创建第三张关系表</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Publish</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    addr = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Author</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    age = models.IntegerField()</span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    作者与作者详情是一对一的关系 外键字段建在任意一方都可以 但是推荐你建在查询频率较高的表中</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    author_detail = models.OneToOneField(to=<span class="string">'AuthorDetail'</span>)</span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    OneToOneField也会自动给字段加_id后缀</span></span><br><span class="line"><span class="string">    所以你也不要自作聪明的自己加_id</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AuthorDetail</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    phone = models.BigIntegerField()  <span class="comment"># 或者直接字符类型</span></span><br><span class="line">    addr = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">	orm中如何定义三种关系</span></span><br><span class="line"><span class="string">		publish = models.ForeignKey(to='Publish')  # 默认就是与出版社表的主键字段做外键关联</span></span><br><span class="line"><span class="string">		</span></span><br><span class="line"><span class="string">		authors = models.ManyToManyField(to='Author')</span></span><br><span class="line"><span class="string">		</span></span><br><span class="line"><span class="string">		author_detail = models.OneToOneField(to='AuthorDetail')</span></span><br><span class="line"><span class="string">		</span></span><br><span class="line"><span class="string">		</span></span><br><span class="line"><span class="string">		ForeignKey</span></span><br><span class="line"><span class="string">		OneToOneField</span></span><br><span class="line"><span class="string">			会自动在字段后面加_id后缀</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在django1.X版本中外键默认都是级联更新删除的</span></span><br><span class="line"><span class="comment"># 多对多的表关系可以有好几种创建方式 这里暂且先介绍一种</span></span><br><span class="line"><span class="comment"># 针对外键字段里面的其他参数 暂时不要考虑 如果感兴趣自己可以百度试试看</span></span><br></pre></td></tr></table></figure>

<h3 id="django请求生命周期流程图-必会"><a href="#django请求生命周期流程图-必会" class="headerlink" title="django请求生命周期流程图(必会)"></a>django请求生命周期流程图(必会)</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 每个人都要会画 这个图是你们后期复习django最好的一个梳理方式</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 扩展知识点</span></span><br><span class="line">	<span class="string">"""</span></span><br><span class="line"><span class="string">	缓存数据库</span></span><br><span class="line"><span class="string">		提前已经将你想要的数据准备好了 你来直接拿就可以</span></span><br><span class="line"><span class="string">		提高效率和响应时间</span></span><br><span class="line"><span class="string">		</span></span><br><span class="line"><span class="string">	当你在修改你的数据的时候 你会发现数据并不是立刻修改完成的</span></span><br><span class="line"><span class="string">	而是需要经过一段时间才会修改</span></span><br><span class="line"><span class="string">		博客园</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">	了解即可</span></span><br><span class="line"><span class="string">	"""</span></span><br></pre></td></tr></table></figure>

<h1 id="路由层"><a href="#路由层" class="headerlink" title="路由层"></a>路由层</h1><h3 id="路由匹配"><a href="#路由匹配" class="headerlink" title="路由匹配"></a>路由匹配</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 路由匹配</span></span><br><span class="line">url(<span class="string">r'test'</span>,views.test),</span><br><span class="line">url(<span class="string">r'testadd'</span>,views.testadd)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">url方法第一个参数是正则表达式</span></span><br><span class="line"><span class="string">	只要第一个参数正则表达式能够匹配到内容 那么就会立刻停止往下匹配</span></span><br><span class="line"><span class="string">	直接执行对应的视图函数</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">你在输入url的时候会默认加斜杠</span></span><br><span class="line"><span class="string">	django内部帮你做到重定向</span></span><br><span class="line"><span class="string">		一次匹配不行</span></span><br><span class="line"><span class="string">		url后面加斜杠再来一次</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment"># 取消自动加斜杠</span></span><br><span class="line">APPEND_SLASH = <span class="literal">False</span>/<span class="literal">True</span>	<span class="comment"># 默认是自动加斜杠的</span></span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r'^admin/'</span>, admin.site.urls),</span><br><span class="line">    <span class="comment"># 首页</span></span><br><span class="line">    url(<span class="string">r'^$'</span>,views.home),</span><br><span class="line">    <span class="comment"># 路由匹配</span></span><br><span class="line">    url(<span class="string">r'^test/$'</span>,views.test),</span><br><span class="line">    url(<span class="string">r'^testadd/$'</span>,views.testadd),</span><br><span class="line">    <span class="comment"># 尾页(了解)</span></span><br><span class="line">    url(<span class="string">r''</span>,views.error),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h3 id="无名分组"><a href="#无名分组" class="headerlink" title="无名分组"></a>无名分组</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">分组:就是给某一段正则表达式用小括号扩起来</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">url(<span class="string">r'^test/(\d+)/'</span>,views.test)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(request,xx)</span>:</span></span><br><span class="line">    print(xx)</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">'test'</span>)</span><br><span class="line">  </span><br><span class="line"><span class="comment"># 无名分组就是将括号内正则表达式匹配到的内容当作位置参数传递给后面的视图函数</span></span><br></pre></td></tr></table></figure>

<h3 id="有名分组"><a href="#有名分组" class="headerlink" title="有名分组"></a>有名分组</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">可以给正则表达式起一个别名</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">url(<span class="string">r'^testadd/(?P&lt;year&gt;\d+)'</span>,views.testadd)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">testadd</span><span class="params">(request,year)</span>:</span></span><br><span class="line">    print(year)</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">'testadd'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 有名分组就是将括号内正则表达式匹配到的内容当作关键字参数传递给后面的视图函数</span></span><br></pre></td></tr></table></figure>

<h3 id="无名有名是否可以混合使用"><a href="#无名有名是否可以混合使用" class="headerlink" title="无名有名是否可以混合使用"></a>无名有名是否可以混合使用</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">嘻嘻 不能混用</span></span><br><span class="line"><span class="string">但是同一个分组可以使用N多次</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 单个的分组可以使用多次</span></span><br><span class="line">url(<span class="string">r'^index/(\d+)/(\d+)/(\d+)/'</span>,views.index),</span><br><span class="line">url(<span class="string">r'^index/(?P&lt;year&gt;\d+)/(?P&lt;age&gt;\d+)/(?P&lt;month&gt;\d+)/'</span>,views.index),</span><br></pre></td></tr></table></figure>

<h3 id="反向解析"><a href="#反向解析" class="headerlink" title="反向解析"></a>反向解析</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 通过一些方法得到一个结果 该结果可以直接访问对应的url触发视图函数</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 先给路由与视图函数起一个别名</span></span><br><span class="line">	url(<span class="string">r'^func_kkk/'</span>,views.func,name=<span class="string">'ooo'</span>)</span><br><span class="line"><span class="comment"># 反向解析</span></span><br><span class="line">	<span class="comment"># 后端反向解析</span></span><br><span class="line">  	<span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render,HttpResponse,redirect,reverse</span><br><span class="line">  	reverse(<span class="string">'ooo'</span>)</span><br><span class="line">  <span class="comment"># 前端反向解析</span></span><br><span class="line">  	&lt;a href="&#123;% url 'ooo' %&#125;"&gt;111&lt;/a&gt;</span><br></pre></td></tr></table></figure>

<h3 id="无名有名分组反向解析"><a href="#无名有名分组反向解析" class="headerlink" title="无名有名分组反向解析"></a>无名有名分组反向解析</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 无名分组反向解析</span></span><br><span class="line">	url(<span class="string">r'^index/(\d+)/'</span>,views.index,name=<span class="string">'xxx'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 前端</span></span><br><span class="line">	&#123;% url <span class="string">'xxx'</span> <span class="number">123</span> %&#125;</span><br><span class="line"><span class="comment"># 后端</span></span><br><span class="line">	reverse(<span class="string">'xxx'</span>, args=(<span class="number">1</span>,))</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">这个数字写代码的时候应该放什么</span></span><br><span class="line"><span class="string">	数字一般情况下放的是数据的主键值  数据的编辑和删除</span></span><br><span class="line"><span class="string">	url(r'^edit/(\d+)/',views.edit,name='xxx')</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">	def edit(request,edit_id):</span></span><br><span class="line"><span class="string">		reverse('xxx',args=(edit_id,))</span></span><br><span class="line"><span class="string">		</span></span><br><span class="line"><span class="string">	&#123;%for user_obj in user_queryset%&#125;</span></span><br><span class="line"><span class="string">		&lt;a href="&#123;% url 'xxx' user_obj.id %&#125;"&gt;编辑&lt;/a&gt;</span></span><br><span class="line"><span class="string">	&#123;%endfor%&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">今天每个人都必须完成的作业(*******)</span></span><br><span class="line"><span class="string">	利用无名有名 反向解析 完成数据的增删改查</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 有名分组反向解析</span></span><br><span class="line">   url(<span class="string">r'^func/(?P&lt;year&gt;\d+)/'</span>,views.func,name=<span class="string">'ooo'</span>)</span><br><span class="line"><span class="comment"># 前端</span></span><br><span class="line">	&lt;a href="&#123;% url 'ooo' year=123 %&#125;"&gt;111&lt;/a&gt;  了解</span><br><span class="line">	&lt;a href="&#123;% url 'ooo' 123 %&#125;"&gt;222&lt;/a&gt;  		记忆</span><br><span class="line"></span><br><span class="line"><span class="comment"># 后端	</span></span><br><span class="line">	<span class="comment"># 有名分组反向解析 写法1  了解</span></span><br><span class="line">    print(reverse(<span class="string">'ooo'</span>,kwargs=&#123;<span class="string">'year'</span>:<span class="number">123</span>&#125;))</span><br><span class="line">    <span class="comment"># 简便的写法  减少你的脑容量消耗 记跟无名一样的操作即可</span></span><br><span class="line">    print(reverse(<span class="string">'ooo'</span>,args=(<span class="number">111</span>,)))</span><br></pre></td></tr></table></figure>

<h3 id="路由分发"><a href="#路由分发" class="headerlink" title="路由分发"></a>路由分发</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">django的每一个应用都可以有自己的templates文件夹 urls.py static文件夹</span></span><br><span class="line"><span class="string">正是基于上述的特点 django能够非常好的做到分组开发(每个人只写自己的app)</span></span><br><span class="line"><span class="string">作为组长 只需要将手下书写的app全部拷贝到一个新的django项目中 然后在配置文件里面注册所有的app再利用路由分发的特点将所有的app整合起来</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">当一个django项目中的url特别多的时候 总路由urls.py代码非常冗余不好维护</span></span><br><span class="line"><span class="string">这个时候也可以利用路由分发来减轻总路由的压力</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">利用路由分发之后 总路由不再干路由与视图函数的直接对应关系</span></span><br><span class="line"><span class="string">而是做一个分发处理</span></span><br><span class="line"><span class="string">	识别当前url是属于哪个应用下的 直接分发给对应的应用去处理</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 总路由</span></span><br><span class="line"><span class="keyword">from</span> app01 <span class="keyword">import</span> urls <span class="keyword">as</span> app01_urls</span><br><span class="line"><span class="keyword">from</span> app02 <span class="keyword">import</span> urls <span class="keyword">as</span> app02_urls</span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r'^admin/'</span>, admin.site.urls),</span><br><span class="line">    <span class="comment"># 1.路由分发</span></span><br><span class="line">    url(<span class="string">r'^app01/'</span>,include(app01_urls)),  <span class="comment"># 只要url前缀是app01开头 全部交给app01处理</span></span><br><span class="line">    url(<span class="string">r'^app02/'</span>,include(app02_urls))   <span class="comment"># 只要url前缀是app02开头 全部交给app02处理</span></span><br><span class="line">  </span><br><span class="line">    <span class="comment"># 2.终极写法  推荐使用</span></span><br><span class="line">    url(<span class="string">r'^app01/'</span>,include(<span class="string">'app01.urls'</span>)),</span><br><span class="line">    url(<span class="string">r'^app02/'</span>,include(<span class="string">'app02.urls'</span>))</span><br><span class="line">    <span class="comment"># 注意事项:总路由里面的url千万不能加$结尾</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 子路由</span></span><br><span class="line">	<span class="comment"># app01 urls.py</span></span><br><span class="line">  <span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url</span><br><span class="line">  <span class="keyword">from</span> app01 <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">  urlpatterns = [</span><br><span class="line">      url(<span class="string">r'^reg/'</span>,views.reg)</span><br><span class="line">  ]</span><br><span class="line">  <span class="comment"># app02 urls.py</span></span><br><span class="line">  <span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url</span><br><span class="line">  <span class="keyword">from</span> app02 <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">  urlpatterns = [</span><br><span class="line">      url(<span class="string">r'^reg/'</span>,views.reg)</span><br><span class="line">  ]</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>django框架</tag>
      </tags>
  </entry>
  <entry>
    <title>[静态文件、request对象与链接数据库]</title>
    <url>/2020/02/10/%E9%9D%99%E6%80%81%E6%96%87%E4%BB%B6%E3%80%81request%E5%AF%B9%E8%B1%A1%E4%B8%8E%E9%93%BE%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
    <content><![CDATA[<h3 id="静态文件配置"><a href="#静态文件配置" class="headerlink" title="静态文件配置"></a>静态文件配置</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 登陆功能</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">我们将html文件默认都放在templates文件夹下</span></span><br><span class="line"><span class="string">我们将网站所使用的静态文件默认都放在static文件夹下</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">静态文件</span></span><br><span class="line"><span class="string">	前端已经写好了的 能够直接调用使用的文件</span></span><br><span class="line"><span class="string">		网站写好的js文件</span></span><br><span class="line"><span class="string">		网站写好的css文件</span></span><br><span class="line"><span class="string">		网站用到的图片文件</span></span><br><span class="line"><span class="string">		第三方前端框架</span></span><br><span class="line"><span class="string">		...</span></span><br><span class="line"><span class="string">		拿来就可以直接使用的</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment"># django默认是不会自动帮你创建static文件夹 需要你自己手动创建</span></span><br><span class="line">一般情况下我们在static文件夹内还会做进一步的划分处理</span><br><span class="line">	-static</span><br><span class="line">  	--js</span><br><span class="line">    --css</span><br><span class="line">    --img</span><br><span class="line">    其他第三方文件</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">在浏览器中输入url能够看到对应的资源</span></span><br><span class="line"><span class="string">是因为后端提前开设了该资源的借口</span></span><br><span class="line"><span class="string">如果访问不到资源 说明后端没有开设该资源的借口</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">http://127.0.0.1:8000/static/bootstrap-3.3.7-dist/css/bootstrap.min.css</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 静态文件配置</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">****************************************************************</span></span><br><span class="line"><span class="string">当你在写django项目的时候 可能会出现后端代码修改了但是前端页面没有变化的情况</span></span><br><span class="line"><span class="string">	1.你在同一个端口开了好几个django项目 </span></span><br><span class="line"><span class="string">		一直在跑的其实是第一个django项目</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">	2.浏览器缓存的问题</span></span><br><span class="line"><span class="string">		settings</span></span><br><span class="line"><span class="string">			network</span></span><br><span class="line"><span class="string">				disable cache 勾选上	</span></span><br><span class="line"><span class="string">*****************************************************************</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">STATIC_URL = <span class="string">'/ooo/'</span>  <span class="comment"># 类似于访问静态文件的令牌</span></span><br><span class="line"><span class="string">"""如果你想要访问静态文件 你就必须以static开头"""</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">/static/bootstrap-3.3.7-dist/js/bootstrap.min.js</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">/static/令牌</span></span><br><span class="line"><span class="string">取列表里面从上往下依次查找</span></span><br><span class="line"><span class="string">    bootstrap-3.3.7-dist/js/bootstrap.min.js</span></span><br><span class="line"><span class="string">    都没有才会报错</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment"># 静态文件配置</span></span><br><span class="line">STATICFILES_DIRS = [</span><br><span class="line">    os.path.join(BASE_DIR,<span class="string">'static'</span>),</span><br><span class="line">    os.path.join(BASE_DIR,<span class="string">'static1'</span>),</span><br><span class="line">    os.path.join(BASE_DIR,<span class="string">'static2'</span>),</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 静态文件动态解析</span></span><br><span class="line">    &#123;% load static %&#125;</span><br><span class="line">    &lt;link rel=<span class="string">"stylesheet"</span> href=<span class="string">"&#123;% static 'bootstrap-3.3.7-dist/css/bootstrap.min.css' %&#125;"</span>&gt;</span><br><span class="line">    &lt;script src="&#123;% static 'bootstrap-3.3.7-dist/js/bootstrap.min.js' %&#125;"&gt;&lt;/script&gt;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment"># form表单默认是get请求数据</span></span><br><span class="line">	http://127.0.0.1:8000/login/?username=jason&amp;password=123</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">form表单action参数</span></span><br><span class="line"><span class="string">	1.不写 默认朝当前所在的url提交数据</span></span><br><span class="line"><span class="string">	2.全写 指名道姓</span></span><br><span class="line"><span class="string">	3.只写后缀 /login/</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在前期我们使用django提交post请求的时候 需要取配置文件中注释掉一行代码</span></span><br><span class="line">MIDDLEWARE = [</span><br><span class="line">    <span class="string">'django.middleware.security.SecurityMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.contrib.sessions.middleware.SessionMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.middleware.common.CommonMiddleware'</span>,</span><br><span class="line">    <span class="comment"># 'django.middleware.csrf.CsrfViewMiddleware',</span></span><br><span class="line">    <span class="string">'django.contrib.auth.middleware.AuthenticationMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.contrib.messages.middleware.MessageMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.middleware.clickjacking.XFrameOptionsMiddleware'</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h3 id="request对象方法初识"><a href="#request对象方法初识" class="headerlink" title="request对象方法初识"></a>request对象方法初识</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">request.method <span class="comment"># 返回请求方式 并且是全大写的字符串形式  &lt;class 'str'&gt;</span></span><br><span class="line">request.POST  <span class="comment"># 获取用户post请求提交的普通数据不包含文件</span></span><br><span class="line">request.POST.get()  <span class="comment"># 只获取列表最后一个元素</span></span><br><span class="line">request.POST.getlist()  <span class="comment"># 直接将列表取出</span></span><br><span class="line">request.GET  <span class="comment"># 获取用户提交的get请求数据</span></span><br><span class="line">request.GET.get()  <span class="comment"># 只获取列表最后一个元素</span></span><br><span class="line">request.GET.getlist()  <span class="comment"># 直接将列表取出</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">get请求携带的数据是有大小限制的 大概好像只有4KB左右</span></span><br><span class="line"><span class="string">而post请求则没有限制</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="comment"># 返回一个登陆界面</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    get请求和post请求应该有不同的处理机制</span></span><br><span class="line"><span class="string">    :param request: 请求相关的数据对象 里面有很多简易的方法</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="comment"># print(type(request.method))  # 返回请求方式 并且是全大写的字符串形式  &lt;class 'str'&gt;</span></span><br><span class="line">    <span class="comment"># if request.method == 'GET':</span></span><br><span class="line">    <span class="comment">#     print('来了 老弟')</span></span><br><span class="line">    <span class="comment">#     return render(request,'login.html')</span></span><br><span class="line">    <span class="comment"># elif request.method == 'POST':</span></span><br><span class="line">    <span class="comment">#     return HttpResponse("收到了 宝贝")</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'POST'</span>:</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">"收到了 宝贝"</span>)</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'login.html'</span>)</span><br></pre></td></tr></table></figure>

<h3 id="pycharm链接数据库-MySQL"><a href="#pycharm链接数据库-MySQL" class="headerlink" title="pycharm链接数据库(MySQL)"></a>pycharm链接数据库(MySQL)</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">三个位置查找数据库相关</span></span><br><span class="line"><span class="string">	右侧上方database</span></span><br><span class="line"><span class="string">	左下方database</span></span><br><span class="line"><span class="string">	配置里面的plugins插件搜索安装</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">	再没有卸载pycharm重新装	</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">pycharm可以充当很多款数据库软件的客户端</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">参考截图和视频操作即可</span></span><br><span class="line"><span class="string">	需要提前创建好库</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<h3 id="django链接数据库-MySQL"><a href="#django链接数据库-MySQL" class="headerlink" title="django链接数据库(MySQL)"></a>django链接数据库(MySQL)</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 默认用的是sqkite3</span></span><br><span class="line">DATABASES = &#123;</span><br><span class="line">    <span class="string">'default'</span>: &#123;</span><br><span class="line">        <span class="string">'ENGINE'</span>: <span class="string">'django.db.backends.sqlite3'</span>,</span><br><span class="line">        <span class="string">'NAME'</span>: os.path.join(BASE_DIR, <span class="string">'db.sqlite3'</span>),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># django链接MySQL</span></span><br><span class="line">	<span class="number">1.</span>第一步配置文件中配置</span><br><span class="line">  	DATABASES = &#123;</span><br><span class="line">    <span class="string">'default'</span>: &#123;</span><br><span class="line">        <span class="string">'ENGINE'</span>: <span class="string">'django.db.backends.mysql'</span>,</span><br><span class="line">        <span class="string">'NAME'</span>: <span class="string">'day60'</span>,</span><br><span class="line">        <span class="string">'USER'</span>:<span class="string">'root'</span>,</span><br><span class="line">        <span class="string">'PASSWORD'</span>:<span class="string">'admin123'</span>,</span><br><span class="line">        <span class="string">'HOST'</span>:<span class="string">'127.0.0.1'</span>,</span><br><span class="line">        <span class="string">'PORT'</span>:<span class="number">3306</span>,</span><br><span class="line">        <span class="string">'CHARSET'</span>:<span class="string">'utf8'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">  <span class="number">2.</span>代码声明	</span><br><span class="line">  	django默认用的是mysqldb模块链接MySQL</span><br><span class="line">    但是该模块的兼容性不好 需要手动改为用pymysql链接</span><br><span class="line">    </span><br><span class="line">    你需要告诉django不要用默认的mysqldb还是用pymysql</span><br><span class="line">    <span class="comment"># 在项目名下的init或者任意的应用名下的init文件中书写以下代码都可以</span></span><br><span class="line">    <span class="keyword">import</span> pymysql</span><br><span class="line">		pymysql.install_as_MySQLdb()</span><br></pre></td></tr></table></figure>

<h3 id="Django-ORM"><a href="#Django-ORM" class="headerlink" title="Django ORM"></a>Django ORM</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">ORM. 对象关系映射</span></span><br><span class="line"><span class="string">作用:能够让一个不用sql语句的小白也能够通过python 面向对象的代码简单快捷的操作数据库</span></span><br><span class="line"><span class="string">不足之处:封装程度太高 有时候sql语句的效率偏低 需要你自己写SQL语句</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">类									   表</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">对象									  记录</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">对象属性							记录某个字段对应的值</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">应用下面的models.py文件</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1 先去models.py中书写一个类</span></span><br><span class="line">	<span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="comment"># id int primary_key auto_increment</span></span><br><span class="line">    id = models.AutoField(primary_key=<span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># username varchar(32)</span></span><br><span class="line">    username = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    <span class="comment"># password int</span></span><br><span class="line">    password = models.IntegerField()</span><br><span class="line"></span><br><span class="line">*************************<span class="comment"># 2 数据库迁移命令*************************</span></span><br><span class="line">python3 manage.py makemigrations 将操作记录记录到小本本上(migrations文件夹)</span><br><span class="line"></span><br><span class="line">python3 manage.py migrate  将操作真正的同步到数据库中</span><br><span class="line"><span class="comment"># 只要你修改了models.py中跟数据库相关的代码 就必须重新执行上述的两条命令</span></span><br><span class="line">******************************************************************</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="comment"># id int primary_key auto_increment</span></span><br><span class="line">    id = models.AutoField(primary_key=<span class="literal">True</span>,verbose_name=<span class="string">'主键'</span>)</span><br><span class="line">    <span class="comment"># username varchar(32)</span></span><br><span class="line">    username = models.CharField(max_length=<span class="number">32</span>,verbose_name=<span class="string">'用户名'</span>)</span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    CharField必须要指定max_length参数 不指定会直接报错</span></span><br><span class="line"><span class="string">    verbose_name该参数是所有字段都有的 就是用来对字段的解释</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="comment"># password int</span></span><br><span class="line">    password = models.IntegerField(verbose_name=<span class="string">'密码'</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Author</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="comment"># 由于一张表中必须要有一个主键字段 并且一般情况下都叫id字段</span></span><br><span class="line">    <span class="comment"># 所以orm当你不定义主键字段的时候 orm会自动帮你创建一个名为id主键字段</span></span><br><span class="line">    <span class="comment"># 也就意味着 后续我们在创建模型表的时候如果主键字段名没有额外的叫法 那么主键字段可以省略不写</span></span><br><span class="line">    <span class="comment"># username varchar(32)</span></span><br><span class="line">    username = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    <span class="comment"># password int</span></span><br><span class="line">    password = models.IntegerField()</span><br></pre></td></tr></table></figure>

<h3 id="字段的增删改查"><a href="#字段的增删改查" class="headerlink" title="字段的增删改查"></a>字段的增删改查</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 字段的增加</span></span><br><span class="line">	<span class="number">1.</span>可以在终端内直接给出默认值</span><br><span class="line">  <span class="number">2.</span>该字段可以为空</span><br><span class="line">    info = models.CharField(max_length=<span class="number">32</span>,verbose_name=<span class="string">'个人简介'</span>,null=<span class="literal">True</span>)</span><br><span class="line">  <span class="number">3.</span>直接给字段设置默认值</span><br><span class="line">    hobby = models.CharField(max_length=<span class="number">32</span>,verbose_name=<span class="string">'兴趣爱好'</span>,default=<span class="string">'study'</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 字段的修改</span></span><br><span class="line">	直接修改代码然后执行数据库迁移的两条命令即可！</span><br><span class="line"></span><br><span class="line"><span class="comment"># 字段的删</span></span><br><span class="line">	直接注释对应的字段然后执行数据库迁移的两条命令即可！</span><br><span class="line">  执行完毕之后字段对应的数据也都没有了</span><br><span class="line">  </span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">在操作models.py的时候一定要细心</span></span><br><span class="line"><span class="string">	千万不要注释一些字段</span></span><br><span class="line"><span class="string">	执行迁移命令之前最好先检查一下自己写的代码</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 个人建议:当你离开你的计算机之后一定要锁屏</span></span><br></pre></td></tr></table></figure>

<h3 id="数据的增删改查"><a href="#数据的增删改查" class="headerlink" title="数据的增删改查"></a>数据的增删改查</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 今天只会介绍一点点 后面会详细的介绍</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查</span></span><br><span class="line">res = models.User.objects.filter(username=username)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">返回值你先看成是列表套数据对象的格式</span></span><br><span class="line"><span class="string">它也支持索引取值 切片操作 但是不支持负数索引</span></span><br><span class="line"><span class="string">它也不推荐你使用索引的方式取值</span></span><br><span class="line"><span class="string">user_obj = models.User.objects.filter(username=username).first()</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">filter括号内可以携带多个参数 参数与参数之间默认是<span class="keyword">and</span>关系</span><br><span class="line">你可以把filter联想成where记忆</span><br><span class="line"></span><br><span class="line"><span class="comment"># 增</span></span><br><span class="line"><span class="keyword">from</span> app01 <span class="keyword">import</span> models</span><br><span class="line">res = models.User.objects.create(username=username,password=password)</span><br><span class="line"><span class="comment"># 返回值就是当前被创建的对象本身</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二种增加</span></span><br><span class="line">user_obj = models.User(username=username,password=password)</span><br><span class="line">user_obj.save()  <span class="comment"># 保存数据</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>django框架</tag>
      </tags>
  </entry>
  <entry>
    <title>[初识Django框架]</title>
    <url>/2020/02/10/%E5%88%9D%E8%AF%86Django%E6%A1%86%E6%9E%B6/</url>
    <content><![CDATA[<h3 id="纯手撸web框架"><a href="#纯手撸web框架" class="headerlink" title="纯手撸web框架"></a>纯手撸web框架</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># HTTP协议</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">网络协议</span></span><br><span class="line"><span class="string">HTTP协议				数据传输是明文</span></span><br><span class="line"><span class="string">HTTPS协议				数据传输是密文</span></span><br><span class="line"><span class="string">websocket协议		数据传输是密文</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">四大特性</span></span><br><span class="line"><span class="string">	1.基于请求响应</span></span><br><span class="line"><span class="string">	2.基于TCP、IP作用于应用层之上的协议</span></span><br><span class="line"><span class="string">	3.无状态</span></span><br><span class="line"><span class="string">	4.短/无链接</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">数据格式</span></span><br><span class="line"><span class="string">	请求首行</span></span><br><span class="line"><span class="string">	请求头</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">	请求体</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">响应状态码</span></span><br><span class="line"><span class="string">	1XX</span></span><br><span class="line"><span class="string">	2XX			200</span></span><br><span class="line"><span class="string">	3XX			</span></span><br><span class="line"><span class="string">	4XX			403 404</span></span><br><span class="line"><span class="string">	5XX			500</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment"># 如何做到后缀的不同返回不同的内容</span></span><br><span class="line">	<span class="comment"># 拿到用户输入的后缀 做判断 </span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 不足之处</span></span><br><span class="line">	<span class="number">1.</span>代码重复(服务端代码所有人都要重复写)</span><br><span class="line">  <span class="number">2.</span>手动处理http格式的数据 并且只能拿到url后缀 其他数据获取繁琐(数据格式一样处理的代码其实也大致一样 重复写)</span><br><span class="line">  <span class="number">3.</span>并发的问题</span><br></pre></td></tr></table></figure>

<h3 id="借助于wsgiref模块"><a href="#借助于wsgiref模块" class="headerlink" title="借助于wsgiref模块"></a>借助于wsgiref模块</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">urls.py						路由与视图函数对应关系</span></span><br><span class="line"><span class="string">views.py					视图函数(后端业务逻辑)</span></span><br><span class="line"><span class="string">templates文件夹		专门用来存储html文件</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment"># 按照功能的不同拆分之后 后续添加功能只需要在urls.py书写对应关系然后取views.py书写业务逻辑即可</span></span><br></pre></td></tr></table></figure>

<h3 id="动静态网页"><a href="#动静态网页" class="headerlink" title="动静态网页"></a>动静态网页</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">静态网页</span></span><br><span class="line"><span class="string">	页面上的数据是直接写死的 万年不变</span></span><br><span class="line"><span class="string">动态网页</span></span><br><span class="line"><span class="string">	数据是实时获取的</span></span><br><span class="line"><span class="string">	eg:</span></span><br><span class="line"><span class="string">		1.后端获取当前时间展示到html页面上</span></span><br><span class="line"><span class="string">		2.数据是从数据库中获取的展示到html页面上</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 动态网页制作</span></span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_time</span><span class="params">(env)</span>:</span></span><br><span class="line">    current_time = datetime.datetime.now().strftime(<span class="string">'%Y-%m-%d %X'</span>)</span><br><span class="line">    <span class="comment"># 如何将后端获取到的数据"传递"给html文件？</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">r'templates/03 mytime.html'</span>,<span class="string">'r'</span>,encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        data = f.read()</span><br><span class="line">        <span class="comment"># data就是一堆字符串</span></span><br><span class="line">    data = data.replace(<span class="string">'dwadasdsadsadasdas'</span>,current_time)   <span class="comment"># 在后端将html页面处理好之后再返回给前端</span></span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将一个字典传递给html文件 并且可以在文件上方便快捷的操作字典数据</span></span><br><span class="line"><span class="keyword">from</span> jinja2 <span class="keyword">import</span> Template</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_dict</span><span class="params">(env)</span>:</span></span><br><span class="line">    user_dic = &#123;<span class="string">'username'</span>:<span class="string">'jason'</span>,<span class="string">'age'</span>:<span class="number">18</span>,<span class="string">'hobby'</span>:<span class="string">'read'</span>&#125;</span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">r'templates/04 get_dict.html'</span>,<span class="string">'r'</span>,encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        data = f.read()</span><br><span class="line">    tmp = Template(data)</span><br><span class="line">    res = tmp.render(user=user_dic)</span><br><span class="line">    <span class="comment"># 给get_dict.html传递了一个值 页面上通过变量名user就能够拿到user_dict</span></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="comment"># 后端获取数据库中数据展示到前端页面</span></span><br></pre></td></tr></table></figure>

<h3 id="模版语法之Jinja2模块"><a href="#模版语法之Jinja2模块" class="headerlink" title="模版语法之Jinja2模块"></a>模版语法之Jinja2模块</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip3 install jinja2</span><br><span class="line"><span class="string">"""模版语法是在后端起作用的"""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 模版语法(非常贴近python语法)</span></span><br><span class="line">&#123;&#123; user &#125;&#125;</span><br><span class="line">&#123;&#123; user.get(<span class="string">'username'</span>)&#125;&#125;</span><br><span class="line">&#123;&#123; user.age &#125;&#125;</span><br><span class="line">&#123;&#123; user[<span class="string">'hobby'</span>] &#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;% <span class="keyword">for</span> user_dict <span class="keyword">in</span> user_list %&#125;</span><br><span class="line">                        &lt;tr&gt;</span><br><span class="line">                            &lt;td&gt;&#123;&#123; user_dict.id&#125;&#125;&lt;/td&gt;</span><br><span class="line">                            &lt;td&gt;&#123;&#123; user_dict.username&#125;&#125;&lt;/td&gt;</span><br><span class="line">                            &lt;td&gt;&#123;&#123; user_dict.password&#125;&#125;&lt;/td&gt;</span><br><span class="line">                            &lt;td&gt;&#123;&#123; user_dict.hobby&#125;&#125;&lt;/td&gt;</span><br><span class="line">                        &lt;/tr&gt;</span><br><span class="line">&#123;% endfor%&#125;</span><br></pre></td></tr></table></figure>

<h3 id="自定义简易版本web框架请求流程图"><a href="#自定义简易版本web框架请求流程图" class="headerlink" title="自定义简易版本web框架请求流程图"></a>自定义简易版本web框架请求流程图</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">wsgiref模块</span></span><br><span class="line"><span class="string">	1.请求来的时候解析http格式的数据 封装成大字典</span></span><br><span class="line"><span class="string">	2.响应走的时候给数据打包成符合http格式 再返回给浏览器</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<h3 id="python三大主流web框架"><a href="#python三大主流web框架" class="headerlink" title="python三大主流web框架"></a>python三大主流web框架</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">django</span></span><br><span class="line"><span class="string">	特点:大而全 自带的功能特别特别特别的多 类似于航空母舰</span></span><br><span class="line"><span class="string">	不足之处:</span></span><br><span class="line"><span class="string">		有时候过于笨重</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">flask</span></span><br><span class="line"><span class="string">	特点:小而精  自带的功能特别特别特别的少 类似于游骑兵</span></span><br><span class="line"><span class="string">	第三方的模块特别特别特别的多，如果将flask第三方的模块加起来完全可以盖过django</span></span><br><span class="line"><span class="string">	并且也越来越像django</span></span><br><span class="line"><span class="string">	不足之处:</span></span><br><span class="line"><span class="string">		比较依赖于第三方的开发者</span></span><br><span class="line"><span class="string">		</span></span><br><span class="line"><span class="string">tornado</span></span><br><span class="line"><span class="string">	特点:异步非阻塞 支持高并发</span></span><br><span class="line"><span class="string">		牛逼到甚至可以开发游戏服务器</span></span><br><span class="line"><span class="string">	不足之处:</span></span><br><span class="line"><span class="string">		暂时你不会</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">A:socket部分</span><br><span class="line">B:路由与视图函数对应关系(路由匹配)</span><br><span class="line">C:模版语法</span><br><span class="line"></span><br><span class="line">django</span><br><span class="line">	A用的是别人的		wsgiref模块</span><br><span class="line">  B用的是自己的</span><br><span class="line">  C用的是自己的(没有jinja2好用 但是也很方便)</span><br><span class="line"></span><br><span class="line">flask</span><br><span class="line">	A用的是别人的		werkzeug(内部还是wsgiref模块)</span><br><span class="line">  B自己写的</span><br><span class="line">  C用的别人的(jinja2)</span><br><span class="line"></span><br><span class="line">tornado</span><br><span class="line">	A，B，C都是自己写的</span><br></pre></td></tr></table></figure>

<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 如何让你的计算机能够正常的启动django项目</span></span><br><span class="line">	<span class="number">1.</span>计算机的名称不能有中文</span><br><span class="line">  <span class="number">2.</span>一个pycharm窗口只开一个项目</span><br><span class="line">  <span class="number">3.</span>项目里面所有的文件也尽量不要出现中文</span><br><span class="line">  <span class="number">4.</span>python解释器尽量使用<span class="number">3.4</span>~<span class="number">3.6</span>之间的版本</span><br><span class="line">  	(如果你的项目报错 你点击最后一个报错信息</span><br><span class="line">    去源码中把逗号删掉)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># django版本问题</span></span><br><span class="line">	<span class="number">1.</span>X <span class="number">2.</span>X <span class="number">3.</span>X(直接忽略)</span><br><span class="line">  <span class="number">1.</span>X和<span class="number">2.</span>X本身差距也不大 我们讲解主要以<span class="number">1.</span>X为例 会讲解<span class="number">2.</span>X区别</span><br><span class="line">  公司之前用的<span class="number">1.8</span> 满满过渡到了<span class="number">1.11</span>版本 有一些项目用的<span class="number">2.0</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># django安装</span></span><br><span class="line">	pip3 install django==<span class="number">1.11</span><span class="number">.11</span></span><br><span class="line">  如果已经安装了其他版本 无需自己卸载</span><br><span class="line">  直接重新装 会自动卸载安装新的</span><br><span class="line">  </span><br><span class="line">  如果报错 看看是不是timeout 如果是 那么只是网速波动</span><br><span class="line">  重新安装即可</span><br><span class="line">  </span><br><span class="line">  验证是否安装成功的方式<span class="number">1</span></span><br><span class="line">  	终端输入django-admin看看有没有反应</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看django版本：python -m django --version</span></span><br></pre></td></tr></table></figure>

<h3 id="django基本操作"><a href="#django基本操作" class="headerlink" title="django基本操作"></a>django基本操作</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 命令行操作</span></span><br><span class="line">	<span class="comment"># 1.创建django项目</span></span><br><span class="line">  	<span class="string">"""</span></span><br><span class="line"><span class="string">  	你可以先切换到对应的D盘 然后再创建</span></span><br><span class="line"><span class="string">  	"""</span></span><br><span class="line">  	django-admin startproject mysite</span><br><span class="line">    </span><br><span class="line">    	mysite文件夹</span><br><span class="line">      	manage.py</span><br><span class="line">      	mysite文件夹</span><br><span class="line">        	__init__.py</span><br><span class="line">        	settings.py</span><br><span class="line">          urls.py</span><br><span class="line">          wsgi.py</span><br><span class="line"> <span class="comment"># 2.启动django项目</span></span><br><span class="line">	<span class="string">"""</span></span><br><span class="line"><span class="string">		一定要先切换到项目目录下	</span></span><br><span class="line"><span class="string">		cd /mysite</span></span><br><span class="line"><span class="string">	"""</span></span><br><span class="line">  python3 manage.py runserver</span><br><span class="line">  <span class="comment"># http://127.0.0.1:8000/</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 3.创建应用</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">Next, start your first app by running python manage.py startapp [app_label].</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">	python3 manage.py startapp app01</span><br><span class="line">    应用名应该做到见名知意</span><br><span class="line">      user</span><br><span class="line">      order</span><br><span class="line">      web</span><br><span class="line">      ...</span><br><span class="line">      但是我们教学统一就用app01/<span class="number">02</span>/<span class="number">03</span>/<span class="number">04</span></span><br><span class="line">      </span><br><span class="line">	有很多文件</span><br><span class="line">  </span><br><span class="line"><span class="comment"># pycharm操作</span></span><br><span class="line">	<span class="comment"># 1 new project 选择左侧第二个django即可</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment"># 2 启动</span></span><br><span class="line">  		<span class="number">1.</span>还是用命令行启动</span><br><span class="line">    	<span class="number">2.</span>点击绿色小箭头即可</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 3 创建应用</span></span><br><span class="line">  		<span class="number">1.</span>pycharm提供的终端直接输入完整命令</span><br><span class="line">    	<span class="number">2.</span>pycharm </span><br><span class="line">      		tools </span><br><span class="line">        		run manage.py task提示(前期不要用 给我背完整命令)</span><br><span class="line"> <span class="comment"># 4 修改端口号以及创建server	</span></span><br><span class="line">		edit confi....</span><br></pre></td></tr></table></figure>

<h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">django是一款专门用来开发app的web框架</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">django框架就类似于是一所大学(空壳子)</span></span><br><span class="line"><span class="string">app就类似于大学里面各个学院(具体功能的app)</span></span><br><span class="line"><span class="string">	比如开发淘宝</span></span><br><span class="line"><span class="string">		订单相关</span></span><br><span class="line"><span class="string">		用户相关</span></span><br><span class="line"><span class="string">		投诉相关</span></span><br><span class="line"><span class="string">		创建不同的app对应不同的功能</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">	选课系统</span></span><br><span class="line"><span class="string">		学生功能</span></span><br><span class="line"><span class="string">		老师功能</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">一个app就是一个独立的功能模块</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">***********************创建的应用一定要去配置文件中注册**********************</span><br><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">'django.contrib.admin'</span>,</span><br><span class="line">    <span class="string">'django.contrib.auth'</span>,</span><br><span class="line">    <span class="string">'django.contrib.contenttypes'</span>,</span><br><span class="line">    <span class="string">'django.contrib.sessions'</span>,</span><br><span class="line">    <span class="string">'django.contrib.messages'</span>,</span><br><span class="line">    <span class="string">'django.contrib.staticfiles'</span>,</span><br><span class="line">    <span class="string">'app01.apps.App01Config'</span>,  <span class="comment"># 全写</span></span><br><span class="line">  	<span class="string">'app01'</span>,			 <span class="comment"># 简写</span></span><br><span class="line">]</span><br><span class="line"><span class="comment"># 创建出来的的应用第一步先去配置文件中注册 其他的先不要给我干</span></span><br><span class="line">ps:你在用pycharm创建项目的时候 pycharm可以帮你创建一个app并且自动注册</span><br><span class="line">***********************************************************************</span><br></pre></td></tr></table></figure>

<h3 id="主要文件介绍"><a href="#主要文件介绍" class="headerlink" title="主要文件介绍"></a>主要文件介绍</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">-mysite项目文件夹</span><br><span class="line">	--mysite文件夹</span><br><span class="line">  	---settings.py	配置文件</span><br><span class="line">    ---urls.py			路由与视图函数对应关系(路由层)</span><br><span class="line">    ---wsgi.py			wsgiref模块(不考虑)</span><br><span class="line">  --manage.py				django的入口文件</span><br><span class="line">  --db.sqlite3			django自带的sqlite3数据库(小型数据库 功能不是很多还有bug)</span><br><span class="line">  --app01文件夹</span><br><span class="line">  	---admin.py			django后台管理</span><br><span class="line">    ---apps.py			注册使用</span><br><span class="line">    ---migrations文件夹		数据库迁移记录</span><br><span class="line">    ---models.py		数据库相关的 模型类(orm)</span><br><span class="line">  	---tests.py			测试文件</span><br><span class="line">    ---views.py			视图函数(视图层)</span><br></pre></td></tr></table></figure>

<h3 id="命令行与pycharm创建的区别"><a href="#命令行与pycharm创建的区别" class="headerlink" title="命令行与pycharm创建的区别"></a>命令行与pycharm创建的区别</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1 命令行创建不会自动有templatew文件夹 需要你自己手动创建而pycharm会自动帮你创建并且还会自动在配置文件中配置对应的路径</span></span><br><span class="line"><span class="comment"># pycharm创建</span></span><br><span class="line">TEMPLATES = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">'BACKEND'</span>: <span class="string">'django.template.backends.django.DjangoTemplates'</span>,</span><br><span class="line">        <span class="string">'DIRS'</span>: [os.path.join(BASE_DIR, <span class="string">'templates'</span>)]</span><br><span class="line">]</span><br><span class="line"><span class="comment"># 命令行创建</span></span><br><span class="line">TEMPLATES = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">'BACKEND'</span>: <span class="string">'django.template.backends.django.DjangoTemplates'</span>,</span><br><span class="line">        <span class="string">'DIRS'</span>: [],</span><br><span class="line">]</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">也就意味着你在用命令创建django项目的时候不单单需要创建templates文件夹还需要去配置文件中配置路径</span></span><br><span class="line"><span class="string">'DIRS': [os.path.join(BASE_DIR, 'templates')]</span></span><br></pre></td></tr></table></figure>

<h3 id="django小白必会三板斧"><a href="#django小白必会三板斧" class="headerlink" title="django小白必会三板斧"></a>django小白必会三板斧</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">HttpResponse</span></span><br><span class="line"><span class="string">	返回字符串类型的数据</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">render</span></span><br><span class="line"><span class="string">	返回html文件的</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">redirect</span></span><br><span class="line"><span class="string">	重定向</span></span><br><span class="line"><span class="string">	  return redirect('https://www.mzitu.com/')</span></span><br><span class="line"><span class="string">    return redirect('/home/')</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>django框架</tag>
      </tags>
  </entry>
  <entry>
    <title>[JQuery入门]</title>
    <url>/2019/07/12/JQuery%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h1 id="jQuery"><a href="#jQuery" class="headerlink" title="jQuery"></a>jQuery</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;&quot;&quot;</span><br><span class="line">jQuery内部封装了原生的js代码(还额外添加了很多的功能)</span><br><span class="line">能够让你通过书写更少的代码 完成js操作 </span><br><span class="line">类似于python里面的模块  在前端模块不叫模块  叫 “类库”</span><br><span class="line"></span><br><span class="line">兼容多个浏览器的 你在使用jQuery的时候就不需要考虑浏览器兼容问题</span><br><span class="line"></span><br><span class="line">jQuery的宗旨</span><br><span class="line">	write less do more</span><br><span class="line">	让你用更少的代码完成更多的事情</span><br><span class="line"></span><br><span class="line">复习</span><br><span class="line">	python导入模块发生了哪些事？</span><br><span class="line">		导入模块其实需要消耗资源</span><br><span class="line">	jQuery在使用的时候也需要导入</span><br><span class="line">		但是它的文件非常的小(几十KB) 基本不影响网络速度</span><br><span class="line"></span><br><span class="line">选择器</span><br><span class="line">筛选器</span><br><span class="line">样式操作</span><br><span class="line">文本操作</span><br><span class="line">属性操作</span><br><span class="line">文档处理</span><br><span class="line">事件</span><br><span class="line">动画效果</span><br><span class="line">插件</span><br><span class="line">each、data、Ajax(重点 django部分学)</span><br><span class="line"></span><br><span class="line">版本介绍</span><br><span class="line"></span><br><span class="line">jQuery文件下载</span><br><span class="line">	压缩  		容量更小</span><br><span class="line">	未压缩</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"># jQuery在使用之前 一定要确保已经导入了</span><br></pre></td></tr></table></figure>

<h3 id="针对导入问题"><a href="#针对导入问题" class="headerlink" title="针对导入问题"></a>针对导入问题</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"># 1 文件下载到了本地 如何解决多个文件反复书写引入语句的代码</span><br><span class="line">	可以借助于pycharm自动初始化代码功能完成自动添加</span><br><span class="line">  	配置</span><br><span class="line">    	编辑</span><br><span class="line">      	file and code template</span><br><span class="line">  <span class="string">""</span><span class="string">"我不想下载jQuery文件 能不能使用呢？"</span><span class="string">""</span></span><br><span class="line">  </span><br><span class="line"># 2 直接引入jQuery提供的CDN服务(基于网络直接请求加载)</span><br><span class="line">	CDN:内容分发网络</span><br><span class="line">  	CDN有免费的也有收费的</span><br><span class="line">    前端免费的cdn网站:</span><br><span class="line">      	bootcdn</span><br><span class="line">    &lt;script src=<span class="string">"https://cdn.bootcdn.net/ajax/libs/jquery/3.4.1/jquery.min.js"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">  """你的计算机必须要有网络"""</span></span><br><span class="line"><span class="regexp">  </span></span><br><span class="line"><span class="regexp">  </span></span><br><span class="line"><span class="regexp"># jQuery基本语法</span></span><br><span class="line"><span class="regexp">	jQuery(选择器).action()</span></span><br><span class="line"><span class="regexp">  秉持着jQuery的宗旨 jQuery简写	$</span></span><br><span class="line"><span class="regexp">  jQuery()  === $()</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp"># jQuery与js代码对比</span></span><br><span class="line"><span class="regexp">	eg:将p标签内部的文本颜色改为红色</span></span><br><span class="line"><span class="regexp">   	/</span><span class="regexp">/ 原生js代码操作标签</span></span><br><span class="line"><span class="regexp">		let pEle = document.getElementById('d1')</span></span><br><span class="line"><span class="regexp">		pEle.style.color = 'red'</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">		/</span><span class="regexp">/ jQuery操作标签</span></span><br><span class="line"><span class="regexp">		$('p').css('color','blue')</span></span><br></pre></td></tr></table></figure>

<h1 id="先学如何查找标签"><a href="#先学如何查找标签" class="headerlink" title="先学如何查找标签"></a>先学如何查找标签</h1><h3 id="基本选择器"><a href="#基本选择器" class="headerlink" title="基本选择器"></a>基本选择器</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="comment">// id选择器</span></span><br><span class="line">$(<span class="string">'#d1'</span>)</span><br><span class="line">w.fn.init [div#d1]0: div#d1length: 1__proto__: Object(0)</span><br><span class="line"><span class="comment">// class选择器</span></span><br><span class="line">$(<span class="string">'.c1'</span>)</span><br><span class="line">w.fn.init [p.c1, <span class="attr">prevObject</span>: w.fn.init(<span class="number">1</span>)]<span class="number">0</span>: p.c1length: <span class="number">1</span>prevObject: w.fn.init [<span class="built_in">document</span>]__proto__: <span class="built_in">Object</span>(<span class="number">0</span>)</span><br><span class="line"><span class="comment">// 标签选择器</span></span><br><span class="line">$(<span class="string">'span'</span>)</span><br><span class="line">w.fn.init(<span class="number">3</span>) [span, span, span, <span class="attr">prevObject</span>: w.fn.init(<span class="number">1</span>)]</span><br><span class="line"></span><br><span class="line"><span class="string">""</span><span class="string">"一定要区分开(重点)"</span><span class="string">""</span></span><br><span class="line"><span class="comment">// jQuery对象如何变成标签对象</span></span><br><span class="line"><span class="literal">undefined</span></span><br><span class="line">$(<span class="string">'#d1'</span>)[<span class="number">0</span>]</span><br><span class="line">&lt;div id=​<span class="string">"d1"</span>&gt;​…​&lt;<span class="regexp">/div&gt;​</span></span><br><span class="line"><span class="regexp">document.getElementById('d1')</span></span><br><span class="line"><span class="regexp">&lt;div id=​"d1"&gt;​…​&lt;/</span>div&gt;​</span><br><span class="line"><span class="comment">// 标签对象如何转jQuery对象</span></span><br><span class="line"><span class="literal">undefined</span></span><br><span class="line">$(<span class="built_in">document</span>.getElementById(<span class="string">'d1'</span>))</span><br><span class="line">w.fn.init [div#d1]</span><br></pre></td></tr></table></figure>

<h3 id="组合选择器-分组与嵌套"><a href="#组合选择器-分组与嵌套" class="headerlink" title="组合选择器/分组与嵌套"></a>组合选择器/分组与嵌套</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">$(<span class="string">'div'</span>)</span><br><span class="line">w.fn.init(2) [div#d1, div.c1, prevObject: w.fn.init(1)]</span><br><span class="line">$(<span class="string">'div.c1'</span>)</span><br><span class="line">w.fn.init [div.c1, <span class="attr">prevObject</span>: w.fn.init(<span class="number">1</span>)]<span class="number">0</span>: div.c1length: <span class="number">1</span>prevObject: w.fn.init [<span class="built_in">document</span>]__proto__: <span class="built_in">Object</span>(<span class="number">0</span>)</span><br><span class="line">$(<span class="string">'div#d1'</span>)</span><br><span class="line">w.fn.init [div#d1, prevObject: w.fn.init(1)]</span><br><span class="line">$(<span class="string">'*'</span>)</span><br><span class="line">w.fn.init(19) [html, head, meta, title, meta, link, script, script, body, span, span, div#d1, span, p#d2, span, span, div.c1, span, span, prevObject: w.fn.init(1)]</span><br><span class="line">               </span><br><span class="line">$('#d1,.c1,p')  # 并列+混用</span><br><span class="line">w.fn.init(3) [div#d1, p#d2, div.c1, prevObject: w.fn.init(1)]</span><br><span class="line">              </span><br><span class="line">$('div span')  # 后代</span><br><span class="line">w.fn.init(<span class="number">3</span>) [span, span, span, <span class="attr">prevObject</span>: w.fn.init(<span class="number">1</span>)]</span><br><span class="line">$('div&gt;span')  # 儿子</span><br><span class="line">w.fn.init(<span class="number">2</span>) [span, span, <span class="attr">prevObject</span>: w.fn.init(<span class="number">1</span>)]</span><br><span class="line">$('div+span')  # 毗邻</span><br><span class="line">w.fn.init [span, <span class="attr">prevObject</span>: w.fn.init(<span class="number">1</span>)]</span><br><span class="line">$('div~span')  # 弟弟</span><br><span class="line">w.fn.init(<span class="number">2</span>) [span, span, <span class="attr">prevObject</span>: w.fn.init(<span class="number">1</span>)]</span><br></pre></td></tr></table></figure>

<h3 id="基本筛选器"><a href="#基本筛选器" class="headerlink" title="基本筛选器"></a>基本筛选器</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">$(<span class="string">'ul li'</span>)</span><br><span class="line">w.fn.init(10) [li, li, li, li, li, li, li.c1, li, li#d1, li, prevObject: w.fn.init(1)]</span><br><span class="line">               </span><br><span class="line">$('ul li:first')  # 大儿子 </span><br><span class="line">w.fn.init [li, <span class="attr">prevObject</span>: w.fn.init(<span class="number">1</span>)]<span class="number">0</span>: lilength: <span class="number">1</span>prevObject: w.fn.init [<span class="built_in">document</span>]__proto__: <span class="built_in">Object</span>(<span class="number">0</span>)</span><br><span class="line">               </span><br><span class="line">$('ul li:last')  # 小儿子</span><br><span class="line">w.fn.init [li, <span class="attr">prevObject</span>: w.fn.init(<span class="number">1</span>)]<span class="number">0</span>: lilength: <span class="number">1</span>prevObject: w.fn.init [<span class="built_in">document</span>]__proto__: <span class="built_in">Object</span>(<span class="number">0</span>)</span><br><span class="line">               </span><br><span class="line">$('ul li:eq(2)')		# 放索引</span><br><span class="line">w.fn.init [li, <span class="attr">prevObject</span>: w.fn.init(<span class="number">1</span>)]<span class="number">0</span>: lilength: <span class="number">1</span>prevObject: w.fn.init [<span class="built_in">document</span>]__proto__: <span class="built_in">Object</span>(<span class="number">0</span>)</span><br><span class="line">               </span><br><span class="line">$('ul li:even')  # 偶数索引 0包含在内</span><br><span class="line">w.fn.init(5) [li, li, li, li.c1, li#d1, prevObject: w.fn.init(1)]0: li1: li2: li3: li.c14: li#d1length: 5prevObject: w.fn.init [document]__proto__: Object(0)</span><br><span class="line">              </span><br><span class="line">$('ul li:odd')  # 奇数索引</span><br><span class="line">w.fn.init(<span class="number">5</span>) [li, li, li, li, li, <span class="attr">prevObject</span>: w.fn.init(<span class="number">1</span>)]<span class="number">0</span>: li1: li2: li3: li4: lilength: <span class="number">5</span>prevObject: w.fn.init [<span class="built_in">document</span>]__proto__: <span class="built_in">Object</span>(<span class="number">0</span>)</span><br><span class="line">              </span><br><span class="line">$('ul li:gt(2)')  # 大于索引</span><br><span class="line">w.fn.init(7) [li, li, li, li.c1, li, li#d1, li, prevObject: w.fn.init(1)]0: li1: li2: li3: li.c14: li5: li#d16: lilength: 7prevObject: w.fn.init [document]__proto__: Object(0)</span><br><span class="line">              </span><br><span class="line">$('ul li:lt(2)')  # 小于索引</span><br><span class="line">w.fn.init(<span class="number">2</span>) [li, li, <span class="attr">prevObject</span>: w.fn.init(<span class="number">1</span>)]<span class="number">0</span>: li1: lilength: <span class="number">2</span>prevObject: w.fn.init [<span class="built_in">document</span>]__proto__: <span class="built_in">Object</span>(<span class="number">0</span>)</span><br><span class="line">              </span><br><span class="line">$('ul li:not("#d1")')  # 移除满足条件的标签</span><br><span class="line">w.fn.init(<span class="number">9</span>) [li, li, li, li, li, li, li.c1, li, li, <span class="attr">prevObject</span>: w.fn.init(<span class="number">1</span>)]</span><br><span class="line">         </span><br><span class="line">$(<span class="string">'div'</span>)</span><br><span class="line">w.fn.init(<span class="number">2</span>) [div, div, <span class="attr">prevObject</span>: w.fn.init(<span class="number">1</span>)]</span><br><span class="line">$('div:has("p")')  # 选取出包含一个或多个标签在内的标签</span><br><span class="line">w.fn.init [div, <span class="attr">prevObject</span>: w.fn.init(<span class="number">1</span>)]</span><br></pre></td></tr></table></figure>

<h3 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">$(<span class="string">'[username]'</span>)</span><br><span class="line">w.fn.init(<span class="number">3</span>) [input, input, p, <span class="attr">prevObject</span>: w.fn.init(<span class="number">1</span>)]</span><br><span class="line">$(<span class="string">'[username="jason"]'</span>)</span><br><span class="line">w.fn.init [input, <span class="attr">prevObject</span>: w.fn.init(<span class="number">1</span>)]</span><br><span class="line">$(<span class="string">'p[username="egon"]'</span>)</span><br><span class="line">w.fn.init [p, <span class="attr">prevObject</span>: w.fn.init(<span class="number">1</span>)]</span><br><span class="line"></span><br><span class="line">$(<span class="string">'[type]'</span>)</span><br><span class="line">w.fn.init(<span class="number">2</span>) [input, input, <span class="attr">prevObject</span>: w.fn.init(<span class="number">1</span>)]</span><br><span class="line">$(<span class="string">'[type="text"]'</span>)</span><br><span class="line">w.fn.init(<span class="number">2</span>) [input, input, <span class="attr">prevObject</span>: w.fn.init(<span class="number">1</span>)]</span><br></pre></td></tr></table></figure>

<h3 id="表单筛选器"><a href="#表单筛选器" class="headerlink" title="表单筛选器"></a>表单筛选器</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">$(<span class="string">'input[type="text"]'</span>)</span><br><span class="line">w.fn.init [input, <span class="attr">prevObject</span>: w.fn.init(<span class="number">1</span>)]<span class="number">0</span>: inputlength: <span class="number">1</span>prevObject: w.fn.init [<span class="built_in">document</span>]__proto__: <span class="built_in">Object</span>(<span class="number">0</span>)</span><br><span class="line">$(<span class="string">'input[type="password"]'</span>)</span><br><span class="line">w.fn.init [input, <span class="attr">prevObject</span>: w.fn.init(<span class="number">1</span>)]</span><br><span class="line"></span><br><span class="line">$(':text')  # 等价于上面第一个</span><br><span class="line">w.fn.init [input, <span class="attr">prevObject</span>: w.fn.init(<span class="number">1</span>)]<span class="number">0</span>: inputlength: <span class="number">1</span>prevObject: w.fn.init [<span class="built_in">document</span>]__proto__: <span class="built_in">Object</span>(<span class="number">0</span>)</span><br><span class="line">$(':password')  # 等价于上面第二个</span><br><span class="line">w.fn.init [input, <span class="attr">prevObject</span>: w.fn.init(<span class="number">1</span>)]</span><br><span class="line"></span><br><span class="line">:text</span><br><span class="line">:password</span><br><span class="line">:file</span><br><span class="line">:radio</span><br><span class="line">:checkbox</span><br><span class="line">:submit</span><br><span class="line">:reset</span><br><span class="line">:button</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">表单对象属性</span><br><span class="line">:enabled</span><br><span class="line">:disabled</span><br><span class="line">:checked</span><br><span class="line">:selected</span><br><span class="line"><span class="string">""</span><span class="string">"特殊情况"</span><span class="string">""</span></span><br><span class="line">$(':checked')  # 它会将checked和selected都拿到</span><br><span class="line">w.fn.init(<span class="number">2</span>) [input, option, <span class="attr">prevObject</span>: w.fn.init(<span class="number">1</span>)]<span class="number">0</span>: input1: optionlength: <span class="number">2</span>prevObject: w.fn.init [<span class="built_in">document</span>]__proto__: <span class="built_in">Object</span>(<span class="number">0</span>)</span><br><span class="line">$(':selected')  # 它不会 只拿selected</span><br><span class="line">w.fn.init [option, <span class="attr">prevObject</span>: w.fn.init(<span class="number">1</span>)]</span><br><span class="line">$('input:checked')  # 自己加一个限制条件</span><br><span class="line">w.fn.init [input, <span class="attr">prevObject</span>: w.fn.init(<span class="number">1</span>)]</span><br></pre></td></tr></table></figure>

<h3 id="筛选器方法"><a href="#筛选器方法" class="headerlink" title="筛选器方法"></a>筛选器方法</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">$('#d1').next()  # 同级别下一个</span><br><span class="line">w.fn.init [span, prevObject: w.fn.init(1)]0: spanlength: 1prevObject: w.fn.init [span#d1]__proto__: Object(0)</span><br><span class="line">$(<span class="string">'#d1'</span>).nextAll()</span><br><span class="line">w.fn.init(5) [span, div#d2, span, span, span.c1, prevObject: w.fn.init(1)]0: span1: div#d22: span3: span4: span.c1length: 5prevObject: w.fn.init [span#d1]__proto__: Object(0)</span><br><span class="line">$('#d1').nextUntil('.c1')  # 不包括最后一个</span><br><span class="line">w.fn.init(4) [span, div#d2, span, span, prevObject: w.fn.init(1)]0: span1: div#d22: span3: spanlength: 4prevObject: w.fn.init [span#d1]__proto__: Object(0)</span><br><span class="line">              </span><br><span class="line">              </span><br><span class="line">$('.c1').prev()  # 上一个</span><br><span class="line">w.fn.init [span, <span class="attr">prevObject</span>: w.fn.init(<span class="number">1</span>)]<span class="number">0</span>: spanlength: <span class="number">1</span>prevObject: w.fn.init [span.c1, <span class="attr">prevObject</span>: w.fn.init(<span class="number">1</span>)]__proto__: <span class="built_in">Object</span>(<span class="number">0</span>)</span><br><span class="line">$(<span class="string">'.c1'</span>).prevAll()</span><br><span class="line">w.fn.init(5) [span, span, div#d2, span, span#d1, prevObject: w.fn.init(1)]</span><br><span class="line">$(<span class="string">'.c1'</span>).prevUntil(<span class="string">'#d2'</span>)</span><br><span class="line">w.fn.init(<span class="number">2</span>) [span, span, <span class="attr">prevObject</span>: w.fn.init(<span class="number">1</span>)]</span><br><span class="line">              </span><br><span class="line">$('#d3').parent()  # 第一级父标签</span><br><span class="line">w.fn.init [p, prevObject: w.fn.init(1)]0: plength: 1prevObject: w.fn.init [span#d3]__proto__: Object(0)</span><br><span class="line">$(<span class="string">'#d3'</span>).parent().parent()</span><br><span class="line">w.fn.init [div#d2, prevObject: w.fn.init(1)]</span><br><span class="line">$(<span class="string">'#d3'</span>).parent().parent().parent()</span><br><span class="line">w.fn.init [body, <span class="attr">prevObject</span>: w.fn.init(<span class="number">1</span>)]</span><br><span class="line">$(<span class="string">'#d3'</span>).parent().parent().parent().parent()</span><br><span class="line">w.fn.init [html, <span class="attr">prevObject</span>: w.fn.init(<span class="number">1</span>)]</span><br><span class="line">$(<span class="string">'#d3'</span>).parent().parent().parent().parent().parent()</span><br><span class="line">w.fn.init [<span class="built_in">document</span>, <span class="attr">prevObject</span>: w.fn.init(<span class="number">1</span>)]</span><br><span class="line">$(<span class="string">'#d3'</span>).parent().parent().parent().parent().parent().parent()</span><br><span class="line">w.fn.init [prevObject: w.fn.init(<span class="number">1</span>)]</span><br><span class="line">$(<span class="string">'#d3'</span>).parents()</span><br><span class="line">w.fn.init(4) [p, div#d2, body, html, prevObject: w.fn.init(1)]</span><br><span class="line">$(<span class="string">'#d3'</span>).parentsUntil(<span class="string">'body'</span>)</span><br><span class="line">w.fn.init(2) [p, div#d2, prevObject: w.fn.init(1)]</span><br><span class="line">              </span><br><span class="line">              </span><br><span class="line">$('#d2').children()  # 儿子</span><br><span class="line">              </span><br><span class="line">$('#d2').siblings()  # 同级别上下所有</span><br><span class="line">              </span><br><span class="line">              </span><br><span class="line">              </span><br><span class="line">$(<span class="string">'div p'</span>)</span><br><span class="line"># 等价           </span><br><span class="line">$('div').find('p')  # find从某个区域内筛选出想要的标签 </span><br><span class="line">              </span><br><span class="line">              </span><br><span class="line"><span class="string">""</span><span class="string">"下述两两等价"</span><span class="string">""</span></span><br><span class="line">$(<span class="string">'div span:first'</span>)</span><br><span class="line">w.fn.init [span, <span class="attr">prevObject</span>: w.fn.init(<span class="number">1</span>)]</span><br><span class="line">$(<span class="string">'div span'</span>).first()</span><br><span class="line">w.fn.init [span, prevObject: w.fn.init(3)]0: spanlength: 1prevObject: w.fn.init(3) [span, span#d3, span, prevObject: w.fn.init(1)]__proto__: Object(0)</span><br><span class="line">                                                                                    </span><br><span class="line">$(<span class="string">'div span:last'</span>)</span><br><span class="line">w.fn.init [span, <span class="attr">prevObject</span>: w.fn.init(<span class="number">1</span>)]</span><br><span class="line">$(<span class="string">'div span'</span>).last()</span><br><span class="line">                                                                                    </span><br><span class="line">w.fn.init [span, <span class="attr">prevObject</span>: w.fn.init(<span class="number">3</span>)]</span><br><span class="line">$(<span class="string">'div span:not("#d3")'</span>)</span><br><span class="line">w.fn.init(<span class="number">2</span>) [span, span, <span class="attr">prevObject</span>: w.fn.init(<span class="number">1</span>)]</span><br><span class="line">$(<span class="string">'div span'</span>).not(<span class="string">'#d3'</span>)</span><br><span class="line">w.fn.init(<span class="number">2</span>) [span, span, <span class="attr">prevObject</span>: w.fn.init(<span class="number">3</span>)]</span><br></pre></td></tr></table></figure>

<ul>
<li><p>jQuery练习题</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">$(<span class="string">'#i1'</span>)</span><br><span class="line">r.fn.init [div#i1.container]</span><br><span class="line">           </span><br><span class="line">$(<span class="string">'h2'</span>)</span><br><span class="line">r.fn.init [h2, <span class="attr">prevObject</span>: r.fn.init(<span class="number">1</span>)]</span><br><span class="line"></span><br><span class="line">$(<span class="string">'input'</span>)</span><br><span class="line">r.fn.init(9) [input#exampleInputEmail1.form-control, input#exampleInputPassword1.form-control, input#exampleInputFile, input, input, input, input, input#optionsRadios1, input#optionsRadios2, prevObject: r.fn.init(1)]</span><br><span class="line">              </span><br><span class="line">$(<span class="string">'.c1'</span>)</span><br><span class="line">r.fn.init(<span class="number">2</span>) [h1.c1, h1.c1, <span class="attr">prevObject</span>: r.fn.init(<span class="number">1</span>)]</span><br><span class="line"></span><br><span class="line">$(<span class="string">'.btn-default'</span>)</span><br><span class="line">r.fn.init [button#btnSubmit.btn.btn-default, prevObject: r.fn.init(1)]</span><br><span class="line">           </span><br><span class="line">$(<span class="string">'.c1,h2'</span>)</span><br><span class="line">r.fn.init(<span class="number">3</span>) [h1.c1, h1.c1, h2, <span class="attr">prevObject</span>: r.fn.init(<span class="number">1</span>)]</span><br><span class="line"></span><br><span class="line">$(<span class="string">'.c1,#p3'</span>)</span><br><span class="line">r.fn.init(3) [h1.c1, h1.c1, p#p3.divider, prevObject: r.fn.init(1)]</span><br><span class="line">              </span><br><span class="line">$(<span class="string">'.c1,.btn'</span>)</span><br><span class="line">r.fn.init(11) [h1.c1, h1.c1, a.btn.btn-primary.btn-lg, button.btn.btn-warning, button.btn.btn-danger, button.btn.btn-warning, button.btn.btn-danger, button.btn.btn-warning, button.btn.btn-danger, button#btnSubmit.btn.btn-default, a.btn.btn-success, prevObject: r.fn.init(1)]</span><br><span class="line">               </span><br><span class="line">$(<span class="string">'form'</span>).find(<span class="string">'input'</span>)</span><br><span class="line">r.fn.init(3) [input#exampleInputEmail1.form-control, input#exampleInputPassword1.form-control, input#exampleInputFile, prevObject: r.fn.init(1)]</span><br><span class="line">              </span><br><span class="line">$(<span class="string">'label input'</span>)</span><br><span class="line">r.fn.init(6) [input, input, input, input, input#optionsRadios1, input#optionsRadios2, prevObject: r.fn.init(1)]</span><br><span class="line">              </span><br><span class="line">$(<span class="string">'label+input'</span>)</span><br><span class="line">r.fn.init(3) [input#exampleInputEmail1.form-control, input#exampleInputPassword1.form-control, input#exampleInputFile, prevObject: r.fn.init(1)]</span><br><span class="line">              </span><br><span class="line">$(<span class="string">'#p2~li'</span>)</span><br><span class="line">r.fn.init(<span class="number">8</span>) [li, li, li, li, li, li, li, li, <span class="attr">prevObject</span>: r.fn.init(<span class="number">1</span>)]</span><br><span class="line"></span><br><span class="line">$(<span class="string">'#f1 input:first'</span>)</span><br><span class="line">r.fn.init [input#exampleInputEmail1.form-control, prevObject: r.fn.init(1)]</span><br><span class="line">           </span><br><span class="line">$(<span class="string">'#my-checkbox input:last'</span>)</span><br><span class="line">r.fn.init [input, <span class="attr">prevObject</span>: r.fn.init(<span class="number">1</span>)]</span><br><span class="line"></span><br><span class="line">$(<span class="string">'#my-checkbox input[checked!="checked"]'</span>)</span><br><span class="line">r.fn.init(<span class="number">3</span>) [input, input, input, <span class="attr">prevObject</span>: r.fn.init(<span class="number">1</span>)]<span class="number">0</span>: input1: input2: inputlength: <span class="number">3</span>prevObject: r.fn.init [<span class="built_in">document</span>]__proto__: <span class="built_in">Object</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">$(<span class="string">'label:has("input")'</span>)</span><br><span class="line">r.fn.init(<span class="number">6</span>) [label, label, label, label, label, label, <span class="attr">prevObject</span>: r.fn.init(<span class="number">1</span>)]</span><br></pre></td></tr></table></figure>
</li>
<li><p>操作标签</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"># 操作类</span><br><span class="line"><span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string">js版本														jQuery版本</span></span><br><span class="line"><span class="string">classList.add()										addClass()</span></span><br><span class="line"><span class="string">classList.remove()								removeClass()</span></span><br><span class="line"><span class="string">classList.contains()							hasClass()</span></span><br><span class="line"><span class="string">classList.toggle()								toggleClass()</span></span><br><span class="line"><span class="string">"</span><span class="string">""</span></span><br><span class="line"></span><br><span class="line"># css操作</span><br><span class="line">&lt;p&gt;<span class="number">111</span>&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">&lt;p&gt;222&lt;/</span>p&gt;</span><br><span class="line"><span class="string">""</span><span class="string">"一行代码将第一个p标签变成红色第二个p标签变成绿色"</span><span class="string">""</span></span><br><span class="line">$(<span class="string">'p'</span>).first().css(<span class="string">'color'</span>,<span class="string">'red'</span>).next().css(<span class="string">'color'</span>,<span class="string">'green'</span>)</span><br><span class="line"># jQuery的链式操作 使用jQuery可以做到一行代码操作很多标签</span><br><span class="line"># jQuery对象调用jQuery方法之后返回的还是当前jQuery对象 也就可以继续调用其他方法</span><br><span class="line">class MyClass(object):</span><br><span class="line">    def func1(self):</span><br><span class="line">        print(<span class="string">'func1'</span>)</span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line"></span><br><span class="line">    def func2(self):</span><br><span class="line">        print(<span class="string">'func2'</span>)</span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line">obj = MyClass()</span><br><span class="line">obj.func1().func2()</span><br><span class="line"></span><br><span class="line"># 位置操作</span><br><span class="line">offset()  # 相对于浏览器窗口</span><br><span class="line">position()  # 相对于父标签</span><br><span class="line"></span><br><span class="line">scrollTop()		# 需要了解</span><br><span class="line">	$(<span class="built_in">window</span>).scrollTop()</span><br><span class="line">  <span class="number">0</span></span><br><span class="line">  $(<span class="built_in">window</span>).scrollTop()</span><br><span class="line">  <span class="number">969</span></span><br><span class="line">  $(window).scrollTop()  # 括号内不加参数就是获取</span><br><span class="line">  <span class="number">1733</span></span><br><span class="line">  $(window).scrollTop(0)  # 加了参数就是设置</span><br><span class="line">  n.fn.init [Window]</span><br><span class="line">  $(<span class="built_in">window</span>).scrollTop(<span class="number">500</span>)</span><br><span class="line">  n.fn.init [Window]</span><br><span class="line">scrollLeft()</span><br><span class="line"></span><br><span class="line"># 尺寸</span><br><span class="line">$('p').height()  # 文本</span><br><span class="line"><span class="number">20</span></span><br><span class="line">$(<span class="string">'p'</span>).width()</span><br><span class="line"><span class="number">1670</span></span><br><span class="line">$('p').innerHeight()  # 文本+padding</span><br><span class="line"><span class="number">26</span></span><br><span class="line">$(<span class="string">'p'</span>).innerWidth()</span><br><span class="line"><span class="number">1674</span></span><br><span class="line">$('p').outerHeight()  # 文本+padding+border</span><br><span class="line"><span class="number">26</span></span><br><span class="line">$(<span class="string">'p'</span>).outerWidth()</span><br><span class="line"><span class="number">1674</span></span><br><span class="line"></span><br><span class="line"># 文本操作</span><br><span class="line"><span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string">操作标签内部文本</span></span><br><span class="line"><span class="string">js											jQuery</span></span><br><span class="line"><span class="string">innerText								text()  括号内不加参数就是获取加了就是设置</span></span><br><span class="line"><span class="string">innerHTML								html()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">$('div').text()</span></span><br><span class="line"><span class="string">"</span></span><br><span class="line">    </span><br><span class="line">        有些话听听就过去了，不要在意，都是成年人!</span><br><span class="line">    </span><br><span class="line"><span class="string">"</span></span><br><span class="line"><span class="string">$('div').html()</span></span><br><span class="line"><span class="string">"</span></span><br><span class="line">    &lt;p&gt;</span><br><span class="line">        有些话听听就过去了，不要在意，都是成年人!</span><br><span class="line">    &lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">"</span></span><br><span class="line"><span class="regexp">$('div').text('你们都是我的大宝贝')</span></span><br><span class="line"><span class="regexp">w.fn.init [div, prevObject: w.fn.init(1)]</span></span><br><span class="line"><span class="regexp">$('div').html('你个臭妹妹')</span></span><br><span class="line"><span class="regexp">w.fn.init [div, prevObject: w.fn.init(1)]</span></span><br><span class="line"><span class="regexp">$('div').text('&lt;h1&gt;你们都是我的大宝贝&lt;/</span>h1&gt;<span class="string">')</span></span><br><span class="line"><span class="string">w.fn.init [div, prevObject: w.fn.init(1)]</span></span><br><span class="line"><span class="string">$('</span>div<span class="string">').html('</span>&lt;h1&gt;你个臭妹妹&lt;<span class="regexp">/h1&gt;')</span></span><br><span class="line"><span class="regexp">w.fn.init [div, prevObject: w.fn.init(1)]</span></span><br><span class="line"><span class="regexp">"""</span></span><br><span class="line"><span class="regexp"># 获取值操作</span></span><br><span class="line"><span class="regexp">"""</span></span><br><span class="line"><span class="regexp">js													jQuery</span></span><br><span class="line"><span class="regexp">.value											.val()</span></span><br><span class="line"><span class="regexp">"""</span></span><br><span class="line"><span class="regexp">$('#d1').val()</span></span><br><span class="line"><span class="regexp">"sasdasdsadsadad"</span></span><br><span class="line"><span class="regexp">$('#d1').val('520快乐')  # 括号内不加参数就是获取加了就是设置</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">w.fn.init [input#d1]</span></span><br><span class="line"><span class="regexp">$('#d2').val()</span></span><br><span class="line"><span class="regexp">"C:\fakepath\01_测试路由.png"</span></span><br><span class="line"><span class="regexp">$('#d2')[0].files[0]  # 牢记两个对象之间的转换</span></span><br><span class="line"><span class="regexp">File &#123;name: "01_测试路由.png", lastModified: 1557043083000, lastModifiedDate: Sun May 05 2019 15:58:03 GMT+0800 (中国标准时间), webkitRelativePath: "", size: 28733, …&#125;</span></span><br><span class="line"><span class="regexp">           </span></span><br><span class="line"><span class="regexp">           </span></span><br><span class="line"><span class="regexp"># 属性操作</span></span><br><span class="line"><span class="regexp">"""</span></span><br><span class="line"><span class="regexp">js中																jQuery</span></span><br><span class="line"><span class="regexp">setAttribute()											attr(name,value)</span></span><br><span class="line"><span class="regexp">getAttribute()											attr(name)</span></span><br><span class="line"><span class="regexp">removeAttribute()										removeAttr(name)</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">在用变量存储对象的时候 js中推荐使用	</span></span><br><span class="line"><span class="regexp">	XXXEle			标签对象</span></span><br><span class="line"><span class="regexp">jQuery中推荐使用</span></span><br><span class="line"><span class="regexp">	$XXXEle			jQuery对象</span></span><br><span class="line"><span class="regexp">"""</span></span><br><span class="line"><span class="regexp">let $pEle = $('p')</span></span><br><span class="line"><span class="regexp">undefined</span></span><br><span class="line"><span class="regexp">$pEle.attr('id')</span></span><br><span class="line"><span class="regexp">"d1"</span></span><br><span class="line"><span class="regexp">$pEle.attr('class')</span></span><br><span class="line"><span class="regexp">undefined</span></span><br><span class="line"><span class="regexp">$pEle.attr('class','c1')</span></span><br><span class="line"><span class="regexp">w.fn.init [p#d1.c1, prevObject: w.fn.init(1)]</span></span><br><span class="line"><span class="regexp">$pEle.attr('id','id666')</span></span><br><span class="line"><span class="regexp">w.fn.init [p#id666.c1, prevObject: w.fn.init(1)]</span></span><br><span class="line"><span class="regexp">$pEle.attr('password','jason123')</span></span><br><span class="line"><span class="regexp">w.fn.init [p#id666.c1, prevObject: w.fn.init(1)]</span></span><br><span class="line"><span class="regexp">$pEle.removeAttr('password')</span></span><br><span class="line"><span class="regexp">w.fn.init [p#id666.c1, prevObject: w.fn.init(1)]       </span></span><br><span class="line"><span class="regexp">      </span></span><br><span class="line"><span class="regexp">           </span></span><br><span class="line"><span class="regexp">"""</span></span><br><span class="line"><span class="regexp">对于标签上有的能够看到的属性和自定义属性用attr</span></span><br><span class="line"><span class="regexp">对于返回布尔值比如checkbox radio option是否被选中用prop</span></span><br><span class="line"><span class="regexp">"""</span></span><br><span class="line"><span class="regexp">           </span></span><br><span class="line"><span class="regexp">$('#d3').attr('checked')</span></span><br><span class="line"><span class="regexp">"checked"</span></span><br><span class="line"><span class="regexp">$('#d2').attr('checked')</span></span><br><span class="line"><span class="regexp">undefined</span></span><br><span class="line"><span class="regexp">$('#d2').attr('checked')</span></span><br><span class="line"><span class="regexp">undefined</span></span><br><span class="line"><span class="regexp">$('#d4').attr('checked')</span></span><br><span class="line"><span class="regexp">undefined</span></span><br><span class="line"><span class="regexp">$('#d3').attr('checked')</span></span><br><span class="line"><span class="regexp">"checked"</span></span><br><span class="line"><span class="regexp">$('#d3').attr('checked','checked')  # 无效</span></span><br><span class="line"><span class="regexp">w.fn.init [input#d3]</span></span><br><span class="line"><span class="regexp">           </span></span><br><span class="line"><span class="regexp">           </span></span><br><span class="line"><span class="regexp">$('#d2').prop('checked')</span></span><br><span class="line"><span class="regexp">false</span></span><br><span class="line"><span class="regexp">$('#d2').prop('checked')</span></span><br><span class="line"><span class="regexp">true</span></span><br><span class="line"><span class="regexp">$('#d3').prop('checked',true)</span></span><br><span class="line"><span class="regexp">w.fn.init [input#d3]</span></span><br><span class="line"><span class="regexp">$('#d3').prop('checked',false)</span></span><br><span class="line"><span class="regexp">w.fn.init [input#d3]</span></span><br><span class="line"><span class="regexp">           </span></span><br><span class="line"><span class="regexp">           </span></span><br><span class="line"><span class="regexp"># 文档处理</span></span><br><span class="line"><span class="regexp">"""</span></span><br><span class="line"><span class="regexp">js																		jQuery</span></span><br><span class="line"><span class="regexp">createElement('p')										$('&lt;p&gt;')</span></span><br><span class="line"><span class="regexp">appendChild()													append()</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">"""</span></span><br><span class="line"><span class="regexp">let $pEle = $('&lt;p&gt;')</span></span><br><span class="line"><span class="regexp">$pEle.text('你好啊 草莓要不要来几个?')</span></span><br><span class="line"><span class="regexp">$pEle.attr('id','d1')          </span></span><br><span class="line"><span class="regexp">$('#d1').append($pEle)  # 内部尾部追加</span></span><br><span class="line"><span class="regexp">$pEle.appendTo($('#d1')) </span></span><br><span class="line"><span class="regexp">           </span></span><br><span class="line"><span class="regexp">$('#d1').prepend($pEle)  # 内部头部追加</span></span><br><span class="line"><span class="regexp">w.fn.init [div#d1]</span></span><br><span class="line"><span class="regexp">$pEle.prependTo($('#d1'))</span></span><br><span class="line"><span class="regexp">w.fn.init [p#d1, prevObject: w.fn.init(1)]</span></span><br><span class="line"><span class="regexp">         </span></span><br><span class="line"><span class="regexp">$('#d2').after($pEle)  # 放在某个标签后面</span></span><br><span class="line"><span class="regexp">w.fn.init [p#d2]</span></span><br><span class="line"><span class="regexp">$pEle.insertAfter($('#d1'))</span></span><br><span class="line"><span class="regexp">        </span></span><br><span class="line"><span class="regexp">$('#d1').before($pEle)</span></span><br><span class="line"><span class="regexp">w.fn.init [div#d1]</span></span><br><span class="line"><span class="regexp">$pEle.insertBefore($('#d2'))</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">$('#d1').remove()  # 将标签从DOM树中删除</span></span><br><span class="line"><span class="regexp">w.fn.init [div#d1]</span></span><br><span class="line"><span class="regexp">           </span></span><br><span class="line"><span class="regexp">$('#d1').empty()  # 清空标签内部所有的内容</span></span><br><span class="line"><span class="regexp">w.fn.init [div#d1]</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 第一种</span></span><br><span class="line">  $(<span class="string">'#d1'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">          alert(<span class="string">'别说话 吻我'</span>)</span><br><span class="line">  &#125;);</span><br><span class="line">  </span><br><span class="line"><span class="comment">// 第二种(功能更加强大 还支持事件委托)</span></span><br><span class="line">  $(<span class="string">'#d2'</span>).on(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">          alert(<span class="string">'借我钱买草莓 后面还你'</span>)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>

<ul>
<li><p>克隆事件</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;button id=<span class="string">"d1"</span>&gt;屠龙宝刀，点击就送&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">  $('#d1').on('click',function () &#123;</span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/ console.log(this)  /</span><span class="regexp">/ this指代是当前被操作的标签对象</span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/ $(this).clone().insertAfter($('body'))  /</span><span class="regexp">/ clone默认情况下只克隆html和css 不克隆事件</span></span><br><span class="line"><span class="regexp">    $(this).clone(true).insertAfter($('body'))  /</span><span class="regexp">/ 括号内加true即可克隆事件</span></span><br><span class="line"><span class="regexp">  &#125;)</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>自定义模态框</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;&quot;&quot;</span><br><span class="line">模态框内部本质就是给标签移除或者添加上hide属性</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>
</li>
<li><p>左侧菜单</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    $(<span class="string">'.title'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 先给所有的items加hide</span></span><br><span class="line">      $(<span class="string">'.items'</span>).addClass(<span class="string">'hide'</span>)</span><br><span class="line">      <span class="comment">// 然后将被点击标签内部的hide移除</span></span><br><span class="line">      $(<span class="keyword">this</span>).children().removeClass(<span class="string">'hide'</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;!--尝试用一行代码搞定上面的操作--&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>返回顶部</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    $(<span class="built_in">window</span>).scroll(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">	      <span class="keyword">if</span>($(<span class="built_in">window</span>).scrollTop() &gt; <span class="number">300</span>)&#123;</span><br><span class="line">	          $(<span class="string">'#d1'</span>).removeClass(<span class="string">'hide'</span>)</span><br><span class="line">	      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">	          $(<span class="string">'#d1'</span>).addClass(<span class="string">'hide'</span>)</span><br><span class="line">	      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>自定义登陆校验</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"># 在获取用户的用户名和密码的时候 用户如果没有填写 应该给用户展示提示信息</span><br><span class="line">&lt;p&gt;username:</span><br><span class="line">    &lt;input type=<span class="string">"text"</span> id=<span class="string">"username"</span>&gt;</span><br><span class="line">    &lt;span style=<span class="string">"color: red"</span>&gt;&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>p&gt;</span><br><span class="line">&lt;p&gt;password:</span><br><span class="line">    &lt;input type=<span class="string">"text"</span> id=<span class="string">"password"</span>&gt;</span><br><span class="line">    &lt;span style=<span class="string">"color: red"</span>&gt;&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>p&gt;</span><br><span class="line">&lt;button id=<span class="string">"d1"</span>&gt;提交&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">    let $userName = $('#username')</span></span><br><span class="line"><span class="regexp">    let $passWord = $('#password')</span></span><br><span class="line"><span class="regexp">    $('#d1').click(function () &#123;</span></span><br><span class="line"><span class="regexp">        /</span><span class="regexp">/ 获取用户输入的用户名和密码 做校验</span></span><br><span class="line"><span class="regexp">        let userName = $userName.val()</span></span><br><span class="line"><span class="regexp">        let passWord = $passWord.val()</span></span><br><span class="line"><span class="regexp">        if (!userName)&#123;</span></span><br><span class="line"><span class="regexp">            $userName.next().text("用户名不能为空")</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">        if (!passWord)&#123;</span></span><br><span class="line"><span class="regexp">            $passWord.next().text('密码不能为空')</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">    &#125;)</span></span><br><span class="line"><span class="regexp">    $('input').focus(function () &#123;</span></span><br><span class="line"><span class="regexp">        $(this).next().text('')</span></span><br><span class="line"><span class="regexp">    &#125;)</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>input实时监控</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;input type=<span class="string">"text"</span> id=<span class="string">"d1"</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    $(<span class="string">'#d1'</span>).on(<span class="string">'input'</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.value)  </span><br><span class="line">    &#125;)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>hover事件</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// $("#d1").hover(function () &#123;  // 鼠标悬浮 + 鼠标移开</span></span><br><span class="line">    <span class="comment">//     alert(123)</span></span><br><span class="line">    <span class="comment">// &#125;)</span></span><br><span class="line"></span><br><span class="line">    $(<span class="string">'#d1'</span>).hover(</span><br><span class="line">        <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            alert(<span class="string">'我来了'</span>)  <span class="comment">// 悬浮</span></span><br><span class="line">    &#125;,</span><br><span class="line">        <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            alert(<span class="string">'我溜了'</span>)  <span class="comment">// 移开</span></span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>键盘按键按下事件</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    $(<span class="built_in">window</span>).keydown(<span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(event.keyCode)</span><br><span class="line">        <span class="keyword">if</span> (event.keyCode === <span class="number">16</span>)&#123;</span><br><span class="line">            alert(<span class="string">'你按了shift键'</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="阻止后续事件执行"><a href="#阻止后续事件执行" class="headerlink" title="阻止后续事件执行"></a>阻止后续事件执行</h3></li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">	  $(<span class="string">'#d2'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">	      $(<span class="string">'#d1'</span>).text(<span class="string">'宝贝 你能看到我吗?'</span>)</span><br><span class="line">	      <span class="comment">// 阻止标签后续事件的执行 方式1</span></span><br><span class="line">	      <span class="comment">// return false</span></span><br><span class="line">	      <span class="comment">// 阻止标签后续事件的执行 方式2</span></span><br><span class="line">	      <span class="comment">// e.preventDefault()</span></span><br><span class="line">	  &#125;)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="阻止事件冒泡"><a href="#阻止事件冒泡" class="headerlink" title="阻止事件冒泡"></a>阻止事件冒泡</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    $(<span class="string">'#d1'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        alert(<span class="string">'div'</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    $(<span class="string">'#d2'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        alert(<span class="string">'p'</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    $(<span class="string">'#d3'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">        alert(<span class="string">'span'</span>)</span><br><span class="line">        <span class="comment">// 阻止事件冒泡的方式1</span></span><br><span class="line">        <span class="comment">// return false</span></span><br><span class="line">        <span class="comment">// 阻止事件冒泡的方式2</span></span><br><span class="line">        <span class="comment">// e.stopPropagation()</span></span><br><span class="line">    &#125;)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="事件委托"><a href="#事件委托" class="headerlink" title="事件委托"></a>事件委托</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;button&gt;是兄弟，就来砍我!!!&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/ 给页面上所有的button标签绑定点击事件</span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/ $('button').click(function () &#123;  /</span><span class="regexp">/ 无法影响到动态创建的标签</span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/     alert(123)</span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/ &#125;)</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/ 事件委托     </span></span><br><span class="line"><span class="regexp">    $('body').on('click','button',function () &#123;</span></span><br><span class="line"><span class="regexp">        alert(123)  /</span><span class="regexp">/ 在指定的范围内 将事件委托给某个标签 无论该标签是事先写好的还是后面动态创建的</span></span><br><span class="line"><span class="regexp">    &#125;)</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="页面加载"><a href="#页面加载" class="headerlink" title="页面加载"></a>页面加载</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"># 等待页面加载完毕再执行代码</span><br><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">// js代码</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="string">""</span><span class="string">"jQuery中等待页面加载完毕"</span><span class="string">""</span></span><br><span class="line"># 第一种</span><br><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">// js代码</span></span><br><span class="line">&#125;)</span><br><span class="line"># 第二种</span><br><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">// js代码</span></span><br><span class="line">&#125;)</span><br><span class="line"># 第三种</span><br><span class="line"><span class="string">""</span><span class="string">"直接写在body内部最下方"</span><span class="string">""</span></span><br></pre></td></tr></table></figure>

<h3 id="动画效果"><a href="#动画效果" class="headerlink" title="动画效果"></a>动画效果</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">$(<span class="string">'#d1'</span>).hide(<span class="number">5000</span>)</span><br><span class="line">w.fn.init [div#d1]</span><br><span class="line">$(<span class="string">'#d1'</span>).show(<span class="number">5000</span>)</span><br><span class="line">w.fn.init [div#d1]</span><br><span class="line">$(<span class="string">'#d1'</span>).slideUp(<span class="number">5000</span>)</span><br><span class="line">w.fn.init [div#d1]</span><br><span class="line">$(<span class="string">'#d1'</span>).slideDown(<span class="number">5000</span>)</span><br><span class="line">w.fn.init [div#d1]</span><br><span class="line">$(<span class="string">'#d1'</span>).fadeOut(<span class="number">5000</span>)</span><br><span class="line">w.fn.init [div#d1]</span><br><span class="line">$(<span class="string">'#d1'</span>).fadeIn(<span class="number">5000</span>)</span><br><span class="line">w.fn.init [div#d1]</span><br><span class="line">$(<span class="string">'#d1'</span>).fadeTo(<span class="number">5000</span>,<span class="number">0.4</span>)</span><br><span class="line">w.fn.init [div#d1]</span><br></pre></td></tr></table></figure>

<h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"># each()</span><br><span class="line"># 第一种方式</span><br><span class="line">$(<span class="string">'div'</span>)</span><br><span class="line">w.fn.init(<span class="number">10</span>) [div, div, div, div, div, div, div, div, div, div, <span class="attr">prevObject</span>: w.fn.init(<span class="number">1</span>)]</span><br><span class="line">$(<span class="string">'div'</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params">index</span>)</span>&#123;<span class="built_in">console</span>.log(index)&#125;)</span><br><span class="line">VM181:<span class="number">1</span> <span class="number">0</span></span><br><span class="line">VM181:<span class="number">1</span> <span class="number">1</span></span><br><span class="line">VM181:<span class="number">1</span> <span class="number">2</span></span><br><span class="line">VM181:<span class="number">1</span> <span class="number">3</span></span><br><span class="line">VM181:<span class="number">1</span> <span class="number">4</span></span><br><span class="line">VM181:<span class="number">1</span> <span class="number">5</span></span><br><span class="line">VM181:<span class="number">1</span> <span class="number">6</span></span><br><span class="line">VM181:<span class="number">1</span> <span class="number">7</span></span><br><span class="line">VM181:<span class="number">1</span> <span class="number">8</span></span><br><span class="line">VM181:<span class="number">1</span> <span class="number">9</span></span><br><span class="line"></span><br><span class="line">$(<span class="string">'div'</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params">index,obj</span>)</span>&#123;<span class="built_in">console</span>.log(index,obj)&#125;)</span><br><span class="line">VM243:<span class="number">1</span> <span class="number">0</span> &lt;div&gt;​<span class="number">1</span>​&lt;<span class="regexp">/div&gt;​</span></span><br><span class="line"><span class="regexp">VM243:1 1 &lt;div&gt;​2​&lt;/</span>div&gt;​</span><br><span class="line">VM243:<span class="number">1</span> <span class="number">2</span> &lt;div&gt;​<span class="number">3</span>​&lt;<span class="regexp">/div&gt;​</span></span><br><span class="line"><span class="regexp">VM243:1 3 &lt;div&gt;​4​&lt;/</span>div&gt;​</span><br><span class="line">VM243:<span class="number">1</span> <span class="number">4</span> &lt;div&gt;​<span class="number">5</span>​&lt;<span class="regexp">/div&gt;​</span></span><br><span class="line"><span class="regexp">VM243:1 5 &lt;div&gt;​6​&lt;/</span>div&gt;​</span><br><span class="line">VM243:<span class="number">1</span> <span class="number">6</span> &lt;div&gt;​<span class="number">7</span>​&lt;<span class="regexp">/div&gt;​</span></span><br><span class="line"><span class="regexp">VM243:1 7 &lt;div&gt;​8​&lt;/</span>div&gt;​</span><br><span class="line">VM243:<span class="number">1</span> <span class="number">8</span> &lt;div&gt;​<span class="number">9</span>​&lt;<span class="regexp">/div&gt;​</span></span><br><span class="line"><span class="regexp">VM243:1 9 &lt;div&gt;​10​&lt;/</span>div&gt;​</span><br><span class="line"></span><br><span class="line"># 第二种方式</span><br><span class="line">$.each([<span class="number">111</span>,<span class="number">222</span>,<span class="number">333</span>],<span class="function"><span class="keyword">function</span>(<span class="params">index,obj</span>)</span>&#123;<span class="built_in">console</span>.log(index,obj)&#125;)</span><br><span class="line">VM484:<span class="number">1</span> <span class="number">0</span> <span class="number">111</span></span><br><span class="line">VM484:<span class="number">1</span> <span class="number">1</span> <span class="number">222</span></span><br><span class="line">VM484:<span class="number">1</span> <span class="number">2</span> <span class="number">333</span></span><br><span class="line">(<span class="number">3</span>) [<span class="number">111</span>, <span class="number">222</span>, <span class="number">333</span>]</span><br><span class="line"><span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string">有了each之后 就无需自己写for循环了 用它更加的方便</span></span><br><span class="line"><span class="string">"</span><span class="string">""</span></span><br><span class="line"># data()</span><br><span class="line"><span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string">能够让标签帮我们存储数据 并且用户肉眼看不见</span></span><br><span class="line"><span class="string">"</span><span class="string">""</span></span><br><span class="line">$(<span class="string">'div'</span>).data(<span class="string">'info'</span>,<span class="string">'回来吧，我原谅你了!'</span>)</span><br><span class="line">w.fn.init(10) [div#d1, div, div, div, div, div, div, div, div, div, prevObject: w.fn.init(1)]</span><br><span class="line">               </span><br><span class="line">$(<span class="string">'div'</span>).first().data(<span class="string">'info'</span>)</span><br><span class="line"><span class="string">"回来吧，我原谅你了!"</span></span><br><span class="line">$(<span class="string">'div'</span>).last().data(<span class="string">'info'</span>)</span><br><span class="line"><span class="string">"回来吧，我原谅你了!"</span></span><br><span class="line">               </span><br><span class="line">$(<span class="string">'div'</span>).first().data(<span class="string">'xxx'</span>)</span><br><span class="line"><span class="literal">undefined</span></span><br><span class="line">$(<span class="string">'div'</span>).first().removeData(<span class="string">'info'</span>)</span><br><span class="line">w.fn.init [div#d1, prevObject: w.fn.init(10)]</span><br><span class="line">           </span><br><span class="line">$(<span class="string">'div'</span>).first().data(<span class="string">'info'</span>)</span><br><span class="line"><span class="literal">undefined</span></span><br><span class="line">$(<span class="string">'div'</span>).last().data(<span class="string">'info'</span>)</span><br><span class="line"><span class="string">"回来吧，我原谅你了!"</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端开发</category>
      </categories>
      <tags>
        <tag>前端入门</tag>
      </tags>
  </entry>
  <entry>
    <title>[JavaScript入门]</title>
    <url>/2019/07/12/JavaScript%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h3 id="Js简介"><a href="#Js简介" class="headerlink" title="Js简介"></a>Js简介</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>js也是一门编程语言 它也是可以写后端代码的</span><br><span class="line">	用js一统天下 前后端都可以写</span><br><span class="line">  	nodejs 支持js代码跑在后端服务器上</span><br><span class="line">    然而并不能 想的太天真了!!!</span><br><span class="line"><span class="number">2.</span>js跟java一毛钱关系都没有，纯粹是为了蹭当时java的热度</span><br><span class="line"></span><br><span class="line">ECMAScript和JavaScript的关系</span><br><span class="line">因此ECMAScript和JavaScript的关系是，前者是后者的规格，后者是前者的一种实现。</span><br><span class="line"></span><br><span class="line">JS版本</span><br><span class="line">	主要还是用的<span class="number">5.1</span>和<span class="number">6.0</span></span><br><span class="line"></span><br><span class="line">JavaScript 是脚本语言</span><br><span class="line">JavaScript 是一种轻量级的编程语言。</span><br><span class="line">JavaScript 是可插入 HTML 页面的编程代码。</span><br><span class="line">JavaScript 插入 HTML 页面后，可由所有的现代浏览器执行。</span><br><span class="line">JavaScript 很容易学习</span><br><span class="line"></span><br><span class="line"># js的注释</span><br><span class="line"><span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string">// 单行注释</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">/*</span></span><br><span class="line"><span class="string">多行注释1</span></span><br><span class="line"><span class="string">多行注释2</span></span><br><span class="line"><span class="string">多行注释3</span></span><br><span class="line"><span class="string">*/</span></span><br><span class="line"><span class="string">"</span><span class="string">""</span></span><br><span class="line"></span><br><span class="line"># 两种引入方式</span><br><span class="line">    <span class="number">1.</span>script标签内部直接书写js代码</span><br><span class="line">    <span class="number">2.</span>script标签src属性引入外部js代码</span><br><span class="line"></span><br><span class="line"># js语法结构</span><br><span class="line">	js是以分号作为语句的结束</span><br><span class="line">  但是如果你不写分号，问题也不大 也能够正常执行 但是它就相当于没有结束符</span><br></pre></td></tr></table></figure>

<h3 id="js学习流程"><a href="#js学习流程" class="headerlink" title="js学习流程"></a>js学习流程</h3><ul>
<li>变量</li>
<li>数据类型</li>
<li>流程控制</li>
<li>函数</li>
<li>对象</li>
<li>内置方法/模块</li>
</ul>
<h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string">在js中 首次定义一个变量名的时候需要用关键字声明</span></span><br><span class="line"><span class="string">	1.关键字var</span></span><br><span class="line"><span class="string">		var name='jason'</span></span><br><span class="line"><span class="string">	2.es6推出的新语法</span></span><br><span class="line"><span class="string">		let name='jason'</span></span><br><span class="line"><span class="string">		如果你的编辑器支持的版本是5.1那么无法使用let</span></span><br><span class="line"><span class="string">		如果是6.0则向下兼容 var let</span></span><br><span class="line"><span class="string">"</span><span class="string">""</span></span><br><span class="line"># var与let的区别</span><br><span class="line">n = <span class="number">10</span></span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">  print(n)</span><br><span class="line">print(n)  </span><br><span class="line"># var 5		let 10</span><br><span class="line"></span><br><span class="line"><span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string">var在for循环里面定义也会影响到全局</span></span><br><span class="line"><span class="string">let在局部定义只会在局部生效</span></span><br><span class="line"><span class="string">"</span><span class="string">""</span></span><br></pre></td></tr></table></figure>

<h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"># python中没有真正意义上的常量 默认全大写就是表示常量</span><br><span class="line"># js中是有真正意义上的常量的</span><br><span class="line"><span class="keyword">const</span> pi = <span class="number">3.14</span></span><br></pre></td></tr></table></figure>

<h3 id="变量-1"><a href="#变量-1" class="headerlink" title="变量"></a>变量</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;&quot;&quot;</span><br><span class="line">js变量的命名规范</span><br><span class="line">	1.变量名只能是 </span><br><span class="line">		数字 字母 下划线 $</span><br><span class="line">	2.变量名命名规范(不遵循也可以)</span><br><span class="line">        1.js中推荐使用驼峰式命名</span><br><span class="line">            userName</span><br><span class="line">            dataOfDb</span><br><span class="line">        2.python推荐使用下划线的方式</span><br><span class="line">            user_name</span><br><span class="line">            data_of_db</span><br><span class="line">	3.不能用关键字作为变量名</span><br><span class="line">			不需要记忆 </span><br><span class="line"></span><br><span class="line">js代码的书写位置</span><br><span class="line">	1.可以单独开设js文件书写</span><br><span class="line">	2.还可以直接在浏览器提供的console界面书写</span><br><span class="line">		在用浏览器书写js的时候 左上方的清空按钮只是清空当前页面 代码其实还在</span><br><span class="line">		如果你想要重新来 最好重新开设一个 页面</span><br><span class="line">		(在使用浏览器书写 你自己的js代码的时候推荐你在 自己的html页面打开)</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>

<h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><p>js也是一门面向对象 的编程语言 即一切皆对象!!!</p>
<p>js/python是一门拥有动态类型</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">name = <span class="string">'jason'</span></span><br><span class="line">name = <span class="number">123</span></span><br><span class="line">name = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"># name可以指向任意的数据类型 </span><br><span class="line"># 但是有一些语言中，变量名之内指向一种后续不能更改</span><br></pre></td></tr></table></figure>

<h3 id="数值类型-number"><a href="#数值类型-number" class="headerlink" title="数值类型(number)"></a>数值类型(number)</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">11</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="number">11.11</span>;</span><br><span class="line"><span class="comment">// 如何查看当前数据类型</span></span><br><span class="line"><span class="keyword">typeof</span> a;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">11</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="number">11.11</span>;</span><br><span class="line"><span class="keyword">typeof</span> a;</span><br><span class="line"><span class="keyword">typeof</span> b;</span><br><span class="line"><span class="string">"number"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 特殊的 NaN:数值类型 表示的意思是“不是一个数字” NOT A NUMBER</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 类型转换</span></span><br><span class="line"><span class="built_in">parseInt</span>()</span><br><span class="line"><span class="built_in">parseFloat</span>()</span><br><span class="line"></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">'12312312'</span>)</span><br><span class="line"><span class="number">12312312</span></span><br><span class="line"><span class="built_in">parseFloat</span>(<span class="string">'11.11'</span>)</span><br><span class="line"><span class="number">11.11</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">'11.11'</span>)</span><br><span class="line"><span class="number">11</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">'123sdasdajs2312dasd'</span>)</span><br><span class="line"><span class="number">123</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">'asdasdad123sdasdajs2312dasd'</span>)</span><br><span class="line"><span class="literal">NaN</span></span><br></pre></td></tr></table></figure>

<h3 id="字符类型-string"><a href="#字符类型-string" class="headerlink" title="字符类型(string)"></a>字符类型(string)</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="string">'jason'</span></span><br><span class="line"><span class="literal">undefined</span></span><br><span class="line"><span class="keyword">typeof</span> s</span><br><span class="line"><span class="string">"string"</span></span><br><span class="line"><span class="keyword">var</span> s1 = <span class="string">"jason"</span></span><br><span class="line"><span class="literal">undefined</span></span><br><span class="line"><span class="keyword">typeof</span> s1;</span><br><span class="line"><span class="string">"string"</span></span><br><span class="line"><span class="keyword">var</span> s2 = <span class="string">''</span><span class="string">'egon'</span><span class="string">''</span>  <span class="comment">// 不支持三引号</span></span><br><span class="line">VM665:<span class="number">1</span> Uncaught <span class="built_in">SyntaxError</span>: Unexpected string</span><br><span class="line"></span><br><span class="line"><span class="comment">// 模版字符串</span></span><br><span class="line"><span class="keyword">var</span> s3 = <span class="string">`</span></span><br><span class="line"><span class="string">asdkajsd</span></span><br><span class="line"><span class="string">sdjkladj</span></span><br><span class="line"><span class="string">asdjlajdkl</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line"><span class="keyword">typeof</span> s3</span><br><span class="line"><span class="string">"string"</span></span><br><span class="line"><span class="comment">// 模版字符串除了可以定义多行文本之外还可以实现格式化字符串操作</span></span><br><span class="line"><span class="comment">// 书写$&#123;&#125; 会自动去前面找大括号里面的变量名对应的值 如果没有定义直接报错</span></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">'jason'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> age = <span class="number">18</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> sss = <span class="string">`</span></span><br><span class="line"><span class="string">   my name is <span class="subst">$&#123;name&#125;</span> and my age is <span class="subst">$&#123;age&#125;</span></span></span><br><span class="line"><span class="string">`</span></span><br><span class="line">sss</span><br><span class="line"><span class="string">"</span></span><br><span class="line"><span class="string">   my name is jason and my age is 18</span></span><br><span class="line"><span class="string">"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> s4 = <span class="string">`my name is <span class="subst">$&#123;namemmmmm&#125;</span>`</span></span><br><span class="line">VM1140:<span class="number">1</span> Uncaught <span class="built_in">ReferenceError</span>: namemmmmm is not defined</span><br><span class="line">    at &lt;anonymous&gt;:<span class="number">1</span>:<span class="number">24</span></span><br><span class="line"><span class="comment">// 在写js代码的时候 不要去管左侧箭头的内容</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 字符串的拼接</span></span><br><span class="line"><span class="comment">// 在python中不推荐你使用+做拼接 join</span></span><br><span class="line"><span class="comment">// 在js中推荐你直接使用+做拼接</span></span><br><span class="line">name + age</span><br></pre></td></tr></table></figure>

<h3 id="字符类型常用方法"><a href="#字符类型常用方法" class="headerlink" title="字符类型常用方法"></a>字符类型常用方法</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string">.length	返回长度</span></span><br><span class="line"><span class="string">.trim()	移除空白</span></span><br><span class="line"><span class="string">.trimLeft()	移除左边的空白</span></span><br><span class="line"><span class="string">.trimRight()	移除右边的空白</span></span><br><span class="line"><span class="string">.charAt(n)	返回第n个字符</span></span><br><span class="line"><span class="string">.concat(value, ...)	拼接</span></span><br><span class="line"><span class="string">	联想记忆</span></span><br><span class="line"><span class="string">		MySQL</span></span><br><span class="line"><span class="string">			concat</span></span><br><span class="line"><span class="string">			concat_ws</span></span><br><span class="line"><span class="string">			group_concat</span></span><br><span class="line"><span class="string">		python</span></span><br><span class="line"><span class="string">			join</span></span><br><span class="line"><span class="string">.indexOf(substring, start)	子序列位置</span></span><br><span class="line"><span class="string">.substring(from, to)	根据索引获取子序列</span></span><br><span class="line"><span class="string">.slice(start, end)	切片</span></span><br><span class="line"><span class="string">.toLowerCase()	小写</span></span><br><span class="line"><span class="string">.toUpperCase()	大写</span></span><br><span class="line"><span class="string">.split(delimiter, limit)	分割</span></span><br><span class="line"><span class="string">"</span><span class="string">""</span></span><br><span class="line"># 记忆的时候一定要对比python去记 </span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">'egondsb'</span></span><br><span class="line"><span class="literal">undefined</span></span><br><span class="line"></span><br><span class="line">name.length</span><br><span class="line"><span class="number">7</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> name1 = <span class="string">'  egonDSB  '</span></span><br><span class="line"><span class="literal">undefined</span></span><br><span class="line">name1</span><br><span class="line"><span class="string">"  egonDSB  "</span></span><br><span class="line">name1.trim()</span><br><span class="line"><span class="string">"egonDSB"</span></span><br><span class="line">name1.trimLeft()</span><br><span class="line"><span class="string">"egonDSB  "</span></span><br><span class="line">name1.trimRight()</span><br><span class="line"><span class="string">"  egonDSB"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> name2 = <span class="string">'$$jason$$'</span></span><br><span class="line"><span class="literal">undefined</span></span><br><span class="line">name2.trim('$')  # 不能加括号指定去除的内容</span><br><span class="line"><span class="string">"$$jason$$"</span></span><br><span class="line"></span><br><span class="line">name2.charAt(<span class="number">0</span>)</span><br><span class="line"><span class="string">"$"</span></span><br><span class="line">name2.indexOf(<span class="string">'as'</span>)</span><br><span class="line"><span class="number">3</span></span><br><span class="line"></span><br><span class="line">name2.substring(<span class="number">0</span>,<span class="number">5</span>)</span><br><span class="line"><span class="string">"$$jas"</span></span><br><span class="line">name2.slice(<span class="number">0</span>,<span class="number">5</span>)</span><br><span class="line"><span class="string">"$$jas"</span></span><br><span class="line">name2.substring(0,-1)  # 不识别负数</span><br><span class="line"><span class="string">""</span></span><br><span class="line">name2.slice(0,-1)  # 后面推荐就使用slice就可以</span><br><span class="line"><span class="string">"$$jason$"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> name3 = <span class="string">'eGoNDsb123666HahA'</span></span><br><span class="line"><span class="literal">undefined</span></span><br><span class="line">name3.toLowerCase()</span><br><span class="line"><span class="string">"egondsb123666haha"</span></span><br><span class="line">name3.toUpperCase()</span><br><span class="line"><span class="string">"EGONDSB123666HAHA"</span></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">'tank|hecha|liaomei|mengsao|...'</span></span><br><span class="line"><span class="literal">undefined</span></span><br><span class="line"></span><br><span class="line">name.split(<span class="string">'|'</span>)</span><br><span class="line">(<span class="number">5</span>) [<span class="string">"tank"</span>, <span class="string">"hecha"</span>, <span class="string">"liaomei"</span>, <span class="string">"mengsao"</span>, <span class="string">"..."</span>]</span><br><span class="line">name.split(<span class="string">'|'</span>,<span class="number">2</span>)</span><br><span class="line">(<span class="number">2</span>) [<span class="string">"tank"</span>, <span class="string">"hecha"</span>]<span class="number">0</span>: <span class="string">"tank"</span><span class="number">1</span>: <span class="string">"hecha"</span>length: <span class="number">2</span>__proto__: <span class="built_in">Array</span>(<span class="number">0</span>)</span><br><span class="line">name.split('|',10)  # 第二个参数不是限制切割字符的个数还是获取切割之后元素的个数</span><br><span class="line">(<span class="number">5</span>) [<span class="string">"tank"</span>, <span class="string">"hecha"</span>, <span class="string">"liaomei"</span>, <span class="string">"mengsao"</span>, <span class="string">"..."</span>]</span><br><span class="line"></span><br><span class="line">name.concat(name1,name2)</span><br><span class="line"><span class="string">"tank|hecha|liaomei|mengsao|...  egonDSB  $$jason$$"</span></span><br><span class="line"><span class="keyword">var</span> p = <span class="number">1111</span></span><br><span class="line"><span class="literal">undefined</span></span><br><span class="line">name.concat(p)  # js是弱类型(内部会自动转换成相同的数据类型做操作)</span><br><span class="line"><span class="string">"tank|hecha|liaomei|mengsao|...1111"</span></span><br><span class="line"></span><br><span class="line">l = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>]</span><br><span class="line">res = '|'.join(l)  # 直接报错</span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure>

<h1 id="布尔值-boolean"><a href="#布尔值-boolean" class="headerlink" title="布尔值(boolean)"></a>布尔值(boolean)</h1><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string">1.在python中布尔值是首字母大写的</span></span><br><span class="line"><span class="string">	True</span></span><br><span class="line"><span class="string">	False</span></span><br><span class="line"><span class="string">2.但是在js中布尔值是全小写的</span></span><br><span class="line"><span class="string">	true</span></span><br><span class="line"><span class="string">	false</span></span><br><span class="line"><span class="string"># 布尔值是false的有哪些</span></span><br><span class="line"><span class="string">	空字符串、0、null、undefined、NaN</span></span><br><span class="line"><span class="string">"</span><span class="string">""</span></span><br></pre></td></tr></table></figure>

<h3 id="null与undefined"><a href="#null与undefined" class="headerlink" title="null与undefined"></a>null与undefined</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string">null</span></span><br><span class="line"><span class="string">	表示值为空 一般都是指定或者清空一个变量时使用</span></span><br><span class="line"><span class="string">		name = 'jason'</span></span><br><span class="line"><span class="string">		name = null</span></span><br><span class="line"><span class="string">undefined</span></span><br><span class="line"><span class="string">	表示声明了一个变量 但是没有做初始化操作(没有给值)</span></span><br><span class="line"><span class="string">	函数没有指定返回值的时候 返回的也是undefined</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">参考博客图解：厕所卷纸</span></span><br><span class="line"><span class="string">https://www.cnblogs.com/Dominic-Ji/p/9111021.html</span></span><br><span class="line"><span class="string">"</span><span class="string">""</span></span><br></pre></td></tr></table></figure>

<h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><p><strong>一切皆对象</strong></p>
<ul>
<li><p>数组(类似于python里面的列表) []</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> l = [<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>,<span class="number">55</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">typeof</span> l</span><br><span class="line"><span class="string">"object"</span></span><br><span class="line"><span class="keyword">var</span> l1 = [<span class="number">11</span>,<span class="string">'sdasd'</span>,<span class="number">11.11</span>,<span class="literal">true</span>]</span><br><span class="line"></span><br><span class="line">l1[<span class="number">1</span>]</span><br><span class="line"><span class="string">"sdasd"</span></span><br><span class="line">l1[-1]  # 不支持负数索引</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> l = [<span class="number">111</span>,<span class="number">222</span>,<span class="number">333</span>,<span class="number">444</span>,<span class="number">555</span>,<span class="number">666</span>]</span><br><span class="line"><span class="literal">undefined</span></span><br><span class="line">l.length</span><br><span class="line"><span class="number">6</span></span><br><span class="line">l.push(<span class="number">777</span>)</span><br><span class="line"><span class="number">7</span></span><br><span class="line">l</span><br><span class="line">(<span class="number">7</span>) [<span class="number">111</span>, <span class="number">222</span>, <span class="number">333</span>, <span class="number">444</span>, <span class="number">555</span>, <span class="number">666</span>, <span class="number">777</span>]</span><br><span class="line">l.pop()</span><br><span class="line"><span class="number">777</span></span><br><span class="line">l</span><br><span class="line">(<span class="number">6</span>) [<span class="number">111</span>, <span class="number">222</span>, <span class="number">333</span>, <span class="number">444</span>, <span class="number">555</span>, <span class="number">666</span>]</span><br><span class="line">l.unshift(<span class="number">123</span>)</span><br><span class="line"><span class="number">7</span></span><br><span class="line">l</span><br><span class="line">(<span class="number">7</span>) [<span class="number">123</span>, <span class="number">111</span>, <span class="number">222</span>, <span class="number">333</span>, <span class="number">444</span>, <span class="number">555</span>, <span class="number">666</span>]</span><br><span class="line">l.shift()</span><br><span class="line"><span class="number">123</span></span><br><span class="line">l.slice(<span class="number">0</span>,<span class="number">3</span>)</span><br><span class="line">(<span class="number">3</span>) [<span class="number">111</span>, <span class="number">222</span>, <span class="number">333</span>]</span><br><span class="line">l.reverse()</span><br><span class="line">(<span class="number">6</span>) [<span class="number">666</span>, <span class="number">555</span>, <span class="number">444</span>, <span class="number">333</span>, <span class="number">222</span>, <span class="number">111</span>]</span><br><span class="line">l.join('$')  # 跟python刚好相反</span><br><span class="line"><span class="string">"666$555$444$333$222$111"</span></span><br><span class="line"></span><br><span class="line">l.concat([111,222,333])  # extend</span><br><span class="line">(<span class="number">9</span>) [<span class="number">666</span>, <span class="number">555</span>, <span class="number">444</span>, <span class="number">333</span>, <span class="number">222</span>, <span class="number">111</span>, <span class="number">111</span>, <span class="number">222</span>, <span class="number">333</span>]</span><br><span class="line">l.sort()</span><br><span class="line">(<span class="number">6</span>) [<span class="number">111</span>, <span class="number">222</span>, <span class="number">333</span>, <span class="number">444</span>, <span class="number">555</span>, <span class="number">666</span>]</span><br><span class="line"></span><br><span class="line"># 三个比较重要的方法</span><br><span class="line"><span class="keyword">var</span> ll = [<span class="number">111</span>,<span class="number">222</span>,<span class="number">333</span>,<span class="number">444</span>,<span class="number">555</span>,<span class="number">666</span>]</span><br><span class="line">ll.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;<span class="built_in">console</span>.log(value)&#125;,ll)</span><br><span class="line">VM2277:1 111  # 一个参数就是数组里面每一个元素对象</span><br><span class="line">VM2277:<span class="number">1</span> <span class="number">222</span></span><br><span class="line">VM2277:<span class="number">1</span> <span class="number">333</span></span><br><span class="line">VM2277:<span class="number">1</span> <span class="number">444</span></span><br><span class="line">VM2277:<span class="number">1</span> <span class="number">555</span></span><br><span class="line">VM2277:<span class="number">1</span> <span class="number">666</span></span><br><span class="line"></span><br><span class="line">ll.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">value,index</span>)</span>&#123;<span class="built_in">console</span>.log(value,index)&#125;,ll)</span><br><span class="line">VM2346:1 111 0  # 两个参数就是元素 + 元素索引</span><br><span class="line">VM2346:<span class="number">1</span> <span class="number">222</span> <span class="number">1</span></span><br><span class="line">VM2346:<span class="number">1</span> <span class="number">333</span> <span class="number">2</span></span><br><span class="line">VM2346:<span class="number">1</span> <span class="number">444</span> <span class="number">3</span></span><br><span class="line">VM2346:<span class="number">1</span> <span class="number">555</span> <span class="number">4</span></span><br><span class="line">VM2346:<span class="number">1</span> <span class="number">666</span> <span class="number">5</span></span><br><span class="line"><span class="literal">undefined</span></span><br><span class="line">ll.forEach(function(value,index,arr)&#123;console.log(value,index,arr)&#125;,ll)  # 元素 + 元素索引 + 元素的数据来源</span><br><span class="line">VM2430:<span class="number">1</span> <span class="number">111</span> <span class="number">0</span> (<span class="number">6</span>) [<span class="number">111</span>, <span class="number">222</span>, <span class="number">333</span>, <span class="number">444</span>, <span class="number">555</span>, <span class="number">666</span>]</span><br><span class="line">VM2430:<span class="number">1</span> <span class="number">222</span> <span class="number">1</span> (<span class="number">6</span>) [<span class="number">111</span>, <span class="number">222</span>, <span class="number">333</span>, <span class="number">444</span>, <span class="number">555</span>, <span class="number">666</span>]</span><br><span class="line">VM2430:<span class="number">1</span> <span class="number">333</span> <span class="number">2</span> (<span class="number">6</span>) [<span class="number">111</span>, <span class="number">222</span>, <span class="number">333</span>, <span class="number">444</span>, <span class="number">555</span>, <span class="number">666</span>]</span><br><span class="line">VM2430:<span class="number">1</span> <span class="number">444</span> <span class="number">3</span> (<span class="number">6</span>) [<span class="number">111</span>, <span class="number">222</span>, <span class="number">333</span>, <span class="number">444</span>, <span class="number">555</span>, <span class="number">666</span>]</span><br><span class="line">VM2430:<span class="number">1</span> <span class="number">555</span> <span class="number">4</span> (<span class="number">6</span>) [<span class="number">111</span>, <span class="number">222</span>, <span class="number">333</span>, <span class="number">444</span>, <span class="number">555</span>, <span class="number">666</span>]</span><br><span class="line">VM2430:<span class="number">1</span> <span class="number">666</span> <span class="number">5</span> (<span class="number">6</span>) [<span class="number">111</span>, <span class="number">222</span>, <span class="number">333</span>, <span class="number">444</span>, <span class="number">555</span>, <span class="number">666</span>]</span><br><span class="line"><span class="literal">undefined</span></span><br><span class="line"></span><br><span class="line">ll.forEach(function(value,index,arr,xxx)&#123;console.log(value,index,arr,xxx)&#125;,ll)  # 最多三个</span><br><span class="line">VM2532:<span class="number">1</span> <span class="number">111</span> <span class="number">0</span> (<span class="number">6</span>) [<span class="number">111</span>, <span class="number">222</span>, <span class="number">333</span>, <span class="number">444</span>, <span class="number">555</span>, <span class="number">666</span>] <span class="literal">undefined</span></span><br><span class="line">VM2532:<span class="number">1</span> <span class="number">222</span> <span class="number">1</span> (<span class="number">6</span>) [<span class="number">111</span>, <span class="number">222</span>, <span class="number">333</span>, <span class="number">444</span>, <span class="number">555</span>, <span class="number">666</span>] <span class="literal">undefined</span></span><br><span class="line">VM2532:<span class="number">1</span> <span class="number">333</span> <span class="number">2</span> (<span class="number">6</span>) [<span class="number">111</span>, <span class="number">222</span>, <span class="number">333</span>, <span class="number">444</span>, <span class="number">555</span>, <span class="number">666</span>] <span class="literal">undefined</span></span><br><span class="line">VM2532:<span class="number">1</span> <span class="number">444</span> <span class="number">3</span> (<span class="number">6</span>) [<span class="number">111</span>, <span class="number">222</span>, <span class="number">333</span>, <span class="number">444</span>, <span class="number">555</span>, <span class="number">666</span>] <span class="literal">undefined</span></span><br><span class="line">VM2532:<span class="number">1</span> <span class="number">555</span> <span class="number">4</span> (<span class="number">6</span>) [<span class="number">111</span>, <span class="number">222</span>, <span class="number">333</span>, <span class="number">444</span>, <span class="number">555</span>, <span class="number">666</span>] <span class="literal">undefined</span></span><br><span class="line">VM2532:<span class="number">1</span> <span class="number">666</span> <span class="number">5</span> (<span class="number">6</span>) [<span class="number">111</span>, <span class="number">222</span>, <span class="number">333</span>, <span class="number">444</span>, <span class="number">555</span>, <span class="number">666</span>] <span class="literal">undefined</span></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">ll</span><br><span class="line">(<span class="number">6</span>) [<span class="number">111</span>, <span class="number">222</span>, <span class="number">333</span>, <span class="number">444</span>, <span class="number">555</span>, <span class="number">666</span>]</span><br><span class="line">ll.splice(0,3)  # 两个参数 第一个是起始位置 第二个是删除的个数</span><br><span class="line">(<span class="number">3</span>) [<span class="number">111</span>, <span class="number">222</span>, <span class="number">333</span>]</span><br><span class="line">ll</span><br><span class="line">(<span class="number">3</span>) [<span class="number">444</span>, <span class="number">555</span>, <span class="number">666</span>]</span><br><span class="line">ll.splice(0,1,777)  # 先删除后添加</span><br><span class="line">[<span class="number">444</span>]</span><br><span class="line">ll</span><br><span class="line">(<span class="number">3</span>) [<span class="number">777</span>, <span class="number">555</span>, <span class="number">666</span>]</span><br><span class="line">ll.splice(<span class="number">0</span>,<span class="number">1</span>,[<span class="number">111</span>,<span class="number">222</span>,<span class="number">333</span>,<span class="number">444</span>])</span><br><span class="line">[<span class="number">777</span>]</span><br><span class="line">ll</span><br><span class="line">(<span class="number">3</span>) [<span class="built_in">Array</span>(<span class="number">4</span>), <span class="number">555</span>, <span class="number">666</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> l1 = [<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>,<span class="number">55</span>,<span class="number">66</span>]</span><br><span class="line"><span class="literal">undefined</span></span><br><span class="line">l1.map(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;<span class="built_in">console</span>.log(value)&#125;,l1)</span><br><span class="line">VM3115:<span class="number">1</span> <span class="number">11</span></span><br><span class="line">VM3115:<span class="number">1</span> <span class="number">22</span></span><br><span class="line">VM3115:<span class="number">1</span> <span class="number">33</span></span><br><span class="line">VM3115:<span class="number">1</span> <span class="number">44</span></span><br><span class="line">VM3115:<span class="number">1</span> <span class="number">55</span></span><br><span class="line">VM3115:<span class="number">1</span> <span class="number">66</span></span><br><span class="line">l1.map(<span class="function"><span class="keyword">function</span>(<span class="params">value,index</span>)</span>&#123;<span class="keyword">return</span> value*<span class="number">2</span>&#125;,l1)</span><br><span class="line">(<span class="number">6</span>) [<span class="number">22</span>, <span class="number">44</span>, <span class="number">66</span>, <span class="number">88</span>, <span class="number">110</span>, <span class="number">132</span>]</span><br><span class="line">l1.map(<span class="function"><span class="keyword">function</span>(<span class="params">value,index,arr</span>)</span>&#123;<span class="keyword">return</span> value*<span class="number">2</span>&#125;,l1)</span><br><span class="line">(<span class="number">6</span>) [<span class="number">22</span>, <span class="number">44</span>, <span class="number">66</span>, <span class="number">88</span>, <span class="number">110</span>, <span class="number">132</span>]</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"># 算术运算符</span><br><span class="line"><span class="keyword">var</span> x = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> res1 = x++;</span><br><span class="line"><span class="keyword">var</span> res2 = ++x;</span><br><span class="line">res1 <span class="number">10</span></span><br><span class="line">res2 <span class="number">12</span></span><br><span class="line">++表示自增<span class="number">1</span> 类似于 +=<span class="number">1</span></span><br><span class="line">加号在前先加后赋值 加号在后先赋值后加</span><br><span class="line"></span><br><span class="line"># 比较运算符</span><br><span class="line">1 == '1'  # 弱等于  内部自动转换成相同的数据类型比较了</span><br><span class="line"><span class="literal">true</span>  </span><br><span class="line"></span><br><span class="line">1 === '1'  # 强等于  内部不做类型转换</span><br><span class="line"></span><br><span class="line"><span class="number">1</span> != <span class="string">'1'</span></span><br><span class="line"><span class="literal">false</span></span><br><span class="line"><span class="number">1</span> !== <span class="string">'2'</span></span><br><span class="line"><span class="literal">true</span></span><br><span class="line"></span><br><span class="line"># 逻辑运算符</span><br><span class="line">	# python中 and or not</span><br><span class="line">  # js中 &amp;&amp; || !</span><br><span class="line"><span class="number">5</span> &amp;&amp; <span class="string">'5'</span></span><br><span class="line"><span class="string">'5'</span></span><br><span class="line"></span><br><span class="line"><span class="number">0</span> || <span class="number">1</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"></span><br><span class="line">!<span class="number">5</span> &amp;&amp; <span class="string">'5'</span></span><br><span class="line"><span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string">一定要注意到底什么时候返回的是布尔值 什么是返回的是数据</span></span><br><span class="line"><span class="string">按照后端逻辑理解吧 js这块看看就行了</span></span><br><span class="line"><span class="string">"</span><span class="string">""</span></span><br><span class="line"></span><br><span class="line"># 赋值运算符</span><br><span class="line">= += -= *= ....</span><br></pre></td></tr></table></figure>

<h3 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"># if判断</span><br><span class="line"><span class="keyword">var</span> age = <span class="number">28</span>;</span><br><span class="line"># if(条件)&#123;条件成立之后指向的代码块&#125;</span><br><span class="line"><span class="keyword">if</span> (age&gt;<span class="number">18</span>)&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'来啊 来啊'</span>)</span><br><span class="line">&#125;</span><br><span class="line"># if-else</span><br><span class="line"><span class="keyword">if</span> (age&gt;<span class="number">18</span>)&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'来啊 来啊'</span>)</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'没钱 滚蛋'</span>)</span><br><span class="line">&#125;</span><br><span class="line"># if-else if else</span><br><span class="line"><span class="keyword">if</span> (age&lt;<span class="number">18</span>)&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"培养一下"</span>)</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(age&lt;<span class="number">24</span>)&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'小姐姐你好 我是你的粉丝'</span>)</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'你是个好人'</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string">在js中代码是没有缩进的 只不过我们处于python书写习惯人为的加上了而已</span></span><br><span class="line"><span class="string">()条件</span></span><br><span class="line"><span class="string">&#123;&#125;代码块</span></span><br><span class="line"><span class="string">"</span><span class="string">""</span></span><br><span class="line"></span><br><span class="line"># switch语法</span><br><span class="line"><span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string">提前列举好可能出现的条件和解决方式</span></span><br><span class="line"><span class="string">"</span><span class="string">""</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">switch</span>(num)&#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">  	<span class="built_in">console</span>.log(<span class="string">'喝酒'</span>);</span><br><span class="line">  	break;  # 不加break 匹配到一个之后 就一直往下执行</span><br><span class="line">  <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">  	<span class="built_in">console</span>.log(<span class="string">'唱歌'</span>);</span><br><span class="line">  	<span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">  	<span class="built_in">console</span>.log(<span class="string">'洗脚'</span>);</span><br><span class="line">  	<span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">  	<span class="built_in">console</span>.log(<span class="string">'按摩'</span>);</span><br><span class="line">  	<span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">  	<span class="built_in">console</span>.log(<span class="string">'营养快线'</span>);</span><br><span class="line">  	<span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">  	<span class="built_in">console</span>.log(<span class="string">'老板慢走 欢迎下次光临'</span>);</span><br><span class="line">  	<span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">default</span>:</span><br><span class="line">  	<span class="built_in">console</span>.log(<span class="string">'条件都没有匹配上 默认走的流程'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># for循环</span><br><span class="line"># 打印0-9数字</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(i)</span><br><span class="line">&#125;</span><br><span class="line"># 题目1  循环打印出数组里面的每一个元素</span><br><span class="line"><span class="keyword">var</span> l1 = [<span class="number">111</span>,<span class="number">222</span>,<span class="number">333</span>,<span class="number">444</span>,<span class="number">555</span>,<span class="number">666</span>]</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;l1.length;i++)&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(l1[i])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># while循环</span><br><span class="line"><span class="keyword">var</span> i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span>(i&lt;<span class="number">100</span>)&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(i)</span><br><span class="line">  i++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 三元运算符</span><br><span class="line"># python中三元运算符 res = 1 if 1&gt;2 else 3</span><br><span class="line"># JS中三元运算  res = 1&gt;2?1:3 </span><br><span class="line">条件成立取问好后面的<span class="number">1</span> 不成立取冒号后面的<span class="number">3</span></span><br><span class="line">var res = 2&gt;5?8:10 # 10</span><br><span class="line">var res = 2&gt;5?8:(8&gt;5?666:444)  # 666</span><br><span class="line"><span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string">三元运算符不要写的过于复杂 </span></span><br><span class="line"><span class="string">"</span><span class="string">""</span></span><br></pre></td></tr></table></figure>

<h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"># 在python定义函数需要用到关键字def</span><br><span class="line"># 在js中定义函数需要用到关键字function</span><br><span class="line"></span><br><span class="line"># 格式</span><br><span class="line"><span class="function"><span class="keyword">function</span> 函数名(<span class="params">形参<span class="number">1</span>,形参<span class="number">2</span>,形参<span class="number">3.</span>..</span>)</span>&#123;函数体代码&#125;</span><br><span class="line"></span><br><span class="line"># 无参函数</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'hello world'</span>)</span><br><span class="line">&#125;</span><br><span class="line">func1()  # 调用 加括调用 跟python是一样的</span><br><span class="line"></span><br><span class="line"># 有参函数</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func2</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(a,b)</span><br><span class="line">&#125;</span><br><span class="line">func2(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">func2(1,2,3,4,5,6,7,8,9)  # 多了没关系 只要对应的数据</span><br><span class="line">VM3610:<span class="number">2</span> <span class="number">1</span> <span class="number">2</span></span><br><span class="line"><span class="literal">undefined</span></span><br><span class="line"></span><br><span class="line">func2(1)  # 少了也没关系</span><br><span class="line">VM3610:<span class="number">2</span> <span class="number">1</span> <span class="literal">undefined</span></span><br><span class="line">  </span><br><span class="line"># 关键字arguments</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func2</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">  console.log(arguments)  # 能够获取到函数接受到的所有的参数</span><br><span class="line">  <span class="built_in">console</span>.log(a,b)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func2</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="built_in">arguments</span>.length&lt;<span class="number">2</span>)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'传少了'</span>)</span><br><span class="line">  &#125;<span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">arguments</span>.length&gt;<span class="number">2</span>)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'传多了'</span>)</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'正常执行'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 函数的返回值  使用的也是关键字return</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">index</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">666</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">index</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">666</span>,<span class="number">777</span>,<span class="number">888</span>,<span class="number">999</span></span><br><span class="line">&#125;</span><br><span class="line">res = index();</span><br><span class="line"><span class="number">999</span></span><br><span class="line">res</span><br><span class="line">999  # 只能拿到最后一个</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">index</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> [<span class="number">666</span>,<span class="number">777</span>,<span class="number">888</span>,<span class="number">999</span>]</span><br><span class="line">&#125;</span><br><span class="line"># js不支持解压赋值</span><br><span class="line"></span><br><span class="line"># 匿名函数  就是没有名字</span><br><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'哈哈哈'</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> res = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'哈哈哈'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 箭头函数(要了解一下)  主要用来处理简单的业务逻辑 类似于python中的匿名函数</span><br><span class="line"><span class="keyword">var</span> func1 = <span class="function"><span class="params">v</span> =&gt;</span> v;  <span class="string">""</span><span class="string">"箭头左边的是形参 右边的是返回值"</span><span class="string">""</span></span><br><span class="line">等价于</span><br><span class="line"><span class="keyword">var</span> func1 = <span class="function"><span class="keyword">function</span>(<span class="params">v</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> v</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> func2 = <span class="function">(<span class="params">arg1,arg2</span>) =&gt;</span> arg1+arg2</span><br><span class="line">等价于</span><br><span class="line"><span class="keyword">var</span> func1 = <span class="function"><span class="keyword">function</span>(<span class="params">arg1,arg2</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> arg1+arg2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="函数的全局变量与局部变量"><a href="#函数的全局变量与局部变量" class="headerlink" title="函数的全局变量与局部变量"></a>函数的全局变量与局部变量</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"># 跟python查找变量的顺序一致</span><br><span class="line"><span class="keyword">var</span> city = <span class="string">"BeiJing"</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> city = <span class="string">"ShangHai"</span>;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">inner</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> city = <span class="string">"ShenZhen"</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(city);</span><br><span class="line">  &#125;</span><br><span class="line">  inner();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f();  <span class="comment">//输出结果是？</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> city = <span class="string">"BeiJing"</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(city);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> city = <span class="string">"ShangHai"</span>;</span><br><span class="line">  <span class="keyword">return</span> Bar;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> ret = f();</span><br><span class="line">ret();  <span class="comment">// 打印结果是？</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> city = <span class="string">"BeiJing"</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> city = <span class="string">"ShangHai"</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">inner</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(city);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> inner;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> ret = f();</span><br><span class="line">ret();</span><br></pre></td></tr></table></figure>

<h3 id="词法分析（直接忽略）"><a href="#词法分析（直接忽略）" class="headerlink" title="词法分析（直接忽略）"></a>词法分析（直接忽略）</h3><h3 id="自定义对象"><a href="#自定义对象" class="headerlink" title="自定义对象"></a>自定义对象</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"># 你可以看成是我们python中的字典 但是js中的自定义对象要比python里面的字典操作起来更加的方便</span><br><span class="line"></span><br><span class="line"># 创建自定义对象 &#123;&#125;</span><br><span class="line"><span class="string">""</span><span class="string">"第一种创建自定义对象的方式"</span><span class="string">""</span></span><br><span class="line"><span class="keyword">var</span> d1 = &#123;<span class="string">'name'</span>:<span class="string">'jason'</span>,<span class="string">'age'</span>:<span class="number">18</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> d = &#123;<span class="string">'name'</span>:<span class="string">'jason'</span>,<span class="string">'age'</span>:<span class="number">18</span>&#125;</span><br><span class="line"><span class="keyword">typeof</span> d</span><br><span class="line"><span class="string">"object"</span></span><br><span class="line"></span><br><span class="line">d[<span class="string">'name'</span>]</span><br><span class="line"><span class="string">"jason"</span></span><br><span class="line">d.name  # 比python从字典获取值更加的方便</span><br><span class="line"><span class="string">"jason"</span></span><br><span class="line">d.age</span><br><span class="line"><span class="number">18</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i <span class="keyword">in</span> d)&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(i,d[i])</span><br><span class="line">&#125;  # 支持for循环 暴露给外界可以直接获取的也是键</span><br><span class="line"></span><br><span class="line"><span class="string">""</span><span class="string">"第二种创建自定义对象的方式  需要使用关键字 new"</span><span class="string">""</span></span><br><span class="line">var d2 = new Object()  # &#123;&#125;</span><br><span class="line"></span><br><span class="line">d2.name = <span class="string">'jason'</span></span><br><span class="line">&#123;<span class="attr">name</span>: <span class="string">"jason"</span>&#125;</span><br><span class="line"></span><br><span class="line">d2[<span class="string">'age'</span>] = <span class="number">18</span></span><br><span class="line">&#123;<span class="attr">name</span>: <span class="string">"jason"</span>, <span class="attr">age</span>: <span class="number">18</span>&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Date对象"><a href="#Date对象" class="headerlink" title="Date对象"></a>Date对象</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> d3 = <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">Fri May <span class="number">15</span> <span class="number">2020</span> <span class="number">14</span>:<span class="number">41</span>:<span class="number">06</span> GMT+<span class="number">0800</span> (中国标准时间)</span><br><span class="line">   </span><br><span class="line">d3.toLocaleString()</span><br><span class="line"><span class="string">"2020/5/15 下午2:41:06"</span></span><br><span class="line"></span><br><span class="line"># 也支持自己手动输入时间</span><br><span class="line"><span class="keyword">let</span> d4 = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">'2200/11/11 11:11:11'</span>)</span><br><span class="line">d4.toLocaleString()</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> d5 = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">1111</span>,<span class="number">11</span>,<span class="number">11</span>,<span class="number">11</span>,<span class="number">11</span>,<span class="number">11</span>)</span><br><span class="line">d5.toLocaleString()  # 月份从0开始0-11月</span><br><span class="line"><span class="string">"1111/12/11 上午11:11:11"</span></span><br><span class="line"></span><br><span class="line"># 时间对象具体方法</span><br><span class="line"><span class="keyword">let</span> d6 = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">d6.getDate()  获取日</span><br><span class="line">d6.getDay()		获取星期</span><br><span class="line">d6.getMonth()		获取月份(<span class="number">0</span><span class="number">-11</span>)</span><br><span class="line">d6.getFullYear()		获取完整的年份</span><br><span class="line">d6.getHours()			获取小时</span><br><span class="line">d6.getMinutes()		获取分钟</span><br><span class="line">d6.getSeconds()		获取秒</span><br><span class="line">d6.getMilliseconds()  获取毫秒</span><br><span class="line">d6.getTime()					时间戳</span><br></pre></td></tr></table></figure>

<h3 id="JSON对象"><a href="#JSON对象" class="headerlink" title="JSON对象"></a>JSON对象</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string">在python中序列化反序列化</span></span><br><span class="line"><span class="string">	dumps 		序列化</span></span><br><span class="line"><span class="string">	loads			反序列化</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">在js中也有序列化反序列化</span></span><br><span class="line"><span class="string">	JSON.stringify()								dumps</span></span><br><span class="line"><span class="string">	JSON.parse()										loads			</span></span><br><span class="line"><span class="string">"</span><span class="string">""</span></span><br><span class="line">let d7 = &#123;'name':'jason','age':18&#125;</span><br><span class="line">let res666 = JSON.stringify(d7)</span><br><span class="line">"&#123;"name":"jason","age":18&#125;"</span><br><span class="line"></span><br><span class="line">JSON.parse(res666)</span><br><span class="line">&#123;name: "jason", age: 18&#125;</span><br></pre></td></tr></table></figure>

<h3 id="RegExp对象"><a href="#RegExp对象" class="headerlink" title="RegExp对象"></a>RegExp对象</h3><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string">在python中如果需要使用正则 需要借助于re模块</span></span><br><span class="line"><span class="string">在js中需要你创建正则对象</span></span><br><span class="line"><span class="string">"</span><span class="string">""</span></span><br><span class="line"># 第一种 有点麻烦</span><br><span class="line">let reg1 = new RegExp('^[a-zA-Z][a-zA-Z0-9]&#123;5,11&#125;')</span><br><span class="line"># 第二种 个人推荐</span><br><span class="line">let reg2 = /^[a-zA-Z][a-zA-Z0-9]&#123;5,11&#125;/</span><br><span class="line"></span><br><span class="line"># 匹配内容</span><br><span class="line">reg1.test('egondsb')</span><br><span class="line">reg2.test('egondsb')</span><br><span class="line"></span><br><span class="line"># 题目 获取字符串里面所有的字母s</span><br><span class="line">let sss = 'egondsb dsb dsb'</span><br><span class="line">sss.match(/s/)  # 拿到一个就停止了</span><br><span class="line">sss.match(/s/g)	# 全局匹配  g就表示全局模式</span><br><span class="line"></span><br><span class="line">sss.match(/s/)</span><br><span class="line">[<span class="string">"s"</span>, index: <span class="number">5</span>, input: <span class="string">"egondsb dsb dsb"</span>, groups: undefined]</span><br><span class="line">sss.match(/s/g)</span><br><span class="line">(3) ["s", "s", "s"]</span><br><span class="line"></span><br><span class="line"># 全局匹配模式吐槽点</span><br><span class="line">let reg3 = /^[a-zA-Z][a-zA-Z0-9]&#123;5,11&#125;/g</span><br><span class="line">reg2.test('egondsb')</span><br><span class="line"></span><br><span class="line">reg3.test('egondsb')  # 全局模式有一个lastIndex属性</span><br><span class="line">true</span><br><span class="line">reg3.test('egondsb')</span><br><span class="line">false</span><br><span class="line">reg3.test('egondsb')</span><br><span class="line">true</span><br><span class="line">reg3.test('egondsb')</span><br><span class="line">false</span><br><span class="line"></span><br><span class="line">reg3.lastIndex</span><br><span class="line"><span class="number">0</span></span><br><span class="line">reg3.test('egondsb')</span><br><span class="line">true</span><br><span class="line">reg3.lastIndex</span><br><span class="line"><span class="number">7</span></span><br><span class="line"></span><br><span class="line"># 吐槽点二 </span><br><span class="line">let reg4 = /^[a-zA-Z][a-zA-Z0-9]&#123;5,11&#125;/</span><br><span class="line">reg4.test()</span><br><span class="line"></span><br><span class="line">reg4.test()  # 什么都不传 默认传的是undefined</span><br><span class="line">true</span><br><span class="line">reg4.test()</span><br><span class="line">true</span><br><span class="line"></span><br><span class="line">reg4.test(undefined)</span><br><span class="line">true</span><br><span class="line">let reg5 = /undefined/</span><br><span class="line">undefined</span><br><span class="line">reg5.test('jason')</span><br><span class="line">false</span><br><span class="line">reg5.test()</span><br><span class="line">true</span><br><span class="line"></span><br><span class="line"><span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string">总结 你在用js书写正则的时候一定要注意上述问题</span></span><br><span class="line"><span class="string">一般情况下你后续也不会接触到了</span></span><br><span class="line"><span class="string">"</span><span class="string">""</span></span><br></pre></td></tr></table></figure>

<h3 id="Math对象-有兴趣就看一下"><a href="#Math对象-有兴趣就看一下" class="headerlink" title="Math对象(有兴趣就看一下)"></a>Math对象(有兴趣就看一下)</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">abs(x)      返回数的绝对值。</span><br><span class="line">exp(x)      返回 e 的指数。</span><br><span class="line">floor(x)    对数进行下舍入。</span><br><span class="line">log(x)      返回数的自然对数（底为e）。</span><br><span class="line">max(x,y)    返回 x 和 y 中的最高值。</span><br><span class="line">min(x,y)    返回 x 和 y 中的最低值。</span><br><span class="line">pow(x,y)    返回 x 的 y 次幂。</span><br><span class="line">random()    返回 0 ~ 1 之间的随机数。</span><br><span class="line">round(x)    把数四舍五入为最接近的整数。</span><br><span class="line">sin(x)      返回数的正弦。</span><br><span class="line">sqrt(x)     返回数的平方根。</span><br><span class="line">tan(x)      返回角的正切。</span><br></pre></td></tr></table></figure>

<h3 id="BOM与DOM操作"><a href="#BOM与DOM操作" class="headerlink" title="BOM与DOM操作"></a>BOM与DOM操作</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 截至目前为止 我们虽然已经学会了js语法 但是你会发现跟浏览器和html文件还是一点关系没有</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">BOM</span></span><br><span class="line"><span class="string">	浏览器对象模型  Browser Object Model</span></span><br><span class="line"><span class="string">		js代码操作浏览器</span></span><br><span class="line"><span class="string">DOM</span></span><br><span class="line"><span class="string">	文档对象模型	  Document Object Model</span></span><br><span class="line"><span class="string">		js代码操作标签</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<h3 id="BOM操作"><a href="#BOM操作" class="headerlink" title="BOM操作"></a>BOM操作</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"># window对象</span><br><span class="line"><span class="built_in">window</span>对象指代的就是浏览器窗口</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.innerHeight  浏览器窗口的高度</span><br><span class="line"><span class="number">900</span></span><br><span class="line"><span class="built_in">window</span>.innerWidth   浏览器窗口的宽度</span><br><span class="line"><span class="number">1680</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.open(<span class="string">'https://www.mzitu.com/'</span>,<span class="string">''</span>,<span class="string">'height=400px,width=400px,top=400px,left=400px'</span>)</span><br><span class="line"># 新建窗口打开页面 第二个参数写空即可 第三个参数写新建的窗口的大小和位置</span><br><span class="line"># 扩展父子页面通信window.opener()  了解</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.close()  关闭当前页面</span><br></pre></td></tr></table></figure>

<h3 id="window子对象"><a href="#window子对象" class="headerlink" title="window子对象"></a>window子对象</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.navigator.appName</span><br><span class="line"><span class="string">"Netscape"</span></span><br><span class="line"><span class="built_in">window</span>.navigator.appVersion</span><br><span class="line"><span class="string">"5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36"</span></span><br><span class="line"></span><br><span class="line">window.navigator.userAgent		掌握  # 用来表示当前是否是一个浏览器</span><br><span class="line"><span class="string">"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36"</span></span><br><span class="line"></span><br><span class="line"><span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string">扩展:仿爬措施</span></span><br><span class="line"><span class="string">	1.最简单最常用的一个就是校验当前请求的发起者是否是一个浏览器</span></span><br><span class="line"><span class="string">		userAgent</span></span><br><span class="line"><span class="string">		user-agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36</span></span><br><span class="line"><span class="string">	如何破解该措施</span></span><br><span class="line"><span class="string">		在你的代码中加上上面的user-agent配置即可</span></span><br><span class="line"><span class="string">"</span><span class="string">""</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.navigator.platform</span><br><span class="line"><span class="string">"MacIntel"</span></span><br><span class="line"></span><br><span class="line"># 如果是window的子对象 那么window可以省略不写</span><br></pre></td></tr></table></figure>

<h3 id="history对象"><a href="#history对象" class="headerlink" title="history对象"></a>history对象</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.history.back()  回退到上一页</span><br><span class="line"><span class="built_in">window</span>.history.forward()  前进到下一页</span><br><span class="line"># 对应的就是你浏览器左上方的两个的箭头</span><br></pre></td></tr></table></figure>

<h3 id="location对象-掌握"><a href="#location对象-掌握" class="headerlink" title="location对象(掌握)"></a>location对象(掌握)</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">window.location.href	# 获取当前页面的url</span><br><span class="line">window.location.href = url  # 跳转到指定的url</span><br><span class="line">window.location.reload()  # 属性页面   浏览器左上方的小圆圈</span><br></pre></td></tr></table></figure>

<h3 id="弹出框"><a href="#弹出框" class="headerlink" title="弹出框"></a>弹出框</h3><ul>
<li>警告框</li>
<li>确认框</li>
<li>提示框</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">alert(<span class="string">'你不要过来啊！！！'</span>)</span><br><span class="line"><span class="literal">undefined</span></span><br><span class="line"></span><br><span class="line">confirm(<span class="string">'你确定真的要这么做吗?能不能有其他方式能够满足你...'</span>)</span><br><span class="line"><span class="literal">false</span></span><br><span class="line">confirm(<span class="string">'你确定真的要这么做吗?能不能有其他方式能够满足你...'</span>)</span><br><span class="line"><span class="literal">true</span></span><br><span class="line"></span><br><span class="line">prompt(<span class="string">'手牌号给我看一下'</span>,<span class="string">'22号消费888'</span>)</span><br><span class="line"><span class="string">"来宾三位"</span></span><br></pre></td></tr></table></figure>

<h3 id="计时器相关"><a href="#计时器相关" class="headerlink" title="计时器相关"></a>计时器相关</h3><ul>
<li>过一段时间之后触发(一次)</li>
<li>每隔一段时间触发一次(循环)</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">func1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        alert(<span class="number">123</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> t = setTimeout(func1,<span class="number">3000</span>);  <span class="comment">// 毫秒为单位 3秒之后自动执行func1函数</span></span><br><span class="line"></span><br><span class="line">    clearTimeout(t)      <span class="comment">// 取消定时任务  如果你想要清除定时任务 需要日前用变量指代定时任务</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">func2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        alert(<span class="number">123</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> t = setInterval(func2,<span class="number">3000</span>);  <span class="comment">// 每隔3秒执行一次</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">inner</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            clearInterval(t)  <span class="comment">// 清除定时器</span></span><br><span class="line">        &#125;</span><br><span class="line">        setTimeout(inner,<span class="number">9000</span>)  <span class="comment">// 9秒中之后触发</span></span><br><span class="line">    &#125;</span><br><span class="line">    show()</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="DOM操作"><a href="#DOM操作" class="headerlink" title="DOM操作"></a>DOM操作</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;&quot;&quot;</span><br><span class="line">DOM树的概念</span><br><span class="line"></span><br><span class="line">所有的标签都可以称之为是节点</span><br><span class="line"></span><br><span class="line">JavaScript 可以通过DOM创建动态的 HTML：</span><br><span class="line"></span><br><span class="line">JavaScript 能够改变页面中的所有 HTML 元素</span><br><span class="line">JavaScript 能够改变页面中的所有 HTML 属性</span><br><span class="line">JavaScript 能够改变页面中的所有 CSS 样式</span><br><span class="line">JavaScript 能够对页面中的所有事件做出反应</span><br><span class="line"></span><br><span class="line">DOM操作操作的是标签 而一个html页面上的标签有很多 </span><br><span class="line">	1.先学如何查找标签</span><br><span class="line">	2.再学DOM操作标签</span><br><span class="line">	</span><br><span class="line">DOM操作需要用关键字document起手</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>

<h3 id="查找标签"><a href="#查找标签" class="headerlink" title="查找标签"></a>查找标签</h3><ul>
<li><p>直接查找(必须要掌握)</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string">id查找</span></span><br><span class="line"><span class="string">类查找</span></span><br><span class="line"><span class="string">标签查找</span></span><br><span class="line"><span class="string">"</span><span class="string">""</span></span><br><span class="line"># 注意三个方法的返回值是不一样的</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'d1'</span>)</span><br><span class="line">&lt;div id=​<span class="string">"d1"</span>&gt;​…​&lt;<span class="regexp">/div&gt;​</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">document.getElementsByClassName('c1')</span></span><br><span class="line"><span class="regexp">HTMLCollection [p.c1]0: p.c1length: 1__proto__: HTMLCollection</span></span><br><span class="line"><span class="regexp">      </span></span><br><span class="line"><span class="regexp">document.getElementsByTagName('div')</span></span><br><span class="line"><span class="regexp">HTMLCollection(3) [div#d1, div, div, d1: div#d1]</span></span><br><span class="line"><span class="regexp">                   </span></span><br><span class="line"><span class="regexp">                   </span></span><br><span class="line"><span class="regexp">let divEle = document.getElementsByTagName('div')[1]</span></span><br><span class="line"><span class="regexp">divEle</span></span><br><span class="line"><span class="regexp">&lt;div&gt;​div&gt;div​&lt;/</span>div&gt;​</span><br><span class="line"><span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string">当你用变量名指代标签对象的时候 一般情况下都推荐你书写成</span></span><br><span class="line"><span class="string">xxxEle</span></span><br><span class="line"><span class="string">	divEle</span></span><br><span class="line"><span class="string">	aEle</span></span><br><span class="line"><span class="string">	pEle</span></span><br><span class="line"><span class="string">"</span><span class="string">""</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>间接查找(熟悉)</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">let pEle = document.getElementsByClassName('c1')[0]  # 注意是否需要索引取值</span><br><span class="line"></span><br><span class="line">pEle.parentElement  # 拿父节点</span><br><span class="line">&lt;div id=​<span class="string">"d1"</span>&gt;​<span class="string">"div</span></span><br><span class="line"><span class="string">    "</span>&lt;div&gt;​div&gt;div​&lt;<span class="regexp">/div&gt;​&lt;p class=​"c1"&gt;​…​&lt;/</span>p&gt;​&lt;p&gt;​div&gt;p​&lt;<span class="regexp">/p&gt;​&lt;/</span>div&gt;​</span><br><span class="line">pEle.parentElement.parentElement</span><br><span class="line">&lt;body&gt;​…​&lt;<span class="regexp">/body&gt;​</span></span><br><span class="line"><span class="regexp">pEle.parentElement.parentElement.parentElement</span></span><br><span class="line"><span class="regexp">&lt;html lang=​"en"&gt;​&lt;head&gt;​…​&lt;/</span>head&gt;​&lt;body&gt;​…​&lt;<span class="regexp">/body&gt;​&lt;/</span>html&gt;​</span><br><span class="line">pEle.parentElement.parentElement.parentElement.parentElement</span><br><span class="line"><span class="literal">null</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> divEle = <span class="built_in">document</span>.getElementById(<span class="string">'d1'</span>)</span><br><span class="line">divEle.children  # 获取所有的子标签</span><br><span class="line">divEle.children[<span class="number">0</span>]</span><br><span class="line">&lt;div&gt;​div&gt;div​&lt;<span class="regexp">/div&gt;​</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">divEle.firstElementChild</span></span><br><span class="line"><span class="regexp">&lt;div&gt;​div&gt;div​&lt;/</span>div&gt;​</span><br><span class="line"></span><br><span class="line">divEle.lastElementChild</span><br><span class="line">&lt;p&gt;​div&gt;p​&lt;<span class="regexp">/p&gt;​</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">divEle.nextElementSibling  # 同级别下面第一个</span></span><br><span class="line"><span class="regexp">&lt;div&gt;​div下面div​&lt;/</span>div&gt;​</span><br><span class="line"></span><br><span class="line">divEle.previousElementSibling  # 同级别上面第一个</span><br><span class="line">&lt;div&gt;​div上面的div​&lt;<span class="regexp">/div&gt;​</span></span><br></pre></td></tr></table></figure>

<h3 id="节点操作"><a href="#节点操作" class="headerlink" title="节点操作"></a>节点操作</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string">通过DOM操作动态的创建img标签</span></span><br><span class="line"><span class="string">并且给标签加属性</span></span><br><span class="line"><span class="string">最后将标签添加到文本中</span></span><br><span class="line"><span class="string">"</span><span class="string">""</span></span><br><span class="line">let imgEle = document.createElement('img')  # 创建标签</span><br><span class="line"></span><br><span class="line">imgEle.src = '111.png'  # 给标签设置默认的属性</span><br><span class="line"><span class="string">"111.png"</span></span><br><span class="line">imgEle</span><br><span class="line"></span><br><span class="line">imgEle.username = 'jason'  # 自定义的属性没办法点的方式直接设置</span><br><span class="line"><span class="string">"jason"</span></span><br><span class="line">imgEle</span><br><span class="line">&lt;img src=​<span class="string">"111.png"</span>&gt;​</span><br><span class="line"></span><br><span class="line">imgEle.setAttribute('username','jason')   # 既可以设置自定义的属性也可以设置默认的书写</span><br><span class="line"><span class="literal">undefined</span></span><br><span class="line">imgEle</span><br><span class="line">&lt;img src=​<span class="string">"111.png"</span> username=​<span class="string">"jason"</span>&gt;​</span><br><span class="line">imgEle.setAttribute(<span class="string">'title'</span>,<span class="string">'一张图片'</span>)</span><br><span class="line">imgEle</span><br><span class="line">&lt;img src=​<span class="string">"111.png"</span> username=​<span class="string">"jason"</span> title=​<span class="string">"一张图片"</span>&gt;​</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> divEle = <span class="built_in">document</span>.getElementById(<span class="string">'d1'</span>)</span><br><span class="line"><span class="literal">undefined</span></span><br><span class="line">divEle.appendChild(imgEle)  # 标签内部添加元素(尾部追加)</span><br><span class="line">&lt;img src=​<span class="string">"111.png"</span> username=​<span class="string">"jason"</span> title=​<span class="string">"一张图片"</span>&gt;​</span><br><span class="line"></span><br><span class="line"><span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string">创建a标签</span></span><br><span class="line"><span class="string">设置属性</span></span><br><span class="line"><span class="string">设置文本</span></span><br><span class="line"><span class="string">添加到标签内部</span></span><br><span class="line"><span class="string">	添加到指定的标签的上面</span></span><br><span class="line"><span class="string">"</span><span class="string">""</span></span><br><span class="line"><span class="keyword">let</span> aEle = <span class="built_in">document</span>.createElement(<span class="string">'a'</span>)</span><br><span class="line"></span><br><span class="line">aEle</span><br><span class="line">&lt;a&gt;​&lt;<span class="regexp">/a&gt;​</span></span><br><span class="line"><span class="regexp">aEle.href = 'https:/</span><span class="regexp">/www.mzitu.com/</span><span class="string">'</span></span><br><span class="line"><span class="string">"https://www.mzitu.com/"</span></span><br><span class="line"><span class="string">aEle</span></span><br><span class="line"><span class="string">&lt;a href=​"https:​/​/​www.mzitu.com/​"&gt;​&lt;/a&gt;​</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">aEle.innerText = '</span>点我有你好看!<span class="string">'  # 给标签设置文本内容</span></span><br><span class="line"><span class="string">"点我有你好看!"</span></span><br><span class="line"><span class="string">aEle</span></span><br><span class="line"><span class="string">&lt;a href=​"https:​/​/​www.mzitu.com/​"&gt;​点我有你好看!​&lt;/a&gt;​</span></span><br><span class="line"><span class="string">let divEle = document.getElementById('</span>d1<span class="string">')</span></span><br><span class="line"><span class="string">undefined</span></span><br><span class="line"><span class="string">let pEle = document.getElementById('</span>d2<span class="string">')</span></span><br><span class="line"><span class="string">undefined</span></span><br><span class="line"><span class="string">divEle.insertBefore(aEle,pEle)  # 添加标签内容指定位置添加</span></span><br><span class="line"><span class="string">&lt;a href=​"https:​/​/​www.mzitu.com/​"&gt;​点我有你好看!​&lt;/a&gt;​</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">额外补充</span></span><br><span class="line"><span class="string">	appendChild()</span></span><br><span class="line"><span class="string">		removeChild()</span></span><br><span class="line"><span class="string">		replaceChild()</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">	setAttribute()  设置属性</span></span><br><span class="line"><span class="string">		getAttribute()  获取属性</span></span><br><span class="line"><span class="string">		removeAttribute()  移除属性</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># innerText与innerHTML</span></span><br><span class="line"><span class="string">divEle.innerText  # 获取标签内部所有的文本</span></span><br><span class="line"><span class="string">"div 点我有你好看!</span></span><br><span class="line"><span class="string">div&gt;p</span></span><br><span class="line"><span class="string">div&gt;span"</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">divEle.innerHTML  # 内部文本和标签都拿到</span></span><br><span class="line"><span class="string">"div</span></span><br><span class="line"><span class="string">        &lt;a href="https://www.mzitu.com/"&gt;点我有你好看!&lt;/a&gt;&lt;p id="d2"&gt;div&amp;gt;p&lt;/p&gt;</span></span><br><span class="line"><span class="string">        &lt;span&gt;div&amp;gt;span&lt;/span&gt;</span></span><br><span class="line"><span class="string">    "</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">divEle.innerText = '</span>heiheihei<span class="string">'</span></span><br><span class="line"><span class="string">"heiheihei"</span></span><br><span class="line"><span class="string">divEle.innerHTML = '</span>hahahaha<span class="string">'</span></span><br><span class="line"><span class="string">"hahahaha"</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">divEle.innerText = '</span>&lt;h1&gt;heiheihei&lt;<span class="regexp">/h1&gt;'  # 不识别html标签</span></span><br><span class="line"><span class="regexp">"&lt;h1&gt;heiheihei&lt;/</span>h1&gt;<span class="string">"</span></span><br><span class="line"><span class="string">divEle.innerHTML = '&lt;h1&gt;hahahaha&lt;/h1&gt;'  # 识别html标签</span></span><br><span class="line"><span class="string">"</span>&lt;h1&gt;hahahaha&lt;<span class="regexp">/h1&gt;"</span></span><br></pre></td></tr></table></figure>

<h3 id="获取值操作"><a href="#获取值操作" class="headerlink" title="获取值操作"></a>获取值操作</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"># 获取用户数据标签内部的数据</span><br><span class="line"><span class="keyword">let</span> seEle = <span class="built_in">document</span>.getElementById(<span class="string">'d2'</span>)</span><br><span class="line">seEle.value</span><br><span class="line"><span class="string">"111"</span></span><br><span class="line">seEle.value</span><br><span class="line"><span class="string">"333"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> inputEle = <span class="built_in">document</span>.getElementById(<span class="string">'d1'</span>)</span><br><span class="line">inputEle.value</span><br><span class="line"></span><br><span class="line"># 如何获取用户上传的文件数据</span><br><span class="line"><span class="keyword">let</span> fileEle = <span class="built_in">document</span>.getElementById(<span class="string">'d3'</span>)</span><br><span class="line">fileEle.value  # 无法获取到文件数据</span><br><span class="line"><span class="string">"C:\fakepath\02_测试路由.png"</span></span><br><span class="line"></span><br><span class="line">fileEle.files</span><br><span class="line">FileList &#123;<span class="number">0</span>: File, <span class="attr">length</span>: <span class="number">1</span>&#125;<span class="number">0</span>: File &#123;<span class="attr">name</span>: <span class="string">"02_测试路由.png"</span>, <span class="attr">lastModified</span>: <span class="number">1557043082000</span>, <span class="attr">lastModifiedDate</span>: Sun May <span class="number">05</span> <span class="number">2019</span> <span class="number">15</span>:<span class="number">58</span>:<span class="number">02</span> GMT+<span class="number">0800</span> (中国标准时间), <span class="attr">webkitRelativePath</span>: <span class="string">""</span>, <span class="attr">size</span>: <span class="number">29580</span>, …&#125;length: <span class="number">1</span>__proto__: FileList</span><br><span class="line">      </span><br><span class="line">fileEle.files[0]  # 获取文件数据</span><br><span class="line">File &#123;<span class="attr">name</span>: <span class="string">"02_测试路由.png"</span>, <span class="attr">lastModified</span>: <span class="number">1557043082000</span>, <span class="attr">lastModifiedDate</span>: Sun May <span class="number">05</span> <span class="number">2019</span> <span class="number">15</span>:<span class="number">58</span>:<span class="number">02</span> GMT+<span class="number">0800</span> (中国标准时间), <span class="attr">webkitRelativePath</span>: <span class="string">""</span>, <span class="attr">size</span>: <span class="number">29580</span>, …&#125;</span><br></pre></td></tr></table></figure>

<h3 id="class、css操作"><a href="#class、css操作" class="headerlink" title="class、css操作"></a>class、css操作</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> divEle = <span class="built_in">document</span>.getElementById(<span class="string">'d1'</span>)</span><br><span class="line"><span class="literal">undefined</span></span><br><span class="line">divEle.classList  # 获取标签所有的类属性</span><br><span class="line">DOMTokenList(<span class="number">3</span>) [<span class="string">"c1"</span>, <span class="string">"bg_red"</span>, <span class="string">"bg_green"</span>, <span class="attr">value</span>: <span class="string">"c1 bg_red bg_green"</span>]</span><br><span class="line"></span><br><span class="line">divEle.classList.remove('bg_red')  # 移除某个类属性</span><br><span class="line"><span class="literal">undefined</span></span><br><span class="line"></span><br><span class="line">divEle.classList.add('bg_red')  # 添加类属性</span><br><span class="line"><span class="literal">undefined</span></span><br><span class="line">divEle.classList.contains('c1')  # 验证是否包含某个类属性</span><br><span class="line"><span class="literal">true</span></span><br><span class="line">divEle.classList.contains(<span class="string">'c2'</span>)</span><br><span class="line"><span class="literal">false</span></span><br><span class="line"></span><br><span class="line">divEle.classList.toggle('bg_red')  # 有则删除无则添加</span><br><span class="line"><span class="literal">false</span></span><br><span class="line">divEle.classList.toggle(<span class="string">'bg_red'</span>)</span><br><span class="line"><span class="literal">true</span></span><br><span class="line">divEle.classList.toggle(<span class="string">'bg_red'</span>)</span><br><span class="line"><span class="literal">false</span></span><br><span class="line">divEle.classList.toggle(<span class="string">'bg_red'</span>)</span><br><span class="line"><span class="literal">true</span></span><br><span class="line">divEle.classList.toggle(<span class="string">'bg_red'</span>)</span><br><span class="line"><span class="literal">false</span></span><br><span class="line">divEle.classList.toggle(<span class="string">'bg_red'</span>)</span><br><span class="line"><span class="literal">true</span></span><br><span class="line"></span><br><span class="line"># DOM操作操作标签样式 统一先用style起手</span><br><span class="line"><span class="keyword">let</span> pEle = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'p'</span>)[<span class="number">0</span>]</span><br><span class="line"><span class="literal">undefined</span></span><br><span class="line">pEle.style.color = <span class="string">'red'</span></span><br><span class="line"><span class="string">"red"</span></span><br><span class="line">pEle.style.fontSize = <span class="string">'28px'</span></span><br><span class="line"><span class="string">"28px"</span></span><br><span class="line">pEle.style.backgroundColor = <span class="string">'yellow'</span></span><br><span class="line"><span class="string">"yellow"</span></span><br><span class="line">pEle.style.border = <span class="string">'3px solid red'</span></span><br><span class="line"><span class="string">"3px solid red"</span></span><br></pre></td></tr></table></figure>

<h1 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h1><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string">达到某个事先设定的条件 自动触发的动作</span></span><br><span class="line"><span class="string">"</span><span class="string">""</span></span><br><span class="line"># 绑定事件的两种方式</span><br><span class="line">&lt;button onclick=<span class="string">"func1()"</span>&gt;点我&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">&lt;button id="d1"&gt;点我&lt;/</span>button&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// 第一种绑定事件的方式</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">func1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        alert(<span class="number">111</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 第二种</span></span><br><span class="line">    <span class="keyword">let</span> btnEle = <span class="built_in">document</span>.getElementById(<span class="string">'d1'</span>);</span><br><span class="line">    btnEle.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        alert(<span class="number">222</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">"""</span></span><br><span class="line"><span class="regexp">script标签既可以放在head内 也可以放在body内</span></span><br><span class="line"><span class="regexp">但是通常情况下都是放在body内的最底部</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp"># 等待浏览器窗口加载完毕之后再执行代码</span></span><br><span class="line"><span class="regexp">window.onload = function () &#123;</span></span><br><span class="line"><span class="regexp">            /</span><span class="regexp">/ 第一种绑定事件的方式</span></span><br><span class="line"><span class="regexp">            function func1() &#123;</span></span><br><span class="line"><span class="regexp">                alert(111)</span></span><br><span class="line"><span class="regexp">            &#125;</span></span><br><span class="line"><span class="regexp">            /</span><span class="regexp">/ 第二种</span></span><br><span class="line"><span class="regexp">            let btnEle = document.getElementById('d1');</span></span><br><span class="line"><span class="regexp">            btnEle.onclick = function () &#123;</span></span><br><span class="line"><span class="regexp">                alert(222)</span></span><br><span class="line"><span class="regexp">            &#125;</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">"""</span></span><br></pre></td></tr></table></figure>

<h3 id="原生js事件绑定"><a href="#原生js事件绑定" class="headerlink" title="原生js事件绑定"></a>原生js事件绑定</h3></li>
</ul>
<p>我们直接写几个案例，看懂即可</p>
<ul>
<li><p>开关灯案例</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">"d1"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"c1 bg_red bg_green"</span>&gt;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;button id="d2"&gt;变色&lt;/</span>button&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="keyword">let</span> btnEle = <span class="built_in">document</span>.getElementById(<span class="string">'d2'</span>)</span><br><span class="line">        <span class="keyword">let</span> divEle = <span class="built_in">document</span>.getElementById(<span class="string">'d1'</span>)</span><br><span class="line">        btnEle.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;  <span class="comment">// 绑定点击事件</span></span><br><span class="line">            <span class="comment">// 动态的修改div标签的类属性</span></span><br><span class="line">            divEle.classList.toggle(<span class="string">'bg_red'</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>input框获取焦点失去焦点案例</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;input type=<span class="string">"text"</span> value=<span class="string">"老板 去吗?"</span> id=<span class="string">"d1"</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">let</span> iEle = <span class="built_in">document</span>.getElementById(<span class="string">'d1'</span>)</span><br><span class="line">    <span class="comment">// 获取焦点事件</span></span><br><span class="line">    iEle.onfocus = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 将input框内部值去除</span></span><br><span class="line">        iEle.value = <span class="string">''</span></span><br><span class="line">        <span class="comment">//  点value就是获取   等号赋值就是设置</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 失去焦点事件</span></span><br><span class="line">    iEle.onblur = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 给input标签重写赋值</span></span><br><span class="line">        iEle.value = <span class="string">'没钱 不去!'</span></span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>实时展示当前时间</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;input type=<span class="string">"text"</span> id=<span class="string">"d1"</span> style=<span class="string">"display: block;height: 50px;width: 200px"</span>&gt;</span><br><span class="line">&lt;button id=<span class="string">"d2"</span>&gt;开始&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">&lt;button id="d3"&gt;结束&lt;/</span>button&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// 先定义一个全局存储定时器的变量</span></span><br><span class="line">    <span class="keyword">let</span> t = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">let</span> inputEle = <span class="built_in">document</span>.getElementById(<span class="string">'d1'</span>)</span><br><span class="line">    <span class="keyword">let</span> startBtnEle = <span class="built_in">document</span>.getElementById(<span class="string">'d2'</span>)</span><br><span class="line">    <span class="keyword">let</span> endBtnEle = <span class="built_in">document</span>.getElementById(<span class="string">'d3'</span>)</span><br><span class="line">    <span class="comment">// 1 访问页面之后 将访问的时间展示到input框中</span></span><br><span class="line">    <span class="comment">// 2 动态展示当前时间</span></span><br><span class="line">    <span class="comment">// 3 页面上加两个按钮 一个开始 一个结束</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">showTime</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> currentTime = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">        inputEle.value = currentTime.toLocaleString()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    startBtnEle.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 限制定时器只能开一个</span></span><br><span class="line">        <span class="keyword">if</span>(!t)&#123;</span><br><span class="line">            t = setInterval(showTime,<span class="number">1000</span>)  <span class="comment">// 每点击一次就会开设一个定时器 而t只指代最后一个</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    endBtnEle.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        clearInterval(t)</span><br><span class="line">        <span class="comment">// 还应该将t重置为空</span></span><br><span class="line">        t = <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>省市联动</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">    &lt;meta name="viewport" content="width=device-width, initial-scale=1"&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;select name=<span class="string">""</span> id=<span class="string">"d1"</span>&gt;</span><br><span class="line">    &lt;option value=<span class="string">""</span> selected disabled&gt;--请选择--&lt;<span class="regexp">/option&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>select&gt;</span><br><span class="line">&lt;select name=<span class="string">""</span> id=<span class="string">"d2"</span>&gt;&lt;<span class="regexp">/select&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">    let proEle = document.getElementById('d1')</span></span><br><span class="line"><span class="regexp">    let cityEle = document.getElementById('d2')</span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/ 先模拟省市数据</span></span><br><span class="line"><span class="regexp">    data = &#123;</span></span><br><span class="line"><span class="regexp">        "河北": ["廊坊", "邯郸",'唐山'],</span></span><br><span class="line"><span class="regexp">        "北京": ["朝阳区", "海淀区",'昌平区'],</span></span><br><span class="line"><span class="regexp">        "山东": ["威海市", "烟台市",'临沂市'],</span></span><br><span class="line"><span class="regexp">        '上海':['浦东新区','静安区','黄浦区'],</span></span><br><span class="line"><span class="regexp">        '深圳':['南山区','宝安区','福田区']</span></span><br><span class="line"><span class="regexp">    &#125;;</span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/ 选for循环获取省</span></span><br><span class="line"><span class="regexp">    for(let key in data)&#123;</span></span><br><span class="line"><span class="regexp">        /</span><span class="regexp">/ 将省信息做成一个个option标签 添加到第一个select框中</span></span><br><span class="line"><span class="regexp">        /</span><span class="regexp">/ 1 创建option标签</span></span><br><span class="line"><span class="regexp">        let opEle = document.createElement('option')</span></span><br><span class="line"><span class="regexp">        /</span><span class="regexp">/ 2 设置文本</span></span><br><span class="line"><span class="regexp">        opEle.innerText = key</span></span><br><span class="line"><span class="regexp">        /</span><span class="regexp">/ 3 设置value</span></span><br><span class="line"><span class="regexp">        opEle.value = key  /</span><span class="regexp">/ &lt;option value="省"&gt;省&lt;/</span>option&gt;</span><br><span class="line">        <span class="comment">// 4 将创建好的option标签添加到第一个select中</span></span><br><span class="line">        proEle.appendChild(opEle)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 文本域变化事件  change事件</span></span><br><span class="line">    proEle.onchange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 先获取到用户选择的省</span></span><br><span class="line">        <span class="keyword">let</span> currentPro = proEle.value</span><br><span class="line">        <span class="comment">// 获取对应的市信息</span></span><br><span class="line">        <span class="keyword">let</span> currentCityList = data[currentPro]</span><br><span class="line">        <span class="comment">// 清空市select中所有的option</span></span><br><span class="line">        cityEle.innerHTML = <span class="string">''</span></span><br><span class="line">        <span class="comment">// 自己加一个请选择</span></span><br><span class="line">        <span class="keyword">let</span> ss = <span class="string">"&lt;option disabled selected&gt;请选择&lt;/option&gt;"</span></span><br><span class="line">        <span class="comment">// let oppEle = document.createElement('option')</span></span><br><span class="line">        <span class="comment">// oppEle.innerText = '请选择'</span></span><br><span class="line">        <span class="comment">// oppEle.setAttribute('selected','selected')</span></span><br><span class="line">        cityEle.innerHTML = ss</span><br><span class="line"></span><br><span class="line">        <span class="comment">// for循环所有的市 渲染到第二个select中</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;currentCityList.length;i++)&#123;</span><br><span class="line">            <span class="keyword">let</span> currentCity = currentCityList[i]</span><br><span class="line">            <span class="comment">// 1 创建option标签</span></span><br><span class="line">            <span class="keyword">let</span> opEle = <span class="built_in">document</span>.createElement(<span class="string">'option'</span>)</span><br><span class="line">            <span class="comment">// 2 设置文本</span></span><br><span class="line">            opEle.innerText = currentCity</span><br><span class="line">            <span class="comment">// 3 设置value</span></span><br><span class="line">            opEle.value = currentCity  <span class="comment">// &lt;option value="省"&gt;省&lt;/option&gt;</span></span><br><span class="line">            <span class="comment">// 4 将创建好的option标签添加到第一个select中</span></span><br><span class="line">            cityEle.appendChild(opEle)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>前端开发</category>
      </categories>
      <tags>
        <tag>前端入门</tag>
      </tags>
  </entry>
  <entry>
    <title>[CSS选择器与属性]</title>
    <url>/2019/07/12/CSS%E9%80%89%E6%8B%A9%E5%99%A8%E4%B8%8E%E5%B1%9E%E6%80%A7/</url>
    <content><![CDATA[<h1 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h1><p>层贴样式表:就是给HTML标签添加样式的，让它变的更加的好看</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"># 注释</span><br><span class="line"><span class="comment">/*单行注释*/</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">多行注释1</span></span><br><span class="line"><span class="comment">多行注释2</span></span><br><span class="line"><span class="comment">多行注释3</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">通常我们在写<span class="selector-tag">css</span>样式的时候也会用注释来划定样式区域(因为<span class="selector-tag">HTML</span>代码多所以对呀的<span class="selector-tag">css</span>代码也会很多)</span><br><span class="line"><span class="comment">/*这是博客园首页的css样式文件*/</span></span><br><span class="line"><span class="comment">/*顶部导航条样式*/</span></span><br><span class="line">...</span><br><span class="line"><span class="comment">/*左侧菜单栏样式*/</span></span><br><span class="line">...</span><br><span class="line"><span class="comment">/*右侧菜单栏样式*/</span></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># <span class="selector-tag">css</span>的语法结构</span><br><span class="line">选择器 &#123;</span><br><span class="line">  属性1:值1;</span><br><span class="line">  属性2:值2;</span><br><span class="line">  属性3:值3;</span><br><span class="line">  属性4:值4;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># <span class="selector-tag">css</span>的三种引入方式</span><br><span class="line">    1<span class="selector-class">.style</span>标签内部直接书写(为了教学演示方便我们用第一种)</span><br><span class="line">    &lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line">        <span class="selector-tag">h1</span>  &#123;</span><br><span class="line">            <span class="attribute">color</span>: burlywood;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">    2<span class="selector-class">.link</span>标签引入外部<span class="selector-tag">css</span>文件(最正规的方式 解耦合)</span><br><span class="line">        &lt;link rel="stylesheet" href="mycss.css"&gt;</span><br><span class="line">    3.行内式(一般不用)</span><br><span class="line">        &lt;h1 style="color: green"&gt;老板好 要上课吗?&lt;/h1&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;&quot;&quot;</span><br><span class="line">css的学习流程</span><br><span class="line">	1.先学如何查找标签</span><br><span class="line">		css查找标签的方式你一定要学会</span><br><span class="line">		因为后面所有的框架封装的查找语句都是基于css来的</span><br><span class="line">		css选择器很简单很好学不要有压力!!!</span><br><span class="line">	</span><br><span class="line">	2.之后再学如何添加样式</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>

<h1 id="CSS选择器"><a href="#CSS选择器" class="headerlink" title="CSS选择器"></a>CSS选择器</h1><h3 id="基本选择器"><a href="#基本选择器" class="headerlink" title="基本选择器"></a>基本选择器</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line"># <span class="selector-tag">id</span>选择器</span><br><span class="line"></span><br><span class="line"># 类选择器</span><br><span class="line"></span><br><span class="line"># 元素/标签选择器</span><br><span class="line"></span><br><span class="line"># 通用选择器</span><br><span class="line">&lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line">    <span class="comment">/*id选择器*/</span></span><br><span class="line">    <span class="comment">/*#d1 &#123;  !*找到id是d1的标签 将文本颜色变成绿黄色*!*/</span></span><br><span class="line">    <span class="comment">/*    color: greenyellow;*/</span></span><br><span class="line">    <span class="comment">/*&#125;*/</span></span><br><span class="line">    <span class="comment">/*类选择器*/</span></span><br><span class="line">    <span class="comment">/*.c1 &#123;  !*找到class值里面包含c1的标签*!*/</span></span><br><span class="line">    <span class="comment">/*    color: red;*/</span></span><br><span class="line">    <span class="comment">/*&#125;*/</span></span><br><span class="line">    <span class="comment">/*元素(标签)选择器*/</span></span><br><span class="line">    <span class="comment">/*span &#123;  !*找到所有的span标签*!*/</span></span><br><span class="line">    <span class="comment">/*    color: red;*/</span></span><br><span class="line">    <span class="comment">/*&#125;*/</span></span><br><span class="line">    <span class="comment">/*通用选择器*/</span></span><br><span class="line">    <span class="comment">/** &#123;  !*将html页面上所有的标签全部找到*!*/</span></span><br><span class="line">    <span class="comment">/*    color: green;*/</span></span><br><span class="line">    <span class="comment">/*&#125;*/</span></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<h3 id="组合选择器"><a href="#组合选择器" class="headerlink" title="组合选择器"></a>组合选择器</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">"""</span><br><span class="line">在前端 我们将标签的嵌套用亲戚关系来表述层级</span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span>&gt;</span>div</span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>div p<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>div p</span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>div p span<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>span<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>span<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  div里面的p span都是div的后代</span><br><span class="line">  p是div的儿子</span><br><span class="line">  p里面的span是p的儿子 是div的孙子</span><br><span class="line">  div是p的父亲</span><br><span class="line">  ...</span><br><span class="line">"""</span><br><span class="line"></span><br><span class="line"># 后代选择器</span><br><span class="line"># 儿子选择器</span><br><span class="line"># 毗邻选择器</span><br><span class="line"># 弟弟选择器</span><br><span class="line"></span><br><span class="line">		/*后代选择器*/</span><br><span class="line">        /*div span &#123;*/</span><br><span class="line">        /*    color: red;*/</span><br><span class="line">        /*&#125;*/</span><br><span class="line"></span><br><span class="line">        /*儿子选择器*/</span><br><span class="line">        /*div&gt;span &#123;*/</span><br><span class="line">        /*    color: red;*/</span><br><span class="line">        /*&#125;*/</span><br><span class="line"></span><br><span class="line">        /*毗邻选择器*/</span><br><span class="line">        /*div+span &#123;  !*同级别紧挨着的下面的第一个*!*/</span><br><span class="line">        /*    color: aqua;*/</span><br><span class="line">        /*&#125;*/</span><br><span class="line"></span><br><span class="line">        /*弟弟选择器*/</span><br><span class="line">        div~span &#123;  /*同级别下面所有的span*/</span><br><span class="line">            color: red;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<h3 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">"""</span><br><span class="line">1 含有某个属性</span><br><span class="line">2 含有某个属性并且有某个值</span><br><span class="line">3 含有某个属性并且有某个值的某个标签</span><br><span class="line">"""</span><br><span class="line"># 属性选择器是以<span class="selector-attr">[]</span>作为标志的</span><br><span class="line"></span><br><span class="line"><span class="comment">/*[username] &#123;  !*将所有含有属性名是username的标签背景色改为红色*!*/</span></span><br><span class="line">    <span class="comment">/*    background-color: red;*/</span></span><br><span class="line">    <span class="comment">/*&#125;*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*[username='jason'] &#123;  !*找到所有属性名是username并且属性值是jason的标签*!*/</span></span><br><span class="line">    <span class="comment">/*    background-color: orange;*/</span></span><br><span class="line">    <span class="comment">/*&#125;*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*input[username='jason'] &#123;  !*找到所有属性名是username并且属性值是jason的input标签*!*/</span></span><br><span class="line">    <span class="comment">/*    background-color: wheat;*/</span></span><br><span class="line">    <span class="comment">/*&#125;*/</span></span><br></pre></td></tr></table></figure>

<h3 id="分组与嵌套"><a href="#分组与嵌套" class="headerlink" title="分组与嵌套"></a>分组与嵌套</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span>,<span class="selector-tag">p</span>,<span class="selector-tag">span</span> &#123;  <span class="comment">/*逗号表示并列关系*/</span></span><br><span class="line">            <span class="attribute">color</span>: yellow;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="selector-id">#d1</span>,<span class="selector-class">.c1</span>,<span class="selector-tag">span</span>  &#123;</span><br><span class="line">            <span class="attribute">color</span>: orange;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<h3 id="伪类选择器"><a href="#伪类选择器" class="headerlink" title="伪类选择器"></a>伪类选择器</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;!<span class="selector-tag">DOCTYPE</span> <span class="selector-tag">html</span>&gt;</span><br><span class="line">&lt;html lang="en"&gt;</span><br><span class="line">&lt;<span class="selector-tag">head</span>&gt;</span><br><span class="line">    &lt;meta charset="UTF-8"&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">    &lt;meta name="viewport" content="width=device-width, initial-scale=1"&gt;</span><br><span class="line">    &lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line">        <span class="selector-tag">body</span> &#123;</span><br><span class="line">            <span class="attribute">background-color</span>: black;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-tag">a</span><span class="selector-pseudo">:link</span> &#123;  <span class="comment">/*访问之前的状态*/</span></span><br><span class="line">            <span class="attribute">color</span>: red;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;  <span class="comment">/*需要记住*/</span></span><br><span class="line">            <span class="attribute">color</span>: aqua;  <span class="comment">/*鼠标悬浮态*/</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-tag">a</span><span class="selector-pseudo">:active</span> &#123;</span><br><span class="line">            <span class="attribute">color</span>: black;  <span class="comment">/*鼠标点击不松开的状态  激活态*/</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-tag">a</span><span class="selector-pseudo">:visited</span> &#123;</span><br><span class="line">            <span class="attribute">color</span>: darkgray;  <span class="comment">/*访问之后的状态*/</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-tag">p</span> &#123;</span><br><span class="line">            <span class="attribute">color</span>: darkgray;</span><br><span class="line">            <span class="attribute">font-size</span>: <span class="number">48px</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-tag">p</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">            <span class="attribute">color</span>: white;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="selector-tag">input</span><span class="selector-pseudo">:focus</span> &#123;  <span class="comment">/*input框获取焦点(鼠标点了input框)*/</span></span><br><span class="line">            <span class="attribute">background-color</span>: red;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line">&lt;a href="https://www.jd.com/"&gt;小轩在不在?&lt;/a&gt;</span><br><span class="line">&lt;p&gt;点我有你好看哦&lt;/p&gt;</span><br><span class="line">&lt;input type="text"&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<h3 id="伪元素选择器"><a href="#伪元素选择器" class="headerlink" title="伪元素选择器"></a>伪元素选择器</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">:first-letter</span> &#123;</span><br><span class="line">            <span class="attribute">font-size</span>: <span class="number">48px</span>;</span><br><span class="line">            <span class="attribute">color</span>: orange;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">:before</span> &#123;  <span class="comment">/*在文本开头 同css添加内容*/</span></span><br><span class="line">            <span class="attribute">content</span>: <span class="string">'你说的对'</span>;</span><br><span class="line">            <span class="attribute">color</span>: blue;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">            <span class="attribute">content</span>: <span class="string">'雨露均沾'</span>;</span><br><span class="line">            <span class="attribute">color</span>: orange;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="selector-tag">ps</span><span class="selector-pseudo">:before</span>和<span class="selector-tag">after</span>通常都是用来清除浮动带来的影响:父标签塌陷的问题(后面马上讲)</span><br></pre></td></tr></table></figure>

<h3 id="选择器优先级"><a href="#选择器优先级" class="headerlink" title="选择器优先级"></a>选择器优先级</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">"""</span><br><span class="line">id选择器</span><br><span class="line">类选择器</span><br><span class="line">标签选择器</span><br><span class="line">行内式</span><br><span class="line">	</span><br><span class="line">"""</span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        /*</span><br><span class="line">            1.选择器相同 书写顺序不同</span><br><span class="line">                就近原则:谁离标签更近就听谁的</span><br><span class="line">            2.选择器不同 ...</span><br><span class="line">                行内 &gt; id选择器  &gt; 类选择器 &gt; 标签选择器</span><br><span class="line">                精确度越高越有效</span><br><span class="line">        */</span><br><span class="line"><span class="css">        <span class="selector-id">#d1</span> &#123;</span></span><br><span class="line">            color: aqua;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="comment">/*.c1 &#123;*/</span></span></span><br><span class="line"><span class="css">        <span class="comment">/*    color: orange;*/</span></span></span><br><span class="line"><span class="css">        <span class="comment">/*&#125;*/</span></span></span><br><span class="line"><span class="css">        <span class="comment">/*p &#123;*/</span></span></span><br><span class="line"><span class="css">        <span class="comment">/*    color: red;*/</span></span></span><br><span class="line"><span class="css">        <span class="comment">/*&#125;*/</span></span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;link rel="stylesheet" href="mycss1.css"&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"d1"</span> <span class="attr">class</span>=<span class="string">"c1"</span> <span class="attr">style</span>=<span class="string">"color: blue"</span>&gt;</span>贤妻果然很识趣，有前途~<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="css属性相关"><a href="#css属性相关" class="headerlink" title="css属性相关"></a>css属性相关</h1><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line">    <span class="selector-tag">p</span> &#123;</span><br><span class="line">        <span class="attribute">background-color</span>: red;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-tag">span</span> &#123;</span><br><span class="line">        <span class="attribute">background-color</span>: green;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">        <span class="comment">/*行内标签无法设置长宽 就算你写了 也不会生效*/</span></span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<h3 id="字体属性"><a href="#字体属性" class="headerlink" title="字体属性"></a>字体属性</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="comment">/*font-family: "Arial Black","微软雅黑","...";  !*第一个不生效就用后面的 写多个备用*!*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*font-size: 24px;  !*字体大小*!*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*font-weight: inherit;  !*bolder lighter 100~900 inherit继承父元素的粗细值*!*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*color: red;  !*直接写颜色英文*!*/</span></span><br><span class="line">    <span class="comment">/*color: #ee762e;  !*颜色编号*!*/</span></span><br><span class="line">    <span class="comment">/*color: rgb(128,23,45);  !*三基色 数字  范围0-255*!*/</span></span><br><span class="line">    <span class="comment">/*color: rgba(23, 128, 91, 0.9);  !*第四个参数是颜色的透明度 范围是0-1*!*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*当你想要一些颜色的时候 可以利用现成的工具</span></span><br><span class="line"><span class="comment">        1 pycharm提供的取色器</span></span><br><span class="line"><span class="comment">        2 qq或者微信截图功能</span></span><br><span class="line"><span class="comment">                    也可以多软件结合使用 </span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="文字属性"><a href="#文字属性" class="headerlink" title="文字属性"></a>文字属性</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="comment">/*text-align: center;  !*居中*!*/</span></span><br><span class="line">    <span class="comment">/*text-align: right;*/</span></span><br><span class="line">    <span class="comment">/*text-align: left;*/</span></span><br><span class="line">    <span class="comment">/*text-align: justify;  !*两端对齐*!*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*text-decoration: underline;*/</span></span><br><span class="line">    <span class="comment">/*text-decoration: overline;*/</span></span><br><span class="line">    <span class="comment">/*text-decoration: line-through;*/</span></span><br><span class="line">    <span class="comment">/*text-decoration: none;*/</span></span><br><span class="line">    <span class="comment">/*在html中 有很多标签渲染出来的样式效果是一样的*/</span></span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">    <span class="attribute">text-indent</span>: <span class="number">32px</span>;   <span class="comment">/*缩进32px*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">text-decoration</span>: none;  <span class="comment">/*主要用于给a标签去掉自带的下划线  需要掌握*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="背景图片"><a href="#背景图片" class="headerlink" title="背景图片"></a>背景图片</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-id">#d1</span> &#123;</span></span><br><span class="line">            height: 500px;</span><br><span class="line">            background-color: red;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#d2</span> &#123;</span></span><br><span class="line">            height: 500px;</span><br><span class="line">            background-color: green;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#d3</span> &#123;</span></span><br><span class="line">            height: 500px;</span><br><span class="line"><span class="css">            <span class="selector-tag">background-image</span>: <span class="selector-tag">url</span>("222<span class="selector-class">.png</span>");</span></span><br><span class="line">            background-attachment: fixed;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#d4</span> &#123;</span></span><br><span class="line">            height: 500px;</span><br><span class="line">            background-color: aqua;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"d1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"d2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"d3"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"d4"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="边框"><a href="#边框" class="headerlink" title="边框"></a>边框</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        p &#123;</span><br><span class="line">            background-color: red;</span><br><span class="line"></span><br><span class="line">            border-width: 5px;</span><br><span class="line">            border-style: solid;</span><br><span class="line">            border-color: green;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        div &#123;</span><br><span class="line"><span class="css">            <span class="comment">/*border-left-width: 5px;*/</span></span></span><br><span class="line"><span class="css">            <span class="comment">/*border-left-color: red;*/</span></span></span><br><span class="line"><span class="css">            <span class="comment">/*border-left-style: dotted;*/</span></span></span><br><span class="line"></span><br><span class="line"><span class="css">            <span class="comment">/*border-right-width: 10px;*/</span></span></span><br><span class="line"><span class="css">            <span class="comment">/*border-right-color: greenyellow;*/</span></span></span><br><span class="line"><span class="css">            <span class="comment">/*border-right-style: solid;*/</span></span></span><br><span class="line"></span><br><span class="line"><span class="css">            <span class="comment">/*border-top-width: 15px;*/</span></span></span><br><span class="line"><span class="css">            <span class="comment">/*border-top-color: deeppink;*/</span></span></span><br><span class="line"><span class="css">            <span class="comment">/*border-top-style: dashed;*/</span></span></span><br><span class="line"></span><br><span class="line"><span class="css">            <span class="comment">/*border-bottom-width: 10px;*/</span></span></span><br><span class="line"><span class="css">            <span class="comment">/*border-bottom-color: tomato;*/</span></span></span><br><span class="line"><span class="css">            <span class="comment">/*border-bottom-style: solid;*/</span></span></span><br><span class="line"><span class="css">            <span class="selector-tag">border</span>: 3<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-tag">red</span>;  <span class="comment">/*三者位置可以随意写*/</span></span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#d1</span> &#123;</span></span><br><span class="line">            background-color: greenyellow;</span><br><span class="line">            height: 400px;</span><br><span class="line">            width: 400px;</span><br><span class="line"><span class="css">            <span class="selector-tag">border-radius</span>: 50%;  <span class="comment">/*直接写50%即可 长宽一样就是圆 不一样就是椭圆*/</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>穷人  被diss到了  哭泣.png<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>妈拉个巴子,妈拉个巴子,妈拉个巴子,妈拉个巴子<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"d1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="display属性"><a href="#display属性" class="headerlink" title="display属性"></a>display属性</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="comment">/*#d1 &#123;*/</span></span></span><br><span class="line"><span class="css">        <span class="comment">/*    !*display: none;  !*隐藏标签不展示到前端页面并且原来的位置也不再占有了 但是还存在于文档上*!*!*/</span></span></span><br><span class="line"><span class="css">        <span class="comment">/*    display: inline;  !*将标签设置为行内标签的特点*!*/</span></span></span><br><span class="line"><span class="css">        <span class="comment">/*&#125;*/</span></span></span><br><span class="line"><span class="css">        <span class="comment">/*#d2 &#123;*/</span></span></span><br><span class="line"><span class="css">        <span class="comment">/*    display: inline;*/</span></span></span><br><span class="line"><span class="css">        <span class="comment">/*&#125;*/</span></span></span><br><span class="line"><span class="css">        <span class="comment">/*#d1 &#123;*/</span></span></span><br><span class="line"><span class="css">        <span class="comment">/*    display: block;  !*将标签设置成块儿级标签的特点*!*/</span></span></span><br><span class="line"><span class="css">        <span class="comment">/*&#125;*/</span></span></span><br><span class="line"><span class="css">        <span class="comment">/*#d2 &#123;*/</span></span></span><br><span class="line"><span class="css">        <span class="comment">/*    display: block;*/</span></span></span><br><span class="line"><span class="css">        <span class="comment">/*&#125;*/</span></span></span><br><span class="line"><span class="css">        <span class="comment">/*#d1 &#123;*/</span></span></span><br><span class="line"><span class="css">        <span class="comment">/*    display: inline-block;*/</span></span></span><br><span class="line"><span class="css">        <span class="comment">/*&#125;*/</span></span></span><br><span class="line"><span class="css">        <span class="comment">/*#d2 &#123;*/</span></span></span><br><span class="line"><span class="css">        <span class="comment">/*    display: inline-block;  !*标签即可以在一行显示又可以设置长宽*!*/</span></span></span><br><span class="line"><span class="css">        <span class="comment">/*&#125;*/</span></span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"display: none"</span>&gt;</span>div1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>div2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"visibility: hidden"</span>&gt;</span>单纯的隐藏 位置还在<span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>div4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;div id="d1" style="height: 100px;width: 100px;background-color: red"&gt;01&lt;/div&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;div id="d2" style="height: 100px;width: 100px;background-color: greenyellow"&gt;02&lt;/div&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;span id="d1" style="height: 100px;width: 100px;background-color: red"&gt;span&lt;/span&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;span id="d2" style="height: 100px;width: 100px;background-color: greenyellow"&gt;span&lt;/span&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--&lt;div id="d1" style="height: 100px;width: 100px;background-color: red"&gt;01&lt;/div&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;div id="d2" style="height: 100px;width: 100px;background-color: greenyellow"&gt;02&lt;/div&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">"""</span><br><span class="line">盒子模型</span><br><span class="line">	就以快递盒为例</span><br><span class="line">		快递盒与快递盒之间的距离(标签与标签之间的距离 <span class="selector-tag">margin</span>外边距)</span><br><span class="line">		盒子的厚度(标签的边框 <span class="selector-tag">border</span>)</span><br><span class="line">		盒子里面的物体到盒子的距离(内容到边框的距离  <span class="selector-tag">padding</span>内边距)</span><br><span class="line">		物体的大小(内容 <span class="selector-tag">content</span>)</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	如果你想要调整标签与标签之间的距离 你就可以调整<span class="selector-tag">margin</span></span><br><span class="line">	</span><br><span class="line">	浏览器会自带8<span class="selector-tag">px</span>的<span class="selector-tag">margin</span>，一般情况下我们在写页面的时候，上来就会先将<span class="selector-tag">body</span>的<span class="selector-tag">margin</span>去除</span><br><span class="line">	</span><br><span class="line">"""</span><br><span class="line">&lt;!<span class="selector-tag">DOCTYPE</span> <span class="selector-tag">html</span>&gt;</span><br><span class="line">&lt;html lang="en"&gt;</span><br><span class="line">&lt;<span class="selector-tag">head</span>&gt;</span><br><span class="line">    &lt;meta charset="UTF-8"&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">    &lt;meta name="viewport" content="width=device-width, initial-scale=1"&gt;</span><br><span class="line">    &lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line">        <span class="selector-tag">body</span> &#123;</span><br><span class="line">            <span class="attribute">margin</span>: <span class="number">0</span>;  <span class="comment">/*上下左右全是0</span></span><br><span class="line"><span class="comment">            /*margin: 10px 20px;  !* 第一个上下 第二个左右*!*/</span></span><br><span class="line">            <span class="comment">/*margin: 10px 20px 30px;  !*第一个上  第二个左右  第三个下*!*/</span></span><br><span class="line">            <span class="comment">/*margin: 10px 20px 30px 40px;  !*上 右 下 左*!*/</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*p &#123;*/</span></span><br><span class="line">        <span class="comment">/*    margin-left: 0;*/</span></span><br><span class="line">        <span class="comment">/*    margin-top: 0;*/</span></span><br><span class="line">        <span class="comment">/*    margin-right: 0;*/</span></span><br><span class="line">        <span class="comment">/*    margin-bottom: 0;*/</span></span><br><span class="line">        <span class="comment">/*&#125;*/</span></span><br><span class="line"></span><br><span class="line">        <span class="selector-id">#d1</span> &#123;</span><br><span class="line">            <span class="attribute">margin-bottom</span>: <span class="number">50px</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="selector-id">#d2</span> &#123;</span><br><span class="line">            <span class="attribute">margin-top</span>: <span class="number">20px</span>;  <span class="comment">/*不叠加 只取大的*/</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="selector-id">#dd</span> &#123;</span><br><span class="line">            <span class="attribute">margin</span>: <span class="number">0</span> auto;  <span class="comment">/*只能做到标签的水平居中*/</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-tag">p</span> &#123;</span><br><span class="line">            <span class="attribute">border</span>: <span class="number">3px</span> solid red;</span><br><span class="line">            <span class="comment">/*padding-left: 10px;*/</span></span><br><span class="line">            <span class="comment">/*padding-top: 20px;*/</span></span><br><span class="line">            <span class="comment">/*padding-right: 20px;*/</span></span><br><span class="line">            <span class="comment">/*padding-bottom: 50px;*/</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">/*padding: 10px;*/</span></span><br><span class="line">            <span class="comment">/*padding: 10px 20px;*/</span></span><br><span class="line">            <span class="comment">/*padding: 10px 20px 30px;*/</span></span><br><span class="line">            <span class="comment">/*padding: 10px 20px 30px 40px;*/</span>  <span class="comment">/*规律和margin一模一样*/</span></span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line">&lt;!--    &lt;p style="border: 1px solid red;" id="d1"&gt;ppp&lt;/p&gt;--&gt;</span><br><span class="line">&lt;!--    &lt;p style="border: 1px solid orange;" id="d2"&gt;ppp&lt;/p&gt;--&gt;</span><br><span class="line">&lt;!--&lt;div style="border: 3px solid red;height: 400px;width: 400px"&gt;--&gt;</span><br><span class="line">&lt;!--    &lt;div id='dd' style="border: 1px solid orange;height: 50px;width: 50px;background-color: blue;"&gt;&lt;/div&gt;--&gt;</span><br><span class="line">&lt;!--&lt;/div&gt;--&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;ppp&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<h3 id="浮动"><a href="#浮动" class="headerlink" title="浮动"></a>浮动</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">"""浮动的元素 没有块儿级一说 本身多大浮起来之后就只能占多大"""</span><br><span class="line">只要是设计到页面的布局一般都是用浮动来提前规划好</span><br><span class="line">&lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line">    <span class="selector-tag">body</span> &#123;</span><br><span class="line">        <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-id">#d1</span> &#123;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">        <span class="attribute">background-color</span>: red;</span><br><span class="line">        <span class="attribute">float</span>: left;  <span class="comment">/*浮动  浮到空中往左飘*/</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-id">#d2</span> &#123;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">        <span class="attribute">background-color</span>: greenyellow;</span><br><span class="line">        <span class="attribute">float</span>: right;   <span class="comment">/*浮动 浮到空中往右飘*/</span></span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>
<h3 id="解决浮动带来的影响"><a href="#解决浮动带来的影响" class="headerlink" title="解决浮动带来的影响"></a>解决浮动带来的影响</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"># 浮动带来的影响</span><br><span class="line">会造成父标签塌陷的问题</span><br><span class="line"></span><br><span class="line">"""</span><br><span class="line">解决浮动带来的影响 推导步骤</span><br><span class="line">    1.自己加一个<span class="selector-tag">div</span>设置高度</span><br><span class="line">    2.利用<span class="selector-tag">clear</span>属性</span><br><span class="line">        <span class="selector-id">#d4</span> &#123;</span><br><span class="line">            <span class="attribute">clear</span>: left;  <span class="comment">/*该标签的左边(地面和空中)不能有浮动的元素*/</span></span><br><span class="line">        &#125;</span><br><span class="line">    3.通用的解决浮动带来的影响方法</span><br><span class="line">        在写<span class="selector-tag">html</span>页面之前 先提前写好处理浮动带来的影响的 <span class="selector-tag">css</span>代码</span><br><span class="line">        <span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">                <span class="attribute">content</span>: <span class="string">''</span>;</span><br><span class="line">                <span class="attribute">display</span>: block;</span><br><span class="line">                <span class="attribute">clear</span>:both;</span><br><span class="line">            &#125;</span><br><span class="line">    之后只要标签出现了塌陷的问题就给该塌陷的标签加一个<span class="selector-tag">clearfix</span>属性即可</span><br><span class="line">    上述的解决方式是通用的 到哪都一样 并且名字就叫<span class="selector-tag">clearfix</span></span><br><span class="line">"""</span><br></pre></td></tr></table></figure>

<h3 id="溢出属性"><a href="#溢出属性" class="headerlink" title="溢出属性"></a>溢出属性</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">3px</span> solid red;</span><br><span class="line">    <span class="comment">/*overflow: visible;  !*默认就是可见 溢出还是展示*!*/</span></span><br><span class="line">    <span class="comment">/*overflow: hidden;  !*溢出部分直接隐藏*!*/</span></span><br><span class="line">    <span class="comment">/*overflow: scroll;  !*设置成上下滚动条的形式*!*/</span></span><br><span class="line">    <span class="comment">/*overflow: auto;*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h3><ul>
<li><p>静态</p>
<p>所有的标签默认都是静态的static，无法改变位置</p>
</li>
<li><p>相对定位(了解)</p>
<p>相对于标签原来的位置做移动relative</p>
</li>
<li><p>绝对定位(常用)</p>
<p>相对于已经定位过的父标签做移动(如果没有父标签那么就以body为参照)</p>
<p>eg:小米网站购物车</p>
<p>当你不知道页面其他标签的位置和参数，只给了你一个父标签的参数，让你基于该标签左定位</p>
</li>
<li><p>固定定位(常用)</p>
<p>相对于浏览器窗口固定在某个位置</p>
<p>eg:右侧小广告</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        body &#123;</span><br><span class="line">            margin: 0;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#d1</span> &#123;</span></span><br><span class="line">            height: 100px;</span><br><span class="line">            width: 100px;</span><br><span class="line">            background-color: red;</span><br><span class="line"><span class="css">            <span class="selector-tag">left</span>: 50<span class="selector-tag">px</span>;  <span class="comment">/*从左往右   如果是负数 方向则相反*/</span></span></span><br><span class="line"><span class="css">            <span class="selector-tag">top</span>: 50<span class="selector-tag">px</span>;  <span class="comment">/*从上往下    如果是负数 方向则相反*/</span></span></span><br><span class="line"><span class="css">            <span class="comment">/*position: static;  !*默认是static无法修改位置*!*/</span></span></span><br><span class="line">            position: relative;</span><br><span class="line">            /*相对定位</span><br><span class="line">            标签由static变为relative它的性质就从原来没有定位的标签变成了已经定位过的标签</span><br><span class="line">            虽然你哪怕没有动 但是你的性质也已经改变了</span><br><span class="line">            */</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-id">#d2</span> &#123;</span></span><br><span class="line">            height: 100px;</span><br><span class="line">            width: 200px;</span><br><span class="line">            background-color: red;</span><br><span class="line"><span class="css">            <span class="selector-tag">position</span>: <span class="selector-tag">relative</span>;  <span class="comment">/*已经定位过了*/</span></span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#d3</span> &#123;</span></span><br><span class="line">            height: 200px;</span><br><span class="line">            width: 400px;</span><br><span class="line">            background-color: yellowgreen;</span><br><span class="line">            position: absolute;</span><br><span class="line">            left: 200px;</span><br><span class="line">            top: 100px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-id">#d4</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">position</span>: <span class="selector-tag">fixed</span>;  <span class="comment">/*写了fixed之后 定位就是依据浏览器窗口*/</span></span></span><br><span class="line">            bottom: 10px;</span><br><span class="line">            right: 20px;</span><br><span class="line"></span><br><span class="line">            height: 50px;</span><br><span class="line">            width: 100px;</span><br><span class="line">            background-color: white;</span><br><span class="line">            border: 3px solid black;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;div id="d1"&gt;&lt;/div&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--&lt;div id="d2"&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;div id="d3"&gt;&lt;/div&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;/div&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"height: 500px;background-color: red"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"height: 500px;background-color: greenyellow"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"height: 500px;background-color: blue"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"d4"</span>&gt;</span>回到顶部<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>ps:</strong>浏览器是优先展示文本内容的</p>
<h3 id="验证浮动和定位是否脱离文档流-原来的位置是否还保留"><a href="#验证浮动和定位是否脱离文档流-原来的位置是否还保留" class="headerlink" title="验证浮动和定位是否脱离文档流(原来的位置是否还保留)"></a>验证浮动和定位是否脱离文档流(原来的位置是否还保留)</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">"""</span><br><span class="line">浮动</span><br><span class="line">相对定位</span><br><span class="line">绝对定位</span><br><span class="line">固定定位</span><br><span class="line">"""</span><br><span class="line"># 不脱离文档流</span><br><span class="line">	1.相对定位</span><br><span class="line"># 脱离文档流</span><br><span class="line">	1.浮动</span><br><span class="line">    2.绝对定位</span><br><span class="line">    3.固定定位</span><br><span class="line">  </span><br><span class="line"><span class="comment">&lt;!--&lt;div style="height: 100px;width: 200px;background-color: red;position: relative;left: 500px"&gt;&lt;/div&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;div style="height: 100px;width: 200px;background-color: greenyellow"&gt;&lt;/div&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--&lt;div style="height: 100px;width: 200px;background-color: red;"&gt;&lt;/div&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;div style="height: 100px;width: 200px;background-color: greenyellow;position: absolute;left: 500px"&gt;&lt;/div&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--当没有父标签做到位 就参照与body--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;div style="height: 100px;width: 200px;background-color: blue;"&gt;&lt;/div&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"height: 100px;width: 200px;background-color: red;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"height: 100px;width: 200px;background-color: greenyellow;position: fixed;bottom: 10px;right: 20px"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"height: 100px;width: 200px;background-color: blue;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="z-index模态框"><a href="#z-index模态框" class="headerlink" title="z-index模态框"></a>z-index模态框</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">eg:百度登陆页面 其实是三层结构</span><br><span class="line">  1.最底部是正常内容(z=0)  最远的</span><br><span class="line">  2.黑色的透明区(z=99)  		中间层</span><br><span class="line">  3.白色的注册区域(z=100)  离用户最近</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        body &#123;</span><br><span class="line">            margin: 0;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.cover</span> &#123;</span></span><br><span class="line">            position: fixed;</span><br><span class="line">            left: 0;</span><br><span class="line">            top: 0;</span><br><span class="line">            right: 0;</span><br><span class="line">            bottom: 0;</span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-tag">rgba</span>(0,0,0,0<span class="selector-class">.5</span>);</span></span><br><span class="line">            z-index: 99;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.modal</span> &#123;</span></span><br><span class="line">            background-color: white;</span><br><span class="line">            height: 200px;</span><br><span class="line">            width: 400px;</span><br><span class="line">            position: fixed;</span><br><span class="line">            left: 50%;</span><br><span class="line">            top: 50%;</span><br><span class="line">            z-index: 100;</span><br><span class="line">            margin-left: -200px;</span><br><span class="line">            margin-top: -100px;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>这是最底层的页面内容<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"cover"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>登陆页面<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>username:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>password:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>点我点我~<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="透明度opacity"><a href="#透明度opacity" class="headerlink" title="透明度opacity"></a>透明度opacity</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 它不单单可以修改颜色的透明度还同时修改字体的透明度</span></span><br><span class="line">rgba只能影响颜色 </span><br><span class="line">而opacity可以修改颜色和字体</span><br><span class="line"></span><br><span class="line">opacity: <span class="number">0.5</span>;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端开发</category>
      </categories>
      <tags>
        <tag>前端入门</tag>
      </tags>
  </entry>
  <entry>
    <title>[前端入门与标签使用]</title>
    <url>/2019/07/12/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8%E4%B8%8E%E6%A0%87%E7%AD%BE%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h4 id="什么是前端"><a href="#什么是前端" class="headerlink" title="什么是前端"></a>什么是前端</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;&quot;&quot;</span><br><span class="line">任何与用户直接打交道的操作界面都可以称之为前端</span><br><span class="line">比如:电脑界面 手机界面 平板界面</span><br><span class="line"></span><br><span class="line">什么是后端</span><br><span class="line">  后端类似于幕后操作者(一堆让人头皮发麻的代码)</span><br><span class="line">  不直接跟用户打交道</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>

<h3 id="为什么学前端"><a href="#为什么学前端" class="headerlink" title="为什么学前端"></a>为什么学前端</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;&quot;&quot;</span><br><span class="line">因为我们是全栈开发工程师</span><br><span class="line">  但是前端这一块我们不会学的很详细</span><br><span class="line">  只要求做到能够看得懂基本的前端代码以及能够搭建一些简单的页面即可</span><br><span class="line">  先打下前端的基础 为后续可能需要扩展做准备</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>

<h3 id="前端学习历程"><a href="#前端学习历程" class="headerlink" title="前端学习历程"></a>前端学习历程</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">HTML:网页的骨架 没有任何的样式 </span><br><span class="line">CSS:给骨架添加各种样式 变得好看</span><br><span class="line">JS:控制网页的动态效果</span><br><span class="line"></span><br><span class="line">前端框架:BOOTSTRAP、JQuery、Vue</span><br><span class="line">  提前给你封装好了很多操作 你只需要按照固定的语法调用即可</span><br></pre></td></tr></table></figure>

<h3 id="软件开发架构"><a href="#软件开发架构" class="headerlink" title="软件开发架构"></a>软件开发架构</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cs  客户端 服务端</span><br><span class="line">bs  浏览器 服务端</span><br><span class="line">ps:bs本质也是cs</span><br></pre></td></tr></table></figure>

<h3 id="浏览器窗口输入网址回车发生了几件事"><a href="#浏览器窗口输入网址回车发生了几件事" class="headerlink" title="浏览器窗口输入网址回车发生了几件事"></a>浏览器窗口输入网址回车发生了几件事</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;&quot;&quot;</span><br><span class="line">1 浏览器朝服务端发送请求</span><br><span class="line">2 服务端接受请求(eg:请求百度首页)</span><br><span class="line">3 服务端返回相应的响应(eg:返回一个百度首页)</span><br><span class="line">4 浏览器接收响应 根据特定的规则渲染页面展示给用户看</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">浏览器可以充当很多服务端的客户端</span><br><span class="line">	百度 腾讯视频 优酷视频....</span><br><span class="line"> </span><br><span class="line">如何做到浏览器能够跟多个不同的客户端之间进行数据交互？</span><br><span class="line">  1.浏览器很牛逼 能够自动识别不同服务端做不同处理</span><br><span class="line">  2.制定一个统一的标准 如果你想要让你写的服务端能够跟客户端之间做正常的数据交互</span><br><span class="line">  那么你就必须要遵循一些规则</span><br></pre></td></tr></table></figure>

<h3 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">超文本传输协议 用来规定服务端和浏览器之间的数据交互的格式...</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">该协议你可以不遵循 但是你写的服务端就不能被浏览器正常访问 你就自己跟自己玩</span></span><br><span class="line"><span class="string">你就自己写客户端 用户想要使用 就下载你专门的app即可</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment"># 四大特性</span></span><br><span class="line">  <span class="number">1.</span>基于请求响应</span><br><span class="line">  <span class="number">2.</span>基于TCP/IP作用于应用层之上的协议</span><br><span class="line">  <span class="number">3.</span>无状态</span><br><span class="line">  	不保存用户的信息</span><br><span class="line">    eg:一个人来了一千次 你都记不住 每次都当他如初见</span><br><span class="line">    由于HTTP协议是无状态的 所以后续出现了一些专门用来记录用户状态的技术</span><br><span class="line">    	cookie、session、token...</span><br><span class="line">  <span class="number">4.</span>无/短链接</span><br><span class="line">  	请求来一次我响应一次 之后我们两个就没有任何链接和关系了</span><br><span class="line">    	长链接:双方建立连接之后默认不断开 websocket(后面讲项目的时候会讲)</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line"><span class="comment"># 请求数据格式</span></span><br><span class="line">  请求首行(标识HTTP协议版本，当前请求方式)</span><br><span class="line">  请求头(一大堆k,v键值对)</span><br><span class="line">  </span><br><span class="line">  请求体(并不是所有的请求方式都有get没有post有 存放的是post请求提交的敏感数据)</span><br><span class="line"><span class="comment"># 响应数据格式</span></span><br><span class="line">  响应首行(标识HTTP协议版本，响应状态码)</span><br><span class="line">  响应头(一大堆k,v键值对)</span><br><span class="line">  </span><br><span class="line">  响应体(返回给浏览器展示给用户看的数据)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 响应状态码</span></span><br><span class="line">  用一串简单的数字来表示一些复杂的状态或者描述性信息  <span class="number">404</span>:请求资源不存在</span><br><span class="line">  <span class="number">1</span>XX:服务端已经成功接收到了你的数据正在处理，你可以继续提交额外的数据</span><br><span class="line">  <span class="number">2</span>XX:服务端成功响应了你想要的数据(<span class="number">200</span> OK请求成功)</span><br><span class="line">  <span class="number">3</span>XX:重定向(当你在访问一个需要登陆之后才能看的页面 你会发现会自动跳转到登陆页面)</span><br><span class="line">  <span class="number">4</span>XX:请求错误</span><br><span class="line">      <span class="number">404</span>:请求资源不存在</span><br><span class="line">      <span class="number">403</span>:当前请求不合法或者不符合访问资源的条件</span><br><span class="line">  <span class="number">5</span>XX:服务器内部错误(<span class="number">500</span>)</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 请求方式</span></span><br><span class="line">  <span class="number">1.</span>get请求</span><br><span class="line">  	朝服务端要数据</span><br><span class="line">    eg:输入网址获取对应的内容</span><br><span class="line">  <span class="number">2.</span>post请求</span><br><span class="line">  	朝服务端提交数据</span><br><span class="line">    eg:用户登陆 输入用户名和密码之后 提交到服务端后端做身份校验</span><br><span class="line"></span><br><span class="line"><span class="comment"># url:统一资源定位符(大白话 网址)</span></span><br></pre></td></tr></table></figure>

<p><img src="https://images.cnblogs.com/cnblogs_com/wjxyzs/1693949/o_200511131823http%E5%8D%8F%E8%AE%AE%E8%AF%B7%E6%B1%82%E6%95%B0%E6%8D%AE%E6%A0%BC%E5%BC%8F.png" alt="https://images.cnblogs.com/cnblogs_com/wjxyzs/1693949/o_200511131823http%E5%8D%8F%E8%AE%AE%E8%AF%B7%E6%B1%82%E6%95%B0%E6%8D%AE%E6%A0%BC%E5%BC%8F.png"></p>
<h3 id="HTML简介"><a href="#HTML简介" class="headerlink" title="HTML简介"></a>HTML简介</h3><p>超文本标记语言</p>
<p>如果你想要让浏览器能够渲染出你写的页面。你就必须遵循HTML语法</p>
<p>我们浏览器看到的页面，内部其实都是HTML代码(所有的网站内部都是HTML代码)</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>hello big baby~<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://www.mzitu.com/"</span>&gt;</span>click me！give you some color to see see！<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"https://dss1.bdstatic.com/70cFuXSh_Q1YnxGkpoWK1HF6hhy/it/u=2159057472,1466656787&amp;fm=26&amp;gp=0.jpg"</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>HTML就是书写网页的一套标准</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"># 注释:注释是代码之母</span><br><span class="line"><span class="comment">&lt;!--单行注释--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">多行注释1</span></span><br><span class="line"><span class="comment">多行注释2</span></span><br><span class="line"><span class="comment">多行注释3</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">由于HTML代码非常的杂乱无章并且很多，所以我们习惯性的用注释来划定区域方便后续的查找</span><br><span class="line"><span class="comment">&lt;!--导航条开始--&gt;</span></span><br><span class="line">导航条所有的html代码</span><br><span class="line"><span class="comment">&lt;!--导航条结束--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--左侧菜单栏开始--&gt;</span></span><br><span class="line">左侧菜单栏的HTMl代码</span><br><span class="line"><span class="comment">&lt;!--左侧菜单栏结束--&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="HTML文档结构"><a href="#HTML文档结构" class="headerlink" title="HTML文档结构"></a>HTML文档结构</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span>:head内的标签不是给用户看的 而是定义一些配置主要是给浏览器看的</span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span>:body内的标签 写什么浏览器就渲染什么 用户就能看到什么</span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>PS:文件的后缀名其实是给用户看到的，只不过对应不同的 文件后缀名有不同的软件来处理并添加很多功能</p>
<p>注意:HTML代码是没有格式的，可以全部写在一行都没有问题，只不过我们习惯了缩进来表示代码</p>
<h3 id="两种打开HTML文件的方式"><a href="#两种打开HTML文件的方式" class="headerlink" title="两种打开HTML文件的方式"></a>两种打开HTML文件的方式</h3><ul>
<li>找到文件所在的位置右键选择浏览器打开</li>
<li>在pycharm内部，集成了自动调用浏览器的功能，直接点击即可(前提是你的电脑上安装了对应的浏览器) 直接全部使用谷歌浏览器</li>
</ul>
<h3 id="标签的分类1"><a href="#标签的分类1" class="headerlink" title="标签的分类1"></a>标签的分类1</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://www.mzitu.com/"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">1  双标签</span><br><span class="line">2  单标签(自闭和标签)</span><br></pre></td></tr></table></figure>

<h3 id="head内常用标签"><a href="#head内常用标签" class="headerlink" title="head内常用标签"></a>head内常用标签</h3><p>在书写HTML代码的时候 你只需要写标签名 然后tab就能自动补全</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span>  网页标题</span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        h1 &#123;</span><br><span class="line">            color: greenyellow;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span>  内部用来书写css代码</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">        alert(123)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span>  内部用来书写js代码</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"myjs.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>  还可以引入外部js文件</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"mycss.css"</span>&gt;</span>  引入外部css文件</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"keywords"</span> <span class="attr">content</span>=<span class="string">"老男孩教育,老男孩,老男孩培训,Python培训,Linux培训,网络安全培训,Go语言培训,人工智能培训,云计算培训,Linux运维培训,Python自动化运维,Python全栈开发,IT培训"</span>&gt;</span>  当你在用浏览器搜索的时候 只要输入了keywords后面指定的关键字那么该网页都有可能被百度搜索出来展示给用户</span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"keyword"</span> <span class="attr">content</span>=<span class="string">"淘宝,掏宝,网上购物,C2C,在线交易,交易市场,网上交易,交易市场,网上买,网上卖,购物网站,团购,网上贸易,安全购物,电子商务,放心买,供应,买卖信息,网店,一口价,拍卖,网上开店,网络购物,打折,免费开店,网购,频道,店铺"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"description"</span> <span class="attr">content</span>=<span class="string">"淘宝网 - 亚洲较大的网上交易平台，提供各类服饰、美容、家居、数码、话费/点卡充值… 数亿优质商品，同时提供担保交易(先收货后付款)等安全交易保障服务，并由商家提供退货承诺、破损补寄等消费者保障服务，让你安心享受网上购物乐趣！"</span>&gt;</span>  网页的描述性信息</span><br></pre></td></tr></table></figure>

<h1 id="body内常用标签"><a href="#body内常用标签" class="headerlink" title="body内常用标签"></a>body内常用标签</h1><p>你肉眼能够在浏览器上面看到的花里胡哨的页面。内部都是HTML代码</p>
<h3 id="基本标签"><a href="#基本标签" class="headerlink" title="基本标签"></a>基本标签</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>我是h1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>  标题标签 1～6级标题</span><br><span class="line"><span class="tag">&lt;<span class="name">b</span>&gt;</span>加粗<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span>&gt;</span>斜体<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">u</span>&gt;</span>下划线<span class="tag">&lt;/<span class="name">u</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">s</span>&gt;</span>删除线<span class="tag">&lt;/<span class="name">s</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span> 换行</span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span> 水平分割线</span><br></pre></td></tr></table></figure>

<h3 id="标签的分类2"><a href="#标签的分类2" class="headerlink" title="标签的分类2"></a>标签的分类2</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1 块儿级标签:独占一行</span></span><br><span class="line">		h1~h6	p div</span><br><span class="line">  	<span class="number">1</span> 块儿级标签可以修改长宽 行内标签不可以 修改了也不会变化</span><br><span class="line">    <span class="number">2</span> 块儿级标签内部可以嵌套任意的块儿级标签和行内标签</span><br><span class="line">    	但是p标签虽然是块儿级标签 但是它只能嵌套行内标签 不能嵌套块儿级标签</span><br><span class="line">      	如果你套了 问题也不大 因为浏览器会自动帮你解开(浏览器是直接面向用户的 不会轻易的报错 哪怕有报错用户也基本感觉不出来)</span><br><span class="line">       </span><br><span class="line">    总结:</span><br><span class="line">      只要是块儿级标签都可以嵌套任意的块儿级标签和行内标签</span><br><span class="line">      但是p标签只能嵌套行内标签（HTML书写规范）</span><br><span class="line"><span class="comment"># 2 行内标签:自身文本多大就占多大</span></span><br><span class="line">		i u s b span</span><br><span class="line">  	行内标签不能嵌套块儿级标签 可以嵌套行内标签</span><br></pre></td></tr></table></figure>

<h3 id="特殊符号"><a href="#特殊符号" class="headerlink" title="特殊符号"></a>特殊符号</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="symbol">&amp;nbsp;</span>  空格</span><br><span class="line"><span class="symbol">&amp;gt;</span>   大于号</span><br><span class="line"><span class="symbol">&amp;lt;</span>   小于号</span><br><span class="line"><span class="symbol">&amp;amp;</span>  &amp;</span><br><span class="line"><span class="symbol">&amp;yen;</span>  ¥</span><br><span class="line"><span class="symbol">&amp;copy;</span> ©</span><br><span class="line">商标<span class="symbol">&amp;reg;</span> ®</span><br></pre></td></tr></table></figure>

<h3 id="常用标签"><a href="#常用标签" class="headerlink" title="常用标签"></a>常用标签</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">div  块儿级标签</span><br><span class="line">span  行内标签</span><br><span class="line">上述的两个标签是在构造页面初期最常使用的 页面的布局一般先用div和span占位之后再去调整样式 尤其是div使用非常的频繁</span><br><span class="line">div你可以把它看成是一块区域 也就意味着用div来提前规定所有的区域</span><br><span class="line">之后往该区域内部填写内容即可</span><br><span class="line">而普通的文本先用span标签</span><br></pre></td></tr></table></figure>

<h3 id="img标签"><a href="#img标签" class="headerlink" title="img标签"></a>img标签</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"># 图片标签</span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">""</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line"></span><br><span class="line">src	</span><br><span class="line">	1.图片的路径 可以是本地的也可以是网上的</span><br><span class="line">  	2.url 自动朝该url发送get请求获取数据</span><br><span class="line"></span><br><span class="line">alt="这是我的前女友"</span><br><span class="line">	当图片加载不出来的时候 给图片的描述性信息</span><br><span class="line"></span><br><span class="line">title="新垣结衣"</span><br><span class="line">	当鼠标悬浮到图片上之后 自动展示的提示信息</span><br><span class="line"></span><br><span class="line">height="800px" </span><br><span class="line">		</span><br><span class="line">width=""</span><br><span class="line">	高度和宽度当你只修改一个的时候 另外一个参数会等比例缩放</span><br><span class="line">  	如果你修改了两个参数 并且没有考虑比例的问题 那么图片就会失真</span><br></pre></td></tr></table></figure>

<h3 id="a标签"><a href="#a标签" class="headerlink" title="a标签"></a>a标签</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"># 链接标签</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">"""</span><br><span class="line">当a标签指定的网址从来没有被点击过 那么a标签的字体颜色是蓝色</span><br><span class="line">如果点击过了就会是紫色（浏览器给你记忆了）</span><br><span class="line">"""</span><br><span class="line"></span><br><span class="line">href</span><br><span class="line">	1.放url，用户点击就会跳转到该url页面</span><br><span class="line">  	2.放其他标签的id值 点击即可跳转到对应的标签位置</span><br><span class="line"></span><br><span class="line">target</span><br><span class="line">	默认a标签是在当前页面完成跳转  _self</span><br><span class="line">  	你也可以修改为新建页面跳转	 _blank</span><br><span class="line"></span><br><span class="line"># a标签的锚点功能</span><br><span class="line">"""eg:点击一个文本标题 页面自动跳转到标题对应的内容区域"""</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">"d1"</span>&gt;</span>顶部<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">"d111"</span>&gt;</span>hello world<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"height: 1000px;background-color: red"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">"d2"</span>&gt;</span>中间<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"height: 1000px;background-color: greenyellow"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#d1"</span>&gt;</span>底部<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#d2"</span>&gt;</span>回到中间<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#d111"</span>&gt;</span>回到中间<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="标签具有的两个重要属性"><a href="#标签具有的两个重要属性" class="headerlink" title="标签具有的两个重要属性"></a>标签具有的两个重要属性</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>id值</span><br><span class="line">	类似于标签的身份证号 在同一个html页面上id值不能重复</span><br><span class="line"><span class="number">2.</span><span class="class"><span class="keyword">class</span>值</span></span><br><span class="line"><span class="class">	该值有点类似于面向对象里面的继承 一个标签可以继承多个<span class="title">class</span>值</span></span><br></pre></td></tr></table></figure>

<p>标签既可以有默认的书写也可以有自定义的书写</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"d1"</span> <span class="attr">class</span>=<span class="string">"c1"</span> <span class="attr">username</span>=<span class="string">"jason"</span> <span class="attr">password</span>=<span class="string">"123"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="列表标签"><a href="#列表标签" class="headerlink" title="列表标签"></a>列表标签</h3><ul>
<li><p>无序列表(较多)</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>第一项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>第二项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>第二项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>第二项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">虽然ul标签很丑 但是在页面布局的时候 只要是排版一致的几行数据基本上用的都是ul标签</span><br></pre></td></tr></table></figure>
</li>
<li><p>有序列表(了解)</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span> <span class="attr">type</span>=<span class="string">"1"</span> <span class="attr">start</span>=<span class="string">"5"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>111<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>222<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>333<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"></span><br><span class="line">1 A I a ... 参考博客了机即可</span><br></pre></td></tr></table></figure>
</li>
<li><p>标题列表(了解)</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dt</span>&gt;</span>标题1<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dd</span>&gt;</span>内容1<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dt</span>&gt;</span>标题2<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dd</span>&gt;</span>内容2<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dt</span>&gt;</span>标题3<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dd</span>&gt;</span>内容3<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="表格标签"><a href="#表格标签" class="headerlink" title="表格标签"></a>表格标签</h3></li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">jason 123 read</span><br><span class="line">egon	123 dbj</span><br><span class="line">tank  123 hecha</span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tr</span>&gt;</span>  一个tr就表示一行</span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>username<span class="tag">&lt;/<span class="name">th</span>&gt;</span>  加粗文本</span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>username<span class="tag">&lt;/<span class="name">td</span>&gt;</span>  正常文本</span><br><span class="line">      <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">thead</span>&gt;</span>  表头(字段信息)</span><br><span class="line">  <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>jason<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>123<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>read<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span>	 表单(数据信息)</span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1"</span>&gt;</span>  加外边宽</span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"2"</span>&gt;</span>egon<span class="tag">&lt;/<span class="name">td</span>&gt;</span>  水平方向占多行</span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span>=<span class="string">"2"</span>&gt;</span>DBJ<span class="tag">&lt;/<span class="name">td</span>&gt;</span>   垂直方向占多行</span><br><span class="line"></span><br><span class="line"># 原生的表格标签很丑 但是后续我们一般都是使用框架封装好的 很好看</span><br></pre></td></tr></table></figure>

<h3 id="表单标签"><a href="#表单标签" class="headerlink" title="表单标签"></a>表单标签</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">"""</span><br><span class="line">能够获取前端用户数据(用户输入的、用户选择、用户上传...)基于网络发送给后端服务器</span><br><span class="line">"""</span><br><span class="line"># 写一个注册功能</span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span>  在该form标签内部书写的获取用户的数据都会被form标签提交到后端</span><br><span class="line"></span><br><span class="line">action:控制数据提交的后端路径(给哪个服务端提交数据)</span><br><span class="line">  	1.什么都不写  默认就是朝当前页面所在的url提交数据</span><br><span class="line">    2.写全路径:https://www.baidu.com  朝百度服务端提交</span><br><span class="line">    3.只写路径后缀action='/index/'  </span><br><span class="line">    	自动识别出当前服务端的ip和port拼接到前面</span><br><span class="line">      host:port/index/</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"d1"</span>&gt;</span>  第一种 直接讲input框写在label内</span><br><span class="line">  username:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"d1"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span>					第二种 通过id链接即可 无需嵌套</span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"d2"</span>&gt;</span>password:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"d2"</span>&gt;</span></span><br><span class="line">ps:input不跟label关联也没有问题</span><br><span class="line">  </span><br><span class="line">"""</span><br><span class="line">label 和 input都是行内标签</span><br><span class="line">"""</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">input标签 就类似于前端的变形金刚  通过type属性变形</span><br><span class="line">	text:普通文本</span><br><span class="line">  password:密文</span><br><span class="line">	date:日期	</span><br><span class="line">  submit:用来触发form表单提交数据的动作</span><br><span class="line">  button:就是一个普普通通的按钮 本身没有任何的功能 但是它是最有用的，学完js之后可以给它自定义各种功能</span><br><span class="line">  reset:重置内容</span><br><span class="line">  radio:单选</span><br><span class="line">    	默认选中要加checked='checked'</span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"gender"</span> <span class="attr">checked</span>=<span class="string">'checked'</span>&gt;</span>男</span><br><span class="line">      当标签的属性名和属性值一样的时候可以简写</span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"gender"</span> <span class="attr">checked</span>&gt;</span>女</span><br><span class="line">	checkbox:多选</span><br><span class="line">  		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">checked</span>&gt;</span>DBJ</span><br><span class="line">  </span><br><span class="line">  file:获取文件  也可以一次性获取多个</span><br><span class="line">    	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">multiple</span>&gt;</span></span><br><span class="line">  hidden:隐藏当前input框</span><br><span class="line">    	钓鱼网站</span><br><span class="line">      	</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">select标签 默认是单选 可以加mutiple参数变多选 默认选中selected</span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">multiple</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">""</span> <span class="attr">selected</span>&gt;</span>新垣结衣<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">""</span> <span class="attr">selected</span>&gt;</span>斯佳丽<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span>明老师<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">textarea标签  获取大段文本</span><br><span class="line">	  <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">cols</span>=<span class="string">"30"</span> <span class="attr">rows</span>=<span class="string">"10"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line"></span><br><span class="line"># 能够触发form表单提交数据的按钮有哪些(一定要记住)</span><br><span class="line">		1、<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"注册"</span>&gt;</span></span><br><span class="line">		2、<span class="tag">&lt;<span class="name">button</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"># 所有获取用户输入的标签 都应该有name属性</span><br><span class="line">	name就类似于字典的key</span><br><span class="line">  用户的数据就类似于字典的value</span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>gender:</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"gender"</span>&gt;</span>男</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"gender"</span>&gt;</span>女</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"gender"</span>&gt;</span>其他</span><br><span class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="验证form表单提交数据"><a href="#验证form表单提交数据" class="headerlink" title="验证form表单提交数据"></a>验证form表单提交数据</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"># 接下来的框架代码无需掌握  看一下效果即可</span><br><span class="line">pip3 install FLASK</span><br><span class="line"></span><br><span class="line">form表单默认提交数据的方式 是get请求  数据是直接放在url后面的</span><br><span class="line">	http://127.0.0.1:5000/index/?username=sdadasdsda&amp;gender=on</span><br><span class="line">你可以通过method指定提交方式</span><br><span class="line">	<span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"http://127.0.0.1:5000/index/"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">针对用户选择的标签 用户不需要输入内容 但是你需要提前给这些标签添加内容value值</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>gender:</span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"gender"</span> <span class="attr">value</span>=<span class="string">"male"</span>&gt;</span>男</span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"gender"</span> <span class="attr">checked</span> <span class="attr">value</span>=<span class="string">"female"</span>&gt;</span>女</span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"gender"</span> <span class="attr">value</span>=<span class="string">"others"</span>&gt;</span>其他</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>hobby:</span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"hobby"</span> <span class="attr">value</span>=<span class="string">"basketball"</span>&gt;</span>篮球</span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">checked</span> <span class="attr">name</span>=<span class="string">"hobby"</span> <span class="attr">value</span>=<span class="string">"football"</span>&gt;</span>足球</span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">checked</span> <span class="attr">name</span>=<span class="string">"hobby"</span> <span class="attr">value</span>=<span class="string">"doublecolorball"</span>&gt;</span>双色球</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>province：</span><br><span class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">"province"</span> <span class="attr">id</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"sh"</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"bj"</span> <span class="attr">selected</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"sz"</span>&gt;</span>深圳<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">"""html</span><br><span class="line">form表单提交文件需要注意</span><br><span class="line">	1.method必须是post</span><br><span class="line">	2.enctype="multipart/form-data"</span><br><span class="line">		enctype类似于数据提交的编码格式</span><br><span class="line">			默认是urlencoded 只能够提交普通的文本数据</span><br><span class="line">			formdata 就可以支持提交文件数据</span><br><span class="line">"""</span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"http://127.0.0.1:5000/index/"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">"""下面的代码无需掌握 你只需要关心form表单即可"""</span><br><span class="line">from flask import Flask, request</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 当前url既可以支持get请求也可以支持post请求  如果不写默认只能支持get请求</span><br><span class="line">@app.route('/index/',methods=['GET','POST'])</span><br><span class="line">def index():</span><br><span class="line">    print(request.form)  # 获取form表单提交过来的非文件数据</span><br><span class="line">    # ImmutableMultiDict([('username', 'jason'), ('password', '123132131231233'), ('gender', 'on')])</span><br><span class="line">    print(request.files)  # 获取文件数据</span><br><span class="line">    file_obj = request.files.get('myfile.png')</span><br><span class="line">    file_obj.save(file_obj.name)</span><br><span class="line">    return 'OK'</span><br><span class="line"></span><br><span class="line">app.run()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 针对用户输入的标签。如果你加了value 那就是默认值</span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"d1"</span>&gt;</span>username:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"d1"</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"默认值"</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">disable 禁用</span><br><span class="line">readonly只读</span><br></pre></td></tr></table></figure>

<p>前端参考博客:<a href="https://www.cnblogs.com/Dominic-Ji/p/10864457.html" target="_blank" rel="noopener">https://www.cnblogs.com/Dominic-Ji/p/10864457.html</a></p>
]]></content>
      <categories>
        <category>前端开发</category>
      </categories>
      <tags>
        <tag>前端入门</tag>
      </tags>
  </entry>
</search>
