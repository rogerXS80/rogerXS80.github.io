<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lupinus</title>
  
  <subtitle>Re：从零开始的go学习生活(｀・ω・´)</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2022-02-28T14:16:18.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Lupinus</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>[Vue客户端项目搭建]</title>
    <link href="http://yoursite.com/2022/02/27/Vue%E5%AE%A2%E6%88%B7%E7%AB%AF%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/"/>
    <id>http://yoursite.com/2022/02/27/Vue%E5%AE%A2%E6%88%B7%E7%AB%AF%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/</id>
    <published>2022-02-27T03:00:16.000Z</published>
    <updated>2022-02-28T14:16:18.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="客户端项目搭建"><a href="#客户端项目搭建" class="headerlink" title="客户端项目搭建"></a>客户端项目搭建</h1><h2 id="创建项目目录"><a href="#创建项目目录" class="headerlink" title="创建项目目录"></a>创建项目目录</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> 项目目录[荏苒资讯]</span><br><span class="line">vue init webpack renran</span><br></pre></td></tr></table></figure><p>例如，我要把项目保存在桌面下的子目录renran ~/Desktop/renran，可以如下操作：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> Desktop/renran</span><br><span class="line">vue init webpack renran_pc</span><br></pre></td></tr></table></figure><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/1581901045861.png" alt="1581901045861"></p><p>打开项目已经，在pycharm的终端下运行vue项目，查看效果。</p><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/1581901177538.png" alt="1581901177538"></p><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/1581901225429.png" alt="1581901225429"></p><p>上面的操作步骤，等同于执行了下面这句命令。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure><p>接下来，我们根据终端上效果显示的对应地址来访问项目(如果有多个vue项目在运行，8080端口被占据了，服务器会自动改端口，所以根据自己实际在操作中看到的地址来访问。)</p><p>访问：<a href="http://localost:8080" target="_blank" rel="noopener">http://localost:8080</a></p><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/1581901294089.png" alt="1581901294089"></p><h2 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h2><p>清除默认的HelloWorld.vue组件和APP.vue中的默认模板代码和默认css样式</p><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/1581901419680.png" alt="1581901419680"></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line"></span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  name: <span class="string">'App'</span>,</span><br><span class="line">  components: &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;style&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;/</span>style&gt;</span><br></pre></td></tr></table></figure><p>接下来，我们可以查看效果了，一张白纸~</p><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/1556414476287.png" alt="1556414476287"></p><h2 id="安装路由vue-router"><a href="#安装路由vue-router" class="headerlink" title="安装路由vue-router"></a>安装路由vue-router</h2><p>官方文档：<a href="https://router.vuejs.org/zh/" target="_blank" rel="noopener">https://router.vuejs.org/zh/</a></p><h3 id="下载安装路由组件"><a href="#下载安装路由组件" class="headerlink" title="下载安装路由组件"></a>下载安装路由组件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i vue-router -S<span class="comment"># npm install vue-router --save</span></span><br></pre></td></tr></table></figure><h3 id="配置路由"><a href="#配置路由" class="headerlink" title="配置路由"></a>配置路由</h3><h4 id="初始化路由对象"><a href="#初始化路由对象" class="headerlink" title="初始化路由对象"></a>初始化路由对象</h4><p>在src目录下创建routes路由目录，在router目录下创建index.js路由文件</p><p>index.js路由文件中，编写初始化路由对象的代码 .</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">// <span class="number">1.</span> 引入vue和vue-router组件核心对象，并在vue中通过use注册vue-router组件</span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">"vue"</span>;</span><br><span class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">"vue-router"</span>;</span><br><span class="line"></span><br><span class="line">Vue.use(Router);</span><br><span class="line"></span><br><span class="line">// <span class="number">2.</span> 暴露vue-router对象，并在vue-router里面编写路由，提供给main.js调用</span><br><span class="line">export default new Router(&#123;</span><br><span class="line">  // 设置路由模式为‘history’，去掉默认的<span class="comment">#</span></span><br><span class="line">  mode: <span class="string">"history"</span>,</span><br><span class="line">  routes:[</span><br><span class="line">    // 路由列表</span><br><span class="line"></span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="注册路由信息"><a href="#注册路由信息" class="headerlink" title="注册路由信息"></a>注册路由信息</h4><p>打开main.js文件，把router路由规则对象注册到vue中，代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">// The Vue build version to load <span class="keyword">with</span> the `<span class="keyword">import</span>` command</span><br><span class="line">// (runtime-only <span class="keyword">or</span> standalone) has been set <span class="keyword">in</span> webpack.base.conf <span class="keyword">with</span> an alias.</span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App'</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">'./router/index'</span>;</span><br><span class="line"></span><br><span class="line">Vue.config.productionTip = false</span><br><span class="line"></span><br><span class="line">/* eslint-disable no-new */</span><br><span class="line">new Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  router,</span><br><span class="line">  components: &#123; App &#125;,</span><br><span class="line">  template: <span class="string">'&lt;App/&gt;'</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="在视图中显示路由对应的内容"><a href="#在视图中显示路由对应的内容" class="headerlink" title="在视图中显示路由对应的内容"></a>在视图中显示路由对应的内容</h4><p>在App.vue组件中，添加显示路由对应的内容。代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 标签名必须是这个rouer-view --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">  name: <span class="string">'App'</span>,</span></span><br><span class="line">  components: &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意：如果在vue创建项目的时候，设置安装vue-router，则项目会自动帮我们生成上面的router目录和index.js里面的代码，以及自动到main.js里面注册路由对象。</p><h3 id="路由对象提供的操作"><a href="#路由对象提供的操作" class="headerlink" title="路由对象提供的操作"></a>路由对象提供的操作</h3><p>在我们安装注册了vue-router组件以后，vue-router在vue项目中会帮我们在全局范围内所有组件里面创建2个对象给我们使用：</p><ol><li><code>this.$router</code>，可用于在js代码中进行页面跳转。</li><li><code>this.$route</code>，可用于获取地址栏上面的url参数。</li></ol><h4 id="页面跳转"><a href="#页面跳转" class="headerlink" title="页面跳转"></a>页面跳转</h4><p>在vue-router提供的操作中， 进行页面跳转有2种方式：</p><ol><li><p>使用<code>&lt;router-link to=&quot;url地址&quot;&gt;</code>来跳转</p></li><li><p>在<code>&lt;script&gt;</code>中使用<code>this.$router.push(url地址)</code>来跳转</p><p>在<code>&lt;script&gt;</code>中还可以使用<code>this.$router.go(整数)</code>，表示跳转返回上一页或者上几页，下一个或者下几页</p></li></ol><h5 id="router-link标签"><a href="#router-link标签" class="headerlink" title="router-link标签"></a>router-link标签</h5><p>例如，我们就可以在Home.vue组件中，使用router-link跳转到User.vue组件中。</p><p>routes/index.js，代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">// <span class="number">1.</span> 引入vue和vue-router组件核心对象，并在vue中通过use注册vue-router组件</span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">"vue"</span>;</span><br><span class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">"vue-router"</span>;</span><br><span class="line"></span><br><span class="line">Vue.use(Router); // Router是类</span><br><span class="line">// <span class="number">2.</span> 暴露vue-router对象，并在vue-router里面编写路由，提供给main.js调用</span><br><span class="line"></span><br><span class="line">// 导入组件</span><br><span class="line">// <span class="keyword">import</span> 组件名 <span class="keyword">from</span> <span class="string">"../components/组件名"</span></span><br><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">"../components/Home"</span>;</span><br><span class="line"><span class="keyword">import</span> User <span class="keyword">from</span> <span class="string">"../components/User"</span>;</span><br><span class="line"></span><br><span class="line">export default new Router(&#123;</span><br><span class="line">  mode:<span class="string">"history"</span>,  // 路由地址的显示模式： 默认hash，表示地址栏上面出现<span class="comment">#</span></span><br><span class="line">  routes:[</span><br><span class="line">    // &#123;</span><br><span class="line">    //   name:<span class="string">"路由名称[对应组件的name值，将来用于跳转页面]"</span>,</span><br><span class="line">    //   path: <span class="string">"访问url路径"</span>,</span><br><span class="line">    //   component: 组件名</span><br><span class="line">    // &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      name:<span class="string">"Home"</span>,</span><br><span class="line">      path: <span class="string">"/"</span>,</span><br><span class="line">      component: Home</span><br><span class="line">    &#125;,&#123;</span><br><span class="line">      name:<span class="string">"User"</span>,</span><br><span class="line">      path: <span class="string">"/user"</span>,</span><br><span class="line">      component: User</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// vue-router除了可以进行组件和url地址的绑定以外，还可以</span><br><span class="line">// 进行不同组件的页面跳转，</span><br></pre></td></tr></table></figure><p>Home.vue代码：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      首页页面组件</span><br><span class="line">      &lt;a href=<span class="string">"/user"</span>&gt;个人中心&lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp">      &lt;!-- router-link标签，本质上就是a标签，只是由vue-router进行加工处理</span></span><br><span class="line"><span class="regexp">      可以显示局部页面刷新，不会重新加载内容，进行ajax跳转</span></span><br><span class="line"><span class="regexp">       --&gt;</span></span><br><span class="line"><span class="regexp">      &lt;router-link to="/u</span>ser<span class="string">"&gt;个人中心&lt;/router-link&gt;</span></span><br><span class="line"><span class="string">      &lt;router-link :to="</span>url<span class="string">"&gt;个人中心&lt;/router-link&gt;</span></span><br><span class="line"><span class="string">      &lt;router-link :to="</span>&#123;<span class="attr">name</span>:<span class="string">'User'</span>&#125;<span class="string">"&gt;个人中心&lt;/router-link&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;/template&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;script&gt;</span></span><br><span class="line"><span class="string">    export default &#123;</span></span><br><span class="line"><span class="string">        name: "</span>Home<span class="string">",</span></span><br><span class="line"><span class="string">        data()&#123;</span></span><br><span class="line"><span class="string">          return &#123;</span></span><br><span class="line"><span class="string">              url: "</span>/user<span class="string">",</span></span><br><span class="line"><span class="string">          &#125;</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        methods:&#123;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;style scoped&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;/style&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/1581908101280.png" alt="1581908101280"></p><h5 id="this-router-push-跳转"><a href="#this-router-push-跳转" class="headerlink" title="this.$router.push()跳转"></a><code>this.$router.push()</code>跳转</h5><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      首页页面组件</span><br><span class="line">      &lt;a href=<span class="string">"/user"</span>&gt;个人中心&lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp">      &lt;!-- router-link标签，本质上就是a标签，只是由vue-router进行加工处理</span></span><br><span class="line"><span class="regexp">      可以显示局部页面刷新，不会重新加载内容，进行ajax跳转</span></span><br><span class="line"><span class="regexp">       --&gt;</span></span><br><span class="line"><span class="regexp">      &lt;router-link to="/u</span>ser<span class="string">"&gt;个人中心&lt;/router-link&gt;</span></span><br><span class="line"><span class="string">      &lt;router-link :to="</span>url<span class="string">"&gt;个人中心&lt;/router-link&gt;</span></span><br><span class="line"><span class="string">      &lt;router-link :to="</span>&#123;<span class="attr">name</span>:<span class="string">'User'</span>&#125;<span class="string">"&gt;个人中心&lt;/router-link&gt;</span></span><br><span class="line"><span class="string">      &lt;button @click="</span>jump<span class="string">"&gt;个人中心&lt;/button&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;/template&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;script&gt;</span></span><br><span class="line"><span class="string">    export default &#123;</span></span><br><span class="line"><span class="string">        name: "</span>Home<span class="string">",</span></span><br><span class="line"><span class="string">        data()&#123;</span></span><br><span class="line"><span class="string">          return &#123;</span></span><br><span class="line"><span class="string">              url: "</span>/user<span class="string">",</span></span><br><span class="line"><span class="string">          &#125;</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        methods:&#123;</span></span><br><span class="line"><span class="string">          jump()&#123;</span></span><br><span class="line"><span class="string">              // 开发中可以先进行权限，登录之类的判断，然后再进行跳转</span></span><br><span class="line"><span class="string">                // this.$router.back(); // 返回上一页，本质上就是 location.back()</span></span><br><span class="line"><span class="string">                // this.$router.go(-1); // 返回上一页，本质上就是 location.go()</span></span><br><span class="line"><span class="string">                // this.$router.forward(); // 跳转到下一页，本质上就是 location.forward()</span></span><br><span class="line"><span class="string">                this.$router.push("</span>/user<span class="string">"); // 跳转到站内的制定地址页面中，本质上就是 location.href</span></span><br><span class="line"><span class="string">                // 注意,this.$router.push() 不能跳转到其他网站。如果真的要跳转外站，则使用location.href="</span>站外地址，记得加上http:<span class="comment">//协议"</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;style scoped&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;/</span>style&gt;</span><br></pre></td></tr></table></figure><h4 id="参数传递"><a href="#参数传递" class="headerlink" title="参数传递"></a>参数传递</h4><p><code>vue-router</code>提供了<code>this.$route</code>，可以让我们接收来自其他页面的附带参数。参数有2种：</p><ol><li><p>查询字符串(<code>query string</code>)，就是地址栏上面<code>?</code>号后面的参数，</p><p>例如：<code>http://localhost:8008/user?name=xiaoming&amp;pwd=123</code>，这里<code>name=xiaoming&amp;pwd=123</code>就是查询字符串参数。</p></li><li><p>路由参数(<code>router params</code>)，就是地址栏上面路由路径的一部分，</p><p>例如：<code>http://localhost:8080/user/300/xiaoming</code>，此时，300属于路由路径的一部分，这个300就是路由参数.，当然，xiaoming,或者user也可以理解是路由参数，就是看我们的页面中是否需要接收而已。</p></li></ol><h5 id="获取查询字符串"><a href="#获取查询字符串" class="headerlink" title="获取查询字符串"></a>获取查询字符串</h5><p>必须先有一个页面跳转发送参数。例如，在Home组件中跳转到User组件中，需要传递name和pwd查询字符串。</p><p>Home.vue代码：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      首页页面组件</span><br><span class="line">&lt;!--      <span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/user"</span>&gt;</span>个人中心<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line">      &amp;lt;!&amp;ndash; router-link标签，本质上就是a标签，只是由vue-router进行加工处理</span><br><span class="line">      可以显示局部页面刷新，不会重新加载内容，进行ajax跳转</span><br><span class="line">       &amp;ndash;&amp;gt;</span><br><span class="line">      &lt;router-link to=<span class="string">"/user"</span>&gt;个人中心&lt;<span class="regexp">/router-link&gt;</span></span><br><span class="line"><span class="regexp">      &lt;router-link :to="url"&gt;个人中心&lt;/</span>router-link&gt;</span><br><span class="line">      &lt;router-link :to=<span class="string">"&#123;name:'User'&#125;"</span>&gt;个人中心&lt;<span class="regexp">/router-link&gt;</span></span><br><span class="line"><span class="regexp">      &lt;button @click="jump"&gt;个人中心&lt;/</span>button&gt;--&gt;</span><br><span class="line"></span><br><span class="line">      &lt;router-link :to=<span class="string">"`/user?name=$&#123;name&#125;&amp;pwd=$&#123;pwd&#125;`"</span>&gt;查询字符串参数&lt;<span class="regexp">/router-link&gt;</span></span><br><span class="line"><span class="regexp">      &lt;router-link :to="'/u</span>ser?name=<span class="string">'+name+'</span>&amp;pwd=<span class="string">'+pwd"&gt;查询字符串参数&lt;/router-link&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;/template&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;script&gt;</span></span><br><span class="line"><span class="string">    export default &#123;</span></span><br><span class="line"><span class="string">        name: "Home",</span></span><br><span class="line"><span class="string">        data()&#123;</span></span><br><span class="line"><span class="string">          return &#123;</span></span><br><span class="line"><span class="string">              name: "xiaoming",</span></span><br><span class="line"><span class="string">              pwd: "123",</span></span><br><span class="line"><span class="string">              url: "/user",</span></span><br><span class="line"><span class="string">          &#125;</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        methods:&#123;</span></span><br><span class="line"><span class="string">          jump()&#123;</span></span><br><span class="line"><span class="string">              // 开发中可以先进行权限，登录之类的判断，然后再进行跳转</span></span><br><span class="line"><span class="string">                // this.$router.back(); // 返回上一页，本质上就是 location.back()</span></span><br><span class="line"><span class="string">                // this.$router.go(-1); // 返回上一页，本质上就是 location.go()</span></span><br><span class="line"><span class="string">                // this.$router.forward(); // 跳转到下一页，本质上就是 location.forward()</span></span><br><span class="line"><span class="string">                this.$router.push("/user"); // 跳转到站内的制定地址页面中，本质上就是 location.href</span></span><br><span class="line"><span class="string">                // 注意,this.$router.push 不能跳转到其他网站。如果真的要跳转外站，则使用location.href="站外地址，记得加上http://协议"</span></span><br><span class="line"><span class="string">          &#125;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;style scoped&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;/style&gt;</span></span><br></pre></td></tr></table></figure><p>可以下一个页面中，这里代表的就是User组件，接收来自Home组件的参数。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      用户中心页面组件</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">        name: <span class="string">"User"</span>,</span><br><span class="line">        created() &#123;</span><br><span class="line">            <span class="comment">// 接收地址栏上面的参数</span></span><br><span class="line">            <span class="comment">// this.$route是vue-router提供的一个用于接收地址参数的对象。</span></span><br><span class="line">            <span class="comment">// 经过main.js里面注册router对象以后，</span></span><br><span class="line">            <span class="comment">// 将来在所有的子组件中，可以通过this.$route来获取参数或者通过this.$router跳转页面</span></span><br><span class="line">            <span class="comment">// 查询字符串参数</span></span><br><span class="line">            <span class="comment">// query是this.$route里面的一个数组，this.$route会自动收集地址栏上所有的参数保存到query里面</span></span><br><span class="line">            <span class="comment">// let name = this.$route.query.name;</span></span><br><span class="line">            <span class="comment">// let pwd = this.$route.query.pwd;</span></span><br><span class="line">            <span class="comment">// console.log(`name=$&#123;name&#125;&amp;pwd=$&#123;pwd&#125;`);  // ``里面，$&#123;&#125;圈住的内容会被js当成变量来解析</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;style scoped&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;/</span>style&gt;</span><br></pre></td></tr></table></figure><h4 id="获取路由参数"><a href="#获取路由参数" class="headerlink" title="获取路由参数"></a>获取路由参数</h4><p>例如：我们用户的界面都是一样的，但是每一个用户来到自己的页面中，显示的内容肯定都是不一样的，此时，我们需要使用不同的路径来区分不同的用户。这时候，可以在路由路径中使用路由参数表示不同用户的id</p><p>例如：我们就需要设置一个route/index.js中路由信息里面，哪一段路由属于路由参数。</p><p>src/routes/index.js设置路由参数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">// <span class="number">1.</span> 引入vue和vue-router组件核心对象，并在vue中通过use注册vue-router组件</span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">"vue"</span>;</span><br><span class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">"vue-router"</span>;</span><br><span class="line"></span><br><span class="line">Vue.use(Router); // Router是类</span><br><span class="line">// <span class="number">2.</span> 暴露vue-router对象，并在vue-router里面编写路由，提供给main.js调用</span><br><span class="line"></span><br><span class="line">// 导入组件</span><br><span class="line">// <span class="keyword">import</span> 组件名 <span class="keyword">from</span> <span class="string">"../components/组件名"</span></span><br><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">"../components/Home"</span>;</span><br><span class="line"><span class="keyword">import</span> User <span class="keyword">from</span> <span class="string">"../components/User"</span>;</span><br><span class="line"></span><br><span class="line">export default new Router(&#123;</span><br><span class="line">  mode:<span class="string">"history"</span>,  // 路由地址的显示模式： 默认hash，表示地址栏上面出现<span class="comment">#</span></span><br><span class="line">  routes:[</span><br><span class="line">    // &#123;</span><br><span class="line">    //   name:<span class="string">"路由名称[对应组件的name值，将来用于跳转页面]"</span>,</span><br><span class="line">    //   path: <span class="string">"访问url路径"</span>,</span><br><span class="line">    //   component: 组件名</span><br><span class="line">    // &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      name:<span class="string">"Home"</span>,</span><br><span class="line">      path: <span class="string">"/"</span>,</span><br><span class="line">      component: Home</span><br><span class="line">    &#125;,&#123;</span><br><span class="line">      name:<span class="string">"User"</span>,</span><br><span class="line">      path: <span class="string">"/user/:id/img-:img_id"</span>,</span><br><span class="line">      component: User</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// vue-router除了可以进行组件和url地址的绑定以外，还可以</span><br><span class="line">// 进行不同组件的页面跳转，</span><br></pre></td></tr></table></figure><p>然后我们就是在Home中如果需要转到User里面。</p><p>Home.vue代码：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      首页页面组件</span><br><span class="line">&lt;!--      <span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/user"</span>&gt;</span>个人中心<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line">      &amp;lt;!&amp;ndash; router-link标签，本质上就是a标签，只是由vue-router进行加工处理</span><br><span class="line">      可以显示局部页面刷新，不会重新加载内容，进行ajax跳转</span><br><span class="line">       &amp;ndash;&amp;gt;</span><br><span class="line">      &lt;router-link to=<span class="string">"/user"</span>&gt;个人中心&lt;<span class="regexp">/router-link&gt;</span></span><br><span class="line"><span class="regexp">      &lt;router-link :to="url"&gt;个人中心&lt;/</span>router-link&gt;</span><br><span class="line">      &lt;router-link :to=<span class="string">"&#123;name:'User'&#125;"</span>&gt;个人中心&lt;<span class="regexp">/router-link&gt;</span></span><br><span class="line"><span class="regexp">      &lt;button @click="jump"&gt;个人中心&lt;/</span>button&gt;--&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--      <span class="xml"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">"`/user?name=$&#123;name&#125;&amp;pwd=$&#123;pwd&#125;`"</span>&gt;</span>查询字符串参数<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span>--&gt;</span><br><span class="line">&lt;!--      <span class="xml"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">"'/user?name='+name+'&amp;pwd='+pwd"</span>&gt;</span>查询字符串参数<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span>--&gt;</span><br><span class="line">      &lt;router-link to=<span class="string">"/user/100/img-10086"</span>&gt;路由参数&lt;<span class="regexp">/router-link&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">    export default &#123;</span></span><br><span class="line"><span class="regexp">        name: "Home",</span></span><br><span class="line"><span class="regexp">        data()&#123;</span></span><br><span class="line"><span class="regexp">          return &#123;</span></span><br><span class="line"><span class="regexp">              name: "xiaoming",</span></span><br><span class="line"><span class="regexp">              pwd: "123",</span></span><br><span class="line"><span class="regexp">              url: "/u</span>ser<span class="string">",</span></span><br><span class="line"><span class="string">          &#125;</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        methods:&#123;</span></span><br><span class="line"><span class="string">          jump()&#123;</span></span><br><span class="line"><span class="string">              // 开发中可以先进行权限，登录之类的判断，然后再进行跳转</span></span><br><span class="line"><span class="string">                // this.$router.back(); // 返回上一页，本质上就是 location.back()</span></span><br><span class="line"><span class="string">                // this.$router.go(-1); // 返回上一页，本质上就是 location.go()</span></span><br><span class="line"><span class="string">                // this.$router.forward(); // 跳转到下一页，本质上就是 location.forward()</span></span><br><span class="line"><span class="string">                this.$router.push("</span>/user<span class="string">"); // 跳转到站内的制定地址页面中，本质上就是 location.href</span></span><br><span class="line"><span class="string">                // 注意,this.$router.push 不能跳转到其他网站。如果真的要跳转外站，则使用location.href="</span>站外地址，记得加上http:<span class="comment">//协议"</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;style scoped&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;/</span>style&gt;</span><br></pre></td></tr></table></figure><p>User.vue，组件中可以通过<code>this.$route.params</code>接收路由参数。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      用户中心页面组件</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">        name: <span class="string">"User"</span>,</span><br><span class="line">        created() &#123;</span><br><span class="line">            <span class="comment">// 接收地址栏上面的参数</span></span><br><span class="line">            <span class="comment">// this.$route是vue-router提供的一个用于接收地址参数的对象。</span></span><br><span class="line">            <span class="comment">// 经过main.js里面注册router对象以后，</span></span><br><span class="line">            <span class="comment">// 将来在所有的子组件中，可以通过this.$route来获取参数或者通过this.$router跳转页面</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 查询字符串参数</span></span><br><span class="line">            <span class="comment">// query是this.$route里面的一个数组，this.$route会自动收集地址栏上所有的参数保存到query里面</span></span><br><span class="line">            <span class="comment">// let name = this.$route.query.name;</span></span><br><span class="line">            <span class="comment">// let pwd = this.$route.query.pwd;</span></span><br><span class="line">            <span class="comment">// console.log(`name=$&#123;name&#125;&amp;pwd=$&#123;pwd&#125;`);  // ``里面，$&#123;&#125;圈住的内容会被js当成变量来解析</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 路由参数</span></span><br><span class="line">            <span class="comment">// params是this.$route里面的一个数组，this.$route会自动收集路由列表中已经标记为路由参数所有内容保存到params中</span></span><br><span class="line">            <span class="keyword">let</span> id = <span class="keyword">this</span>.$route.params.id;</span><br><span class="line">            <span class="built_in">console</span>.log(id);</span><br><span class="line">            <span class="keyword">let</span> img_id = <span class="keyword">this</span>.$route.params.img_id;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">`img_id = <span class="subst">$&#123;img_id&#125;</span>`</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;style scoped&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;/</span>style&gt;</span><br></pre></td></tr></table></figure><h1 id="ElementUI"><a href="#ElementUI" class="headerlink" title="ElementUI"></a>ElementUI</h1><p>对于前端页面布局，我们可以使用一些开源的UI框架来配合开发，常用的UI框: bootstap，H-ui框架，lay-UI框架，Amaze UI，zui框架，ElementUI.</p><p>Vue开发前端项目中，比较常用的就是ElementUI了。</p><p>ElementUI是饿了么团队开发的一个UI组件框架，这个框架提前帮我们提供了很多已经写好的通用模块，我们可以在Vue项目中引入来使用，这个框架的使用类似于我们前面学习的bootstrap框架，也就是说，我们完全可以把官方文档中的组件代码拿来就用，有定制性的内容，可以直接通过样式进行覆盖修改就可以了。</p><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/1552501300174.png" alt="1552501300174"></p><p>中文官网：<a href="http://element-cn.eleme.io/#/zh-CN" target="_blank" rel="noopener">http://element-cn.eleme.io/#/zh-CN</a></p><p>文档快速入门：<a href="http://element-cn.eleme.io/#/zh-CN/component/quickstart" target="_blank" rel="noopener">http://element-cn.eleme.io/#/zh-CN/component/quickstart</a></p><h2 id="快速安装ElementUI"><a href="#快速安装ElementUI" class="headerlink" title="快速安装ElementUI"></a>快速安装ElementUI</h2><p>项目根目录执行以下命令:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i element-ui -S</span><br></pre></td></tr></table></figure><p>上面的命令等同于 <code>npm install element-ui --save</code></p><p>执行命令效果：</p><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/1556417812874.png" alt="1556417812874"></p><h2 id="配置ElementUI到项目中"><a href="#配置ElementUI到项目中" class="headerlink" title="配置ElementUI到项目中"></a>配置ElementUI到项目中</h2><p>在main.js中导入ElementUI，并调用。代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// elementUI 导入</span><br><span class="line"><span class="keyword">import</span> ElementUI <span class="keyword">from</span> <span class="string">'element-ui'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'element-ui/lib/theme-chalk/index.css'</span>;</span><br><span class="line">// 调用插件</span><br><span class="line">Vue.use(ElementUI);</span><br></pre></td></tr></table></figure><p>成功引入了ElementUI以后，接下来我们就可以开始进入前端页面开发，首先是首页。</p><h1 id="首页"><a href="#首页" class="headerlink" title="首页"></a>首页</h1><p>首页采用了上下页面布局，首页是导航栏、轮播图。。。脚部等几个小模块。所以我们可以把首页作为一个组件进行开发，然后把首页的这些小模块作为单独的组件来进行开发。</p><h2 id="创建首页组件"><a href="#创建首页组件" class="headerlink" title="创建首页组件"></a>创建首页组件</h2><p>在src/components目录下创建文件 Home.vue</p><p>代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"home"</span>&gt;</span></span><br><span class="line">    首页</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">  name:<span class="string">"Home"</span>,</span></span><br><span class="line">  data()&#123;</span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="创建首页对应的路由"><a href="#创建首页对应的路由" class="headerlink" title="创建首页对应的路由"></a>创建首页对应的路由</h3><p>在router/index.js中引入Home组件，并设置Home组件作为首页路由。</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">"vue"</span></span><br><span class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">"vue-router"</span></span><br><span class="line"></span><br><span class="line">// 后面这里引入可以被用户访问的页面组件</span><br><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">"../components/Home"</span></span><br><span class="line"></span><br><span class="line">Vue.use(Router);</span><br><span class="line"></span><br><span class="line">export default new Router(&#123;</span><br><span class="line">  // 路由跳转模式，注意使用 history</span><br><span class="line">  mode: <span class="string">"history"</span>,</span><br><span class="line"></span><br><span class="line">  // 路由规则</span><br><span class="line">  routes:[</span><br><span class="line">    &#123;</span><br><span class="line">      // name:<span class="string">"路由别名"</span>,</span><br><span class="line">      name:<span class="string">"Home"</span>,</span><br><span class="line">      // path: <span class="string">"路由地址"</span>,</span><br><span class="line">      path: <span class="string">"/"</span>,</span><br><span class="line">      // component: 组件类名,</span><br><span class="line">      component: Home,</span><br><span class="line">    &#125;,</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      下载安装路由组件,在src目录下创建routes路由目录，在router目录下创建index.js路由文件,index.js路由文件中，编写初始化路由对象的代码...
    
    </summary>
    
    
      <category term="前端框架" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="vue框架" scheme="http://yoursite.com/tags/vue%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>[Vue自动化工具（Vue-cli）]</title>
    <link href="http://yoursite.com/2022/02/26/Vue%E8%87%AA%E5%8A%A8%E5%8C%96%E5%B7%A5%E5%85%B7%EF%BC%88Vue-cli%EF%BC%89/"/>
    <id>http://yoursite.com/2022/02/26/Vue%E8%87%AA%E5%8A%A8%E5%8C%96%E5%B7%A5%E5%85%B7%EF%BC%88Vue-cli%EF%BC%89/</id>
    <published>2022-02-26T02:00:16.000Z</published>
    <updated>2022-02-27T12:16:18.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue自动化工具（Vue-cli）"><a href="#Vue自动化工具（Vue-cli）" class="headerlink" title="Vue自动化工具（Vue-cli）"></a>Vue自动化工具（Vue-cli）</h1><p>前面学习了普通组件以后，接下来我们继续学习单文件组件则需要提前先安装准备一些组件开发工具。否则无法使用和学习单文件组件。</p><p>一般情况下，单文件组件，我们运行在 自动化工具vue-CLI中，可以帮我们把单文件组件编译成普通的js代码。所以我们需要在电脑先安装搭建vue-CLI工具。</p><p>官网：<a href="https://cli.vuejs.org/zh/" target="_blank" rel="noopener">https://cli.vuejs.org/zh/</a></p><p>Vue CLI 需要 <a href="https://nodejs.org/" target="_blank" rel="noopener">Node.js</a> 8.9 或更高版本 (推荐 8.11.0+)。你可以使用 <a href="https://github.com/creationix/nvm" target="_blank" rel="noopener">nvm</a> 或 <a href="https://github.com/coreybutler/nvm-windows" target="_blank" rel="noopener">nvm-windows</a>在同一台电脑中管理多个 Node 版本。</p><p>nvm工具的下载和安装： </p><p><a href="https://www.jianshu.com/p/d0e0935b150a" target="_blank" rel="noopener">https://www.jianshu.com/p/d0e0935b150a</a></p><p> <a href="https://www.jianshu.com/p/622ad36ee020" target="_blank" rel="noopener">https://www.jianshu.com/p/622ad36ee020</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -o- https://github.com/nvm-sh/nvm/v0.35.3/install.sh | bash</span><br></pre></td></tr></table></figure><p>安装记录:</p><p>打开:<a href="https://github.com/coreybutler/nvm-windows/releases" target="_blank" rel="noopener">https://github.com/coreybutler/nvm-windows/releases</a></p><p>安装完成以后,先查看环境变量是否设置好了.</p><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/1552357036022.png" alt="1552357036022"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">常用的nvm命令</span><br><span class="line"></span><br><span class="line">nvm list   <span class="comment"># 列出目前在nvm里面安装的所有node版本</span></span><br><span class="line">nvm install node版本号      <span class="comment"># 安装指定版本的node.js</span></span><br><span class="line">nvm uninstall node版本号    <span class="comment"># 卸载指定版本的node.js</span></span><br><span class="line">nvm use node版本号          <span class="comment"># 切换当前使用的node.js版本</span></span><br></pre></td></tr></table></figure><p>如果使用nvm工具，则直接可以不用自己手动下载，如果使用nvm下载安装 node的npm比较慢的时候，可以修改nvm的配置文件(在安装根目录下)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># settings.txt</span><br><span class="line">root: C:\tool\nvm    [这里的目录地址是安装nvm时自己设置的地址,要根据实际修改]</span><br><span class="line">path: C:\tool\nodejs</span><br><span class="line">arch: 64</span><br><span class="line">proxy: none</span><br><span class="line">node_mirror: http:&#x2F;&#x2F;npm.taobao.org&#x2F;mirrors&#x2F;node&#x2F; </span><br><span class="line">npm_mirror: https:&#x2F;&#x2F;npm.taobao.org&#x2F;mirrors&#x2F;npm&#x2F;</span><br></pre></td></tr></table></figure><h2 id="安装node-js"><a href="#安装node-js" class="headerlink" title="安装node.js"></a>安装node.js</h2><p>Node.js是一个新的后端(后台)语言，它的语法和JavaScript类似，所以可以说它是属于前端的后端语言，后端语言和前端语言的区别：</p><ul><li>运行环境：后端语言一般运行在服务器端，前端语言运行在客户端的浏览器上</li><li>功能：后端语言可以操作文件，可以读写数据库，前端语言不能操作文件，不能读写数据库。</li></ul><p>我们一般安装LTS(长线支持版本 Long-Time Support)：</p><p>下载地址：<a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">https://nodejs.org/en/download/</a>【上面已经安装了nvm，那么这里不用手动安装了】</p><p>node.js的版本有两大分支：</p><p>官方发布的node.js版本：0.xx.xx 这种版本号就是官方发布的版本</p><p>社区发布的node.js版本：xx.xx.x 就是社区开发的版本</p><p>Node.js如果安装成功，可以查看Node.js的版本,在终端输入如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure><h2 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h2><p>在安装node.js完成后，在node.js中会同时帮我们安装一个npm包管理器npm。我们可以借助npm命令来安装node.js的包。这个工具相当于python的pip管理器。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">npm install -g 包名              <span class="comment"># 安装模块   -g表示全局安装，如果没有-g，则表示在当前项目安装</span></span><br><span class="line">npm list                        <span class="comment"># 查看当前目录下已安装的node包</span></span><br><span class="line">npm view 包名 engines            <span class="comment"># 查看包所依赖的Node的版本 </span></span><br><span class="line">npm outdated                    <span class="comment"># 检查包是否已经过时，命令会列出所有已过时的包</span></span><br><span class="line">npm update 包名                  <span class="comment"># 更新node包</span></span><br><span class="line">npm uninstall 包名               <span class="comment"># 卸载node包</span></span><br><span class="line">npm 命令 -h                      <span class="comment"># 查看指定命令的帮助文档</span></span><br></pre></td></tr></table></figure><h2 id="安装Vue-cli"><a href="#安装Vue-cli" class="headerlink" title="安装Vue-cli"></a>安装Vue-cli</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g vue-cli</span><br></pre></td></tr></table></figure><p>如果安装速度过慢，一直超时，可以考虑切换npm镜像源：<a href="http://npm.taobao.org/" target="_blank" rel="noopener">http://npm.taobao.org/</a></p><h2 id="使用Vue-CLI初始化创建前端项目"><a href="#使用Vue-CLI初始化创建前端项目" class="headerlink" title="使用Vue-CLI初始化创建前端项目"></a>使用Vue-CLI初始化创建前端项目</h2><h3 id="生成项目目录"><a href="#生成项目目录" class="headerlink" title="生成项目目录"></a>生成项目目录</h3><p>使用vue-cli自动化工具可以快速搭建单页应用项目目录。</p><p>该工具为现代化的前端开发工作流提供了开箱即用的构建配置。只需几分钟即可创建并启动一个带热重载、保存时静态检查以及可用于生产环境的构建配置的项目：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 生成一个基于 webpack 模板的新项目</span><br><span class="line">vue init webpack 项目目录名</span><br><span class="line">例如：</span><br><span class="line">vue init webpack myproject</span><br><span class="line"></span><br><span class="line">// 启动开发服务器 ctrl+c 停止服务</span><br><span class="line"><span class="built_in">cd</span> myproject</span><br><span class="line">npm run dev           <span class="comment"># 运行这个命令就可以启动node提供的测试http服务器</span></span><br></pre></td></tr></table></figure><p>运行了上面代码以后,终端下会出现以下效果提示：</p><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/1552187745456.png" alt="1552187745456"></p><p>那么访问：<a href="http://localhost:8080/" target="_blank" rel="noopener">http://localhost:8080/</a></p><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/1552187794989.png" alt="1552187794989"></p><h3 id="项目目录结构"><a href="#项目目录结构" class="headerlink" title="项目目录结构"></a>项目目录结构</h3><p>src 主开发目录，要开发的单文件组件全部在这个目录下的components目录下</p><p>static 静态资源目录，所有的css，js，图片等资源文件放在这个文件夹</p><p>dist项目打包发布文件夹，最后要上线单文件项目文件都在这个文件夹中[后面打包项目,让项目中的vue组件经过编译变成js 代码以后,dist就出现了]</p><p>node_modules目录是node的依赖包目录</p><p>config是配置目录，</p><p>build是项目打包时依赖的目录</p><p>src/router 路由,后面需要我们在使用Router路由的时候,自己声明.</p><h3 id="vue项目执行流程图"><a href="#vue项目执行流程图" class="headerlink" title="vue项目执行流程图"></a>vue项目执行流程图</h3><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/page_structrue.png" alt="page_structrue"></p><p>page_structrue</p><p>整个项目是一个主文件index.html,index.html中会引入src文件夹中的main.js,main.js中会导入顶级单文件组件App.vue,App.vue中会通过组件嵌套或者路由来引用components文件夹中的其他单文件组件。</p><h2 id="单文件组件的使用"><a href="#单文件组件的使用" class="headerlink" title="单文件组件的使用"></a>单文件组件的使用</h2><p>组件有两种：普通组件、单文件组件</p><p>普通组件的缺点：</p><ol><li>html代码是作为js的字符串进行编写，所以组装和开发的时候不易理解，而且没有高亮效果。</li><li>普通组件用在小项目中非常合适，但是复杂的大项目中，如果把更多的组件放在html文件中，那么维护成本就会变得非常昂贵。</li><li>普通组件只是整合了js和html，但是css代码被剥离出去了。使用的时候的时候不好处理。</li></ol><p>将一个组件相关的html结构，css样式，以及交互的JavaScript代码从html文件中剥离出来，合成一个文件，这种文件就是单文件组件，相当于一个组件具有了结构、表现和行为的完整功能，方便组件之间随意组合以及组件的重用，这种文件的扩展名为“.vue”，比如：“Home.vue”。</p><ol><li>创建组件</li></ol><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/1552362045478.png" alt="1552362045478"></p><p>在组件中编辑三个标签，编写视图、vm对象和css样式代码。</p><h3 id="template-编写html代码的地方"><a href="#template-编写html代码的地方" class="headerlink" title="template 编写html代码的地方"></a>template 编写html代码的地方</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"Home"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> @<span class="attr">click</span>=<span class="string">"num--"</span> <span class="attr">class</span>=<span class="string">"sub"</span>&gt;</span>-<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">size</span>=<span class="string">"1"</span> <span class="attr">v-model</span>=<span class="string">"num"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> @<span class="attr">click</span>=<span class="string">"num++"</span> <span class="attr">class</span>=<span class="string">"add"</span>&gt;</span>+<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="script编写vue-js代码"><a href="#script编写vue-js代码" class="headerlink" title="script编写vue.js代码"></a>script编写vue.js代码</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    name:<span class="string">"Home"</span>,</span><br><span class="line">    data: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        num:<span class="number">0</span>,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h3 id="style编写当前组件的样式代码"><a href="#style编写当前组件的样式代码" class="headerlink" title="style编写当前组件的样式代码"></a>style编写当前组件的样式代码</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.sub</span>,<span class="selector-class">.add</span>&#123;</span></span><br><span class="line">    border: 1px solid red;</span><br><span class="line">    padding: 4px 7px;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="完成案例-点击加减数字"><a href="#完成案例-点击加减数字" class="headerlink" title="完成案例-点击加减数字"></a>完成案例-点击加减数字</h3><p>创建Homes.vue</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"add_num"</span>&gt;</span><br><span class="line">      &lt;span @click=<span class="string">"num++"</span>&gt;+&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">      &lt;input type="text" size="2" v-model="num"&gt;</span></span><br><span class="line"><span class="regexp">      &lt;span @click="num--"&gt;-&lt;/</span>span&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line">    name:<span class="string">"AddNum"</span>,</span><br><span class="line">    data: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        num: <span class="number">0</span>,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;style scoped&gt;</span></span><br><span class="line"><span class="regexp">   .add_num&#123;</span></span><br><span class="line"><span class="regexp">      font-size: 32px;</span></span><br><span class="line"><span class="regexp">   &#125;</span></span><br><span class="line"><span class="regexp">&lt;/</span>style&gt;</span><br></pre></td></tr></table></figure><p>在App.vue组件中调用上面的组件</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=<span class="string">"Home"</span>&gt;</span><br><span class="line">    &lt;span @click=<span class="string">"num--"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"sub"</span>&gt;-&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">    &lt;input type="text" size="1" v-model="num"&gt;</span></span><br><span class="line"><span class="regexp">    &lt;span @click="num++" class="add"&gt;+&lt;/</span>span&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    name:<span class="string">"Home"</span>,</span><br><span class="line">    data: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        num:<span class="number">0</span>,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;style scoped&gt;</span></span><br><span class="line"><span class="regexp">  .sub,.add&#123;</span></span><br><span class="line"><span class="regexp">    border: 1px solid red;</span></span><br><span class="line"><span class="regexp">    padding: 4px 7px;</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&lt;/</span>style&gt;</span><br></pre></td></tr></table></figure><p>在开发vue项目之前，需要手动把 App.vue的HelloWorld组件代码以及默认的css样式，清楚。</p><p>上面的代码效果：</p><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/1552362182984.png" alt="1552362182984"></p><h3 id="组件的嵌套"><a href="#组件的嵌套" class="headerlink" title="组件的嵌套"></a>组件的嵌套</h3><p>有时候开发vue项目时,页面也可以算是一个大组件,同时页面也可以分成多个子组件.</p><p>因为,产生了父组件调用子组件的情况.</p><p>例如,我们可以声明一个组件,作为父组件</p><p>在components/创建一个保存子组件的目录HomeSon</p><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/1552363669256.png" alt="1552363669256"></p><p>在HomeSon目录下,可以创建当前页面的子组件,例如,是Menu.vue</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  组件中代码必须写在同一个标签中</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div id=<span class="string">"menu"</span>&gt;</span><br><span class="line">      &lt;span&gt;&#123;&#123;msg&#125;&#125;&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">      &lt;div&gt;hello&lt;/</span>div&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    name:<span class="string">"Menu"</span>,</span><br><span class="line">    data: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        msg:<span class="string">"这是Menu组件里面的菜单"</span>,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>然后，在父组件中调用上面声明的子组件。</p><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/1552363770013.png" alt="1552363770013"></p><p>最后,父组件被App.vue调用.就可以看到页面效果.</p><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/1552363834171.png" alt="1552363834171"></p><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/1552363702858.png" alt="1552363702858"></p><p>效果:</p><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/1552363849977.png" alt="1552363849977"></p><h3 id="传递数据"><a href="#传递数据" class="headerlink" title="传递数据"></a>传递数据</h3><h3 id="父组件的数据传递给子组件"><a href="#父组件的数据传递给子组件" class="headerlink" title="父组件的数据传递给子组件"></a>父组件的数据传递给子组件</h3><p>例如,我们希望把父组件的数据传递给子组件.</p><p>可以通过props属性来进行数据传递.</p><p>传递数据三个步骤：</p><ol><li><p>在父组件中，调用子组件的组名处，使用属性值的方式往下传递数据</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Menu</span> <span class="attr">:mynum</span>=<span class="string">"num"</span> <span class="attr">title</span>=<span class="string">"home里面写的数据"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"># 上面表示在父组件调用Menu子组件的时候传递了2个数据：</span><br><span class="line">  如果要传递变量[变量可以各种类型的数据]，属性名左边必须加上冒号:，同时，属性名是自定义的，会在子组件中使用。</span><br><span class="line">  如果要传递普通字符串数据，则不需要加上冒号:</span><br></pre></td></tr></table></figure></li><li><p>在子组件中接受上面父组件传递的数据，需要在vm组件对象中，使用props属性类接受。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    name:<span class="string">"Menu"</span>,</span><br><span class="line">    props:[<span class="string">"mynum"</span>,<span class="string">"title"</span>],</span><br><span class="line">    data: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        msg:<span class="string">"这是Menu组件里面的菜单"</span>,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 上面 props属性中表示接受了两个数据。</span></span><br></pre></td></tr></table></figure></li><li><p>在子组件中的template中使用父组件传递过来的数据.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"menu"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;msg&#125;&#125;，&#123;&#123;title&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>hello，&#123;&#123;mynum&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><p>效果：</p><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/1552364511546.png" alt="1552364511546"></p><p>步骤流程:</p><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/1552364590540.png" alt="1552364590540"></p><p>使用父组件传递数据给子组件时, 注意一下几点:</p><ol><li><p>传递数据是变量,则需要在属性左边添加冒号.</p><p>传递数据是变量,这种数据称之为“动态数据传递”</p><p>传递数据不是变量,这种数据称之为“静态数据传递”</p></li><li><p>父组件中修改了数据,在子组件中会被同步修改,但是,子组件中的数据修改了,是不是影响到父组件中的数据.</p><p>这种情况,在开发时,也被称为“单向数据流”</p></li></ol><h3 id="子组件传递数据给父组件"><a href="#子组件传递数据给父组件" class="headerlink" title="子组件传递数据给父组件"></a>子组件传递数据给父组件</h3><ol><li><p>在子组件中，通过<code>this.$emit()</code>来调用父组件中定义的事件.</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;p&gt;Post的子组件&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">      &lt;h2&gt;&#123;&#123;fnum&#125;&#125;&lt;/</span>h2&gt;</span><br><span class="line">      &lt;p&gt;data=&#123;&#123;data&#125;&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">      &lt;p&gt;fnum=&#123;&#123;fnum&#125;&#125;&lt;/</span>p&gt;</span><br><span class="line">      &lt;div&gt;<span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"fnum"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">        name: <span class="string">"PostSon"</span>,</span><br><span class="line">        <span class="comment">// 父组件传递数据给子组件: 1. 在父组件中调用子组件的组件名称标签上面声明属性和传递值，2. 在子组件中通过props进行接收</span></span><br><span class="line">        props:[<span class="string">"data"</span>,<span class="string">"fnum"</span>],  <span class="comment">// 接受父组件中传递过来的数据</span></span><br><span class="line">        <span class="comment">// 子组件传递数据给父组件[事件的方式进行传递]：</span></span><br><span class="line">        watch:&#123;</span><br><span class="line">          fnum()&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.fnum);</span><br><span class="line">            <span class="comment">// this.$emit("父元素的自定义事件","要传递的数据");  // 通过this.$emit()方法，子组件可以把数据传递给父组件</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">this</span>.$emit(<span class="string">"postparentdata"</span>,<span class="keyword">this</span>.fnum);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;style scoped&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;/</span>style&gt;</span><br></pre></td></tr></table></figure></li><li><p>父组件中声明一个和子组件中<code>this.$emit(&quot;自定义事件名称&quot;)</code>对应的事件属性。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>num=&#123;&#123;num&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">Son</span> <span class="attr">data</span>=<span class="string">"我是付组件里面的内容"</span> <span class="attr">:fnum</span>=<span class="string">"num"</span> @<span class="attr">postparentdata</span>=<span class="string">"getsondata"</span>&gt;</span><span class="tag">&lt;/<span class="name">Son</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>父组件中，声明一个自定义方法，在事件被调用时，执行的。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">import</span> Son <span class="keyword">from</span> <span class="string">"./PostSon"</span></span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">        name: <span class="string">"Post"</span>,</span><br><span class="line">        data()&#123;</span><br><span class="line">          <span class="keyword">return</span> &#123;</span><br><span class="line">            num: <span class="number">100</span>,</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        components:&#123;</span><br><span class="line">          Son:Son,</span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">          getsondata(message)&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"父组件"</span>+message);</span><br><span class="line">            <span class="keyword">this</span>.num = message;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="在组件中使用axios获取数据"><a href="#在组件中使用axios获取数据" class="headerlink" title="在组件中使用axios获取数据"></a>在组件中使用axios获取数据</h2><p>默认情况下，我们的项目中并没有对axios包的支持，所以我们需要下载安装。</p><p>在项目根目录中使用 npm安装包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install axios</span><br></pre></td></tr></table></figure><p>接着在main.js文件中，导入axios并把axios对象 挂载到vue属性中多为一个子对象，这样我们才能在组件中使用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">// The Vue build version to load <span class="keyword">with</span> the `<span class="keyword">import</span>` command</span><br><span class="line">// (runtime-only <span class="keyword">or</span> standalone) has been set <span class="keyword">in</span> webpack.base.conf <span class="keyword">with</span> an alias.</span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App'</span> // 这里表示从别的目录下导入 单文件组件</span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span>; // 从node_modules目录中导入包</span><br><span class="line">Vue.config.productionTip = false</span><br><span class="line"></span><br><span class="line">Vue.prototype.$axios = axios; // 把对象挂载vue中</span><br><span class="line"></span><br><span class="line">/* eslint-disable no-new */</span><br><span class="line">new Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  components: &#123; App &#125;,</span><br><span class="line">  template: <span class="string">'&lt;App/&gt;'</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="在组建中使用axios获取数据"><a href="#在组建中使用axios获取数据" class="headerlink" title="在组建中使用axios获取数据"></a>在组建中使用axios获取数据</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line">。。。</span><br><span class="line">methods:&#123;</span><br><span class="line">      get_data:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">         <span class="comment">// 使用axios请求数据</span></span><br><span class="line">        <span class="keyword">this</span>.$axios.get(<span class="string">"http://wthrcdn.etouch.cn/weather_mini?city=深圳"</span>).then(<span class="function">(<span class="params">response</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(response);</span><br><span class="line">        &#125;).catch(<span class="function"><span class="params">error</span>=&gt;</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(error);</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>效果:</p><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/1552202922168.png" alt="1552202922168">使用的时候，因为本质上来说，我们还是原来的axios，所以也会收到同源策略的影响。</p>]]></content>
    
    <summary type="html">
    
      组件（Component）是自定义封装代码的功能。在前端开发过程中，经常出现多个网页的功能是重复的，而且很多不同的页面之间，也存在同样的功能,而在网页中实现一个功能，需要使用html定义功能的内容结构，使用css声明功能的外观样式，还要使用js来定义功能的...
    
    </summary>
    
    
      <category term="前端框架" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="vue框架" scheme="http://yoursite.com/tags/vue%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>[axios与组件化开发]</title>
    <link href="http://yoursite.com/2022/02/24/axios%E4%B8%8E%E7%BB%84%E4%BB%B6%E5%8C%96%E5%BC%80%E5%8F%91/"/>
    <id>http://yoursite.com/2022/02/24/axios%E4%B8%8E%E7%BB%84%E4%BB%B6%E5%8C%96%E5%BC%80%E5%8F%91/</id>
    <published>2022-02-24T12:00:16.000Z</published>
    <updated>2022-02-25T12:16:18.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="通过axios实现数据请求"><a href="#通过axios实现数据请求" class="headerlink" title="通过axios实现数据请求"></a>通过axios实现数据请求</h1><p>vue.js默认没有提供ajax功能的。</p><p>所以使用vue的时候，一般都会使用axios的插件来实现ajax与后端服务器的数据交互。</p><p>注意，axios本质上就是javascript的ajax封装，所以会被<strong>同源策略</strong>限制。</p><p>下载地址：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;unpkg.com&#x2F;axios@0.18.0&#x2F;dist&#x2F;axios.js</span><br><span class="line">https:&#x2F;&#x2F;unpkg.com&#x2F;axios@0.18.0&#x2F;dist&#x2F;axios.min.js</span><br></pre></td></tr></table></figure><p>使用文档：<a href="https://www.kancloud.cn/yunye/axios/234845" target="_blank" rel="noopener">https://www.kancloud.cn/yunye/axios/234845</a> </p><p>axios提供发送http请求的常用方法有两个：axios.get() 和 axios.post() 。</p><p>增 post</p><p>删 delete</p><p>改 put/patch</p><p>查 get</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 发送get请求</span></span><br><span class="line">    <span class="comment">// 参数1: 必填，字符串，请求的数据接口的url地址，例如请求地址：http://www.baidu.com?id=200</span></span><br><span class="line">    <span class="comment">// 参数2：可选，请求参数和请求头内容，json对象，要提供给数据接口的参数</span></span><br><span class="line">axios.get(<span class="string">'服务器的资源地址'</span>,&#123; <span class="comment">// http://www.baidu.com</span></span><br><span class="line">    params:&#123;</span><br><span class="line">    参数名:<span class="string">'参数值'</span>, <span class="comment">// id: 200,</span></span><br><span class="line">    &#125;,</span><br><span class="line">        headers:&#123;</span><br><span class="line">            选项名:<span class="string">'选项值'</span>, <span class="comment">// 请求头</span></span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">    &#125;).then(<span class="function"><span class="params">response</span>=&gt;</span>&#123; <span class="comment">// 请求成功以后的回调函数</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"请求成功"</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(response.data); <span class="comment">// 获取服务端提供的数据</span></span><br><span class="line">    </span><br><span class="line">    &#125;).catch(<span class="function"><span class="params">error</span>=&gt;</span>&#123;   <span class="comment">// 请求失败以后的回调函数</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"请求失败"</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(error.response);  <span class="comment">// 获取错误信息</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发送post请求，参数和使用和axios.get()类似。</span></span><br><span class="line">    <span class="comment">// 参数1: 必填，字符串，请求的数据接口的url地址</span></span><br><span class="line">    <span class="comment">// 参数2：必填，json对象，要提供给数据接口的参数,如果没有参数，则必须使用&#123;&#125;</span></span><br><span class="line">    <span class="comment">// 参数3：可选，json对象，请求头信息</span></span><br><span class="line">    axios.post(<span class="string">'服务器的资源地址'</span>,&#123;</span><br><span class="line">    username: <span class="string">'xiaoming'</span>,</span><br><span class="line">    password: <span class="string">'123456'</span></span><br><span class="line">    &#125;,&#123;</span><br><span class="line">        headers:&#123;</span><br><span class="line">            选项名:<span class="string">"选项值"</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    .then(<span class="function"><span class="params">response</span>=&gt;</span>&#123; <span class="comment">// 请求成功以后的回调函数</span></span><br><span class="line">      <span class="built_in">console</span>.log(response);</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(<span class="function"><span class="params">error</span>=&gt;</span>&#123;   <span class="comment">// 请求失败以后的回调函数</span></span><br><span class="line">      <span class="built_in">console</span>.log(error);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// b'firstName=Fred&amp;lastName=Flintstone'</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：axios.delete() 的用法和参数与axios.get()一样，axios.put()或者axios.patch的用法和参数与axios.post()一样。在http协议中，不同的请求动作都有不同的含义，例如：get 代表向目标服务器请求获取数据post 代表向目标服务器请求上传数据put 代表向目标服务器请求更新数据【修改全部数据】patch 代表向目标服务器请求更新数据【修改部分数据】patch 代表向目标服务器请求更新数据delete 代表向目标服务器请求删除数据</p></blockquote><h2 id="json"><a href="#json" class="headerlink" title="json"></a>json</h2><p>json是 JavaScript Object Notation 的首字母缩写，单词的意思是javascript对象表示法，这里说的json指的是类似于javascript对象的一种数据格式。</p><p>json的作用：在不同的系统平台，或不同编程语言之间传递数据。</p><h3 id="json数据的语法"><a href="#json数据的语法" class="headerlink" title="json数据的语法"></a>json数据的语法</h3><p>json数据对象类似于JavaScript中的对象，但是它的键对应的值里面是没有函数方法的，值可以是普通变量，不支持undefined，值还可以是数组或者json对象。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 原生的js的json对象</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  age:<span class="number">10</span>,</span><br><span class="line">  sex: <span class="string">'女'</span>,</span><br><span class="line">  work()&#123;                     <span class="comment">// work: function()&#123;&#125;的简写</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"好好学习"</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// json数据的对象格式,json数据格式,是没有方法的,只有属性,属性值：字符串，数值(整数，浮点数，布尔值), json，</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"name"</span>:<span class="string">"tom"</span>,</span><br><span class="line">    <span class="string">"age"</span>:<span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// json数据的数组格式：</span></span><br><span class="line">[<span class="string">"tom"</span>,<span class="number">18</span>,<span class="string">"programmer"</span>]</span><br></pre></td></tr></table></figure><p>复杂的json格式数据可以包含对象和数组的写法。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>:<span class="string">"小明"</span>,</span><br><span class="line">  <span class="attr">"age"</span>:<span class="number">200</span>,</span><br><span class="line">  <span class="attr">"is_delete"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"fav"</span>:[<span class="string">"code"</span>,<span class="string">"eat"</span>,<span class="string">"swim"</span>,<span class="string">"read"</span>],</span><br><span class="line">  <span class="attr">"son"</span>:&#123;</span><br><span class="line">    <span class="attr">"name"</span>:<span class="string">"小小明"</span>,</span><br><span class="line">    <span class="attr">"age"</span>:<span class="number">100</span>,</span><br><span class="line">    <span class="attr">"lve"</span>:[<span class="string">"code"</span>,<span class="string">"eat"</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数组结构也可以作为json传输数据。</span></span><br></pre></td></tr></table></figure><p>json数据可以保存在.json文件中，一般里面就只有一个json对象。</p><p>总结：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">1. json文件的后缀是.json</span><br><span class="line">2. json文件一般保存一个单一的json数据</span><br><span class="line">3. json数据的属性不能是方法或者undefined，属性值只能：数值[整数,小数,布尔值]、字符串、json和数组</span><br><span class="line">4. json数据只使用双引号、每一个属性成员之间使用逗号隔开，并且最后一个成员没有逗号。</span><br><span class="line">   &#123;</span><br><span class="line">      <span class="attr">"name"</span>:<span class="string">"小明"</span>,</span><br><span class="line">      <span class="attr">"age"</span>:<span class="number">200</span>,</span><br><span class="line">      <span class="attr">"fav"</span>:[<span class="string">"code"</span>,<span class="string">"eat"</span>,<span class="string">"swim"</span>,<span class="string">"read"</span>],</span><br><span class="line">      <span class="attr">"son"</span>:&#123;</span><br><span class="line">        <span class="attr">"name"</span>:<span class="string">"小小明"</span>,</span><br><span class="line">        <span class="attr">"age"</span>:<span class="number">100</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>工具：postman可以用于测试开发的数据接口。</p><p>postman就是一个软件，专门提供给开发者组织和测试http请求的。</p><h3 id="js中提供的json数据转换方法"><a href="#js中提供的json数据转换方法" class="headerlink" title="js中提供的json数据转换方法"></a>js中提供的json数据转换方法</h3><p>javascript提供了一个JSON对象来操作json数据的数据转换.</p><table><thead><tr><th>方法</th><th>参数</th><th>返回值</th><th>描述</th></tr></thead><tbody><tr><td>stringify</td><td>json对象</td><td>字符串</td><td>json对象转成字符串</td></tr><tr><td>parse</td><td>字符串</td><td>json对象</td><td>字符串格式的json数据转成json对象</td></tr></tbody></table><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// json语法</span></span><br><span class="line">    <span class="keyword">let</span> humen = &#123;</span><br><span class="line">        <span class="string">"username"</span>:<span class="string">"xiaohui"</span>,</span><br><span class="line">        <span class="string">"password"</span>:<span class="string">"1234567"</span>,</span><br><span class="line">        <span class="string">"age"</span>:<span class="number">20</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(humen);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span> humen);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// JSON对象提供对json格式数据的转换功能</span></span><br><span class="line">    <span class="comment">// stringify(json对象)  # 用于把json转换成字符串</span></span><br><span class="line">    <span class="keyword">let</span> result = <span class="built_in">JSON</span>.stringify(humen);</span><br><span class="line">    <span class="built_in">console</span>.log(result);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span> result);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// parse(字符串类型的json数据)  # 用于把字符串转成json对象</span></span><br><span class="line">    <span class="keyword">let</span> json_str = <span class="string">'&#123;"password":"1123","age":20,"name":"xiaobai"&#125;'</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(json_str)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span> json_str)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> json_obj = <span class="built_in">JSON</span>.parse(json_str);</span><br><span class="line">    <span class="built_in">console</span>.log(json_obj);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span> json_obj)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(json_obj.age)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure><h2 id="ajax"><a href="#ajax" class="headerlink" title="ajax"></a>ajax</h2><p>ajax，一般中文称之为：“阿贾克斯”，是英文 “Async Javascript And Xml”的简写，译作：异步js和xml数据传输数据。</p><p>ajax的作用： ajax可以让js代替浏览器向后端程序发送http请求，与后端通信，在用户不知道的情况下操作数据和信息，从而实现页面局部刷新数据/无刷新更新数据。</p><p>所以web开发中ajax是很常用的技术，主要用于操作后端提供的<code>数据接口</code>，从而实现网站的<code>前后端分离</code>。</p><p>ajax技术的原理是实例化js的XMLHttpRequest对象，使用此对象提供的内置方法就可以与后端进行数据通信。</p><blockquote><p>实际而言，axios或者jQuery提供的ajax，本质上就是XMLHttpRequest对象操作的封装。</p></blockquote><h3 id="数据接口"><a href="#数据接口" class="headerlink" title="数据接口"></a>数据接口</h3><p>数据接口，也叫api接口，表示<code>后端提供</code>操作数据/功能的url地址给客户端使用。</p><p>客户端通过发起请求向服务端提供的url地址申请操作数据【操作一般：增删查改】</p><p>同时在工作中，大部分数据接口都不是手写，而是通过函数库/框架来生成。</p><h3 id="ajax的使用"><a href="#ajax的使用" class="headerlink" title="ajax的使用"></a>ajax的使用</h3><p>ajax的使用必须与服务端程序配合使用，但是目前我们先学习ajax的使用，所以暂时先不涉及到服务端python代码的编写。因此，我们可以使用别人写好的数据接口进行调用。</p><p>jQuery将ajax封装成了一个函数$.ajax()，我们可以直接用这个函数来执行ajax请求。</p><table><thead><tr><th>接口</th><th>地址</th></tr></thead><tbody><tr><td>天气接口</td><td><a href="http://wthrcdn.etouch.cn/weather_mini?city=城市名称" target="_blank" rel="noopener">http://wthrcdn.etouch.cn/weather_mini?city=城市名称</a></td></tr><tr><td>音乐接口搜索</td><td><a href="http://tingapi.ting.baidu.com/v1/restserver/ting?method=baidu.ting.search.catalogSug&amp;query=歌曲标题" target="_blank" rel="noopener">http://tingapi.ting.baidu.com/v1/restserver/ting?method=baidu.ting.search.catalogSug&amp;query=歌曲标题</a></td></tr><tr><td>音乐信息接口</td><td><a href="http://tingapi.ting.baidu.com/v1/restserver/ting?method=baidu.ting.song.play&amp;songid=音乐ID" target="_blank" rel="noopener">http://tingapi.ting.baidu.com/v1/restserver/ting?method=baidu.ting.song.play&amp;songid=音乐ID</a></td></tr></tbody></table><p>编写代码获取接口提供的数据：</p><p>jQ版本</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">    &lt;script src="js/</span>jquery<span class="number">-1.12</span><span class="number">.4</span>.js<span class="string">"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">    &lt;script&gt;</span></span><br><span class="line"><span class="string">    $(function()&#123;</span></span><br><span class="line">        $("#btn").on("click",function()&#123;</span><br><span class="line">            $.ajax(&#123;</span><br><span class="line">                <span class="comment">// 后端程序的url地址</span></span><br><span class="line">                url: <span class="string">'http://wthrcdn.etouch.cn/weather_mini'</span>,</span><br><span class="line">                <span class="comment">// 也可以使用method，提交数据的方式，默认是'GET'，常用的还有'POST'</span></span><br><span class="line">                type: <span class="string">'get'</span>, </span><br><span class="line">                dataType: <span class="string">'json'</span>,  <span class="comment">// 返回的数据格式，常用的有是'json','html',"jsonp"</span></span><br><span class="line">                data:&#123; <span class="comment">// 设置发送给服务器的数据，如果是get请求，也可以写在url地址的?后面</span></span><br><span class="line">                    <span class="string">"city"</span>:<span class="string">'北京'</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">            .done(<span class="function"><span class="keyword">function</span>(<span class="params">resp</span>) </span>&#123;     <span class="comment">// 请求成功以后的操作</span></span><br><span class="line">                <span class="built_in">console</span>.log(resp);</span><br><span class="line">            &#125;)</span><br><span class="line">            .fail(<span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;    <span class="comment">// 请求失败以后的操作</span></span><br><span class="line">                <span class="built_in">console</span>.log(error);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">    &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;button id=<span class="string">"btn"</span>&gt;点击获取数据&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure><p>vue版本：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">    &lt;script src="js/</span>vue.js<span class="string">"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">    &lt;script src="</span>js/axios.js<span class="string">"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">    &lt;div id="</span>app<span class="string">"&gt;</span></span><br><span class="line"><span class="string">        &lt;input type="</span>text<span class="string">" v-model="</span>city<span class="string">"&gt;</span></span><br><span class="line"><span class="string">        &lt;button @click="</span>get_weather<span class="string">"&gt;点击获取天气&lt;/button&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;script&gt;</span></span><br><span class="line"><span class="string">        let vm = new Vue(&#123;</span></span><br><span class="line">            el:"#app",</span><br><span class="line">            data:&#123;</span><br><span class="line">                city:<span class="string">""</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">            methods:&#123;</span><br><span class="line">                get_weather()&#123;</span><br><span class="line">                    <span class="comment">// http://wthrcdn.etouch.cn/weather_mini?city=城市名称</span></span><br><span class="line">                    axios.get(<span class="string">"http://wthrcdn.etouch.cn/weather_mini?city="</span>+<span class="keyword">this</span>.city)</span><br><span class="line">                        .then(<span class="function"><span class="params">response</span>=&gt;</span>&#123;</span><br><span class="line">                            <span class="built_in">console</span>.log(response);</span><br><span class="line"></span><br><span class="line">                        &#125;).catch(<span class="function"><span class="params">error</span>=&gt;</span>&#123;</span><br><span class="line">                            <span class="built_in">console</span>.log(error.response)</span><br><span class="line">                    &#125;);</span><br><span class="line">                  <span class="comment">// 上面的参数写法,也可以是下面这种格式:</span></span><br><span class="line">                  <span class="comment">// axios.get("http://wthrcdn.etouch.cn/weather_mini",&#123;</span></span><br><span class="line">                  <span class="comment">//     // get请求的附带参数</span></span><br><span class="line">                  <span class="comment">//     params:&#123;</span></span><br><span class="line">                  <span class="comment">//         "city":"广州",</span></span><br><span class="line">                  <span class="comment">//     &#125;</span></span><br><span class="line">                  <span class="comment">// &#125;).then(response=&gt;&#123;</span></span><br><span class="line">                  <span class="comment">//     console.log(response.data);  // 获取接口数据</span></span><br><span class="line">                  <span class="comment">// &#125;).catch(error=&gt;&#123;</span></span><br><span class="line">                  <span class="comment">//     console.log(error.response); // 获取错误信息</span></span><br><span class="line">                  <span class="comment">// &#125;)</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure><h3 id="同源策略"><a href="#同源策略" class="headerlink" title="同源策略"></a>同源策略</h3><p>同源策略，是浏览器为了保护用户信息安全的一种安全机制。所谓的同源就是指代通信的两个地址（例如服务端接口地址与浏览器客户端页面地址）之间比较，是否协议、域名(IP)和端口相同。不同源的客户端脚本[javascript]在没有得到服务端的明确授权的情况下，浏览器会拒绝显示服务端信息提供给前端ajax。</p><p>ajax本质上还是javascript，是运行在浏览器中的脚本语言，所以会被受到浏览器的同源策略所限制。</p><table><thead><tr><th>前端地址：<code>http://www.oldboy.cn/index.html</code></th><th>是否同源</th><th>原因</th></tr></thead><tbody><tr><td><code>http://www.oldboy.cn/user/login.html</code></td><td>是</td><td>协议、域名、端口相同</td></tr><tr><td><code>http://www.oldboy.cn/about.html</code></td><td>是</td><td>协议、域名、端口相同</td></tr><tr><td><code>https://www.oldboy.cn:443/user/login.html</code></td><td>否</td><td>协议不同 ( https和http )</td></tr><tr><td><code>http:/www.oldboy.cn:5000/user/login.html</code></td><td>否</td><td>端口 不同( 5000和80)</td></tr><tr><td><code>http://bbs.oldboy.cn/user/login.html</code></td><td>否</td><td>域名不同 ( bbs和www )</td></tr></tbody></table><p>同源策略针对ajax的拦截，代码：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">    &lt;script src="js/</span>vue.js<span class="string">"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">    &lt;script src="</span>js/axios.js<span class="string">"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">    &lt;div id="</span>app<span class="string">"&gt;</span></span><br><span class="line"><span class="string">        &lt;input type="</span>text<span class="string">" v-model="</span>music<span class="string">"&gt;&lt;button @click="</span>get_music<span class="string">"&gt;查询歌曲&lt;/button&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;script&gt;</span></span><br><span class="line"><span class="string">        var vm = new Vue(&#123;</span></span><br><span class="line">            el:"#app",</span><br><span class="line">            data:&#123;</span><br><span class="line">                music:<span class="string">""</span>, <span class="comment">// 歌曲标题</span></span><br><span class="line">            &#125;,</span><br><span class="line">            methods:&#123;</span><br><span class="line">                get_music()&#123;</span><br><span class="line">                    axios.get(<span class="string">`http://tingapi.ting.baidu.com/v1/restserver/ting`</span>,&#123;</span><br><span class="line">                        params:&#123;</span><br><span class="line">                            method:<span class="string">"baidu.ting.search.catalogSug"</span>,</span><br><span class="line">                            query:<span class="keyword">this</span>.music,</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;).then(<span class="function"><span class="params">response</span>=&gt;</span>&#123;</span><br><span class="line">                        <span class="built_in">console</span>.log(<span class="string">"查询数据成功！"</span>);</span><br><span class="line">                    &#125;).catch(<span class="function"><span class="params">error</span>=&gt;</span>&#123;</span><br><span class="line">                        <span class="built_in">console</span>.log(<span class="string">"查询数据失败！"</span>);</span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure><p>上面代码运行错误如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Access to XMLHttpRequest at <span class="string">'http://tingapi.ting.baidu.com/v1/restserver/ting?method=baidu.ting.search.catalogSug&amp;query=%E6%88%91%E7%9A%84%E4%B8%AD%E5%9B%BD%E5%BF%83'</span> <span class="keyword">from</span> origin <span class="string">'http://localhost:63342'</span> has been blocked by CORS policy: No <span class="string">'Access-Control-Allow-Origin'</span> header <span class="keyword">is</span> present on the requested resource.</span><br></pre></td></tr></table></figure><p>上面错误，关键词：Access-Control-Allow-Origin</p><p>只要出现这个关键词，就是访问受限。出现同源策略的拦截问题。</p><h3 id="ajax跨域-跨源-方案之CORS"><a href="#ajax跨域-跨源-方案之CORS" class="headerlink" title="ajax跨域(跨源)方案之CORS"></a>ajax跨域(跨源)方案之CORS</h3><p>ajax跨域(跨源)方案：服务端授权[CORS]，jsonp，服务端代理</p><p> CORS是一个W3C标准，全称是“跨域资源共享”，它允许浏览器向跨源的后端服务器发出ajax请求，从而克服了AJAX只能同源使用的限制。</p><p> 实现CORS主要依靠后端服务器中响应数据中设置响应头信息返回的。</p><p>django的视图[伪代码]</p><p>def post(request):</p><p> response = new Response()</p><p> response .set_header(“Access-Control-Allow-Origin”,“<a href="http://localhost:63342”">http://localhost:63342”</a>)</p><p> return response;</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 在响应行信息里面设置以下内容：</span><br><span class="line">Access-Control-Allow-Origin: ajax所在的域名地址</span><br><span class="line"></span><br><span class="line">Access-Control-Allow-Origin: www.oldboy.cn  <span class="comment"># 表示只允许www.oldboy.cn域名的客户端的ajax跨域访问</span></span><br><span class="line"></span><br><span class="line">// * 表示任意源，表示允许任意源下的客户端的ajax都可以访问当前服务端信息</span><br><span class="line">Access-Control-Allow-Origin: *</span><br></pre></td></tr></table></figure><p><img src="/images/1556074087897.png" alt=""></p><p>总结：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">0. 同源策略：浏览器的一种保护用户数据的一种安全机制。</span><br><span class="line">   浏览器会限制ajax不能跨源访问其他源的数据地址。</span><br><span class="line">   同源：判断两个通信的地址之间，是否协议，域名[IP]，端口一致。</span><br><span class="line">   </span><br><span class="line">   ajax：  http:&#x2F;&#x2F;127.0.0.1&#x2F;index.html</span><br><span class="line">   api数据接口：  http:&#x2F;&#x2F;localhost&#x2F;index</span><br><span class="line">   </span><br><span class="line">   这两个是同源么？不是同源的。是否同源的判断依据不会根据电脑来判断，而是通过协议、域名、端口的字符串是否来判断。</span><br><span class="line">   </span><br><span class="line">1. ajax默认情况下会受到同源策略的影响，一旦受到影响会报错误如下：</span><br><span class="line"> No &#39;Access-Control-Allow-Origin&#39; header is present on the requested resource</span><br><span class="line"></span><br><span class="line">2. 解决ajax只能同源访问数据接口的方式：</span><br><span class="line">   1. CORS，跨域资源共享，在服务端的响应行中设置：</span><br><span class="line">      Access-Control-Allow-Origin: 允许访问的域名地址</span><br><span class="line">   2. jsonp</span><br><span class="line">     所谓的jsonp本质上来说不是ajax技术，jsonp的核心实现是依靠script本身加载外部js文件来实现的。</span><br><span class="line">     当然，实现jsonp技术，也需要服务端的配合</span><br><span class="line">   3. 是否服务端代理</span><br><span class="line">      思路：通过python来请求对应的服务器接口，客户端和python这边处于同源，那么就实现了服务端代理</span><br></pre></td></tr></table></figure><h1 id="组件化开发"><a href="#组件化开发" class="headerlink" title="组件化开发"></a>组件化开发</h1><h2 id="组件-component"><a href="#组件-component" class="headerlink" title="组件[component]"></a>组件[component]</h2><p>组件（Component）是自定义封装的功能。在前端开发过程中，经常出现多个网页的功能是重复的，而且很多不同的页面之间，也存在同样的功能。</p><p>而在网页中实现一个功能，需要使用html定义功能的内容结构，使用css声明功能的外观样式，还要使用js来定义功能的特效，因此就产生了把一个功能相关的[HTML、css和javascript]代码封装在一起组成一个整体的代码块封装模式，我们称之为“组件”。</p><p>所以，组件就是一个html网页中的功能，一般就是一个标签，标签中有自己的html内容结构，css样式和js特效。</p><p>这样，前端人员就可以在组件化开发时，只需要书写一次代码，随处引入即可使用。</p><p>vue的组件有两种：默认组件[全局组件] 和 单文件组件</p><h3 id="5-1-1-默认组件"><a href="#5-1-1-默认组件" class="headerlink" title="5.1.1 默认组件"></a>5.1.1 默认组件</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">addnum</span>&gt;</span><span class="tag">&lt;/<span class="name">addnum</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">addnum</span>&gt;</span><span class="tag">&lt;/<span class="name">addnum</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">addnum</span>&gt;</span><span class="tag">&lt;/<span class="name">addnum</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">addnum</span>&gt;</span><span class="tag">&lt;/<span class="name">addnum</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">addnum</span>&gt;</span><span class="tag">&lt;/<span class="name">addnum</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    Vue.component(<span class="string">"addnum"</span>,&#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">        template:'<span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"num"</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"num+=1"</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>',</span></span></span><br><span class="line"><span class="actionscript">        data: <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 写在这里的数据只有当前组件可以使用</span></span></span><br><span class="line"><span class="actionscript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line">                num:1,</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el:<span class="string">"#app"</span>,</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 这里写的数据是全局公用的，整个文件共享</span></span></span><br><span class="line">        data:&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="Vue自动化工具（Vue-cli）"><a href="#Vue自动化工具（Vue-cli）" class="headerlink" title="Vue自动化工具（Vue-cli）"></a>Vue自动化工具（Vue-cli）</h1><p>前面学习了普通组件以后，接下来我们继续学习单文件组件则需要提前先安装准备一些组件开发工具。否则无法使用和学习单文件组件。</p><p>一般情况下，单文件组件，我们运行在 自动化工具vue-CLI中，可以帮我们编译单文件组件。所以我们需要在系统中先搭建vue-CLI工具，</p><p>官网：<a href="https://cli.vuejs.org/zh/" target="_blank" rel="noopener">https://cli.vuejs.org/zh/</a></p><p>Vue CLI 需要 <a href="https://nodejs.org/" target="_blank" rel="noopener">Node.js</a> 8.9 或更高版本 (推荐 8.11.0+)。你可以使用 <a href="https://github.com/creationix/nvm" target="_blank" rel="noopener">nvm</a> 或 <a href="https://github.com/coreybutler/nvm-windows" target="_blank" rel="noopener">nvm-windows</a>在同一台电脑中管理多个 Node 版本。</p><p>nvm工具的下载和安装： </p><p><a href="https://www.jianshu.com/p/d0e0935b150a" target="_blank" rel="noopener">https://www.jianshu.com/p/d0e0935b150a</a></p><p><a href="https://www.jianshu.com/p/622ad36ee020" target="_blank" rel="noopener">​https://www.jianshu.com/p/622ad36ee020</a></p><p>安装记录:</p><p>打开:<a href="https://github.com/coreybutler/nvm-windows/releases" target="_blank" rel="noopener">https://github.com/coreybutler/nvm-windows/releases</a></p><p>安装完成以后,先查看环境变量是否设置好了.</p><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/1552357036022.png" alt="1552357036022"></p><p>常用的nvm命令</p><p>nvm list # 列出目前在nvm里面安装的所有node版本 nvm install node版本号 # 安装指定版本的node.js nvm uninstall node版本号 # 卸载指定版本的node.js nvm use node版本号 # 切换当前使用的node.js版本</p><p>如果使用nvm工具，则直接可以不用自己手动下载，如果使用nvm下载安装 node的npm比较慢的时候，可以修改nvm的配置文件(在安装根目录下)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># settings.txt</span><br><span class="line">root: C:\tool\nvm    [这里的目录地址是安装nvm时自己设置的地址,要根据实际修改]</span><br><span class="line">path: C:\tool\nodejs</span><br><span class="line">arch: 64</span><br><span class="line">proxy: none</span><br><span class="line">node_mirror: http:&#x2F;&#x2F;npm.taobao.org&#x2F;mirrors&#x2F;node&#x2F; </span><br><span class="line">npm_mirror: https:&#x2F;&#x2F;npm.taobao.org&#x2F;mirrors&#x2F;npm&#x2F;</span><br></pre></td></tr></table></figure><h2 id="安装node-js"><a href="#安装node-js" class="headerlink" title="安装node.js"></a>安装node.js</h2><p>Node.js是一个新的后端(后台)语言，它的语法和JavaScript类似，所以可以说它是属于前端的后端语言，后端语言和前端语言的区别：</p><ul><li>运行环境：后端语言一般运行在服务器端，前端语言运行在客户端的浏览器上</li><li>功能：后端语言可以操作文件，可以读写数据库，前端语言不能操作文件，不能读写数据库。</li></ul><p>我们一般安装LTS(长线支持版本 Long-Time Support)：</p><p>下载地址：<a href="https://nodejs.org/en/download/【上面已经安装了nvm，那么这里不用手动安装了】" target="_blank" rel="noopener">https://nodejs.org/en/download/【上面已经安装了nvm，那么这里不用手动安装了】</a></p><p>node.js的版本有两大分支：</p><p>官方发布的node.js版本：0.xx.xx 这种版本号就是官方发布的版本</p><p>社区发布的node.js版本：xx.xx.x 就是社区开发的版本</p><p>Node.js如果安装成功，可以查看Node.js的版本,在终端输入如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure><h2 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h2><p>在安装node.js完成后，在node.js中会同时帮我们安装一个npm包管理器npm。我们可以借助npm命令来安装node.js的包。这个工具相当于python的pip管理器。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">npm install -g 包名              <span class="comment"># 安装模块   -g表示全局安装，如果没有-g，则表示在当前项目安装</span></span><br><span class="line">npm list                        <span class="comment"># 查看当前目录下已安装的node包</span></span><br><span class="line">npm view 包名 engines            <span class="comment"># 查看包所依赖的Node的版本 </span></span><br><span class="line">npm outdated                    <span class="comment"># 检查包是否已经过时，命令会列出所有已过时的包</span></span><br><span class="line">npm update 包名                  <span class="comment"># 更新node包</span></span><br><span class="line">npm uninstall 包名               <span class="comment"># 卸载node包</span></span><br><span class="line">npm 命令 -h                      <span class="comment"># 查看指定命令的帮助文档</span></span><br></pre></td></tr></table></figure><h2 id="安装Vue-cli"><a href="#安装Vue-cli" class="headerlink" title="安装Vue-cli"></a>安装Vue-cli</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g vue-cli</span><br></pre></td></tr></table></figure><p>如果安装速度过慢，一直超时，可以考虑切换npm镜像源：<a href="http://npm.taobao.org/" target="_blank" rel="noopener">http://npm.taobao.org/</a></p><h2 id="使用Vue-CLI初始化创建前端项目"><a href="#使用Vue-CLI初始化创建前端项目" class="headerlink" title="使用Vue-CLI初始化创建前端项目"></a>使用Vue-CLI初始化创建前端项目</h2><h3 id="生成项目目录"><a href="#生成项目目录" class="headerlink" title="生成项目目录"></a>生成项目目录</h3><p>使用vue自动化工具可以快速搭建单页应用项目目录。</p><p>该工具为现代化的前端开发工作流提供了开箱即用的构建配置。只需几分钟即可创建并启动一个带热重载、保存时静态检查以及可用于生产环境的构建配置的项目：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 生成一个基于 webpack 模板的新项目</span><br><span class="line">vue init webpack 项目目录名</span><br><span class="line">例如：</span><br><span class="line">vue init webpack myproject</span><br><span class="line"></span><br><span class="line">// 启动开发服务器 ctrl+c 停止服务</span><br><span class="line"><span class="built_in">cd</span> myproject</span><br><span class="line">npm run dev           <span class="comment"># 运行这个命令就可以启动node提供的测试http服务器</span></span><br></pre></td></tr></table></figure><p>运行了上面代码以后,终端下会出现以下效果提示：</p><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/1552187745456.png" alt="1552187745456"></p><p>那么访问：<a href="http://localhost:8080/" target="_blank" rel="noopener">http://localhost:8080/</a></p><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/1552187794989.png" alt="1552187794989"></p><h3 id="项目目录结构"><a href="#项目目录结构" class="headerlink" title="项目目录结构"></a>项目目录结构</h3><p>src 主开发目录，要开发的单文件组件全部在这个目录下的components目录下</p><p>static 静态资源目录，所有的css，js文件放在这个文件夹</p><p>dist项目打包发布文件夹，最后要上线单文件项目文件都在这个文件夹中[后面打包项目,让项目中的vue组件经过编译变成js 代码以后,dist就出现了]</p><p>node_modules目录是node的包目录，</p><p>config是配置目录，</p><p>build是项目打包时依赖的目录</p><p>src/router 路由,后面需要我们在使用Router路由的时候,自己声明.</p><h3 id="项目执行流程图"><a href="#项目执行流程图" class="headerlink" title="项目执行流程图"></a>项目执行流程图</h3><p><img src="/images/page_structrue.png" alt=""></p><p>page_structrue</p><p>整个项目是一个主文件index.html,index.html中会引入src文件夹中的main.js,main.js中会导入顶级单文件组件App.vue,App.vue中会通过组件嵌套或者路由来引用components文件夹中的其他单文件组件。</p><h2 id="单文件组件的使用"><a href="#单文件组件的使用" class="headerlink" title="单文件组件的使用"></a>单文件组件的使用</h2><p>组件有两种：普通组件、单文件组件</p><p>普通组件的缺点：</p><ol><li>html代码是作为js的字符串进行编写，所以组装和开发的时候不易理解，而且没有高亮效果。</li><li>普通组件用在小项目中非常合适，但是复杂的大项目中，如果把更多的组件放在html文件中，那么维护成本就会变得非常昂贵。</li><li>普通组件只是整合了js和html，但是css代码被剥离出去了。使用的时候的时候不好处理。</li></ol><p>将一个组件相关的html结构，css样式，以及交互的JavaScript代码从html文件中剥离出来，合成一个文件，这种文件就是单文件组件，相当于一个组件具有了结构、表现和行为的完整功能，方便组件之间随意组合以及组件的重用，这种文件的扩展名为“.vue”，比如：“Home.vue”。</p><ol><li>创建组件</li></ol><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/1552362045478.png" alt="1552362045478"></p><p>在组件中编辑三个标签，编写视图、vm对象和css样式代码。</p><h3 id="template-编写html代码的地方"><a href="#template-编写html代码的地方" class="headerlink" title="template 编写html代码的地方"></a>template 编写html代码的地方</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"Home"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> @<span class="attr">click</span>=<span class="string">"num--"</span> <span class="attr">class</span>=<span class="string">"sub"</span>&gt;</span>-<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">size</span>=<span class="string">"1"</span> <span class="attr">v-model</span>=<span class="string">"num"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> @<span class="attr">click</span>=<span class="string">"num++"</span> <span class="attr">class</span>=<span class="string">"add"</span>&gt;</span>+<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="script编写vue-js代码"><a href="#script编写vue-js代码" class="headerlink" title="script编写vue.js代码"></a>script编写vue.js代码</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    name:<span class="string">"Home"</span>,</span><br><span class="line">    data: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        num:<span class="number">0</span>,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h3 id="style编写当前组件的样式代码"><a href="#style编写当前组件的样式代码" class="headerlink" title="style编写当前组件的样式代码"></a>style编写当前组件的样式代码</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">style</span> <span class="selector-tag">scoped</span>&gt;</span><br><span class="line">  <span class="selector-class">.sub</span>,<span class="selector-class">.add</span>&#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">4px</span> <span class="number">7px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h3 id="完成案例-点击加减数字"><a href="#完成案例-点击加减数字" class="headerlink" title="完成案例-点击加减数字"></a>完成案例-点击加减数字</h3><p>创建Homes.vue</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"add_num"</span>&gt;</span><br><span class="line">      &lt;span @click=<span class="string">"num++"</span>&gt;+&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">      &lt;input type="text" size="2" v-model="num"&gt;</span></span><br><span class="line"><span class="regexp">      &lt;span @click="num--"&gt;-&lt;/</span>span&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line">    name:<span class="string">"AddNum"</span>,</span><br><span class="line">    data: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        num: <span class="number">0</span>,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;style scoped&gt;</span></span><br><span class="line"><span class="regexp">   .add_num&#123;</span></span><br><span class="line"><span class="regexp">      font-size: 32px;</span></span><br><span class="line"><span class="regexp">   &#125;</span></span><br><span class="line"><span class="regexp">&lt;/</span>style&gt;</span><br></pre></td></tr></table></figure><p>在App.vue组件中调用上面的组件</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=<span class="string">"Home"</span>&gt;</span><br><span class="line">    &lt;span @click=<span class="string">"num--"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"sub"</span>&gt;-&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">    &lt;input type="text" size="1" v-model="num"&gt;</span></span><br><span class="line"><span class="regexp">    &lt;span @click="num++" class="add"&gt;+&lt;/</span>span&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    name:<span class="string">"Home"</span>,</span><br><span class="line">    data: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        num:<span class="number">0</span>,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;style scoped&gt;</span></span><br><span class="line"><span class="regexp">  .sub,.add&#123;</span></span><br><span class="line"><span class="regexp">    border: 1px solid red;</span></span><br><span class="line"><span class="regexp">    padding: 4px 7px;</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&lt;/</span>style&gt;</span><br></pre></td></tr></table></figure><p>在开发vue项目之前，需要手动把 App.vue的HelloWorld组件代码以及默认的css样式，清楚。</p><p>上面的代码效果：</p><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/1552362182984.png" alt="1552362182984"></p><h3 id="组件的嵌套"><a href="#组件的嵌套" class="headerlink" title="组件的嵌套"></a>组件的嵌套</h3><p>有时候开发vue项目时,页面也可以算是一个大组件,同时页面也可以分成多个子组件.</p><p>因为,产生了父组件调用子组件的情况.</p><p>例如,我们可以声明一个组件,作为父组件</p><p>在components/创建一个保存子组件的目录HomeSon</p><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/1552363669256.png" alt="1552363669256"></p><p>在HomeSon目录下,可以创建当前页面的子组件,例如,是Menu.vue</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  组件中代码必须写在同一个标签中</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div id=<span class="string">"menu"</span>&gt;</span><br><span class="line">      &lt;span&gt;&#123;&#123;msg&#125;&#125;&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">      &lt;div&gt;hello&lt;/</span>div&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    name:<span class="string">"Menu"</span>,</span><br><span class="line">    data: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        msg:<span class="string">"这是Menu组件里面的菜单"</span>,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>然后，在父组件中调用上面声明的子组件。</p><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/1552363770013.png" alt="1552363770013"></p><p>最后,父组件被App.vue调用.就可以看到页面效果.</p><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/1552363834171.png" alt="1552363834171"></p><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/1552363849977.png" alt="1552363849977"></p><p>效果:</p><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/1552363702858.png" alt="1552363702858"></p><h3 id="7-5-传递数据"><a href="#7-5-传递数据" class="headerlink" title="7.5 传递数据"></a>7.5 传递数据</h3><h3 id="父组件的数据传递给子组件"><a href="#父组件的数据传递给子组件" class="headerlink" title="父组件的数据传递给子组件"></a>父组件的数据传递给子组件</h3><p>例如,我们希望把父组件的数据传递给子组件.</p><p>可以通过props属性来进行数据传递.</p><p>传递数据三个步骤：</p><ol><li><p>在父组件中，调用子组件的组名处，使用属性值的方式往下传递数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;Menu :mynum&#x3D;&quot;num&quot; title&#x3D;&quot;home里面写的数据&quot;&#x2F;&gt;</span><br><span class="line"></span><br><span class="line"># 上面表示在父组件调用Menu子组件的时候传递了2个数据：</span><br><span class="line">  如果要传递变量[变量可以各种类型的数据]，属性名左边必须加上冒号:，同时，属性名是自定义的，会在子组件中使用。</span><br><span class="line">  如果要传递普通字符串数据，则不需要加上冒号:</span><br></pre></td></tr></table></figure></li><li><p>在子组件中接受上面父组件传递的数据，需要在vm组件对象中，使用props属性类接受。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    name:<span class="string">"Menu"</span>,</span><br><span class="line">    props:[<span class="string">"mynum"</span>,<span class="string">"title"</span>],</span><br><span class="line">    data: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        msg:<span class="string">"这是Menu组件里面的菜单"</span>,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 上面 props属性中表示接受了两个数据。</span></span><br></pre></td></tr></table></figure></li><li><p>在子组件中的template中使用父组件传递过来的数据.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"menu"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;msg&#125;&#125;，&#123;&#123;title&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>hello，&#123;&#123;mynum&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><p>效果：</p><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/1552364511546.png" alt="1552364511546"></p><p>步骤流程:</p><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/1552364590540.png" alt="1552364590540"></p><p>使用父组件传递数据给子组件时, 注意一下几点:</p><ol><li><p>传递数据是变量,则需要在属性左边添加冒号.</p><p>传递数据是变量,这种数据称之为“动态数据传递”</p><p>传递数据不是变量,这种数据称之为“静态数据传递”</p></li><li><p>父组件中修改了数据,在子组件中会被同步修改,但是,子组件中的数据修改了,是不是影响到父组件中的数据.</p><p>这种情况,在开发时,也被称为“单向数据流”</p></li></ol><h3 id="子组件传递数据给父组件"><a href="#子组件传递数据给父组件" class="headerlink" title="子组件传递数据给父组件"></a>子组件传递数据给父组件</h3><ol><li><p>在子组件中，通过<code>this.$emit()</code>来调用父组件中定义的事件.</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;p&gt;Post的子组件&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">      &lt;h2&gt;&#123;&#123;fnum&#125;&#125;&lt;/</span>h2&gt;</span><br><span class="line">      &lt;p&gt;data=&#123;&#123;data&#125;&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">      &lt;p&gt;fnum=&#123;&#123;fnum&#125;&#125;&lt;/</span>p&gt;</span><br><span class="line">      &lt;div&gt;<span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"fnum"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">        name: <span class="string">"PostSon"</span>,</span><br><span class="line">        <span class="comment">// 父组件传递数据给子组件: 1. 在父组件中调用子组件的组件名称标签上面声明属性和传递值，2. 在子组件中通过props进行接收</span></span><br><span class="line">        props:[<span class="string">"data"</span>,<span class="string">"fnum"</span>],  <span class="comment">// 接受父组件中传递过来的数据</span></span><br><span class="line">        <span class="comment">// 子组件传递数据给父组件[事件的方式进行传递]：</span></span><br><span class="line">        watch:&#123;</span><br><span class="line">          fnum()&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.fnum);</span><br><span class="line">            <span class="comment">// this.$emit("父元素的自定义事件","要传递的数据");  // 通过this.$emit()方法，子组件可以把数据传递给父组件</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">this</span>.$emit(<span class="string">"postparentdata"</span>,<span class="keyword">this</span>.fnum);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;style scoped&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;/</span>style&gt;</span><br></pre></td></tr></table></figure></li><li><p>父组件中声明一个和子组件中<code>this.$emit(&quot;自定义事件名称&quot;)</code>对应的事件属性。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>num=&#123;&#123;num&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">Son</span> <span class="attr">data</span>=<span class="string">"我是付组件里面的内容"</span> <span class="attr">:fnum</span>=<span class="string">"num"</span> @<span class="attr">postparentdata</span>=<span class="string">"getsondata"</span>&gt;</span><span class="tag">&lt;/<span class="name">Son</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>父组件中，声明一个自定义方法，在事件被调用时，执行的。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">import</span> Son <span class="keyword">from</span> <span class="string">"./PostSon"</span></span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">        name: <span class="string">"Post"</span>,</span><br><span class="line">        data()&#123;</span><br><span class="line">          <span class="keyword">return</span> &#123;</span><br><span class="line">            num: <span class="number">100</span>,</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        components:&#123;</span><br><span class="line">          Son:Son,</span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">          getsondata(message)&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"父组件"</span>+message);</span><br><span class="line">            <span class="keyword">this</span>.num = message;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></li></ol><p>作业：</p><ol><li>使用组件化开发，完成之前的选项卡练习功能</li><li>使用组件化开发，完成之前的todolist功能</li><li>使用组件化开发，完成table表格的增删查改作业，数据使用本地存储进行保存</li></ol><h2 id="在组件中使用axios获取数据"><a href="#在组件中使用axios获取数据" class="headerlink" title="在组件中使用axios获取数据"></a>在组件中使用axios获取数据</h2><p>默认情况下，我们的项目中并没有对axios包的支持，所以我们需要下载安装。</p><p>在项目根目录中使用 npm安装包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install axios</span><br></pre></td></tr></table></figure><p>接着在main.js文件中，导入axios并把axios对象 挂载到vue属性中多为一个子对象，这样我们才能在组件中使用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">// The Vue build version to load <span class="keyword">with</span> the `<span class="keyword">import</span>` command</span><br><span class="line">// (runtime-only <span class="keyword">or</span> standalone) has been set <span class="keyword">in</span> webpack.base.conf <span class="keyword">with</span> an alias.</span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App'</span> // 这里表示从别的目录下导入 单文件组件</span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span>; // 从node_modules目录中导入包</span><br><span class="line">Vue.config.productionTip = false</span><br><span class="line"></span><br><span class="line">Vue.prototype.$axios = axios; // 把对象挂载vue中</span><br><span class="line"></span><br><span class="line">/* eslint-disable no-new */</span><br><span class="line">new Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  components: &#123; App &#125;,</span><br><span class="line">  template: <span class="string">'&lt;App/&gt;'</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="在组建中使用axios获取数据"><a href="#在组建中使用axios获取数据" class="headerlink" title="在组建中使用axios获取数据"></a>在组建中使用axios获取数据</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line">。。。</span><br><span class="line">methods:&#123;</span><br><span class="line">      get_data:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">         <span class="comment">// 使用axios请求数据</span></span><br><span class="line">        <span class="keyword">this</span>.$axios.get(<span class="string">"http://wthrcdn.etouch.cn/weather_mini?city=深圳"</span>).then(<span class="function">(<span class="params">response</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(response);</span><br><span class="line">        &#125;).catch(<span class="function"><span class="params">error</span>=&gt;</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(error);</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>效果:</p><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/1552202922168.png" alt="1552202922168"></p><p>使用的时候，因为本质上来说，我们还是原来的axios，所以也会收到同源策略的影响。</p><h2 id="组件-component-1"><a href="#组件-component-1" class="headerlink" title="组件[component]"></a>组件[component]</h2><p>组件（Component）是自定义封装代码的功能。在前端开发过程中，经常出现多个网页的功能是重复的，而且很多不同的页面之间，也存在同样的功能。</p><p>而在网页中实现一个功能，需要使用html定义功能的内容结构，使用css声明功能的外观样式，还要使用js来定义功能的特效，因此就产生了把一个功能相关的[HTML、css和javascript]代码封装在一起组成一个整体的代码块封装模式，我们称之为“组件”。</p><p>所以，组件就是一个html网页中的功能，一般就是一个标签，标签中有自己的html内容结构，css样式和js特效。</p><p>这样，前端人员就可以在组件化开发时，只需要书写一次代码，随处引入即可使用。</p><p>vue的组件有两种：默认组件[全局组件] 和 单文件组件</p><h3 id="默认组件"><a href="#默认组件" class="headerlink" title="默认组件"></a>默认组件</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;addnum&gt;&lt;<span class="regexp">/addnum&gt;</span></span><br><span class="line"><span class="regexp">    &lt;addnum&gt;&lt;/</span>addnum&gt;</span><br><span class="line">    &lt;addnum&gt;&lt;<span class="regexp">/addnum&gt;</span></span><br><span class="line"><span class="regexp">    &lt;addnum&gt;&lt;/</span>addnum&gt;</span><br><span class="line">    &lt;addnum&gt;&lt;<span class="regexp">/addnum&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    Vue.component(<span class="string">"addnum"</span>,&#123;</span><br><span class="line">        template:<span class="string">'&lt;div&gt;&lt;input type="text" v-model="num"&gt;&lt;button @click="num+=1"&gt;点击&lt;/button&gt;&lt;/div&gt;'</span>,</span><br><span class="line">        data: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="comment">// 写在这里的数据只有当前组件可以使用</span></span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                num:<span class="number">1</span>,</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">        el:<span class="string">"#app"</span>,</span><br><span class="line">        <span class="comment">// 这里写的数据是全局公用的，整个文件共享</span></span><br><span class="line">        data:&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      通过axios实现数据请求,vue.js默认没有提供ajax功能的,所以使用vue的时候，一般都会使用axios的插件来实现ajax与后端服务器的数据交互,注意，axios本质上就是javascript的ajax封装，所以会被同源策略限制...
    
    </summary>
    
    
      <category term="前端框架" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="vue框架" scheme="http://yoursite.com/tags/vue%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>[Vue对象的属性功能]</title>
    <link href="http://yoursite.com/2022/02/14/Vue%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%B1%9E%E6%80%A7%E5%8A%9F%E8%83%BD/"/>
    <id>http://yoursite.com/2022/02/14/Vue%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%B1%9E%E6%80%A7%E5%8A%9F%E8%83%BD/</id>
    <published>2022-02-14T09:50:38.000Z</published>
    <updated>2022-02-14T10:23:41.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue对象提供的属性功能"><a href="#Vue对象提供的属性功能" class="headerlink" title="Vue对象提供的属性功能"></a>Vue对象提供的属性功能</h1><h2 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h2><p>过滤器，就是vue允许开发者自定义的文本格式化函数，可以使用在两个地方：输出内容和操作数据中。</p><p>定义过滤器的方式有两种。</p><h3 id="使用Vue-filter-进行全局定义"><a href="#使用Vue-filter-进行全局定义" class="headerlink" title="使用Vue.filter()进行全局定义"></a>使用Vue.filter()进行全局定义</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Vue.filter(<span class="string">"RMB1"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">v</span>)</span>&#123;</span><br><span class="line">  <span class="comment">//就是来格式化(处理)v这个数据的</span></span><br><span class="line">  <span class="keyword">if</span>(v==<span class="number">0</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> v</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> v+<span class="string">"元"</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="在vue对象中通过filters属性来定义"><a href="#在vue对象中通过filters属性来定义" class="headerlink" title="在vue对象中通过filters属性来定义"></a>在vue对象中通过filters属性来定义</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el:<span class="string">"#app"</span>,</span><br><span class="line">  data:&#123;&#125;,</span><br><span class="line">  filters:&#123;</span><br><span class="line">    RMB2:<span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(value==<span class="string">''</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">'¥ '</span>+value;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="计算和侦听属性"><a href="#计算和侦听属性" class="headerlink" title="计算和侦听属性"></a>计算和侦听属性</h2><h3 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h3><p>我们之前学习过字符串反转，如果直接把反转的代码写在元素中，则会使得其他同事在开发时时不易发现数据被调整了，所以vue提供了一个计算属性(computed)，可以让我们把调整data数据的代码存在在该属性中。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/vue.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el:<span class="string">"#app"</span>,</span></span><br><span class="line">            data:&#123;</span><br><span class="line"><span class="actionscript">                str1: <span class="string">"abcdefgh"</span></span></span><br><span class="line">            &#125;,</span><br><span class="line"><span class="actionscript">            computed:&#123;   <span class="comment">//计算属性：里面的函数都必须有返回值</span></span></span><br><span class="line"><span class="actionscript">                strRevs: <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">var</span> ret = <span class="keyword">this</span>.str1.split(<span class="string">""</span>).reverse().join(<span class="string">""</span>);</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">return</span> ret</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; str1 &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; strRevs &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="监听属性"><a href="#监听属性" class="headerlink" title="监听属性"></a>监听属性</h3><p>侦听属性，可以帮助我们侦听data某个数据的变化，从而做相应的自定义操作。</p><p>侦听属性是一个对象，它的键是要监听的对象或者变量，值一般是函数，当侦听的data数据发生变化时，会自定执行的对应函数，这个函数在被调用时，vue会传入两个形参，第一个是变化前的数据值，第二个是变化后的数据值。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/vue.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="actionscript">         <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el:<span class="string">"#app"</span>,</span></span><br><span class="line">            data:&#123;</span><br><span class="line">                num:20</span><br><span class="line">            &#125;,</span><br><span class="line">            watch:&#123;</span><br><span class="line"><span class="actionscript">                num:<span class="function"><span class="keyword">function</span><span class="params">(newval,oldval)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">                    <span class="comment">//num发生变化的时候，要执行的代码</span></span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(<span class="string">"num已经发生了变化！"</span>);</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; num &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"num++"</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="vue对象的生命周期"><a href="#vue对象的生命周期" class="headerlink" title="vue对象的生命周期"></a>vue对象的生命周期</h2><p>每个Vue对象在创建时都要经过一系列的初始化过程。在这个过程中Vue.js会自动运行一些叫做生命周期的的钩子函数，我们可以使用这些函数，在对象创建的不同阶段加上我们需要的代码，实现特定的功能。</p><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/vm%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%A3%B0%E6%98%8E%E5%91%A8%E6%9C%9F.png" alt="vm对象的声明周期"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/vue.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el:<span class="string">"#app"</span>,</span></span><br><span class="line">            data:&#123;</span><br><span class="line">                num:0</span><br><span class="line">            &#125;,</span><br><span class="line"><span class="actionscript">            beforeCreate:<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">"beforeCreate,vm对象尚未创建,num="</span>+ <span class="keyword">this</span>.num);  <span class="comment">//undefined</span></span></span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.name=<span class="number">10</span>; <span class="comment">// 此时没有this对象呢，所以设置的name无效，被在创建对象的时候被覆盖为0</span></span></span><br><span class="line">            &#125;,</span><br><span class="line"><span class="actionscript">            created:<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">"created,vm对象创建完成,设置好了要控制的元素范围,num="</span>+<span class="keyword">this</span>.num );  <span class="comment">// 0</span></span></span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.num = <span class="number">20</span>;</span></span><br><span class="line">            &#125;,</span><br><span class="line"><span class="actionscript">            beforeMount:<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log( <span class="keyword">this</span>.$el.innerHTML ); <span class="comment">// &lt;p&gt;&#123;&#123;num&#125;&#125;&lt;/p&gt;</span></span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">"beforeMount,vm对象尚未把data数据显示到页面中,num="</span>+<span class="keyword">this</span>.num ); <span class="comment">// 20</span></span></span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.num = <span class="number">30</span>;</span></span><br><span class="line">            &#125;,</span><br><span class="line"><span class="actionscript">            mounted:<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log( <span class="keyword">this</span>.$el.innerHTML ); <span class="comment">// &lt;p&gt;30&lt;/p&gt;</span></span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">"mounted,vm对象已经把data数据显示到页面中,num="</span>+<span class="keyword">this</span>.num); <span class="comment">// 30</span></span></span><br><span class="line">            &#125;,</span><br><span class="line"><span class="actionscript">            beforeUpdate:<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="comment">// this.$el 就是我们上面的el属性了，$el表示当前vue.js所控制的元素#app</span></span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log( <span class="keyword">this</span>.$el.innerHTML );  <span class="comment">// &lt;p&gt;30&lt;/p&gt;</span></span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">"beforeUpdate,vm对象尚未把更新后的data数据显示到页面中,num="</span>+<span class="keyword">this</span>.num); <span class="comment">// beforeUpdate----31</span></span></span><br><span class="line">                </span><br><span class="line">            &#125;,</span><br><span class="line"><span class="actionscript">            updated:<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log( <span class="keyword">this</span>.$el.innerHTML ); <span class="comment">// &lt;p&gt;31&lt;/p&gt;</span></span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">"updated,vm对象已经把过呢更新后的data数据显示到页面中,num="</span> + <span class="keyword">this</span>.num ); <span class="comment">// updated----31</span></span></span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;num&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"num++"</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>总结：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">在vue使用的过程中，如果要初始化操作，把初始化操作的代码放在 mounted 中执行。</span><br><span class="line">mounted阶段就是在vm对象已经把data数据实现到页面以后。一般页面初始化使用。例如，用户访问页面加载成功以后，就要执行的ajax请求。</span><br><span class="line"></span><br><span class="line">另一个就是created，这个阶段就是在 vue对象创建以后，把ajax请求后端数据的代码放进 created</span><br></pre></td></tr></table></figure><h2 id="阻止事件冒泡和刷新页面"><a href="#阻止事件冒泡和刷新页面" class="headerlink" title="阻止事件冒泡和刷新页面"></a>阻止事件冒泡和刷新页面</h2><p>件冒泡：指代js中子元素的事件触发以后，会导致父级元素的同类事件一并被触发到。</p><p>事件冒泡有好处，也有坏处。</p><p>好处：如果能正确利用这种现象，可以实现事件委托，提升特效的性能</p><p>坏处：如果没有正确使用，则会导致不必要的bug出现。</p><p>使用.stop和.prevent</p><h3 id="原生js阻止事件冒泡"><a href="#原生js阻止事件冒泡" class="headerlink" title="原生js阻止事件冒泡"></a>原生js阻止事件冒泡</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>事件冒泡<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.box1</span>&#123;</span></span><br><span class="line">        width: 400px;</span><br><span class="line">        height: 300px;</span><br><span class="line">        background-color: orange;</span><br><span class="line">        padding-top: 100px;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.box2</span>&#123;</span></span><br><span class="line">        width: 200px;</span><br><span class="line">        height: 200px;</span><br><span class="line"><span class="css">        <span class="selector-tag">background-color</span>: <span class="selector-id">#000</span>;</span></span><br><span class="line">        margin: auto;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">onclick</span>=<span class="string">"alert('点击了body')"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box1"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> box1 = <span class="built_in">document</span>.getElementsByClassName(<span class="string">"box1"</span>)[<span class="number">0</span>];</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> box2 = <span class="built_in">document</span>.getElementsByClassName(<span class="string">"box2"</span>)[<span class="number">0</span>];</span></span><br><span class="line"><span class="actionscript">    box1.onclick = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">        alert(<span class="string">"点击了box1"</span>);</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="actionscript">    box2.onclick = <span class="function"><span class="keyword">function</span><span class="params">(event)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">        alert(<span class="string">"点击了box2"</span>);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(event);</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 原生js阻止事件冒泡</span></span></span><br><span class="line">        event.stopPropagation();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="利用事件冒泡现象实现事件委托"><a href="#利用事件冒泡现象实现事件委托" class="headerlink" title="利用事件冒泡现象实现事件委托"></a>利用事件冒泡现象实现事件委托</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;事件冒泡&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line"></span><br><span class="line">    &lt;&#x2F;style&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;ul id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">        &lt;li&gt;1111111111111111&lt;&#x2F;li&gt;</span><br><span class="line">        &lt;li&gt;2222222222222222&lt;&#x2F;li&gt;</span><br><span class="line">        &lt;li&gt;3333333333333333&lt;&#x2F;li&gt;</span><br><span class="line">        &lt;li&gt;4444444444444444&lt;&#x2F;li&gt;</span><br><span class="line">        &lt;li&gt;5555555555555555&lt;&#x2F;li&gt;</span><br><span class="line">    &lt;&#x2F;ul&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">    &#x2F;&#x2F; 批量元素绑定事件</span><br><span class="line">    &#x2F;&#x2F;  var list &#x3D; document.getElementById(&quot;app&quot;).children;</span><br><span class="line">    &#x2F;&#x2F;  for(var i in list)&#123;</span><br><span class="line">    &#x2F;&#x2F;      list[i].onclick &#x3D; function()&#123;</span><br><span class="line">    &#x2F;&#x2F;          console.log(this.innerHTML);</span><br><span class="line">    &#x2F;&#x2F;      &#125;</span><br><span class="line">    &#x2F;&#x2F;  &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 可以通过事件委托来提升性能</span><br><span class="line">    var ul &#x3D; document.getElementById(&quot;app&quot;);</span><br><span class="line">    ul.onclick &#x3D; function(event)&#123;</span><br><span class="line">        &#x2F;&#x2F; 事件最初的触发元素</span><br><span class="line">        var self &#x3D; event.target;</span><br><span class="line">        console.log(self.innerHTML)</span><br><span class="line">    &#125;</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><h3 id="vue中阻止事件冒泡"><a href="#vue中阻止事件冒泡" class="headerlink" title="vue中阻止事件冒泡"></a>vue中阻止事件冒泡</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;事件冒泡&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">    .box1&#123;</span><br><span class="line">        width: 400px;</span><br><span class="line">        height: 300px;</span><br><span class="line">        background-color: orange;</span><br><span class="line">        padding-top: 100px;</span><br><span class="line">    &#125;</span><br><span class="line">    .box2&#123;</span><br><span class="line">        width: 200px;</span><br><span class="line">        height: 200px;</span><br><span class="line">        background-color: #000;</span><br><span class="line">        margin: auto;</span><br><span class="line">    &#125;</span><br><span class="line">    &lt;&#x2F;style&gt;</span><br><span class="line">    &lt;script src&#x3D;&quot;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id&#x3D;&quot;app&quot; class&#x3D;&quot;box1&quot; @click&#x3D;&quot;show(&#39;点击了box1&#39;)&quot;&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;box2&quot; @click.stop&#x3D;&quot;show(&#39;点击了box2&#39;)&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">    &#x2F;&#x2F; vue本质上就是js，所以vue中的事件操作也会存在事件冒泡现象</span><br><span class="line">    &#x2F;&#x2F; 可以使用辅助指令 @click.stop来阻止事件冒泡</span><br><span class="line">    var vm &#x3D; new Vue(&#123;</span><br><span class="line">        el:&quot;#app&quot;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">            show(message)&#123;</span><br><span class="line">                alert(message);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><h2 id="综合案例-todolist"><a href="#综合案例-todolist" class="headerlink" title="综合案例-todolist"></a>综合案例-todolist</h2><p>我的计划列表</p><p>html代码:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>todolist<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-class">.list_con</span>&#123;</span></span><br><span class="line"><span class="css"><span class="selector-tag">width</span><span class="selector-pseudo">:600px</span>;</span></span><br><span class="line"><span class="css"><span class="selector-tag">margin</span><span class="selector-pseudo">:50px</span> <span class="selector-tag">auto</span> 0;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="selector-class">.inputtxt</span>&#123;</span></span><br><span class="line"><span class="css"><span class="selector-tag">width</span><span class="selector-pseudo">:550px</span>;</span></span><br><span class="line"><span class="css"><span class="selector-tag">height</span><span class="selector-pseudo">:30px</span>;</span></span><br><span class="line"><span class="css"><span class="selector-tag">border</span><span class="selector-pseudo">:1px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ccc</span>;</span></span><br><span class="line"><span class="css"><span class="selector-tag">padding</span><span class="selector-pseudo">:0px</span>;</span></span><br><span class="line"><span class="css"><span class="selector-tag">text-indent</span><span class="selector-pseudo">:10px</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="selector-class">.inputbtn</span>&#123;</span></span><br><span class="line"><span class="css"><span class="selector-tag">width</span><span class="selector-pseudo">:40px</span>;</span></span><br><span class="line"><span class="css"><span class="selector-tag">height</span><span class="selector-pseudo">:32px</span>;</span></span><br><span class="line"><span class="css"><span class="selector-tag">padding</span><span class="selector-pseudo">:0px</span>;</span></span><br><span class="line"><span class="css"><span class="selector-tag">border</span><span class="selector-pseudo">:1px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ccc</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="selector-class">.list</span>&#123;</span></span><br><span class="line"><span class="css"><span class="selector-tag">margin</span><span class="selector-pseudo">:0</span>;</span></span><br><span class="line"><span class="css"><span class="selector-tag">padding</span><span class="selector-pseudo">:0</span>;</span></span><br><span class="line"><span class="css"><span class="selector-tag">list-style</span><span class="selector-pseudo">:none</span>;</span></span><br><span class="line"><span class="css"><span class="selector-tag">margin-top</span><span class="selector-pseudo">:20px</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="selector-class">.list</span> <span class="selector-tag">li</span>&#123;</span></span><br><span class="line"><span class="css"><span class="selector-tag">height</span><span class="selector-pseudo">:40px</span>;</span></span><br><span class="line"><span class="css"><span class="selector-tag">line-height</span><span class="selector-pseudo">:40px</span>;</span></span><br><span class="line"><span class="css"><span class="selector-tag">border-bottom</span><span class="selector-pseudo">:1px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ccc</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.list</span> <span class="selector-tag">li</span> <span class="selector-tag">span</span>&#123;</span></span><br><span class="line"><span class="css"><span class="selector-tag">float</span><span class="selector-pseudo">:left</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.list</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span>&#123;</span></span><br><span class="line"><span class="css"><span class="selector-tag">float</span><span class="selector-pseudo">:right</span>;</span></span><br><span class="line"><span class="css"><span class="selector-tag">text-decoration</span><span class="selector-pseudo">:none</span>;</span></span><br><span class="line"><span class="css"><span class="selector-tag">margin</span><span class="selector-pseudo">:0</span> 10<span class="selector-tag">px</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list_con"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>To do list<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">"txt1"</span> <span class="attr">class</span>=<span class="string">"inputtxt"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">"增加"</span> <span class="attr">id</span>=<span class="string">"btn1"</span> <span class="attr">class</span>=<span class="string">"inputbtn"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"list"</span> <span class="attr">class</span>=<span class="string">"list"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- javascript:; # 阻止a标签跳转 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>学习html<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">class</span>=<span class="string">"up"</span>&gt;</span> ↑ <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">class</span>=<span class="string">"down"</span>&gt;</span> ↓ <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">class</span>=<span class="string">"del"</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>学习css<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">class</span>=<span class="string">"up"</span>&gt;</span> ↑ <span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">class</span>=<span class="string">"down"</span>&gt;</span> ↓ <span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">class</span>=<span class="string">"del"</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>学习javascript<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">class</span>=<span class="string">"up"</span>&gt;</span> ↑ <span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">class</span>=<span class="string">"down"</span>&gt;</span> ↓ <span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">class</span>=<span class="string">"del"</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>特效实现效果：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>todolist<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-class">.list_con</span>&#123;</span></span><br><span class="line"><span class="css"><span class="selector-tag">width</span><span class="selector-pseudo">:600px</span>;</span></span><br><span class="line"><span class="css"><span class="selector-tag">margin</span><span class="selector-pseudo">:50px</span> <span class="selector-tag">auto</span> 0;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="selector-class">.inputtxt</span>&#123;</span></span><br><span class="line"><span class="css"><span class="selector-tag">width</span><span class="selector-pseudo">:550px</span>;</span></span><br><span class="line"><span class="css"><span class="selector-tag">height</span><span class="selector-pseudo">:30px</span>;</span></span><br><span class="line"><span class="css"><span class="selector-tag">border</span><span class="selector-pseudo">:1px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ccc</span>;</span></span><br><span class="line"><span class="css"><span class="selector-tag">padding</span><span class="selector-pseudo">:0px</span>;</span></span><br><span class="line"><span class="css"><span class="selector-tag">text-indent</span><span class="selector-pseudo">:10px</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="selector-class">.inputbtn</span>&#123;</span></span><br><span class="line"><span class="css"><span class="selector-tag">width</span><span class="selector-pseudo">:40px</span>;</span></span><br><span class="line"><span class="css"><span class="selector-tag">height</span><span class="selector-pseudo">:32px</span>;</span></span><br><span class="line"><span class="css"><span class="selector-tag">padding</span><span class="selector-pseudo">:0px</span>;</span></span><br><span class="line"><span class="css"><span class="selector-tag">border</span><span class="selector-pseudo">:1px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ccc</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="selector-class">.list</span>&#123;</span></span><br><span class="line"><span class="css"><span class="selector-tag">margin</span><span class="selector-pseudo">:0</span>;</span></span><br><span class="line"><span class="css"><span class="selector-tag">padding</span><span class="selector-pseudo">:0</span>;</span></span><br><span class="line"><span class="css"><span class="selector-tag">list-style</span><span class="selector-pseudo">:none</span>;</span></span><br><span class="line"><span class="css"><span class="selector-tag">margin-top</span><span class="selector-pseudo">:20px</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="selector-class">.list</span> <span class="selector-tag">li</span>&#123;</span></span><br><span class="line"><span class="css"><span class="selector-tag">height</span><span class="selector-pseudo">:40px</span>;</span></span><br><span class="line"><span class="css"><span class="selector-tag">line-height</span><span class="selector-pseudo">:40px</span>;</span></span><br><span class="line"><span class="css"><span class="selector-tag">border-bottom</span><span class="selector-pseudo">:1px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ccc</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.list</span> <span class="selector-tag">li</span> <span class="selector-tag">span</span>&#123;</span></span><br><span class="line"><span class="css"><span class="selector-tag">float</span><span class="selector-pseudo">:left</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.list</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span>&#123;</span></span><br><span class="line"><span class="css"><span class="selector-tag">float</span><span class="selector-pseudo">:right</span>;</span></span><br><span class="line"><span class="css"><span class="selector-tag">text-decoration</span><span class="selector-pseudo">:none</span>;</span></span><br><span class="line"><span class="css"><span class="selector-tag">margin</span><span class="selector-pseudo">:0</span> 10<span class="selector-tag">px</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"todolist"</span> <span class="attr">class</span>=<span class="string">"list_con"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>To do list<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"message"</span> <span class="attr">class</span>=<span class="string">"inputtxt"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> @<span class="attr">click</span>=<span class="string">"addItem"</span> <span class="attr">value</span>=<span class="string">"增加"</span> <span class="attr">class</span>=<span class="string">"inputbtn"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"list"</span> <span class="attr">class</span>=<span class="string">"list"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"item,key in dolist"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> @<span class="attr">click</span>=<span class="string">"upItem(key)"</span> <span class="attr">class</span>=<span class="string">"up"</span> &gt;</span> ↑ <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> @<span class="attr">click</span>=<span class="string">"downItem(key)"</span> <span class="attr">class</span>=<span class="string">"down"</span>&gt;</span> ↓ <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> @<span class="attr">click</span>=<span class="string">"delItem(key)"</span> <span class="attr">class</span>=<span class="string">"del"</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 计划列表代码</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el:<span class="string">"#todolist"</span>,</span></span><br><span class="line">        data:&#123;</span><br><span class="line"><span class="actionscript">            message:<span class="string">""</span>,</span></span><br><span class="line">            dolist:[</span><br><span class="line"><span class="actionscript">                <span class="string">"学习html"</span>,</span></span><br><span class="line"><span class="actionscript">                <span class="string">"学习css"</span>,</span></span><br><span class="line"><span class="actionscript">                <span class="string">"学习javascript"</span>,</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">            addItem()&#123;</span><br><span class="line"><span class="actionscript">                <span class="keyword">if</span>(<span class="keyword">this</span>.messsage==<span class="string">""</span>)&#123;</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.dolist.push(<span class="keyword">this</span>.message);</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.message = <span class="string">""</span></span></span><br><span class="line">            &#125;,</span><br><span class="line">            delItem(key)&#123;</span><br><span class="line"><span class="actionscript">                <span class="comment">// 删除和替换</span></span></span><br><span class="line"><span class="actionscript">                <span class="comment">// 参数1: 开始下表</span></span></span><br><span class="line"><span class="actionscript">                <span class="comment">// 参数2: 元素长度，如果不填默认删除到最后</span></span></span><br><span class="line"><span class="actionscript">                <span class="comment">// 参数3: 表示使用当前参数替换已经删除内容的位置</span></span></span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.dolist.splice(key, <span class="number">1</span>);</span></span><br><span class="line">            &#125;,</span><br><span class="line">            upItem(key)&#123;</span><br><span class="line">                if(key==0)&#123;</span><br><span class="line"><span class="actionscript">                    <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line">                &#125;</span><br><span class="line"><span class="actionscript">                <span class="comment">// 向上移动</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">let</span> result = <span class="keyword">this</span>.dolist.splice(key,<span class="number">1</span>);</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.dolist.splice(key<span class="number">-1</span>,<span class="number">0</span>,result[<span class="number">0</span>]);</span></span><br><span class="line">            &#125;,</span><br><span class="line">            downItem(key)&#123;</span><br><span class="line"><span class="actionscript">                <span class="comment">// 向下移动</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">let</span> result = <span class="keyword">this</span>.dolist.splice(key, <span class="number">1</span>);</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(result);</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.dolist.splice(key+<span class="number">1</span>,<span class="number">0</span>,result[<span class="number">0</span>]);</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      Vue对象提供的属性功能，过滤器，就是vue允许开发者自定义的文本格式化函数，可以使用在两个地方：输出内容和操作数据中。定义过滤器的方式有两种，使用Vue.filter()进行全局定义...
    
    </summary>
    
    
      <category term="前端框架" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="vue框架" scheme="http://yoursite.com/tags/vue%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>[Vue快速入门]</title>
    <link href="http://yoursite.com/2022/02/07/Vue%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/"/>
    <id>http://yoursite.com/2022/02/07/Vue%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</id>
    <published>2022-02-07T12:50:38.000Z</published>
    <updated>2022-02-07T12:50:41.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vue-js的快速入门使用"><a href="#vue-js的快速入门使用" class="headerlink" title="vue.js的快速入门使用"></a>vue.js的快速入门使用</h1><h2 id="vue-js库的下载"><a href="#vue-js库的下载" class="headerlink" title="vue.js库的下载"></a>vue.js库的下载</h2><p>vue.js是目前前端web开发最流行的工具库，由尤雨溪在2014年2月发布的。</p><p>另外几个常见的工具库：react.js /angular.js/jQuery</p><p>官方网站：</p><p>​    中文：<a href="https://cn.vuejs.org/" target="_blank" rel="noopener">https://cn.vuejs.org/</a></p><p>​    英文：<a href="https://vuejs.org/" target="_blank" rel="noopener">https://vuejs.org/</a></p><p>官方文档：<a href="https://cn.vuejs.org/v2/guide/" target="_blank" rel="noopener">https://cn.vuejs.org/v2/guide/</a></p><p>vue.js目前有1.x、2.x和3.x 版本，我们学习2.x版本的。</p><p>jQuery和vue的定位是不一样的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">jQuery的定位是获取元素和完成特效。</span><br><span class="line">vue的定位是方便操作和控制数据和完成特效。</span><br></pre></td></tr></table></figure><h2 id="vue-js库的基本使用"><a href="#vue-js库的基本使用" class="headerlink" title="vue.js库的基本使用"></a>vue.js库的基本使用</h2><p>在github下载：</p><p>在官网下载地址： <a href="https://cn.vuejs.org/v2/guide/installation.html" target="_blank" rel="noopener">https://cn.vuejs.org/v2/guide/installation.html</a></p><p>vue的引入类似于jQuery，开发中可以使用开发版本vue-x.x.x.js，产品上线要换成vue.min.js。</p><p>下图是github网站下载的vue.js目录</p><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/1544363032042.png" alt="1544363032042"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="actionscript">      <span class="comment">// vue.js的代码开始于一个Vue对象。所以每次操作数据都要声明Vue对象开始。</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el:<span class="string">'#app'</span>,   <span class="comment">// 设置当前vue对象要控制的标签范围。</span></span></span><br><span class="line"><span class="actionscript">            data:&#123;  <span class="comment">// data是将要展示到HTML标签元素中的数据。</span></span></span><br><span class="line"><span class="actionscript">              message: <span class="string">'hello world!'</span>,</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &#123;&#123; message &#125;&#125; 表示把vue对象里面data属性中的对应数据输出到页面中 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 在双标签中显示数据要通过&#123;&#123;  &#125;&#125;来完成 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>总结：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">1. vue的使用要从创建Vue对象开始</span><br><span class="line">   var vm = new Vue();</span><br><span class="line">   </span><br><span class="line">2. 创建vue对象的时候，需要传递参数，是json对象，json对象对象必须至少有两个属性成员</span><br><span class="line">   var vm = new Vue(&#123;</span><br><span class="line">         el:"#app",</span><br><span class="line">  data: &#123;</span><br><span class="line">             数据变量:"变量值",</span><br><span class="line">             数据变量:"变量值",</span><br><span class="line">             数据变量:"变量值",</span><br><span class="line">      &#125;,</span><br><span class="line">   &#125;);</span><br><span class="line">   </span><br><span class="line">   el:设置vue可以操作的html内容范围，值一般就是css的id选择器。</span><br><span class="line">   data: 保存vue.js中要显示到html页面的数据。</span><br><span class="line">   </span><br><span class="line">3. vue.js要控制器的内容范围，必须先通过id来设置。</span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="vue-js的M-V-VM思想"><a href="#vue-js的M-V-VM思想" class="headerlink" title="vue.js的M-V-VM思想"></a>vue.js的M-V-VM思想</h2><p>MVVM 是Model-View-ViewModel 的缩写，它是一种基于前端开发的架构模式。</p><p><code>Model</code> 指代的就是vue对象的data属性里面的数据。这里的数据要显示到页面中。</p><p><code>View</code>  指代的就是vue中数据要显示的HTML页面，在vue中，也称之为“视图模板” 。</p><p><code>ViewModel</code> 指代的是vue.js中我们编写代码时的vm对象了，它是vue.js的核心，负责连接 View 和 Model，保证视图和数据的一致性，所以前面代码中，data里面的数据被显示中p标签中就是vm对象自动完成的。</p><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/201105031754285061.png" alt="201105031754285061"></p><p>编写代码，让我们更加清晰的了解MVVM：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/vue.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 创建vm对象</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el: <span class="string">"#app"</span>,</span></span><br><span class="line">            data: &#123;</span><br><span class="line"><span class="actionscript">                name:<span class="string">"大标题"</span>,</span></span><br><span class="line">                age:16,</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 在双标签中显示数据要通过&#123;&#123;  &#125;&#125;来完成 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;age&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 在表单输入框中显示数据要使用v-model来完成，模板语法的时候，我们会详细学习 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"name"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在浏览器中可以在 console.log通过 vm对象可以直接访问el和data属性,甚至可以访问data里面的数据</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">console.log(vm.$el)        # #app  vm对象可以控制的范围</span><br><span class="line">console.log(vm.$data);     #    vm对象要显示到页面中的数据</span><br><span class="line">console.log(vm.$data.message);  # 访问data里面的数据</span><br><span class="line">console.log(vm.message);   # 这个 message就是data里面声明的数据,也可以使用 vm.变量名显示其他数据,message只是举例.</span><br></pre></td></tr></table></figure><p>总结：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">1.如果要输出data里面的数据作为普通标签的内容，需要使用&#123;&#123;  &#125;&#125;</span><br><span class="line">   用法：</span><br><span class="line">      vue对象的data属性：</span><br><span class="line">          data:&#123;</span><br><span class="line">            name:"小明",</span><br><span class="line">          &#125;</span><br><span class="line">      标签元素：</span><br><span class="line">      &lt;h1&gt;&#123;&#123; name &#125;&#125;&lt;/h1&gt;</span><br><span class="line">2.如果要输出data里面的数据作为表单元素的值，需要使用vue.js提供的元素属性v-model</span><br><span class="line">   用法：</span><br><span class="line">      vue对象的data属性：</span><br><span class="line">          data:&#123;</span><br><span class="line">            name:"小明",</span><br><span class="line">          &#125;</span><br><span class="line">      表单元素：</span><br><span class="line">      &lt;input v-model="name"&gt;</span><br><span class="line">      </span><br><span class="line">使用v-model把data里面的数据显示到表单元素以后，一旦用户修改表单元素的值，则data里面对应数据的值也会随之发生改变，甚至，页面中凡是使用了这个数据都会发生变化。</span><br></pre></td></tr></table></figure><h2 id="显示数据"><a href="#显示数据" class="headerlink" title="显示数据"></a>显示数据</h2>1.在双标签中显示纯文本数据一般通过{{  }}来完成数据显示，双括号中还可以支持js表达式和符合js语法的代码，例如函数调用.<p>2.在表单输入框中显示数据要使用v-model来完成数据显示</p><p>3.如果双标签的内容要显示的数据包含html代码，则使用v-html来完成</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/vue.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">          el:<span class="string">"#app"</span>,</span></span><br><span class="line">          data:&#123;</span><br><span class="line"><span class="actionscript">            str1: <span class="string">"hello"</span>,</span></span><br><span class="line">            num: 20,</span><br><span class="line">            price: 7.1,</span><br><span class="line"><span class="actionscript">            url1: <span class="string">"http://www.baidu.com"</span>,</span></span><br><span class="line"><span class="actionscript">            url2: <span class="string">"http://www.taobao.com"</span></span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)        </span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; str1 &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; str1.split("").reverse().join("") &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>num和num2中比较大的数是：&#123;&#123; num&gt;num2? num:num2 &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"name"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;(price+0.8).toFixed(2)&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>双花括号仅用输出文本内容,如果要输出html代码,则不能使用这个.要使用v-html来输出.</p><p>v-html必须在html标签里面作为属性写出来.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;title&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123;url1&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        &#123;&#123;img&#125;&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-html</span>=<span class="string">"img"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el:<span class="string">".app"</span>,</span></span><br><span class="line">            data:&#123;</span><br><span class="line"><span class="actionscript">                title:<span class="string">"我的vue"</span>,</span></span><br><span class="line"><span class="actionscript">                url1:<span class="string">"我的收获地址"</span>,</span></span><br><span class="line"><span class="handlebars"><span class="xml">                img:'<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/shendan.png"</span>&gt;</span>',</span></span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>总结：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1.可以在普通标签中使用&#123;&#123;  &#125;&#125; 或者 v-html 来输出data里面的数据</span><br><span class="line">   &lt;h1&gt;&#123;&#123;message&#125;&#125;&lt;/h1&gt;</span><br><span class="line">   </span><br><span class="line">2.可以在表单标签中使用v-model属性来输出data里面的数据，同时还可以修改data里面的数据</span><br><span class="line">   &lt;input type="text" v-model="username"&gt;</span><br></pre></td></tr></table></figure> 在输出内容到普通标签的使用\{\{  \}\}v-model或者v-html等vue提供的属性，或者 {{}} 都支持js代码。<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;str1.split("").reverse().join("")&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 3.2 支持js的运算符--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;num1+3&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 3.3 js还有一种运算符,三元运算符,类似于python里面的三元表达式</span></span><br><span class="line"><span class="comment">    三元运算符的语法:</span></span><br><span class="line"><span class="comment">    判断条件 ? 条件为true : 条件为false的结果</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    python 三元表达式[三目运算符]的语法:</span></span><br><span class="line"><span class="comment">    a if 条件 else b</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>num1和num2之间进行比较,最大值:&#123;&#123; num2&gt;num1?num2:num1 &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><p>例子：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Vue的快速使用<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;url&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;text&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-html</span>=<span class="string">"text"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">"url"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>num是&#123;&#123;num%2==0?'偶数':'奇数'&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>num的下一个数字：&#123;&#123;num-0+1&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"num"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;message.split("").reverse().join("")&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"message"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el:<span class="string">"#app"</span>, <span class="comment">// 设置vue对象控制的标签范围</span></span></span><br><span class="line"><span class="actionscript">        data:&#123;     <span class="comment">// vue要操作的数据</span></span></span><br><span class="line"><span class="actionscript">            url:<span class="string">"http://www.luffycity.com"</span>,</span></span><br><span class="line"><span class="handlebars"><span class="xml">            text:"<span class="tag">&lt;<span class="name">h1</span>&gt;</span>大标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>",</span></span></span><br><span class="line">            num: 100,</span><br><span class="line"><span class="actionscript">            message:<span class="string">"abcdef"</span>,</span></span><br><span class="line">        &#125;,</span><br><span class="line">        </span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h1><p>指令 (Directives) 是带有“v-”前缀的特殊属性。每一个指令在vue中都有固定的作用。</p><p>在vue中，提供了很多指令，常用的有：v-if、v-model、v-for等等。</p><p>指令会在vm对象的data属性的数据发生变化时，会同时改变元素中的其控制的内容或属性。</p><p>因为vue的历史版本原因，所以有一部分指令都有两种写法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vue1.x写法             vue2.x的写法</span><br><span class="line">v-html         ----&gt;   v-html</span><br><span class="line">&#123;&#123; 普通文本 &#125;&#125;          &#123;&#123;普通文本&#125;&#125;</span><br><span class="line">v-bind:属性名   ----&gt;   :属性</span><br><span class="line">v-on:事件名     ----&gt;   @事件名</span><br></pre></td></tr></table></figure><h2 id="属性操作"><a href="#属性操作" class="headerlink" title="属性操作"></a>属性操作</h2><p>格式：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">标签名</span> <span class="attr">:</span>标签属性=<span class="string">"data属性"</span>&gt;</span><span class="tag">&lt;/<span class="name">标签名</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">:title</span>=<span class="string">"str1"</span>&gt;</span>&#123;&#123; str1 &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span> <span class="comment">&lt;!-- 也可以使用v-html显示双标签的内容，&#123;&#123;  &#125;&#125; 是简写 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">:href</span>=<span class="string">"url2"</span>&gt;</span>淘宝<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">"url1"</span>&gt;</span>百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span>  <span class="comment">&lt;!-- v-bind是vue1.x版本的写法 --&gt;</span></span><br></pre></td></tr></table></figure><p>显示wifi密码效果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;script src&#x3D;&quot;js&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id&#x3D;&quot;index&quot;&gt;</span><br><span class="line">    &lt;img :src&#x3D;&quot;url&quot; :alt&#x3D;&quot;title&quot;&gt;&lt;br&gt;</span><br><span class="line">    &lt;input :type&#x3D;&quot;type&quot; placeholder&#x3D;&quot;请输入wifi密码&quot;&gt; &lt;button @click&#x3D;&quot;type&#x3D;&#39;text&#39;&quot;&gt;显示密码&lt;&#x2F;button&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    let vm &#x3D; new Vue(&#123;</span><br><span class="line">        el:&quot;#index&quot;,</span><br><span class="line">        data:&#123;</span><br><span class="line">          url:&quot;https:&#x2F;&#x2F;www.luffycity.com&#x2F;static&#x2F;img&#x2F;head-logo.a7cedf3.svg&quot;,</span><br><span class="line">          title:&quot;路飞学成&quot;,</span><br><span class="line">          type:&quot;password&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><h2 id="事件绑定"><a href="#事件绑定" class="headerlink" title="事件绑定"></a>事件绑定</h2><p>有两种事件操作的写法，@事件名 和 v-on:事件名</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"num++"</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span>   <span class="comment">&lt;!-- v-on 是vue1.x版本的写法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"num+=5"</span>&gt;</span>按钮2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><p>总结：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1.使用@事件名来进行事件的绑定</span><br><span class="line">   语法：</span><br><span class="line">      &lt;h1 @click="num++"&gt;&#123;&#123;num&#125;&#125;&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">2.绑定的事件的事件名，全部都是js的事件名：</span><br><span class="line">   @submit   ---&gt;  onsubmit</span><br><span class="line">   @focus    ---&gt;  onfocus</span><br><span class="line">   @blur     ---&gt;  onblur</span><br><span class="line">   @click    ---&gt;  onclick</span><br><span class="line">   ....</span><br></pre></td></tr></table></figure><h4 id="例如-完成商城购物车中的商品增加减少数量"><a href="#例如-完成商城购物车中的商品增加减少数量" class="headerlink" title="例如:完成商城购物车中的商品增加减少数量"></a>例如:完成商城购物车中的商品增加减少数量</h4><p>步骤：</p><ol><li>给vue对象添加操作数据的方法</li><li>在标签中使用指令调用操作数据的方法</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"++num"</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"num"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"sub"</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el:<span class="string">"#box"</span>,</span></span><br><span class="line">            data:&#123;</span><br><span class="line">                num:0,</span><br><span class="line">            &#125;,</span><br><span class="line">            methods:&#123;</span><br><span class="line">                sub()&#123;</span><br><span class="line"><span class="actionscript">                    <span class="keyword">if</span>(<span class="keyword">this</span>.num&lt;=<span class="number">1</span>)&#123;</span></span><br><span class="line"><span class="actionscript">                        <span class="keyword">this</span>.num=<span class="number">0</span>;</span></span><br><span class="line"><span class="actionscript">                    &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="actionscript">                        <span class="keyword">this</span>.num--;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--#box&gt;(button+input+button) tab键--&gt;</span></span><br></pre></td></tr></table></figure><h2 id="操作样式"><a href="#操作样式" class="headerlink" title="操作样式"></a>操作样式</h2><p>操作样式，本质就是属性操作，使用冒号：</p><h3 id="控制标签class类名"><a href="#控制标签class类名" class="headerlink" title="控制标签class类名"></a>控制标签class类名</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line">格式：</span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">:class</span>=<span class="string">"值"</span>&gt;</span>元素<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>  值可以是字符串、对象、对象名、数组</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.box1</span>&#123;</span></span><br><span class="line">        color: red;</span><br><span class="line"><span class="css">        <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#000</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.box2</span>&#123;</span></span><br><span class="line">        background-color: orange;</span><br><span class="line">        font-size: 32px;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--- 添加class类名，值是一个对象</span></span><br><span class="line"><span class="comment">        &#123;</span></span><br><span class="line"><span class="comment">         class类1:布尔值变量1,</span></span><br><span class="line"><span class="comment">         class类2:布尔值变量2,</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">         --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">:class</span>=<span class="string">"&#123;box1:myclass1&#125;"</span>&gt;</span>一个段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> @<span class="attr">click</span>=<span class="string">"myclass3=!myclass3"</span> <span class="attr">:class</span>=<span class="string">"&#123;box1:myclass2,box2:myclass3&#125;"</span>&gt;</span>一个段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> vm1=<span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el:<span class="string">"#box"</span>,</span></span><br><span class="line">            data:&#123;</span><br><span class="line"><span class="actionscript">                myclass1:<span class="literal">false</span>, <span class="comment">// 布尔值变量如果是false，则不会添加对象的属性名作为样式</span></span></span><br><span class="line"><span class="actionscript">                myclass2:<span class="literal">true</span>,  <span class="comment">// 布尔值变量如果是true，则不会添加对象的属性名作为样式</span></span></span><br><span class="line"><span class="actionscript">                myclass3:<span class="literal">false</span>,</span></span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 上面的代码可以:class的值保存到data里面的一个变量，然后使用该变量作为:class的值 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.box4</span>&#123;</span></span><br><span class="line">        background-color: red;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.box5</span>&#123;</span></span><br><span class="line">        color: green;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"mycls.box4=!mycls.box4"</span>&gt;</span>改变背景<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"mycls.box5=!mycls.box5"</span>&gt;</span>改变字体颜色<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">:class</span>=<span class="string">"mycls"</span>&gt;</span>第二个段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> vm2 = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el:<span class="string">"#app"</span>,</span></span><br><span class="line">            data:&#123;</span><br><span class="line">                mycls:&#123;</span><br><span class="line"><span class="actionscript">                    box4:<span class="literal">false</span>,</span></span><br><span class="line"><span class="actionscript">                    box5:<span class="literal">true</span></span></span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 批量给元素增加多个class样式类 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.box6</span>&#123;</span></span><br><span class="line">        background-color: red;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.box7</span>&#123;</span></span><br><span class="line">        color: green;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.box8</span>&#123;</span></span><br><span class="line">        border: 1px solid yellow;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app2"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span> <span class="attr">:class</span>=<span class="string">"[mycls1,mycls2]"</span>&gt;</span>第三个段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> vm3 = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el:<span class="string">"#app2"</span>,</span></span><br><span class="line">            data:&#123;</span><br><span class="line">                mycls1:&#123;</span><br><span class="line"><span class="actionscript">                    box6:<span class="literal">true</span>,</span></span><br><span class="line"><span class="actionscript">                    box7:<span class="literal">true</span>,</span></span><br><span class="line">                &#125;,</span><br><span class="line">                mycls2:&#123;</span><br><span class="line"><span class="actionscript">                    box8:<span class="literal">true</span>,</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>代码执行效果：</p><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/1552036325806.png" alt="1552036325806"></p><p>总结：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">1.给元素绑定class类名，最常用的就是第二种。</span><br><span class="line">    vue对象的data数据：</span><br><span class="line">        data:&#123;</span><br><span class="line">          myObj:&#123;</span><br><span class="line">            complete:true,</span><br><span class="line">            uncomplete:false,</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">html元素：    </span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span> <span class="attr">:class</span>=<span class="string">"myObj"</span>&gt;</span>2222<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    最终浏览器效果：</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box complete"</span>&gt;</span>2222<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="控制标签style样式"><a href="#控制标签style样式" class="headerlink" title="控制标签style样式"></a>控制标签style样式</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">格式1：值是json对象，对象写在元素的:style属性中</span><br><span class="line"> 标签元素：</span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">:style</span>=<span class="string">"&#123;color: activeColor, fontSize: fontSize + 'px' &#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> data数据如下：</span><br><span class="line">         data: &#123;</span><br><span class="line">             activeColor: 'red',</span><br><span class="line">             fontSize: 30</span><br><span class="line">         &#125;</span><br><span class="line">格式2：值是对象变量名，对象在data中进行声明</span><br><span class="line">   标签元素：</span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:style</span>=<span class="string">"styleObject"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   data数据如下：</span><br><span class="line">         data: &#123;</span><br><span class="line">            styleObject: &#123;</span><br><span class="line">             color: 'red',</span><br><span class="line">             fontSize: '13px'</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">格式3：值是数组</span><br><span class="line">  标签元素：</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:style</span>=<span class="string">"[style1, style2]"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">data数据如下：</span><br><span class="line">data: &#123;</span><br><span class="line">                     style1:&#123;</span><br><span class="line">                       color:"red"</span><br><span class="line">                     &#125;,</span><br><span class="line">                     style2:&#123;</span><br><span class="line">                       background:"yellow",</span><br><span class="line">                       fontSize: "21px"</span><br><span class="line">                     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实例-vue版本选项卡"><a href="#实例-vue版本选项卡" class="headerlink" title="实例-vue版本选项卡"></a>实例-vue版本选项卡</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-id">#card</span>&#123;</span></span><br><span class="line">            width: 500px;</span><br><span class="line">            height: 350px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.title</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">height</span><span class="selector-pseudo">:50px</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.title</span> <span class="selector-tag">span</span>&#123;</span></span><br><span class="line">            width: 100px;</span><br><span class="line">            height: 50px;</span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>:<span class="selector-id">#ccc</span>;</span></span><br><span class="line">            display: inline-block;</span><br><span class="line"><span class="css">            <span class="selector-tag">line-height</span>: 50<span class="selector-tag">px</span>; <span class="comment">/* 设置行和当前元素的高度相等,就可以让文本内容上下居中 */</span></span></span><br><span class="line"><span class="css">            <span class="selector-tag">text-align</span><span class="selector-pseudo">:center</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.content</span> <span class="selector-class">.list</span>&#123;</span></span><br><span class="line">            width: 500px;</span><br><span class="line">            height: 300px;</span><br><span class="line">            background-color: yellow;</span><br><span class="line">            display: none;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.content</span> <span class="selector-class">.active</span>&#123;</span></span><br><span class="line">            display: block;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.title</span> <span class="selector-class">.current</span>&#123;</span></span><br><span class="line">            background-color: yellow;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"card"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"title"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> @<span class="attr">click</span>=<span class="string">"num=0"</span> <span class="attr">:class</span>=<span class="string">"num==0?'current':''"</span>&gt;</span>国内新闻<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> @<span class="attr">click</span>=<span class="string">"num=1"</span> <span class="attr">:class</span>=<span class="string">"num==1?'current':''"</span>&gt;</span>国际新闻<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> @<span class="attr">click</span>=<span class="string">"num=2"</span> <span class="attr">:class</span>=<span class="string">"num==2?'current':''"</span>&gt;</span>银河新闻<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--&lt;span&gt;&#123;&#123;num&#125;&#125;&lt;/span&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list"</span> <span class="attr">:class</span>=<span class="string">"num==0?'active':''"</span>&gt;</span>国内新闻列表<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list"</span> <span class="attr">:class</span>=<span class="string">"num==1?'active':''"</span>&gt;</span>国际新闻列表<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list"</span> <span class="attr">:class</span>=<span class="string">"num==2?'active':''"</span>&gt;</span>银河新闻列表<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 思路：</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 当用户点击标题栏的按钮[span]时，显示对应索引下标的内容块[.list]</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 代码实现：</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> card = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el:<span class="string">"#card"</span>,</span></span><br><span class="line">            data:&#123;</span><br><span class="line">                num:0,</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>代码运行效果：</p><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/1552038219804.png" alt="1552038219804"></p><h2 id="条件渲染指令"><a href="#条件渲染指令" class="headerlink" title="条件渲染指令"></a>条件渲染指令</h2><p>vue中提供了两个指令可以用于判断是否要显示元素，分别是v-if和v-show。</p><h3 id="v-if"><a href="#v-if" class="headerlink" title="v-if"></a>v-if</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">标签元素：</span><br><span class="line">    <span class="comment">&lt;!-- vue对象最终会把条件的结果变成布尔值 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-if</span>=<span class="string">"ok"</span>&gt;</span>Yes<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">data数据：</span><br><span class="line">data:&#123;</span><br><span class="line">    ok:false    // true则是显示，false是隐藏</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="v-else"><a href="#v-else" class="headerlink" title="v-else"></a>v-else</h3><p>v-else指令来表示 v-if 的“else 块”，v-else 元素必须紧跟在带 v-if 或者 v-else-if 的元素的后面，否则它将不会被识别。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">标签元素：</span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-if</span>=<span class="string">"ok"</span>&gt;</span>Yes<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-else</span>&gt;</span>No<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">data数据：</span><br><span class="line">data:&#123;</span><br><span class="line">    ok:false    // true则是显示，false是隐藏</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="v-else-if"><a href="#v-else-if" class="headerlink" title="v-else-if"></a>v-else-if</h3><p>可以出现多个v-else-if语句，但是v-else-if之前必须有一个v-if开头。后面可以跟着v-else，也可以没有。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">标签元素：</span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-if</span>=<span class="string">"num==1"</span>&gt;</span>num的值为1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-else-if</span>=<span class="string">"num==2"</span>&gt;</span>num的值为2<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-else</span>&gt;</span>num的值是&#123;&#123;num&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">data数据：</span><br><span class="line">data:&#123;</span><br><span class="line">    num:2</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="v-show"><a href="#v-show" class="headerlink" title="v-show"></a>v-show</h3><p>用法和v-if大致一样，区别在于2点：</p><ol><li>v-show后面不能v-else或者v-else-if</li><li>v-show隐藏元素时，使用的是display:none来隐藏的，而v-if是直接从HTML文档中移除元素[ DOM操作中的remove ] </li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">标签元素：</span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-show</span>=<span class="string">"ok"</span>&gt;</span>Hello!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">data数据：</span><br><span class="line">data:&#123;</span><br><span class="line">    ok:false    // true则是显示，false是隐藏</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="列表渲染指令"><a href="#列表渲染指令" class="headerlink" title="列表渲染指令"></a>列表渲染指令</h2><p>在vue中，可以通过v-for指令可以将一组数据渲染到页面中，数据可以是数组或者对象。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">数据是数组：        </span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--book是列表的每一个元素--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"book in book_list"</span>&gt;</span>&#123;&#123;book.title&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--book是列表的每一个元素，index是每个元素的下标--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(book, index) in book_list"</span>&gt;</span>第&#123;&#123; index+1&#125;&#125;本图书：&#123;&#123;book.title&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> vm1 = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">                el:<span class="string">"#app"</span>,</span></span><br><span class="line">                data:&#123;</span><br><span class="line">                    book_list:[</span><br><span class="line"><span class="actionscript">                        &#123;<span class="string">"id"</span>:<span class="number">1</span>,<span class="string">"title"</span>:<span class="string">"图书名称1"</span>,<span class="string">"price"</span>:<span class="number">200</span>&#125;,</span></span><br><span class="line"><span class="actionscript">                        &#123;<span class="string">"id"</span>:<span class="number">2</span>,<span class="string">"title"</span>:<span class="string">"图书名称2"</span>,<span class="string">"price"</span>:<span class="number">200</span>&#125;,</span></span><br><span class="line"><span class="actionscript">                        &#123;<span class="string">"id"</span>:<span class="number">3</span>,<span class="string">"title"</span>:<span class="string">"图书名称3"</span>,<span class="string">"price"</span>:<span class="number">200</span>&#125;,</span></span><br><span class="line"><span class="actionscript">                        &#123;<span class="string">"id"</span>:<span class="number">4</span>,<span class="string">"title"</span>:<span class="string">"图书名称4"</span>,<span class="string">"price"</span>:<span class="number">200</span>&#125;,</span></span><br><span class="line">                    ]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">数据是对象：</span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--i是每一个value值--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"value in book"</span>&gt;</span>&#123;&#123;value&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--i是每一个value值,j是每一个键名--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"attr, value in book"</span>&gt;</span>&#123;&#123;attr&#125;&#125;:&#123;&#123;value&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> vm1 = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">                el:<span class="string">"#app"</span>,</span></span><br><span class="line">                data:&#123;</span><br><span class="line">                    book: &#123;</span><br><span class="line"><span class="actionscript">                        <span class="comment">// "attr":"value"</span></span></span><br><span class="line"><span class="actionscript">                        <span class="string">"id"</span>:<span class="number">11</span>,</span></span><br><span class="line"><span class="actionscript">                        <span class="string">"title"</span>:<span class="string">"图书名称1"</span>,</span></span><br><span class="line"><span class="actionscript">                        <span class="string">"price"</span>:<span class="number">200</span></span></span><br><span class="line">                    &#125;,</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;)</span><br><span class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>练习：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">goods:[</span><br><span class="line">&#123;"name":"python入门","price":150&#125;,</span><br><span class="line">&#123;"name":"python进阶","price":100&#125;,</span><br><span class="line">&#123;"name":"python高级","price":75&#125;,</span><br><span class="line">&#123;"name":"python研究","price":60&#125;,</span><br><span class="line">&#123;"name":"python放弃","price":110&#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"># 把上面的数据采用table表格输出到页面，价格大于60的数据需要添加背景色橙色[orange]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      vue.js是目前前端web开发最流行的工具库，由尤雨溪在2014年2月发布的。另外几个常见的工具库：react.js /angular.js/jQuery,vue的引入类似于jQuery，开发中可以使用开发版本vue-x.x.x.js，产品上线要换成vue.min.js...
    
    </summary>
    
    
      <category term="前端框架" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="vue框架" scheme="http://yoursite.com/tags/vue%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>[前端Vue框架]</title>
    <link href="http://yoursite.com/2022/02/01/%E5%89%8D%E7%AB%AFVue%E6%A1%86%E6%9E%B6/"/>
    <id>http://yoursite.com/2022/02/01/%E5%89%8D%E7%AB%AFVue%E6%A1%86%E6%9E%B6/</id>
    <published>2022-02-01T12:50:38.000Z</published>
    <updated>2022-02-01T12:50:41.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue框架"><a href="#Vue框架" class="headerlink" title="Vue框架"></a>Vue框架</h1><p>Vue.js是一款流行的JavaScript前端框架，旨在更好地组织与简化Web开发。Vue所关注的核心是MVC模式中的视图层，同时，它也能方便地取得资料更新，并通过组件内部特定的方法实现视图与模型的互动。</p><p><a href="https://rogerxs80.github.io/2022/02/07/Vue%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/" target="_blank" rel="noopener">1.Vue快速入门</a></p><p><a href="https://rogerxs80.github.io/2022/02/14/Vue%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%B1%9E%E6%80%A7%E5%8A%9F%E8%83%BD/" target="_blank" rel="noopener">2.Vue对象的属性功能</a></p><p><a href="https://rogerxs80.github.io/2022/02/24/axios%E4%B8%8E%E7%BB%84%E4%BB%B6%E5%8C%96%E5%BC%80%E5%8F%91/" target="_blank" rel="noopener">3.axios与组件化开发</a></p><p><a href="https://rogerxs80.github.io/2022/02/26/Vue%E8%87%AA%E5%8A%A8%E5%8C%96%E5%B7%A5%E5%85%B7%EF%BC%88Vue-cli%EF%BC%89/" target="_blank" rel="noopener">4.Vue自动化工具（Vue-cli）</a></p><p><a href="https://rogerxs80.github.io/2022/02/27/Vue%E5%AE%A2%E6%88%B7%E7%AB%AF%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/" target="_blank" rel="noopener">5.Vue客户端项目搭建</a></p>]]></content>
    
    <summary type="html">
    
      Vue.js是一款流行的JavaScript前端框架，旨在更好地组织与简化Web开发。Vue所关注的核心是MVC模式中的视图层，同时，它也能方便地取...
    
    </summary>
    
    
      <category term="前端框架" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="vue框架" scheme="http://yoursite.com/tags/vue%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>[Go函数]</title>
    <link href="http://yoursite.com/2021/04/23/Go%E5%87%BD%E6%95%B0/"/>
    <id>http://yoursite.com/2021/04/23/Go%E5%87%BD%E6%95%B0/</id>
    <published>2021-04-23T12:55:51.000Z</published>
    <updated>2021-04-23T15:05:34.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="函数的基本形式"><a href="#函数的基本形式" class="headerlink" title="函数的基本形式"></a>函数的基本形式</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//函数定义。a,b是形参</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">argf</span><span class="params">(a <span class="keyword">int</span>, b <span class="keyword">int</span>)</span></span> &#123; </span><br><span class="line">a = a + b </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> x, y <span class="keyword">int</span> = <span class="number">3</span>, <span class="number">6</span></span><br><span class="line">argf(x, y) <span class="comment">//函数调用。x,y是实参</span></span><br></pre></td></tr></table></figure><ul><li>形参是函数内部的局部变量，实参的值会拷贝给形参。</li><li>函数定义时的第一个的大括号不能另起一行。</li><li>形参可以有0个或多个。</li><li>参数类型相同时可以只写一次，比如argf(a,b int)。 </li><li>在函数内部修改形参的值，实参的值不受影响。</li><li>如果想通过函数修改实参，就需要指针类型。 </li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">argf</span><span class="params">(a, b *<span class="keyword">int</span>)</span></span> &#123; </span><br><span class="line">    *a = *a + *b</span><br><span class="line">    *b = <span class="number">888</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> x, y <span class="keyword">int</span> = <span class="number">3</span>, <span class="number">6</span></span><br><span class="line">argf(&amp;x, &amp;y)</span><br></pre></td></tr></table></figure><p>&#8195;&#8195;slice、map、channel都是引用类型，它们作为函数参数时其实跟普通struct没什么区别，都是对struct内部的各个字段做一次拷贝传到函数内部。  </p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">slice_arg_1</span><span class="params">(arr []<span class="keyword">int</span>)</span></span> &#123; <span class="comment">//slice作为参数，实际上是把slice的arrayPointer、len、cap拷贝了一份传进来</span></span><br><span class="line">arr[<span class="number">0</span>] = <span class="number">1</span>           <span class="comment">//修改底层数据里的首元素</span></span><br><span class="line">arr = <span class="built_in">append</span>(arr, <span class="number">1</span>) <span class="comment">//arr的len和cap发生了变化，不会影响实参</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">arr := []<span class="keyword">int</span>&#123;<span class="number">8</span>&#125;</span><br><span class="line">slice_arg_1(arr)</span><br><span class="line">fmt.Println(arr[<span class="number">0</span>])   <span class="comment">//1</span></span><br><span class="line">fmt.Println(<span class="built_in">len</span>(arr)) <span class="comment">//1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关于函数返回值</p><ul><li>可以返回0个或多个参数。</li><li>可以在func行直接声明要返回的变量。</li><li>return后面的语句不会执行。</li><li>无返回参数时return可以不写。   </li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">returnf</span><span class="params">(a, b <span class="keyword">int</span>)</span> <span class="params">(c <span class="keyword">int</span>)</span></span> &#123; <span class="comment">//返回变量c已经声明好了</span></span><br><span class="line">    a = a + b</span><br><span class="line">    c = a <span class="comment">//直接使用c</span></span><br><span class="line">    <span class="keyword">return</span> <span class="comment">//由于函数要求有返回值，即使给c赋过值了，也需要显式写return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&#8195;&#8195;不定长参数实际上是slice类型。  </p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">variable_ength_arg</span><span class="params">(a <span class="keyword">int</span>, other ...<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123; </span><br><span class="line">    sum := a</span><br><span class="line">    <span class="keyword">for</span> _, ele := <span class="keyword">range</span> other &#123;<span class="comment">//不定长参数实际上是slice类型</span></span><br><span class="line">        sum += ele</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Printf(<span class="string">"len %d cap %d\n"</span>, <span class="built_in">len</span>(other), <span class="built_in">cap</span>(other))</span><br><span class="line">    <span class="keyword">return</span> sum</span><br><span class="line">&#125;</span><br><span class="line">variable_ength_arg(<span class="number">1</span>)</span><br><span class="line">variable_ength_arg(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br></pre></td></tr></table></figure><p>&#8195;&#8195;append函数接收的就是不定长参数。  </p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">arr = <span class="built_in">append</span>(arr, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">arr = <span class="built_in">append</span>(arr, <span class="number">7</span>)</span><br><span class="line">arr = <span class="built_in">append</span>(arr)</span><br><span class="line">slice := <span class="built_in">append</span>([]<span class="keyword">byte</span>(<span class="string">"hello "</span>), <span class="string">"world"</span>...) <span class="comment">//...自动把"world"转成byte切片，等价于[]byte("world")...</span></span><br><span class="line">slice2 := <span class="built_in">append</span>([]<span class="keyword">rune</span>(<span class="string">"hello "</span>), []<span class="keyword">rune</span>(<span class="string">"world"</span>)...) <span class="comment">//需要显式把"world"转成rune切片</span></span><br></pre></td></tr></table></figure><p>&#8195;&#8195;在很多场景下string都隐式的转换成了byte切片，而非rune切片，比如”a中”[1]是228而非”中”。<br>递归函数  </p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Fibonacci</span><span class="params">(n <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span> || n == <span class="number">1</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> n <span class="comment">//凡是递归，一定要有终止条件，否则会进入无限循环</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Fibonacci(n<span class="number">-1</span>) + Fibonacci(n<span class="number">-2</span>) <span class="comment">//递归调用函数自身</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h2><p>&#8195;&#8195;函数也是一种数据类型。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">function_arg1</span><span class="params">(f <span class="keyword">func</span>(a, b <span class="keyword">int</span>)</span> <span class="title">int</span>, <span class="title">b</span> <span class="title">int</span>) <span class="title">int</span></span> &#123; <span class="comment">//f参数是一种函数类型</span></span><br><span class="line">a := <span class="number">2</span> * b</span><br><span class="line"><span class="keyword">return</span> f(a, b)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> foo <span class="function"><span class="keyword">func</span><span class="params">(a, b <span class="keyword">int</span>)</span> <span class="title">int</span> //<span class="title">foo</span>是一种函数类型</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">function_arg2</span><span class="params">(f foo, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123; <span class="comment">//参数类型看上去简洁多了</span></span><br><span class="line">    a := <span class="number">2</span> * b</span><br><span class="line">    <span class="keyword">return</span> f(a, b)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">    Name <span class="keyword">string</span></span><br><span class="line">    bye foo <span class="comment">//bye的类型是foo，而foo代表一种函数类型</span></span><br><span class="line">    hello <span class="function"><span class="keyword">func</span><span class="params">(name <span class="keyword">string</span>)</span> <span class="title">string</span> //使用匿名函数来声明<span class="title">struct</span>字段的类型</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="function"><span class="keyword">func</span><span class="params">(<span class="keyword">string</span>)</span> <span class="title">string</span>, 10)</span></span><br><span class="line">ch &lt;- <span class="function"><span class="keyword">func</span><span class="params">(name <span class="keyword">string</span>)</span> <span class="title">string</span></span> &#123;  <span class="comment">//使用匿名函数</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">"hello "</span> + name</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><p>&#8195;&#8195;闭包（Closure）是引用了自由变量的函数，自由变量将和函数一同存在，即使已经离开了创造它的环境。闭包复制的是原对象的指针。  </p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//闭包（Closure）是引用了自由变量的函数。自由变量将和函数一同存在，即使已经离开了创造它的环境。</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sub</span><span class="params">()</span> <span class="title">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">i := <span class="number">10</span></span><br><span class="line">fmt.Printf(<span class="string">"%p\n"</span>, &amp;i)</span><br><span class="line">b := <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"i addr %p\n"</span>, &amp;i) <span class="comment">//闭包复制的是原对象的指针</span></span><br><span class="line">i--                           <span class="comment">//b函数内部引用了变量i</span></span><br><span class="line">fmt.Println(i)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> b <span class="comment">//返回了b函数，变量i和b函数将一起存在，即使已经离开函数sub()</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 外部引用函数参数局部变量</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(base <span class="keyword">int</span>)</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(i <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"base addr %p\n"</span>, &amp;base)</span><br><span class="line">base += i</span><br><span class="line"><span class="keyword">return</span> base</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">b := sub()</span><br><span class="line">b()</span><br><span class="line">b()</span><br><span class="line">fmt.Println()</span><br><span class="line"></span><br><span class="line">tmp1 := add(<span class="number">10</span>)</span><br><span class="line">fmt.Println(tmp1(<span class="number">1</span>), tmp1(<span class="number">2</span>)) <span class="comment">//11,13</span></span><br><span class="line"><span class="comment">// 此时tmp1和tmp2不是一个实体了</span></span><br><span class="line">tmp2 := add(<span class="number">100</span>)</span><br><span class="line">fmt.Println(tmp2(<span class="number">1</span>), tmp2(<span class="number">2</span>)) <span class="comment">//101,103</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="延迟调用defer"><a href="#延迟调用defer" class="headerlink" title="延迟调用defer"></a>延迟调用defer</h2><ul><li>defer用于注册一个延迟调用（在函数返回之前调用）。</li><li>defer典型的应用场景是释放资源，比如关闭文件句柄，释放数据库连接等。</li><li>如果同一个函数里有多个defer，则后注册的先执行。</li><li>defer后可以跟一个func，func内部如果发生panic，会把panic暂时搁置，当把其他defer执行完之后再来执行这个。</li><li>defer后不是跟func，而直接跟一条执行语句，则相关变量在注册defer时被拷贝或计算。</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">basic</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">"A"</span>)</span><br><span class="line">    <span class="keyword">defer</span> fmt.Println(<span class="number">1</span>) fmt.Println(<span class="string">"B"</span>)</span><br><span class="line">    <span class="comment">//如果同一个函数里有多个defer，则后注册的先执行</span></span><br><span class="line">    <span class="keyword">defer</span> fmt.Println(<span class="number">2</span>)</span><br><span class="line">    fmt.Println(<span class="string">"C"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">defer_exe_time</span><span class="params">()</span> <span class="params">(i <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">i = <span class="number">9</span></span><br><span class="line"><span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123; <span class="comment">//defer后可以跟一个func</span></span><br><span class="line">fmt.Printf(<span class="string">"first i=%d\n"</span>, i) <span class="comment">//打印5，而非9。充分理解“defer在函数返回前执行”的含义，不是在“return语句前执行defer”</span></span><br><span class="line">&#125;()</span><br><span class="line"><span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">(i <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"second i=%d\n"</span>, i) <span class="comment">//打印9</span></span><br><span class="line">&#125;(i)</span><br><span class="line"><span class="keyword">defer</span> fmt.Printf(<span class="string">"third i=%d\n"</span>, i) <span class="comment">//defer后不是跟func，而直接跟一条执行语句，则相关变量在注册defer时被拷贝或计算</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">5</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><p>&#8195;&#8195;go语言没有try catch，它提倡返回error。  </p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">divide</span><span class="params">(a, b <span class="keyword">int</span>)</span> <span class="params">(<span class="keyword">int</span>, error)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> b == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>, errors.New(<span class="string">"divide by zero"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a / b, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> res, err := divide(<span class="number">3</span>, <span class="number">0</span>); err != <span class="literal">nil</span> &#123;<span class="comment">//函数调用方判断error是否为nil</span></span><br><span class="line">    fmt.Println(err.Error())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&#8195;&#8195;Go语言定义了error这个接口，自定义的error要实现Error()方法。  </p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> PathError <span class="keyword">struct</span> &#123;    <span class="comment">//自定义error</span></span><br><span class="line">    path <span class="keyword">string</span></span><br><span class="line">    op <span class="keyword">string</span></span><br><span class="line">    createTime <span class="keyword">string</span></span><br><span class="line">    message <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(err PathError)</span> <span class="title">Error</span><span class="params">()</span> <span class="title">string</span></span> &#123;    <span class="comment">//error接口要求实现Error() string方法</span></span><br><span class="line"><span class="keyword">return</span> err.createTime + <span class="string">": "</span> + err.op + <span class="string">" "</span> + err.path + <span class="string">" "</span> + err.message</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>何时会发生panic:  </p><ul><li>运行时错误会导致panic，比如数组越界、除0。</li><li>程序主动调用panic(error)。</li></ul><p>panic会执行什么：  </p><ol><li>逆序执行当前goroutine的defer链（recover从这里介入）。</li><li>打印错误信息和调用堆栈。</li><li>调用exit(2)结束整个进程。  </li></ol><p>&#8195;&#8195;recover会使程序从panic中恢复(即不会执行panic的第2步和第3步)，并返回panic value。recover所在的函数后续的代码不会执行，但函数可以正常返回。在未发生panic时调用recover，会返回nil。recover()必须在defer中才能生效。  </p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">soo</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"enter soo"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123; <span class="comment">//去掉这个defer试试，看看panic的流程。把这个defer放到soo函数末尾试试。把这个defer移到main()里试试。</span></span><br><span class="line"><span class="comment">//recover必须在defer中才能生效</span></span><br><span class="line"><span class="keyword">if</span> panic_value := <span class="built_in">recover</span>(); panic_value != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"soo函数中发生了panic:%v\n"</span>, panic_value)</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line">fmt.Println(<span class="string">"regist recover"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">defer</span> fmt.Println(<span class="string">"hello"</span>)</span><br><span class="line"><span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">n := <span class="number">0</span></span><br><span class="line">_ = <span class="number">3</span> / n <span class="comment">//除0异常，发生panic，下一行的defer没有注册成功</span></span><br><span class="line"><span class="keyword">defer</span> fmt.Println(<span class="string">"how are you"</span>)</span><br><span class="line">&#125;()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">B</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// defer func() &#123; //方式一，recover()在B()函数里，则在B()函数中panic后面的代码不会执行。不影响BBBBBBB的打印</span></span><br><span class="line"><span class="comment">// if panicValue := recover(); panicValue != nil &#123;</span></span><br><span class="line"><span class="comment">// fmt.Printf("panic info %v\n", panicValue)</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// &#125;()</span></span><br><span class="line"><span class="built_in">panic</span>(<span class="number">5</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123; <span class="comment">//方式二，recover()在main()函数里，则在main()函数中panic后面的代码不会执行。BBBBBBB不会打印出来</span></span><br><span class="line"><span class="keyword">if</span> panicValue := <span class="built_in">recover</span>(); panicValue != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"panic info %v\n"</span>, panicValue)</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line">B()</span><br><span class="line">fmt.Println(<span class="string">"BBBBBBB"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      2007年，Google的几位大牛正在用C++开发一些比较繁琐但是核心的工作，主要是分布式集群，大牛觉得很闹心。此时C++委员会来他们公司做技术演讲，说C++将要添加35个新特性，大牛心里飘过一万个CNM，“C++特性还不够多吗”。于是Rob Pike说要不自己搞个简单一点的语言...
    
    </summary>
    
    
      <category term="Golang" scheme="http://yoursite.com/categories/Golang/"/>
    
    
      <category term="Golang基础" scheme="http://yoursite.com/tags/Golang%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>[Go流程控制语句]</title>
    <link href="http://yoursite.com/2021/04/22/Go%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5/"/>
    <id>http://yoursite.com/2021/04/22/Go%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5/</id>
    <published>2021-04-22T10:55:32.000Z</published>
    <updated>2021-04-22T07:01:15.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="流程控制语句"><a href="#流程控制语句" class="headerlink" title="流程控制语句"></a>流程控制语句</h1><h2 id="if"><a href="#if" class="headerlink" title="if"></a>if</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="number">5</span> &gt; <span class="number">9</span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">"5&gt;9"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>如果逻辑表达式成立，就会执行{}里的内容。</li><li>逻辑表达式不需要加()。</li><li>“{“必须紧跟在逻辑表达式后面，不能另起一行。</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> c, d, e := <span class="number">5</span>, <span class="number">9</span>, <span class="number">2</span>; c &lt; d &amp;&amp; (c &gt; e || c &gt; <span class="number">3</span>) &#123; <span class="comment">//初始化多个局部变量。复杂的逻辑表达式</span></span><br><span class="line">    fmt.Println(<span class="string">"fit"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>逻辑表达中可以含有变量或常量。</li><li>if句子中允许包含1个(仅1个)分号，在分号前初始化一些局部变量(即只在if块内可见)。  </li></ul><p>if-else的用法  </p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">color := <span class="string">"black"</span></span><br><span class="line"><span class="keyword">if</span> color == <span class="string">"red"</span> &#123; <span class="comment">//if只能有一个</span></span><br><span class="line">    fmt.Println(<span class="string">"stop"</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> color == <span class="string">"green"</span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">"go"</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> color == <span class="string">"yellow"</span> &#123; <span class="comment">//else if可以有0个、一个或者连续多个</span></span><br><span class="line">    fmt.Println(<span class="string">"stop"</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123; <span class="comment">//else有0个或1个</span></span><br><span class="line">    fmt.Printf(<span class="string">"invalid traffic signal: %s\n"</span>, strings.ToUpper(color))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>if表达式嵌套  </p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> xxx &#123;</span><br><span class="line">    <span class="keyword">if</span> xxx &#123;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> xxx&#123;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> xxx &#123;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&#8195;&#8195;注意太深的嵌套不利于代码的维护，比如</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">color := <span class="string">"black"</span></span><br><span class="line"><span class="keyword">switch</span> color &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"green"</span> :<span class="comment">//相当于  if color== "green"</span></span><br><span class="line">fmt.Println(<span class="string">"go"</span>)</span><br><span class="line"><span class="keyword">case</span> <span class="string">"red"</span> :<span class="comment">//相当于else if color== "red" </span></span><br><span class="line">fmt.Println(<span class="string">"stop"</span>)</span><br><span class="line"><span class="keyword">default</span>: <span class="comment">//相当于else </span></span><br><span class="line">fmt.Printf(<span class="string">"invalid traffic signal: %s\n"</span>, strings.ToUpper(color))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>switch-case-default可能模拟if-else if-else，但只能实现相等判断。</li><li>switch和case后面可以跟常量、变量或函数表达式，只要它们表示的数据类型相同就行。</li><li>case后面可以跟多个值，只要有一个值满足就行。</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(a <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> a + <span class="number">10</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">switch_expression</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> a <span class="keyword">int</span> = <span class="number">5</span></span><br><span class="line"><span class="keyword">switch</span> add(a) &#123; <span class="comment">//switch后跟一个函数表达式</span></span><br><span class="line"><span class="keyword">case</span> <span class="number">15</span>: <span class="comment">//case后跟一个常量</span></span><br><span class="line">fmt.Println(<span class="string">"right"</span>)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">fmt.Println(<span class="string">"wrong"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> B = <span class="number">15</span></span><br><span class="line"><span class="keyword">switch</span> B &#123; <span class="comment">//switch后跟一个常量</span></span><br><span class="line"><span class="keyword">case</span> add(a): <span class="comment">//case后跟一个函数表达式</span></span><br><span class="line">fmt.Println(<span class="string">"right"</span>)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">fmt.Println(<span class="string">"wrong"</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&#8195;&#8195;switch后带表达式时，switch-case只能模拟相等的情况；如果switch后不带表达式，case后就可以跟任意的条件表达式。  </p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">switch_condition</span><span class="params">()</span></span> &#123;</span><br><span class="line">color := <span class="string">"yellow"</span></span><br><span class="line"><span class="keyword">switch</span> color &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"green"</span>:</span><br><span class="line">fmt.Println(<span class="string">"go"</span>)</span><br><span class="line"><span class="keyword">case</span> <span class="string">"red"</span>, <span class="string">"yellow"</span>: <span class="comment">//用逗号分隔多个condition，它们之间是“或”的关系，只需要有一个condition满足就行</span></span><br><span class="line">fmt.Println(<span class="string">"stop"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//switch后带表达式时，switch-case只能模拟相等的情况；如果switch后不带表达式，case后就可以跟任意的条件表达式</span></span><br><span class="line"><span class="keyword">switch</span> &#123;</span><br><span class="line"><span class="keyword">case</span> add(<span class="number">5</span>) &gt; <span class="number">10</span>:</span><br><span class="line">fmt.Println(<span class="string">"right"</span>)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">fmt.Println(<span class="string">"wrong"</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>switch Type</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">switch_type</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> num <span class="keyword">interface</span>&#123;&#125; = <span class="number">6.5</span></span><br><span class="line"><span class="keyword">switch</span> num.(<span class="keyword">type</span>) &#123; <span class="comment">//获取interface的具体类型。.(type)只能用在switch后面</span></span><br><span class="line"><span class="keyword">case</span> <span class="keyword">int</span>:</span><br><span class="line">fmt.Println(<span class="string">"int"</span>)</span><br><span class="line"><span class="keyword">case</span> <span class="keyword">float32</span>:</span><br><span class="line">fmt.Println(<span class="string">"float32"</span>)</span><br><span class="line"><span class="keyword">case</span> <span class="keyword">float64</span>:</span><br><span class="line">fmt.Println(<span class="string">"float64"</span>)</span><br><span class="line"><span class="keyword">case</span> <span class="keyword">byte</span>:</span><br><span class="line">fmt.Println(<span class="string">"byte"</span>)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">fmt.Println(<span class="string">"neither"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> value := num.(<span class="keyword">type</span>) &#123; <span class="comment">//相当于在每个case内部申明了一个变量value</span></span><br><span class="line"><span class="keyword">case</span> <span class="keyword">int</span>: <span class="comment">//value已被转换为int类型</span></span><br><span class="line">fmt.Printf(<span class="string">"number is int %d\n"</span>, value)</span><br><span class="line"><span class="keyword">case</span> <span class="keyword">float64</span>: <span class="comment">//value已被转换为float64类型</span></span><br><span class="line">fmt.Printf(<span class="string">"number is float64 %f\n"</span>, value)</span><br><span class="line"><span class="keyword">case</span> <span class="keyword">byte</span>, <span class="keyword">string</span>: <span class="comment">//如果case后有多个类型，则value还是interface&#123;&#125;类型</span></span><br><span class="line">fmt.Printf(<span class="string">"number is inerface %v\n"</span>, value)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">fmt.Println(<span class="string">"neither"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//等价形式</span></span><br><span class="line"><span class="keyword">switch</span> num.(<span class="keyword">type</span>) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="keyword">int</span>:</span><br><span class="line">value := num.(<span class="keyword">int</span>)</span><br><span class="line">fmt.Printf(<span class="string">"number is int %d\n"</span>, value)</span><br><span class="line"><span class="keyword">case</span> <span class="keyword">float64</span>:</span><br><span class="line">value := num.(<span class="keyword">float64</span>)</span><br><span class="line">fmt.Printf(<span class="string">"number is float64 %f\n"</span>, value)</span><br><span class="line"><span class="keyword">case</span> <span class="keyword">byte</span>:</span><br><span class="line">value := num.(<span class="keyword">byte</span>)</span><br><span class="line">fmt.Printf(<span class="string">"number is byte %d\n"</span>, value)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">fmt.Println(<span class="string">"neither"</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>fallthrough 强制执行下一个case（或default）</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fall_throth</span><span class="params">(age <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"您的年龄是%d, 您可以：\n"</span>, age)</span><br><span class="line"><span class="keyword">switch</span> &#123;</span><br><span class="line"><span class="keyword">case</span> age &gt; <span class="number">50</span>:</span><br><span class="line">fmt.Println(<span class="string">"出任国家首脑"</span>)</span><br><span class="line"><span class="keyword">fallthrough</span></span><br><span class="line"><span class="keyword">case</span> age &gt; <span class="number">25</span>:</span><br><span class="line">fmt.Println(<span class="string">"生育子女"</span>)</span><br><span class="line"><span class="keyword">fallthrough</span></span><br><span class="line"><span class="keyword">case</span> age &gt; <span class="number">22</span>:</span><br><span class="line">fmt.Println(<span class="string">"结婚"</span>)</span><br><span class="line"><span class="keyword">fallthrough</span></span><br><span class="line"><span class="keyword">case</span> age &gt; <span class="number">18</span>:</span><br><span class="line">fmt.Println(<span class="string">"开车"</span>)</span><br><span class="line"><span class="keyword">fallthrough</span></span><br><span class="line"><span class="keyword">case</span> age &gt; <span class="number">16</span>:</span><br><span class="line">fmt.Println(<span class="string">"参加工作"</span>)</span><br><span class="line"><span class="keyword">case</span> age &gt; <span class="number">15</span>:</span><br><span class="line">fmt.Println(<span class="string">"上高中"</span>)</span><br><span class="line"><span class="keyword">fallthrough</span></span><br><span class="line"><span class="keyword">case</span> age &gt; <span class="number">3</span>:</span><br><span class="line">fmt.Println(<span class="string">"上幼儿园"</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="for"><a href="#for" class="headerlink" title="for"></a>for</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">arr := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(arr); i++ &#123; <span class="comment">//正序遍历切片</span></span><br><span class="line">fmt.Printf(<span class="string">"%d: %d\n"</span>, i, arr[i])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>for 初始化局部变量;条件表达式;后续操作</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> sum, i := <span class="number">0</span>, <span class="number">0</span>; i &lt; <span class="built_in">len</span>(arr) &amp;&amp; sum &lt; <span class="number">100</span>; sum, i = sum*<span class="number">1</span>, i+<span class="number">1</span></span><br></pre></td></tr></table></figure><ul><li>局部变量指仅在for块内可见。</li><li>初始化变量可以放在for上面。</li><li>后续操作可以放在for块内部。</li><li>只有条件判断时，前后的分号可以不要。</li><li>for{}是一个无限循环。  </li></ul><p>for range  </p><ul><li>遍历数组或切片<ul><li>for i, ele := range arr </li></ul></li><li>遍历string<ul><li>for i, ele := range “我会唱ABC”    //ele是rune类型</li></ul></li><li>遍历map，go不保证遍历的顺序<ul><li>for key, value := range m</li></ul></li><li>遍历channel，遍历前一定要先close<ul><li>for ele := range ch</li><li>for range拿到的是数据的拷贝</li></ul></li></ul><p>for嵌套<br>&#8195;&#8195;矩阵乘法需要用到三层for循环嵌套。 </p><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/mat_mul.png" alt="avatar">   </p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">nest_for</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">const</span> SIZE = <span class="number">4</span></span><br><span class="line"></span><br><span class="line">A := [SIZE][SIZE]<span class="keyword">float64</span>&#123;&#125;</span><br><span class="line"><span class="comment">//初始化二维数组</span></span><br><span class="line"><span class="comment">//两层for循环嵌套</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; SIZE; i++ &#123;</span><br><span class="line"><span class="keyword">for</span> j := <span class="number">0</span>; j &lt; SIZE; j++ &#123;</span><br><span class="line">A[i][j] = rand.Float64() <span class="comment">//[0,1)上的随机数</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">B := [SIZE][SIZE]<span class="keyword">float64</span>&#123;&#125;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; SIZE; i++ &#123;</span><br><span class="line"><span class="keyword">for</span> j := <span class="number">0</span>; j &lt; SIZE; j++ &#123;</span><br><span class="line">B[i][j] = rand.Float64() <span class="comment">//[0,1)上的随机数</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">rect := [SIZE][SIZE]<span class="keyword">float64</span>&#123;&#125;</span><br><span class="line"><span class="comment">//三层for循环嵌套</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; SIZE; i++ &#123;</span><br><span class="line"><span class="keyword">for</span> j := <span class="number">0</span>; j &lt; SIZE; j++ &#123;</span><br><span class="line">prod := <span class="number">0.0</span></span><br><span class="line"><span class="keyword">for</span> k := <span class="number">0</span>; k &lt; SIZE; k++ &#123;</span><br><span class="line">prod += A[i][k] * B[k][j]</span><br><span class="line">&#125;</span><br><span class="line">rect[i][j] = prod</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">i, j := <span class="number">2</span>, <span class="number">1</span></span><br><span class="line">fmt.Println(A[i]) <span class="comment">//二维数组第i行</span></span><br><span class="line"><span class="comment">//打印二维数组的第j列</span></span><br><span class="line"><span class="comment">//注意：B[:][j]这不是二维数组第j列，这是二维数组第j行！</span></span><br><span class="line"><span class="keyword">for</span> _, row := <span class="keyword">range</span> B &#123;</span><br><span class="line">fmt.Printf(<span class="string">"%g "</span>, row[j])</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println()</span><br><span class="line">fmt.Println(rect[i][j])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="break与continue"><a href="#break与continue" class="headerlink" title="break与continue"></a>break与continue</h2><ul><li>break与continue用于控制for循环的代码流程，并且只针对最靠近自己的外层for循环。</li><li>break:退出for循环，且本轮break下面的代码不再执行。</li><li>continue:本轮continue下面的代码不再执行，进入for循环的下一轮。</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//break和continue都是针对for循环的，不针对if或switch</span></span><br><span class="line"><span class="comment">//break和continue都是针对套在自己外面的最靠里的那层for循环，不针对更外层的for循环（除非使用Label）</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">complex_break_continue</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">const</span> SIZE = <span class="number">5</span></span><br><span class="line">arr := [SIZE][SIZE]<span class="keyword">int</span>&#123;&#125;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; SIZE; i++ &#123;</span><br><span class="line">fmt.Printf(<span class="string">"开始检查第%d行\n"</span>, i)</span><br><span class="line"><span class="keyword">if</span> i%<span class="number">2</span> == <span class="number">1</span> &#123;</span><br><span class="line"><span class="keyword">for</span> j := <span class="number">0</span>; j &lt; SIZE; j++ &#123;</span><br><span class="line">fmt.Printf(<span class="string">"开始检查第%d列\n"</span>, j)</span><br><span class="line"><span class="keyword">if</span> arr[i][j]%<span class="number">2</span> == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">continue</span> <span class="comment">//针对第二层for循环</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">"将要检查第%d列\n"</span>, j+<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span> <span class="comment">//针对第一层for循环</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="goto与Label"><a href="#goto与Label" class="headerlink" title="goto与Label"></a>goto与Label</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i <span class="keyword">int</span> = <span class="number">4</span></span><br><span class="line">MY_LABEL:</span><br><span class="line">i += <span class="number">3</span></span><br><span class="line">fmt.Println(i)</span><br><span class="line"><span class="keyword">goto</span> MY_LABEL <span class="comment">//返回定义MY_LABEL的那一行，把代码再执行一遍（会进入一个无限循环）</span></span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> i%<span class="number">2</span> == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">goto</span> L1 <span class="comment">//Label指示的是某一行代码，并没有圈定一个代码块，所以goto L1也会执行L2后的代码</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">goto</span> L2<span class="comment">//先使用Label</span></span><br><span class="line">&#125;</span><br><span class="line">L1: </span><br><span class="line">i += <span class="number">3</span></span><br><span class="line">L2: <span class="comment">//后定义Label。Label定义后必须在代码的某个地方被使用</span></span><br><span class="line">i *= <span class="number">3</span></span><br></pre></td></tr></table></figure><p>&#8195;&#8195;goto与Label结合可以实现break的功能，甚至比break更强大。  </p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; SIZE; i++ &#123;</span><br><span class="line">L2:</span><br><span class="line"><span class="keyword">for</span> j := <span class="number">0</span>; j &lt; SIZE; j++ &#123;</span><br><span class="line"><span class="keyword">goto</span> L1</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">L1:</span><br><span class="line">xxx</span><br></pre></td></tr></table></figure><ul><li>break、continue与Label结合使用可以跳转到更外层的for循环。</li><li>continue和break针对的Label必须写在for前面，而goto可以针对任意位置的Label。</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">break_label</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">const</span> SIZE = <span class="number">5</span></span><br><span class="line">arr := [SIZE][SIZE]<span class="keyword">int</span>&#123;&#125;</span><br><span class="line">L1:</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; SIZE; i++ &#123;</span><br><span class="line">L2:</span><br><span class="line">fmt.Printf(<span class="string">"开始检查第%d行\n"</span>, i)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> i%<span class="number">2</span> == <span class="number">1</span> &#123;</span><br><span class="line">L3:</span><br><span class="line"><span class="keyword">for</span> j := <span class="number">0</span>; j &lt; SIZE; j++ &#123;</span><br><span class="line">fmt.Printf(<span class="string">"开始检查第%d列\n"</span>, j)</span><br><span class="line"><span class="keyword">if</span> arr[i][j]%<span class="number">3</span> == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">break</span> L1 <span class="comment">//直接退出最外层的fot循环</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> arr[i][j]%<span class="number">3</span> == <span class="number">1</span> &#123;</span><br><span class="line"><span class="keyword">goto</span> L2 <span class="comment">//continue和break针对的Label必须写在for前面，而goto可以针对任意位置的Label</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">break</span> L3</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>练习</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num <span class="keyword">int</span></span><br><span class="line">L1:</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; &#123;</span><br><span class="line">fmt.Println(<span class="string">"开始"</span>)</span><br><span class="line">fmt.Printf(<span class="string">"i=%d\n"</span>, i)</span><br><span class="line">L2:</span><br><span class="line">fmt.Println(<span class="string">"开始2"</span>)</span><br><span class="line">i += <span class="number">1</span></span><br><span class="line">fmt.Printf(<span class="string">"i=%d\n"</span>, i)</span><br><span class="line">fmt.Print(<span class="string">"请输入："</span>)</span><br><span class="line">fmt.Scan(&amp;num)</span><br><span class="line"><span class="keyword">switch</span> num &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line"><span class="keyword">break</span> L1 <span class="comment">//直接跳出L1</span></span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line"><span class="keyword">continue</span> L1 <span class="comment">// 会直接执行L1下面的语句,但变量仍保持，仍保持刚刚的进行</span></span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line"><span class="keyword">goto</span> L2 <span class="comment">// 会直接执行L2下面的语句,但变量仍保持</span></span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line"><span class="keyword">goto</span> L1 <span class="comment">// 会直接重新执行L1下面的语句</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">"结束"</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      2007年，Google的几位大牛正在用C++开发一些比较繁琐但是核心的工作，主要是分布式集群，大牛觉得很闹心。此时C++委员会来他们公司做技术演讲，说C++将要添加35个新特性，大牛心里飘过一万个CNM，“C++特性还不够多吗”。于是Rob Pike说要不自己搞个简单一点的语言...
    
    </summary>
    
    
      <category term="Golang" scheme="http://yoursite.com/categories/Golang/"/>
    
    
      <category term="Golang基础" scheme="http://yoursite.com/tags/Golang%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>[Go结构体]</title>
    <link href="http://yoursite.com/2021/04/21/Go%E7%BB%93%E6%9E%84%E4%BD%93/"/>
    <id>http://yoursite.com/2021/04/21/Go%E7%BB%93%E6%9E%84%E4%BD%93/</id>
    <published>2021-04-21T12:29:40.000Z</published>
    <updated>2021-04-21T13:11:40.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h1><h2 id="结构体创建、访问与修改"><a href="#结构体创建、访问与修改" class="headerlink" title="结构体创建、访问与修改"></a>结构体创建、访问与修改</h2><p>定义结构体</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> user <span class="keyword">struct</span> &#123;</span><br><span class="line">    id <span class="keyword">int</span></span><br><span class="line">    score <span class="keyword">float32</span></span><br><span class="line">    enrollment time.Time</span><br><span class="line">    name, addr <span class="keyword">string</span> <span class="comment">//多个字段类型相同时可以简写到一行里</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>声明和初始化结构体</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> u user <span class="comment">//声明，会用相应类型的默认值初始化struct里的每一个字段</span></span><br><span class="line">u = user&#123;&#125; <span class="comment">//用相应类型的默认值初始化struct里的每一个字段</span></span><br><span class="line">u = user&#123;id: <span class="number">3</span>, name: <span class="string">"zcy"</span>&#125; <span class="comment">//赋值初始化</span></span><br><span class="line">u = user&#123;<span class="number">4</span>, <span class="number">100.0</span>, time.Now(), <span class="string">"zcy"</span>, <span class="string">"beijing"</span>&#125; <span class="comment">//赋值初始化，可以不写字段名，但需要跟结构体定义里的字段顺序一致</span></span><br></pre></td></tr></table></figure><p>访问与修改结构体</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">u.enrollment = time.Now() <span class="comment">//给结构体的成员变量赋值</span></span><br><span class="line">fmt.Printf(<span class="string">"id=%d, enrollment=%v, name=%s\n"</span>, u.id, u.enrollment, u.name) <span class="comment">//访问结构体的成员变量</span></span><br></pre></td></tr></table></figure><p>成员方法</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//可以把user理解为hello函数的参数，即hello(u user, man string)</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u user)</span> <span class="title">hello</span><span class="params">(man <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">"hi "</span> + man + <span class="string">", my name is "</span> + u.name)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//函数里不需要访问user的成员，可以传匿名，甚至_也不传</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(_ user)</span> <span class="title">think</span><span class="params">(man <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">"hi "</span> + man + <span class="string">", do you know my name?"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为自定义类型添加方法</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> UserMap <span class="keyword">map</span>[<span class="keyword">int</span>]User <span class="comment">//自定义类型</span></span><br><span class="line"><span class="comment">//可以给自定义类型添加任意方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(um UserMap)</span> <span class="title">GetUser</span><span class="params">(id <span class="keyword">int</span>)</span> <span class="title">User</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> um[id]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结构体的可见性：  </p><ul><li>go语言关于可见的统一规则：大写字母开头跨package也可以访问；否则只能本package内部访问。</li><li>结构体名称以大写开头时，package外部可见，在此前提下，结构体中以大写开头在成员变量或成员方法在package外部也可见。  </li></ul><p>匿名结构体</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> stu <span class="keyword">struct</span> &#123; <span class="comment">//声明stu是一个结构体，但这个结构体是匿名的</span></span><br><span class="line">Name <span class="keyword">string</span></span><br><span class="line">Addr <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line">stu.Name = <span class="string">"zcy"</span></span><br><span class="line">stu.Addr = <span class="string">"bj"</span></span><br></pre></td></tr></table></figure><p>&#8195;&#8195;匿名结构体通常用于只使用一次的情况。<br>结构体中含有匿名成员</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Student <span class="keyword">struct</span> &#123;</span><br><span class="line">Id <span class="keyword">int</span></span><br><span class="line"><span class="keyword">string</span> <span class="comment">//匿名字段</span></span><br><span class="line"><span class="keyword">float32</span> <span class="comment">//直接使用数据类型作为字段名，所以匿名字段中不能出现重复的数据类型</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> stu = Student&#123;Id: <span class="number">1</span>, <span class="keyword">string</span>: <span class="string">"zcy"</span>, <span class="keyword">float32</span>: <span class="number">79.5</span>&#125;</span><br><span class="line">fmt.Printf(<span class="string">"anonymous_member string member=%s float member=%f\n"</span>, stu.<span class="keyword">string</span>, stu.<span class="keyword">float32</span>)  <span class="comment">//直接使用数据类型访问匿名成员</span></span><br></pre></td></tr></table></figure><h2 id="结构体指针"><a href="#结构体指针" class="headerlink" title="结构体指针"></a>结构体指针</h2><p>创建结构体指针</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> u User</span><br><span class="line">user := &amp;u <span class="comment">//通过取址符&amp;得到指针</span></span><br><span class="line">user = &amp;User&#123; <span class="comment">//直接创建结构体指针</span></span><br><span class="line">    Id: <span class="number">3</span>, Name: <span class="string">"zcy"</span>, addr: <span class="string">"beijing"</span>,</span><br><span class="line">&#125;</span><br><span class="line">user = <span class="built_in">new</span>(User) <span class="comment">//通过new()函数实体化一个结构体，并返回其指针</span></span><br></pre></td></tr></table></figure><p>构造函数</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//构造函数。返回指针是为了避免值拷贝</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewUser</span><span class="params">(id <span class="keyword">int</span>, name <span class="keyword">string</span>)</span> *<span class="title">User</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;User&#123;</span><br><span class="line">Id: id,</span><br><span class="line">Name: name,</span><br><span class="line">addr: <span class="string">"China"</span>,</span><br><span class="line">Score: <span class="number">59</span>,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法接收指针</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//user传的是值，即传的是整个结构体的拷贝。在函数里修改结构体不会影响原来的结构体</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">hello</span><span class="params">(u user, man <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">    u.name = <span class="string">"杰克"</span></span><br><span class="line">    fmt.Println(<span class="string">"hi "</span> + man + <span class="string">", my name is "</span> + u.name)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//传的是user指针，在函数里修改user的成员会影响原来的结构体</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">hello2</span><span class="params">(u *user, man <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">    u.name = <span class="string">"杰克"</span></span><br><span class="line">    fmt.Println(<span class="string">"hi "</span> + man + <span class="string">", my name is "</span> + u.name)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//把user理解为hello()的参数，即hello(u user, man string)</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u user)</span> <span class="title">hello</span><span class="params">(man <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">    u.name = <span class="string">"杰克"</span></span><br><span class="line">    fmt.Println(<span class="string">"hi "</span> + man + <span class="string">", my name is "</span> + u.name)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//可以理解为hello2(u *user, man string)</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u *user)</span> <span class="title">hello2</span><span class="params">(man <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">    u.name = <span class="string">"杰克"</span></span><br><span class="line">    fmt.Println(<span class="string">"hi "</span> + man + <span class="string">", my name is "</span> + u.name)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="结构体嵌套"><a href="#结构体嵌套" class="headerlink" title="结构体嵌套"></a>结构体嵌套</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> user <span class="keyword">struct</span> &#123;</span><br><span class="line">    name <span class="keyword">string</span></span><br><span class="line">    sex <span class="keyword">byte</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> paper <span class="keyword">struct</span> &#123;</span><br><span class="line">    name <span class="keyword">string</span></span><br><span class="line">    auther user <span class="comment">//结构体嵌套</span></span><br><span class="line">&#125;</span><br><span class="line">p := <span class="built_in">new</span>(paper)</span><br><span class="line">p.name = <span class="string">"论文标题"</span></span><br><span class="line">p.auther.name = <span class="string">"作者姓名"</span></span><br><span class="line">p.auther.sex = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> vedio <span class="keyword">struct</span> &#123;</span><br><span class="line">    length <span class="keyword">int</span></span><br><span class="line">    name <span class="keyword">string</span></span><br><span class="line">    user<span class="comment">//匿名字段,可用数据类型当字段名</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结构体嵌套时字段名冲突的问题</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">v := <span class="built_in">new</span>(vedio)</span><br><span class="line">v.length = <span class="number">13</span></span><br><span class="line">v.name = <span class="string">"视频名称"</span></span><br><span class="line">v.user.sex = <span class="number">0</span> <span class="comment">//通过字段名逐级访问</span></span><br><span class="line">v.sex = <span class="number">0</span> <span class="comment">//对于匿名字段也可以跳过中间字段名，直接访问内部的字段名</span></span><br><span class="line">v.user.name = <span class="string">"作者姓名"</span> <span class="comment">//由于内部、外部结构体都有name这个字段，名字冲突了，所以需要指定中间字段名</span></span><br></pre></td></tr></table></figure><h2 id="深拷贝与浅拷贝"><a href="#深拷贝与浅拷贝" class="headerlink" title="深拷贝与浅拷贝"></a>深拷贝与浅拷贝</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">Name <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> Vedio <span class="keyword">struct</span> &#123;</span><br><span class="line">Length <span class="keyword">int</span></span><br><span class="line">Author User</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&#8195;&#8195;Go语言里的赋值都会发生值拷贝。  </p><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/deep_copy.png" alt="avatar">  </p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">Name <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> Vedio <span class="keyword">struct</span> &#123;</span><br><span class="line">Length <span class="keyword">int</span></span><br><span class="line">Author *User</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/shallow_copy.png" alt="avatar">  </p><ul><li>深拷贝，拷贝的是值，比如Vedio.Length。</li><li>浅拷贝，拷贝的是指针，比如Vedio.Author。</li><li>深拷贝开辟了新的内存空间，修改操作不影响原先的内存。</li><li>浅拷贝指向的还是原来的内存空间，修改操作直接作用在原内存空间上。</li></ul><p>&#8195;&#8195;传slice，对sclice的3个字段进行了拷贝，拷贝的是底层数组的指针，所以修改底层数组的元素会反应到原数组上。  </p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">users := []User&#123;&#123;Name: <span class="string">"康熙"</span>&#125;&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">update_users</span><span class="params">(users []User)</span></span> &#123;</span><br><span class="line">    users[<span class="number">0</span>].Name = <span class="string">"光绪"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      2007年，Google的几位大牛正在用C++开发一些比较繁琐但是核心的工作，主要是分布式集群，大牛觉得很闹心。此时C++委员会来他们公司做技术演讲，说C++将要添加35个新特性，大牛心里飘过一万个CNM，“C++特性还不够多吗”。于是Rob Pike说要不自己搞个简单一点的语言...
    
    </summary>
    
    
      <category term="Golang" scheme="http://yoursite.com/categories/Golang/"/>
    
    
      <category term="Golang基础" scheme="http://yoursite.com/tags/Golang%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>[Go数据类型]</title>
    <link href="http://yoursite.com/2021/04/21/Go%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <id>http://yoursite.com/2021/04/21/Go%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</id>
    <published>2021-04-21T12:29:30.000Z</published>
    <updated>2021-04-21T13:11:30.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Go数据类型"><a href="#Go数据类型" class="headerlink" title="Go数据类型"></a>Go数据类型</h1><h2 id="数据类型概览"><a href="#数据类型概览" class="headerlink" title="数据类型概览"></a>数据类型概览</h2><p>基础数据类型</p><table><thead><tr><th align="center">类型</th><th align="center">长度(字节)</th><th align="center">默认值</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">bool</td><td align="center">1</td><td align="center">false</td><td align="center"></td></tr><tr><td align="center">byte</td><td align="center">1</td><td align="center">0</td><td align="center">uint8，取值范围[0,255]</td></tr><tr><td align="center">rune</td><td align="center">4</td><td align="center">0</td><td align="center">Unicode Code Point, int32</td></tr><tr><td align="center">int, uint</td><td align="center">4或8</td><td align="center">0</td><td align="center">32 或 64 位，取决于操作系统</td></tr><tr><td align="center">int8, uint8</td><td align="center">1</td><td align="center">0</td><td align="center">-128 ~ 127, 0 ~ 255</td></tr><tr><td align="center">int16, uint16</td><td align="center">2</td><td align="center">0</td><td align="center">-32768 ~ 32767, 0 ~ 65535</td></tr><tr><td align="center">int32, uint32</td><td align="center">4</td><td align="center">0</td><td align="center">-21亿~ 21亿, 0 ~ 42亿，rune是int32 的别名</td></tr><tr><td align="center">int64, uint64</td><td align="center">8</td><td align="center">0</td><td align="center"></td></tr><tr><td align="center">float32</td><td align="center">4</td><td align="center">0.0</td><td align="center"></td></tr><tr><td align="center">float64</td><td align="center">8</td><td align="center">0.0</td><td align="center"></td></tr><tr><td align="center">complex64</td><td align="center">8</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">complex128</td><td align="center">16</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">uintptr</td><td align="center">4或8</td><td align="center"></td><td align="center">以存储指针的 uint32 或 uint64 整数</td></tr></tbody></table><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">fmt.Printf(<span class="string">"os arch %s, int size %d\n"</span>, runtime.GOARCH, strconv.IntSize) <span class="comment">//int是4字节还是8字节，取决于操作系统是32位还是64位</span></span><br><span class="line"><span class="keyword">var</span> a <span class="keyword">int</span> = <span class="number">5</span></span><br><span class="line"><span class="keyword">var</span> b <span class="keyword">int8</span> = <span class="number">5</span></span><br><span class="line"><span class="keyword">var</span> c <span class="keyword">int16</span> = <span class="number">5</span></span><br><span class="line"><span class="keyword">var</span> d <span class="keyword">int32</span> = <span class="number">5</span></span><br><span class="line"><span class="keyword">var</span> e <span class="keyword">int64</span> = <span class="number">5</span></span><br><span class="line"><span class="keyword">var</span> f <span class="keyword">uint</span> = <span class="number">5</span></span><br><span class="line"><span class="keyword">var</span> g <span class="keyword">uint8</span> = <span class="number">5</span></span><br><span class="line"><span class="keyword">var</span> h <span class="keyword">uint16</span> = <span class="number">5</span></span><br><span class="line"><span class="keyword">var</span> i <span class="keyword">uint32</span> = <span class="number">5</span></span><br><span class="line"><span class="keyword">var</span> j <span class="keyword">uint64</span> = <span class="number">5</span></span><br><span class="line">fmt.Printf(<span class="string">"a=%d, b=%d, c=%d, d=%d, e=%d, f=%d, g=%d, h=%d, i=%d, j=%d\n"</span>, a, b, c, d, e, f, g, h, i, j)</span><br><span class="line"><span class="keyword">var</span> k <span class="keyword">float32</span> = <span class="number">5</span></span><br><span class="line"><span class="keyword">var</span> l <span class="keyword">float64</span> = <span class="number">5</span></span><br><span class="line">fmt.Printf(<span class="string">"k=%f, l=%.2f\n"</span>, k, l) <span class="comment">//%.2f保留2位小数</span></span><br><span class="line"><span class="keyword">var</span> m <span class="keyword">complex128</span> = <span class="built_in">complex</span>(<span class="number">4</span>, <span class="number">7</span>)</span><br><span class="line"><span class="keyword">var</span> n <span class="keyword">complex64</span> = <span class="built_in">complex</span>(<span class="number">4</span>, <span class="number">7</span>)</span><br><span class="line">fmt.Printf(<span class="string">"type of m is %T, type of n is %T\n"</span>, m, n) <span class="comment">//%T输出变量类型</span></span><br><span class="line">fmt.Printf(<span class="string">"m=%v, n=%v\n"</span>, m, n)                       <span class="comment">//按值的本来值输出</span></span><br><span class="line">fmt.Printf(<span class="string">"m=%+v, n=%+v\n"</span>, m, n)                     <span class="comment">//在 %v 基础上，对结构体字段名和值进行展开</span></span><br><span class="line">fmt.Printf(<span class="string">"m=%#v, n=%#v\n"</span>, m, n)                     <span class="comment">//输出 Go 语言语法格式的值</span></span><br><span class="line">fmt.Printf(<span class="string">"m的实部%f, m的虚部%f\n"</span>, <span class="built_in">real</span>(m), <span class="built_in">imag</span>(m))</span><br><span class="line">fmt.Printf(<span class="string">"m的实部%e, m的虚部%g\n"</span>, <span class="built_in">real</span>(m), <span class="built_in">imag</span>(m)) <span class="comment">//%e科学计数法，%g根据实际情况采用%e或%f格式（以获得更简洁、准确的输出）</span></span><br><span class="line">o := <span class="literal">true</span>                                        <span class="comment">//等价于var o bool = true</span></span><br><span class="line">fmt.Printf(<span class="string">"o=%t\n"</span>, o)                          <span class="comment">//%t布尔变量</span></span><br><span class="line"><span class="keyword">var</span> pointer unsafe.Pointer = unsafe.Pointer(&amp;a)</span><br><span class="line"><span class="keyword">var</span> p <span class="keyword">uintptr</span> = <span class="keyword">uintptr</span>(pointer)</span><br><span class="line"><span class="keyword">var</span> ptr *<span class="keyword">int</span> = &amp;a</span><br><span class="line">fmt.Printf(<span class="string">"p=%x pointer=%p ptr=%p\n"</span>, p, pointer, ptr) <span class="comment">//%p输出地址，%x十六进制</span></span><br><span class="line"><span class="keyword">var</span> q <span class="keyword">byte</span> = <span class="number">100</span>                                        <span class="comment">//byte是uint，取值范围[0,255]</span></span><br><span class="line">fmt.Printf(<span class="string">"q=%d, binary of q is %b\n"</span>, q, q)           <span class="comment">//%b输出二进制</span></span><br><span class="line"><span class="keyword">var</span> r <span class="keyword">rune</span> = <span class="string">'☻'</span>                                        <span class="comment">//rune实际上是int32，即可以表示2147483647种字符，包括所有汉字和各种特殊符号</span></span><br><span class="line">fmt.Printf(<span class="string">"r=%d, r=%U\n"</span>, r, r)                        <span class="comment">//%U Unicode 字符</span></span><br><span class="line"><span class="keyword">var</span> s <span class="keyword">string</span> = <span class="string">"I'm 张朝阳"</span></span><br><span class="line">fmt.Printf(<span class="string">"s=%s\n"</span>, s)</span><br><span class="line"><span class="keyword">var</span> t error = errors.New(<span class="string">"my error"</span>)</span><br><span class="line">fmt.Printf(<span class="string">"error is %v\n"</span>, t)</span><br><span class="line">fmt.Printf(<span class="string">"error is %+v\n"</span>, t) <span class="comment">//在 %v 基础上，对结构体字段名和值进行展开</span></span><br><span class="line">fmt.Printf(<span class="string">"error is %#v\n"</span>, t) <span class="comment">//输出 Go 语言语法格式的值</span></span><br></pre></td></tr></table></figure><p>数值型变量的默认值是0，字符串的默认值是空字符串，布尔型变量的默认值是false，引用类型、函数、指针、接口的默认值是nil。数组的默认值取每个元素对应类型的默认值，结构体的默认值取每个成员变量对应类型的默认值。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a <span class="keyword">int</span></span><br><span class="line"><span class="keyword">var</span> b <span class="keyword">byte</span></span><br><span class="line"><span class="keyword">var</span> f <span class="keyword">float32</span></span><br><span class="line"><span class="keyword">var</span> t <span class="keyword">bool</span></span><br><span class="line"><span class="keyword">var</span> s <span class="keyword">string</span></span><br><span class="line"><span class="keyword">var</span> r <span class="keyword">rune</span></span><br><span class="line"><span class="keyword">var</span> arr [<span class="number">3</span>]<span class="keyword">int</span></span><br><span class="line"><span class="keyword">var</span> slc []<span class="keyword">int</span></span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">"default value of int %d\n"</span>, a)</span><br><span class="line">fmt.Printf(<span class="string">"default value of byte %d\n"</span>, b)</span><br><span class="line">fmt.Printf(<span class="string">"default value of float %.2f\n"</span>, f)</span><br><span class="line">fmt.Printf(<span class="string">"default value of bool %t\n"</span>, t)</span><br><span class="line">fmt.Printf(<span class="string">"default value of string [%s]\n"</span>, s)</span><br><span class="line">fmt.Printf(<span class="string">"default value of rune %d, [%c]\n"</span>, r, r)</span><br><span class="line">fmt.Printf(<span class="string">"default int array is %v\n"</span>, arr) <span class="comment">//取每个元素对应类型的默认值</span></span><br><span class="line">fmt.Printf(<span class="string">"default slice is nil %t\n"</span>, slc == <span class="literal">nil</span>)</span><br></pre></td></tr></table></figure><p>复合数据类型</p><table><thead><tr><th align="center">类型</th><th align="center">默认值</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">array</td><td align="center">取每个元素对应类型的默认值</td><td align="center">值类型</td></tr><tr><td align="center">struct</td><td align="center">取每个成员变量对应类型的默认值</td><td align="center">值类型</td></tr><tr><td align="center">string</td><td align="center">“”</td><td align="center">UTF-8 字符串</td></tr><tr><td align="center">slice</td><td align="center">nil</td><td align="center">引用类型</td></tr><tr><td align="center">map</td><td align="center">nil</td><td align="center">引用类型</td></tr><tr><td align="center">channel</td><td align="center">nil</td><td align="center">引用类型</td></tr><tr><td align="center">interface</td><td align="center">nil</td><td align="center">接口</td></tr><tr><td align="center">function</td><td align="center">nil</td><td align="center">函数</td></tr></tbody></table><h2 id="自定义类型"><a href="#自定义类型" class="headerlink" title="自定义类型"></a>自定义类型</h2><p>类型别名</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="keyword">byte</span> = <span class="keyword">uint8</span></span><br><span class="line"><span class="keyword">type</span> <span class="keyword">rune</span> = <span class="keyword">int32</span></span><br><span class="line"><span class="keyword">type</span> semaphore = <span class="keyword">uint8</span></span><br></pre></td></tr></table></figure><p>自定义类型</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> user <span class="keyword">struct</span> &#123;name <span class="keyword">string</span>;age <span class="keyword">int</span>&#125;  <span class="comment">//用分号把多行代码隔开</span></span><br><span class="line"><span class="keyword">type</span> signal <span class="keyword">uint8</span></span><br><span class="line"><span class="keyword">type</span> ms <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span></span><br><span class="line"><span class="keyword">type</span> add <span class="function"><span class="keyword">func</span><span class="params">(a, b <span class="keyword">int</span>)</span> <span class="title">int</span></span></span><br></pre></td></tr></table></figure><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>数组是块连续的内存空间，在声明的时候必须指定长度，且长度不能改变。所以数组在声明的时候就可以把内存空间分配好，并赋上默认值，即完成了初始化。  </p><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/array.png" alt="avatar">  </p><p>一维数组初始化</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1 [<span class="number">5</span>]<span class="keyword">int</span> = [<span class="number">5</span>]<span class="keyword">int</span>&#123;&#125; <span class="comment">//数组必须指定长度和类型，且长度和类型指定后不可改变</span></span><br><span class="line"><span class="keyword">var</span> arr2 = [<span class="number">5</span>]<span class="keyword">int</span>&#123;&#125;</span><br><span class="line"><span class="keyword">var</span> arr3 = [<span class="number">5</span>]<span class="keyword">int</span>&#123;<span class="number">3</span>, <span class="number">2</span>&#125; <span class="comment">//给前2个元素赋值</span></span><br><span class="line"><span class="keyword">var</span> arr4 = [<span class="number">5</span>]<span class="keyword">int</span>&#123;<span class="number">2</span>: <span class="number">15</span>, <span class="number">4</span>: <span class="number">30</span>&#125; <span class="comment">//指定index赋值</span></span><br><span class="line"><span class="keyword">var</span> arr5 = [...]<span class="keyword">int</span>&#123;<span class="number">3</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>&#125;<span class="comment">//根据&#123;&#125;里元素的个数推断出数组的长度</span></span><br><span class="line"><span class="keyword">var</span> arr6 = [...]<span class="keyword">struct</span> &#123;</span><br><span class="line">    name <span class="keyword">string</span></span><br><span class="line">    age <span class="keyword">int</span></span><br><span class="line">&#125;&#123;&#123;<span class="string">"Tom"</span>, <span class="number">18</span>&#125;, &#123;<span class="string">"Jim"</span>, <span class="number">20</span>&#125;&#125; <span class="comment">//数组的元素类型由匿名结构体给定</span></span><br></pre></td></tr></table></figure><p>二维数组初始化</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//5行3列，只给前2行赋值，且前2行的所有列还没有赋满</span></span><br><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">5</span>][<span class="number">3</span>]<span class="keyword">int</span>&#123;&#123;<span class="number">1</span>&#125;, &#123;<span class="number">2</span>, <span class="number">3</span>&#125;&#125;</span><br><span class="line"><span class="comment">//第1维可以用...推测，第2维不能用...</span></span><br><span class="line"><span class="keyword">var</span> arr2 = [...][<span class="number">3</span>]<span class="keyword">int</span>&#123;&#123;<span class="number">1</span>&#125;, &#123;<span class="number">2</span>, <span class="number">3</span>&#125;&#125;</span><br></pre></td></tr></table></figure><p>访问数组里的元素</p><ul><li>通过index访问<ul><li>首元素 arr[0]</li><li>末元素 arr[len(arr)-1]</li></ul></li><li>访问二维数组里的元素<ul><li>位于第三行第四列的元素 arr[2][3]</li></ul></li></ul><p>遍历数组</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//遍历数组里的元素</span></span><br><span class="line"><span class="keyword">for</span> i, ele := <span class="keyword">range</span> arr &#123;</span><br><span class="line">    fmt.Printf(<span class="string">"index=%d, element=%d\n"</span>, i, ele)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//或者这样遍历数组</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(arr); i++ &#123; <span class="comment">//len(arr)获取数组的长度</span></span><br><span class="line">    fmt.Printf(<span class="string">"index=%d, element=%d\n"</span>, i, arr[i])</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//遍历二维数组</span></span><br><span class="line"><span class="keyword">for</span> row, array := <span class="keyword">range</span> arr &#123; <span class="comment">//先取出某一行</span></span><br><span class="line">    <span class="keyword">for</span> col, ele := <span class="keyword">range</span> array &#123; <span class="comment">//再遍历这一行</span></span><br><span class="line">        fmt.Printf(<span class="string">"arr[%d][%d]=%d\n"</span>, row, col, ele)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&#8195;&#8195;通过for range遍历数组时取得的是数组里每一个元素的拷贝。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">arr := [...]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line"><span class="keyword">for</span> i, ele := <span class="keyword">range</span> arr &#123; <span class="comment">//ele是arr中元素的拷贝</span></span><br><span class="line">    arr[i] += <span class="number">8</span> <span class="comment">//修改arr里的元素，不影响ele</span></span><br><span class="line">    fmt.Printf(<span class="string">"%d %d %d\n"</span>, i, arr[i], ele)</span><br><span class="line">    ele += <span class="number">1</span> <span class="comment">//修改ele不影响arr</span></span><br><span class="line">    fmt.Printf(<span class="string">"%d %d %d\n"</span>, i, arr[i], ele)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(arr); i++ &#123;</span><br><span class="line">    fmt.Printf(<span class="string">"%d %d\n"</span>, i, arr[i])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在数组上调用cap()函数表示capacity容量，即给数组分配的内存空间可以容纳多少个元素；len()函数代表length长度，即目前数组里有几个元素。由于数组初始化之后长度不会改变，不需要给它预留内存空间，所以len(arr)==cap(arr)。对于多维数组，其cap和len指第一维的长度。<br>数组的长度和类型都是数组类型的一部分，函数传递数组类型时这两部分都必须吻合。<strong>go语言没有按引用传参，全都是按值传参，即传递数组实际上传的是数组的拷贝，当数组的长度很大时，仅传参开销都很大。</strong>如果想修改函数外部的数组，就把它的指针（数组在内存里的地址）传进来。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//参数必须是长度为5的int型数组（注意长度必须是5）</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">update_array1</span><span class="params">(arr [5]<span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"array in function, address is %p\n"</span>, &amp;arr[<span class="number">0</span>])</span><br><span class="line">arr[<span class="number">0</span>] = <span class="number">888</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">update_array2</span><span class="params">(arr *[5]<span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"array in function, address is %p\n"</span>, &amp;((*arr)[<span class="number">0</span>]))</span><br><span class="line">arr[<span class="number">0</span>] = <span class="number">888</span> <span class="comment">//因为传的是数组指针，所以直接在原来的内存空间上进行修改</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h2><p>&#8195;&#8195;切片是一个结构体，包含三个成员变量，array指向一块连续的内存空间，cap表示这块内存的大小，len表示目前该内存里存储了多少元素。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> slice <span class="keyword">struct</span> &#123; </span><br><span class="line">    array unsafe.Pointer </span><br><span class="line">    <span class="built_in">len</span> <span class="keyword">int</span> </span><br><span class="line">    <span class="built_in">cap</span> <span class="keyword">int</span> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/slice.png" alt="avatar">   </p><p>切片的初始化</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s []<span class="keyword">int</span> <span class="comment">//切片声明，len=cap=0</span></span><br><span class="line">s = []<span class="keyword">int</span>&#123;&#125; <span class="comment">//初始化，len=cap=0</span></span><br><span class="line">s = <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">3</span>) <span class="comment">//初始化，len=cap=3</span></span><br><span class="line">s = <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">3</span>, <span class="number">5</span>) <span class="comment">//初始化，len=3，cap=5</span></span><br><span class="line">s = []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125; <span class="comment">//初始化，len=cap=5</span></span><br><span class="line">s2d := [][]<span class="keyword">int</span>&#123;</span><br><span class="line">    &#123;<span class="number">1</span>&#125;,&#123;<span class="number">2</span>, <span class="number">3</span>&#125;, <span class="comment">//二维数组各行的列数相等，但二维切片各行的len可以不等</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>切片相对于数组最大的特点就是可以追加元素，可以自动扩容。追加的元素放到预留的内存空间里，同时len加1。如果预留空间已用完，则会重新申请一块更大的内存空间，capacity大约变成之前的2倍(cap&lt;1024)或1.25倍(cap&gt;1024)。把原内存空间的数据拷贝过来，在新内存空间上执行append操作。  </p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">s := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">3</span>, <span class="number">5</span>)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">3</span>; i++ &#123;</span><br><span class="line">    s[i] = i + <span class="number">1</span></span><br><span class="line">&#125; <span class="comment">//s=[1,2,3]</span></span><br><span class="line">fmt.Printf(<span class="string">"s[0] address %p, s=%v\n"</span>, &amp;s[<span class="number">0</span>], s)</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">capacity还够用，直接把追加的元素放到预留的内存空间上</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">s = <span class="built_in">append</span>(s, <span class="number">4</span>, <span class="number">5</span>) <span class="comment">//可以一次append多个元素</span></span><br><span class="line">fmt.Printf(<span class="string">"s[0] address %p, s=%v\n"</span>, &amp;s[<span class="number">0</span>], s)</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">capacity不够用了，得申请一片新的内存，把老数据先拷贝过来，在新内存上执行append操作</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">s = <span class="built_in">append</span>(s, <span class="number">6</span>)</span><br><span class="line">fmt.Printf(<span class="string">"s[0] address %p, s=%v\n"</span>, &amp;s[<span class="number">0</span>], s)</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//探究capacity扩容规律</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">expansion</span><span class="params">()</span></span> &#123;</span><br><span class="line">s := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">0</span>, <span class="number">3</span>)</span><br><span class="line">prevCap := <span class="built_in">cap</span>(s)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">100</span>; i++ &#123;</span><br><span class="line">s = <span class="built_in">append</span>(s, i)</span><br><span class="line">currCap := <span class="built_in">cap</span>(s)</span><br><span class="line"><span class="keyword">if</span> currCap &gt; prevCap &#123;</span><br><span class="line"><span class="comment">//每次扩容都是扩到原先的2倍</span></span><br><span class="line">fmt.Printf(<span class="string">"capacity从%d变成%d\n"</span>, prevCap, currCap)</span><br><span class="line">prevCap = currCap</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">arr := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">3</span>, <span class="number">5</span>)</span><br><span class="line">brr := <span class="built_in">append</span>(arr, <span class="number">8</span>) <span class="comment">//arr和brr共享底层数组，但它们的len不同</span></span><br></pre></td></tr></table></figure><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/append.png" alt="append"></p><p>&#8195;&#8195;通过指定起止下标，可以从大切片中截取一个子切片。  </p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">3</span>, <span class="number">5</span>)<span class="comment">//len=3, cap=5</span></span><br><span class="line">sub_slice = s[<span class="number">1</span>:<span class="number">3</span>]<span class="comment">//len=2, cap=4</span></span><br></pre></td></tr></table></figure><p>&#8195;&#8195;刚开始，子切片和母切片共享底层的内存空间，修改子切片会反映到母切片上，在子切片上执行append会把新元素放到母切片预留的内存空间上。当子切片不断执行append，耗完了母切片预留的内存空间，子切片跟母切片就会发生内存分离，此后两个切片没有任何关系。  </p><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/sub_slice.png" alt="avatar"> </p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sub_slice</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">截取一部分，创造子切片，此时子切片与母切片(或母数组)共享底层内存空间，母切片的capacity子切片可能直接用</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">s := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">3</span>, <span class="number">5</span>)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">3</span>; i++ &#123;</span><br><span class="line">s[i] = i + <span class="number">1</span></span><br><span class="line">&#125; <span class="comment">//s=[1,2,3]</span></span><br><span class="line">fmt.Printf(<span class="string">"s[1] address %p\n"</span>, &amp;s[<span class="number">1</span>])</span><br><span class="line">sub_slice := s[<span class="number">1</span>:<span class="number">3</span>] <span class="comment">//从切片创造子切片，len=2，cap=4</span></span><br><span class="line">fmt.Printf(<span class="string">"len %d cap %d\n"</span>, <span class="built_in">len</span>(sub_slice), <span class="built_in">cap</span>(sub_slice))</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">母切片的capacity还允许子切片执行append操作</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">sub_slice = <span class="built_in">append</span>(sub_slice, <span class="number">6</span>, <span class="number">7</span>) <span class="comment">//可以一次append多个元素</span></span><br><span class="line">sub_slice[<span class="number">0</span>] = <span class="number">8</span></span><br><span class="line">fmt.Printf(<span class="string">"s=%v, sub_slice=%v, s[1] address %p, sub_slice[0] address %p\n"</span>, s, sub_slice, &amp;s[<span class="number">1</span>], &amp;sub_slice[<span class="number">0</span>])</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">母切片的capacity用完了，子切片再执行append就得申请一片新的内存，把老数据先拷贝过来，在新内存上执行append操作。此时的append操作跟母切片没有任何关系</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">sub_slice = <span class="built_in">append</span>(sub_slice, <span class="number">8</span>)</span><br><span class="line">sub_slice[<span class="number">0</span>] = <span class="number">9</span></span><br><span class="line">fmt.Printf(<span class="string">"s=%v, sub_slice=%v, s[1] address %p, sub_slice[0] address %p\n"</span>, s, sub_slice, &amp;s[<span class="number">1</span>], &amp;sub_slice[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">arr := [<span class="number">5</span>]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">fmt.Printf(<span class="string">"arr[1] address %p\n"</span>, &amp;arr[<span class="number">1</span>])</span><br><span class="line">sub_slice = arr[<span class="number">1</span>:<span class="number">3</span>] <span class="comment">//从数组创造子切片，len=cap=2</span></span><br><span class="line">fmt.Printf(<span class="string">"len %d cap %d\n"</span>, <span class="built_in">len</span>(sub_slice), <span class="built_in">cap</span>(sub_slice))</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">母数组的capacity还允许子切片执行append操作</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">sub_slice = <span class="built_in">append</span>(sub_slice, <span class="number">6</span>, <span class="number">7</span>) <span class="comment">//可以一次append多个元素</span></span><br><span class="line">sub_slice[<span class="number">0</span>] = <span class="number">8</span></span><br><span class="line">fmt.Printf(<span class="string">"arr=%v, sub_slice=%v, arr[1] address %p, sub_slice[0] address %p\n"</span>, arr, sub_slice, &amp;arr[<span class="number">1</span>], &amp;sub_slice[<span class="number">0</span>])</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">母数组的capacity用完了，子切片再执行append就得申请一片新的内存，把老数据先拷贝过来，在新内存上执行append操作。此时的append操作跟母数组没有任何关系</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">sub_slice = <span class="built_in">append</span>(sub_slice, <span class="number">8</span>)</span><br><span class="line">sub_slice[<span class="number">0</span>] = <span class="number">9</span></span><br><span class="line">fmt.Printf(<span class="string">"arr=%v, sub_slice=%v, arr[1] address %p, sub_slice[0] address %p\n"</span>, arr, sub_slice, &amp;arr[<span class="number">1</span>], &amp;sub_slice[<span class="number">0</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&#8195;&#8195;go语言函数传参，传的都是值，即传切片会把切片的{arrayPointer, len, cap}这3个字段拷贝一份传进来。由于传的是底层数组的指针，所以可以直接修改底层数组里的元素。  </p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">update_slice</span><span class="params">(s []<span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">s[<span class="number">0</span>] = <span class="number">888</span></span><br><span class="line">&#125;</span><br><span class="line">s := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">update_slice(s)</span><br><span class="line">fmt.Printf(<span class="string">"s=%v\n"</span>, s)</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">s := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">fmt.Printf(<span class="string">"address of slice %p, address of array %p %p\n"</span>, &amp;s, &amp;s[<span class="number">0</span>], s)</span><br><span class="line">s = <span class="built_in">append</span>(s, <span class="number">4</span>)</span><br><span class="line">fmt.Printf(<span class="string">"address of slice %p, address of array %p %p\n"</span>, &amp;s, &amp;s[<span class="number">0</span>], s)</span><br><span class="line">s = <span class="built_in">append</span>(s, <span class="number">4</span>)</span><br><span class="line">fmt.Printf(<span class="string">"address of slice %p, address of array %p %p\n"</span>, &amp;s, &amp;s[<span class="number">0</span>], s)</span><br></pre></td></tr></table></figure><p>获取切片的地址用&amp;s；获取切片底层数组的地址用&amp;s[0]，或直接把s当地址打印。  </p><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>字符串里可以包含任意Unicode字符。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s := <span class="string">" My name is 张朝阳☻"</span></span><br></pre></td></tr></table></figure><p>字符串里可以包含转义字符。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s := <span class="string">"He say:\"I'm fine.\" \n\\Thank\tyou.\\"</span></span><br></pre></td></tr></table></figure><p>字符串也可以用反引号来定义，反引号里的转义字符无效。反引号里的内容原封不动地输出，包括空白符和换行符。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">s := <span class="string">`here is first line. </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  there is third line.</span></span><br><span class="line"><span class="string">`</span></span><br></pre></td></tr></table></figure><p>字符串常用操作</p><table><thead><tr><th align="center">方法</th><th align="center">介绍</th></tr></thead><tbody><tr><td align="center">len(str)</td><td align="center">求长度</td></tr><tr><td align="center">strings.Split</td><td align="center">分割</td></tr><tr><td align="center">strings.Contains</td><td align="center">判断是否包含</td></tr><tr><td align="center">strings.HasPrefix,strings.HasSuffix</td><td align="center">前缀/后缀判断</td></tr><tr><td align="center">strings.Index(),strings.LastIndex()</td><td align="center">子串出现的位置</td></tr></tbody></table><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">s := <span class="string">"born to win, born to die."</span></span><br><span class="line">fmt.Printf(<span class="string">"sentence length %d\n"</span>, <span class="built_in">len</span>(s))</span><br><span class="line">fmt.Printf(<span class="string">"\"s\" length %d\n"</span>, <span class="built_in">len</span>(<span class="string">"s"</span>))  <span class="comment">//英文字母的长度为1</span></span><br><span class="line">fmt.Printf(<span class="string">"\"中\"  length %d\n"</span>, <span class="built_in">len</span>(<span class="string">"中"</span>)) <span class="comment">//一个汉字占3个长度</span></span><br><span class="line">arr := strings.Split(s, <span class="string">" "</span>)</span><br><span class="line">fmt.Printf(<span class="string">"arr[3]=%s\n"</span>, arr[<span class="number">3</span>])</span><br><span class="line">fmt.Printf(<span class="string">"contain die %t\n"</span>, strings.Contains(s, <span class="string">"die"</span>))          <span class="comment">//包含子串</span></span><br><span class="line">fmt.Printf(<span class="string">"contain wine %t\n"</span>, strings.Contains(s, <span class="string">"wine"</span>))        <span class="comment">//包含子串</span></span><br><span class="line">fmt.Printf(<span class="string">"first index of born %d\n"</span>, strings.Index(s, <span class="string">"born"</span>))    <span class="comment">//寻找子串第一次出现的位置</span></span><br><span class="line">fmt.Printf(<span class="string">"last index of born %d\n"</span>, strings.LastIndex(s, <span class="string">"born"</span>)) <span class="comment">//寻找子串最后一次出现的位置</span></span><br><span class="line">fmt.Printf(<span class="string">"begin with born %t\n"</span>, strings.HasPrefix(s, <span class="string">"born"</span>))    <span class="comment">//以xxx开头</span></span><br><span class="line">fmt.Printf(<span class="string">"end with die. %t\n"</span>, strings.HasSuffix(s, <span class="string">"die."</span>))      <span class="comment">//以xxx结尾</span></span><br></pre></td></tr></table></figure><p>把多个字符串拼接成一个长的字符串有多种方式。</p><ol><li>加号连接。</li><li>func fmt.Sprintf(format string, a …interface{}) string</li><li>func strings.Join(elems []string, sep string) string</li><li>当有大量的string需要拼接时，用strings.Builder效率最高</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">s1 := <span class="string">"Hello"</span></span><br><span class="line">s2 := <span class="string">"how"</span></span><br><span class="line">s3 := <span class="string">"are"</span></span><br><span class="line">s4 := <span class="string">"you"</span></span><br><span class="line">merged := s1 + <span class="string">" "</span> + s2 + <span class="string">" "</span> + s3 + <span class="string">" "</span> + s4</span><br><span class="line">fmt.Println(merged)</span><br><span class="line">merged = fmt.Sprintf(<span class="string">"%s %s %s %s"</span>, s1, s2, s3, s4)</span><br><span class="line">fmt.Println(merged)</span><br><span class="line">merged = strings.Join([]<span class="keyword">string</span>&#123;s1, s2, s3, s4&#125;, <span class="string">" "</span>)</span><br><span class="line">fmt.Println(merged)</span><br><span class="line"><span class="comment">//当有大量的string需要拼接时，用strings.Builder效率最高</span></span><br><span class="line">sb := strings.Builder&#123;&#125;</span><br><span class="line">sb.WriteString(s1)</span><br><span class="line">sb.WriteString(<span class="string">" "</span>)</span><br><span class="line">sb.WriteString(s2)</span><br><span class="line">sb.WriteString(<span class="string">" "</span>)</span><br><span class="line">sb.WriteString(s3)</span><br><span class="line">sb.WriteString(<span class="string">" "</span>)</span><br><span class="line">sb.WriteString(s4)</span><br><span class="line">sb.WriteString(<span class="string">" "</span>)</span><br><span class="line">merged = sb.String()</span><br><span class="line">fmt.Println(merged)</span><br></pre></td></tr></table></figure><p>string中每个元素叫“字符”，字符有两种：</p><ol><li>byte：1个字节， 代表ASCII码的一个字符。</li><li>rune：4个字节，代表一个UTF-8字符，一个汉字可用一个rune表示。</li></ol><p>string是常量，不能修改其中的字符。<br>string可以转换为[]byte或[]rune类型。<br>string底层是byte数组，string的长度就是该byte数组的长度， UTF-8编码下一个汉字占3个byte，即一个汉字占3个长度。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">s1 := <span class="string">"My name is 张朝阳"</span></span><br><span class="line">arr := []<span class="keyword">byte</span>(s1)</span><br><span class="line">brr := []<span class="keyword">rune</span>(s1)</span><br><span class="line">fmt.Printf(<span class="string">"last byte %d\n"</span>, arr[<span class="built_in">len</span>(arr)<span class="number">-1</span>]) <span class="comment">//string可以转换为[]byte或[]rune类型</span></span><br><span class="line">fmt.Printf(<span class="string">"last byte %c\n"</span>, arr[<span class="built_in">len</span>(arr)<span class="number">-1</span>]) <span class="comment">//byte或rune可以转为string</span></span><br><span class="line">fmt.Printf(<span class="string">"last rune %d\n"</span>, brr[<span class="built_in">len</span>(brr)<span class="number">-1</span>])</span><br><span class="line">fmt.Printf(<span class="string">"last rune %c\n"</span>, brr[<span class="built_in">len</span>(brr)<span class="number">-1</span>])</span><br><span class="line">L := <span class="built_in">len</span>(s1)</span><br><span class="line">fmt.Printf(<span class="string">"string len %d byte array len %d rune array len %d\n"</span>, L, <span class="built_in">len</span>(arr), <span class="built_in">len</span>(brr))</span><br><span class="line"><span class="keyword">for</span> _, ele := <span class="keyword">range</span> s1 &#123;</span><br><span class="line">    fmt.Printf(<span class="string">"%c "</span>, ele) <span class="comment">//string中的每个元素是字符</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println()</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; L; i++ &#123;</span><br><span class="line">    fmt.Printf(<span class="string">"%c "</span>, s1[i]) <span class="comment">//[i]前面应该出现数组或切片，这里自动把string转成了[]byte（而不是[]rune）</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h2><p>强制类型转换的基本方法就是把目标类型放在变量前面，把变量括起来。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i <span class="keyword">int</span> = <span class="number">9</span></span><br><span class="line"><span class="keyword">var</span> by <span class="keyword">byte</span> = <span class="keyword">byte</span>(i)<span class="comment">//int转为byte</span></span><br><span class="line">i = <span class="keyword">int</span>(by)<span class="comment">//byte转为int</span></span><br></pre></td></tr></table></figure><ul><li>低精度向高精度转换没问题，高精度向低精度转换会丢失位数。</li><li>无符号向有符号转换，最高位是符号位。</li><li>byte和int可以互相转换。</li><li>float和int可以互相转换，小数位会丢失。</li><li>bool和int不能相互转换。</li><li>不同长度的int或float之间可以相互转换。</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//高精度向低精度转换，数字很小时这种转换没问题</span></span><br><span class="line"><span class="keyword">var</span> ua <span class="keyword">uint64</span> = <span class="number">1</span></span><br><span class="line">i8 := <span class="keyword">int8</span>(ua)</span><br><span class="line">fmt.Printf(<span class="string">"i8=%d\n"</span>, i8)</span><br><span class="line"></span><br><span class="line"><span class="comment">//最高位的1变成了符号位</span></span><br><span class="line">ua = <span class="keyword">uint64</span>(math.MaxUint64)</span><br><span class="line">i64 := <span class="keyword">int64</span>(ua)</span><br><span class="line">fmt.Printf(<span class="string">"i64=%d\n"</span>, i64)</span><br><span class="line"></span><br><span class="line"><span class="comment">//位数丢失</span></span><br><span class="line">ui32 := <span class="keyword">uint32</span>(ua)</span><br><span class="line">fmt.Printf(<span class="string">"ui32=%d\n"</span>, ui32)</span><br><span class="line"></span><br><span class="line"><span class="comment">//单个字符可以转为int</span></span><br><span class="line"><span class="keyword">var</span> i <span class="keyword">int</span> = <span class="keyword">int</span>(<span class="string">'a'</span>)</span><br><span class="line">fmt.Printf(<span class="string">"i=%d\n"</span>, i)</span><br><span class="line"></span><br><span class="line"><span class="comment">//bool和int不能相互转换</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//byte和int可以互相转换</span></span><br><span class="line"><span class="keyword">var</span> by <span class="keyword">byte</span> = <span class="keyword">byte</span>(i)</span><br><span class="line">i = <span class="keyword">int</span>(by)</span><br><span class="line">fmt.Printf(<span class="string">"i=%d\n"</span>, i)</span><br><span class="line"></span><br><span class="line"><span class="comment">//float和int可以互相转换，小数位会丢失</span></span><br><span class="line"><span class="keyword">var</span> ft <span class="keyword">float32</span> = <span class="keyword">float32</span>(i)</span><br><span class="line">i = <span class="keyword">int</span>(ft)</span><br><span class="line">fmt.Printf(<span class="string">"i=%d\n"</span>, i)</span><br></pre></td></tr></table></figure><p>string和其他数据类型互转。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> err error</span><br><span class="line"><span class="keyword">var</span> i <span class="keyword">int</span> = <span class="number">8</span></span><br><span class="line"><span class="keyword">var</span> i64 <span class="keyword">int64</span> = <span class="keyword">int64</span>(i)</span><br><span class="line"><span class="comment">//int转string</span></span><br><span class="line"><span class="keyword">var</span> s <span class="keyword">string</span> = strconv.Itoa(i) <span class="comment">//内部调用FormatInt</span></span><br><span class="line">s = strconv.FormatInt(i64, <span class="number">10</span>)</span><br><span class="line"><span class="comment">//string转int</span></span><br><span class="line">i, err = strconv.Atoi(s)</span><br><span class="line"><span class="comment">//string转int64</span></span><br><span class="line">i64, err = strconv.ParseInt(s, <span class="number">10</span>, <span class="number">64</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//float转string</span></span><br><span class="line"><span class="keyword">var</span> f <span class="keyword">float64</span> = <span class="number">8.123456789</span></span><br><span class="line">s = strconv.FormatFloat(f, <span class="string">'f'</span>, <span class="number">2</span>, <span class="number">64</span>) <span class="comment">//保留2位小数</span></span><br><span class="line">fmt.Println(s)</span><br><span class="line"><span class="comment">//string转float</span></span><br><span class="line">f, err = strconv.ParseFloat(s, <span class="number">64</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//string&lt;--&gt;[]byte</span></span><br><span class="line"><span class="keyword">var</span> arr []<span class="keyword">byte</span> = []<span class="keyword">byte</span>(s)</span><br><span class="line">s = <span class="keyword">string</span>(arr)</span><br><span class="line"></span><br><span class="line"><span class="comment">//string&lt;--&gt;[]rune</span></span><br><span class="line"><span class="keyword">var</span> brr []<span class="keyword">rune</span> = []<span class="keyword">rune</span>(s)</span><br><span class="line">s = <span class="keyword">string</span>(brr)</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">"err %v\n"</span>, err)</span><br></pre></td></tr></table></figure><h2 id="map"><a href="#map" class="headerlink" title="map"></a>map</h2><p>go map的底层实现是hash table，根据key查找value的时间复杂度是O(1)。  </p><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/map.png" alt="avatar">   </p><p>map的初始化</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> m <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span> <span class="comment">//声明map，指定key和value的数据类型</span></span><br><span class="line">m = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>) <span class="comment">//初始化，容量为0</span></span><br><span class="line">m = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>, <span class="number">200</span>) <span class="comment">//初始化，容量为200。强烈建议初始化时给一个合适的容量，减少扩容的概率</span></span><br><span class="line">m = <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>&#123;<span class="string">"语文"</span>: <span class="number">0</span>, <span class="string">"数学"</span>: <span class="number">39</span>&#125; <span class="comment">//初始化时直接赋值</span></span><br></pre></td></tr></table></figure><p>添加和删除key</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">m[<span class="string">"英语"</span>] = <span class="number">59</span> <span class="comment">//往map里添加key-value对</span></span><br><span class="line">m [<span class="string">"英语"</span>] = <span class="number">70</span> <span class="comment">//会覆盖之前的值</span></span><br><span class="line"><span class="built_in">delete</span>(m, <span class="string">"数学"</span>) <span class="comment">//从map里删除key-value对</span></span><br></pre></td></tr></table></figure><p>len(m)获取map的长度，go不支持对map上执行cap函数。<br>读取key对应的value时，如果key不存在，则返回value类型的默认值，所以强烈建议先判断key是否存在。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> value, exists := m[<span class="string">"语文"</span>]; exists &#123;</span><br><span class="line">    fmt.Println(value)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">"map里不存在[语文]这个key"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>遍历map</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//遍历map</span></span><br><span class="line"><span class="keyword">for</span> key, value := <span class="keyword">range</span> m &#123;</span><br><span class="line">    fmt.Printf(<span class="string">"%s=%d\n"</span>, key, value)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">"-----------"</span>)</span><br><span class="line"><span class="comment">//多次遍历map返回的顺序是不一样的，但相对顺序是一样的，因为每次随机选择一个开始位置，然后顺序遍历</span></span><br><span class="line"><span class="keyword">for</span> key, value := <span class="keyword">range</span> m &#123;</span><br><span class="line">    fmt.Printf(<span class="string">"%s=%d\n"</span>, key, value)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">"-----------"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//一边遍历一边修改</span></span><br><span class="line"><span class="keyword">for</span> key, value := <span class="keyword">range</span> m &#123;</span><br><span class="line">    m[key] = value + <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> key, value := <span class="keyword">range</span> m &#123;</span><br><span class="line">    fmt.Printf(<span class="string">"%s=%d\n"</span>, key, value)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">"-----------"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//for range取得的是值拷贝</span></span><br><span class="line"><span class="keyword">for</span> _, value := <span class="keyword">range</span> m &#123;</span><br><span class="line">    value = value + <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> key, value := <span class="keyword">range</span> m &#123;</span><br><span class="line">    fmt.Printf(<span class="string">"%s=%d\n"</span>, key, value)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>map中的key可以是任意能够用==操作符比较的类型，不能是函数、map、切片，以及包含上述3中类型成员变量的的struct。map的value可以是任意类型。  </p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> f <span class="function"><span class="keyword">func</span><span class="params">(<span class="keyword">int</span>)</span> <span class="title">bool</span></span></span><br><span class="line"><span class="keyword">type</span> m <span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">byte</span></span><br><span class="line"><span class="keyword">type</span> s []<span class="keyword">int</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> i <span class="keyword">int</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> m1 <span class="keyword">map</span>[i]f</span><br><span class="line">fmt.Println(m1)</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 函数、map、切片不能当key **/</span></span><br><span class="line"><span class="comment">// var m2 map[f]bool</span></span><br><span class="line"><span class="comment">// fmt.Println(m2)</span></span><br><span class="line"><span class="comment">// var m3 map[m]bool</span></span><br><span class="line"><span class="comment">// fmt.Println(m3)</span></span><br><span class="line"><span class="comment">// var m4 map[s]bool</span></span><br><span class="line"><span class="comment">// fmt.Println(m4)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> user <span class="keyword">struct</span> &#123;</span><br><span class="line">scores <span class="keyword">float32</span> <span class="comment">//如果scores是slice，则user不能作为map的key</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">u := user&#123;&#125;</span><br><span class="line">m5 := <span class="built_in">make</span>(<span class="keyword">map</span>[user]<span class="keyword">interface</span>&#123;&#125;)</span><br><span class="line">m5[u] = <span class="number">5</span></span><br><span class="line">fmt.Println(m5)</span><br></pre></td></tr></table></figure><h2 id="channel"><a href="#channel" class="headerlink" title="channel"></a>channel</h2><p>&#8195;&#8195;channel(管道)底层是一个环形队列(先进先出)，send(插入)和recv(取走)从同一个位置沿同一个方向顺序执行。sendx表示最后一次插入元素的位置，recvx表示最后一次取走元素的位置。<br><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/channel.png" alt="avatar">  </p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ch <span class="keyword">chan</span> <span class="keyword">int</span> <span class="comment">//管道的声明</span></span><br><span class="line">ch = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">8</span>) <span class="comment">//管道的初始化，环形队列里可容纳8个int</span></span><br><span class="line">ch &lt;- <span class="number">1</span>                <span class="comment">//往管道里写入(send)数据</span></span><br><span class="line">ch &lt;- <span class="number">2</span></span><br><span class="line">ch &lt;- <span class="number">3</span></span><br><span class="line">ch &lt;- <span class="number">4</span></span><br><span class="line">ch &lt;- <span class="number">5</span></span><br><span class="line">v := &lt;-ch <span class="comment">//从管道里取走(recv)数据</span></span><br><span class="line">fmt.Println(v)</span><br><span class="line">v = &lt;-ch</span><br><span class="line">fmt.Println(v)</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">read_only := <span class="built_in">make</span> (&lt;-<span class="keyword">chan</span> <span class="keyword">int</span>)   <span class="comment">//定义只读的channel</span></span><br><span class="line">write_only := <span class="built_in">make</span> (<span class="keyword">chan</span>&lt;- <span class="keyword">int</span>)   <span class="comment">//定义只写的channel</span></span><br></pre></td></tr></table></figure><p>定义只读和只写的channel意义不大，一般用于在参数传递中。  </p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//只能向channel里写数据 </span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">send</span><span class="params">(c <span class="keyword">chan</span>&lt;- <span class="keyword">int</span>)</span></span> &#123; </span><br><span class="line">    c &lt;- <span class="number">1</span> </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">//只能取channel中的数据 </span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">recv</span><span class="params">(c &lt;-<span class="keyword">chan</span> <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">_ = &lt;-c</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回一个只读channel</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Context)</span> <span class="title">Done</span><span class="params">()</span> &lt;-<span class="title">chan</span> <span class="title">struct</span></span>&#123;&#125; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以通过for range遍历并取走管道里的元素，当管道为空且被close后，for循环退出。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">close</span>(ch)</span><br><span class="line"><span class="comment">//遍历并取走（receive）管道里的元素。当管道里已无剩余元素且没有close管道时，receive操作会一直阻塞，最终报deadlock。当管道为空且被close后，for循环退出。</span></span><br><span class="line"><span class="keyword">for</span> ele := <span class="keyword">range</span> ch &#123;</span><br><span class="line">fmt.Println(ele)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>slice、map和channel是go语言里的3种引用类型，都可以通过make函数来进行初始化（申请内存分配）。因为它们都包含一个指向底层数据结构的指针，所以称之为“引用”类型。引用类型未初始化时都是nil，可以对它们执行len()函数，返回0。</p>]]></content>
    
    <summary type="html">
    
      2007年，Google的几位大牛正在用C++开发一些比较繁琐但是核心的工作，主要是分布式集群，大牛觉得很闹心。此时C++委员会来他们公司做技术演讲，说C++将要添加35个新特性，大牛心里飘过一万个CNM，“C++特性还不够多吗”。于是Rob Pike说要不自己搞个简单一点的语言...
    
    </summary>
    
    
      <category term="Golang" scheme="http://yoursite.com/categories/Golang/"/>
    
    
      <category term="Golang基础" scheme="http://yoursite.com/tags/Golang%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>[Go基础语法]</title>
    <link href="http://yoursite.com/2021/04/21/Go%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
    <id>http://yoursite.com/2021/04/21/Go%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</id>
    <published>2021-04-21T12:29:20.000Z</published>
    <updated>2021-04-21T13:11:21.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Go基础语法"><a href="#Go基础语法" class="headerlink" title="Go基础语法"></a>Go基础语法</h1><h2 id="标识符与关键字"><a href="#标识符与关键字" class="headerlink" title="标识符与关键字"></a>标识符与关键字</h2><p>go变量、常量、自定义类型、包、函数的命名方式必须遵循以下规则：</p><ol><li>首字符可以是任意Unicode字符或下划线。</li><li>首字符之外的部分可以是Unicode字符、下划线或数字。</li><li>名字的长度无限制。</li></ol><blockquote><p>理论上名字里可以有汉字，甚至可以全是汉字，但实际中不要这么做。</p></blockquote><p>Go语言关键字</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">break  default  func  interface  select  case  defer  go  map  struct  chan  else  goto  package  switch  const  if  range  type  continue  for  import  return  fallthrough  var</span><br></pre></td></tr></table></figure><p>常量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">true  false  iota  nil</span><br></pre></td></tr></table></figure><p>数据类型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int  int8  int16  int32  int64  uint  uint8  uint16  uint32  uint64  uintptr  float32  float64  complex128  complex64  bool  byte  rune  string  error</span><br></pre></td></tr></table></figure><p>函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make  len  cap  new  append  copy  close  delete  complex  real  imag  panic  recover</span><br></pre></td></tr></table></figure><h2 id="操作符与表达式"><a href="#操作符与表达式" class="headerlink" title="操作符与表达式"></a>操作符与表达式</h2><p>算法术运算符</p><table><thead><tr><th align="center">运算符</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">+</td><td align="center">相加</td></tr><tr><td align="center">-</td><td align="center">相减</td></tr><tr><td align="center">*</td><td align="center">相乘</td></tr><tr><td align="center">/</td><td align="center">相除</td></tr><tr><td align="center">%</td><td align="center">求余</td></tr></tbody></table><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//arithmetic 算术运算</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">arithmetic</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> a <span class="keyword">float32</span> = <span class="number">8</span></span><br><span class="line"><span class="keyword">var</span> b <span class="keyword">float32</span> = <span class="number">3</span></span><br><span class="line"><span class="keyword">var</span> c <span class="keyword">float32</span> = a + b</span><br><span class="line"><span class="keyword">var</span> d <span class="keyword">float32</span> = a - b</span><br><span class="line"><span class="keyword">var</span> e <span class="keyword">float32</span> = a * b</span><br><span class="line"><span class="keyword">var</span> f <span class="keyword">float32</span> = a / b</span><br><span class="line">fmt.Printf(<span class="string">"a=%.3f, b=%.3f, c=%.3f, d=%.3f, e=%.3f, f=%.3f\n"</span>, a, b, c, d, e, f)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关系运算符</p><table><thead><tr><th align="center">运算符</th><th align="left">描述</th></tr></thead><tbody><tr><td align="center">==</td><td align="left">检查两个值是否相等，如果相等返回 True 否则返回 False</td></tr><tr><td align="center">!=</td><td align="left">检查两个值是否不相等，如果不相等返回 True 否则返回 False</td></tr><tr><td align="center">&gt;</td><td align="left">检查左边值是否大于右边值，如果是返回 True 否则返回 False</td></tr><tr><td align="center">&gt;=</td><td align="left">检查左边值是否大于等于右边值，如果是返回 True 否则返回 False</td></tr><tr><td align="center">&lt;</td><td align="left">检查左边值是否小于右边值，如果是返回 True 否则返回 False</td></tr><tr><td align="center">&lt;=</td><td align="left">检查左边值是否小于等于右边值，如果是返回 True 否则返回 False</td></tr></tbody></table><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//relational 关系运算符</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">relational</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> a <span class="keyword">float32</span> = <span class="number">8</span></span><br><span class="line"><span class="keyword">var</span> b <span class="keyword">float32</span> = <span class="number">3</span></span><br><span class="line"><span class="keyword">var</span> c <span class="keyword">float32</span> = <span class="number">8</span></span><br><span class="line">fmt.Printf(<span class="string">"a==b吗 %t\n"</span>, a == b)</span><br><span class="line">fmt.Printf(<span class="string">"a!=b吗 %t\n"</span>, a != b)</span><br><span class="line">fmt.Printf(<span class="string">"a&gt;b吗 %t\n"</span>, a &gt; b)</span><br><span class="line">fmt.Printf(<span class="string">"a&gt;=b吗 %t\n"</span>, a &gt;= b)</span><br><span class="line">fmt.Printf(<span class="string">"a&lt;c吗 %t\n"</span>, a &lt; b)</span><br><span class="line">fmt.Printf(<span class="string">"a&lt;=c吗 %t\n"</span>, a &lt;= c)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>逻辑运算符  </p><table><thead><tr><th align="center">运算符</th><th align="left">描述</th></tr></thead><tbody><tr><td align="center">&amp;&amp;</td><td align="left">逻辑 AND 运算符。 如果两边的操作数都是 True，则为 True，否则为 False</td></tr><tr><td align="center">||</td><td align="left">逻辑 OR 运算符。 如果两边的操作数有一个 True，则为 True，否则为 False</td></tr><tr><td align="center">!</td><td align="left">逻辑 NOT 运算符。 如果条件为 True，则为 False，否则为 True</td></tr></tbody></table><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//logistic 逻辑运算符</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">logistic</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> a <span class="keyword">float32</span> = <span class="number">8</span></span><br><span class="line"><span class="keyword">var</span> b <span class="keyword">float32</span> = <span class="number">3</span></span><br><span class="line"><span class="keyword">var</span> c <span class="keyword">float32</span> = <span class="number">8</span></span><br><span class="line">fmt.Printf(<span class="string">"a&gt;b &amp;&amp; b&gt;c吗 %t\n"</span>, a &gt; b &amp;&amp; b &gt; c)</span><br><span class="line">fmt.Printf(<span class="string">"a&gt;b || b&gt;c吗 %t\n"</span>, a &gt; b || b &gt; c)</span><br><span class="line">fmt.Printf(<span class="string">"a&gt;b不成立，对吗 %t\n"</span>, !(a &gt; b))</span><br><span class="line">fmt.Printf(<span class="string">"b&gt;c不成立，对吗 %t\n"</span>, !(b &gt; c))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>位运算符</p><table><thead><tr><th align="center">运算符</th><th align="left">描述</th></tr></thead><tbody><tr><td align="center">&amp;</td><td align="left">参与运算的两数各对应的二进位相与（两位均为1才为1）</td></tr><tr><td align="center">|</td><td align="left">参与运算的两数各对应的二进位相或（两位有一个为1就为1）</td></tr><tr><td align="center">^</td><td align="left">参与运算的两数各对应的二进位相异或，当两对应的二进位相同时为0，不同时为1。作为一元运算符时表示按位取反，，符号位也跟着变</td></tr><tr><td align="center">&lt;&lt;</td><td align="left">左移n位就是乘以2的n次方。a&lt;&lt;b是把a的各二进位全部左移b位，高位丢弃，低位补0。通过左移，符号位可能会变</td></tr><tr><td align="center">&gt;&gt;</td><td align="left">右移n位就是除以2的n次方。a&gt;&gt;b是把a的各二进位全部右移b位，正数高位补0，负数高位补1</td></tr></tbody></table><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//bit_op 位运算</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">bit_op</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"os arch %s, int size %d\n"</span>, runtime.GOARCH, strconv.IntSize) <span class="comment">//int是4字节还是8字节，取决于操作系统是32位还是64位</span></span><br><span class="line"><span class="keyword">var</span> a <span class="keyword">int32</span> = <span class="number">260</span></span><br><span class="line">fmt.Printf(<span class="string">"260     %s\n"</span>, util.BinaryFormat(a))</span><br><span class="line">fmt.Printf(<span class="string">"-260    %s\n"</span>, util.BinaryFormat(-a)) <span class="comment">//负数用补码表示。在对应正数二进制表示的基础上，按拉取反，再末位加1</span></span><br><span class="line">fmt.Printf(<span class="string">"260&amp;4   %s\n"</span>, util.BinaryFormat(a&amp;<span class="number">4</span>))</span><br><span class="line">fmt.Printf(<span class="string">"260|3   %s\n"</span>, util.BinaryFormat(a|<span class="number">3</span>))</span><br><span class="line">fmt.Printf(<span class="string">"260^7   %s\n"</span>, util.BinaryFormat(a^<span class="number">7</span>))     <span class="comment">//^作为二元运算符时表示异或</span></span><br><span class="line">fmt.Printf(<span class="string">"^-260   %s\n"</span>, util.BinaryFormat(^-a))     <span class="comment">//^作为一元运算符时表示按位取反，符号位也跟着变</span></span><br><span class="line">fmt.Printf(<span class="string">"-260&gt;&gt;10 %s\n"</span>, util.BinaryFormat(-a&gt;&gt;<span class="number">10</span>)) <span class="comment">//正数高位补0，负数高位补1</span></span><br><span class="line">fmt.Printf(<span class="string">"-260&lt;&lt;3 %s\n"</span>, util.BinaryFormat(-a&lt;&lt;<span class="number">3</span>))   <span class="comment">//负数左移，可能变成正数</span></span><br><span class="line"><span class="comment">//go语言没有循环（无符号）左/右移符号   &gt;&gt;&gt;  &lt;&lt;&lt;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>位移运算</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">正数右移：高位补<span class="number">0</span></span><br><span class="line">负数右移：高位补<span class="number">1</span></span><br><span class="line">负数左移：低位补<span class="number">0</span></span><br></pre></td></tr></table></figure><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/%E6%88%AA%E5%B1%8F2022-12-13%2019.39.31.png" alt="截屏2022-12-13 19.39.31">   </p><p>位运算的应用场景：  </p><ul><li>逻辑控制（运算快，省CPU）</li><li>bitmap和bloom filter（省内存）</li></ul><p>总之，位运算适用于对性能要求高的场景。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">bit_application</span><span class="params">()</span></span> &#123;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">var</span> gender <span class="keyword">string</span> = <span class="string">"男"</span></span><br><span class="line"><span class="keyword">var</span> degree <span class="keyword">string</span> = <span class="string">"本科"</span></span><br><span class="line"><span class="keyword">var</span> is985 <span class="keyword">bool</span> = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> condition1 <span class="keyword">bool</span> = gender == <span class="string">"男"</span></span><br><span class="line"><span class="keyword">var</span> condition2 <span class="keyword">bool</span> = gender == <span class="string">"男"</span> &amp;&amp; is985</span><br><span class="line"><span class="keyword">var</span> condition3 <span class="keyword">bool</span> = gender == <span class="string">"男"</span> &amp;&amp; degree == <span class="string">"硕士"</span> &amp;&amp; is985</span><br><span class="line">fmt.Printf(<span class="string">"满足条件1 %t\n"</span>, condition1)</span><br><span class="line">fmt.Printf(<span class="string">"满足条件2 %t\n"</span>, condition2)</span><br><span class="line">fmt.Printf(<span class="string">"满足条件3 %t\n"</span>, condition3)</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">var</span> gender <span class="keyword">byte</span> = <span class="number">1</span>      <span class="comment">//末位，1：男，0：女</span></span><br><span class="line"><span class="keyword">var</span> degree <span class="keyword">byte</span> = <span class="number">1</span> &lt;&lt; <span class="number">1</span> <span class="comment">//倒数第二位，1：硕士，0：本科</span></span><br><span class="line"><span class="keyword">var</span> is985 <span class="keyword">byte</span> = <span class="number">1</span> &lt;&lt; <span class="number">2</span>  <span class="comment">//倒数第三位，1：是985，2：不是985</span></span><br><span class="line"><span class="keyword">var</span> man <span class="keyword">byte</span> = gender | is985</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> condition1 <span class="keyword">byte</span> = gender</span><br><span class="line"><span class="keyword">var</span> condition2 <span class="keyword">byte</span> = gender | is985</span><br><span class="line"><span class="keyword">var</span> condition3 <span class="keyword">byte</span> = gender | is985 | degree</span><br><span class="line">fmt.Printf(<span class="string">"满足条件1 %t\n"</span>, man&amp;condition1 == condition1)</span><br><span class="line">fmt.Printf(<span class="string">"满足条件2 %t\n"</span>, man&amp;condition2 == condition2)</span><br><span class="line">fmt.Printf(<span class="string">"满足条件3 %t\n"</span>, man&amp;condition3 == condition3)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>赋值运算符</p><table><thead><tr><th align="center">运算符</th><th align="left">描述</th></tr></thead><tbody><tr><td align="center">=</td><td align="left">简单的赋值运算符，将一个表达式的值赋给一个左值</td></tr><tr><td align="center">+=</td><td align="left">相加后再赋值</td></tr><tr><td align="center">-=</td><td align="left">相减后再赋值</td></tr><tr><td align="center">*=</td><td align="left">相乘后再赋值</td></tr><tr><td align="center">/=</td><td align="left">相除后再赋值</td></tr><tr><td align="center">%=</td><td align="left">求余后再赋值</td></tr><tr><td align="center">&lt;&lt;=</td><td align="left">左移后赋值</td></tr><tr><td align="center">&gt;&gt;=</td><td align="left">右移后赋值</td></tr><tr><td align="center">&amp;=</td><td align="left">按位与后赋值</td></tr><tr><td align="center">|=</td><td align="left">按位或后赋值</td></tr><tr><td align="center">^=</td><td align="left">按位异或后赋值</td></tr></tbody></table><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//assignment 赋值运算</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">assignment</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> a, b <span class="keyword">int</span> = <span class="number">8</span>, <span class="number">3</span></span><br><span class="line">a += b</span><br><span class="line">fmt.Printf(<span class="string">"a+=b %d\n"</span>, a)</span><br><span class="line">a, b = <span class="number">8</span>, <span class="number">3</span></span><br><span class="line">a -= b</span><br><span class="line">fmt.Printf(<span class="string">"a-=b %d\n"</span>, a)</span><br><span class="line">a, b = <span class="number">8</span>, <span class="number">3</span></span><br><span class="line">a *= b</span><br><span class="line">fmt.Printf(<span class="string">"a*=b %d\n"</span>, a)</span><br><span class="line">a, b = <span class="number">8</span>, <span class="number">3</span></span><br><span class="line">a /= b</span><br><span class="line">fmt.Printf(<span class="string">"a/=b %d\n"</span>, a)</span><br><span class="line">a, b = <span class="number">8</span>, <span class="number">3</span></span><br><span class="line">a %= b</span><br><span class="line">fmt.Printf(<span class="string">"a%%=b %d\n"</span>, a) <span class="comment">//%在fmt里有特殊含意，所以需要前面再加个%转义一下</span></span><br><span class="line">a, b = <span class="number">8</span>, <span class="number">3</span></span><br><span class="line">a &lt;&lt;= b</span><br><span class="line">fmt.Printf(<span class="string">"a&lt;&lt;=b %d\n"</span>, a)</span><br><span class="line">a, b = <span class="number">8</span>, <span class="number">3</span></span><br><span class="line">a &gt;&gt;= b</span><br><span class="line">fmt.Printf(<span class="string">"a&gt;&gt;=b %d\n"</span>, a)</span><br><span class="line">a, b = <span class="number">8</span>, <span class="number">3</span></span><br><span class="line">a &amp;= b</span><br><span class="line">fmt.Printf(<span class="string">"a&amp;=b %d\n"</span>, a)</span><br><span class="line">a, b = <span class="number">8</span>, <span class="number">3</span></span><br><span class="line">a |= b</span><br><span class="line">fmt.Printf(<span class="string">"a|=b %d\n"</span>, a)</span><br><span class="line">a, b = <span class="number">8</span>, <span class="number">3</span></span><br><span class="line">a ^= b</span><br><span class="line">fmt.Printf(<span class="string">"a^=b %d\n"</span>, a)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>补码</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>按按取反</span><br><span class="line"><span class="number">2.</span>末位加<span class="number">1</span></span><br><span class="line"></span><br><span class="line">最高位为<span class="number">0</span>是正数</span><br><span class="line">最高位为<span class="number">1</span>是负数</span><br></pre></td></tr></table></figure><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/%E6%88%AA%E5%B1%8F2022-12-13%2019.27.14.png" alt="截屏2022-12-13 19.27.14"></p><h2 id="变量、常量、字面量"><a href="#变量、常量、字面量" class="headerlink" title="变量、常量、字面量"></a>变量、常量、字面量</h2><h3 id="变量类型"><a href="#变量类型" class="headerlink" title="变量类型"></a>变量类型</h3><table><thead><tr><th align="center">类型</th><th align="center">go变量类型</th><th align="center">fmt输出</th></tr></thead><tbody><tr><td align="center">整型</td><td align="center">int int8 int16 int32 int64 uint uint8 uint16 uint32 uint64</td><td align="center">%d %b %x</td></tr><tr><td align="center">浮点型</td><td align="center">float32 float64</td><td align="center">%f %e %g</td></tr><tr><td align="center">布尔型</td><td align="center">bool</td><td align="center">%t</td></tr><tr><td align="center">指针</td><td align="center">uintptr</td><td align="center">%p</td></tr><tr><td align="center">引用</td><td align="center">map slice channel</td><td align="center">%v</td></tr><tr><td align="center">字节</td><td align="center">byte</td><td align="center">%c</td></tr><tr><td align="center">任意字符</td><td align="center">rune</td><td align="center">%c</td></tr><tr><td align="center">字符串</td><td align="center">string</td><td align="center">%s</td></tr><tr><td align="center">错误</td><td align="center">error</td><td align="center">%v</td></tr></tbody></table><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> = <span class="keyword">int64</span></span><br><span class="line"><span class="keyword">uint</span>比<span class="keyword">int</span>的可用大小*<span class="number">2</span>（<span class="keyword">int</span>需要有<span class="number">1</span>位表示正负）</span><br></pre></td></tr></table></figure><h3 id="变量声明"><a href="#变量声明" class="headerlink" title="变量声明"></a>变量声明</h3><p>Go语言变量必须先声明再使用，所谓使用指读取或修改。<br>标题声明</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name <span class="keyword">string</span> </span><br><span class="line"><span class="keyword">var</span> age <span class="keyword">int</span> </span><br><span class="line"><span class="keyword">var</span> isOk <span class="keyword">bool</span></span><br></pre></td></tr></table></figure><p>批量声明</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ( </span><br><span class="line">name <span class="keyword">string</span> </span><br><span class="line">age <span class="keyword">int</span> </span><br><span class="line">isOk <span class="keyword">bool</span> </span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="变量初始化"><a href="#变量初始化" class="headerlink" title="变量初始化"></a>变量初始化</h3><p>如果声明后未显式初始化，数值型初始化0，字符串初始化为空字符串，布尔型初始化为false，引用类型、函数、指针、接口初始化为nil。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a <span class="keyword">string</span>=<span class="string">"china"</span>  <span class="comment">//初始化一个变量</span></span><br><span class="line"><span class="keyword">var</span> a=<span class="string">"china"</span>  <span class="comment">//类型推断为string</span></span><br><span class="line"><span class="keyword">var</span> a,b <span class="keyword">int</span>=<span class="number">3</span>,<span class="number">7</span>  <span class="comment">//初始化多个变量</span></span><br><span class="line"><span class="keyword">var</span> a,b=<span class="string">"china"</span>,<span class="number">7</span>  <span class="comment">//初始化多个变量，每个变量都单独地执行类型推断</span></span><br></pre></td></tr></table></figure><p>函数内部的变量(非全局变量)可以通过:=声明并初始化。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a:=<span class="number">3</span></span><br></pre></td></tr></table></figure><p>下划线表示匿名变量。匿名变量不占命名空间，不会分配内存，因此可以重复使用。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_=<span class="number">2</span>+<span class="number">4</span></span><br></pre></td></tr></table></figure><h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><p>常量在定义时必须赋值，且程序运行期间其值不能改变。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> PI <span class="keyword">float32</span>=<span class="number">3.14</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span>(</span><br><span class="line">    PI=<span class="number">3.14</span></span><br><span class="line">    E=<span class="number">2.71</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span>(</span><br><span class="line">    a=<span class="number">100</span></span><br><span class="line">    b<span class="comment">//100，跟上一行的值相同</span></span><br><span class="line">    c<span class="comment">//100，跟上一行的值相同</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>iota</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span>(</span><br><span class="line">    a=<span class="literal">iota</span><span class="comment">//0</span></span><br><span class="line">    b<span class="comment">//1</span></span><br><span class="line">    c<span class="comment">//2</span></span><br><span class="line">    d<span class="comment">//3</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span>(</span><br><span class="line">    a=<span class="literal">iota</span> <span class="comment">//0</span></span><br><span class="line">    b<span class="comment">//1</span></span><br><span class="line">    _<span class="comment">//2</span></span><br><span class="line">    d<span class="comment">//3</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span>(</span><br><span class="line">    a=<span class="literal">iota</span> <span class="comment">//0</span></span><br><span class="line">    b=<span class="number">30</span>    </span><br><span class="line">    c=<span class="literal">iota</span> <span class="comment">//2</span></span><br><span class="line">    d<span class="comment">//3</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span>(</span><br><span class="line">    _=<span class="literal">iota</span><span class="comment">// iota =0</span></span><br><span class="line">    KB=<span class="number">1</span>&lt;&lt;(<span class="number">10</span>* <span class="literal">iota</span>) <span class="comment">// iota =1</span></span><br><span class="line">    MB=<span class="number">1</span>&lt;&lt;(<span class="number">10</span>* <span class="literal">iota</span>) <span class="comment">// iota =2</span></span><br><span class="line">    GB=<span class="number">1</span>&lt;&lt;(<span class="number">10</span>* <span class="literal">iota</span>) <span class="comment">// iota =3</span></span><br><span class="line">    TB=<span class="number">1</span>&lt;&lt;(<span class="number">10</span>* <span class="literal">iota</span>) <span class="comment">// iota =4</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span>(</span><br><span class="line">    a,b=<span class="literal">iota</span>+<span class="number">1</span>, <span class="literal">iota</span>+<span class="number">2</span><span class="comment">//1,2  iota =0</span></span><br><span class="line">     c,d<span class="comment">//2,3  iota =1</span></span><br><span class="line">     e,f<span class="comment">//3,4  iota =2</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="字面量"><a href="#字面量" class="headerlink" title="字面量"></a>字面量</h3><p>字面量–没有出现变量名，直接出现了值。基础类型的字面量相当于是常量。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fmt.Printf(<span class="string">"%t\n"</span>, <span class="number">04</span> == <span class="number">4.00</span>) <span class="comment">//用到了整型字面量和浮点型字面量</span></span><br><span class="line">fmt.Printf(<span class="string">"%v\n"</span>, <span class="number">.4i</span>) <span class="comment">//虚数字面量 0.4i</span></span><br><span class="line">fmt.Printf(<span class="string">"%t\n"</span>, <span class="string">'\u4f17'</span> == <span class="string">'众'</span>) <span class="comment">//Unicode和rune字面量</span></span><br><span class="line">fmt.Printf(<span class="string">"Hello\nWorld\n!\n"</span>) <span class="comment">//字符串字面量</span></span><br></pre></td></tr></table></figure><h2 id="变量作用域"><a href="#变量作用域" class="headerlink" title="变量作用域"></a>变量作用域</h2><p>&#8195;&#8195;对于全局变量，如果以大写字母开头，所有地方都可以访问，跨package访问时需要带上package名称；如果以小写字母开头，则本package内都可以访问。<br>&#8195;&#8195;函数内部的局部变量，仅本函数内可以访问。{}可以固定一个作用域。内部声明的变量可以跟外部声明的变量有冲突，以内部的为准–就近原则。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> (</span><br><span class="line">    A=<span class="number">3</span><span class="comment">//所有地方都可以访问</span></span><br><span class="line">    b=<span class="number">4</span><span class="comment">//本package内可以访问</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">foo</span><span class="params">()</span></span>&#123;</span><br><span class="line">    b:=<span class="number">5</span>  <span class="comment">//本函数内可以访问</span></span><br><span class="line">    &#123;</span><br><span class="line">        b:=<span class="number">6</span>  <span class="comment">//本作用域内可以访问</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="注释与godoc"><a href="#注释与godoc" class="headerlink" title="注释与godoc"></a>注释与godoc</h2><h3 id="注释的形式"><a href="#注释的形式" class="headerlink" title="注释的形式"></a>注释的形式</h3><ul><li>单行注释，以//打头。</li><li>多行注释有2种形式：<ol><li>连续多行以//打头，注意多行注释之间不能出现空行。</li><li>在段前使用/*，段尾使用*/。</li></ol></li><li>注释行前加缩进即可写go代码。</li><li>注释中给定的关键词。NOTE: 引人注意，TODO: 将来需要优化，Deprecated: 变量或函数强烈建议不要再使用。</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Add 2个整数相加</span></span><br><span class="line"><span class="comment">//返回和。</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//<span class="doctag">NOTE:</span> 注释可以有多行，但中间不能出现空行（仅有//不算空行）。</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Add</span><span class="params">(a, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Sub 函数使用示例：</span></span><br><span class="line"><span class="comment">  for i:=0;i&lt;3;i++&#123;</span></span><br><span class="line"><span class="comment">  Sub(i+1, i)</span></span><br><span class="line"><span class="comment">  &#125;</span></span><br><span class="line"><span class="comment">看到了吗？只需要行前缩进，注释里就可以写go代码，是不是很简单。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Sub</span><span class="params">(a, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> a - b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//<span class="doctag">TODO:</span> Prod 该函数不能并发调用，需要优化</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Prod</span><span class="params">(a, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> a * b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Deprecated: Div 不要再调用了</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Div</span><span class="params">(a, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> a / b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注释的位置"><a href="#注释的位置" class="headerlink" title="注释的位置"></a>注释的位置</h3><p>针对行的注释在行上方或右侧。函数的上方在func xxx()上方。结构体的注释在type xxx struct上方。包注释在package xxx的上方。一个包只需要在一个地方写包注释，通常会专门写一个doc.go，里面只有一行package xxx和关于包的注释。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// FormatBool, FormatFloat, FormatInt, and FormatUint convert values to strings:</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//s := strconv.FormatBool(true)</span></span><br><span class="line"><span class="comment">//s := strconv.FormatFloat(3.1415, 'E', -1, 64)</span></span><br><span class="line"><span class="comment">//s := strconv.FormatInt(-42, 16)</span></span><br><span class="line"><span class="comment">//s := strconv.FormatUint(42, 16)</span></span><br><span class="line"><span class="keyword">package</span> fmt</span><br></pre></td></tr></table></figure><h3 id="go-doc"><a href="#go-doc" class="headerlink" title="go doc"></a>go doc</h3><p>go doc是go自带的命令。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go doc entrance_class/util</span><br></pre></td></tr></table></figure><p>上述命令查看entrance_class/util包的注释。</p><h3 id="godoc"><a href="#godoc" class="headerlink" title="godoc"></a>godoc</h3><p>godoc是第三方工具，可以为项目代码导出网页版的注释文档。安装godoc命令如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">go get -u golang.org/x/tools/cmd/godoc</span><br><span class="line">go install golang.org/x/tools/cmd/godoc@latest</span><br></pre></td></tr></table></figure><p>启动http服务：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">godoc -http=:6060</span><br></pre></td></tr></table></figure><p>用浏览器访问<a href="http://127.0.0.1:6060" target="_blank" rel="noopener">http://127.0.0.1:6060</a> ，可以查看go标准库的文档。 </p>]]></content>
    
    <summary type="html">
    
      2007年，Google的几位大牛正在用C++开发一些比较繁琐但是核心的工作，主要是分布式集群，大牛觉得很闹心。此时C++委员会来他们公司做技术演讲，说C++将要添加35个新特性，大牛心里飘过一万个CNM，“C++特性还不够多吗”。于是Rob Pike说要不自己搞个简单一点的语言...
    
    </summary>
    
    
      <category term="Golang" scheme="http://yoursite.com/categories/Golang/"/>
    
    
      <category term="Golang基础" scheme="http://yoursite.com/tags/Golang%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>[初识Go语言]</title>
    <link href="http://yoursite.com/2021/04/21/%E5%88%9D%E8%AF%86Go%E8%AF%AD%E8%A8%80/"/>
    <id>http://yoursite.com/2021/04/21/%E5%88%9D%E8%AF%86Go%E8%AF%AD%E8%A8%80/</id>
    <published>2021-04-21T12:29:10.000Z</published>
    <updated>2021-04-21T13:11:11.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="初识Go语言"><a href="#初识Go语言" class="headerlink" title="初识Go语言"></a>初识Go语言</h1><h2 id="Go语言发展历史"><a href="#Go语言发展历史" class="headerlink" title="Go语言发展历史"></a>Go语言发展历史</h2><h3 id="阵容豪华的创使人团队"><a href="#阵容豪华的创使人团队" class="headerlink" title="阵容豪华的创使人团队"></a>阵容豪华的创使人团队</h3><p><strong>Ken Thompson</strong></p><ul><li>1966年：加入了贝尔实验室，在参与 Multics （多路信息计算）开发期间，创造出了B语言，并用一个月的时间用B语言开发了全新的操作系统UNICS，后来改名为我们所熟悉的UNIX 操作系统。</li><li>1971年：和丹尼斯·利奇（Dennis Ritchie）一起共同发明了C语言。</li><li>1973年：和丹尼斯·利奇（Dennis Ritchie）使用C语言重写了UNIX，并安装于PDP-11的机器之上。</li><li>1983年：美国计算机协会将图灵奖授予汤普森。</li><li>2000年：离开贝尔实验室，已退休的汤普森成为了一名飞行员。</li><li>2006年：加入Google工作。</li><li>2007年：64岁的高龄，与Rob Pike和Robert Griesemer主导了Go语言的开发。</li></ul><p><strong>Rob Pike</strong></p><ul><li>Go语言项目总负责人。</li><li>贝尔实验室Unix团队成员，参与的项目包括Plan 9，Inferno操作系统和Limbo编程语言。</li><li>UTF-8字符集规范唯二的发明人之一（另一位是Ken Thompson）。</li><li>《UNIX环境编程》和《程序设计实践》这两本书的作者之一。</li><li>第22届莫斯科夏季奥运会射箭项目的银牌得主。</li><li>业余天文学家，设计的珈玛射线望远镜差点被 NASA 用在航天飞机上。</li><li>他的媳妇Renee French 就是 Go 语言吉祥物的设计人。</li></ul><p><strong>Robert Griesemer</strong></p><ul><li>参与V8 JavaScript引擎的开发。</li><li>参与Java HotSpot虚拟机的研发。</li></ul><h3 id="起源"><a href="#起源" class="headerlink" title="起源"></a>起源</h3><p>&#8195;&#8195;2007年，Google的几位大牛正在用C++开发一些比较繁琐但是核心的工作，主要是分布式集群，大牛觉得很闹心。此时C++委员会来他们公司做技术演讲，说C++将要添加35个新特性，大牛心里飘过一万个CNM，“C++特性还不够多吗”。于是Rob Pike说要不自己搞个简单一点的语言吧，首先名字得简单好记，大腿一拍就叫“go”。<br>&#8195;&#8195;把事情搞复杂很容易，把事情搞简单才更深刻。</p><h3 id="发展"><a href="#发展" class="headerlink" title="发展"></a>发展</h3><ul><li>2007年9月21日，开始雏形设计。</li><li>2009年10月30日，Rob Pike宣布了Go语言的存在。</li><li>2009年11月10日，以完全开源的方式公布了Linux和Mac OSX上的版本，11月22日公布了Windows版本。</li><li>2010年1月8日，当选2009年年度语言。</li><li>2010年5月，谷歌投入使用。</li><li>2011年4月，谷歌开始抽调员工全职开发Go语言，并于5月宣布Google APP Engine支持Go语言。</li></ul><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/tiobe_index_for_go.png" alt="tiobe_index_for_go"></p><p>参考网站<a href="https://www.test.tiobe.com/tiobe-index/go。" target="_blank" rel="noopener">https://www.test.tiobe.com/tiobe-index/go。</a> </p><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/git_hut_pull_request_for_go1.png" alt="avatar"><br><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/git_hut_pull_request_for_go2.png" alt="avatar">  </p><p>参考网站<a href="https://madnight.github.io/githut/#/pull_requests。" target="_blank" rel="noopener">https://madnight.github.io/githut/#/pull_requests。</a></p><h3 id="现状"><a href="#现状" class="headerlink" title="现状"></a>现状</h3><p>&#8195;&#8195;从世界范围看，Go语言在中国的发展势头最猛，且远超第二名。在很多互联网大厂Go已成为主要开发语言。  </p><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/chinese_company_use_go.png" alt="avatar"></p><p>&#8195;&#8195;不论大小公司，对Go人才需求紧迫，薪酬很高。  </p><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/go_position.png" alt="avatar"></p><h2 id="Go语言的优劣"><a href="#Go语言的优劣" class="headerlink" title="Go语言的优劣"></a>Go语言的优劣</h2><p><strong>优势</strong></p><ul><li>语法简单，易于学习。类C的语法，同时比C/C++简洁和干净。</li><li>自带GC，方便使用。</li><li>快速编译，高效执行。</li><li>简单的依赖管理。</li><li>并发编程，轻松驾驭。</li><li>静态类型，同时有一些动态语言的特征(var声明)。</li><li>标准类库，规范统一。<br><strong>劣势</strong></li><li>不支持动态加载代码。</li><li>发展时间短，生态不及Java、C++庞大，但是够用。 </li></ul><h2 id="Go语言的应用场景"><a href="#Go语言的应用场景" class="headerlink" title="Go语言的应用场景"></a>Go语言的应用场景</h2><h3 id="应用场景总览"><a href="#应用场景总览" class="headerlink" title="应用场景总览"></a>应用场景总览</h3><ul><li>巨型中央服务器领域。</li><li>高性能分布式领域。</li><li>游戏服务端开发。</li><li>复杂事件处理。</li><li>对实时性要求很高的软件开发。</li><li>可以在Intel和ARM处理器上运行，因此也可以在安卓上运行。</li></ul><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/application_of_go.png" alt="avatar"></p><h3 id="go微服务开发"><a href="#go微服务开发" class="headerlink" title="go微服务开发"></a>go微服务开发</h3><ul><li>零依赖，让我们可以最小化我们的镜像,节省存储与拉取镜像带宽。</li><li>Runtime使用更小的内存，对比Java的JVM。</li><li>更好的并行能力，当你真的需求更多CPU的时候。</li><li>更高的性能，对比解释性语言，在处理数据已经并发方面优势明显。</li><li>简单，学习成本低，内部人员可以转入Go阵营。</li><li>使用Go能更接近云原生生态，比如docker，k8s, habor都是用Go开发的。 </li></ul><h2 id="开发环境搭建"><a href="#开发环境搭建" class="headerlink" title="开发环境搭建"></a>开发环境搭建</h2><ol><li>下载。到<a href="https://studygolang.com/dl上下载最新的Go稳定版本。" target="_blank" rel="noopener">https://studygolang.com/dl上下载最新的Go稳定版本。</a></li><li>安装。对于Windows和macOS用户，直接双击即可安装，留意一下安装路径。对于Linux用户，直接解压安装包即可，比如你打算把go安装到/usr/local目录下，则使用命令<br>tar zxvf goxxx.tar.gz –C /usr/local。这样go标准库及相关的可执行文件就安装到了/usr/local/go目录下，在后续的步骤中会把/usr/local/go赋给GOROOT环境变量。  </li><li>准确GOPATH。在任意目录下创建一个空目录，将来用于存放go语言第三方库文件。比如你打算使用/data/go_path这个目录，则在Linux下使用命令mkdir -p /data/go_path。在GOPATH目录建3个子目录：src、bin、pkg。  </li><li>配置环境变量。把第2步和第3步生成的目录分别赋给GOROOT和GOPATH环境变量，对于Linux和Mac用户在~/.bashrc文件中追加以下几行</li><li>GOPROXY的设置参考：<a href="https://goproxy.io/zh/" target="_blank" rel="noopener">https://goproxy.io/zh/</a></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">export GOROOT=/usr/local/go</span><br><span class="line">export GOPATH=/Users/Amor/go_path</span><br><span class="line">export PATH=$PATH:$GOROOT/bin::$GOPATH/bin</span><br><span class="line"></span><br><span class="line">source ~/.bashrc </span><br><span class="line"></span><br><span class="line">注意：apple M1在~/.zshrc下写入</span><br></pre></td></tr></table></figure><p>PATH环境变量下的可执行文件在任意目录下都可以直接访问。<br>对于Windows用户，编辑用户环境变量，新增GOROOT和GOPATH，把GOROOT/bin和GOPATH/bin添加到Path里。如下图<br><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/%E8%AE%BE%E7%BD%AEgo%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F1.png" alt="avatar">  </p><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/%E8%AE%BE%E7%BD%AEgo%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F2.png" alt="avatar">   </p><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/%E8%AE%BE%E7%BD%AEgo%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F3.png" alt="avatar">  </p><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/%E8%AE%BE%E7%BD%AEgo%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F4.png" alt="avatar">  </p><p>在Windows下还可以通过go env -w来设置环境变量，比如设置GOPROXY用以下命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go env -w GOPROXY=https://goproxy.cn,direct</span><br></pre></td></tr></table></figure><p>有很多网站支持在线编辑Go代码并查看运行结果，这里列举一些<br><a href="https://play.golang.wiki" target="_blank" rel="noopener">https://play.golang.wiki</a><br><a href="https://play.studygolang.com" target="_blank" rel="noopener">https://play.studygolang.com</a><br><a href="https://goplay.space" target="_blank" rel="noopener">https://goplay.space</a><br><a href="https://goplay.tools" target="_blank" rel="noopener">https://goplay.tools</a><br>集成开发环境推荐GoLand和VSCode，后者是免费的。VSCode需要额外安装支持Go语言的插件，如下图  </p><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/go_plugin_for_vscode.png" alt="avatar"></p><p>Debug工具安装</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xcode-<span class="keyword">select</span> --install</span><br></pre></td></tr></table></figure><h2 id="第一个Go程序"><a href="#第一个Go程序" class="headerlink" title="第一个Go程序"></a>第一个Go程序</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"Hello World"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>main()函数是Go程序的唯一入口，且main()函数必须位于package main中。fmt是Go标准库中的一个package，该package下有一个Println()函数用于输出字符串。Go语言会依次从以下3个目录里查找依赖包：</p><ol><li>当前工作目录</li><li>$GOPATH/pkg/mod</li><li>$GOROOT/src</li></ol><h2 id="Go命令介绍"><a href="#Go命令介绍" class="headerlink" title="Go命令介绍"></a>Go命令介绍</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">(base) zcymac:~ zcy$ go help</span><br><span class="line">Go is a tool for managing Go source code.</span><br><span class="line"></span><br><span class="line">Usage:</span><br><span class="line"></span><br><span class="line">go &lt;command&gt; [arguments]</span><br><span class="line"></span><br><span class="line">The commands are:</span><br><span class="line"></span><br><span class="line">bug         start a bug report</span><br><span class="line">build       compile packages and dependencies</span><br><span class="line">clean       remove object files and cached files</span><br><span class="line">doc         show documentation for package or symbol</span><br><span class="line">env         print Go environment information</span><br><span class="line">fix         update packages to use new APIs</span><br><span class="line">fmt         gofmt (reformat) package sources</span><br><span class="line">generate    generate Go files by processing source</span><br><span class="line">get         add dependencies to current module and install them</span><br><span class="line">install     compile and install packages and dependencies</span><br><span class="line">list        list packages or modules</span><br><span class="line">mod         module maintenance</span><br><span class="line">run         compile and run Go program</span><br><span class="line">test        test packages</span><br><span class="line">tool        run specified go tool</span><br><span class="line">version     print Go version</span><br><span class="line">vet         report likely mistakes in packages</span><br><span class="line"></span><br><span class="line">Use "go help &lt;command&gt;" for more information about a command.</span><br><span class="line"></span><br><span class="line">Additional help topics:</span><br><span class="line"></span><br><span class="line">buildconstraint build constraints</span><br><span class="line">buildmode       build modes</span><br><span class="line">c               calling between Go and C</span><br><span class="line">cache           build and test caching</span><br><span class="line">environment     environment variables</span><br><span class="line">filetype        file types</span><br><span class="line">go.mod          the go.mod file</span><br><span class="line">gopath          GOPATH environment variable</span><br><span class="line">gopath-get      legacy GOPATH go get</span><br><span class="line">goproxy         module proxy protocol</span><br><span class="line">importpath      import path syntax</span><br><span class="line">modules         modules, module versions, and more</span><br><span class="line">module-get      module-aware go get</span><br><span class="line">module-auth     module authentication using go.sum</span><br><span class="line">packages        package lists and patterns</span><br><span class="line">private         configuration for downloading non-public code</span><br><span class="line">testflag        testing flags</span><br><span class="line">testfunc        testing functions</span><br><span class="line">vcs             controlling version control with GOVCS</span><br><span class="line"></span><br><span class="line">Use "go help &lt;topic&gt;" for more information about that topic.</span><br></pre></td></tr></table></figure><p>go help: 查看帮助文档。  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go help build</span><br></pre></td></tr></table></figure><p>go build: 对源代码和依赖的文件进行打包，生成可执行文件。  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go build -o my_first_go_exe entrance_class/demo.go</span><br></pre></td></tr></table></figure><p>go install: 编译并安装包或依赖，安装到$GOPATH/bin下。  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go install entrance_class/demo.go</span><br></pre></td></tr></table></figure><p>go get: 把依赖库添加到当前module中，如果本机之前从未下载过则先下载。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go get github.com/tinylib/msgp</span><br></pre></td></tr></table></figure><p>以上命令会在$GOPATH/pkg/mod目录下会生成github.com/tinylib/msgp目录。  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go install github.com/tinylib/msgp@latest</span><br></pre></td></tr></table></figure><p>以上命令会在$GOPATH/bin下生成msgp可执行文件。<br>go mod init module_name<br>初始化一个Go项目。<br>go mod tidy通过扫描当前项目中的所有代码来添加未被记录的依赖至go.mod文件或从go.mod文件中删除不再被使用的依赖。<br>go run: 编译并运行程序。<br>go test: 执行测试代码。<br>go tool: 执行go自带的工具。go tool pprof对cpu、内存和协程进行监控；go tool trace跟踪协程的执行过程。<br>go vet: 检查代码中的静态错误。<br>go fmt: 对代码文件进行格式化，如果用了IDE这个命令就不需要了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go fmt entrance_class/demo.go</span><br></pre></td></tr></table></figure><p>go doc: 查看go标准库或第三方库的帮助文档。 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">go doc fmt</span><br><span class="line">go doc gonum.org/v1/gonum/stat</span><br></pre></td></tr></table></figure><p>go version: 查看go版本号。<br>go env: 查看go环境信息。   </p>]]></content>
    
    <summary type="html">
    
      2007年，Google的几位大牛正在用C++开发一些比较繁琐但是核心的工作，主要是分布式集群，大牛觉得很闹心。此时C++委员会来他们公司做技术演讲，说C++将要添加35个新特性，大牛心里飘过一万个CNM，“C++特性还不够多吗”。于是Rob Pike说要不自己搞个简单一点的语言...
    
    </summary>
    
    
      <category term="Golang" scheme="http://yoursite.com/categories/Golang/"/>
    
    
      <category term="Golang基础" scheme="http://yoursite.com/tags/Golang%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>[Golang基础]</title>
    <link href="http://yoursite.com/2021/04/01/Golang%E5%9F%BA%E7%A1%80/"/>
    <id>http://yoursite.com/2021/04/01/Golang%E5%9F%BA%E7%A1%80/</id>
    <published>2021-04-01T12:29:20.000Z</published>
    <updated>2021-04-01T13:11:21.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://rogerxs80.github.io/2021/04/21/%E5%88%9D%E8%AF%86Go%E8%AF%AD%E8%A8%80/" target="_blank" rel="noopener">1.初识Go语言</a></p><p><a href="https://rogerxs80.github.io/2021/04/21/Go%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/" target="_blank" rel="noopener">2.Go基础语法</a></p><p><a href="https://rogerxs80.github.io/2021/04/21/Go%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/" target="_blank" rel="noopener">3.Go数据类型</a></p><p><a href="https://rogerxs80.github.io/2021/04/21/Go%E7%BB%93%E6%9E%84%E4%BD%93/" target="_blank" rel="noopener">4.Go结构体</a></p><p><a href="https://rogerxs80.github.io/2021/04/22/Go%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5/" target="_blank" rel="noopener">5.Go流程控制语句</a></p><p><a href="https://rogerxs80.github.io/2021/04/23/Go%E5%87%BD%E6%95%B0/" target="_blank" rel="noopener">6.Go函数</a></p>]]></content>
    
    <summary type="html">
    
      2007年，Google的几位大牛正在用C++开发一些比较繁琐但是核心的工作，主要是分布式集群，大牛觉得很闹心。此时C++委员会来他们公司做技术演讲，说C++将要添加35个新特性，大牛心里飘过一万个CNM，“C++特性还不够多吗”。于是Rob Pike说要不自己搞个简单一点的语言...
    
    </summary>
    
    
      <category term="Golang" scheme="http://yoursite.com/categories/Golang/"/>
    
    
      <category term="Golang基础" scheme="http://yoursite.com/tags/Golang%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>[Redis系列]</title>
    <link href="http://yoursite.com/2020/11/01/Redis%E7%B3%BB%E5%88%97/"/>
    <id>http://yoursite.com/2020/11/01/Redis%E7%B3%BB%E5%88%97/</id>
    <published>2020-10-31T23:23:33.000Z</published>
    <updated>2020-10-31T23:24:31.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Redis系列"><a href="#Redis系列" class="headerlink" title="Redis系列"></a>Redis系列</h2><p><a href="https://rogerxs80.github.io/2020/06/21/Redis%E5%88%9D%E8%AF%86/" target="_blank" rel="noopener">1.Redis介绍安装配置</a></p><p><a href="https://rogerxs80.github.io/2020/06/21/API%E7%9A%84%E4%BD%BF%E7%94%A8/" target="_blank" rel="noopener">2.API的使用</a></p><p><a href="https://rogerxs80.github.io/2020/06/21/%E9%AB%98%E7%BA%A7%E7%94%A8%E6%B3%95/" target="_blank" rel="noopener">3.客户端使用</a></p><p><a href="https://rogerxs80.github.io/2020/06/21/%E9%AB%98%E7%BA%A7%E7%94%A8%E6%B3%95/" target="_blank" rel="noopener">4.高级用法</a></p><p><a href="https://rogerxs80.github.io/2020/06/21/%E6%8C%81%E4%B9%85%E5%8C%96/" target="_blank" rel="noopener">5.持久化</a></p><p><a href="https://rogerxs80.github.io/2020/06/21/%E4%BD%BF%E7%94%A8%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/" target="_blank" rel="noopener">6.使用常见问题</a></p><p><a href="https://rogerxs80.github.io/2020/06/21/%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E5%8E%9F%E7%90%86%E4%B8%8E%E4%BC%98%E5%8C%96/" target="_blank" rel="noopener">7.主从复制原理与优化</a></p><p><a href="https://rogerxs80.github.io/2020/06/21/Sentinel/" target="_blank" rel="noopener">8.Sentinel</a></p><p><a href="https://rogerxs80.github.io/2020/06/21/%E7%BC%93%E5%AD%98%E7%9A%84%E4%BD%BF%E7%94%A8%E5%92%8C%E4%BC%98%E5%8C%96/" target="_blank" rel="noopener">9.缓存的使用和优化</a></p>]]></content>
    
    <summary type="html">
    
      Redis（Remote Dictionary Server )，即远程字典服务，是一个开源的使用ANSI C语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value数据...
    
    </summary>
    
    
      <category term="数据库" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="Redis" scheme="http://yoursite.com/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>[MySOL数据库]</title>
    <link href="http://yoursite.com/2020/10/01/MySOL%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <id>http://yoursite.com/2020/10/01/MySOL%E6%95%B0%E6%8D%AE%E5%BA%93/</id>
    <published>2020-10-01T04:13:25.000Z</published>
    <updated>2020-10-01T07:34:29.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="MySQL数据库"><a href="#MySQL数据库" class="headerlink" title="MySQL数据库"></a>MySQL数据库</h2><p><a href="https://rogerxs80.github.io/2020/03/09/%E5%88%9D%E8%AF%86%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%8Emysql%E5%AE%89%E8%A3%85/" target="_blank" rel="noopener">1.mysql安装</a></p><p><a href="https://rogerxs80.github.io/2020/03/09/%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/" target="_blank" rel="noopener">2.存储引擎与数据类型</a></p><p><a href="https://rogerxs80.github.io/2020/03/10/%E7%BA%A6%E6%9D%9F%E6%9D%A1%E4%BB%B6%E4%B8%8E%E8%A1%A8%E5%85%B3%E7%B3%BB/" target="_blank" rel="noopener">3.约束条件与表关系</a></p><p><a href="https://rogerxs80.github.io/2020/03/11/%E8%81%9A%E5%90%88%E5%87%BD%E6%95%B0/" target="_blank" rel="noopener">4.聚合函数</a></p><p><a href="https://rogerxs80.github.io/2020/03/12/navicat%E5%AE%89%E8%A3%85%E4%B8%8Epymysql%E6%A8%A1%E5%9D%97/" target="_blank" rel="noopener">5.navicat安装与pymysql模块</a></p><p><a href="https://rogerxs80.github.io/2020/03/13/%E4%BA%8B%E5%8A%A1%E4%B8%8E%E5%85%B6%E4%BB%96%E4%BB%8B%E7%BB%8D/" target="_blank" rel="noopener">6.事务与开发模型</a></p>]]></content>
    
    <summary type="html">
    
      ySQL是一种开放源代码的关系型数据库管理系统（RDBMS），使用最常用的数据库管理语言--结构化查询语言（SQL）进行数据库管理。 MySQL是开放源代码的，因此任何人都可以在General Public License的许可下下载并根据个性化的需要对...
    
    </summary>
    
    
      <category term="数据库" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="MySQL" scheme="http://yoursite.com/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>[前端开发]</title>
    <link href="http://yoursite.com/2020/05/01/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    <id>http://yoursite.com/2020/05/01/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/</id>
    <published>2020-05-01T03:15:10.000Z</published>
    <updated>2020-05-01T05:20:09.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前端开发"><a href="#前端开发" class="headerlink" title="前端开发"></a>前端开发</h1><p>前端开发是创建Web页面或app等前端界面呈现给用户的过程，通过HTML，CSS及JavaScript以及衍生出来的各种技术、框架、解决方案，来实现互联网产品的用户界面交互 。它从网页制作演变而来，名称上有很明显的时代特征。在互联网的演化进程中，网页制作是Web1.0时代的产物，早期网站主要内容都是静态，以图片和文字为主，用户使用网站的行为也以浏览为主。随着互联网技术的发展和HTML5、CSS3的应用，现代网页更加美观，交互效果显著，功能更加强大。</p><p><a href="https://rogerxs80.github.io/2019/07/12/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8%E4%B8%8E%E6%A0%87%E7%AD%BE%E4%BD%BF%E7%94%A8/" target="_blank" rel="noopener">1.前端入门与标签使用</a></p><p><a href="https://rogerxs80.github.io/2019/07/12/CSS%E9%80%89%E6%8B%A9%E5%99%A8%E4%B8%8E%E5%B1%9E%E6%80%A7/" target="_blank" rel="noopener">2.CSS选择器与属性</a></p><p><a href="https://rogerxs80.github.io/2019/07/12/JavaScript%E5%85%A5%E9%97%A8/" target="_blank" rel="noopener">3.JavaScript入门</a></p><p><a href="https://rogerxs80.github.io/2019/07/12/JQuery%E5%85%A5%E9%97%A8/" target="_blank" rel="noopener">4.JQury入门</a></p><p><a href="https://rogerxs80.github.io/2019/07/13/Bootstrap%E6%A1%86%E6%9E%B6/" target="_blank" rel="noopener">5.BootStrap框架</a></p>]]></content>
    
    <summary type="html">
    
      前端开发是创建Web页面或app等前端界面呈现给用户的过程，通过HTML，CSS及JavaScript以及衍生出来的各种技术、框架、解决方案，来实现互联网产品的...
    
    </summary>
    
    
      <category term="前端开发" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="前端入门" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>[云计算架构]</title>
    <link href="http://yoursite.com/2019/06/10/%E4%BA%91%E8%AE%A1%E7%AE%97%E6%9E%B6%E6%9E%84/"/>
    <id>http://yoursite.com/2019/06/10/%E4%BA%91%E8%AE%A1%E7%AE%97%E6%9E%B6%E6%9E%84/</id>
    <published>2019-06-10T14:06:40.000Z</published>
    <updated>2019-06-21T13:11:50.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://rogerxs80.github.io/2019/05/20/Shell%E7%BC%96%E7%A8%8B/" target="_blank" rel="noopener">1.Docker容器</a></p><p><a href="https://rogerxs80.github.io/2019/02/20/%E8%99%9A%E6%8B%9F%E5%8C%96%E7%8E%AF%E5%A2%83/" target="_blank" rel="noopener">2.Kubernetes容器编排</a></p>]]></content>
    
    <summary type="html">
    
      云计算（cloud computing）是分布式计算的一种，指的是通过网络“云”将巨大的数据计算处理程序分解成无数个小程序，然后，通过多部服务器组成的系统进行处理和分析这些小程序得到结果并返回给用户。云计算早期，简单地说，就是简单的分布式计算，解决任务分发，并进行计算结果...
    
    </summary>
    
    
      <category term="SRE" scheme="http://yoursite.com/categories/SRE/"/>
    
    
      <category term="Kubernets" scheme="http://yoursite.com/tags/Kubernets/"/>
    
  </entry>
  
  <entry>
    <title>[Zabbix监控]</title>
    <link href="http://yoursite.com/2019/05/24/Zabbix%E7%9B%91%E6%8E%A7/"/>
    <id>http://yoursite.com/2019/05/24/Zabbix%E7%9B%91%E6%8E%A7/</id>
    <published>2019-05-24T08:37:44.000Z</published>
    <updated>2019-05-25T07:39:24.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Zabbix基础入门"><a href="#Zabbix基础入门" class="headerlink" title="Zabbix基础入门"></a>Zabbix基础入门</h1><h2 id="zabbix-快速入门安装"><a href="#zabbix-快速入门安装" class="headerlink" title="zabbix 快速入门安装"></a>zabbix 快速入门安装</h2><p><strong>C/S架构的服务</strong></p><ul><li><strong>服务端</strong>：zabbix-server</li><li><strong>客户端</strong>：zabbix-agent</li></ul><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/%E6%88%AA%E5%B1%8F2023-03-26%2013.35.41.png" alt="截屏2023-03-26 13.35.41"></p><p><strong>zabbix官网：</strong><a href="https://www.zabbix.com/" target="_blank" rel="noopener">https://www.zabbix.com/</a></p><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20230323184827951.png" alt="image-20230323184827951"></p><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20230323184836414.png" alt="image-20230323184836414"></p><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20230323184918502.png" alt="image-20230323184918502"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.下载zabbix的yum源</span></span><br><span class="line">[root@m01 ~]<span class="comment"># rpm -Uvh https://repo.zabbix.com/zabbix/5.0/rhel/7/x86_64/zabbix-release-5.0-1.el7.noarch.rpm</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.安装zabbix的服务端和客户端</span></span><br><span class="line">[root@m01 ~]<span class="comment"># yum install -y zabbix-server-mysql zabbix-agent</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.下载zabbix前端web页面的yum源</span></span><br><span class="line">[root@m01 ~]<span class="comment"># yum install centos-release-scl -y</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.打开zabbix的yum源中的前端仓库</span></span><br><span class="line">[root@m01 ~]<span class="comment"># vim /etc/yum.repos.d/zabbix.repo </span></span><br><span class="line">[zabbix-frontend]</span><br><span class="line">name=Zabbix Official Repository frontend - <span class="variable">$basearch</span></span><br><span class="line">baseurl=http://repo.zabbix.com/zabbix/5.0/rhel/7/<span class="variable">$basearch</span>/frontend</span><br><span class="line">enabled=0    //  改为  1</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-ZABBIX-A14FE591</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5.安装zabbix前端web页面</span></span><br><span class="line">[root@m01 ~]<span class="comment"># yum install zabbix-web-mysql-scl zabbix-nginx-conf-scl -y</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 6.初始化数据库</span></span><br><span class="line"><span class="comment">## 1）创建zabbix数据库</span></span><br><span class="line">mysql&gt; create database zabbix character <span class="built_in">set</span> utf8 collate utf8_bin;</span><br><span class="line"></span><br><span class="line"><span class="comment">## 2）创建zabbix用户</span></span><br><span class="line">mysql&gt; grant all on zabbix.* to zabbix@<span class="string">'172.16.1.%'</span> identified by <span class="string">'123'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">## 3）将zabbix的建表语句SQL文件发送到主库上</span></span><br><span class="line">[root@m01 ~]<span class="comment"># scp /usr/share/doc/zabbix-server-mysql-5.0.26/create.sql.gz  172.16.1.53:/tmp</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 4）主库导入SQL文件</span></span><br><span class="line">[root@db01 ~]<span class="comment"># zcat /tmp/create.sql.gz |mysql -uzabbix -p123 -h172.16.1.53 zabbix</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 7.修改zabbix服务端配置文件</span></span><br><span class="line">[root@m01 ~]<span class="comment"># vim /etc/zabbix/zabbix_server.conf</span></span><br><span class="line">DBHost=172.16.1.53</span><br><span class="line">DBUser=zabbix</span><br><span class="line">DBName=zabbix</span><br><span class="line">DBPassword=123</span><br><span class="line"></span><br><span class="line"><span class="comment"># 8.修改zabbix的nginx配置文件</span></span><br><span class="line">[root@m01 ~]<span class="comment"># vim /etc/opt/rh/rh-nginx116/nginx/conf.d/zabbix.conf</span></span><br><span class="line">server &#123;</span><br><span class="line">        listen          80;</span><br><span class="line">        server_name     zabbix.zls.com;</span><br><span class="line">        ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 9.修改zabbix的php配置文件</span></span><br><span class="line">[root@m01 ~]<span class="comment"># vim /etc/opt/rh/rh-php72/php-fpm.d/zabbix.conf </span></span><br><span class="line">[zabbix]</span><br><span class="line">user = nginx</span><br><span class="line">group = nginx</span><br><span class="line">listen.acl_users = nginx</span><br><span class="line">php_value[date.timezone] = Asia/Shanghai</span><br><span class="line"></span><br><span class="line"><span class="comment"># 9.1授权</span></span><br><span class="line">[root@m01 ~]<span class="comment"># chown -R root.nginx /var/opt/rh/rh-php72/lib/php/session/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 10.启动</span></span><br><span class="line">[root@m01 ~]<span class="comment"># systemctl restart zabbix-server zabbix-agent rh-nginx116-nginx rh-php72-php-fpm</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 11.查看端口</span></span><br><span class="line">[root@m01 ~]<span class="comment"># netstat -lntup|grep 10050</span></span><br><span class="line">tcp        0      0 0.0.0.0:10050           0.0.0.0:*               LISTEN      102137/zabbix_agent </span><br><span class="line">tcp6       0      0 :::10050                :::*                    LISTEN      102137/zabbix_agent </span><br><span class="line">[root@m01 ~]<span class="comment"># netstat -lntup|grep 10051</span></span><br><span class="line">tcp        0      0 0.0.0.0:10051           0.0.0.0:*               LISTEN      102333/zabbix_serve </span><br><span class="line">tcp6       0      0 :::10051                :::*                    LISTEN      102333/zabbix_serve </span><br><span class="line"></span><br><span class="line"><span class="comment"># 12.授权</span></span><br><span class="line">[root@m01 ~]<span class="comment"># chown -R nginx.nginx /etc/zabbix/web</span></span><br></pre></td></tr></table></figure><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20230323184933463.png" alt="image-20230323184933463"></p><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20230323184942928.png" alt="image-20230323184942928"></p><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/%E6%88%AA%E5%B1%8F2023-03-23%2018.50.56.png" alt="截屏2023-03-23 18.50.56"></p><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20230323185011860.png" alt="image-20230323185011860"></p><h2 id="汉化zabbix"><a href="#汉化zabbix" class="headerlink" title="汉化zabbix"></a>汉化zabbix</h2><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20230323185123575.png" alt="image-20230323185123575"></p><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20230323185136620.png" alt="image-20230323185136620"></p><h3 id="解决汉字无法显示问题"><a href="#解决汉字无法显示问题" class="headerlink" title="解决汉字无法显示问题"></a>解决汉字无法显示问题</h3><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20230323185145541.png" alt="image-20230323185145541"></p><p>在windows中找到中文字体</p><p>C:\Windows\Fonts</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入zabbix字体路径</span></span><br><span class="line">[root@m01 ~]<span class="comment"># cd /usr/share/zabbix/assets/fonts/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 备份zabbix默认字体</span></span><br><span class="line">[root@m01 fonts]<span class="comment"># mv graphfont.ttf graphfont.ttf.bak</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 上传电脑中的字体</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 改名</span></span><br><span class="line">[root@m01 fonts]<span class="comment"># mv FZSTK.TTF graphfont.ttf</span></span><br></pre></td></tr></table></figure><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20230323185202755.png" alt="image-20230323185202755"></p><h1 id="Zabbix监控入门"><a href="#Zabbix监控入门" class="headerlink" title="Zabbix监控入门"></a>Zabbix监控入门</h1><h2 id="为什么做监控"><a href="#为什么做监控" class="headerlink" title="为什么做监控"></a>为什么做监控</h2><p><strong>企业中：</strong></p><p>1.系统的监控:实际上是对系统不间断的实时监控<br>2.实时反馈系统当前状态:我们监控某个硬件、或者某个系统，都是需要能实时看到当前系统的状态，是正常、异常、或者故障。<br>3.保证服务可靠性安全性:我们监控的目的就是要保证系统、服务、业务正常运行<br>4.保证业务持续稳定运行:如果我们的监控做得很完善，即使出现故障，能第一时间接收到故障报警，在第一时间处理解决，从而保证业务持续性的稳定运行。（往往，第一时间知道业务宕机的都是用户）</p><h2 id="监控软件"><a href="#监控软件" class="headerlink" title="监控软件"></a>监控软件</h2><ul><li>CACTI  网络监控<ul><li>官网：<a href="https://www.cacti.net/" target="_blank" rel="noopener">https://www.cacti.net/</a></li></ul></li></ul><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20230323185307403.png" alt="image-20230323185307403"></p><ul><li>Nagios<ul><li>官网：<a href="https://www.nagios.com/" target="_blank" rel="noopener">https://www.nagios.com/</a></li></ul></li></ul><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20230323185319585.png" alt="image-20230323185319585"></p><ul><li>Zabbix  分布式监控系统</li></ul><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20230323185327755.png" alt="image-20230323185327755"></p><ul><li>open-falcon<ul><li>官网：<a href="http://open-falcon.org/" target="_blank" rel="noopener">http://open-falcon.org/</a></li></ul></li></ul><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20230323185403017.png" alt="image-20230323185403017"></p><ul><li><p>普罗米修斯 promtheus</p><ul><li>官网：<a href="https://prometheus.io/" target="_blank" rel="noopener">https://prometheus.io/</a></li></ul></li><li><p>天兔</p><ul><li>官网：<a href="https://www.lepus.cc/docs/lepus-v5/install/" target="_blank" rel="noopener">https://www.lepus.cc/docs/lepus-v5/install/</a></li></ul></li></ul><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20230323185438919.png" alt="image-20230323185438919"></p><h2 id="面试问题"><a href="#面试问题" class="headerlink" title="面试问题"></a>面试问题</h2><p>面试官：你们公司监控是如何做的？</p><p>监控软件我们使用的是zabbix，我们监控在不同的维度</p><ul><li><p>硬件层面   Dell R710 R720 R730</p><ul><li><p>如果不使用dell的idrac那就使用zabbix的<code>IPMI</code>接口监控硬件</p><p>1）CPU温度，<br>2）风扇转速，<br>3）磁盘是否损坏，<br>4）CMOS电池电量<br>5）内存是否损坏</p><p>…..</p></li><li><p>云主机，不需要说硬件层，一般云主机都自带，硬件监控</p></li></ul></li><li><p>系统层面</p><ul><li>内存<ul><li>内存使用率</li><li>缓冲区</li><li>缓存区</li><li>堆</li><li>栈</li></ul></li><li>CPU<ul><li>CPU使用率</li><li>CPU的负载</li><li>CPU核心数线程</li></ul></li><li>磁盘<ul><li>磁盘使用率</li><li>磁盘大小</li><li>磁盘IO</li></ul></li></ul></li><li><p>网络层面</p><ul><li>网卡接口</li><li>网卡流量</li><li>交换机</li><li>路由器</li></ul></li><li><p>应用层面</p><ul><li>nginx<ul><li>进程</li><li>端口</li><li>网站访问</li></ul></li><li>MySQL<ul><li>进程</li><li>端口</li><li>主从复制</li><li>SQL读写速率</li><li>是否可以登录</li><li>InnoDB</li><li>缓存</li><li>表空间</li><li>慢查询</li></ul></li><li>tomcat<ul><li>JMX<ul><li>老年代</li><li>新生代</li><li>永久代</li></ul></li><li>垃圾回收</li><li>full-gc</li><li>进程</li><li>端口</li><li>网站是否可以访问</li></ul></li><li>redis<ul><li>进程</li><li>端口</li><li>连接状态</li><li>主从复制  info</li><li>集群状态</li><li>key，缓存<ul><li>缓存穿透</li><li>缓存击穿</li><li>缓存雪崩</li></ul></li></ul></li><li>NFS、GFS（集群式的NFS）、Ceph、FastDFS<ul><li>进程</li><li>挂载情况</li><li>数据同步</li></ul></li><li>PHP<ul><li>进程</li><li>端口（socket）</li><li>网站访问情况</li><li>php info</li><li>….</li></ul></li></ul></li><li><p>业务层面</p><ul><li>代码</li><li>接口</li></ul></li></ul><h2 id="单机监控命令"><a href="#单机监控命令" class="headerlink" title="单机监控命令"></a>单机监控命令</h2><h3 id="CPU监控命令"><a href="#CPU监控命令" class="headerlink" title="CPU监控命令"></a>CPU监控命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 负载</span></span><br><span class="line">[root@zabbix-server ~]<span class="comment"># w</span></span><br><span class="line">18:50:38 up  2:03,  3 users,  load average: 0.01, 0.06, 0.06</span><br><span class="line"></span><br><span class="line"><span class="comment">## CPU</span></span><br><span class="line">[root@zabbix-server ~]<span class="comment"># top -n 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 美化的top</span></span><br><span class="line">[root@zabbix-server ~]<span class="comment"># yum install -y htop</span></span><br><span class="line">[root@zabbix-server ~]<span class="comment"># htop</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## glances</span></span><br><span class="line">[root@zabbix-server ~]<span class="comment"># yum install -y glances</span></span><br><span class="line">[root@zabbix-server ~]<span class="comment"># glances</span></span><br></pre></td></tr></table></figure><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20230323185534641.png" alt="image-20230323185534641"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">[root@zabbix-server ~]<span class="comment"># uptime</span></span><br><span class="line"> 18:59:32 up  2:12,  3 users,  load average: 0.00, 0.06, 0.06</span><br><span class="line"> </span><br><span class="line">[root@zabbix-server ~]<span class="comment"># lscpu</span></span><br><span class="line">Architecture:          x86_64</span><br><span class="line">CPU op-mode(s):        32-bit, 64-bit</span><br><span class="line">Byte Order:            Little Endian</span><br><span class="line">CPU(s):                1</span><br><span class="line">On-line CPU(s) list:   0</span><br><span class="line">Thread(s) per core:    1</span><br><span class="line">Core(s) per socket:    1</span><br><span class="line">Socket(s):             1</span><br><span class="line">NUMA node(s):          1</span><br><span class="line">Vendor ID:             GenuineIntel</span><br><span class="line">CPU family:            6</span><br><span class="line">Model:                 158</span><br><span class="line">Model name:            Intel(R) Core(TM) i5-7400 CPU @ 3.00GHz</span><br><span class="line">Stepping:              9</span><br><span class="line">CPU MHz:               3000.001</span><br><span class="line">CPU max MHz:           0.0000</span><br><span class="line">CPU min MHz:           0.0000</span><br><span class="line">BogoMIPS:              6000.00</span><br><span class="line">Hypervisor vendor:     VMware</span><br><span class="line">Virtualization <span class="built_in">type</span>:   full</span><br><span class="line">L1d cache:             32K</span><br><span class="line">L1i cache:             32K</span><br><span class="line">L2 cache:              256K</span><br><span class="line">L3 cache:              6144K</span><br><span class="line">NUMA node0 CPU(s):     0</span><br><span class="line">Flags:                 fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts mmx fxsr sse sse2 ss syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts nopl xtopology tsc_reliable nonstop_tsc aperfmperf eagerfpu pni pclmulqdq ssse3 fma cx16 pcid sse4_1 sse4_2 x2apic movbe popcnt tsc_deadline_timer aes xsave avx f16c rdrand hypervisor lahf_lm abm 3dnowprefetch epb fsgsbase tsc_adjust bmi1 avx2 smep bmi2 invpcid rdseed adx smap xsaveopt xsavec xgetbv1 dtherm ida arat pln pts hwp hwp_notify hwp_act_window hwp_epp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@zabbix-server ~]<span class="comment"># cat /proc/cpuinfo </span></span><br><span class="line">processor: 0</span><br><span class="line">vendor_id: GenuineIntel</span><br><span class="line">cpu family: 6</span><br><span class="line">model: 158</span><br><span class="line">model name: Intel(R) Core(TM) i5-7400 CPU @ 3.00GHz</span><br><span class="line">stepping: 9</span><br><span class="line">microcode: 0x8e</span><br><span class="line">cpu MHz: 3000.001</span><br><span class="line">cache size: 6144 KB</span><br><span class="line">physical id: 0</span><br><span class="line">siblings: 1</span><br><span class="line">core id: 0</span><br><span class="line">cpu cores: 1</span><br><span class="line">apicid: 0</span><br><span class="line">initial apicid: 0</span><br><span class="line">fpu: yes</span><br><span class="line">fpu_exception: yes</span><br><span class="line">cpuid level: 22</span><br><span class="line">wp: yes</span><br><span class="line">flags: fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts mmx fxsr sse sse2 ss syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts nopl xtopology tsc_reliable nonstop_tsc aperfmperf eagerfpu pni pclmulqdq ssse3 fma cx16 pcid sse4_1 sse4_2 x2apic movbe popcnt tsc_deadline_timer aes xsave avx f16c rdrand hypervisor lahf_lm abm 3dnowprefetch epb fsgsbase tsc_adjust bmi1 avx2 smep bmi2 invpcid rdseed adx smap xsaveopt xsavec xgetbv1 dtherm ida arat pln pts hwp hwp_notify hwp_act_window hwp_epp</span><br><span class="line">bogomips: 6000.00</span><br><span class="line">clflush size: 64</span><br><span class="line">cache_alignment: 64</span><br><span class="line">address sizes: 42 bits physical, 48 bits virtual</span><br><span class="line">power management:</span><br></pre></td></tr></table></figure><p>不管用什么命令监控，查看CPU，我们都必须了解，系统的用户态和内和态。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">%Cpu(s):  0.0 us,  0.0 sy,  0.0 ni,100.0 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</span><br><span class="line"></span><br><span class="line">us: 用户态     跟用户的操作有关35%</span><br><span class="line">sy: 内和态     跟内核的处理有关65%</span><br><span class="line">id: CPU空闲</span><br><span class="line"></span><br><span class="line">当我们执行一个命令的时候，很快能出来结果，但是有多少人知道，这个很快，他都占用了哪些时间呢？</span><br><span class="line">[root@zabbix-server ~]<span class="comment"># time ls</span></span><br><span class="line">anaconda-ks.cfg                      zabbix-server-mysql-4.0.0-2.el7.x86_64.rpm</span><br><span class="line">zabbix-agent-4.0.0-2.el7.x86_64.rpm  zabbix-web-mysql-4.0.0-2.el7.noarch.rpm</span><br><span class="line"></span><br><span class="line">real0m0.032s</span><br><span class="line">user0m0.002s</span><br><span class="line">sys0m0.005s</span><br></pre></td></tr></table></figure><h3 id="监控内存"><a href="#监控内存" class="headerlink" title="监控内存"></a>监控内存</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">1）free</span><br><span class="line">[root@zabbix-server ~]<span class="comment"># free -g</span></span><br><span class="line">              total        used        free      shared  buff/cache   available</span><br><span class="line">Mem:              0           0           0           0           0           0</span><br><span class="line">Swap:             0           0           0</span><br><span class="line">[root@zabbix-server ~]<span class="comment"># free -m</span></span><br><span class="line">              total        used        free      shared  buff/cache   available</span><br><span class="line">Mem:            972         234         158           8         579         528</span><br><span class="line">Swap:          1023           0        1023</span><br><span class="line">[root@zabbix-server ~]<span class="comment"># free -h</span></span><br><span class="line">              total        used        free      shared  buff/cache   available</span><br><span class="line">Mem:           972M        234M        158M        8.4M        579M        528M</span><br><span class="line">Swap:          1.0G        264K        1.0G</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2）top</span><br><span class="line">3）glances</span><br><span class="line">4）htop</span><br><span class="line"></span><br><span class="line">5）lsmem</span><br><span class="line">[root@zabbix-server ~]<span class="comment"># lsmem</span></span><br><span class="line">RANGE                                 SIZE  STATE REMOVABLE BLOCK</span><br><span class="line">0x0000000000000000-0x000000003fffffff   1G online        no   0-7</span><br><span class="line"></span><br><span class="line">Memory block size:       128M</span><br><span class="line">Total online memory:       1G</span><br><span class="line">Total offline memory:      0B</span><br><span class="line"></span><br><span class="line">6）cat /proc/meminfo</span><br><span class="line">[root@zabbix-server ~]<span class="comment"># cat /proc/meminfo</span></span><br><span class="line">MemTotal:         995896 kB</span><br><span class="line">MemFree:          159908 kB</span><br><span class="line">MemAvailable:     541596 kB</span><br><span class="line">Buffers:             116 kB</span><br><span class="line">Cached:           489248 kB</span><br><span class="line">SwapCached:            4 kB</span><br><span class="line">Active:           418768 kB</span><br><span class="line">Inactive:         227568 kB</span><br><span class="line">Active(anon):     137052 kB</span><br><span class="line">Inactive(anon):    28476 kB</span><br><span class="line">Active(file):     281716 kB</span><br><span class="line">Inactive(file):   199092 kB</span><br><span class="line">Unevictable:           0 kB</span><br><span class="line">Mlocked:               0 kB</span><br><span class="line">SwapTotal:       1048572 kB</span><br><span class="line">SwapFree:        1048308 kB</span><br><span class="line">Dirty:                20 kB</span><br><span class="line">Writeback:             0 kB</span><br><span class="line">AnonPages:        157000 kB</span><br><span class="line">Mapped:            33420 kB</span><br><span class="line">Shmem:              8556 kB</span><br><span class="line">Slab:             107040 kB</span><br><span class="line">SReclaimable:      57164 kB</span><br><span class="line">SUnreclaim:        49876 kB</span><br><span class="line">KernelStack:        4752 kB</span><br><span class="line">PageTables:        22648 kB</span><br><span class="line">NFS_Unstable:          0 kB</span><br><span class="line">Bounce:                0 kB</span><br><span class="line">WritebackTmp:          0 kB</span><br><span class="line">CommitLimit:     1546520 kB</span><br><span class="line">Committed_AS:     928904 kB</span><br><span class="line">VmallocTotal:   34359738367 kB</span><br><span class="line">VmallocUsed:      177304 kB</span><br><span class="line">VmallocChunk:   34359310332 kB</span><br><span class="line">HardwareCorrupted:     0 kB</span><br><span class="line">AnonHugePages:     51200 kB</span><br><span class="line">CmaTotal:              0 kB</span><br><span class="line">CmaFree:               0 kB</span><br><span class="line">HugePages_Total:       0</span><br><span class="line">HugePages_Free:        0</span><br><span class="line">HugePages_Rsvd:        0</span><br><span class="line">HugePages_Surp:        0</span><br><span class="line">Hugepagesize:       2048 kB</span><br><span class="line">DirectMap4k:       57216 kB</span><br><span class="line">DirectMap2M:      991232 kB</span><br><span class="line">DirectMap1G:           0 kB</span><br></pre></td></tr></table></figure><p>如何查看单个进程占用内存？</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#进程占用内存公式</span></span><br><span class="line">pmem = VmRSS / MemTotal * 100</span><br><span class="line">process mem = 虚拟内存 / 总内存 * 100</span><br></pre></td></tr></table></figure><h3 id="python脚本获取进程使用内存情况"><a href="#python脚本获取进程使用内存情况" class="headerlink" title="python脚本获取进程使用内存情况"></a>python脚本获取进程使用内存情况</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">[root@zabbix-server ~]<span class="comment"># cat mem.py </span></span><br><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># _*_ coding:UTF-8 _*_</span></span><br><span class="line"><span class="comment"># 收集程序所占用的物理内存大小，占所有物理内存的比例</span></span><br><span class="line"><span class="comment"># Python: 2.7.6</span></span><br><span class="line"></span><br><span class="line">import sys</span><br><span class="line">import os</span><br><span class="line">from subprocess import Popen,PIPE</span><br><span class="line"></span><br><span class="line">def get_pid(program):</span><br><span class="line">    <span class="string">'获取目标程序的PID列表'</span></span><br><span class="line">    p = Popen([<span class="string">'pidof'</span>,program],stdout=PIPE,stderr=PIPE)</span><br><span class="line">    pids,stderrput = p.communicate()</span><br><span class="line"><span class="comment">#     pids = p.stdout.read()  #这种方法也是可以的</span></span><br><span class="line"><span class="comment">#     这里也可以对stderrput来进行判断</span></span><br><span class="line">    <span class="keyword">if</span> pids:</span><br><span class="line">        <span class="built_in">return</span> pids.split()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        raise ValueError</span><br><span class="line"></span><br><span class="line">def mem_calc(pids):</span><br><span class="line">    <span class="string">'计算PIDs占用的内存大小'</span></span><br><span class="line">    mem_total = 0</span><br><span class="line">    <span class="keyword">for</span> pid <span class="keyword">in</span> pids:</span><br><span class="line">        os.chdir(<span class="string">'/proc/%s'</span> % pid)</span><br><span class="line">        with open(<span class="string">'status'</span>) as fd:</span><br><span class="line">            <span class="keyword">for</span> line <span class="keyword">in</span> fd:</span><br><span class="line">                <span class="keyword">if</span> line.startswith(<span class="string">'VmRSS'</span>):</span><br><span class="line">                    mem = line.strip().split()[1]</span><br><span class="line">                    mem_total += int(mem)</span><br><span class="line">                    <span class="built_in">break</span></span><br><span class="line">    <span class="built_in">return</span> mem_total</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def mem_percent(mem):</span><br><span class="line">    <span class="string">'计算程序内存占用物理内存的百分比'</span></span><br><span class="line">    with open(<span class="string">'/proc/meminfo'</span>) as fd:</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> fd:</span><br><span class="line">            <span class="keyword">if</span> line.startswith(<span class="string">'MemTotal'</span>):</span><br><span class="line">                total = line.strip().split()[1]</span><br><span class="line">        percent = (<span class="built_in">float</span>(mem)/int(total)) * 100</span><br><span class="line">    <span class="built_in">return</span> percent</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    try:</span><br><span class="line">        program = sys.argv[1]</span><br><span class="line">        pids = get_pid(program)</span><br><span class="line">    except IndexError as e:</span><br><span class="line">        sys.exit(<span class="string">'%s need a Program name '</span> % __file__)</span><br><span class="line">    except ValueError as e:</span><br><span class="line">        sys.exit(<span class="string">'%s not a Process Name or not Start'</span> % program )</span><br><span class="line">    mem_total = mem_calc(pids)</span><br><span class="line">    percent = mem_percent(mem_total)</span><br><span class="line">    <span class="built_in">return</span> program,mem_total,percent</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    program,mem_total,mem_percent=main()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'进程名称:%s\n物理内存为:%s\n百分比为:%.2f%%'</span>% (program,mem_total,mem_percent))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@zabbix-server ~]<span class="comment"># python mem.py  zabbix_agentd</span></span><br><span class="line">进程名称:zabbix_agentd</span><br><span class="line">物理内存为:12332</span><br><span class="line">百分比为:1.24%</span><br><span class="line"></span><br><span class="line">[root@zabbix-server ~]<span class="comment"># python mem.py  zabbix_server</span></span><br><span class="line">进程名称:zabbix_server</span><br><span class="line">物理内存为:115300</span><br><span class="line">百分比为:11.58%</span><br><span class="line"></span><br><span class="line">[root@zabbix-server ~]<span class="comment"># python mem.py  httpd</span></span><br><span class="line">进程名称:httpd</span><br><span class="line">物理内存为:212148</span><br><span class="line">百分比为:21.30%</span><br></pre></td></tr></table></figure><h3 id="监控磁盘命令"><a href="#监控磁盘命令" class="headerlink" title="监控磁盘命令"></a>监控磁盘命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">1）df</span><br><span class="line">[root@zabbix-server ~]<span class="comment"># df -i</span></span><br><span class="line">Filesystem      Inodes IUsed   IFree IUse% Mounted on</span><br><span class="line">/dev/sda3      9704960 38522 9666438    1% /</span><br><span class="line">devtmpfs        121762   377  121385    1% /dev</span><br><span class="line">tmpfs           124487     1  124486    1% /dev/shm</span><br><span class="line">tmpfs           124487   746  123741    1% /run</span><br><span class="line">tmpfs           124487    16  124471    1% /sys/fs/cgroup</span><br><span class="line">/dev/sda1       256000   326  255674    1% /boot</span><br><span class="line">tmpfs           124487     1  124486    1% /run/user/0</span><br><span class="line">[root@zabbix-server ~]<span class="comment"># df -h</span></span><br><span class="line">Filesystem      Size  Used Avail Use% Mounted on</span><br><span class="line">/dev/sda3        19G  1.6G   17G   9% /</span><br><span class="line">devtmpfs        476M     0  476M   0% /dev</span><br><span class="line">tmpfs           487M     0  487M   0% /dev/shm</span><br><span class="line">tmpfs           487M  7.8M  479M   2% /run</span><br><span class="line">tmpfs           487M     0  487M   0% /sys/fs/cgroup</span><br><span class="line">/dev/sda1       497M  120M  378M  25% /boot</span><br><span class="line">tmpfs            98M     0   98M   0% /run/user/0</span><br><span class="line">[root@zabbix-server ~]<span class="comment"># df -ih</span></span><br><span class="line">Filesystem     Inodes IUsed IFree IUse% Mounted on</span><br><span class="line">/dev/sda3        9.3M   38K  9.3M    1% /</span><br><span class="line">devtmpfs         119K   377  119K    1% /dev</span><br><span class="line">tmpfs            122K     1  122K    1% /dev/shm</span><br><span class="line">tmpfs            122K   746  121K    1% /run</span><br><span class="line">tmpfs            122K    16  122K    1% /sys/fs/cgroup</span><br><span class="line">/dev/sda1        250K   326  250K    1% /boot</span><br><span class="line">tmpfs            122K     1  122K    1% /run/user/0</span><br><span class="line"></span><br><span class="line">2）iotop查看进程对磁盘的使用情况，IO吞吐量情况</span><br><span class="line">[root@zabbix-server ~]<span class="comment"># iotop </span></span><br><span class="line">Total DISK READ :0.00 B/s | Total DISK WRITE :       0.00 B/s</span><br><span class="line">Actual DISK READ:0.00 B/s | Actual DISK WRITE:       0.00 B/s</span><br><span class="line"></span><br><span class="line">3）查看磁盘的IO吞吐量</span><br><span class="line">-d：指定多久出一次结果 单位是秒</span><br><span class="line">-m：指定出几次结果</span><br><span class="line">[root@zabbix-server ~]<span class="comment"># iostat -dm 1 10</span></span><br><span class="line">Linux 3.10.0-957.el7.x86_64 (zabbix-server) 08/23/2022 _x86_64_(1 CPU)</span><br><span class="line"></span><br><span class="line">Device:            tps    MB_read/s    MB_wrtn/s    MB_read    MB_wrtn</span><br><span class="line">scd0              0.00         0.00         0.00          1          0</span><br><span class="line">sda               2.17         0.03         0.07        284        607</span><br><span class="line"></span><br><span class="line">[root@zabbix-server ~]<span class="comment"># yum install -y dstat</span></span><br><span class="line">[root@zabbix-server ~]<span class="comment"># dstat -cdngy</span></span><br></pre></td></tr></table></figure><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20230323185555823.png" alt="image-20230323185555823"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">5）glances</span><br><span class="line">6）lsblk</span><br><span class="line">[root@zabbix-server ~]<span class="comment"># lsblk </span></span><br><span class="line">NAME   MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT</span><br><span class="line">sda      8:0    0   20G  0 disk </span><br><span class="line">├─sda1   8:1    0  500M  0 part /boot</span><br><span class="line">├─sda2   8:2    0    1G  0 part [SWAP]</span><br><span class="line">└─sda3   8:3    0 18.5G  0 part /</span><br><span class="line">sr0     11:0    1  4.3G  0 rom  </span><br><span class="line"></span><br><span class="line"><span class="comment">## 磁盘开机自动挂载</span></span><br><span class="line">[root@zabbix-server ~]<span class="comment"># vim /etc/fstab </span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 创建一块新磁盘</span></span><br><span class="line">[root@zabbix-server ~]<span class="comment"># dd &lt; /dev/zero &gt; /disk1 bs=1024K count=5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 格式化</span></span><br><span class="line">[root@zabbix-server ~]<span class="comment"># mkfs.ext4 -i 5120 /disk1 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 挂载</span></span><br><span class="line">[root@zabbix-server ~]<span class="comment"># mount -t ext4 -o loop  /disk1  /opt/cipan1/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 查看</span></span><br><span class="line">[root@zabbix-server ~]<span class="comment"># df -h</span></span><br><span class="line">/dev/loop0      3.9M   53K  3.5M   2% /opt/cipan1</span><br><span class="line"></span><br><span class="line">[root@zabbix-server ~]<span class="comment"># vim /etc/fstab</span></span><br><span class="line">UUID=b2503fb9-fc5e-47fc-b86a-d171a5fbf689 /opt/cipan1             ext4    defaults        0 0</span><br><span class="line"></span><br><span class="line"><span class="comment">## 查看一块磁盘的UUID</span></span><br><span class="line">[root@zabbix-server ~]<span class="comment"># blkid /dev/sda1</span></span><br><span class="line">/dev/sda1: UUID=<span class="string">"33bce62e-082b-4647-8b36-9335a0cc6600"</span> TYPE=<span class="string">"xfs"</span> </span><br><span class="line">[root@zabbix-server ~]<span class="comment"># blkid /dev/sda3</span></span><br><span class="line">/dev/sda3: UUID=<span class="string">"9e1a4ad0-69bf-4b9e-9aa0-4820ec625963"</span> TYPE=<span class="string">"xfs"</span> </span><br><span class="line">[root@zabbix-server ~]<span class="comment"># blkid /dev/loop0</span></span><br><span class="line">/dev/loop0: UUID=<span class="string">"b2503fb9-fc5e-47fc-b86a-d171a5fbf689"</span> TYPE=<span class="string">"ext4"</span></span><br></pre></td></tr></table></figure><h3 id="网络监控命令"><a href="#网络监控命令" class="headerlink" title="网络监控命令"></a>网络监控命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1）glances</span><br><span class="line">NETWORK     Rx/s   Tx/s </span><br><span class="line">eth0        592b   15Kb</span><br><span class="line">eth1        17Kb   13Kb </span><br><span class="line">lo            0b     0b </span><br><span class="line"></span><br><span class="line">2）iftop</span><br><span class="line">[root@zabbix-server ~]<span class="comment"># iftop</span></span><br></pre></td></tr></table></figure><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20230323185753652.png" alt="image-20230323185753652"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">3）nethogs</span><br><span class="line">[root@zabbix-server ~]<span class="comment"># yum install -y nethogs</span></span><br><span class="line">[root@zabbix-server ~]<span class="comment"># nethogs</span></span><br><span class="line"></span><br><span class="line">4) ifconfig</span><br><span class="line">[root@zabbix-server ~]<span class="comment"># watch ifconfig</span></span><br><span class="line"></span><br><span class="line">5）路由</span><br><span class="line">[root@zabbix-server ~]<span class="comment"># route -n</span></span><br><span class="line">Kernel IP routing table</span><br><span class="line">Destination     Gateway         Genmask         Flags Metric Ref    Use Iface</span><br><span class="line">0.0.0.0         10.0.0.2        0.0.0.0         UG    0      0        0 eth0</span><br><span class="line">10.0.0.0        0.0.0.0         255.255.255.0   U     0      0        0 eth0</span><br><span class="line">169.254.0.0     0.0.0.0         255.255.0.0     U     1002   0        0 eth0</span><br><span class="line">169.254.0.0     0.0.0.0         255.255.0.0     U     1003   0        0 eth1</span><br><span class="line">172.16.1.0      0.0.0.0         255.255.255.0   U     0      0        0 eth1</span><br></pre></td></tr></table></figure><h3 id="TCP11种状态监控命令"><a href="#TCP11种状态监控命令" class="headerlink" title="TCP11种状态监控命令"></a>TCP11种状态监控命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># netstat</span></span><br><span class="line"><span class="comment"># 查看当前服务器上的所有应用TCP状态</span></span><br><span class="line">[root@zabbix-server ~]<span class="comment"># netstat -an</span></span><br><span class="line"></span><br><span class="line">[root@zabbix-server ~]<span class="comment"># netstat -an|awk '/^tcp/ &#123;print $NF&#125;'|sort|uniq -c</span></span><br><span class="line">     26 ESTABLISHED</span><br><span class="line">     11 LISTEN</span><br><span class="line">     48 TIME_WAIT</span><br><span class="line"></span><br><span class="line">[root@zabbix-server ~]<span class="comment"># netstat -an|awk '/^tcp/ &#123;++state[$NF]&#125; END &#123;for(key in state) print key," \t" ,state[key]&#125;'</span></span><br><span class="line">LISTEN   11</span><br><span class="line">ESTABLISHED   25</span><br><span class="line">FIN_WAIT2   1</span><br><span class="line">TIME_WAIT   53</span><br></pre></td></tr></table></figure><h2 id="生产场景需求"><a href="#生产场景需求" class="headerlink" title="生产场景需求"></a>生产场景需求</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#如何每1分钟监控当前系统的内存使用状态，如果可用低于100MB则发送邮件。同时打印当前还剩余多少内存</span></span><br><span class="line">1.如何获取内存的状态信息 free -m</span><br><span class="line">2.如何获取内存的可用状态 free -m|awk <span class="string">'/Mem/&#123;print $NF&#125;'</span></span><br><span class="line">3.如何进行数字的比对，高于100MB不处理，低于100MB，发送邮件。</span><br><span class="line">4.如何每分钟执行。</span><br><span class="line"></span><br><span class="line">[root@web02 ~]<span class="comment"># vim free.sh</span></span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">true</span>;<span class="keyword">do</span></span><br><span class="line">  free_av=$(free -m|awk <span class="string">'/^Mem/&#123;print $NF&#125;'</span>)</span><br><span class="line">  Hostname=$(hostname)_$(hostname -I|awk <span class="string">'&#123;print $2&#125;'</span>)</span><br><span class="line">  Date=$(date +%F)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> [ <span class="variable">$free_av</span> -lt 100 ];<span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"<span class="variable">$Date</span>: <span class="variable">$&#123;Hostname&#125;</span>,内存低于100MB，还有<span class="variable">$&#123;free_av&#125;</span>MB内存可用"</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line">      sleep 2</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">[root@web02 ~]<span class="comment"># sh free.sh</span></span><br><span class="line">2018-10-12: web02_,内存低于100MB，还有20MB内存可用</span><br><span class="line">2018-10-12: web02_,内存低于100MB，还有6MB内存可用</span><br><span class="line">2018-10-12: web02_,内存低于100MB，还有5MB内存可用</span><br></pre></td></tr></table></figure><h3 id="系统的oom"><a href="#系统的oom" class="headerlink" title="系统的oom"></a>系统的oom</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 关闭swap</span></span><br><span class="line">[root@zabbix-server ~]<span class="comment"># swapoff -a</span></span><br><span class="line">随着时间的推移，用户不断增多，服务消耗的内存越来越多，当系统内存不足的时候，可能会导致系统产生oom（out of memory）</span><br><span class="line"></span><br><span class="line">1.当系统内存不足时就会大量使用swap（虚拟内存）</span><br><span class="line">2.当系统大量使用swap的时候，系统会特别卡</span><br><span class="line">注意：有时可能内存还有剩余300M或者500M，但是swap依然被使用</span><br><span class="line"></span><br><span class="line">[root@web02 ~]<span class="comment"># dd &lt; /dev/zero &gt; /dev/null bs=2000M</span></span><br><span class="line"></span><br><span class="line">[root@web02 ~]<span class="comment"># tail -f /var/log/messages</span></span><br><span class="line">Out of memory: Kill process 29957 (dd) score 366 or sacrifice child</span><br><span class="line">Killed process 29957 (dd) total-vm:2532680kB, anon-rss:1416508kB, filers:0kB</span><br><span class="line"></span><br><span class="line">Aug 23 20:18:27 localhost kernel: Out of memory: Kill process 22208 (dd) score 599 or sacrifice child</span><br><span class="line">Aug 23 20:18:27 localhost kernel: Killed process 22208 (dd) total-vm:722512kB, anon-rss:614508kB, file-rss:0kB, shmem-rss:0kB</span><br></pre></td></tr></table></figure><h3 id="使用脚本监控nginx"><a href="#使用脚本监控nginx" class="headerlink" title="使用脚本监控nginx"></a>使用脚本监控nginx</h3><p>前面的课程中，我们学习了使用脚本+定时任务的方法自动备份并将检查结果，发到指定邮箱,那么这里，我也可以使用脚本+定时任务的方法，进行监控，并使用邮件报警</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">nginx_process=`ps -ef|grep -c [n]ginx`</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$nginx_process</span> -lt 2 ];<span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"目前nginx进程数是：<span class="variable">$nginx_process</span>"</span>|mail -s <span class="string">"完犊子nginx挂了"</span> 133411023@qq.com</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><h1 id="Zabbix自定义监控项"><a href="#Zabbix自定义监控项" class="headerlink" title="Zabbix自定义监控项"></a>Zabbix自定义监控项</h1><h2 id="快速监控一台主机"><a href="#快速监控一台主机" class="headerlink" title="快速监控一台主机"></a>快速监控一台主机</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看服务端的版本</span></span><br><span class="line">[root@m01 fonts]<span class="comment"># zabbix_server -V</span></span><br><span class="line">zabbix_server (Zabbix) 5.0.26</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装对应版本的agent客户端</span></span><br><span class="line"><span class="comment"># 1.在其他机器上，安装zabbix的yum源</span></span><br><span class="line">[root@db03 ~]<span class="comment"># rpm -Uvh https://repo.zabbix.com/zabbix/5.0/rhel/7/x86_64/zabbix-release-5.0-1.el7.noarch.rpm</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.安装客户端</span></span><br><span class="line">[root@db03 ~]<span class="comment"># yum install -y zabbix-agent-5.0.26</span></span><br><span class="line">[root@web01 ~]<span class="comment"># rpm -ivh https://mirrors.aliyun.com/zabbix/zabbix/5.0/rhel/7/x86_64/zabbix-agent-5.0.26-1.el7.x86_64.rpm</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.修改配置文件</span></span><br><span class="line">[root@web01 ~]<span class="comment"># vim /etc/zabbix/zabbix_agentd.conf</span></span><br><span class="line">Server=172.16.1.61</span><br><span class="line">ServerActive=172.16.1.61</span><br><span class="line">Hostname=web01</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.启动服务</span></span><br><span class="line">[root@web01 ~]<span class="comment"># systemctl start zabbix-agent</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 5.检查端口</span></span><br><span class="line">[root@web01 ~]<span class="comment"># netstat -lntup |grep 10050</span></span><br><span class="line">tcp        0      0 0.0.0.0:10050           0.0.0.0:*               LISTEN      7681/zabbix_agentd  </span><br><span class="line">tcp6       0      0 :::10050                :::*                    LISTEN      7681/zabbix_agentd</span><br></pre></td></tr></table></figure><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20230323190118340.png" alt="image-20230323190118340"></p><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20230323190030807.png" alt="image-20230323190030807"></p><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20230323190037922.png" alt="image-20230323190037922"></p><h3 id="添加基础模板"><a href="#添加基础模板" class="headerlink" title="添加基础模板"></a>添加基础模板</h3><p>zabbix3.x 和 zabbix4.x</p><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20230323190135411.png" alt="image-20230323190135411"></p><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20230323190145589.png" alt="image-20230323190145589"></p><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20230323190150631.png" alt="image-20230323190150631"></p><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20230323190156600.png" alt="image-20230323190156600"></p><h2 id="zabbix报错排查"><a href="#zabbix报错排查" class="headerlink" title="zabbix报错排查"></a>zabbix报错排查</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1.检查端口</span></span><br><span class="line">[root@zabbix ~]<span class="comment"># telnet 172.16.1.7 10050</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#2.服务端是否能获取到客户端的监控数据</span></span><br><span class="line">[root@zabbix ~]<span class="comment"># yum install -y zabbix-get-5.0.32</span></span><br><span class="line">-s：指定主机IP地址</span><br><span class="line">-k：指定监控项名称</span><br><span class="line">[root@zabbix ~]<span class="comment"># zabbix_get -s 172.16.1.7 -k system.swap.size[,pfree]</span></span><br><span class="line">100.000000</span><br><span class="line">[root@zabbix ~]<span class="comment"># zabbix_get -s 172.16.1.7 -k system.swap.size[,free]</span></span><br><span class="line">1073737728</span><br><span class="line"></span><br><span class="line"><span class="comment">#3.查看nginx日志</span></span><br><span class="line">[root@zabbix ~]<span class="comment"># tail -f /var/opt/rh/rh-nginx116/log/nginx/error.log</span></span><br><span class="line">[root@zabbix ~]<span class="comment"># tail -f /var/opt/rh/rh-nginx116/log/nginx/access.log</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#4.查看zabbix-server日志</span></span><br><span class="line">[root@zabbix ~]<span class="comment"># tail -f /var/log/zabbix/zabbix_server.log </span></span><br><span class="line"></span><br><span class="line"><span class="comment">#5.查看zabbix-agent日志</span></span><br><span class="line">[root@zabbix ~]<span class="comment"># tail -f /var/log/zabbix/zabbix_agentd.log</span></span><br></pre></td></tr></table></figure><h2 id="zabbix基础架构"><a href="#zabbix基础架构" class="headerlink" title="zabbix基础架构"></a>zabbix基础架构</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">zabbix-agent：获取本机上的数据（主动上交给server）</span><br><span class="line">zabbix-server：获取所有agent上的数据，并保存到数据库中  create.sql.gz</span><br><span class="line">- 1.systemctl stop zabbix-server</span><br><span class="line">- 2.drop database zabbix;</span><br><span class="line">- 3.creaete database zabbix charset utf8 collate utf8_bin;</span><br><span class="line">- 4.zcat create.sql.gz| mysql -uzabbix -p123 zabbix</span><br><span class="line">- 5.rm -f zabbix.conf.php</span><br><span class="line">- 6.http://zabbix.zls.com/setup.php   // 重新进入配置页面</span><br><span class="line">zabbix-web：页面展示，从数据库中获取数据，展示到页面上</span><br></pre></td></tr></table></figure><h2 id="自定义zabbix监控"><a href="#自定义zabbix监控" class="headerlink" title="自定义zabbix监控"></a>自定义zabbix监控</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 监控项添加流程</span></span><br><span class="line">1.创建一个模板</span><br><span class="line">2.给模板添加监控项</span><br><span class="line">3.给监控项画图</span><br><span class="line">4.给监控项添加触发器</span><br><span class="line">5.给监控项的触发器添加告警动作</span><br><span class="line">- 邮件</span><br><span class="line">- 微信</span><br><span class="line">- 钉钉</span><br></pre></td></tr></table></figure><h3 id="自定义监控项的格式"><a href="#自定义监控项的格式" class="headerlink" title="自定义监控项的格式"></a>自定义监控项的格式</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">UserParameter=监控项的key名称,获取监控项值的命令或脚本</span><br><span class="line">UserParameter=&lt;key&gt;,&lt;shell <span class="built_in">command</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取登陆用户数量</span></span><br><span class="line">UserParameter=user.count,who | wc -l</span><br><span class="line">或</span><br><span class="line">UserParameter=user.count,uptime|grep -Po <span class="string">"\d(?= user)"</span></span><br></pre></td></tr></table></figure><h3 id="添加配置文件"><a href="#添加配置文件" class="headerlink" title="添加配置文件"></a>添加配置文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.修改配置</span></span><br><span class="line">[root@web01 ~]<span class="comment"># vim /etc/zabbix/zabbix_agentd.conf</span></span><br><span class="line">UserParameter=user.count,who | wc -l</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.重启zabbix-agent</span></span><br><span class="line">[root@web01 ~]<span class="comment"># systemctl restart zabbix-agent</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.在服务端获取一下该监控项的数据</span></span><br><span class="line">[root@web01 ~]<span class="comment"># yum install -y zabbix-get</span></span><br><span class="line">[root@web01 ~]<span class="comment"># zabbix_get -s 172.16.1.31 -k user.count</span></span><br><span class="line">3</span><br></pre></td></tr></table></figure><h3 id="页面添加监控项"><a href="#页面添加监控项" class="headerlink" title="页面添加监控项"></a>页面添加监控项</h3><h4 id="自己创建一个监控模板"><a href="#自己创建一个监控模板" class="headerlink" title="自己创建一个监控模板"></a>自己创建一个监控模板</h4><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20230323191705252.png" alt="image-20230323191705252"></p><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20230323191713120.png" alt="image-20230323191713120"></p><h4 id="给模板中添加监控项"><a href="#给模板中添加监控项" class="headerlink" title="给模板中添加监控项"></a>给模板中添加监控项</h4><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20230323191753414.png" alt="image-20230323191753414"></p><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20230323191822357.png" alt="image-20230323191822357"></p><h4 id="将主机关联该模板"><a href="#将主机关联该模板" class="headerlink" title="将主机关联该模板"></a><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20230323191829985.png" alt="image-20230323191829985">将主机关联该模板</h4><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20230323191841956.png" alt="image-20230323191841956"></p><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20230323191914524.png" alt="image-20230323191914524"></p><h4 id="给监控项画图"><a href="#给监控项画图" class="headerlink" title="给监控项画图"></a>给监控项画图</h4><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20230323191849876.png" alt="image-20230323191849876"></p><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20230323191929486.png" alt="image-20230323191929486"></p><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20230323191950794.png" alt="image-20230323191950794"></p><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20230323191959992.png" alt="image-20230323191959992"></p><h4 id="查看监控数据"><a href="#查看监控数据" class="headerlink" title="查看监控数据"></a>查看监控数据</h4><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20230323192006404.png" alt="image-20230323192006404"></p><h4 id="给监控项添加触发器"><a href="#给监控项添加触发器" class="headerlink" title="给监控项添加触发器"></a>给监控项添加触发器</h4><p>常用触发器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">and       <span class="comment">#并且</span></span><br><span class="line">or        <span class="comment">#或</span></span><br><span class="line">last()    <span class="comment">#对比最后的值</span></span><br><span class="line">avg()     <span class="comment">#平均值</span></span><br><span class="line">diff()    <span class="comment">#对比上一次文件的内容</span></span><br><span class="line">nodata()  <span class="comment">#收不到数据进行报警</span></span><br><span class="line">(5m)      <span class="comment">#表示最近五分种得到值</span></span><br><span class="line">(<span class="comment">#5)      #表示最近五次得到的值</span></span><br></pre></td></tr></table></figure><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20230323192200143.png" alt="image-20230323192200143"></p><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20230323192207041.png" alt="image-20230323192207041"></p><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20230323192213415.png" alt="image-20230323192213415"></p><h3 id="优化页面告警"><a href="#优化页面告警" class="headerlink" title="优化页面告警"></a>优化页面告警</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">主机名：&#123;HOST.NAME&#125;</span><br><span class="line">IP地址：&#123;HOST.IP&#125;</span><br><span class="line">Monitor Login User Count Problem 主机名:&#123;HOST.NAME&#125; IP地址:&#123;HOST.IP&#125;</span><br></pre></td></tr></table></figure><h3 id="给监控项的触发器添加告警动作"><a href="#给监控项的触发器添加告警动作" class="headerlink" title="给监控项的触发器添加告警动作"></a>给监控项的触发器添加告警动作</h3><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20230323192304091.png" alt="image-20230323192304091"></p><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20230323192309251.png" alt="image-20230323192309251"></p><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20230323192315802.png" alt="image-20230323192315802"></p><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20230323192339056.png" alt="image-20230323192339056"></p><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20230323192346364.png" alt="image-20230323192346364"></p><h3 id="添加邮件告警（报警媒介类型：发件人和告警方式）"><a href="#添加邮件告警（报警媒介类型：发件人和告警方式）" class="headerlink" title="添加邮件告警（报警媒介类型：发件人和告警方式）"></a>添加邮件告警（报警媒介类型：发件人和告警方式）</h3><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20230323192417377.png" alt="image-20230323192417377"></p><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20230323192424927.png" alt="image-20230323192424927"></p><h3 id="配置收件人"><a href="#配置收件人" class="headerlink" title="配置收件人"></a>配置收件人</h3><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20230323192447114.png" alt="image-20230323192447114"></p><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20230323192452878.png" alt="image-20230323192452878"></p><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20230323192501724.png" alt="image-20230323192501724"></p><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20230323192534890.png" alt="image-20230323192534890"></p><h3 id="添加报警媒介"><a href="#添加报警媒介" class="headerlink" title="添加报警媒介"></a>添加报警媒介</h3><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20230323192541892.png" alt="image-20230323192541892"></p><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20230323192546666.png" alt="image-20230323192546666"></p><h3 id="告警消息添加"><a href="#告警消息添加" class="headerlink" title="告警消息添加"></a>告警消息添加</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 故障告警</span></span><br><span class="line">标题：Problem: &#123;EVENT.NAME&#125;</span><br><span class="line">内容：</span><br><span class="line">Problem started at &#123;EVENT.TIME&#125; on &#123;EVENT.DATE&#125;</span><br><span class="line">Problem name: &#123;EVENT.NAME&#125;</span><br><span class="line">Host: &#123;HOST.NAME&#125;</span><br><span class="line">Severity: &#123;EVENT.SEVERITY&#125;</span><br><span class="line"></span><br><span class="line">Original problem ID: &#123;EVENT.ID&#125;</span><br><span class="line">&#123;TRIGGER.URL&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">## 恢复告警</span></span><br><span class="line">标题：Resolved: &#123;EVENT.NAME&#125;</span><br><span class="line">内容：</span><br><span class="line">Problem has been resolved at &#123;EVENT.RECOVERY.TIME&#125; on &#123;EVENT.RECOVERY.DATE&#125;</span><br><span class="line">Problem name: &#123;EVENT.NAME&#125;</span><br><span class="line">Host: &#123;HOST.NAME&#125;</span><br><span class="line">Severity: &#123;EVENT.SEVERITY&#125;</span><br><span class="line"></span><br><span class="line">Original problem ID: &#123;EVENT.ID&#125;</span><br><span class="line">&#123;TRIGGER.URL&#125;</span><br></pre></td></tr></table></figure><p>优化告警消息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 故障告警</span></span><br><span class="line">故障&#123;TRIGGER.STATUS&#125;,服务器:&#123;HOSTNAME1&#125;发生: &#123;TRIGGER.NAME&#125;故障!</span><br><span class="line"></span><br><span class="line">告警地址:&#123;HOST.IP&#125;</span><br><span class="line"></span><br><span class="line">告警主机:&#123;HOSTNAME1&#125;</span><br><span class="line"></span><br><span class="line">告警时间:&#123;EVENT.DATE&#125; &#123;EVENT.TIME&#125;</span><br><span class="line"></span><br><span class="line">告警等级:&#123;TRIGGER.SEVERITY&#125;</span><br><span class="line"></span><br><span class="line">告警信息: &#123;TRIGGER.NAME&#125;</span><br><span class="line"></span><br><span class="line">告警项目:&#123;TRIGGER.KEY1&#125;</span><br><span class="line"></span><br><span class="line">问题详情:&#123;ITEM.NAME&#125;:&#123;ITEM.VALUE&#125;</span><br><span class="line"></span><br><span class="line">当前状态:&#123;TRIGGER.STATUS&#125;:&#123;ITEM.VALUE1&#125;</span><br><span class="line"></span><br><span class="line">事件ID:&#123;EVENT.ID&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">## 恢复告警</span></span><br><span class="line">恢复&#123;TRIGGER.STATUS&#125;, 服务器:&#123;HOSTNAME1&#125;: &#123;TRIGGER.NAME&#125;已恢复!</span><br><span class="line"></span><br><span class="line">告警地址:&#123;HOST.IP&#125;</span><br><span class="line"></span><br><span class="line">告警主机:&#123;HOSTNAME1&#125;</span><br><span class="line"></span><br><span class="line">告警时间:&#123;EVENT.DATE&#125; &#123;EVENT.TIME&#125;</span><br><span class="line"></span><br><span class="line">告警等级:&#123;TRIGGER.SEVERITY&#125;</span><br><span class="line"></span><br><span class="line">告警信息: &#123;TRIGGER.NAME&#125;</span><br><span class="line"></span><br><span class="line">告警项目:&#123;TRIGGER.KEY1&#125;</span><br><span class="line"></span><br><span class="line">问题详情:&#123;ITEM.NAME&#125;:&#123;ITEM.VALUE&#125;</span><br><span class="line"></span><br><span class="line">当前状态:&#123;TRIGGER.STATUS&#125;:&#123;ITEM.VALUE1&#125;</span><br><span class="line"></span><br><span class="line">事件ID:&#123;EVENT.ID&#125;</span><br></pre></td></tr></table></figure><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20230323192604874.png" alt="image-20230323192604874"></p><h1 id="Zabbix深入自定义监控"><a href="#Zabbix深入自定义监控" class="headerlink" title="Zabbix深入自定义监控"></a>Zabbix深入自定义监控</h1><h2 id="zabbix多条件触发"><a href="#zabbix多条件触发" class="headerlink" title="zabbix多条件触发"></a>zabbix多条件触发</h2><p>监控内存可用的百分比</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UserParameter=mem.available,free -m|awk <span class="string">'NR==2&#123;print $NF/$2*100&#125;'</span></span><br></pre></td></tr></table></figure><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20230323192722785.png" alt="image-20230323192722785"></p><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20230323192728168.png" alt="image-20230323192728168"></p><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20230323192735423.png" alt="image-20230323192735423"></p><p>目前属于单条件触发器，因为内存低于30%就报警了，在生产中，我们应该是当内存低于30%并且占用了swap空间，然后再报警。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">UserParameter=swap.available,free -m|awk <span class="string">'/^Swap/&#123;print $NF/$2*100&#125;'</span></span><br><span class="line"></span><br><span class="line">[root@sb_wzj web]<span class="comment"># zabbix_get -s 172.16.1.7 -k swap.available</span></span><br></pre></td></tr></table></figure><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20230323192745514.png" alt="image-20230323192745514"></p><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20230323192822589.png" alt="image-20230323192822589"></p><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20230323192828454.png" alt="image-20230323192828454"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">and             <span class="comment">#并且</span></span><br><span class="line">or              <span class="comment">#或者</span></span><br><span class="line">last()          <span class="comment">#比对最新的值</span></span><br><span class="line">avg()           <span class="comment">#平均值</span></span><br><span class="line">diff()          <span class="comment">#比对上一次文件的内容</span></span><br><span class="line">nodata()        <span class="comment">#收不不到数据进行报警nodata(5m)</span></span><br><span class="line">(5m)            <span class="comment">#表示最近5分钟得到值</span></span><br><span class="line">(<span class="comment">#5)            #表示最近5次得到的值</span></span><br></pre></td></tr></table></figure><h3 id="zabbix-5-x以上告警"><a href="#zabbix-5-x以上告警" class="headerlink" title="zabbix 5.x以上告警"></a>zabbix 5.x以上告警</h3><p><strong>故障告警</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">table</span> <span class="selector-class">.guzhang</span> &#123;<span class="attribute">color</span>: red;&#125;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"https://blog.driverzeng.com/zenglaoshi/sos.png"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"3"</span>  <span class="attr">bordercolor</span>=<span class="string">"black"</span> <span class="attr">cellspacing</span>=<span class="string">"0px"</span> <span class="attr">cellpadding</span>=<span class="string">"4px"</span> <span class="attr">width</span>=<span class="string">"500px"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">class</span>=<span class="string">"guzhang"</span> <span class="attr">bgcolor</span>=<span class="string">"#0C1B3D"</span> &gt;</span><span class="tag">&lt;<span class="name">th</span> <span class="attr">colspan</span>=<span class="string">2</span>&gt;</span></span><br><span class="line">            &#123;TRIGGER.STATUS&#125; 故障！！！故障！！！ </span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="symbol">&amp;#128514;</span> <span class="symbol">&amp;#128514;</span> <span class="symbol">&amp;#128514;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> &gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">bgcolor</span>=<span class="string">"#F9B602"</span> <span class="attr">width</span>=<span class="string">"20%"</span>&gt;</span>告警主机<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">bgcolor</span>=<span class="string">"#F9B602"</span>&gt;</span>&#123;HOSTNAME1&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> &gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">bgcolor</span>=<span class="string">"#F9B602"</span>&gt;</span>告警别名<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">bgcolor</span>=<span class="string">"#F9B602"</span>&gt;</span>&#123;HOST.NAME&#125; <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> &gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">bgcolor</span>=<span class="string">"#F9B602"</span>&gt;</span>告警地址<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">bgcolor</span>=<span class="string">"#F9B602"</span>&gt;</span>&#123;HOST.IP&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">bgcolor</span>=<span class="string">"#F9B602"</span>&gt;</span>告警时间<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">bgcolor</span>=<span class="string">"#F9B602"</span>&gt;</span>&#123;EVENT.DATE&#125; &#123;EVENT.TIME&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">     </span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">bgcolor</span>=<span class="string">"#F9B602"</span>&gt;</span>告警等级<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">bgcolor</span>=<span class="string">"#F9B602"</span>&gt;</span>&#123;TRIGGER.SEVERITY&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">     </span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">bgcolor</span>=<span class="string">"#F9B602"</span>&gt;</span>告警信息<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">bgcolor</span>=<span class="string">"#F9B602"</span>&gt;</span>&#123;TRIGGER.NAME&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">     </span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">bgcolor</span>=<span class="string">"#F9B602"</span>&gt;</span>告警项目<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">bgcolor</span>=<span class="string">"#F9B602"</span>&gt;</span>&#123;TRIGGER.KEY1&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> &gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">'guzhang2'</span> <span class="attr">bgcolor</span>=<span class="string">"#FF3333"</span>&gt;</span>问题详情<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">'guzhang3'</span> <span class="attr">bgcolor</span>=<span class="string">"#FF3333"</span>&gt;</span>&#123;ITEM.NAME&#125;:<span class="symbol">&amp;nbsp;</span>&#123;ITEM.VALUE&#125; <span class="symbol">&amp;#128520;</span> <span class="symbol">&amp;#128520;</span> <span class="symbol">&amp;#128520;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">bgcolor</span>=<span class="string">"#F9B602"</span>&gt;</span>当前状态<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">bgcolor</span>=<span class="string">"#F9B602"</span>&gt;</span>&#123;TRIGGER.STATUS&#125;:<span class="symbol">&amp;nbsp;</span>&#123;ITEM.VALUE1&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">bgcolor</span>=<span class="string">"#F9B602"</span>&gt;</span>事件ID<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">bgcolor</span>=<span class="string">"#F9B602"</span>&gt;</span>&#123;EVENT.ID&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>恢复告警</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">table</span> <span class="selector-class">.guzhang</span> &#123;</span></span><br><span class="line">            color: red;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"https://blog.driverzeng.com/zenglaoshi/huifu.png"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1"</span>  <span class="attr">bordercolor</span>=<span class="string">"black"</span> <span class="attr">cellspacing</span>=<span class="string">"0px"</span> <span class="attr">cellpadding</span>=<span class="string">"4px"</span> <span class="attr">width</span>=<span class="string">"500px"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">bgcolor</span>=<span class="string">"#49c208"</span>&gt;</span><span class="tag">&lt;<span class="name">th</span> <span class="attr">colspan</span>=<span class="string">2</span>&gt;</span></span><br><span class="line">        &#123;TRIGGER.STATUS&#125; 哈哈哈哈哈哈,好了 </span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="symbol">&amp;#128512;</span> <span class="symbol">&amp;#128512;</span> <span class="symbol">&amp;#128512;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">     </span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> &gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">bgcolor</span>=<span class="string">"lightgreen"</span> <span class="attr">width</span>=<span class="string">"20%"</span>&gt;</span>恢复主机<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">bgcolor</span>=<span class="string">"yellow"</span>&gt;</span>&#123;HOSTNAME1&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">bgcolor</span>=<span class="string">"lightgreen"</span>&gt;</span>恢复别名<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">bgcolor</span>=<span class="string">"yellow"</span>&gt;</span>&#123;HOST.NAME&#125; <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> &gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">bgcolor</span>=<span class="string">"lightgreen"</span>&gt;</span>恢复地址<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">bgcolor</span>=<span class="string">"yellow"</span>&gt;</span>&#123;HOST.IP&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">bgcolor</span>=<span class="string">"lightgreen"</span>&gt;</span>恢复时间<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">bgcolor</span>=<span class="string">"yellow"</span>&gt;</span>&#123;EVENT.DATE&#125; &#123;EVENT.RECOVERY.TIME&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">     </span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">bgcolor</span>=<span class="string">"lightgreen"</span>&gt;</span>恢复等级<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">bgcolor</span>=<span class="string">"yellow"</span>&gt;</span>&#123;TRIGGER.SEVERITY&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">     </span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">bgcolor</span>=<span class="string">"lightgreen"</span>&gt;</span>恢复信息<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">bgcolor</span>=<span class="string">"yellow"</span>&gt;</span>&#123;TRIGGER.NAME&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">     </span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">bgcolor</span>=<span class="string">"lightgreen"</span>&gt;</span>恢复项目<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">bgcolor</span>=<span class="string">"yellow"</span>&gt;</span>&#123;TRIGGER.KEY1&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> &gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">bgcolor</span>=<span class="string">"#49c208"</span>&gt;</span>恢复详情<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">bgcolor</span>=<span class="string">"#49c208"</span>&gt;</span>&#123;ITEM.NAME&#125;:<span class="symbol">&amp;nbsp;</span>&#123;ITEM.VALUE&#125; <span class="symbol">&amp;#9889;</span> <span class="symbol">&amp;#9889;</span> <span class="symbol">&amp;#9889;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">bgcolor</span>=<span class="string">"lightgreen"</span>&gt;</span>当前状态<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">bgcolor</span>=<span class="string">"yellow"</span>&gt;</span>&#123;TRIGGER.STATUS&#125;:<span class="symbol">&amp;nbsp;</span>&#123;ITEM.VALUE1&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">bgcolor</span>=<span class="string">"lightgreen"</span>&gt;</span>事件ID<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">bgcolor</span>=<span class="string">"yellow"</span>&gt;</span>&#123;EVENT.ID&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="zabbix的自愈模式"><a href="#zabbix的自愈模式" class="headerlink" title="zabbix的自愈模式"></a>zabbix的自愈模式</h2><p>有些时候，我们的服务宕机了，或者有些服务停掉了，那么我们可以先尝试让他启动，看是否能起的来，为了不影响用户的体验，先把服务起起来，然后再去排查，是什么原因故障的。</p><p>那么此时我们就需要用到zabbix的自愈模式，这个…叫起来很好听，说白了，就是在让zabbix-server通过远程执行命令的方式，在agent上执行命令，启动服务。</p><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20230323192842454.png" alt="image-20230323192842454"></p><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20230323192858259.png" alt="image-20230323192858259"></p><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20230323192903808.png" alt="image-20230323192903808"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#修改配置文件</span></span><br><span class="line">[root@web01 zabbix_agentd.d]<span class="comment"># vim /etc/zabbix/zabbix_agentd.conf</span></span><br><span class="line">EnableRemoteCommands=1</span><br></pre></td></tr></table></figure><h2 id="zabbix告警升级机制"><a href="#zabbix告警升级机制" class="headerlink" title="zabbix告警升级机制"></a>zabbix告警升级机制</h2><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20230323192923043.png" alt="image-20230323192923043"></p><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20230323193013139.png" alt="image-20230323193013139"></p><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20230323193017533.png" alt="image-20230323193017533"></p><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20230323193022705.png" alt="image-20230323193022705"></p><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20230323193027831.png" alt="image-20230323193027831"></p><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20230323193115833.png" alt="image-20230323193115833"></p><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20230323193109471.png" alt="image-20230323193109471"></p><p><strong>计算方式：</strong></p><ol><li>开始于 ，这个是相对一但触发监控，则立即发送消息</li><li>1-2步骤是给运维组发送消息，每隔5分钟发送一次，总共2个步骤，所以发送2次</li><li>3-4步骤是给运维经理组发送消息，每隔5分钟发送一次，总共2个步骤，所以发送2次</li><li>4-5步骤是给运维总监组发送消息，每隔5分钟发送一次，总共2个步骤，所以发送2次</li><li>每次的开始时间是如何计算的呢，第一个立即开始：<br>1-2，3-4，4-5动作时间间隔是5分钟，所以在触发告警发送时间计算是5m+5m+5m=15m</li></ol><h2 id="聚合图形"><a href="#聚合图形" class="headerlink" title="聚合图形"></a>聚合图形</h2><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20230323193125905.png" alt="image-20230323193125905"></p><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20230323193149392.png" alt="image-20230323193149392"></p><h2 id="zabbix微信报警"><a href="#zabbix微信报警" class="headerlink" title="zabbix微信报警"></a>zabbix微信报警</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.安装python的pip</span></span><br><span class="line">[root@sb_wzj web]<span class="comment"># yum install python-pip -y</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.安装python requests库</span></span><br><span class="line">[root@sb_wzj ~]<span class="comment"># pip2.7 install requests==2.27 -i  https://pypi.douban.com/simple/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.进入zabbix存放告警脚本目录</span></span><br><span class="line">[root@sb_wzj ~]<span class="comment"># cd /usr/lib/zabbix/alertscripts/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.编写微信告警脚本</span></span><br><span class="line">[root@sb_wzj alertscripts]<span class="comment"># vim weixin.py</span></span><br><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="comment">#-*- coding: utf-8 -*-</span></span><br><span class="line">import requests</span><br><span class="line">import json</span><br><span class="line">import sys</span><br><span class="line">import os</span><br><span class="line"></span><br><span class="line">headers = &#123;<span class="string">'Content-Type'</span>: <span class="string">'application/json;charset=utf-8'</span>&#125;</span><br><span class="line">api_url = <span class="string">"https://qyapi.weixin.qq.com/cgi-bin/webhook/send?key=b3f00bb1-3198-4491-9429-a9fbe5444e23"</span>   <span class="comment">#这个是企业微信机器人生成的webhook地址，修改为你的即可。</span></span><br><span class="line"></span><br><span class="line">def msg(text):</span><br><span class="line">    json_text= &#123;</span><br><span class="line">     <span class="string">"msgtype"</span>: <span class="string">"text"</span>,</span><br><span class="line">        <span class="string">"text"</span>: &#123;</span><br><span class="line">            <span class="string">"content"</span>: text</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">print</span>(requests.post(api_url,json.dumps(json_text),headers=headers).content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    text = sys.argv[1]</span><br><span class="line">    msg(text)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5.添加执行权限</span></span><br><span class="line">[root@sb_wzj alertscripts]<span class="comment"># chmod +x weixin.py</span></span><br></pre></td></tr></table></figure><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20230323193222292.png" alt="image-20230323193222292"></p><h1 id="zabbix-应用监控"><a href="#zabbix-应用监控" class="headerlink" title="zabbix 应用监控"></a>zabbix 应用监控</h1><h2 id="监控nginx"><a href="#监控nginx" class="headerlink" title="监控nginx"></a>监控nginx</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.创建zabbix存放脚本目录</span></span><br><span class="line">[root@web01 ~]<span class="comment"># mkdir -p /etc/zabbix/scripts</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.编写监控项脚本</span></span><br><span class="line">[root@web01 ~]<span class="comment"># vim /etc/zabbix/scripts/nginx_status.sh</span></span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">############################################################</span></span><br><span class="line"><span class="comment"># $Name:         nginx_status.sh</span></span><br><span class="line"><span class="comment"># $Version:      v1.0</span></span><br><span class="line"><span class="comment"># $Function:     Nginx Status</span></span><br><span class="line"><span class="comment"># $Author:       DriverZeng</span></span><br><span class="line"><span class="comment"># $organization: www.driverzeng.com</span></span><br><span class="line"><span class="comment"># $Create Date:  2016-06-23</span></span><br><span class="line"><span class="comment"># $Description:  Monitor Nginx Service Status</span></span><br><span class="line"><span class="comment">############################################################</span></span><br><span class="line"></span><br><span class="line">NGINX_PORT=80  <span class="comment">#如果端口不同仅需要修改脚本即可，否则修改xml很麻烦</span></span><br><span class="line">NGINX_COMMAND=<span class="variable">$1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">nginx_active</span></span>()&#123;</span><br><span class="line">    /usr/bin/curl -s <span class="string">"http://127.0.0.1:"</span><span class="variable">$NGINX_PORT</span><span class="string">"/nginx_status/"</span> |awk <span class="string">'/Active/ &#123;print $NF&#125;'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">nginx_reading</span></span>()&#123;</span><br><span class="line">    /usr/bin/curl -s <span class="string">"http://127.0.0.1:"</span><span class="variable">$NGINX_PORT</span><span class="string">"/nginx_status/"</span> |awk <span class="string">'/Reading/ &#123;print $2&#125;'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">nginx_writing</span></span>()&#123;</span><br><span class="line">    /usr/bin/curl -s <span class="string">"http://127.0.0.1:"</span><span class="variable">$NGINX_PORT</span><span class="string">"/nginx_status/"</span> |awk <span class="string">'/Writing/ &#123;print $4&#125;'</span></span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">nginx_waiting</span></span>()&#123;</span><br><span class="line">    /usr/bin/curl -s <span class="string">"http://127.0.0.1:"</span><span class="variable">$NGINX_PORT</span><span class="string">"/nginx_status/"</span> |awk <span class="string">'/Waiting/ &#123;print $6&#125;'</span></span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">nginx_accepts</span></span>()&#123;</span><br><span class="line">    /usr/bin/curl -s <span class="string">"http://127.0.0.1:"</span><span class="variable">$NGINX_PORT</span><span class="string">"/nginx_status/"</span> |awk <span class="string">'NR==3 &#123;print $1&#125;'</span></span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">nginx_handled</span></span>()&#123;</span><br><span class="line">    /usr/bin/curl -s <span class="string">"http://127.0.0.1:"</span><span class="variable">$NGINX_PORT</span><span class="string">"/nginx_status/"</span> |awk <span class="string">'NR==3 &#123;print $2&#125;'</span></span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">nginx_requests</span></span>()&#123;</span><br><span class="line">    /usr/bin/curl -s <span class="string">"http://127.0.0.1:"</span><span class="variable">$NGINX_PORT</span><span class="string">"/nginx_status/"</span> |awk <span class="string">'NR==3 &#123;print $3&#125;'</span></span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">case</span> <span class="variable">$NGINX_COMMAND</span> <span class="keyword">in</span></span><br><span class="line">    active)</span><br><span class="line">        nginx_active;</span><br><span class="line">        ;;</span><br><span class="line">    reading)</span><br><span class="line">        nginx_reading;</span><br><span class="line">        ;;</span><br><span class="line">    writing)</span><br><span class="line">        nginx_writing;</span><br><span class="line">        ;;</span><br><span class="line">    waiting)</span><br><span class="line">        nginx_waiting;</span><br><span class="line">        ;;</span><br><span class="line">    accepts)</span><br><span class="line">        nginx_accepts;</span><br><span class="line">        ;;</span><br><span class="line">    handled)</span><br><span class="line">        nginx_handled;</span><br><span class="line">        ;;</span><br><span class="line">    requests)</span><br><span class="line">        nginx_requests;</span><br><span class="line">        ;;</span><br><span class="line">          *)</span><br><span class="line">        <span class="built_in">echo</span> $<span class="string">"USAGE:<span class="variable">$0</span> &#123;active|reading|writing|waiting|accepts|handled|requests&#125;"</span></span><br><span class="line">    <span class="keyword">esac</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.给脚本添加执行权限</span></span><br><span class="line">[root@web01 ~]<span class="comment"># chmod +x /etc/zabbix/scripts/nginx_status.sh</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.修改客户端配置文件</span></span><br><span class="line">[root@web01 ~]<span class="comment"># vim /etc/zabbix/zabbix_agentd.d/nginx_status.conf</span></span><br><span class="line">UserParameter=nginx_status[*],/bin/bash /etc/zabbix/scripts/nginx_status.sh <span class="string">"<span class="variable">$1</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 5.重启agent</span></span><br><span class="line">[root@web01 ~]<span class="comment"># systemctl restart zabbix-agent</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 6.检测</span></span><br><span class="line">[root@sb_wzj ~]<span class="comment"># zabbix_get -s 172.16.1.7 -k nginx_status[waiting]</span></span><br><span class="line">0</span><br><span class="line">[root@sb_wzj ~]<span class="comment"># zabbix_get -s 172.16.1.7 -k nginx_status[requests]</span></span><br><span class="line">19</span><br><span class="line">[root@sb_wzj ~]<span class="comment"># zabbix_get -s 172.16.1.7 -k nginx_status[accepts]</span></span><br><span class="line">20</span><br></pre></td></tr></table></figure><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20230325230254488.png" alt="image-20230325230254488"></p><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20230325230300411.png" alt="image-20230325230300411"></p><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20230325230305451.png" alt="image-20230325230305451"></p><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20230325230322170.png" alt="image-20230325230322170"></p><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20230325230326837.png" alt="image-20230325230326837"></p><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20230325230332051.png" alt="image-20230325230332051"></p><h2 id="zabbix监控PHP"><a href="#zabbix监控PHP" class="headerlink" title="zabbix监控PHP"></a>zabbix监控PHP</h2><h3 id="修改php配置"><a href="#修改php配置" class="headerlink" title="修改php配置"></a>修改php配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.打开php状态模块</span></span><br><span class="line">pm.status_path = /phpfpm_status</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.重启php</span></span><br><span class="line">[root@web01 ~]<span class="comment"># systemctl restart php-fpm</span></span><br></pre></td></tr></table></figure><h3 id="修改nginx配置"><a href="#修改nginx配置" class="headerlink" title="修改nginx配置"></a>修改nginx配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.修改nginx配置文件</span></span><br><span class="line">server &#123;</span><br><span class="line">        listen 80;</span><br><span class="line">        server_name _;</span><br><span class="line"></span><br><span class="line">        location /nginx_status &#123;</span><br><span class="line">                stub_status on;</span><br><span class="line">                allow 127.0.0.1;</span><br><span class="line">                deny all;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        location ~ ^/(phpfpm_status)$ &#123;</span><br><span class="line">                include fastcgi_params;</span><br><span class="line">                fastcgi_pass    unix:/dev/shm/php.sock;</span><br><span class="line">                fastcgi_param SCRIPT_FILENAME <span class="variable">$document_root</span><span class="variable">$fastcgi_script_name</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.重启nginx</span></span><br><span class="line">[root@web01 ~]<span class="comment"># systemctl restart nginx</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.查看phpfpm状态页</span></span><br><span class="line">[root@web01 ~]<span class="comment"># curl http://127.0.0.1/phpfpm_status</span></span><br><span class="line">pool:                 www</span><br><span class="line">process manager:      dynamic</span><br><span class="line">start time:           26/Aug/2022:10:55:47 +0800</span><br><span class="line">start since:          165</span><br><span class="line">accepted conn:        1</span><br><span class="line">listen queue:         0</span><br><span class="line">max listen queue:     0</span><br><span class="line">listen queue len:     0</span><br><span class="line">idle processes:       4</span><br><span class="line">active processes:     1</span><br><span class="line">total processes:      5</span><br><span class="line">max active processes: 1</span><br><span class="line">max children reached: 0</span><br><span class="line">slow requests:        0</span><br><span class="line"></span><br><span class="line"><span class="comment">#PHP-FPM状态解释：</span></span><br><span class="line">pool <span class="comment">#fpm池名称,大多数为www</span></span><br><span class="line">process manager <span class="comment">#进程管理方式dynamic或者static</span></span><br><span class="line">start time <span class="comment">#启动日志,如果reload了fpm，时间会更新</span></span><br><span class="line">start since <span class="comment">#运行时间</span></span><br><span class="line">accepted conn <span class="comment">#当前池接受的请求数</span></span><br><span class="line">listen queue <span class="comment">#请求等待队列,如果这个值不为0,那么需要增加FPM的进程数量</span></span><br><span class="line">max listen queue <span class="comment">#请求等待队列最高的数量</span></span><br><span class="line">listen queue len <span class="comment">#socket等待队列长度</span></span><br><span class="line">idle processes <span class="comment">#空闲进程数量</span></span><br><span class="line">active processes <span class="comment">#活跃进程数量</span></span><br><span class="line">total processes <span class="comment">#总进程数量</span></span><br><span class="line">max active processes <span class="comment">#最大的活跃进程数量（FPM启动开始计算）</span></span><br><span class="line">max children reached <span class="comment">#进程最大数量限制的次数，如果这个数量不为0，那说明你的最大进程数量过小,可以适当调整。</span></span><br><span class="line">slow requests  <span class="comment"># 请求比较慢的数量</span></span><br></pre></td></tr></table></figure><h3 id="编写监控脚本"><a href="#编写监控脚本" class="headerlink" title="编写监控脚本"></a>编写监控脚本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.脚本内容</span></span><br><span class="line">[root@web01 ~]<span class="comment"># vim /etc/zabbix/scripts/phpfpm_status.sh</span></span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">############################################################</span></span><br><span class="line"><span class="comment"># $Name:         phpfpm_status.sh</span></span><br><span class="line"><span class="comment"># $Version:      v1.0</span></span><br><span class="line"><span class="comment"># $Function:     Nginx Status</span></span><br><span class="line"><span class="comment"># $Author:       DriverZeng</span></span><br><span class="line"><span class="comment"># $organization: www.driverzeng.com</span></span><br><span class="line"><span class="comment"># $Create Date:  2016-06-23</span></span><br><span class="line"><span class="comment"># $Description:  Monitor Nginx Service Status</span></span><br><span class="line"><span class="comment">############################################################</span></span><br><span class="line"></span><br><span class="line">PHPFPM_COMMAND=<span class="variable">$1</span></span><br><span class="line">PHPFPM_PORT=80  <span class="comment">#根据监听不同端口进行调整</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">start_since</span></span>()&#123;</span><br><span class="line">    /usr/bin/curl -s <span class="string">"http://127.0.0.1:"</span><span class="variable">$PHPFPM_PORT</span><span class="string">"/phpfpm_status"</span> |awk <span class="string">'/^start since:/ &#123;print $NF&#125;'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">accepted_conn</span></span>()&#123;</span><br><span class="line">    /usr/bin/curl -s <span class="string">"http://127.0.0.1:"</span><span class="variable">$PHPFPM_PORT</span><span class="string">"/phpfpm_status"</span> |awk <span class="string">'/^accepted conn:/ &#123;print $NF&#125;'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">listen_queue</span></span>()&#123;</span><br><span class="line">    /usr/bin/curl -s <span class="string">"http://127.0.0.1:"</span><span class="variable">$PHPFPM_PORT</span><span class="string">"/phpfpm_status"</span> |awk <span class="string">'/^listen queue:/ &#123;print $NF&#125;'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">max_listen_queue</span></span>()&#123;</span><br><span class="line">    /usr/bin/curl -s <span class="string">"http://127.0.0.1:"</span><span class="variable">$PHPFPM_PORT</span><span class="string">"/phpfpm_status"</span> |awk <span class="string">'/^max listen queue:/ &#123;print $NF&#125;'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">listen_queue_len</span></span>()&#123;</span><br><span class="line">    /usr/bin/curl -s <span class="string">"http://127.0.0.1:"</span><span class="variable">$PHPFPM_PORT</span><span class="string">"/phpfpm_status"</span> |awk <span class="string">'/^listen queue len:/ &#123;print $NF&#125;'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">idle_processes</span></span>()&#123;</span><br><span class="line">    /usr/bin/curl -s <span class="string">"http://127.0.0.1:"</span><span class="variable">$PHPFPM_PORT</span><span class="string">"/phpfpm_status"</span> |awk <span class="string">'/^idle processes:/ &#123;print $NF&#125;'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">active_processes</span></span>()&#123;</span><br><span class="line">    /usr/bin/curl -s <span class="string">"http://127.0.0.1:"</span><span class="variable">$PHPFPM_PORT</span><span class="string">"/phpfpm_status"</span> |awk <span class="string">'/^active processes:/ &#123;print $NF&#125;'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">total_processes</span></span>()&#123;</span><br><span class="line">    /usr/bin/curl -s <span class="string">"http://127.0.0.1:"</span><span class="variable">$PHPFPM_PORT</span><span class="string">"/phpfpm_status"</span> |awk <span class="string">'/^total processes:/ &#123;print $NF&#125;'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">max_active_processes</span></span>()&#123;</span><br><span class="line">    /usr/bin/curl -s <span class="string">"http://127.0.0.1:"</span><span class="variable">$PHPFPM_PORT</span><span class="string">"/phpfpm_status"</span> |awk <span class="string">'/^max active processes:/ &#123;print $NF&#125;'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">max_children_reached</span></span>()&#123;</span><br><span class="line">    /usr/bin/curl -s <span class="string">"http://127.0.0.1:"</span><span class="variable">$PHPFPM_PORT</span><span class="string">"/phpfpm_status"</span> |awk <span class="string">'/^max children reached:/ &#123;print $NF&#125;'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">slow_requests</span></span>()&#123;</span><br><span class="line">    /usr/bin/curl -s <span class="string">"http://127.0.0.1:"</span><span class="variable">$PHPFPM_PORT</span><span class="string">"/phpfpm_status"</span> |awk <span class="string">'/^slow requests:/ &#123;print $NF&#125;'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="variable">$PHPFPM_COMMAND</span> <span class="keyword">in</span></span><br><span class="line">    start_since)</span><br><span class="line">        start_since;</span><br><span class="line">        ;;</span><br><span class="line">    accepted_conn)</span><br><span class="line">        accepted_conn;</span><br><span class="line">        ;;</span><br><span class="line">    listen_queue)</span><br><span class="line">        listen_queue;</span><br><span class="line">        ;;</span><br><span class="line">    max_listen_queue)</span><br><span class="line">        max_listen_queue;</span><br><span class="line">        ;;</span><br><span class="line">    listen_queue_len)</span><br><span class="line">        listen_queue_len;</span><br><span class="line">        ;;</span><br><span class="line">    idle_processes)</span><br><span class="line">        idle_processes;</span><br><span class="line">        ;;</span><br><span class="line">    active_processes)</span><br><span class="line">        active_processes;</span><br><span class="line">        ;;</span><br><span class="line">        total_processes)</span><br><span class="line">                total_processes;</span><br><span class="line">                ;;</span><br><span class="line">        max_active_processes)</span><br><span class="line">                max_active_processes;</span><br><span class="line">                ;;</span><br><span class="line">        max_children_reached)</span><br><span class="line">                max_children_reached;</span><br><span class="line">                ;;</span><br><span class="line">        slow_requests)</span><br><span class="line">                slow_requests;</span><br><span class="line">                ;;</span><br><span class="line">          *)</span><br><span class="line">        <span class="built_in">echo</span> $<span class="string">"USAGE:<span class="variable">$0</span> &#123;start_since|accepted_conn|listen_queue|max_listen_queue|listen_queue_len|idle_processes|active_processes|total_processes|max_active_processes|max_children_reached&#125;"</span></span><br><span class="line">    <span class="keyword">esac</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 2.添加执行权限</span></span><br><span class="line">[root@web01 ~]<span class="comment"># chmod +x /etc/zabbix/scripts/phpfpm_status.sh</span></span><br></pre></td></tr></table></figure><h3 id="配置zabbix客户端加监控"><a href="#配置zabbix客户端加监控" class="headerlink" title="配置zabbix客户端加监控"></a>配置zabbix客户端加监控</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@web01 ~]<span class="comment"># cp /etc/zabbix/zabbix_agentd.d/&#123;nginx_status.conf,phpfpm_status.conf&#125;</span></span><br><span class="line">[root@web01 ~]<span class="comment"># vim /etc/zabbix/zabbix_agentd.d/phpfpm_status.conf </span></span><br><span class="line">UserParameter=phpfpm_status[*],/bin/bash /etc/zabbix/scripts/phpfpm_status.sh <span class="string">"<span class="variable">$1</span>"</span></span><br><span class="line">[root@web01 ~]<span class="comment"># systemctl restart zabbix-agent</span></span><br><span class="line"></span><br><span class="line">[root@sb_wzj ~]<span class="comment"># zabbix_get -s 172.16.1.7 -k phpfpm_status[start_since]</span></span><br><span class="line">891</span><br><span class="line">[root@sb_wzj ~]<span class="comment"># zabbix_get -s 172.16.1.7 -k phpfpm_status[accepted_conn]</span></span><br><span class="line">3</span><br><span class="line">[root@sb_wzj ~]<span class="comment"># zabbix_get -s 172.16.1.7 -k phpfpm_status[listen_queue]</span></span><br><span class="line">0</span><br></pre></td></tr></table></figure><h3 id="页面添加监控项-1"><a href="#页面添加监控项-1" class="headerlink" title="页面添加监控项"></a>页面添加监控项</h3><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20230325230352104.png" alt="image-20230325230352104"></p><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20230325230358107.png" alt="image-20230325230358107"></p><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20230325230402509.png" alt="image-20230325230402509"></p><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20230325230406702.png" alt="image-20230325230406702"></p><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20230325230420363.png" alt="image-20230325230420363"></p><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20230325230424729.png" alt="image-20230325230424729"></p><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20230325230430584.png" alt="image-20230325230430584"></p><h2 id="zabbix监控MySQL"><a href="#zabbix监控MySQL" class="headerlink" title="zabbix监控MySQL"></a>zabbix监控MySQL</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.开启MySQL上的zabbix-agent</span></span><br><span class="line">[root@db03 ~]<span class="comment"># systemctl start zabbix-agent</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.添加主机</span></span><br></pre></td></tr></table></figure><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20230325230453056.png" alt="image-20230325230453056"></p><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20230325230501789.png" alt="image-20230325230501789"></p><h2 id="zabbix监控redis"><a href="#zabbix监控redis" class="headerlink" title="zabbix监控redis"></a>zabbix监控redis</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.安装redis</span></span><br><span class="line">[root@db03 ~]<span class="comment"># yum install -y redis</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.启动redis</span></span><br><span class="line">[root@db03 ~]<span class="comment"># systemctl start redis</span></span><br></pre></td></tr></table></figure><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20230325230531241.png" alt="image-20230325230531241"></p><h2 id="Zabbix监控MySQL"><a href="#Zabbix监控MySQL" class="headerlink" title="Zabbix监控MySQL"></a>Zabbix监控MySQL</h2><p><code>percona Monitoring Plugins</code>是一个高质量的组件，为<code>MySQL</code>数据库添加企业级的监控和图表功能。但其脚本使用<code>PHP</code>实现，故而<code>Zabbix-Agent</code>需要安装<code>PHP</code>环境。</p><p><a href="https://www.percona.com/software/documentation" target="_blank" rel="noopener">percona工具集</a></p><p><strong>实践环境</strong></p><table><thead><tr><th>服务器系统</th><th>角色</th><th>IP</th></tr></thead><tbody><tr><td>CentOS 7.4 x86_64</td><td>Zabbix-Server</td><td>10.0.0.8</td></tr><tr><td>CentOS 7.4 x86_64</td><td>Zabbix-Agent</td><td>10.0.0.7</td></tr></tbody></table><p>1.在<code>Zabbix-Agent</code>端安装<code>percona Monitoring Plugins</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@Agent ~]<span class="comment"># yum install -y http://www.percona.com/downloads/percona-release/redhat/0.1-3/percona-release-0.1-3.noarch.rpm</span></span><br><span class="line">[root@Agent ~]<span class="comment"># yum install percona-zabbix-templates -y</span></span><br></pre></td></tr></table></figure><p>2.查看<code>percona</code>安装后的目录结构</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@Agent percona]<span class="comment"># tree /var/lib/zabbix/percona</span></span><br><span class="line">/var/lib/zabbix/percona</span><br><span class="line">├── scripts  <span class="comment">#脚本文件路径</span></span><br><span class="line">│   ├── get_mysql_stats_wrapper.sh</span><br><span class="line">│   └── ss_get_mysql_stats.php</span><br><span class="line">└── templates</span><br><span class="line">    ├── userparameter_percona_mysql.conf  <span class="comment">#key文件位置</span></span><br><span class="line">    └── zabbix_agent_template_percona_mysql_server_ht_2.0.9-sver1.1.6.xml <span class="comment">#模板文件位置</span></span><br></pre></td></tr></table></figure><p>4.将自定义监控项配置文件复制至<code>/etc/zabbix_agentd.conf.d</code>目录下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@Agent ~]<span class="comment"># cp /var/lib/zabbix/percona/templates/userparameter_percona_mysql.conf  /etc/zabbix/zabbix_agentd.d/percona_mysql.conf</span></span><br></pre></td></tr></table></figure><p>5.重启<code>zabbix-agent</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@Agent ~]<span class="comment"># systemctl restart zabbix-agent</span></span><br></pre></td></tr></table></figure><p>6.修改脚本中的<code>MySQL</code>用户名和密码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@Agent scripts]<span class="comment"># vim /var/lib/zabbix/percona/scripts/ss_get_mysql_stats.php</span></span><br><span class="line"><span class="variable">$mysql_user</span> = <span class="string">'root'</span>;</span><br><span class="line"><span class="variable">$mysql_pass</span> = <span class="string">'123'</span>;</span><br><span class="line"><span class="variable">$mysql_port</span> = 3306;</span><br></pre></td></tr></table></figure><p>7.在<code>Zabbix-Server</code>端上使用<code>Zabbix_get</code>获取值(否则会失败)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@Server ~]<span class="comment"># zabbix_get -s 10.0.0.7 -k MySQL.pool-read-requests</span></span><br><span class="line">223003813</span><br><span class="line"></span><br><span class="line">//如果获取不到值常见问题</span><br><span class="line">1.看是否是MySQL密码错误</span><br><span class="line">2.不要直接执行脚本来获取</span><br><span class="line">3.删除/tmp/localhost-mysql_cacti_stats.txt文件</span><br><span class="line">4.权限问题导致</span><br></pre></td></tr></table></figure><p>8.在Zabbix页面模板选项中导入Percona模板, 模板存放在<code>/var/lib/zabbix/percona/templates</code>， 最后关联主机即可。</p><h2 id="Zabbix监控Redis"><a href="#Zabbix监控Redis" class="headerlink" title="Zabbix监控Redis"></a>Zabbix监控Redis</h2><p><code>Redis</code>使用自带的<code>INFO</code>命令，进行状态监控。以一种易于解释且易于阅读的格式，返回关于<code>Redis</code>服务器的各种信息和统计数值。</p><p><strong>实践环境</strong></p><table><thead><tr><th>服务器系统</th><th>角色</th><th>IP</th></tr></thead><tbody><tr><td>CentOS 7.4 x86_64</td><td>Zabbix-Server</td><td>10.0.0.8</td></tr><tr><td>CentOS 7.4 x86_64</td><td>Zabbix-Agent</td><td>10.0.0.7</td></tr></tbody></table><p>1.编写Shell脚本</p><ul><li>脚本端口、连接redis服务地址根据具体情况进行修改</li><li>AUTH认证没有开启，将PASSWD修改为空即可。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line">[root@Agent ~]<span class="comment"># mkdir -p  /etc/zabbix/scripts</span></span><br><span class="line">[root@Agent ~]<span class="comment"># vim /etc/zabbix/scripts/redis_status.sh</span></span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">############################################################</span></span><br><span class="line"><span class="comment"># $Name:         redis_status.sh</span></span><br><span class="line"><span class="comment"># $Version:      v1.0</span></span><br><span class="line"><span class="comment"># $Function:     Redis Status</span></span><br><span class="line"><span class="comment"># $Author:       DriverZeng</span></span><br><span class="line"><span class="comment"># $organization: www.driverzeng.com</span></span><br><span class="line"><span class="comment"># $Create Date:  2016-06-23</span></span><br><span class="line"><span class="comment"># $Description:  Monitor Redis Service Status</span></span><br><span class="line"><span class="comment">############################################################</span></span><br><span class="line"></span><br><span class="line">R_COMMAND=<span class="string">"<span class="variable">$1</span>"</span></span><br><span class="line">R_PORT=<span class="string">"6379"</span>  <span class="comment">#根据实际情况调整端口</span></span><br><span class="line">R_SERVER=<span class="string">"127.0.0.1"</span>  <span class="comment">#根据具体情况调整IP地址</span></span><br><span class="line">PASSWD=<span class="string">""</span>    <span class="comment">#如果没有设置Redis密码,为空即可</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">redis_status</span></span>()&#123;</span><br><span class="line">   (<span class="built_in">echo</span> -en <span class="string">"AUTH <span class="variable">$PASSWD</span>\r\nINFO\r\n"</span>;sleep 1;) | /usr/bin/nc <span class="string">"<span class="variable">$R_SERVER</span>"</span> <span class="string">"<span class="variable">$R_PORT</span>"</span> &gt; /tmp/redis_<span class="string">"<span class="variable">$R_PORT</span>"</span>.tmp</span><br><span class="line">      REDIS_STAT_VALUE=$(grep <span class="string">"<span class="variable">$R_COMMAND</span>:"</span> /tmp/redis_<span class="string">"<span class="variable">$R_PORT</span>"</span>.tmp | cut -d <span class="string">':'</span> -f2)</span><br><span class="line">       <span class="built_in">echo</span> <span class="string">"<span class="variable">$REDIS_STAT_VALUE</span>"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="variable">$R_COMMAND</span> <span class="keyword">in</span></span><br><span class="line">    used_cpu_user_children)</span><br><span class="line">    redis_status <span class="string">"<span class="variable">$R_PORT</span>"</span> <span class="string">"<span class="variable">$R_COMMAND</span>"</span></span><br><span class="line">    ;;</span><br><span class="line">    used_cpu_sys)</span><br><span class="line">    redis_status <span class="string">"<span class="variable">$R_PORT</span>"</span> <span class="string">"<span class="variable">$R_COMMAND</span>"</span></span><br><span class="line">    ;;</span><br><span class="line">    total_commands_processed)</span><br><span class="line">    redis_status <span class="string">"<span class="variable">$R_PORT</span>"</span> <span class="string">"<span class="variable">$R_COMMAND</span>"</span></span><br><span class="line">    ;;</span><br><span class="line">    role)</span><br><span class="line">    redis_status <span class="string">"<span class="variable">$R_PORT</span>"</span> <span class="string">"<span class="variable">$R_COMMAND</span>"</span></span><br><span class="line">    ;;</span><br><span class="line">    lru_clock)</span><br><span class="line">    redis_status <span class="string">"<span class="variable">$R_PORT</span>"</span> <span class="string">"<span class="variable">$R_COMMAND</span>"</span></span><br><span class="line">    ;;</span><br><span class="line">    latest_fork_usec)</span><br><span class="line">    redis_status <span class="string">"<span class="variable">$R_PORT</span>"</span> <span class="string">"<span class="variable">$R_COMMAND</span>"</span></span><br><span class="line">    ;;</span><br><span class="line">    keyspace_misses)</span><br><span class="line">    redis_status <span class="string">"<span class="variable">$R_PORT</span>"</span> <span class="string">"<span class="variable">$R_COMMAND</span>"</span></span><br><span class="line">    ;;</span><br><span class="line">    keyspace_hits)</span><br><span class="line">    redis_status <span class="string">"<span class="variable">$R_PORT</span>"</span> <span class="string">"<span class="variable">$R_COMMAND</span>"</span></span><br><span class="line">    ;;</span><br><span class="line">    keys)</span><br><span class="line">    redis_status <span class="string">"<span class="variable">$R_PORT</span>"</span> <span class="string">"<span class="variable">$R_COMMAND</span>"</span></span><br><span class="line">    ;;</span><br><span class="line">    expires)</span><br><span class="line">    redis_status <span class="string">"<span class="variable">$R_PORT</span>"</span> <span class="string">"<span class="variable">$R_COMMAND</span>"</span></span><br><span class="line">    ;;</span><br><span class="line">    expired_keys)</span><br><span class="line">    redis_status <span class="string">"<span class="variable">$R_PORT</span>"</span> <span class="string">"<span class="variable">$R_COMMAND</span>"</span></span><br><span class="line">    ;;</span><br><span class="line">    evicted_keys)</span><br><span class="line">    redis_status <span class="string">"<span class="variable">$R_PORT</span>"</span> <span class="string">"<span class="variable">$R_COMMAND</span>"</span></span><br><span class="line">    ;;</span><br><span class="line">    connected_clients)</span><br><span class="line">    redis_status <span class="string">"<span class="variable">$R_PORT</span>"</span> <span class="string">"<span class="variable">$R_COMMAND</span>"</span></span><br><span class="line">    ;;</span><br><span class="line">    changes_since_last_save)</span><br><span class="line">    redis_status <span class="string">"<span class="variable">$R_PORT</span>"</span> <span class="string">"<span class="variable">$R_COMMAND</span>"</span></span><br><span class="line">    ;;</span><br><span class="line">    blocked_clients)</span><br><span class="line">    redis_status <span class="string">"<span class="variable">$R_PORT</span>"</span> <span class="string">"<span class="variable">$R_COMMAND</span>"</span></span><br><span class="line">    ;;</span><br><span class="line">    bgsave_in_progress)</span><br><span class="line">    redis_status <span class="string">"<span class="variable">$R_PORT</span>"</span> <span class="string">"<span class="variable">$R_COMMAND</span>"</span></span><br><span class="line">    ;;</span><br><span class="line">    bgrewriteaof_in_progress)</span><br><span class="line">    redis_status <span class="string">"<span class="variable">$R_PORT</span>"</span> <span class="string">"<span class="variable">$R_COMMAND</span>"</span></span><br><span class="line">    ;;</span><br><span class="line">    used_memory_peak)</span><br><span class="line">    redis_status <span class="string">"<span class="variable">$R_PORT</span>"</span> <span class="string">"<span class="variable">$R_COMMAND</span>"</span></span><br><span class="line">    ;;</span><br><span class="line">    used_memory)</span><br><span class="line">    redis_status <span class="string">"<span class="variable">$R_PORT</span>"</span> <span class="string">"<span class="variable">$R_COMMAND</span>"</span></span><br><span class="line">    ;;</span><br><span class="line">    used_cpu_user)</span><br><span class="line">    redis_status <span class="string">"<span class="variable">$R_PORT</span>"</span> <span class="string">"<span class="variable">$R_COMMAND</span>"</span></span><br><span class="line">    ;;</span><br><span class="line">    used_cpu_sys_children)</span><br><span class="line">    redis_status <span class="string">"<span class="variable">$R_PORT</span>"</span> <span class="string">"<span class="variable">$R_COMMAND</span>"</span></span><br><span class="line">    ;;</span><br><span class="line">    total_connections_received)</span><br><span class="line">    redis_status <span class="string">"<span class="variable">$R_PORT</span>"</span> <span class="string">"<span class="variable">$R_COMMAND</span>"</span></span><br><span class="line">    ;;</span><br><span class="line">    *)</span><br><span class="line">    <span class="built_in">echo</span> $<span class="string">"USAGE:<span class="variable">$0</span> &#123;used_cpu_user_children|used_cpu_sys|total_commands_processed|role|lru_clock|latest_fork_usec|keyspace_misses|keyspace_hits|keys|expires|expired_keys|connected_clients|changes_since_last_save|blocked_clients|bgrewriteaof_in_progress|used_memory_peak|used_memory|used_cpu_user|used_cpu_sys_children|total_connections_received&#125;"</span></span><br><span class="line">    <span class="keyword">esac</span></span><br></pre></td></tr></table></figure><p>Redis状态参数解释：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">server : Redis 服务器信息，包含以下域：</span><br><span class="line">redis_version : Redis 服务器版本</span><br><span class="line">redis_git_sha1 : Git SHA1</span><br><span class="line">redis_git_dirty : Git dirty flag</span><br><span class="line">os : Redis 服务器的宿主操作系统</span><br><span class="line">arch_bits : 架构（32 或 64 位）</span><br><span class="line">multiplexing_api : Redis 所使用的事件处理机制</span><br><span class="line">gcc_version : 编译 Redis 时所使用的 GCC 版本</span><br><span class="line">process_id : 服务器进程的 PID</span><br><span class="line">run_id : Redis 服务器的随机标识符（用于 Sentinel 和集群）</span><br><span class="line">tcp_port : TCP/IP 监听端口</span><br><span class="line">uptime_in_seconds : 自 Redis 服务器启动以来，经过的秒数</span><br><span class="line">uptime_in_days : 自 Redis 服务器启动以来，经过的天数</span><br><span class="line">lru_clock : 以分钟为单位进行自增的时钟，用于 LRU 管理</span><br><span class="line">clients : 已连接客户端信息，包含以下域：</span><br><span class="line">connected_clients : 已连接客户端的数量（不包括通过从属服务器连接的客户端）</span><br><span class="line">client_longest_output_list : 当前连接的客户端当中，最长的输出列表</span><br><span class="line">client_longest_input_buf : 当前连接的客户端当中，最大输入缓存</span><br><span class="line">blocked_clients : 正在等待阻塞命令（BLPOP、BRPOP、BRPOPLPUSH）的客户端的数量</span><br><span class="line">memory : 内存信息，包含以下域：</span><br><span class="line">used_memory : 由 Redis 分配器分配的内存总量，以字节（byte）为单位</span><br><span class="line">used_memory_human : 以人类可读的格式返回 Redis 分配的内存总量</span><br><span class="line">used_memory_rss : 从操作系统的角度，返回 Redis 已分配的内存总量（俗称常驻集大小）。这个值和 top 、 ps 等命令的输出一致。</span><br><span class="line">used_memory_peak : Redis 的内存消耗峰值（以字节为单位）</span><br><span class="line">used_memory_peak_human : 以人类可读的格式返回 Redis 的内存消耗峰值</span><br><span class="line">used_memory_lua : Lua 引擎所使用的内存大小（以字节为单位）</span><br><span class="line">mem_fragmentation_ratio : used_memory_rss 和 used_memory 之间的比率</span><br><span class="line">persistence : RDB 和 AOF 的相关信息</span><br><span class="line">stats : 一般统计信息</span><br><span class="line">replication : 主/从复制信息</span><br><span class="line">cpu : CPU 计算量统计信息</span><br><span class="line">commandstats : Redis 命令统计信息</span><br><span class="line">cluster : Redis 集群信息</span><br><span class="line">keyspace : 数据库相关的统计信息</span><br><span class="line">参数还可以是下面这两个：</span><br><span class="line">all : 返回所有信息</span><br><span class="line">default : 返回默认选择的信息</span><br><span class="line">当不带参数直接调用 INFO 命令时，使用 default 作为默认参数。</span><br></pre></td></tr></table></figure><p>3.添加脚本执行权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@Agent ~]<span class="comment"># chmod +x /etc/zabbix/scripts/redis_status.sh</span></span><br></pre></td></tr></table></figure><p>4.Zabbix权限不足处理办法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@Agent ~]<span class="comment"># rm -f /tmp/redis_6379.tmp</span></span><br></pre></td></tr></table></figure><p>5.key的<code>redis_status.conf</code>的配置文件如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@Agent ~]<span class="comment"># cat /etc/zabbix/zabbix_agentd.d/redis_status.conf</span></span><br><span class="line">UserParameter=redis_status[*],/bin/bash /etc/zabbix/scripts/redis_status.sh <span class="string">"<span class="variable">$1</span>"</span></span><br></pre></td></tr></table></figure><p>6.重启<code>zabbix-agent</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@Agent ~]<span class="comment"># systemctl restart  zabbix-agent</span></span><br></pre></td></tr></table></figure><p>7.在<code>Zabbix-Server</code>使用<code>Zabbix_get</code>获取值</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@Server ~]<span class="comment"># zabbix_get -s 10.0.0.7 -k redis_status[used_cpu_sys]</span></span><br><span class="line">16.81</span><br></pre></td></tr></table></figure><h2 id="zabbix监控JVM（JAVA）"><a href="#zabbix监控JVM（JAVA）" class="headerlink" title="zabbix监控JVM（JAVA）"></a>zabbix监控JVM（JAVA）</h2><p>在Zabbix中，JMX监控数据的获取由专门的代理程序来实现,即Zabbix-Java-Gateway来负责数据的采集，Zabbix-Java-Gateway和JMX的Java程序之间通信获取数据.</p><h3 id="JMX在zabbix中运行的流程"><a href="#JMX在zabbix中运行的流程" class="headerlink" title="JMX在zabbix中运行的流程"></a>JMX在zabbix中运行的流程</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1.Zabbix-Server找Zabbix-Java-Gateway获取Java数据</span><br><span class="line">2.Zabbix-Java-Gateway找Java程序获取数据</span><br><span class="line">3.Java程序返回数据给Zabbix-Java-Gateway</span><br><span class="line">4.Zabbix-Java-Gateway返回数据给Zabbix-Server</span><br><span class="line">5.Zabbix-Server进行数据展示</span><br></pre></td></tr></table></figure><p><strong>JMX监控配置步骤</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1.安装Zabbix-Java-Gateway。</span><br><span class="line">2.配置zabbix_java_gateway.conf参数。</span><br><span class="line">3.配置zabbix-server.conf参数。</span><br><span class="line">4.Tomcat应用开启JMX协议。</span><br><span class="line">5.ZabbixWeb配置JMX监控的Java应用。</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">zabbix-java-gateway</span><br><span class="line"><span class="comment"># 1.安装Java容器Tomcat</span></span><br><span class="line">[root@web01 ~]<span class="comment"># yum install -y tomcat</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.安装zabbix-java-gateway</span></span><br><span class="line">[root@web01 ~]<span class="comment"># rpm -ivh https://mirrors.aliyun.com/zabbix/zabbix/5.0/rhel/7/x86_64/zabbix-java-gateway-5.0.26-1.el7.x86_64.rpm?spm=a2c6h.25603864.0.0.2ed62e2fPf8hxu</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.修改java-gateway配置文件</span></span><br><span class="line">[root@web01 ~]<span class="comment"># vim /etc/zabbix/zabbix_java_gateway.conf</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.启动java-gateway</span></span><br><span class="line">[root@web01 ~]<span class="comment"># systemctl start zabbix-java-gateway.service </span></span><br><span class="line">[root@web01 ~]<span class="comment"># netstat -lntup|grep 10052</span></span><br><span class="line">tcp6       0      0 :::10052                :::*                    LISTEN      85993/java</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5.修改服务端配置</span></span><br><span class="line">[root@sb_wzj ~]<span class="comment"># vim /etc/zabbix/zabbix_server.conf </span></span><br><span class="line"><span class="comment">## java-gateway的地址</span></span><br><span class="line">JavaGateway=172.16.1.7</span><br><span class="line"><span class="comment">## java-gateway的端口</span></span><br><span class="line">JavaGatewayPort=10052</span><br><span class="line"><span class="comment">## java-gateway轮询</span></span><br><span class="line">StartJavaPollers=5</span><br><span class="line"></span><br><span class="line"><span class="comment"># 6.重启服务端</span></span><br><span class="line">[root@sb_wzj ~]<span class="comment"># systemctl restart zabbix-server</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 7.修改tomcat启动脚本</span></span><br><span class="line">[root@web01 ~]<span class="comment"># vim /usr/libexec/tomcat/server</span></span><br><span class="line">CATALINA_OPTS=<span class="string">"<span class="variable">$CATALINA_OPTS</span></span></span><br><span class="line"><span class="string">-Dcom.sun.management.jmxremote</span></span><br><span class="line"><span class="string">-Dcom.sun.management.jmxremote.port=12345</span></span><br><span class="line"><span class="string">-Dcom.sun.management.jmxremote.authenticate=false</span></span><br><span class="line"><span class="string">-Dcom.sun.management.jmxremote.ssl=false -Djava.rmi.server.hostname=172.16.1.7"</span></span><br></pre></td></tr></table></figure><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20230325230723513.png" alt="image-20230325230723513"></p><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20230325230728525.png" alt="image-20230325230728525"></p><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20230325230743639.png" alt="image-20230325230743639"></p><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20230325230748084.png" alt="image-20230325230748084"></p><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20230325230752766.png" alt="image-20230325230752766"></p><h2 id="zabbix自定义监控阶段小结"><a href="#zabbix自定义监控阶段小结" class="headerlink" title="zabbix自定义监控阶段小结"></a>zabbix自定义监控阶段小结</h2><p><strong>zabbix监控基础架构回顾</strong></p><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20230325230801363.png" alt="image-20230325230801363"></p><p><strong>Zabbix监控方式：</strong></p><ul><li>agent：客户端监控</li><li>SNMP：监控网络设备（交换机）</li><li>IPMI：监控主机硬件设备（Dell R710 R720 R730 远程管理卡）</li><li>JMX：监控JAVA的JVM</li></ul><p><strong>Zabbix资源回顾（基于监控项基础的所有资源）</strong></p><h1 id="Zabbix-Web检测"><a href="#Zabbix-Web检测" class="headerlink" title="Zabbix Web检测"></a>Zabbix Web检测</h1><h2 id="什么是静态网站、动态网站"><a href="#什么是静态网站、动态网站" class="headerlink" title="什么是静态网站、动态网站"></a>什么是静态网站、动态网站</h2><p>静态网站：纯静态网站就是服务器的源代码和客户端的源代码一致。动态网站：比如: <code>&lt;?php phpinfo()?&gt;</code>每次用户访问的时候，内容都是在内存中动态生成的。动态网站支持登陆，支持用户交互，所以用户在请求动态网站时，会给客户端下发一个叫sessionID的内容，那么客户端则会将SessionID保存至浏览器的cookie中。</p><h2 id="session和cookie的工作流程"><a href="#session和cookie的工作流程" class="headerlink" title="session和cookie的工作流程"></a>session和cookie的工作流程</h2><p>1) 当用户首次访问动态网站时，是不会携带cookie信息，那么在服务端返回网页的时候，会给该客户端的浏览器分配一个唯一的sessionID，客户端会该sessionID存储至浏览器的Cookie中。</p><p>2) 当用户再次访问网站时，浏览器会在Header头信息添加Set-Cookie，Set-Cookie携带的则是该网站对应的sessionID信息，服务端接收后会进行校验</p><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20230327193629589.png" alt="image-20230327193629589"></p><h3 id="使用命令模拟用户登录网站"><a href="#使用命令模拟用户登录网站" class="headerlink" title="使用命令模拟用户登录网站"></a>使用命令模拟用户登录网站</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@web01 ~]<span class="comment"># curl -L -c cook -b cook 'http://zabbix.zls.com/index.php'</span></span><br><span class="line"><span class="comment">#-b：cookie字符串或文件读取位置，使用option来把上次的cookie信息追加到http request里面去。</span></span><br><span class="line"><span class="comment">#-c：操作结束后把cookie写入到这个文件中web01</span></span><br><span class="line"></span><br><span class="line">[root@web01 ~]<span class="comment"># curl -L -c cook -b cook -d 'name=Admin&amp;password=zabbix&amp;autologin=1&amp;enter=Sign+in' 'http://zabbix.zls.com/index.php'</span></span><br><span class="line"><span class="comment">#-d:    以POST的请方式携带头部信息请求</span></span><br><span class="line"></span><br><span class="line">[root@web01 ~]<span class="comment"># curl -L -c cook -b cook 'http://zabbix.zls.com/queue.php'</span></span><br></pre></td></tr></table></figure><h2 id="zabbix监控web网站"><a href="#zabbix监控web网站" class="headerlink" title="zabbix监控web网站"></a>zabbix监控web网站</h2><p>我们使用Zabbix Web 监控来监控Zabbix的Web界面。我们想知道它是否可用、是否正常工作以及响应速度。所以我们必须使用用户名和密码登录。</p><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20230327193643276.png" alt="image-20230327193643276"></p><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20230327193648143.png" alt="image-20230327193648143"></p><p>在新的场景中，我们将场景命名为”监控zabbix服务器”，并为其创建一个新的应用 (application )。</p><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20230327193812116.png" alt="image-20230327193812116"></p><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20230327193816674.png" alt="image-20230327193816674"></p><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20230327193821139.png" alt="image-20230327193821139"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## zabbix5.0版本</span></span><br><span class="line">regex:name=<span class="string">"csrf-token"</span> content=<span class="string">"([0-9a-z]&#123;16&#125;)"</span></span><br></pre></td></tr></table></figure><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20230327193829056.png" alt="image-20230327193829056"></p><p><strong>注意：一定要勾选跟随跳转</strong></p><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20230327193834210.png" alt="image-20230327193834210"></p><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20230327193841194.png" alt="image-20230327193841194"></p><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20230327193846541.png" alt="image-20230327193846541"></p><h1 id="Zabbix自动化监控"><a href="#Zabbix自动化监控" class="headerlink" title="Zabbix自动化监控"></a>Zabbix自动化监控</h1><h2 id="zabbix工作模式"><a href="#zabbix工作模式" class="headerlink" title="zabbix工作模式"></a>zabbix工作模式</h2><ul><li>主动模式：自动注册</li><li>被动模式：自动发现</li></ul><h2 id="自动发现"><a href="#自动发现" class="headerlink" title="自动发现"></a>自动发现</h2><p>zabbix的服务端，扫描<code>IP网段</code>，该网段上，只要安装了<code>zabbix agent</code>并且配置了服务端的IP，zabbix-server会自动将发现的主机加入到资产中。</p><blockquote><p>当网络发现正确设置后你可以：<br>1.加快Zabbix部署<br>2.简化管理<br>3.无需过多管理就能在快速变化的环境中使用Zabbix</p></blockquote><hr><blockquote><p>Zabbix网络发现基于以下信息：<br>1.IP范围<br>2.可用的外部服务（FTP，SSH，WEB，POP3，IMAP，TCP等）<br>3.来自 zabbix agent 的信息（仅支持未加密模式）<br>4.来自 snmp agent 的信息</p></blockquote><hr><blockquote><p>不支持：<br>1.发现网络拓扑</p></blockquote><h3 id="自动发现配置"><a href="#自动发现配置" class="headerlink" title="自动发现配置"></a>自动发现配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.安装zabbix客户端</span></span><br><span class="line">rpm -ivh https://mirrors.aliyun.com/zabbix/zabbix/5.0/rhel/7/x86_64/zabbix-agent-5.0.26-1.el7.x86_64.rpm?spm=a2c6h.25603864.0.0.20ba2e2fnfcAbB</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.修改客户端配置文件</span></span><br><span class="line">[root@db02 ~]<span class="comment"># vim /etc/zabbix/zabbix_agentd.conf </span></span><br><span class="line">Server=172.16.1.61</span><br><span class="line">[root@db02 ~]<span class="comment"># systemctl start zabbix-agent</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.配置自动发现的规则</span></span><br></pre></td></tr></table></figure><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20230327203220851.png" alt="image-20230327203220851"></p><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20230327203226763.png" alt="image-20230327203226763"></p><p><strong>将动作和自动发现关联</strong></p><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20230327203242215.png" alt="image-20230327203242215"></p><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20230327203250464.png" alt="image-20230327203250464"></p><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20230327203255583.png" alt="image-20230327203255583"></p><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20230327203300125.png" alt="image-20230327203300125"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">默认标题</span><br><span class="line">自动发现主机IP:&#123;DISCOVERY.DEVICE.IPADDRESS&#125;</span><br><span class="line"></span><br><span class="line">消息内容</span><br><span class="line">客户端IP:&#123;DISCOVERY.DEVICE.IPADDRESS&#125;</span><br><span class="line">客户端名称: &#123;DISCOVERY.SERVICE.NAME&#125;</span><br><span class="line">客户端端口: &#123;DISCOVERY.SERVICE.PORT&#125;</span><br><span class="line">客户端状态: &#123;DISCOVERY.SERVICE.STATUS&#125;</span><br><span class="line"></span><br><span class="line">操作动作</span><br><span class="line">添加主机,添加主机组，链接模板，发送邮件，等等</span><br></pre></td></tr></table></figure><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20230327203308430.png" alt="image-20230327203308430"></p><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20230327203312586.png" alt="image-20230327203312586"></p><h3 id="zabbix自动发现小结"><a href="#zabbix自动发现小结" class="headerlink" title="zabbix自动发现小结"></a>zabbix自动发现小结</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.网络发现速度太慢</span><br><span class="line">2.轮询扫描网段</span><br><span class="line">3.如果网段中存在不通的主机，会出现卡顿并且造成后续新增的服务器无法加入节点</span><br><span class="line">4.会导致server性能变缓慢，影响server性能</span><br></pre></td></tr></table></figure><h2 id="zabbix自动注册（主动）"><a href="#zabbix自动注册（主动）" class="headerlink" title="zabbix自动注册（主动）"></a>zabbix自动注册（主动）</h2><p>Zabbix agent可以自动注册到服务器进行监控。这种方式无需在服务器上手动配置它们。自动注册官方手册</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@web01 ~]<span class="comment"># vim /etc/zabbix/zabbix_agentd.conf</span></span><br><span class="line">Server=172.16.1.61  <span class="comment">## 被动模式</span></span><br><span class="line">ServerActive=172.16.1.61     <span class="comment">## 主动模式</span></span><br><span class="line">Hostname=web01</span><br><span class="line"></span><br><span class="line">Server=172.16.1.61  <span class="comment">## 被动模式</span></span><br><span class="line">ServerActive=172.16.1.61     <span class="comment">## 主动模式</span></span><br><span class="line">Hostname=&#123;&#123; ansible.fqdn &#125;&#125;</span><br></pre></td></tr></table></figure><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20230327203336168.png" alt="image-20230327203336168"></p><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20230327203340716.png" alt="image-20230327203340716"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Zabbix自动注册</span><br><span class="line">主机名：&#123;HOST.HOST&#125;</span><br><span class="line">主机IP：&#123;HOST.IP&#125;</span><br><span class="line">主机端口：&#123;HOST.PORT&#125;</span><br></pre></td></tr></table></figure><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20230327203411631.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      监控系统是整个运维环节，乃至整个产品生命周期中最重要的一环，事前及时预警发现故障，事后提供翔实的数据用于追查定位问题...
    
    </summary>
    
    
      <category term="SRE" scheme="http://yoursite.com/categories/SRE/"/>
    
    
      <category term="Linxu持续集成" scheme="http://yoursite.com/tags/Linxu%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/"/>
    
  </entry>
  
  <entry>
    <title>[MySQL数据库]</title>
    <link href="http://yoursite.com/2019/05/22/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <id>http://yoursite.com/2019/05/22/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93/</id>
    <published>2019-05-22T01:47:19.000Z</published>
    <updated>2019-05-23T02:41:52.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MySQL入门及安装"><a href="#MySQL入门及安装" class="headerlink" title="MySQL入门及安装"></a>MySQL入门及安装</h1><h2 id="什么是数据"><a href="#什么是数据" class="headerlink" title="什么是数据"></a>什么是数据</h2><p>数据(data)是事实或观察的结果，是对客观事物的逻辑归纳，是用于表示客观事物的未经加工的的原始素材。<br>数据可以是连续的值，比如声音、图像，称为模拟数据。也可以是离散的，如符号、文字，称为数字数据。<br>在计算机系统中，数据以二进制信息单元0,1的形式表示。</p><p><strong>数据的定义:</strong> 数据是指对客观事件进行记录并可以鉴别的符号，是对客观事物的性质、状态以及相互关系等进行记载的物理符号或这些物理符号的组合。它是可识别的、抽象的符号。*</p><h2 id="什么是数据库管理系统"><a href="#什么是数据库管理系统" class="headerlink" title="什么是数据库管理系统"></a>什么是数据库管理系统</h2><p><strong>DBMS（database management system）</strong></p><h2 id="数据库管理系统分类"><a href="#数据库管理系统分类" class="headerlink" title="数据库管理系统分类"></a>数据库管理系统分类</h2><ul><li><p>关系型数据库（RDBMS）</p><ul><li>以多张二维表的方式来存储，又给多张表建立了一定的关系（关系型数据库）</li></ul></li><li><p>非关系型数据库（NoSQL）</p><ul><li>左边rdbms右边nosql 很多以json格式进行存储数据的（mogodb）</li><li>key:value</li><li>姓名:周杰伦</li></ul></li></ul><h2 id="关系型数据库和非关系型数据库对比"><a href="#关系型数据库和非关系型数据库对比" class="headerlink" title="关系型数据库和非关系型数据库对比"></a>关系型数据库和非关系型数据库对比</h2><h3 id="功能对比"><a href="#功能对比" class="headerlink" title="功能对比"></a>功能对比</h3><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/%E6%88%AA%E5%B1%8F2023-03-10%2009.55.38.png" alt="截屏2023-03-10 09.55.38"></p><p>关系型数据库（RDBMS）的特点：</p><ul><li>二维表</li><li>典型产品Oracle传统企业，MySQL互联网企业</li><li>数据存取是通过SQL（Structured Query Language结构化查询语言）</li><li>最大特点数据安全性方面强（ACID）</li></ul><p>非关系型数据库（NoSQL：Not only SQL）的特点：</p><ul><li><p>不是否定关系型数据库，而是做关系型数据库的补充。</p></li><li><p>想做老大，先学会做老二</p></li><li><p><strong>时代特点对比:</strong></p></li><li><p>web1.0时代</p><ul><li>企业提供内容，用户浏览，所以关系型数据库够用，并发并不高，所以不需要nosql。</li></ul></li><li><p>web2.0时代</p><ul><li>核心是企业提供平台，用户参与提供内容，这个时代关系型数据库无法满足需求了。</li></ul></li><li><p>2003NoSQL出现</p><ul><li>memcache的诞生，关注的点是性能，但是针对安全性能关注比较低，随着安全性能需求不断提升，所以有了redis。</li></ul></li><li><p>redis的特点</p><ul><li>依然高性能高并发</li><li>数据持久化功能</li><li>支持多数据类型，主从复制和集群</li><li>管理不再使用SQL了</li></ul></li></ul><hr><p><strong>NoSQL特性总览</strong></p><ul><li><ol><li>不是否定关系型数据库，而是做关系型数据库的补充，现在也有部分替代的趋势mongodb。</li></ol></li><li><ol start="2"><li>关注高性能，高并发，灵活性，忽略和上述无关的功能。</li></ol></li><li><ol start="3"><li>现在也在提升安全性和使用功能。</li></ol></li><li><ol start="4"><li>典型产品：redis（持久化缓存，两个半天）、MongoDB（最接近关系型数据库的NoSQL）、memcached。</li></ol></li><li><ol start="5"><li>管理不适用SQL管理，而是用一些特殊的API或数据接口。</li></ol></li></ul><p><strong>NoSQL的分类、特点、典型产品</strong></p><ul><li>键值（KV）存储：memcached、redis</li><li>列存储（column-oriented）：HBASE（新浪、360）Cassandra（200台服务器集群）</li><li>文档数据库（document-oriented）：MongoDB（最接近关系型数据库的NoSQL）</li><li>图形存储（Graph）：Neo4j</li></ul><h2 id="MySQL安装"><a href="#MySQL安装" class="headerlink" title="MySQL安装"></a>MySQL安装</h2><ul><li>yum</li><li>源码</li><li>二进制</li></ul><h3 id="版本选型"><a href="#版本选型" class="headerlink" title="版本选型"></a>版本选型</h3><p>5.6：GA 6-12个月，小版本号是偶数版</p><p>5.7：GA 6-12个月，小版本号是偶数版，必须是5.7.20以上版本（MGR）</p><h3 id="MySQL源码安装"><a href="#MySQL源码安装" class="headerlink" title="MySQL源码安装"></a>MySQL源码安装</h3><p>MySQL官网：<a href="https://www.mysql.com/" target="_blank" rel="noopener">https://www.mysql.com/</a></p><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/%E6%88%AA%E5%B1%8F2023-03-10%2011.52.17.png" alt="截屏2023-03-10 11.52.17"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 0.安装MySQL依赖</span></span><br><span class="line">[root@m01 mysql-5.6.50]<span class="comment"># yum install -y cmake zlib-devel openssl-devel autoconf ncurses-devel</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.下载MySQL5.6</span></span><br><span class="line">[root@m01 ~]<span class="comment"># wget https://downloads.mysql.com/archives/get/p/23/file/mysql-5.6.50.tar.gz</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.解压</span></span><br><span class="line">[root@m01 ~]<span class="comment"># tar xf mysql-5.6.50.tar.gz </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.生成</span></span><br><span class="line"><span class="comment"># MySQL的安装目录</span></span><br><span class="line">cmake . -DCMAKE_INSTALL_PREFIX=/application/mysql-5.6.50 \</span><br><span class="line"><span class="comment">#数据存放位置</span></span><br><span class="line">-DMYSQL_DATADIR=/application/mysql-5.6.50/data \</span><br><span class="line"><span class="comment">#socket文件存放位置</span></span><br><span class="line">-DMYSQL_UNIX_ADDR=/application/mysql-5.6.50/tmp/mysql.sock \</span><br><span class="line"><span class="comment">#使用utf8字符集</span></span><br><span class="line">-DDEFAULT_CHARSET=utf8 \</span><br><span class="line"><span class="comment">#校验规则</span></span><br><span class="line">-DDEFAULT_COLLATION=utf8_general_ci \</span><br><span class="line"><span class="comment">#使用其他额外的字符集</span></span><br><span class="line">-DWITH_EXTRA_CHARSETS=all \</span><br><span class="line"><span class="comment">#支持的存储引擎</span></span><br><span class="line">-DWITH_INNOBASE_STORAGE_ENGINE=1 \</span><br><span class="line">-DWITH_FEDERATED_STORAGE_ENGINE=1 \</span><br><span class="line">-DWITH_BLACKHOLE_STORAGE_ENGINE=1 \</span><br><span class="line"><span class="comment">#禁用的存储引擎</span></span><br><span class="line">-DWITHOUT_EXAMPLE_STORAGE_ENGINE=1 \</span><br><span class="line"><span class="comment">#启用zlib库支持（zib、gzib相关）</span></span><br><span class="line">-DWITH_ZLIB=bundled \</span><br><span class="line"><span class="comment">#启用SSL库支持（安全套接层）</span></span><br><span class="line">-DWITH_SSL=bundled \</span><br><span class="line"><span class="comment">#启用本地数据导入支持</span></span><br><span class="line">-DENABLED_LOCAL_INFILE=1 \</span><br><span class="line"><span class="comment">#编译嵌入式服务器支持</span></span><br><span class="line">-DWITH_EMBEDDED_SERVER=1 \</span><br><span class="line"><span class="comment"># mysql5.6支持了google的c++mock框架了，允许下载，否则会安装报错。</span></span><br><span class="line">-DENABLE_DOWNLOADS=1 \</span><br><span class="line"><span class="comment">#禁用debug（默认为禁用）</span></span><br><span class="line">-DWITH_DEBUG=0</span><br><span class="line"></span><br><span class="line"><span class="comment">#删除cmake文件</span></span><br><span class="line">rm -f Cmake.txt</span><br><span class="line"></span><br><span class="line">cmake . -DCMAKE_INSTALL_PREFIX=/application/mysql-5.6.50 \</span><br><span class="line">-DMYSQL_DATADIR=/application/mysql-5.6.50/data \</span><br><span class="line">-DMYSQL_UNIX_ADDR=/application/mysql-5.6.50/tmp/mysql.sock \</span><br><span class="line">-DDEFAULT_CHARSET=utf8 \</span><br><span class="line">-DDEFAULT_COLLATION=utf8_general_ci \</span><br><span class="line">-DWITH_EXTRA_CHARSETS=all \</span><br><span class="line">-DWITH_INNOBASE_STORAGE_ENGINE=1 \</span><br><span class="line">-DWITH_FEDERATED_STORAGE_ENGINE=1 \</span><br><span class="line">-DWITH_BLACKHOLE_STORAGE_ENGINE=1 \</span><br><span class="line">-DWITHOUT_EXAMPLE_STORAGE_ENGINE=1 \</span><br><span class="line">-DWITH_ZLIB=bundled \</span><br><span class="line">-DWITH_SSL=system \</span><br><span class="line">-DENABLED_LOCAL_INFILE=1 \</span><br><span class="line">-DWITH_EMBEDDED_SERVER=1 \</span><br><span class="line">-DENABLE_DOWNLOADS=1 \</span><br><span class="line">-DWITH_DEBUG=0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.编译 &amp;&amp; 安装</span></span><br><span class="line">[root@m01 mysql-5.6.50]<span class="comment"># make &amp;&amp; make install</span></span><br><span class="line"></span><br><span class="line">====================================================== 华丽的分割线 ======================================================</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5.做软链接</span></span><br><span class="line">[root@m01 mysql-5.6.50]<span class="comment"># ln -s /application/mysql-5.6.50 /application/mysql</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#### 目录结构</span></span><br><span class="line">[root@m01 mysql-5.6.50]<span class="comment"># cd /application/mysql</span></span><br><span class="line">[root@m01 mysql]<span class="comment"># ll</span></span><br><span class="line">total 220</span><br><span class="line">drwxr-xr-x  2 root root   4096 Aug  2 12:48 bin</span><br><span class="line">drwxr-xr-x  3 root root     18 Aug  2 12:48 data</span><br><span class="line">drwxr-xr-x  2 root root     55 Aug  2 12:48 docs</span><br><span class="line">drwxr-xr-x  3 root root   4096 Aug  2 12:48 include</span><br><span class="line">drwxr-xr-x  3 root root    291 Aug  2 12:48 lib</span><br><span class="line">-rw-r--r--  1 root root 198041 Sep 23  2020 LICENSE</span><br><span class="line">drwxr-xr-x  4 root root     30 Aug  2 12:48 man</span><br><span class="line">drwxr-xr-x 10 root root   4096 Aug  2 12:48 mysql-test</span><br><span class="line">-rw-r--r--  1 root root    587 Sep 23  2020 README</span><br><span class="line">drwxr-xr-x  2 root root     30 Aug  2 12:48 scripts</span><br><span class="line">drwxr-xr-x 28 root root   4096 Aug  2 12:48 share</span><br><span class="line">drwxr-xr-x  4 root root   4096 Aug  2 12:48 sql-bench</span><br><span class="line">drwxr-xr-x  2 root root    136 Aug  2 12:48 support-files</span><br><span class="line"></span><br><span class="line"><span class="comment"># 6.拷贝配置文件</span></span><br><span class="line">[root@m01 mysql]<span class="comment"># cp support-files/my-default.cnf /etc/my.cnf</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 7.拷贝启动脚本</span></span><br><span class="line">[root@m01 mysql]<span class="comment"># cp support-files/mysql.server /etc/init.d/mysqld</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 8.做初始化</span></span><br><span class="line">+------------------+</span><br><span class="line">|   Database       |</span><br><span class="line">+------------------+</span><br><span class="line">|information_schema|</span><br><span class="line">|performence_schema|</span><br><span class="line">|<span class="built_in">test</span>              |</span><br><span class="line">|mysql             |</span><br><span class="line">+------------------+</span><br><span class="line"></span><br><span class="line">[root@m01 scripts]<span class="comment"># cd /application/mysql-5.6.50/scripts</span></span><br><span class="line">[root@m01 scripts]<span class="comment"># ./mysql_install_db --basedir=/application/mysql --datadir=/application/mysql/data</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 9.创建socket存放目录</span></span><br><span class="line">[root@m01 scripts]<span class="comment"># mkdir /application/mysql-5.6.50/tmp</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 10.创建MySQL用户</span></span><br><span class="line">[root@m01 scripts]<span class="comment"># useradd mysql -s /sbin/nologin -M</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 11.授权MySQL安装目录</span></span><br><span class="line">[root@m01 scripts]<span class="comment"># chown mysql.mysql -R /application/mysql-5.6.50/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 12.启动数据库</span></span><br><span class="line">[root@m01 scripts]<span class="comment"># /etc/init.d/mysqld start</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 13.添加环境变量</span></span><br><span class="line">[root@m01 scripts]<span class="comment"># echo 'PATH="/application/mysql/bin:$PATH"' &gt;&gt; /etc/profile.d/mysql.sh</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 14.加载环境变量</span></span><br><span class="line">[root@m01 scripts]<span class="comment"># source /etc/profile</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 15.连接数据库</span></span><br><span class="line">[root@m01 scripts]<span class="comment"># mysql</span></span><br><span class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</span><br><span class="line">Your MySQL connection id is 1</span><br><span class="line">Server version: 5.6.50 Source distribution</span><br><span class="line">Copyright (c) 2000, 2020, Oracle and/or its affiliates. All rights reserved.</span><br><span class="line">Oracle is a registered trademark of Oracle Corporation and/or its</span><br><span class="line">affiliates. Other names may be trademarks of their respective</span><br><span class="line">owners.</span><br><span class="line">Type <span class="string">'help;'</span> or <span class="string">'\h'</span> <span class="keyword">for</span> <span class="built_in">help</span>. Type <span class="string">'\c'</span> to clear the current input statement.</span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure><p><strong>初始化报错</strong></p><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/%E6%88%AA%E5%B1%8F2023-03-10%2014.38.58.png" alt="截屏2023-03-10 14.38.58"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#没有安装Perl模块</span></span><br><span class="line">[root@m01 scripts]<span class="comment"># yum install -y autoconf</span></span><br></pre></td></tr></table></figure><h3 id="MySQL二进制安装"><a href="#MySQL二进制安装" class="headerlink" title="MySQL二进制安装"></a>MySQL二进制安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 0.安装依赖</span></span><br><span class="line">[root@db02 scripts]<span class="comment"># yum install -y autoconf libaio-devel</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.下载</span></span><br><span class="line">[root@db02 ~]<span class="comment"># wget https://downloads.mysql.com/archives/get/p/23/file/mysql-5.6.50-linux-glibc2.12-x86_64.tar.gz</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.解压</span></span><br><span class="line">[root@db02 ~]<span class="comment"># tar xf mysql-5.6.50-linux-glibc2.12-x86_64.tar.gz</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.创建安装目录</span></span><br><span class="line">[root@db02 ~]<span class="comment"># mkdir /application</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.移动到安装目录</span></span><br><span class="line">[root@db02 ~]<span class="comment"># mv mysql-5.6.50-linux-glibc2.12-x86_64 /application/mysql-5.6.50</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 5.做软链接</span></span><br><span class="line">[root@db02 ~]<span class="comment"># ln -s /application/mysql-5.6.50 /application/mysql</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 6.拷贝配置文件</span></span><br><span class="line">[root@db02 mysql]<span class="comment"># cp support-files/my-default.cnf /etc/my.cnf</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 7.拷贝脚本</span></span><br><span class="line">[root@db02 mysql]<span class="comment"># cp support-files/mysql.server /etc/init.d/mysqld</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 8.创建MySQL用户</span></span><br><span class="line">[root@db02 scripts]<span class="comment"># useradd mysql -s /sbin/nologin -M</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 9.初始化</span></span><br><span class="line">[root@db02 scripts]<span class="comment"># ./mysql_install_db --basedir=/application/mysql --datadir=/application/mysql/data</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 10.替换脚本中的/usr/local为/application</span></span><br><span class="line">:%s<span class="comment">#/usr/local#/application#g</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 11.授权</span></span><br><span class="line">[root@db02 scripts]<span class="comment"># chown -R mysql.mysql /application/mysql-5.6.50/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 12.添加环境变量</span></span><br><span class="line">[root@db02 scripts]<span class="comment"># echo 'PATH="/application/mysql/bin:$PATH"' &gt;&gt; /etc/profile.d/mysql.sh</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 13.加载环境变量</span></span><br><span class="line">[root@db02 scripts]<span class="comment"># source /etc/profile</span></span><br></pre></td></tr></table></figure><h3 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 查看MySQL用户</span></span><br><span class="line">mysql&gt; select user,host from mysql.user;</span><br><span class="line">+------+-----------+</span><br><span class="line">| user | host      |</span><br><span class="line">+------+-----------+</span><br><span class="line">| root | 127.0.0.1 |</span><br><span class="line">| root | ::1       |</span><br><span class="line">|      | localhost |</span><br><span class="line">| root | localhost |</span><br><span class="line">|      | m01       |</span><br><span class="line">| root | m01       |</span><br><span class="line">+------+-----------+</span><br><span class="line"></span><br><span class="line"><span class="comment">## 优化MySQL用户</span></span><br><span class="line">mysql&gt; truncate mysql.user;</span><br><span class="line"></span><br><span class="line"><span class="comment">## 退出重启</span></span><br><span class="line">[root@m01 scripts]<span class="comment"># /etc/init.d/mysqld restart</span></span><br><span class="line">Shutting down MySQL. SUCCESS! </span><br><span class="line">Starting MySQL.. SUCCESS!</span><br></pre></td></tr></table></figure><h1 id="MySQL体系管理"><a href="#MySQL体系管理" class="headerlink" title="MySQL体系管理"></a>MySQL体系管理</h1><h2 id="客户端与服务端模型"><a href="#客户端与服务端模型" class="headerlink" title="客户端与服务端模型"></a>客户端与服务端模型</h2><p>C/S架构的服务</p><p>Client/Server</p><h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><ul><li>mysql</li><li>mysqladmin</li><li>mysqldump</li></ul><h3 id="MySQL的连接方式"><a href="#MySQL的连接方式" class="headerlink" title="MySQL的连接方式"></a>MySQL的连接方式</h3><ul><li>TCP/IP</li></ul><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/%E6%88%AA%E5%B1%8F2023-03-12%2016.21.18.png" alt="截屏2023-03-12 16.21.18"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -p123 -h10.0.0.51</span><br></pre></td></tr></table></figure><ul><li>Socket</li></ul><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/%E6%88%AA%E5%B1%8F2023-03-12%2016.21.33.png" alt="截屏2023-03-12 16.21.33"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -p123 -S /application/mysql/tmp/mysql.sock</span><br></pre></td></tr></table></figure><h3 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">1.mysql默认的连接方式是什么？  <span class="comment"># Socket</span></span><br><span class="line">不需要经过TCP三次握手四次挥手</span><br><span class="line"></span><br><span class="line">2.mysql -uroot -p123  <span class="comment"># Socket</span></span><br><span class="line">什么都不加，走默认连接方式</span><br><span class="line"></span><br><span class="line">3.mysql -uroot -p123 -hlocalhost  <span class="comment"># Socket</span></span><br><span class="line">不是所有的-h都是TCP</span><br><span class="line"></span><br><span class="line">4.mysql -uroot -p123 -h127.0.0.1  <span class="comment"># TCP</span></span><br><span class="line">只要-h后面加IP地址，就是TCP</span><br><span class="line"></span><br><span class="line"><span class="comment">## 错误写法</span></span><br><span class="line">5.mysql -uroot -p123 -h10.0.0.61 -S /application/mysql/tmp/mysql.sock  <span class="comment"># TCP</span></span><br><span class="line">6.mysql -uroot -p123 -S /application/mysql/tmp/mysql.sock -h10.0.0.61  <span class="comment"># TCP</span></span><br><span class="line">只要加-h后面是IP地址，不管socket写在什么位置，一律TCP连接</span><br></pre></td></tr></table></figure><h2 id="MySQL服务器构成"><a href="#MySQL服务器构成" class="headerlink" title="MySQL服务器构成"></a>MySQL服务器构成</h2><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/1734bff308eb9e2d.jpg" alt=""></p><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/1734bff309fc730f.jpg" alt=""></p><h2 id="mysqld守护进程的程序结构"><a href="#mysqld守护进程的程序结构" class="headerlink" title="mysqld守护进程的程序结构"></a>mysqld守护进程的程序结构</h2><ul><li><strong>连接层</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1.提供两种连接方式</span><br><span class="line">- TCP</span><br><span class="line">- Socket</span><br><span class="line">2.验证用户的合法性</span><br><span class="line">3.提供了一个专用的线程，接收SQL和SQL层交互</span><br></pre></td></tr></table></figure><ul><li><strong>SQL层</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">1.接收连接层传递来的有权限的SQL语句</span><br><span class="line">2.验证SQL语句（syntax）的语法</span><br><span class="line">3.验证SQL语句的语义，执行的是查询，删除，修改....之类的操作</span><br><span class="line">- DML  <span class="comment">#改数据</span></span><br><span class="line">- DDL  <span class="comment">#改库改表</span></span><br><span class="line">- DCL  <span class="comment">#权限相关</span></span><br><span class="line">- DQL  <span class="comment">#查询相关</span></span><br><span class="line">- DTL  <span class="comment">#事务相关</span></span><br><span class="line">4.解析器，解析SQL语句，生成多种执行计划</span><br><span class="line">5.优化器，根据解析器生成的多种执行计划，选择最优的一条</span><br><span class="line">6.执行器，执行最优的一条SQL语句</span><br><span class="line">- 提供一个专用的线程，和存储引擎层交互</span><br><span class="line">7.接收存储引擎层返回的数据，将数据传递给连接层</span><br><span class="line">8.如果前面有缓存，将数据写入缓存一份</span><br><span class="line">9.如果开启了binlog，记录日志（binlog）</span><br></pre></td></tr></table></figure><ul><li><strong>存储引擎层</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.接收SQL层传递来的SQL语句信息</span><br><span class="line">2.去对应的库下找对应的表中数据，结构化成表的形式，返回给SQL层</span><br><span class="line">3.提供了一个专用的线程，和SQL交互</span><br></pre></td></tr></table></figure><h2 id="MySQL的结构"><a href="#MySQL的结构" class="headerlink" title="MySQL的结构"></a>MySQL的结构</h2><ul><li><p>逻辑结构</p><ul><li>MySQL数据库管理员的操作对象<ul><li>库</li><li>表<ul><li>元数据<ul><li>列（字段，列名）</li><li>其它属性（数据类型、是否非空、默认值、主键、唯一、自增…….）</li></ul></li><li>真实数据</li></ul></li></ul></li></ul></li><li><p>物理结构</p><ul><li>最底层的数据文件</li></ul></li></ul><h3 id="MySQL-表结构划分"><a href="#MySQL-表结构划分" class="headerlink" title="MySQL 表结构划分"></a>MySQL 表结构划分</h3><p>段：由多个区构成，一张表，就是一个段</p><p>区：由多个页构成，一个区，由64个页构成，1M</p><p>块、页 block：MySQL最小的存储单元，默认16k</p><h2 id="使用systemd管理MySQL"><a href="#使用systemd管理MySQL" class="headerlink" title="使用systemd管理MySQL"></a>使用systemd管理MySQL</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@m01 ~]<span class="comment"># vim /usr/lib/systemd/system/mysqld.service</span></span><br><span class="line">[Unit]</span><br><span class="line">Description=MySQL Server</span><br><span class="line">Documentation=man:mysqld(8)</span><br><span class="line">Documentation=http://dev.mysql.com/doc/refman/en/using-systemd.html</span><br><span class="line">After=network.target</span><br><span class="line">After=syslog.target</span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line">[Service]</span><br><span class="line">User=mysql</span><br><span class="line">Group=mysql</span><br><span class="line">ExecStart=/application/mysql/bin/mysqld --defaults-file=/etc/my.cnf</span><br><span class="line">LimitNOFILE = 5000</span><br></pre></td></tr></table></figure><h1 id="MySQL-版本区别及管理"><a href="#MySQL-版本区别及管理" class="headerlink" title="MySQL 版本区别及管理"></a>MySQL 版本区别及管理</h1><h2 id="MySQL5-6与MySQL5-7安装的区别"><a href="#MySQL5-6与MySQL5-7安装的区别" class="headerlink" title="MySQL5.6与MySQL5.7安装的区别"></a>MySQL5.6与MySQL5.7安装的区别</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.编译，需要下载boost</span></span><br><span class="line"><span class="comment"># 2.编译参数</span></span><br><span class="line">cmake . -DCMAKE_INSTALL_PREFIX=/app/mysql-5.7.40 \</span><br><span class="line">-DMYSQL_DATADIR=/app/mysql-5.7.40/data \</span><br><span class="line">-DMYSQL_UNIX_ADDR=/app/mysql-5.7.40/tmp/mysql.sock \</span><br><span class="line">-DDOWNLOAD_BOOST=1 \   <span class="comment">## mysql-5.7.38.tar.gz没有boost需要添加该参数</span></span><br><span class="line">-DWITH_BOOST=/root/mysql-5.7.40/boost/boost_1_59_0 \</span><br><span class="line">-DDEFAULT_CHARSET=utf8 \</span><br><span class="line">-DDEFAULT_COLLATION=utf8_general_ci \</span><br><span class="line">-DWITH_EXTRA_CHARSETS=all \</span><br><span class="line">-DWITH_INNOBASE_STORAGE_ENGINE=1 \</span><br><span class="line">-DWITH_FEDERATED_STORAGE_ENGINE=1 \</span><br><span class="line">-DWITH_BLACKHOLE_STORAGE_ENGINE=1 \</span><br><span class="line">-DWITHOUT_EXAMPLE_STORAGE_ENGINE=1 \</span><br><span class="line">-DWITH_ZLIB=bundled \</span><br><span class="line">-DWITH_SSL=system \</span><br><span class="line">-DENABLED_LOCAL_INFILE=1 \</span><br><span class="line">-DWITH_EMBEDDED_SERVER=1 \</span><br><span class="line">-DENABLE_DOWNLOADS=1 \</span><br><span class="line">-DWITH_DEBUG=0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.初始化</span></span><br><span class="line">5.6：mysql_install_db</span><br><span class="line">5.7：mysqld --initialize  <span class="comment">## 有初始密码</span></span><br><span class="line">5.7：mysqld --initialize-insecure  <span class="comment">## 没有初始密码</span></span><br></pre></td></tr></table></figure><h2 id="yum安装MySQL"><a href="#yum安装MySQL" class="headerlink" title="yum安装MySQL"></a>yum安装MySQL</h2><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20230330125602024.png" alt="image-20230330125602024"></p><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20230330125629862.png" alt="image-20230330125629862"></p><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20230330125635042.png" alt="image-20230330125635042"></p><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20230330125657255.png" alt="image-20230330125657255"></p><p><img src="https://roger-hub.oss-cn-shanghai.aliyuncs.com/img_sre/image-20230330125704377.png" alt="image-20230330125704377"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.下载MySQL的yum源</span></span><br><span class="line">[root@db01 ~]<span class="comment"># wget https://dev.mysql.com/get/mysql80-community-release-el7-6.noarch.rpm</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.安装MySQL的yum源</span></span><br><span class="line">[root@db01 ~]<span class="comment"># rpm -ivh mysql80-community-release-el7-6.noarch.rpm</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.查看仓库中mysql版本</span></span><br><span class="line">[root@db01 ~]<span class="comment"># yum list|grep mysql</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.修改yum源</span></span><br><span class="line">[root@db01 yum.repos.d]<span class="comment"># vim mysql-community.repo</span></span><br><span class="line"></span><br><span class="line">[mysql57-community]</span><br><span class="line">enabled=0 改成 1</span><br><span class="line"></span><br><span class="line">[mysql80-community]</span><br><span class="line">enabled=1 改成 0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5.安装mysql5.7</span></span><br><span class="line">[root@db01 yum.repos.d]<span class="comment"># yum install -y mysql-server</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 6.查看日志</span></span><br><span class="line">[root@db01 yum.repos.d]<span class="comment"># cat  /var/log/mysqld.log</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 7.找密码</span></span><br><span class="line">[root@db01 yum.repos.d]<span class="comment"># grep 'root' /var/log/mysqld.log </span></span><br><span class="line">2022-08-04T09:48:49.008364Z 1 [Note] A temporary password is generated <span class="keyword">for</span> root@localhost: Q6&gt;kAhmpY:0w</span><br><span class="line"></span><br><span class="line"><span class="comment"># 8.连接</span></span><br><span class="line">[root@db01 yum.repos.d]<span class="comment"># mysql -uroot -p'Q6&gt;kAhmpY:0w'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 9.修改配置文件MySQL使用简单密码</span></span><br><span class="line">validate_password_length=1</span><br><span class="line">validate_password_mixed_case_count=0</span><br><span class="line">validate_password_number_count=0       </span><br><span class="line">validate_password_special_char_count=0 </span><br><span class="line"></span><br><span class="line">[root@db01 yum.repos.d]<span class="comment"># systemctl restart mysqld</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 10.改密码</span></span><br><span class="line">mysql&gt; alter user root@<span class="string">'localhost'</span> identified by <span class="string">'123@qqdianCOM'</span>;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; alter user root@<span class="string">'localhost'</span> identified by <span class="string">'123'</span>;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure><h2 id="MySQL用户权限管理"><a href="#MySQL用户权限管理" class="headerlink" title="MySQL用户权限管理"></a>MySQL用户权限管理</h2><h3 id="MySQL用户操作"><a href="#MySQL用户操作" class="headerlink" title="MySQL用户操作"></a>MySQL用户操作</h3><p><strong>Linux用户的作用:</strong></p><ul><li>1）登陆系统</li><li>2）管理系统文件</li></ul><p><strong>Linux用户管理：</strong></p><ul><li>1）创建用户：useradd adduser</li><li>2）删除用户：userdel</li><li>3）修改用户：usermod</li></ul><p><strong>MySQL用户的作用:</strong></p><ul><li>1）登陆MySQL数据库</li><li>2）管理数据库对象</li></ul><p><strong>MySQL中的用户定义</strong></p><p>在MySQL中，用户不仅仅是用户名</p><p>用户名@主机域</p><p>主机域：</p><ul><li>localhost</li><li>127.0.0.1</li><li>%</li><li>10.0.0.%</li><li>10.0.%.%</li><li>10.%.%.%</li><li>10.0.0.5%    (10.0.0.50-10.0.0.59 包括 10.0.0.5)</li><li>db01(不能直接连，需要做解析)</li><li>10.0.0.0/255.255.255.0   == 10.0.0.%</li><li>10.0.0.0/24 (不支持)</li></ul><h3 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h3><p><strong>增</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 5.6创建用户</span></span><br><span class="line">mysql&gt; create user roger2@'localhost';</span><br><span class="line">mysql&gt; create user roger2@'localhost' identified by '123';</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5.7创建用户（必须给密码创建）</span></span><br><span class="line">mysql&gt; create user roger2@'localhost' identified by '123';</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意：以前的5.7不支持grant在用户不存在的情况下执行，现在版本支持</span></span><br><span class="line"></span><br><span class="line">mysql&gt; grant all on *.* to roger3@'localhost' identified by '123';</span><br><span class="line"></span><br><span class="line"><span class="keyword">grant</span>授权命令</span><br><span class="line"><span class="keyword">all</span> == <span class="keyword">all</span> <span class="keyword">privileges</span>：所有权限，但不包括授权权限</span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">all</span> <span class="keyword">on</span> root@<span class="string">'localhost'</span> <span class="keyword">identified</span> <span class="keyword">by</span> <span class="string">'123'</span> <span class="keyword">with</span> <span class="keyword">grant</span> <span class="keyword">option</span>;</span><br><span class="line">*.*：所有库，下面所有表</span><br><span class="line">wordpress.*</span><br><span class="line">wordpress.user</span><br><span class="line">roger3@'localhost'：完整用户</span><br><span class="line">identified by '123'：密码123</span><br></pre></td></tr></table></figure><p><strong>删</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># drop user 用户名@'主机域';</span></span><br><span class="line">mysql&gt; drop user roger1@'10.0.0.0/255.255.255.0';    相当于在linux删系统用户 userdel -r roger</span><br><span class="line"></span><br><span class="line"><span class="comment"># 直接操作表删除用户：</span></span><br><span class="line">mysql&gt; delete from mysql.user where user='roger2' and host='localhost';  相当于在linux删系统用户，直接从/etc/passwd中删</span><br></pre></td></tr></table></figure><p><strong>改</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 改权限</span></span><br><span class="line"><span class="comment"># 添加权限</span></span><br><span class="line">mysql&gt; grant update on *.* to roger4@'localhost';</span><br><span class="line"></span><br><span class="line"><span class="comment"># 回收权限</span></span><br><span class="line">mysql&gt; revoke select on *.* from roger4@'localhost';</span><br><span class="line"></span><br><span class="line"><span class="comment">## 改密码</span></span><br><span class="line">[root@db01 ~]<span class="comment"># mysqladmin -uroot -p123 password '456'</span></span><br><span class="line">mysql&gt; grant all on *.* to root@'localhost' identified by '789';</span><br><span class="line">mysql&gt; alter user root@'localhost' identified by '123';</span><br><span class="line"></span><br><span class="line"><span class="comment"># 只能修改当前连接上的用户</span></span><br><span class="line">mysql&gt; set password=PASSWORD('JQK');</span><br><span class="line"></span><br><span class="line"><span class="comment"># 只有使用update想修改密码时，才需要执行flush privilege;</span></span><br><span class="line">5.6:</span><br><span class="line">mysql&gt; update mysql.user set password=PASSWORD('abc') where user='root' and host='localhost';</span><br><span class="line">mysql&gt; flush privileges;</span><br><span class="line"></span><br><span class="line">5.7:</span><br><span class="line">mysql&gt; update mysql.user set authentication_string=PASSWORD('abc') where user='root' and host='localhost';</span><br><span class="line">mysql&gt; flush privileges;</span><br></pre></td></tr></table></figure><h3 id="忘记root密码"><a href="#忘记root密码" class="headerlink" title="忘记root密码"></a>忘记root密码</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 方法一:</span></span><br><span class="line">[root@db01 ~]<span class="comment"># /etc/init.d/mysqld stop</span></span><br><span class="line">[root@db01 ~]<span class="comment"># ./mysqld_safe --skip-grant-tables  --skip-networking &amp;</span></span><br><span class="line">[root@db01 ~]<span class="comment"># mysql</span></span><br><span class="line">mysql&gt; INSERT INTO mysql.user SET User='root',Host='localhost',ssl_cipher='',x509_issuer='',x509_subject='';</span><br><span class="line">mysql&gt; insert into mysql.user</span><br><span class="line"><span class="keyword">values</span> (</span><br><span class="line"><span class="string">'root'</span>,</span><br><span class="line"><span class="string">'localhost'</span>,</span><br><span class="line"><span class="keyword">PASSWORD</span>(<span class="string">'123'</span>),</span><br><span class="line"><span class="string">'Y'</span>,</span><br><span class="line"><span class="string">'Y'</span>,</span><br><span class="line"><span class="string">'Y'</span>,</span><br><span class="line"><span class="string">'Y'</span>,</span><br><span class="line"><span class="string">'Y'</span>,</span><br><span class="line"><span class="string">'Y'</span>,</span><br><span class="line"><span class="string">'Y'</span>,</span><br><span class="line"><span class="string">'Y'</span>,</span><br><span class="line"><span class="string">'Y'</span>,</span><br><span class="line"><span class="string">'Y'</span>,</span><br><span class="line"><span class="string">'Y'</span>,</span><br><span class="line"><span class="string">'Y'</span>,</span><br><span class="line"><span class="string">'Y'</span>,</span><br><span class="line"><span class="string">'Y'</span>,</span><br><span class="line"><span class="string">'Y'</span>,</span><br><span class="line"><span class="string">'Y'</span>,</span><br><span class="line"><span class="string">'Y'</span>,</span><br><span class="line"><span class="string">'Y'</span>,</span><br><span class="line"><span class="string">'Y'</span>,</span><br><span class="line"><span class="string">'Y'</span>,</span><br><span class="line"><span class="string">'Y'</span>,</span><br><span class="line"><span class="string">'Y'</span>,</span><br><span class="line"><span class="string">'Y'</span>,</span><br><span class="line"><span class="string">'Y'</span>,</span><br><span class="line"><span class="string">'Y'</span>,</span><br><span class="line"><span class="string">'Y'</span>,</span><br><span class="line"><span class="string">'Y'</span>,</span><br><span class="line"><span class="string">'Y'</span>,</span><br><span class="line"><span class="string">'Y'</span>,</span><br><span class="line"><span class="string">''</span>,</span><br><span class="line"><span class="string">''</span>,</span><br><span class="line"><span class="string">''</span>,</span><br><span class="line"><span class="string">''</span>,</span><br><span class="line"><span class="number">0</span>,</span><br><span class="line"><span class="number">0</span>,</span><br><span class="line"><span class="number">0</span>,</span><br><span class="line"><span class="number">0</span>,</span><br><span class="line"><span class="string">'mysql_native_password'</span>,</span><br><span class="line"><span class="string">''</span>,</span><br><span class="line"><span class="string">'N'</span>);</span><br><span class="line">mysql&gt; flush privileges;</span><br><span class="line"></span><br><span class="line"><span class="comment">## MySQL5.7 密码字段</span></span><br><span class="line">authentication_string: *THISISNOTAVALIDPASSWORDTHATCANBEUSEDHERE</span><br><span class="line"></span><br><span class="line"><span class="comment"># 7.重启数据库</span></span><br><span class="line">root@db02,172.16.1.52:~ <span class="comment"># /etc/init.d/mysqld restart</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 方法二:</span></span><br><span class="line"><span class="comment"># 刷新授权表</span></span><br><span class="line">mysql&gt; flush privileges;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; grant all on *.* to root@'localhost' identified by '123';</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; grant all on *.* to root@'localhost' identified by '123'</span><br><span class="line"><span class="keyword">with</span> <span class="keyword">grant</span> <span class="keyword">option</span>;</span><br><span class="line"></span><br><span class="line">mysql&gt; update mysql.user set grant_priv='Y' where user='root' and</span><br><span class="line">host='localhost';</span><br><span class="line"></span><br><span class="line">mysql&gt; flush privileges;</span><br></pre></td></tr></table></figure><p><strong>查</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看所有用户</span></span><br><span class="line">mysql&gt; select * from mysql.user\G</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看指定字段</span></span><br><span class="line">mysql&gt; select user,host from mysql.user;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看用户的权限</span></span><br><span class="line">mysql&gt; show grants for root@'localhost';</span><br></pre></td></tr></table></figure><h3 id="用户的权限"><a href="#用户的权限" class="headerlink" title="用户的权限"></a>用户的权限</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span>,<span class="keyword">SELECT</span>, <span class="keyword">UPDATE</span>, <span class="keyword">DELETE</span>, <span class="keyword">CREATE</span>, <span class="keyword">DROP</span>, RELOAD, <span class="keyword">SHUTDOWN</span>,  PROCESS, <span class="keyword">FILE</span>, <span class="keyword">REFERENCES</span>, <span class="keyword">INDEX</span>, <span class="keyword">ALTER</span>, <span class="keyword">SHOW</span> <span class="keyword">DATABASES</span>, SUPER, <span class="keyword">CREATE</span> <span class="keyword">TEMPORARY</span> <span class="keyword">TABLES</span>, <span class="keyword">LOCK</span> <span class="keyword">TABLES</span>, <span class="keyword">EXECUTE</span>, <span class="keyword">REPLICATION</span> <span class="keyword">SLAVE</span>, <span class="keyword">REPLICATION</span> <span class="keyword">CLIENT</span>, <span class="keyword">CREATE</span> <span class="keyword">VIEW</span>, <span class="keyword">SHOW</span> <span class="keyword">VIEW</span>, <span class="keyword">CREATE</span> ROUTINE, <span class="keyword">ALTER</span> ROUTINE, <span class="keyword">CREATE</span> <span class="keyword">USER</span>, <span class="keyword">EVENT</span>, <span class="keyword">TRIGGER</span>, <span class="keyword">CREATE</span> <span class="keyword">TABLESPACE</span></span><br></pre></td></tr></table></figure><p><strong>作用对象分解</strong></p><p><code>*.*</code> [当前MySQL实例中所有库下的所有表]<br>wordpress.* [当前MySQL实例中wordpress库中所有表（单库级别）]<br>wordpress.user [当前MySQL实例中wordpress库中的user表（单表级别）]</p><p><strong>脱敏</strong>：脱离敏感信息</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; grant select(user,host) on mysql.user to test@'%' identified by '123';  ## 单字段级别</span><br></pre></td></tr></table></figure><p><strong>企业中给开发开权限</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span>,<span class="keyword">SELECT</span>, <span class="keyword">UPDATE</span>, <span class="keyword">DELETE</span></span><br><span class="line"><span class="keyword">INSERT</span>,<span class="keyword">SELECT</span>, <span class="keyword">UPDATE</span></span><br></pre></td></tr></table></figure><p>开发：请给我开一个用户</p><p>沟通：</p><ul><li>1.你需要对哪些库、表进行操作</li><li>2.你从哪里连接过来</li><li>3.用户名有没有要求</li><li>4.密码要求</li><li>5.发邮件<code>(*****)</code></li></ul><p>开发：你把root用户给我呗？</p><h3 id="权限小练习"><a href="#权限小练习" class="headerlink" title="权限小练习"></a>权限小练习</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建wordpress数据库</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> wordpress;</span><br><span class="line"><span class="comment">#使用wordpress库</span></span><br><span class="line"><span class="keyword">use</span> wordpress;</span><br><span class="line"><span class="comment">#创建t1、t2表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t1 (<span class="keyword">id</span> <span class="built_in">int</span>);</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t2 (<span class="keyword">id</span> <span class="built_in">int</span>);</span><br><span class="line"><span class="comment">#创建blog库</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> blog;</span><br><span class="line"><span class="comment">#使用blog库</span></span><br><span class="line"><span class="keyword">use</span> blog;</span><br><span class="line"><span class="comment">#创建t1表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tb1 (<span class="keyword">id</span> <span class="built_in">int</span>);</span><br><span class="line"></span><br><span class="line">wordpress库</span><br><span class="line">- t1表</span><br><span class="line">- t2表</span><br><span class="line">blog库</span><br><span class="line">- tb1表</span><br><span class="line"></span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">select</span> <span class="keyword">on</span> *.* <span class="keyword">to</span> wordpress@<span class="string">'10.0.0.5%'</span> <span class="keyword">identified</span> <span class="keyword">by</span> <span class="string">'123'</span>;</span><br><span class="line">给wordpress@'10.0.0.5%'用户查看所有库下的所有表权限,密码是123</span><br><span class="line"></span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">insert</span>,<span class="keyword">delete</span>,<span class="keyword">update</span> <span class="keyword">on</span> wordpress.* <span class="keyword">to</span> wordpress@<span class="string">'10.0.0.5%'</span> <span class="keyword">identified</span> <span class="keyword">by</span> <span class="string">'123'</span>;</span><br><span class="line">给wordpress@'10.0.0.5%'用户wordpress库下的所有表<span class="keyword">insert</span>,<span class="keyword">delete</span>,<span class="keyword">update</span>权限，密码是<span class="number">123</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">all</span> <span class="keyword">on</span> wordpress.t1 <span class="keyword">to</span> wordpress@<span class="string">'10.0.0.5%'</span> <span class="keyword">identified</span> <span class="keyword">by</span> <span class="string">'123'</span>;</span><br><span class="line">给wordpress@'10.0.0.5%'用户wordpress库下的t1表所有的权限，密码是123</span><br><span class="line"></span><br><span class="line">问：</span><br><span class="line">一个客户端程序使用wordpress用户登陆到10.0.0.51的MySQL后，</span><br><span class="line"></span><br><span class="line">1.对t1表的管理能力？    <span class="comment"># 所有权限 1+2+3</span></span><br><span class="line">2.对t2表的管理能力？    <span class="comment"># select，insert,delete,update   1+2</span></span><br><span class="line">3.对tb1表的管理能力？   <span class="comment"># select  1</span></span><br><span class="line"></span><br><span class="line">结论：</span><br><span class="line">1.如果在不同级别都包含某个表的管理能力时，权限是相加关系。</span><br><span class="line">2.但是我们不推荐在多级别定义重复权限。</span><br><span class="line">3.最常用的权限设定方式是单库级别授权，即：wordpress.*</span><br></pre></td></tr></table></figure><h2 id="MySQL多实例"><a href="#MySQL多实例" class="headerlink" title="MySQL多实例"></a>MySQL多实例</h2><p><strong>单实例：</strong>一个后台进程 + 多个线程 + 一个预分配的内存结构</p><p><strong>多实例：</strong>多个后台进程 + 多个线程 + 多个预分配的内存结构</p><p>多个配置文件</p><ul><li>多个端口</li><li>data目录</li><li>socket文件</li><li>多个日志文件</li><li>pid文件</li></ul><p>多个启动脚本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.准备多个配置文件</span></span><br><span class="line">[root@m01 ~]<span class="comment"># vim /data/3307/my.cnf</span></span><br><span class="line">[mysqld]</span><br><span class="line">basedir=/app/mysql</span><br><span class="line">datadir=/data/3307/data</span><br><span class="line">socket=/data/3307/data/3307.sock</span><br><span class="line">log_error=/data/3307/data/3307.err</span><br><span class="line">pid_file=/data/3307/data/3307.pid</span><br><span class="line">port=3307</span><br><span class="line"></span><br><span class="line">[root@m01 ~]<span class="comment"># vim /data/3308/my.cnf</span></span><br><span class="line">[mysqld]</span><br><span class="line">basedir=/app/mysql</span><br><span class="line">datadir=/data/3308/data</span><br><span class="line">socket=/data/3308/data/3308.sock</span><br><span class="line">log_error=/data/3308/data/3308.err</span><br><span class="line">pid_file=/data/3308/data/3308.pid</span><br><span class="line">port=3308</span><br><span class="line"></span><br><span class="line">[root@m01 ~]<span class="comment"># vim /data/3309/my.cnf</span></span><br><span class="line">[mysqld]</span><br><span class="line">basedir=/app/mysql</span><br><span class="line">datadir=/data/3309/data</span><br><span class="line">socket=/data/3309/data/3309.sock</span><br><span class="line">log_error=/data/3309/data/3309.err</span><br><span class="line">pid_file=/data/3309/data/3309.pid</span><br><span class="line">port=3309</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.创建数据目录</span></span><br><span class="line">[root@m01 ~]<span class="comment"># mkdir -p /data/330&#123;7..9&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.初始化</span></span><br><span class="line">[root@m01 ~]<span class="comment"># cd /app/mysql/scripts/</span></span><br><span class="line">[root@m01 scripts]<span class="comment"># ./mysql_install_db --defaults-file=/data/3307/my.cnf --user=mysql --basedir=/app/mysql --datadir=/data/3307/data</span></span><br><span class="line"></span><br><span class="line">[root@m01 scripts]<span class="comment"># ./mysql_install_db --defaults-file=/data/3308/my.cnf --user=mysql --basedir=/app/mysql --datadir=/data/3308/data</span></span><br><span class="line"></span><br><span class="line">[root@m01 scripts]<span class="comment"># ./mysql_install_db --defaults-file=/data/3309/my.cnf --user=mysql --basedir=/app/mysql --datadir=/data/3309/data</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.查看目录结构</span></span><br><span class="line">[root@m01 scripts]<span class="comment"># tree -L 2 /data/</span></span><br><span class="line">/data/</span><br><span class="line">├── 3307</span><br><span class="line">│   ├── data</span><br><span class="line">│   └── my.cnf</span><br><span class="line">├── 3308</span><br><span class="line">│   ├── data</span><br><span class="line">│   └── my.cnf</span><br><span class="line">└── 3309</span><br><span class="line">    ├── data</span><br><span class="line">    └── my.cnf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5.启动</span></span><br><span class="line">[root@m01 scripts]<span class="comment"># mysqld --defaults-file=/data/3307/my.cnf --user=mysql &amp;</span></span><br><span class="line">[root@m01 scripts]<span class="comment"># mysqld --defaults-file=/data/3308/my.cnf --user=mysql &amp;</span></span><br><span class="line">[root@m01 scripts]<span class="comment"># mysqld --defaults-file=/data/3309/my.cnf --user=mysql &amp;</span></span><br><span class="line"><span class="comment">#### 使用systemd管理</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 6.连接</span></span><br><span class="line">[root@m01 scripts]<span class="comment"># mysql -uroot -p -S /data/3307/data/3307.sock</span></span><br><span class="line">[root@m01 scripts]<span class="comment"># mysql -uroot -p -S /data/3308/data/3308.sock</span></span><br><span class="line">[root@m01 scripts]<span class="comment"># mysql -uroot -p -S /data/3309/data/3309.sock</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 7.连接小技巧</span></span><br><span class="line">[root@m01 scripts]<span class="comment"># vim /usr/bin/mysql3309</span></span><br><span class="line">mysql -uroot -p -S /data/3309/data/3309.sock</span><br><span class="line">[root@m01 scripts]<span class="comment"># chmod +x /usr/bin/mysql3309</span></span><br><span class="line"></span><br><span class="line">[root@m01 scripts]<span class="comment"># vim /usr/bin/mysql3308</span></span><br><span class="line">mysql -uroot -p -S /data/3308/data/3308.sock</span><br><span class="line">[root@m01 scripts]<span class="comment"># chmod +x /usr/bin/mysql3308</span></span><br><span class="line"></span><br><span class="line">[root@m01 scripts]<span class="comment"># vim /usr/bin/mysql3307</span></span><br><span class="line">mysql -uroot -p -S /data/3307/data/3307.sock</span><br><span class="line">[root@m01 scripts]<span class="comment"># chmod +x /usr/bin/mysql3307</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      数据(data)是事实或观察的结果，是对客观事物的逻辑归纳，是用于表示客观事物的未经加工的的原始素材。数据可以是连续的值，比如声音、图像，称为模拟数据。也可以是...
    
    </summary>
    
    
      <category term="SRE" scheme="http://yoursite.com/categories/SRE/"/>
    
    
      <category term="Linxu持续集成" scheme="http://yoursite.com/tags/Linxu%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/"/>
    
  </entry>
  
  <entry>
    <title>[Shell编程]</title>
    <link href="http://yoursite.com/2019/05/20/Shell%E7%BC%96%E7%A8%8B/"/>
    <id>http://yoursite.com/2019/05/20/Shell%E7%BC%96%E7%A8%8B/</id>
    <published>2019-05-20T14:06:40.000Z</published>
    <updated>2019-05-21T13:11:40.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="shell基础入门"><a href="#shell基础入门" class="headerlink" title="shell基础入门"></a>shell基础入门</h1><h2 id="为什么使用shell"><a href="#为什么使用shell" class="headerlink" title="为什么使用shell"></a>为什么使用shell</h2><p>1.安装操作系统(CentOS)自动化安装操作系统(kickstart cobbler)底层shell</p><p>2.初始化/优化操作系统</p><ul><li>ntp时间同步</li><li>更改默认yum源</li><li>ssh优化 </li><li>关闭Selinux</li><li>关闭/开启 防火墙(C6:iptables C7:firewalld)</li><li>安装基础服务(wget vim lrzsz net-tools unzip gzip…)</li><li>优化文件描述符</li><li>优化字符集</li></ul><p>3.安装服务</p><ul><li>Nginx</li><li>PHP</li><li>MySQL</li><li>Redis</li><li>MHA</li><li>Rsync</li><li>NFS</li><li>MongoDB</li><li>Zabbix</li></ul><p>4.启动服务（系统默认的shell脚本）</p><p>5.脚本实现自动化代码上线</p><p>6.监控服务（使用shell）</p><p>7.结合定时任务使用shell</p><p>8.重复性工作写入脚本</p><ul><li>日志切割</li><li>日志分析</li><li>数据统计</li><li>机器巡检</li><li>数据备份</li></ul><h2 id="shell编程需要掌握的基础知识"><a href="#shell编程需要掌握的基础知识" class="headerlink" title="shell编程需要掌握的基础知识"></a>shell编程需要掌握的基础知识</h2><ul><li>熟练使用vim编辑器</li><li>熟悉ssh终端（Xshell、CRT）</li><li>熟练掌握linux常用命令</li><li>熟练掌握linux正则表达式及三剑客命令</li><li>VScode</li></ul><h2 id="shell脚本规范"><a href="#shell脚本规范" class="headerlink" title="shell脚本规范"></a>shell脚本规范</h2><p>1.目录统一<br>2.shell脚本的结尾要以.sh结尾<br>3.脚本的开头需要有解释器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br></pre></td></tr></table></figure><p>4.作者信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">#Author: _Roger_</span></span><br><span class="line"><span class="comment">#Date: _1999-12-21_</span></span><br><span class="line"><span class="comment">#Name: _Print Message_</span></span><br></pre></td></tr></table></figure><p>5.一定要有注释（可以中文）</p><p>6.shell中尽量使用英文</p><p>7.成对的符号和语句一次性写完</p><h2 id="vim模板"><a href="#vim模板" class="headerlink" title="vim模板"></a>vim模板</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.首先先编辑一个模板文件，该模板文件可以叫任何名字</span></span><br><span class="line">[root@zabbix01 ~]<span class="comment"># vim /usr/share/vim/vimfiles/template.roger</span></span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">#Author: _Roger_</span></span><br><span class="line"><span class="comment">#Date: _1999-12-21_</span></span><br><span class="line"><span class="comment">#Name: _Print Message_</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.写完之后，我们需要修改一下vim的配置文件</span></span><br><span class="line">[root@zabbix01 ~]<span class="comment"># vim /etc/vimrc</span></span><br><span class="line">autocmd BufNewFile *.spec 0r /usr/share/vim/vimfiles/template.spec</span><br><span class="line"><span class="comment">## 在第28行，autocmd自动保存模板文件，修改一下，因为我们是要写shell脚本的模板</span></span><br><span class="line"><span class="comment">## 所以我们要把*.spec 修改成*.sh</span></span><br><span class="line"><span class="comment">## 然后将后面的模板文件改成你定义的模板文件名</span></span><br><span class="line">autocmd BufNewFile *.sh 0r /usr/share/vim/vimfiles/template.roger</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.编辑~/.vimrc</span></span><br><span class="line">[root@zabbix01 ~]<span class="comment"># vim ~/.vimrc</span></span><br><span class="line">autocmd bufNewFile *.py,*.sh,*.java <span class="built_in">exec</span> <span class="string">":call SetTitle()"</span></span><br><span class="line">func SetTitle()</span><br><span class="line">  <span class="keyword">if</span> expand(<span class="string">"%:e"</span>) == <span class="string">'sh'</span></span><br><span class="line">      call setline(1, <span class="string">"#!/bin/bash"</span>)</span><br><span class="line">      call setline(2, <span class="string">""</span>)</span><br><span class="line">      call setline(3, <span class="string">"# File Name: __"</span>.expand(<span class="string">"%"</span>) . <span class="string">"__"</span>)</span><br><span class="line">      call setline(4, <span class="string">"# Version: __v1.1__ "</span>)</span><br><span class="line">      call setline(5, <span class="string">"# Author: __RogerWang__ "</span>)</span><br><span class="line">      call setline(6, <span class="string">"# Mail: __690705712@qq.com__ "</span>)</span><br><span class="line">      call setline(7, <span class="string">"# Blog: __https://rogerxs80.github.io/__ "</span>)</span><br><span class="line">      call setline(8, <span class="string">"# DateTime: __"</span>.expand(strftime(<span class="string">"%Y-%m-%d %H:%M"</span>)) . <span class="string">"__"</span>)</span><br><span class="line">  endif</span><br><span class="line">endfunc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.接下来，我们编辑所有只要以sh结尾的文件，都会带有作者信息</span></span><br><span class="line">[root@zabbix01 ~]<span class="comment"># vim test_roger.sh</span></span><br></pre></td></tr></table></figure><h2 id="脚本执行方式"><a href="#脚本执行方式" class="headerlink" title="脚本执行方式"></a>脚本执行方式</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[root@m01 ~]<span class="comment"># vim test.sh</span></span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">#Author: _Roger_</span></span><br><span class="line"><span class="comment">#Date: _1999-12-21_</span></span><br><span class="line"><span class="comment">#Name: _Print Message_</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'Hello World'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#执行脚本</span></span><br><span class="line">[root@m01 ~]<span class="comment"># sh test.sh</span></span><br><span class="line">Hello World</span><br><span class="line">[root@m01 ~]<span class="comment"># bash test.sh</span></span><br><span class="line">Hello World</span><br><span class="line">[root@m01 ~]<span class="comment"># ./test.sh</span></span><br><span class="line">Hello World</span><br><span class="line">[root@m01 ~]<span class="comment"># /root/test.sh</span></span><br><span class="line">Hello World</span><br><span class="line">[root@m01 ~]<span class="comment"># . test.sh</span></span><br><span class="line">Hello World</span><br><span class="line">[root@m01 ~]<span class="comment"># source test.sh</span></span><br><span class="line">Hello World</span><br></pre></td></tr></table></figure><p>. 和 source 都是在父shell下执行的<br>sh ， bash ，相对路径 ，绝对路径都是在子shell下执行的</p><h2 id="开发语言中程序代码分类"><a href="#开发语言中程序代码分类" class="headerlink" title="开发语言中程序代码分类"></a>开发语言中程序代码分类</h2><ul><li>编译型</li><li>解释型</li></ul><h1 id="shell中的变量"><a href="#shell中的变量" class="headerlink" title="shell中的变量"></a>shell中的变量</h1><h2 id="变量介绍"><a href="#变量介绍" class="headerlink" title="变量介绍"></a>变量介绍</h2><p>变量即变化的量，核心是“变”与“量”二字，变即变化，量即衡量状态</p><p>量:是记录现实世界当中的某种状态<br>变:指的是记录的状态是可以发生变化的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name=roger</span><br><span class="line">age=18</span><br></pre></td></tr></table></figure><h2 id="如何使用变量"><a href="#如何使用变量" class="headerlink" title="如何使用变量"></a>如何使用变量</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">变量名 赋值符号 变量值</span><br><span class="line">name=roger     <span class="comment">#shell中定义变量</span></span><br><span class="line">name: roger    <span class="comment">#yaml中定义变量</span></span><br></pre></td></tr></table></figure><p>定义变量的语法（分三部分）：<br>1）变量名<br>相当于一个门牌号，便于取出变量值，是访问到值的唯一方式</p><p>2）赋值符号<br>将值的内存地址，绑定给变量名</p><p>3）变量值<br>用来表示状态</p><p>变量的使用规则：先定义，在通过变量名去引用</p><h3 id="定义变量名的规范"><a href="#定义变量名的规范" class="headerlink" title="定义变量名的规范"></a>定义变量名的规范</h3><p><strong>变量名的命名规则：</strong><br>1.大前提：变量名的命名应该能够反映出值记录的状态<br>2.变量是用来访问变量值的，所以变量名应该遵循一定规范，来方便我们标识存到内存中值的功能</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1.变量名只能是 字母、数字或下划线的任意组合(区分大小写)</span><br><span class="line">2.变量名不可以使用中文</span><br><span class="line">3.变量名，不要使用命令来命名</span><br><span class="line">4.不要用拼音</span><br><span class="line">5.变量名不能以数字开头</span><br></pre></td></tr></table></figure><p><strong>变量名定义的方式</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">1.下划线+纯小写</span><br><span class="line">name_of_ww=<span class="string">'roger'</span></span><br><span class="line">name_of_xxx=<span class="string">'roger'</span></span><br><span class="line"></span><br><span class="line">2.驼峰体</span><br><span class="line">nameOfWw=<span class="string">'roger'</span></span><br><span class="line">nameOfWwww=<span class="string">'roger'</span></span><br><span class="line">ageOfWwww=73</span><br><span class="line"></span><br><span class="line">3.下划线+纯大写</span><br><span class="line">NAME_OF_WWW=<span class="string">'xxx'</span></span><br><span class="line"></span><br><span class="line">不好的方式：</span><br><span class="line">1）变量名为中文、拼音</span><br><span class="line">2）变量名过长</span><br><span class="line">3）变量名词不达意</span><br></pre></td></tr></table></figure><h2 id="变量的分类"><a href="#变量的分类" class="headerlink" title="变量的分类"></a>变量的分类</h2><h3 id="系统内置环境变量"><a href="#系统内置环境变量" class="headerlink" title="系统内置环境变量"></a>系统内置环境变量</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 查看系统环境变量</span></span><br><span class="line">env</span><br><span class="line"><span class="built_in">declare</span></span><br><span class="line"><span class="built_in">export</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 环境变量</span></span><br><span class="line">LANG       <span class="comment">#字符集语言</span></span><br><span class="line">PATH       <span class="comment">#该变量中的路径里的所有可执行文件，都可以直接执行，不需要加路径</span></span><br><span class="line">PS1        <span class="comment">#命令提示符</span></span><br><span class="line">UID        <span class="comment">#当前登录用户的uid</span></span><br><span class="line">HOSTNAME   <span class="comment">#当前主机名</span></span><br><span class="line">PWD        <span class="comment">#当前工作路径</span></span><br><span class="line">USER       <span class="comment">#当前登录的用户名</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 历史记录相关</span></span><br><span class="line">HISTSIZE</span><br><span class="line">HISTFILESIZE</span><br><span class="line">HISTFILE</span><br><span class="line">TMOUT</span><br><span class="line">HISTCONTROL:<span class="built_in">export</span> HISTCONTROL=ignorespace  <span class="comment">#离职专用变量</span></span><br><span class="line">PROMPT_COMMAND:<span class="built_in">export</span> PROMPT_COMMAND        <span class="comment">#跳板机专用变量</span></span><br></pre></td></tr></table></figure><h3 id="普通变量"><a href="#普通变量" class="headerlink" title="普通变量"></a>普通变量</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">DATE=$(date +%F-%T)</span><br><span class="line">IP=$(ifconfig eth0|awk <span class="string">'NR==2&#123;print $2&#125;'</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment">## 注意使用大括号分隔变量</span></span><br><span class="line">mkdir <span class="variable">$DATE_</span><span class="variable">$IP_</span><span class="variable">$HOSTNAME</span>  <span class="comment">#基本凉了</span></span><br><span class="line">mkdir <span class="variable">$&#123;DATE&#125;</span>_<span class="variable">$&#123;IP&#125;</span>_<span class="variable">$&#123;HOSTNAME&#125;</span></span><br></pre></td></tr></table></figure><h3 id="位置变量"><a href="#位置变量" class="headerlink" title="位置变量"></a>位置变量</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$N</span>：N正整数，<span class="variable">$1</span> <span class="variable">$2</span> <span class="variable">$3</span>...<span class="variable">$N</span>  两位数要使用&#123;&#125;, <span class="variable">$&#123;11&#125;</span> <span class="variable">$&#123;10&#125;</span></span><br><span class="line"><span class="variable">$0</span>：执行脚本的路径和名字</span><br><span class="line"><span class="variable">$#</span>：传递参数的个数</span><br><span class="line">$*：</span><br><span class="line">1.不适合数组使用  </span><br><span class="line">2.调用是加双引号  <span class="comment">#接收脚本后面所有的参数</span></span><br><span class="line"><span class="variable">$@</span>：</span><br><span class="line">1.适合后面数组数据类型使用  </span><br><span class="line">2.调用是加双引号  <span class="comment">#接收脚本后面所有的参数</span></span><br></pre></td></tr></table></figure><h2 id="特殊变量（状态）"><a href="#特殊变量（状态）" class="headerlink" title="特殊变量（状态）"></a>特殊变量（状态）</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$?：表示上一个命令执行的状态（上一条命令的返回值）0 成功执行 非0失败 </span><br><span class="line">特殊命令： </span><br><span class="line">  - <span class="literal">false</span> </span><br><span class="line">  - diff </span><br><span class="line">$$：表示当前脚本执行的pid </span><br><span class="line">$!：上一个脚本或者程序运行的pid </span><br><span class="line"><span class="variable">$_</span>：获取上一条命令的最后一个参数（以空格为分隔符） ESC + .</span><br></pre></td></tr></table></figure><h2 id="变量的子串"><a href="#变量的子串" class="headerlink" title="变量的子串"></a>变量的子串</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$&#123;#变量名&#125;</span>：获取该变量的值长度 </span><br><span class="line"><span class="variable">$&#123;变量名&#125;</span>：调用变量 </span><br><span class="line"><span class="variable">$&#123;变量名:偏移量&#125;</span>：字符串的截取 </span><br><span class="line"><span class="variable">$&#123;变量名:偏移量:步长&#125;</span>：字符串的截取</span><br><span class="line">time <span class="keyword">for</span> n <span class="keyword">in</span> &#123;1..10000&#125;;<span class="keyword">do</span> <span class="built_in">echo</span> <span class="variable">$&#123;#n&#125;</span> &gt;/dev/null;<span class="keyword">done</span> </span><br><span class="line">time <span class="keyword">for</span> n <span class="keyword">in</span> &#123;1..10000&#125;;<span class="keyword">do</span> <span class="built_in">echo</span> <span class="variable">$&#123;n&#125;</span>|wc -L &gt;/dev/null;<span class="keyword">done</span> </span><br><span class="line">time <span class="keyword">for</span> n <span class="keyword">in</span> &#123;1..10000&#125;;<span class="keyword">do</span> <span class="built_in">echo</span> <span class="variable">$&#123;n&#125;</span>|awk <span class="string">'&#123;print length()&#125;'</span> &gt; /dev/null;<span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$&#123;变量名#字符串&#125;</span>：从变量开头，删除最短匹配word的子串 </span><br><span class="line"><span class="variable">$&#123;变量名##字符串&#125;</span>：从变量开头，删除最长匹配word的子串 </span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> `cat 1.txt`;<span class="keyword">do</span> </span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$&#123;line##*/&#125;</span> </span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$&#123;line#*/&#125;</span> </span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$&#123;parameter%word&#125;</span>从变量结尾，删除最短匹配的word的子串</span><br><span class="line"><span class="variable">$&#123;parameter%%word&#125;</span>从变量结尾，删除最长匹配的word的子串</span><br><span class="line"><span class="variable">$&#123;parameter/pattern/string&#125;</span>使用string替换第一个pattern</span><br><span class="line"><span class="variable">$&#123;parameter//pattern/string&#125;</span>使用string替换所有的pattern</span><br></pre></td></tr></table></figure><p>企业面试题 <code>I am oldboy linux&#39;s teacher Roger,welcome to our trainning.</code>请打印出这句话中，单词大于6的单词并显示个数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 思路分析</span></span><br><span class="line">1.如何将一句话变成一个一个的单词</span><br><span class="line">2.将每一个单词拿出来跟6进行对比</span><br><span class="line">3.如果大于6就打印</span><br><span class="line">4.如果大于6就打印出具体个数</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 思路转代码</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"I am oldboy linux's teacher Roger,welcome to our trainning."</span> |tr <span class="string">',.'</span> <span class="string">' '</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> word <span class="keyword">in</span> I am oldboy linux<span class="string">'s teacher Roger welcome to our trainning;do</span></span><br><span class="line"><span class="string">  if [ $&#123;#word&#125; -gt 6 ];then</span></span><br><span class="line"><span class="string">  pass</span></span><br><span class="line"><span class="string">  fi</span></span><br><span class="line"><span class="string">done</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">echo "单词：$word"</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">echo "长度：$&#123;#word&#125;"</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 放入脚本</span></span><br><span class="line"><span class="string">[root@m01 script]# vim 02_sub_string.sh</span></span><br><span class="line"><span class="string">#!/bin/bash</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">text=`echo "I am oldboy linux'</span>s teacher Roger,welcome to our trainning.<span class="string">" |tr ',.' ' '`</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">for word in <span class="variable">$text</span>;do</span></span><br><span class="line"><span class="string">  if [ <span class="variable">$&#123;#word&#125;</span> -gt 6 ];then</span></span><br><span class="line"><span class="string">  echo "</span>单词：<span class="variable">$word</span><span class="string">"</span></span><br><span class="line"><span class="string">  echo "</span>长度：<span class="variable">$&#123;#word&#125;</span><span class="string">"</span></span><br><span class="line"><span class="string">  fi</span></span><br><span class="line"><span class="string">done</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[root@m01 script]# sh 02_sub_string.sh</span></span><br><span class="line"><span class="string">单词：linux's</span></span><br><span class="line"><span class="string">长度：7</span></span><br><span class="line"><span class="string">单词：teacher</span></span><br><span class="line"><span class="string">长度：7</span></span><br><span class="line"><span class="string">单词：welcome</span></span><br><span class="line"><span class="string">长度：7</span></span><br><span class="line"><span class="string">单词：trainning</span></span><br><span class="line"><span class="string">长度：9</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">## 美化</span></span><br><span class="line"><span class="string">#!/bin/bash</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">text=`echo "</span>I am oldboy linux<span class="string">'s teacher Roger,welcome to our trainning." |tr '</span>,.<span class="string">' '</span> <span class="string">'`</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">for word in $text;do</span></span><br><span class="line"><span class="string">  if [ $&#123;#word&#125; -gt 6 ];then</span></span><br><span class="line"><span class="string">  echo '</span>------ 单词统计结果 ------<span class="string">'</span></span><br><span class="line"><span class="string">  echo "单词：$word"</span></span><br><span class="line"><span class="string">  echo "长度：$&#123;#word&#125;"</span></span><br><span class="line"><span class="string">  fi</span></span><br><span class="line"><span class="string">done</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">## 纯awk方法（简单了解，这里只是为了让你们看看awk的牛逼之处）</span></span><br><span class="line"><span class="string">[root@m01 script]# echo "I am oldboy linux'</span>s teacher Roger,welcome to our trainning.<span class="string">"|awk -F '[ ,.]' '&#123;for(i=1;i&lt;=NF;i++) if(length(<span class="variable">$i</span>) &gt;6) print "</span>单词：<span class="string">"<span class="variable">$i</span>,"</span>长度：<span class="string">" length(<span class="variable">$i</span>)&#125;'</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 美化</span></span><br><span class="line"><span class="string">[root@m01 script]# echo "</span>I am oldboy linux<span class="string">'s teacher Roger,welcome to our trainning."|awk -F '</span>[ ,.]<span class="string">' '</span>&#123;<span class="keyword">for</span>(i=1;i&lt;=NF;i++) <span class="keyword">if</span>(length(<span class="variable">$i</span>) &gt;6) <span class="built_in">print</span> <span class="string">"------ 单词统计结果------\n"</span> <span class="string">"单词："</span><span class="variable">$i</span><span class="string">"\n长度："</span> length(<span class="variable">$i</span>)&#125;<span class="string">'</span></span><br><span class="line"><span class="string">------ 单词统计结果------</span></span><br><span class="line"><span class="string">单词：linux'</span>s</span><br><span class="line">长度：7</span><br><span class="line">------ 单词统计结果------</span><br><span class="line">单词：teacher</span><br><span class="line">长度：7</span><br><span class="line">------ 单词统计结果------</span><br><span class="line">单词：welcome</span><br><span class="line">长度：7</span><br><span class="line">------ 单词统计结果------</span><br><span class="line">单词：trainning</span><br><span class="line">长度：9</span><br></pre></td></tr></table></figure><h1 id="shell运算符"><a href="#shell运算符" class="headerlink" title="shell运算符"></a>shell运算符</h1><h2 id="基础运算符"><a href="#基础运算符" class="headerlink" title="基础运算符"></a>基础运算符</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">+：加</span><br><span class="line">-：减</span><br><span class="line">*：乘</span><br><span class="line">/：除</span><br><span class="line">%：取余</span><br><span class="line"></span><br><span class="line"><span class="comment">## 取余案例</span></span><br><span class="line"><span class="built_in">echo</span> $((RANDOM%10))</span><br><span class="line"></span><br><span class="line"><span class="comment">## 自增案例</span></span><br><span class="line"><span class="keyword">for</span> ((i=1;i&lt;=10;i++));<span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$i</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> `seq 10`;<span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$n</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h2 id="逻辑符号"><a href="#逻辑符号" class="headerlink" title="逻辑符号"></a>逻辑符号</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&amp;&amp;：且</span><br><span class="line">||：或</span><br><span class="line">！：非</span><br></pre></td></tr></table></figure><h2 id="所有符号"><a href="#所有符号" class="headerlink" title="所有符号"></a>所有符号</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">+、-加号，减号，一般用于整型、浮点型等类型的运算，其他语言中也可以做字符串的拼接</span><br><span class="line">*、/、%乘号、除号、取余，一般用于运算</span><br><span class="line"></span><br><span class="line">-------</span><br><span class="line">**：幂运算</span><br><span class="line">++、--自增、自减，可前置也可后置，默认步长为1</span><br><span class="line">n++：n=n+1</span><br><span class="line">n--：n=n-1</span><br><span class="line"></span><br><span class="line">n++   n+=1  n=n+1</span><br><span class="line"></span><br><span class="line">n=n+2    n+=2</span><br><span class="line">n=n-2    n-=2</span><br><span class="line">n=n*2    n*=2</span><br><span class="line">n=n/2    n/=2</span><br><span class="line"></span><br><span class="line">n=n%2    n%=2</span><br><span class="line"></span><br><span class="line">==:等于             <span class="comment">#equal         -eq</span></span><br><span class="line">&lt;：小于             <span class="comment">#less than     -lt</span></span><br><span class="line">&gt;：大于             <span class="comment">#greate than   -gt</span></span><br><span class="line">&gt;=：大于等于         <span class="comment">#greate equal  -ge</span></span><br><span class="line">&lt;=：小于等于         <span class="comment">#less  equal   -le</span></span><br><span class="line">&lt;&gt; 或 != ：不等于    <span class="comment">#ot equal      -ne</span></span><br><span class="line"></span><br><span class="line">=：赋值符号</span><br><span class="line">==：运算符号，等于</span><br><span class="line"></span><br><span class="line">&gt;&gt;：向右位移</span><br><span class="line">&lt;&lt;：向左位移</span><br><span class="line"></span><br><span class="line">~、|、&amp;、^：按位取反、按位异或、按位与、按位或</span><br></pre></td></tr></table></figure><h2 id="运算方式"><a href="#运算方式" class="headerlink" title="运算方式"></a>运算方式</h2><h3 id=""><a href="#" class="headerlink" title="(())"></a>(())</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> $((1+2))</span><br><span class="line"><span class="built_in">echo</span> $((26/5))</span><br><span class="line"></span><br><span class="line">a=1</span><br><span class="line">b=2</span><br><span class="line"><span class="built_in">echo</span> $((a+b))</span><br></pre></td></tr></table></figure><h3 id="let"><a href="#let" class="headerlink" title="let"></a>let</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">let</span> a=1+2</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$a</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">let</span> b=26/5</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$b</span></span><br></pre></td></tr></table></figure><h3 id="expr"><a href="#expr" class="headerlink" title="expr"></a>expr</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">expr 1 + 1</span><br><span class="line">expr 1+1       <span class="comment">#错误写法</span></span><br><span class="line">expr 2 * 2.5   <span class="comment">#错误写法</span></span><br><span class="line">expr 26 / 5</span><br></pre></td></tr></table></figure><h3 id="bc"><a href="#bc" class="headerlink" title="bc"></a>bc</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">root@m01,172.16.1.61:~ <span class="comment"># echo 1+2|bc</span></span><br><span class="line">root@m01,172.16.1.61:~ <span class="comment"># echo 26/5|bc</span></span><br><span class="line">root@m01,172.16.1.61:~ <span class="comment"># echo 2*2.5|bc</span></span><br><span class="line">root@m01,172.16.1.61:~ <span class="comment"># echo 26/5|bc -l</span></span><br><span class="line">5.20000000000000000000</span><br><span class="line"></span><br><span class="line"><span class="comment">## 圆周率</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'scale=100;a(1)*4'</span>|bc -l</span><br><span class="line">3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170676</span><br><span class="line"></span><br><span class="line"><span class="comment">## 进制转换</span></span><br><span class="line">root@m01,172.16.1.61:~ <span class="comment"># echo 'obase=2;255'|bc</span></span><br><span class="line">11111111</span><br><span class="line">root@m01,172.16.1.61:~ <span class="comment"># echo 'obase=2;192'|bc</span></span><br><span class="line">11000000</span><br><span class="line">root@m01,172.16.1.61:~ <span class="comment"># echo 'obase=16;192'|bc</span></span><br><span class="line">C0</span><br><span class="line">root@m01,172.16.1.61:~ <span class="comment"># echo 'obase=16;255'|bc</span></span><br><span class="line">FF</span><br></pre></td></tr></table></figure><h3 id="awk"><a href="#awk" class="headerlink" title="awk"></a>awk</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@m01,172.16.1.61:~ <span class="comment"># awk 'BEGIN&#123;print 26/5 1+2 3*8&#125;'</span></span><br><span class="line">5.2324</span><br><span class="line">root@m01,172.16.1.61:~ <span class="comment"># awk 'BEGIN&#123;print 26/5,1+2,3*8&#125;'</span></span><br><span class="line">5.2 3 24</span><br></pre></td></tr></table></figure><h3 id="作业脚本：计算器"><a href="#作业脚本：计算器" class="headerlink" title="作业脚本：计算器"></a>作业脚本：计算器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">1.首先要传递2个参数（数字）</span><br><span class="line">2.传少了报错</span><br><span class="line">报错信息：至少传递两个整数...</span><br><span class="line">3.传的不是数字报错</span><br><span class="line">报错信息：请输入两个整数，不能是字母或特殊符号...</span><br><span class="line">4.计算出传递两个数字的</span><br><span class="line">- +</span><br><span class="line">- -</span><br><span class="line">- *</span><br><span class="line">- /</span><br><span class="line">- %</span><br></pre></td></tr></table></figure><h1 id="shell条件表达式"><a href="#shell条件表达式" class="headerlink" title="shell条件表达式"></a>shell条件表达式</h1><h2 id="条件表达式介绍"><a href="#条件表达式介绍" class="headerlink" title="条件表达式介绍"></a>条件表达式介绍</h2><p>条件表达式，我们非常的常用，可以说，任何编程语言，都离不开条件表达式，但是每种变成语言的写法都不太一样，在shell中，有一种独特的写法。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[ 条件 ]      <span class="comment">## 不支持 &gt; &lt;  支持：-eq -le -ne</span></span><br><span class="line">[[ 条件 ]]    <span class="comment">##  支持 &gt; &lt;  -eq  -le -ne</span></span><br><span class="line"><span class="built_in">test</span> 条件     <span class="comment">## 都支持  命令行使用test</span></span><br></pre></td></tr></table></figure><h3 id="条件表达式的选项"><a href="#条件表达式的选项" class="headerlink" title="条件表达式的选项"></a>条件表达式的选项</h3><p><strong>判断普通文件 -f  file</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">-f：判断文件是否存在</span><br><span class="line">root@m01,172.16.1.61:~ <span class="comment"># test -f /tmp/1.txt</span></span><br><span class="line">root@m01,172.16.1.61:~ <span class="comment"># echo $?</span></span><br><span class="line">0</span><br><span class="line">root@m01,172.16.1.61:~ <span class="comment"># test -f /tmp/2.txt</span></span><br><span class="line">root@m01,172.16.1.61:~ <span class="comment"># echo $?</span></span><br><span class="line"><span class="built_in">test</span> -f /tmp/2.txt &amp;&amp; <span class="built_in">echo</span> <span class="string">'存在'</span> || <span class="built_in">echo</span> <span class="string">'不存在'</span></span><br><span class="line">[ -f /tmp/2.txt ] &amp;&amp; <span class="built_in">echo</span> <span class="string">'存在'</span> || <span class="built_in">echo</span> <span class="string">'不存在'</span></span><br><span class="line">[[ -f /tmp/2.txt ]] &amp;&amp; <span class="built_in">echo</span> <span class="string">'存在'</span> || <span class="built_in">echo</span> <span class="string">'不存在'</span></span><br></pre></td></tr></table></figure><p><strong>判断目录-d   directory</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">root@m01,172.16.1.61:~ <span class="comment"># test -d /tmp/</span></span><br><span class="line">root@m01,172.16.1.61:~ <span class="comment"># echo $?</span></span><br><span class="line">0</span><br><span class="line">root@m01,172.16.1.61:~ <span class="comment"># test -d /tmp</span></span><br><span class="line">root@m01,172.16.1.61:~ <span class="comment"># echo $?</span></span><br><span class="line"><span class="built_in">test</span> -d /tmp/ &amp;&amp; <span class="built_in">echo</span> <span class="string">'存在'</span> || <span class="built_in">echo</span> <span class="string">'不存在'</span></span><br><span class="line">[ -d /tmp ] &amp;&amp; <span class="built_in">echo</span> <span class="string">'存在'</span> || <span class="built_in">echo</span> <span class="string">'不存在'</span></span><br><span class="line">[[ -d /tmp ]] &amp;&amp; <span class="built_in">echo</span> <span class="string">'存在'</span> || <span class="built_in">echo</span> <span class="string">'不存在'</span></span><br></pre></td></tr></table></figure><p><strong>判断文件-e  exists</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">既可以判断文件也可以判断目录</span><br><span class="line">root@m01,172.16.1.61:~ <span class="comment"># test -e /tmp/1.txt &amp;&amp; echo '存在' || echo '不存在'</span></span><br><span class="line">存在</span><br><span class="line"></span><br><span class="line">root@m01,172.16.1.61:~ <span class="comment"># test -e /tmp &amp;&amp; echo '存在' || echo '不存在'</span></span><br><span class="line">存在</span><br></pre></td></tr></table></figure><p><strong>判断文件有没有读取权限 -r  read</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">test</span> -r /tmp/1.txt &amp;&amp; <span class="built_in">echo</span> <span class="string">'可读'</span> || <span class="built_in">echo</span> <span class="string">'不可读'</span></span><br></pre></td></tr></table></figure><p><strong>判断文件有没有写入权限 -w  write</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">test</span> -w /tmp/1.txt &amp;&amp; <span class="built_in">echo</span> <span class="string">'可写'</span> || <span class="built_in">echo</span> <span class="string">'不可写'</span></span><br></pre></td></tr></table></figure><p><strong>判断文件有没有执行权限 -x  execute</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">test</span> -x /tmp/1.txt &amp;&amp; <span class="built_in">echo</span> <span class="string">'可执行'</span> || <span class="built_in">echo</span> <span class="string">'不可执行'</span></span><br></pre></td></tr></table></figure><p><strong>判断文件有没有内容 -s size</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">test</span> -s /tmp/1.txt &amp;&amp; <span class="built_in">echo</span> <span class="string">'有内容'</span> || <span class="built_in">echo</span> <span class="string">'文件为空'</span></span><br><span class="line">文件为空</span><br></pre></td></tr></table></figure><p><strong>判断文件是否是一个软链接 -L  link</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@m01,172.16.1.61:~ <span class="comment"># test -L /bin &amp;&amp; echo '是软链接' || echo '不是软链接'</span></span><br><span class="line">是软链接</span><br><span class="line">root@m01,172.16.1.61:~ <span class="comment"># test -L /tmp &amp;&amp; echo '是软链接' || echo '不是软链接'</span></span><br><span class="line">不是软链接</span><br></pre></td></tr></table></figure><p><strong>对比两个文件的新旧 -nt newer than</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">root@m01,172.16.1.61:~ <span class="comment"># test /tmp/1.txt -nt /tmp/2.txt &amp;&amp; echo '1.txt比2.txt新' || echo '1.txt不比2.txt新'</span></span><br><span class="line">1.txt不比2.txt新</span><br><span class="line">root@m01,172.16.1.61:~ <span class="comment"># echo 1 &gt; /tmp/1.txt </span></span><br><span class="line">root@m01,172.16.1.61:~ <span class="comment"># test /tmp/1.txt -nt /tmp/2.txt &amp;&amp; echo '1.txt比2.txt新' || echo '1.txt不比2.txt新'</span></span><br><span class="line">1.txt比2.txt新</span><br></pre></td></tr></table></figure><p><strong>对比两个文件的新旧 -ot oldder than</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">root@m01,172.16.1.61:~ <span class="comment"># test /tmp/1.txt -ot /tmp/2.txt &amp;&amp; echo '1.txt比2.txt老' || echo '1.txt不比2.tt老'</span></span><br><span class="line">1.txt不比2.txt老</span><br><span class="line">root@m01,172.16.1.61:~ <span class="comment"># echo 2 &gt; /tmp/2.txt </span></span><br><span class="line">root@m01,172.16.1.61:~ <span class="comment"># test /tmp/1.txt -ot /tmp/2.txt &amp;&amp; echo '1.txt比2.txt老' || echo '1.txt不比2.txt老'</span></span><br><span class="line">1.txt比2.txt老</span><br></pre></td></tr></table></figure><h2 id="字符串表达式"><a href="#字符串表达式" class="headerlink" title="字符串表达式"></a>字符串表达式</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">-n：判断字符串是否为空，非空则成立</span><br><span class="line">root@m01,172.16.1.61:~ <span class="comment"># abc=''</span></span><br><span class="line">root@m01,172.16.1.61:~ <span class="comment"># test -n "$abc" &amp;&amp; echo '字符串不为空' || echo '字符串为空'</span></span><br><span class="line">字符串为空</span><br><span class="line">root@m01,172.16.1.61:~ <span class="comment"># abc='sbwyk'</span></span><br><span class="line">root@m01,172.16.1.61:~ <span class="comment"># test -n "$abc" &amp;&amp; echo '字符串不为空' || echo '字符串为空'</span></span><br><span class="line">字符串不为空</span><br><span class="line"></span><br><span class="line">-z：判断字符串是否为空，空则成立</span><br><span class="line">root@m01,172.16.1.61:~ <span class="comment"># abc='sbwyk'</span></span><br><span class="line">root@m01,172.16.1.61:~ <span class="comment"># test -z "$abc" &amp;&amp; echo '字符串为空' || echo '字符串不为空'</span></span><br><span class="line">字符串不为空</span><br><span class="line">root@m01,172.16.1.61:~ <span class="comment"># abc=''</span></span><br><span class="line">root@m01,172.16.1.61:~ <span class="comment"># test -z "$abc" &amp;&amp; echo '字符串为空' || echo '字符串不为空'</span></span><br><span class="line">字符串为空</span><br><span class="line"></span><br><span class="line"><span class="string">'str1'</span> = <span class="string">'str2'</span>：字符串相等则成立</span><br><span class="line">root@m01,172.16.1.61:~ <span class="comment"># test 'abc' = 'abc' &amp;&amp; echo '字符串相等' || echo '字符串不相等'</span></span><br><span class="line">字符串相等</span><br><span class="line">root@m01,172.16.1.61:~ <span class="comment"># test 'abc' = 'abc1' &amp;&amp; echo '字符串相等' || echo '字符串不相等'</span></span><br><span class="line">字符串不相等</span><br><span class="line"></span><br><span class="line"><span class="string">'str1'</span> != <span class="string">'str2'</span>：字符串不相等则成立</span><br><span class="line">root@m01,172.16.1.61:~ <span class="comment"># test 'abc' != 'abc' &amp;&amp; echo '字符串不相等' || echo '字符串相等'</span></span><br><span class="line">字符串相等</span><br><span class="line">root@m01,172.16.1.61:~ <span class="comment"># test 'abc' != 'abc1' &amp;&amp; echo '字符串不相等' || echo '字符串相等'</span></span><br><span class="line">字符串不相等</span><br></pre></td></tr></table></figure><h2 id="整数表达式"><a href="#整数表达式" class="headerlink" title="整数表达式"></a>整数表达式</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">-eq：等于</span><br><span class="line">-ne：不等于</span><br><span class="line">-lt：小于</span><br><span class="line">-le：小于等于</span><br><span class="line">-gt：大于</span><br><span class="line">-ge：大于等于</span><br><span class="line"></span><br><span class="line">root@m01,172.16.1.61:~ <span class="comment"># [[ 18\&gt;=16 ]] &amp;&amp; echo 1 || echo 2</span></span><br><span class="line">1</span><br></pre></td></tr></table></figure><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="[[]]正则表达式"></a>[[]]正则表达式</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">=~：成员运算</span><br><span class="line">[[ =~  ]]</span><br><span class="line"></span><br><span class="line">[root@m01 ~]<span class="comment"># name=huanglong</span></span><br><span class="line">[root@m01 ~]<span class="comment"># [[ $name =~ 'h' ]] &amp;&amp; echo '包含' || echo '不包含'</span></span><br><span class="line">包含</span><br><span class="line">[root@m01 ~]<span class="comment"># [[ $name =~ 'j' ]] &amp;&amp; echo '包含' || echo '不包含'</span></span><br><span class="line">不包含</span><br><span class="line">[root@m01 ~]<span class="comment"># [[ $name =~ [0-9] ]] &amp;&amp; echo '包含' || echo '不包含'</span></span><br><span class="line">不包含</span><br><span class="line">[root@m01 ~]<span class="comment"># [[ $name =~ [a-z] ]] &amp;&amp; echo '包含' || echo '不包含'</span></span><br><span class="line">包含</span><br><span class="line">[root@m01 ~]<span class="comment"># [[ $name =~ ^[a-z] ]] &amp;&amp; echo '包含' || echo '不包含'</span></span><br><span class="line">包含</span><br><span class="line">[root@m01 ~]<span class="comment"># [[ $name =~ ^[a-z]$ ]] &amp;&amp; echo '包含' || echo '不包含'</span></span><br><span class="line">不包含</span><br><span class="line">[root@m01 ~]<span class="comment"># [[ $name =~ ^[a-z]+$ ]] &amp;&amp; echo '包含' || echo '不包含'</span></span><br><span class="line">包含</span><br><span class="line">[root@m01 ~]<span class="comment"># [[ $name =~ 'h'$ ]] &amp;&amp; echo '包含' || echo '不包含'</span></span><br><span class="line">不包含</span><br><span class="line">[root@m01 ~]<span class="comment"># [[ $name =~ 'g'$ ]] &amp;&amp; echo '包含' || echo '不包含'</span></span><br><span class="line">包含</span><br></pre></td></tr></table></figure><h3 id="逻辑表达式"><a href="#逻辑表达式" class="headerlink" title="逻辑表达式"></a>逻辑表达式</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">!：非</span><br><span class="line">&amp;&amp;：与     -a   [[]] &amp;&amp; [[]]    [ <span class="variable">$num</span> -eq 0 -a <span class="variable">$num2</span> -ne 3 ]</span><br><span class="line">||：或     -o   [[]] || [[]]    [ <span class="variable">$num</span> -eq 0 -o <span class="variable">$num2</span> -ne 3 ]</span><br></pre></td></tr></table></figure><h1 id="shell流程控制if"><a href="#shell流程控制if" class="headerlink" title="shell流程控制if"></a>shell流程控制if</h1><h2 id="if条件语句语法"><a href="#if条件语句语法" class="headerlink" title="if条件语句语法"></a>if条件语句语法</h2><h3 id="单分支"><a href="#单分支" class="headerlink" title="单分支"></a>单分支</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> [ 条件1 ];<span class="keyword">then</span></span><br><span class="line">动作1</span><br><span class="line">动作2</span><br><span class="line">动作3</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ 条件1 ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">动作1</span><br><span class="line">动作2</span><br><span class="line">动作3</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">[ 条件1 ] &amp;&amp; &#123;</span><br><span class="line">动作1</span><br><span class="line">动作2</span><br><span class="line">动作3</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="双分支"><a href="#双分支" class="headerlink" title="双分支"></a>双分支</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> [ 条件1 ];<span class="keyword">then</span></span><br><span class="line">动作1</span><br><span class="line">动作2</span><br><span class="line">动作3</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">动作1</span><br><span class="line">动作2</span><br><span class="line">动作3</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ 条件1 ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">动作1</span><br><span class="line">动作2</span><br><span class="line">动作3</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">动作1</span><br><span class="line">动作2</span><br><span class="line">动作3</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">[ 条件1 ] &amp;&amp; &#123;</span><br><span class="line">动作1</span><br><span class="line">动作2</span><br><span class="line">动作3</span><br><span class="line">&#125; || &#123;</span><br><span class="line">    动作1</span><br><span class="line">    动作2</span><br><span class="line">    动作3</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="多分支"><a href="#多分支" class="headerlink" title="多分支"></a>多分支</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> [ 条件1 ];<span class="keyword">then</span></span><br><span class="line">动作1</span><br><span class="line">动作2</span><br><span class="line">动作3</span><br><span class="line"><span class="keyword">elif</span> [ 条件2 ];<span class="keyword">then</span></span><br><span class="line">动作1</span><br><span class="line">动作2</span><br><span class="line">动作3</span><br><span class="line"><span class="keyword">elif</span> [ 条件3 ];<span class="keyword">then</span></span><br><span class="line">动作1</span><br><span class="line">动作2</span><br><span class="line">动作3</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">动作1</span><br><span class="line">动作2</span><br><span class="line">动作3</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ 条件1 ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">动作1</span><br><span class="line">动作2</span><br><span class="line">动作3</span><br><span class="line"><span class="keyword">elif</span> [ 条件2 ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">动作1</span><br><span class="line">动作2</span><br><span class="line">动作3</span><br><span class="line"><span class="keyword">elif</span> [ 条件3 ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">动作1</span><br><span class="line">动作2</span><br><span class="line">动作3</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">动作1</span><br><span class="line">动作2</span><br><span class="line">动作3</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p><strong>需求：</strong> 接收用户输入的用户名和密码进行登录。</p><ul><li>1.根据<code>数据库</code>中的数据判断,如果用户存在则验证密码</li><li>2.如果密码错误则返回报错</li><li>3.如果密码正确，则登录成功</li><li>4.根据<code>数据库</code>中的数据判断,如果用户不存在则注册<ul><li>1）输入用户名</li><li>2）输入密码</li><li>3）确认密码</li></ul></li><li>5.如果密码不一致则重新输入</li><li>6.如果密码一致，则将注册用户保存到<code>数据库</code>中</li></ul><p><strong>扩展需求：</strong></p><ul><li>判断用户输入的密码，如果小于8位，则报错</li><li>判断用户输入的密码，如果没有大小写，则报错</li><li>判断用户输入的密码，如果没有数字，则报错</li><li>判断用户输入的用户名，如果用户名以数字开头，则报错</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line">判断用户是否存在，bug，密码和要注册的用户名一致的情况下，就出问题</span><br><span class="line"></span><br><span class="line">程序逻辑：</span><br><span class="line">- 登录</span><br><span class="line">输入用户名</span><br><span class="line">输入密码</span><br><span class="line">- 判断用户是否存在</span><br><span class="line">如果用户存在，则验证密码</span><br><span class="line">如果用户不存在，则跳转到注册页面</span><br><span class="line">- 注册页面</span><br><span class="line">需要输入用户名，也需要判断是否存在</span><br><span class="line">如果存在，重新输入用户名</span><br><span class="line">输入注册密码和确认密码</span><br><span class="line"><span class="variable">$pass1</span> == <span class="variable">$pass2</span></span><br><span class="line"><span class="variable">$pass1</span> != <span class="variable">$pass2</span></span><br><span class="line">两次密码不一致，重新输入密码</span><br><span class="line">两次密码一致，将用户写入数据库，跳转到登录页面</span><br><span class="line"></span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">read</span> -p <span class="string">'请输入一个密码：'</span> pass</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$&#123;#pass&#125;</span> -lt 8 ];<span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">'密码至少8位'</span></span><br><span class="line"><span class="keyword">elif</span> [[ <span class="variable">$pass</span> =~ <span class="string">' '</span> ]];<span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">'密码中不能包含空格'</span></span><br><span class="line"><span class="keyword">elif</span> [[ <span class="variable">$pass</span> =~ [0-9] ]] &amp;&amp; [[ <span class="variable">$pass</span> =~ [a-z] ]] &amp;&amp; [[ <span class="variable">$pass</span> =~ [A-Z] ]] ;<span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">'注册成功'</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">'密码要包含数字，大小写字母'</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment">###### 作业代码</span></span><br><span class="line">[root@m01 ~]<span class="comment"># cat login.sh </span></span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">. /etc/init.d/<span class="built_in">functions</span></span><br><span class="line"></span><br><span class="line">user_data_file=<span class="string">"/root/user_data.txt"</span></span><br><span class="line"></span><br><span class="line">[ ! -f <span class="variable">$user_data_file</span> ] &amp;&amp; &#123;</span><br><span class="line">  touch <span class="variable">$user_data_file</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">login_page</span></span> ()&#123;</span><br><span class="line">cat &lt;&lt;EOF</span><br><span class="line">+------------------+</span><br><span class="line">| 欢迎来到登录界面 |</span><br><span class="line">+------------------+</span><br><span class="line">EOF</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">register_page</span></span> ()&#123;</span><br><span class="line">cat &lt;&lt;EOF</span><br><span class="line">+------------------+</span><br><span class="line">| 欢迎来到注册界面 |</span><br><span class="line">+------------------+</span><br><span class="line">EOF</span><br><span class="line">&#125;</span><br><span class="line">clear</span><br><span class="line">login_page</span><br><span class="line"><span class="built_in">read</span> -p <span class="string">'用户名： '</span> user_name</span><br><span class="line"><span class="built_in">read</span> -p <span class="string">'密码： '</span> user_pass</span><br><span class="line"></span><br><span class="line">[ <span class="variable">$&#123;#user_name&#125;</span> -eq 0 -o <span class="variable">$&#123;#user_pass&#125;</span> -eq 0 ] &amp;&amp; &#123;</span><br><span class="line">  <span class="built_in">echo</span> -e <span class="string">"\e[1;31m Error:\e[0m \e[5;31m用户名和密码不能为空\e[0m"</span></span><br><span class="line">  <span class="built_in">exit</span> 1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">user_exists=`awk <span class="string">'&#123;print $1&#125;'</span> <span class="variable">$user_data_file</span> | grep -w <span class="string">"<span class="variable">$user_name</span>"</span>|wc -l &amp;&gt;/dev/null`</span><br><span class="line">[ <span class="variable">$user_exists</span> -eq 0 ] &amp;&amp; &#123;</span><br><span class="line">  pass=`grep -w <span class="string">"<span class="variable">$user_name</span>"</span> <span class="variable">$user_data_file</span> |awk <span class="string">'&#123;print $2&#125;'</span>`</span><br><span class="line">  [ <span class="string">"<span class="variable">$pass</span>"</span> == <span class="string">"<span class="variable">$user_pass</span>"</span> ] &amp;&amp; &#123;</span><br><span class="line">    figlet  welcome</span><br><span class="line">    action <span class="string">"<span class="variable">$user_name</span> login accessful"</span> /bin/<span class="literal">true</span></span><br><span class="line">  &#125; || &#123;</span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">"\n--------- 登录失败 --------"</span></span><br><span class="line">    action <span class="string">"<span class="variable">$user_name</span> password is missing"</span> /bin/<span class="literal">false</span></span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line">  &#125;</span><br><span class="line">&#125; || &#123;</span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">"\n--------- 登录失败 --------"</span></span><br><span class="line">    action <span class="string">"<span class="variable">$user_name</span> not exists"</span> /bin/<span class="literal">false</span></span><br><span class="line">    clear</span><br><span class="line">    register_page</span><br><span class="line">    <span class="built_in">read</span> -p <span class="string">"请输入注册用户名："</span> register_name</span><br><span class="line">    <span class="built_in">read</span> -p <span class="string">"请输入注册密码："</span> register_pass1</span><br><span class="line">    <span class="built_in">read</span> -p <span class="string">"请确认注册密码："</span> register_pass2</span><br><span class="line">    grep -w <span class="string">"<span class="variable">$register_name</span>"</span>  <span class="variable">$user_data_file</span> &amp;&gt;/dev/null</span><br><span class="line">    [ $? -eq 0  ] &amp;&amp; &#123;</span><br><span class="line">      <span class="built_in">echo</span> -e <span class="string">"\n--------- 注册失败 --------"</span></span><br><span class="line">      <span class="built_in">echo</span> -e <span class="string">"\e[1;31m Error:\e[0m 用户 \e[5;31m[<span class="variable">$&#123;register_name&#125;</span>]\e[0m 已存在"</span></span><br><span class="line">    &#125; || &#123;</span><br><span class="line">      [ <span class="variable">$register_pass1</span> == <span class="variable">$register_pass2</span> ] &amp;&amp; &#123;</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"<span class="variable">$register_name</span> <span class="variable">$register_pass1</span>"</span> &gt;&gt; <span class="variable">$user_data_file</span></span><br><span class="line">        awk <span class="string">'&#123;print $1&#125;'</span> <span class="variable">$user_data_file</span> | grep -w <span class="string">"<span class="variable">$register_name</span>"</span> &amp;&gt;/dev/null</span><br><span class="line">        [ $? -eq 0 ] &amp;&amp; &#123;</span><br><span class="line">          <span class="built_in">echo</span> -e <span class="string">"user \e[5;32m[<span class="variable">$register_name</span>]\e[0m register successful"</span></span><br><span class="line">  login_page</span><br><span class="line">          <span class="built_in">read</span> -p <span class="string">'用户名： '</span> user_name</span><br><span class="line">          <span class="built_in">read</span> -p <span class="string">'密码： '</span> user_pass</span><br><span class="line">          pass=`grep -w <span class="string">"<span class="variable">$user_name</span>"</span> <span class="variable">$user_data_file</span> |awk <span class="string">'&#123;print $2&#125;'</span>`</span><br><span class="line">          [ <span class="string">"<span class="variable">$pass</span>"</span> == <span class="string">"<span class="variable">$user_pass</span>"</span> ] &amp;&amp; &#123;</span><br><span class="line">            figlet  welcome</span><br><span class="line">            action <span class="string">"<span class="variable">$user_name</span> login accessful"</span> /bin/<span class="literal">true</span></span><br><span class="line">          &#125; || &#123;</span><br><span class="line">            <span class="built_in">echo</span> -e <span class="string">"\n--------- 登录失败 --------"</span></span><br><span class="line">            action <span class="string">"<span class="variable">$user_name</span> password is missing"</span> /bin/<span class="literal">false</span></span><br><span class="line">            <span class="built_in">exit</span> 1</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; || &#123;</span><br><span class="line">        <span class="built_in">echo</span> -e <span class="string">"\nthe password not match"</span></span><br><span class="line">        <span class="built_in">echo</span> -e <span class="string">"\n--------- 重新确认密码 --------"</span></span><br><span class="line">        <span class="built_in">read</span> -p <span class="string">"请输入注册密码："</span> register_pass1</span><br><span class="line">        <span class="built_in">read</span> -p <span class="string">"请确认注册密码："</span> register_pass2</span><br><span class="line">        [ <span class="variable">$register_pass1</span> == <span class="variable">$register_pass2</span> ] &amp;&amp; &#123;</span><br><span class="line">          <span class="built_in">echo</span> <span class="string">"<span class="variable">$register_name</span> <span class="variable">$register_pass1</span>"</span> &gt;&gt; <span class="variable">$user_data_file</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="shell端口扫描"><a href="#shell端口扫描" class="headerlink" title="shell端口扫描"></a>shell端口扫描</h1><h2 id="企业中常用的监控命令"><a href="#企业中常用的监控命令" class="headerlink" title="企业中常用的监控命令"></a>企业中常用的监控命令</h2><table><thead><tr><th align="center">监控目标</th><th align="center">命令</th></tr></thead><tbody><tr><td align="center">本地端口监控</td><td align="center">netstat -lntup<br>ss -lntup<br>lsof<br>telnet<br></td></tr><tr><td align="center">远端监控</td><td align="center">nc<br>nmap<br></td></tr><tr><td align="center">进程监控</td><td align="center">ps -ef<br>ps -aux<br></td></tr><tr><td align="center">web监控</td><td align="center">curl<br>wget<br></td></tr><tr><td align="center">文件内容</td><td align="center">md5</td></tr></tbody></table><h3 id="端口检查"><a href="#端口检查" class="headerlink" title="端口检查"></a>端口检查</h3><p><strong>本地端口检测</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 错误方式</span></span><br><span class="line">[root@m01 ~]<span class="comment"># netstat -lntup|grep '22'</span></span><br><span class="line">tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      6914/sshd           </span><br><span class="line">tcp6       0      0 :::22                   :::*                    LISTEN      6914/sshd   </span><br><span class="line"></span><br><span class="line"><span class="comment">## netstat 正确方式</span></span><br><span class="line">[root@m01 ~]<span class="comment"># netstat -lntup|grep [s]shd</span></span><br><span class="line">tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      6914/sshd           </span><br><span class="line">tcp6       0      0 :::22                   :::*                    LISTEN      6914/sshd           </span><br><span class="line">[root@m01 ~]<span class="comment"># netstat -lntup|grep -w '22'</span></span><br><span class="line">tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      6914/sshd           </span><br><span class="line">tcp6       0      0 :::22                   :::*                    LISTEN      6914/sshd           </span><br><span class="line">[root@m01 ~]<span class="comment"># netstat -lntup|grep -w '22' &amp;&gt;/dev/null</span></span><br><span class="line">[root@m01 ~]<span class="comment"># echo $?</span></span><br><span class="line">0</span><br><span class="line">[root@m01 ~]<span class="comment"># netstat -lntup|grep -w '10050' &amp;&gt;/dev/null</span></span><br><span class="line">[root@m01 ~]<span class="comment"># echo $?</span></span><br><span class="line">1</span><br><span class="line">[root@m01 ~]<span class="comment"># netstat -lntup|grep -w '22'|wc -l </span></span><br><span class="line">2</span><br><span class="line">[root@m01 ~]<span class="comment"># netstat -lntup|grep -w '10050'|wc -l </span></span><br><span class="line">0</span><br><span class="line"></span><br><span class="line"><span class="comment">## ss</span></span><br><span class="line">[root@m01 ~]<span class="comment"># ss -lntup|grep 22</span></span><br><span class="line">tcp    LISTEN     0      128       *:22                    *:*                   users:((<span class="string">"sshd"</span>,pid=6914,fd=3))</span><br><span class="line">tcp    LISTEN     0      128      :::22                   :::*                   users:((<span class="string">"sshd"</span>,pid=6914,fd=4))</span><br><span class="line">[root@m01 ~]<span class="comment"># ss -lntup|grep -w 22</span></span><br><span class="line">tcp    LISTEN     0      128       *:22                    *:*                   users:((<span class="string">"sshd"</span>,pid=6914,fd=3))</span><br><span class="line">tcp    LISTEN     0      128      :::22                   :::*                   users:((<span class="string">"sshd"</span>,pid=6914,fd=4))</span><br><span class="line"></span><br><span class="line"><span class="comment">## lsof</span></span><br><span class="line">[root@m01 ~]<span class="comment"># lsof -i:22</span></span><br><span class="line">COMMAND   PID USER   FD   TYPE DEVICE SIZE/OFF NODE NAME</span><br><span class="line">sshd     6914 root    3u  IPv4  37631      0t0  TCP *:ssh (LISTEN)</span><br><span class="line">sshd     6914 root    4u  IPv6  37633      0t0  TCP *:ssh (LISTEN)</span><br><span class="line">sshd     7002 root    3u  IPv4  38381      0t0  TCP m01:ssh-&gt;10.0.0.1:58616 (ESTABLISHED)</span><br><span class="line">sshd    19974 root    3u  IPv4 202068      0t0  TCP m01:ssh-&gt;10.0.0.1:58531 (ESTABLISHED)</span><br></pre></td></tr></table></figure><h3 id="使用脚本判断远程端口是否存活"><a href="#使用脚本判断远程端口是否存活" class="headerlink" title="使用脚本判断远程端口是否存活"></a>使用脚本判断远程端口是否存活</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## telnet</span></span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">IP=<span class="variable">$1</span></span><br><span class="line">port_count=`<span class="built_in">echo</span> <span class="string">''</span>|telnet 172.16.1.7 80 2&gt;/dev/null |grep <span class="string">'Connected'</span>|wc -l`</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$port_count</span> -eq 0 ];<span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">'端口不存活'</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">'端口存活'</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 使用telnet端口扫描</span></span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">. /etc/init.d/<span class="built_in">functions</span></span><br><span class="line"></span><br><span class="line">IP=<span class="variable">$1</span></span><br><span class="line"><span class="keyword">for</span> port <span class="keyword">in</span> `seq 65535`;<span class="keyword">do</span></span><br><span class="line">        &#123;</span><br><span class="line">        port_count=`<span class="built_in">echo</span> <span class="string">''</span>|telnet <span class="variable">$IP</span> <span class="variable">$port</span> 2&gt;/dev/null |grep <span class="string">'Connected'</span>|wc -l`</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> [ <span class="variable">$port_count</span> -ne 0 ];<span class="keyword">then</span></span><br><span class="line">                action <span class="string">"<span class="variable">$port</span> 端口"</span> /bin/<span class="literal">true</span></span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">        &#125; &amp;</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## nc 网络中的瑞士军刀</span></span><br><span class="line">[root@m01 ~]<span class="comment"># echo ''|nc 172.16.1.7 80</span></span><br><span class="line">Ncat: Connection refused.</span><br><span class="line">[root@m01 ~]<span class="comment"># echo $?</span></span><br><span class="line">127</span><br><span class="line">[root@m01 ~]<span class="comment"># echo ''|nc 172.16.1.7 80</span></span><br><span class="line">[root@m01 ~]<span class="comment"># echo $?</span></span><br><span class="line">0</span><br><span class="line"></span><br><span class="line"><span class="comment"># nc选项</span></span><br><span class="line">-l：开启一个指定的端口</span><br><span class="line">-k：保持端口持续连接</span><br><span class="line">-u：指定nc使用udp协议（默认tcp）</span><br><span class="line">-s：指定发送数据的源IP地址，适用于多网卡机器</span><br><span class="line">-w：设置超时时间</span><br><span class="line">-z：扫描时不发送任何数据</span><br><span class="line"></span><br><span class="line"><span class="comment">## nmap</span></span><br><span class="line"><span class="comment"># 单个IP扫描</span></span><br><span class="line">[root@m01 ~]<span class="comment"># nmap 172.16.1.7</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 单个IP的单个端口扫描</span></span><br><span class="line">[root@m01 ~]<span class="comment"># nmap -p 22 172.16.1.7</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 单个IP的范围端口扫描</span></span><br><span class="line">[root@m01 ~]<span class="comment"># nmap -p 1-65535 172.16.1.7</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 多个IP的范围端口扫描</span></span><br><span class="line">[root@m01 ~]<span class="comment"># nmap -p 1-65535 172.16.1.7 driverzeng.com</span></span><br></pre></td></tr></table></figure><h2 id="进程判断"><a href="#进程判断" class="headerlink" title="进程判断"></a>进程判断</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[root@web01 ~]<span class="comment"># ps -ef|grep [n]ginx</span></span><br><span class="line">root      12209      1  0 10:42 ?        00:00:00 nginx: master process /usr/sbin/nginx -c /etc/nginx/nginx.conf</span><br><span class="line">www       12210  12209  0 10:42 ?        00:00:00 nginx: worker process</span><br><span class="line">[root@web01 ~]<span class="comment"># ps -ef|grep [n]ginx|wc -l</span></span><br><span class="line">2</span><br><span class="line">[root@web01 ~]<span class="comment"># ps -ef|grep [n]ginx1111|wc -l</span></span><br><span class="line">0</span><br><span class="line"></span><br><span class="line"><span class="comment">## 远程进程检测</span></span><br><span class="line">vim check_process.sh</span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">proc_count=`ssh 172.16.1.7 <span class="string">'ps -ef|grep [n]ginx|wc -l'</span>`</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$proc_count</span> -eq 0 ];<span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">'nginx不存活'</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">'nginx存活'</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><h2 id="网站检测"><a href="#网站检测" class="headerlink" title="网站检测"></a>网站检测</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">curl选项</span><br><span class="line">-I：获取主机响应头部信息</span><br><span class="line">-s：取消默认输出</span><br><span class="line">-o：保存下载页面内容</span><br><span class="line">-w：获取状态码</span><br><span class="line">-u：身份认证  -u 用户名:密码</span><br><span class="line">-H：添加请求头部信息</span><br><span class="line">-v：显示详细信息</span><br><span class="line">-L：跟随跳转</span><br><span class="line">-X：指定请求方式</span><br><span class="line">-A：修改用户的客户端</span><br><span class="line"></span><br><span class="line">[root@m01 ~]<span class="comment"># curl -uroger:roger -s -w "%&#123;http_code&#125;" -o /dev/null blog.roger.com</span></span><br><span class="line">[root@m01 ~]<span class="comment"># curl  -s -w "%&#123;http_code&#125;" -o /dev/null http://roger:roger@blog.roger.com</span></span><br><span class="line">[root@m01 ~]<span class="comment"># curl -v http://www.360buy.com -L</span></span><br><span class="line"></span><br><span class="line">wget选项</span><br><span class="line">-O：保存下载页面内容</span><br><span class="line">-r：递归下载</span><br><span class="line">--debug：显示访问的详细过程 类似 curl -v</span><br><span class="line">-q：静默输出  类似 curl -s</span><br><span class="line">--spider：只查看不下载</span><br></pre></td></tr></table></figure><h2 id="文件检测"><a href="#文件检测" class="headerlink" title="文件检测"></a>文件检测</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@m01 ~]<span class="comment"># md5sum 1.txt </span></span><br><span class="line">6de9439834c9147569741d3c9c9fc010  1.txt</span><br><span class="line">[root@m01 ~]<span class="comment"># md5sum 1.txt &gt; /tmp/check_1.txt</span></span><br><span class="line">[root@m01 ~]<span class="comment"># md5sum -c /tmp/check_1.txt </span></span><br><span class="line">1.txt: OK</span><br><span class="line">[root@m01 ~]<span class="comment"># md5sum -c /tmp/check_1.txt </span></span><br><span class="line">1.txt: OK</span><br><span class="line">[root@m01 ~]<span class="comment"># md5sum -c /tmp/check_1.txt </span></span><br><span class="line">1.txt: OK</span><br><span class="line">[root@m01 ~]<span class="comment"># md5sum -c /tmp/check_1.txt </span></span><br><span class="line">1.txt: OK</span><br><span class="line">[root@m01 ~]<span class="comment"># echo 111 &gt; 1.txt </span></span><br><span class="line">[root@m01 ~]<span class="comment"># md5sum -c /tmp/check_1.txt </span></span><br><span class="line">1.txt: FAILED</span><br><span class="line">md5sum: WARNING: 1 computed checksum did NOT match</span><br></pre></td></tr></table></figure><h1 id="shell编程函数"><a href="#shell编程函数" class="headerlink" title="shell编程函数"></a>shell编程函数</h1><h2 id="函数介绍"><a href="#函数介绍" class="headerlink" title="函数介绍"></a>函数介绍</h2><p>函数就是具备某一个功能的工具</p><h2 id="为什么要使用函数"><a href="#为什么要使用函数" class="headerlink" title="为什么要使用函数"></a>为什么要使用函数</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">如果不使用函数，那么你的代码：</span><br><span class="line">1.程序的组织结构不清晰，可读性差</span><br><span class="line">2.代码冗余</span><br><span class="line">3.可扩展性（功能需要修改的时候...对不起GG）</span><br></pre></td></tr></table></figure><h2 id="如何使用函数"><a href="#如何使用函数" class="headerlink" title="如何使用函数"></a>如何使用函数</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">函数的使用必须遵循的原则：先定义，后调用</span><br><span class="line">修理工事先准备好工具的过程，即，定义函数</span><br><span class="line">修理工遇到应用场景拿来工具就用即函数的调用</span><br></pre></td></tr></table></figure><h2 id="函数语法"><a href="#函数语法" class="headerlink" title="函数语法"></a>函数语法</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> 函数名 () &#123;</span><br><span class="line">    命令1</span><br><span class="line">    命令2</span><br><span class="line">    命令3</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> 函数名 &#123;</span><br><span class="line">    命令1</span><br><span class="line">    命令2</span><br><span class="line">    命令3</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">函数名 () &#123;</span><br><span class="line">    命令1</span><br><span class="line">    命令2</span><br><span class="line">    命令3</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">:() &#123; </span><br><span class="line">: | : &amp; </span><br><span class="line">&#125;;:</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">roger</span></span>()&#123; </span><br><span class="line">roger | roger &amp; </span><br><span class="line">&#125;;roger</span><br><span class="line"></span><br><span class="line">ls ; ifocnfig</span><br><span class="line"></span><br><span class="line"><span class="comment">## 函数的定义和调用</span></span><br><span class="line">[root@m01 ~]<span class="comment"># vim function.sh</span></span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">roger</span></span>()&#123;</span><br><span class="line">        xxx</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">xxx</span></span>()&#123;</span><br><span class="line">        <span class="built_in">echo</span> 123</span><br><span class="line">&#125;</span><br><span class="line">roger</span><br><span class="line"></span><br><span class="line"><span class="comment">## 错误的调用方式</span></span><br><span class="line">[root@m01 ~]<span class="comment"># vim function.sh</span></span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">roger</span></span>()&#123;</span><br><span class="line">        xxx</span><br><span class="line">&#125;</span><br><span class="line">roger</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">xxx</span></span>()&#123;</span><br><span class="line">        <span class="built_in">echo</span> 123</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">## 函数的位置变量</span></span><br><span class="line">[root@m01 ~]<span class="comment"># !vim</span></span><br><span class="line">vim function.sh</span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">name=<span class="variable">$1</span></span><br><span class="line">age=<span class="variable">$2</span></span><br><span class="line"><span class="function"><span class="title">roger</span></span>()&#123;</span><br><span class="line">        <span class="built_in">echo</span> <span class="variable">$1</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="variable">$2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">roger <span class="variable">$1</span> xxx</span><br></pre></td></tr></table></figure><h2 id="函数位置变量VS脚本位置变量"><a href="#函数位置变量VS脚本位置变量" class="headerlink" title="函数位置变量VS脚本位置变量"></a>函数位置变量VS脚本位置变量</h2><table><thead><tr><th align="center">特殊变量</th><th align="center">脚本</th><th align="center">函数</th></tr></thead><tbody><tr><td align="center">$N</td><td align="center">脚本的第N个参数</td><td align="center">函数的第N个参数</td></tr><tr><td align="center">$0</td><td align="center">脚本名称</td><td align="center">脚本名称</td></tr><tr><td align="center">$*/$@</td><td align="center">脚本的所有参数</td><td align="center">脚本的所有参数</td></tr><tr><td align="center">$#</td><td align="center">脚本传递的参数个数</td><td align="center">函数传递的参数个数</td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[root@m01 ~]<span class="comment"># !vim</span></span><br><span class="line">vim function.sh </span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">name=<span class="variable">$1</span></span><br><span class="line">age=<span class="variable">$2</span></span><br><span class="line">var=$*</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"函数外 <span class="variable">$0</span>"</span></span><br><span class="line"><span class="function"><span class="title">roger</span></span>()&#123;</span><br><span class="line">        <span class="built_in">echo</span> <span class="variable">$1</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="variable">$2</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"函数内 <span class="variable">$0</span>"</span></span><br><span class="line">        <span class="built_in">echo</span> $*</span><br><span class="line">        <span class="built_in">echo</span> <span class="variable">$#</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">roger abc xxx</span><br></pre></td></tr></table></figure><h2 id="函数的返回值"><a href="#函数的返回值" class="headerlink" title="函数的返回值"></a>函数的返回值</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">[root@m01 ~]<span class="comment"># cat function.sh</span></span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">. /etc/init.d/<span class="built_in">functions</span></span><br><span class="line">domain_name_list=(www.roger.com blog.roger.com php.roger.com)</span><br><span class="line">IP_list=(10.0.0.61 10.0.0.7)</span><br><span class="line">proc_count=`ps -ef|grep [n]ginx|wc -l`</span><br><span class="line">port_80_count=`netstat -lntup|grep -w <span class="string">'80'</span>|wc -l`</span><br><span class="line">port_443_count=`netstat -lntup|grep -w <span class="string">'443'</span>|wc -l`</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">check</span></span>()&#123;</span><br><span class="line"><span class="keyword">for</span> domain_name <span class="keyword">in</span> <span class="variable">$&#123;domain_name_list[*]&#125;</span>;<span class="keyword">do</span></span><br><span class="line">        http_code=`curl -s -w <span class="string">"%&#123;http_code&#125;"</span> -o /dev/null <span class="variable">$domain_name</span>`</span><br><span class="line">        <span class="keyword">if</span> [ <span class="variable">$http_code</span> -eq 401  ];<span class="keyword">then</span></span><br><span class="line">                action <span class="string">"<span class="variable">$&#123;domain_name&#125;</span>网站正常，但是身份验证不通过"</span> /bin/<span class="literal">false</span></span><br><span class="line">        <span class="keyword">elif</span> [[ <span class="variable">$http_code</span> =~ ^[4-5] ]];<span class="keyword">then</span></span><br><span class="line">                action <span class="string">"<span class="variable">$&#123;domain_name&#125;</span>网站无法访问"</span>  /bin/<span class="literal">false</span></span><br><span class="line">        <span class="keyword">elif</span> [ <span class="variable">$proc_count</span> -le 0 ];<span class="keyword">then</span></span><br><span class="line">                action <span class="string">"nginx进程"</span> /bin/<span class="literal">false</span></span><br><span class="line">        <span class="keyword">elif</span> [ <span class="variable">$port_80_count</span> -le 0 ];<span class="keyword">then</span></span><br><span class="line">                action <span class="string">"nginx的80端口检测"</span> /bin/<span class="literal">false</span></span><br><span class="line">        <span class="comment">#elif [ $port_443_count -le 0 ];then</span></span><br><span class="line">        <span class="comment">#       echo 'nginx的443端口不存在'</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">                action <span class="string">"<span class="variable">$&#123;domain_name&#125;</span>网站"</span> /bin/<span class="literal">true</span></span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="keyword">if</span> [  ];<span class="keyword">then</span></span><br><span class="line"><span class="built_in">return</span> 10</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">return</span> 20</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">check</span><br><span class="line"><span class="keyword">if</span> [ $? -eq 20 ];<span class="keyword">then</span></span><br><span class="line">xxx</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 函数的返回值</span></span><br><span class="line">function.sh: line 27: <span class="built_in">return</span>: ok: numeric argument required</span><br><span class="line">函数返回值只接收，数字类型的参数</span><br><span class="line"></span><br><span class="line">function.sh: line 27: <span class="built_in">return</span>: too many arguments</span><br><span class="line">函数的返回值，只能接收一个参数</span><br></pre></td></tr></table></figure><h2 id="作业："><a href="#作业：" class="headerlink" title="作业："></a>作业：</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">cat &lt;&lt;EOF</span><br><span class="line">+---------+</span><br><span class="line">| 1.lnmp  |</span><br><span class="line">+---------+</span><br><span class="line">| 2.lnmt  |</span><br><span class="line">+---------+</span><br><span class="line">| 3.lamp  |</span><br><span class="line">+---------+</span><br><span class="line">| 4.lamt  |</span><br><span class="line">+---------+</span><br><span class="line">| 5.nginx |</span><br><span class="line">+---------+</span><br><span class="line">| 6.apache|</span><br><span class="line">+---------+</span><br><span class="line">| 7.tomcat|</span><br><span class="line">+---------+</span><br><span class="line">| 8.php   |</span><br><span class="line">+---------+</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">ansible  -m file -a <span class="string">'mode=0644,owner=root,path=/tmp,state=directory'</span></span><br><span class="line">根据菜单，安装对应的架构</span><br><span class="line">输入数字和 lnmp  nginx</span><br></pre></td></tr></table></figure><h1 id="shell-循环"><a href="#shell-循环" class="headerlink" title="shell 循环"></a>shell 循环</h1><h2 id="循环的分类"><a href="#循环的分类" class="headerlink" title="循环的分类"></a>循环的分类</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>：当型循环应用场景：死循环、按行读取文件、有条件的循环</span><br><span class="line"><span class="keyword">do</span> until：直到型循环    应用场景：没有场景</span><br><span class="line"><span class="keyword">for</span>：通用型循环   应用场景：很多应用场景</span><br></pre></td></tr></table></figure><h2 id="循环语法"><a href="#循环语法" class="headerlink" title="循环语法"></a>循环语法</h2><h3 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> &lt;条件表达式&gt;;<span class="keyword">do</span></span><br><span class="line">cmd1</span><br><span class="line">cmd2</span><br><span class="line">cmd3</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> &lt;条件表达式&gt;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">cmd1</span><br><span class="line">cmd2</span><br><span class="line">cmd3</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### 死循环</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">true</span>;<span class="keyword">do</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">'hei hei hei'</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> [ 1 -eq 1 ];<span class="keyword">do</span> </span><br><span class="line">  <span class="built_in">echo</span> <span class="string">'hei hei hei'</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> :;<span class="keyword">do</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">'hei hei hei'</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h2 id="使用while循环模拟for循环seq"><a href="#使用while循环模拟for循环seq" class="headerlink" title="使用while循环模拟for循环seq"></a>使用while循环模拟for循环seq</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">n=1</span><br><span class="line"><span class="keyword">while</span> [ <span class="variable">$n</span> -le 10 ];<span class="keyword">do</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="variable">$n</span></span><br><span class="line">        ((n++))</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> `seq 10`;<span class="keyword">do</span></span><br><span class="line">       <span class="built_in">echo</span> <span class="variable">$n</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">1+2+3+4+5+6+7+8+9+10+...+100</span><br><span class="line">(1+100)*100/2=5050</span><br><span class="line"></span><br><span class="line">1+2+3+...+9</span><br></pre></td></tr></table></figure><h2 id="使用while循环实现1加到100"><a href="#使用while循环实现1加到100" class="headerlink" title="使用while循环实现1加到100"></a>使用while循环实现1加到100</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">i=1</span><br><span class="line">num=0</span><br><span class="line"><span class="keyword">while</span> [ <span class="variable">$i</span> -le 100 ];<span class="keyword">do</span></span><br><span class="line">((num=num+i))</span><br><span class="line">((i++))</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$num</span></span><br><span class="line"></span><br><span class="line">[root@m01 ~]<span class="comment"># echo &#123;1..100&#125;|tr ' ' '+'|bc</span></span><br><span class="line">5050</span><br><span class="line">[root@m01 ~]<span class="comment"># seq -s+ 100|bc</span></span><br><span class="line">5050</span><br><span class="line">[root@m01 ~]<span class="comment"># seq 100|awk '&#123;m=m+$1&#125;END&#123;print m&#125;'</span></span><br><span class="line">5050</span><br><span class="line">[root@m01 ~]<span class="comment"># awk 'BEGIN&#123;for(i=1;i&lt;=100;i++)sum=sum+i;print sum&#125;'</span></span><br><span class="line">5050</span><br></pre></td></tr></table></figure><h2 id="until循环-忘记它"><a href="#until循环-忘记它" class="headerlink" title="until循环(忘记它)"></a>until循环(忘记它)</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">until &lt;条件表达式&gt;;<span class="keyword">do</span></span><br><span class="line">cmd1</span><br><span class="line">cmd2</span><br><span class="line">cmd3</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">until &lt;条件表达式&gt;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">cmd1</span><br><span class="line">cmd2</span><br><span class="line">cmd3</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">n=0</span><br><span class="line">until [ <span class="variable">$n</span> -gt 10 ];<span class="keyword">do</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="variable">$n</span></span><br><span class="line">        ((n++))</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>until 循环执行一系列命令直至条件为 true 时停止。</p><p>until 循环与 while 循环在处理方式上刚好相反。</p><p>一般 while 循环优于 until 循环，但在某些时候—也只是极少数情况下，until 循环更加有用。</p><h2 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h2><h3 id="语法一"><a href="#语法一" class="headerlink" title="语法一"></a>语法一</h3><p>无法指定循环次数，变量表达式中有多少内容就循环多少次</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> var <span class="keyword">in</span> roger wyk huanglong;<span class="keyword">do</span></span><br><span class="line">cmd1</span><br><span class="line">cmd2</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> var <span class="keyword">in</span> 变量表达式</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">cmd1</span><br><span class="line">cmd2</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">变量表达式：</span><br><span class="line">- 可以是文件中的内容（按空格循环）</span><br><span class="line">- 可以是序列命令的内容</span><br><span class="line">- 可以是数组中的内容</span><br><span class="line">- 可以是以空格为分隔符的字符串</span><br><span class="line"></span><br><span class="line"><span class="comment">## 文件内容</span></span><br><span class="line"><span class="keyword">for</span> var <span class="keyword">in</span> `cat 1.txt`;<span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$var</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> var <span class="keyword">in</span> $(cat 1.txt);<span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$var</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 序列内容</span></span><br><span class="line"><span class="keyword">for</span> var <span class="keyword">in</span> `seq 10`;<span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$var</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 数组</span></span><br><span class="line">[root@m01 ~]<span class="comment"># vim a.sh </span></span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">array=(roger wyk huanglong)</span><br><span class="line"><span class="keyword">for</span> var <span class="keyword">in</span> <span class="variable">$&#123;array[*]&#125;</span>;<span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$var</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 以空格为分割符的字符串</span></span><br><span class="line">name=<span class="string">"roger wyk huanglong"</span></span><br><span class="line"><span class="keyword">for</span> var <span class="keyword">in</span> <span class="variable">$name</span>;<span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$var</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h3 id="语法二"><a href="#语法二" class="headerlink" title="语法二"></a>语法二</h3><p>指定循环次数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>((i=1;i&lt;=10;i++));<span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$i</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>死循环</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (( ; ; ));<span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> 123</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h2 id="循环的控制语句"><a href="#循环的控制语句" class="headerlink" title="循环的控制语句"></a>循环的控制语句</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-<span class="built_in">continue</span></span><br><span class="line">-<span class="built_in">break</span></span><br></pre></td></tr></table></figure><h3 id="break跳出循环"><a href="#break跳出循环" class="headerlink" title="break跳出循环"></a>break跳出循环</h3><p>break命令允许跳出所有循环（终止执行后面的所有循环）。</p><p>下面的例子中，脚本进入死循环直至用户输入数字大于5。要跳出这个循环，返回到shell提示符下，需要使用break命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">true</span>;<span class="keyword">do</span></span><br><span class="line"><span class="built_in">read</span> -p <span class="string">'Please Input A Number: '</span> num</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$num</span> -ne 5 ];<span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"你输入的是 <span class="variable">$num</span>"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">break</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">n=0</span><br><span class="line"><span class="keyword">while</span> [ <span class="variable">$n</span> -lt 10 ];<span class="keyword">do</span></span><br><span class="line">((n++))</span><br><span class="line">    <span class="keyword">if</span> [ <span class="variable">$n</span> -eq 5 ];<span class="keyword">then</span></span><br><span class="line">            <span class="built_in">break</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$n</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h3 id="continue-跳出循环"><a href="#continue-跳出循环" class="headerlink" title="continue 跳出循环"></a>continue 跳出循环</h3><p>continue命令与break命令类似，只有一点差别，它不会跳出所有循环，仅仅跳出当前循环。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">true</span>;<span class="keyword">do</span></span><br><span class="line"><span class="built_in">read</span> -p <span class="string">'Please Input A Number: '</span> num</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$num</span> -ne 5 ];<span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"你输入的是 <span class="variable">$num</span>"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">continue</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">n=0</span><br><span class="line"><span class="keyword">while</span> [ <span class="variable">$n</span> -lt 10 ];<span class="keyword">do</span></span><br><span class="line">((n++))</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$n</span> -eq 5 ];<span class="keyword">then</span></span><br><span class="line"><span class="built_in">continue</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$n</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h2 id="while循环读取文件"><a href="#while循环读取文件" class="headerlink" title="while循环读取文件"></a>while循环读取文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## for循环读取文件</span></span><br><span class="line">[root@m01 ~]<span class="comment"># cat 1.txt </span></span><br><span class="line">www.roger.com   wyk</span><br><span class="line">blog.roger.com  huanglong</span><br><span class="line">php.roger.com   wujiahao</span><br><span class="line"></span><br><span class="line">[root@m01 ~]<span class="comment"># cat a.sh </span></span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> word <span class="keyword">in</span> `cat 1.txt`;<span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$word</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## while读取文件</span></span><br><span class="line"><span class="comment"># 方法一：</span></span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">exec</span> &lt; 1.txt</span><br><span class="line"><span class="keyword">while</span> <span class="built_in">read</span> line;<span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'---------'</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$line</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法二：</span></span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">cat 1.txt|<span class="keyword">while</span> <span class="built_in">read</span> line;<span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'---------'</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$line</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法三：</span></span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="built_in">read</span> line;<span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'---------'</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$line</span></span><br><span class="line"><span class="keyword">done</span> &lt; 1.txt</span><br></pre></td></tr></table></figure><h3 id="while练习"><a href="#while练习" class="headerlink" title="while练习"></a>while练习</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">写一个脚本，读取下面文件内容，并算出所有人年龄总和</span><br><span class="line">[root@zabbix01 ~]<span class="comment"># cat student.txt</span></span><br><span class="line">曾老湿 18</span><br><span class="line">苍井空 20</span><br><span class="line">武藤兰 33</span><br><span class="line">天海翼 32</span><br><span class="line">西野翔 18</span><br><span class="line"></span><br><span class="line"><span class="comment">## 方法一：</span></span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">sum=0</span><br><span class="line"><span class="keyword">while</span> <span class="built_in">read</span> line;<span class="keyword">do</span></span><br><span class="line">age=`<span class="built_in">echo</span> <span class="variable">$line</span>|awk <span class="string">'&#123;print $2&#125;'</span>`</span><br><span class="line">((sum+=age))</span><br><span class="line"><span class="keyword">done</span> &lt; 1.txt</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$sum</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 方法二：</span></span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">sum=0</span><br><span class="line"><span class="built_in">exec</span> &lt; 1.txt</span><br><span class="line"><span class="keyword">while</span> <span class="built_in">read</span> line;<span class="keyword">do</span></span><br><span class="line">age=`<span class="built_in">echo</span> <span class="variable">$line</span>|awk <span class="string">'&#123;print $2&#125;'</span>`</span><br><span class="line">((sum+=age))</span><br><span class="line"><span class="keyword">done</span> &lt; 1.txt</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$sum</span></span><br></pre></td></tr></table></figure><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><h3 id="案例一："><a href="#案例一：" class="headerlink" title="案例一："></a>案例一：</h3><h2 id="日志分析案例"><a href="#日志分析案例" class="headerlink" title="日志分析案例"></a>日志分析案例</h2><p>写一个shell脚本，防止DDOS攻击，先分析日志，监控某一个IP并发连接数，若短时内PV达到100阈值，则调用防火墙命令，封掉该IP。</p><p>可以分析nginx日志或者查看当前网络连接数 ss -ant 或者 netstat -ant</p><p>这里使用一个生产的日志 <a href="http://test.driverzeng.com/other/netstat.log" target="_blank" rel="noopener">netstat.log</a></p><h3 id="案例二："><a href="#案例二：" class="headerlink" title="案例二："></a>案例二：</h3><p>在指定目录下，通过随机10个小写字母，然后生成一个文件名为：<code>随机字母_roger.txt</code>的文件</p><p><strong>生成随机内容的方法</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 方法一：</span></span><br><span class="line">[root@zabbix01 ~]<span class="comment"># openssl rand -base64 10</span></span><br><span class="line">UUBtKUvUkEfcEw==</span><br><span class="line"></span><br><span class="line"><span class="comment">## 方法二：</span></span><br><span class="line">[root@zabbix01 ~]<span class="comment"># echo $((RANDOM))|md5sum</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 方法三：</span></span><br><span class="line">[root@zabbix01 ~]<span class="comment"># date +%N|md5sum</span></span><br><span class="line">3fd3a5c57def5f89481e1961fceb13e8</span><br><span class="line"></span><br><span class="line"><span class="comment">## 方法四：</span></span><br><span class="line">tr -<span class="built_in">cd</span> <span class="string">'a-zA-Z0-9'</span>&lt;/dev/urandom|head -c 10</span><br></pre></td></tr></table></figure><h3 id="案例三："><a href="#案例三：" class="headerlink" title="案例三："></a>案例三：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 提示一：变量子串方法</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 提示二：sed awk方法</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 提示三：命令拼接</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 提示四：rename</span></span><br><span class="line">rename roger.txt cls.TXT /root/*.txt</span><br><span class="line"></span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> `ls -1 /abc`;<span class="keyword">do</span></span><br><span class="line"><span class="comment">#mv /abc/$&#123;name%.*&#125;.yml /abc/$&#123;name%.*&#125;.j2</span></span><br><span class="line">mv /abc/<span class="variable">$name</span> /abc/<span class="variable">$&#123;name//j2/yml&#125;</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h3 id="案例四："><a href="#案例四：" class="headerlink" title="案例四："></a>案例四：</h3><p>创建100个系统用户，生成随机密码</p><p>并将用户名和密码保存到文件中</p><p>用户名:密码</p><h3 id="案例五："><a href="#案例五：" class="headerlink" title="案例五："></a>案例五：</h3><p>现在我们要模拟黑客，来扫描，指定网段内存活的主机</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> `seq 255`;<span class="keyword">do</span></span><br><span class="line">ping 10.0.0.<span class="variable">$n</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 优化后的</span></span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">. /etc/init.d/<span class="built_in">functions</span></span><br><span class="line"><span class="comment">#for n in `seq 254`;do</span></span><br><span class="line"><span class="comment">#  ping -c 1 10.0.0.$n</span></span><br><span class="line"><span class="comment">#done</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> `seq 254`;<span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">ping -c1 -W1 -i1 10.0.0.<span class="variable">$n</span> &amp;&gt;/dev/null</span><br><span class="line"><span class="keyword">if</span> [ $? -eq 0 ];<span class="keyword">then</span></span><br><span class="line">action 10.0.0.<span class="variable">$n</span> /bin/<span class="literal">true</span></span><br><span class="line"><span class="keyword">for</span> ;<span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">xxx</span><br><span class="line">&#125; &amp;</span><br><span class="line">usleep 300</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">&#125; &amp;</span><br><span class="line">usleep 300</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#### 扫描存活的主机后，在存活的主机上，扫描都开了哪些端口？</span></span><br></pre></td></tr></table></figure><p><strong>figlet</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@zabbix01 ~]<span class="comment"># figlet roger</span></span><br><span class="line">[root@zabbix01 ~]<span class="comment"># showfigfonts</span></span><br><span class="line">[root@zabbix01 ~]<span class="comment"># figlet roger -f banner</span></span><br><span class="line">[root@zabbix01 ~]<span class="comment"># watch -n1 "date +%D%n%T|figlet -k"</span></span><br></pre></td></tr></table></figure><h1 id="shell-case语句"><a href="#shell-case语句" class="headerlink" title="shell case语句"></a>shell case语句</h1><h2 id="写一个跳板机"><a href="#写一个跳板机" class="headerlink" title="写一个跳板机"></a>写一个跳板机</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">cat &lt;&lt;EOF</span><br><span class="line">+------------------------+</span><br><span class="line">| 1 172.16.1.7 web01     |</span><br><span class="line">+------------------------+</span><br><span class="line">| 2 172.16.1.8 web02     |</span><br><span class="line">+------------------------+</span><br><span class="line">| 3 172.16.1.31 nfs      |</span><br><span class="line">+------------------------+</span><br><span class="line">| 4 172.16.1.41 backup   |</span><br><span class="line">+------------------------+</span><br><span class="line">| 5 172.16.1.51 db01     |</span><br><span class="line">+------------------------+</span><br><span class="line">| 6 172.16.1.52 db02     |</span><br><span class="line">+------------------------+</span><br><span class="line">| 7 172.16.1.53 db03     |</span><br><span class="line">+------------------------+</span><br><span class="line">| 8 172.16.1.54 db04     |</span><br><span class="line">+------------------------+</span><br><span class="line">| 9 172.16.1.61 m01      |</span><br><span class="line">+------------------------+</span><br><span class="line">| 10 172.16.1.71 zabbix  |</span><br><span class="line">+------------------------+</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="built_in">read</span> -p <span class="string">'请输入需要连接的主机：'</span> host</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$host</span> == <span class="string">'1'</span> -o <span class="variable">$host</span> == <span class="string">'172.16.1.7'</span> -o <span class="variable">$host</span> == <span class="string">'web01'</span> ];<span class="keyword">then</span></span><br><span class="line"><span class="comment">#ssh 172.16.1.7</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'连接 172.16.1.7 web01'</span></span><br><span class="line"><span class="keyword">elif</span> [ <span class="variable">$host</span> == <span class="string">'2'</span> -o <span class="variable">$host</span> == <span class="string">'172.16.1.8'</span> -o <span class="variable">$host</span> == <span class="string">'web02'</span> ];<span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'连接 172.16.1.8 web02'</span></span><br><span class="line"><span class="keyword">elif</span> [ <span class="variable">$host</span> == <span class="string">'3'</span> -o <span class="variable">$host</span> == <span class="string">'172.16.1.31'</span> -o <span class="variable">$host</span> == <span class="string">'nfs'</span> ];<span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'连接 172.16.1.31 nfs'</span></span><br><span class="line"><span class="keyword">elif</span> [ <span class="variable">$host</span> == <span class="string">'4'</span> -o <span class="variable">$host</span> == <span class="string">'172.16.1.41'</span> -o <span class="variable">$host</span> == <span class="string">'backup'</span> ];<span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'连接 172.16.1.41 backup'</span></span><br><span class="line"><span class="keyword">elif</span> [ <span class="variable">$host</span> == <span class="string">'5'</span> -o <span class="variable">$host</span> == <span class="string">'172.16.1.51'</span> -o <span class="variable">$host</span> == <span class="string">'db01'</span> ];<span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'连接 172.16.1.51 db01'</span></span><br><span class="line"><span class="keyword">elif</span> [ <span class="variable">$host</span> == <span class="string">'6'</span> -o <span class="variable">$host</span> == <span class="string">'172.16.1.52'</span> -o <span class="variable">$host</span> == <span class="string">'db02'</span> ];<span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'连接 172.16.1.52 db02'</span></span><br><span class="line"><span class="keyword">elif</span> [ <span class="variable">$host</span> == <span class="string">'7'</span> -o <span class="variable">$host</span> == <span class="string">'172.16.1.53'</span> -o <span class="variable">$host</span> == <span class="string">'db03'</span> ];<span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'连接 172.16.1.53 db03'</span></span><br><span class="line"><span class="keyword">elif</span> [ <span class="variable">$host</span> == <span class="string">'8'</span> -o <span class="variable">$host</span> == <span class="string">'172.16.1.54'</span> -o <span class="variable">$host</span> == <span class="string">'db04'</span> ];<span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'连接 172.16.1.54 db04'</span></span><br><span class="line"><span class="keyword">elif</span> [ <span class="variable">$host</span> == <span class="string">'9'</span> -o <span class="variable">$host</span> == <span class="string">'172.16.1.61'</span> -o <span class="variable">$host</span> == <span class="string">'m01'</span> ];<span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'连接 172.16.1.61 m01'</span></span><br><span class="line"><span class="keyword">elif</span> [ <span class="variable">$host</span> == <span class="string">'10'</span> -o <span class="variable">$host</span> == <span class="string">'172.16.1.71'</span> -o <span class="variable">$host</span> == <span class="string">'zabbix'</span> ];<span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'连接 172.16.1.71 zabbix'</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><h2 id="case语句"><a href="#case语句" class="headerlink" title="case语句"></a>case语句</h2><p>case … esac 为多选择语句，与其他语言中的 switch … case 语句类似，是一种多分枝选择结构，每个 case 分支用右圆括号开始，用两个分号 ;; 表示 break，即执行结束，跳出整个 case … esac 语句，esac（就是 case 反过来）作为结束标记。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 语法：</span></span><br><span class="line"><span class="keyword">case</span> 变量 <span class="keyword">in</span></span><br><span class="line">动作1|动作3|动作4)</span><br><span class="line">cmd1</span><br><span class="line">;;</span><br><span class="line">动作2)</span><br><span class="line">cmd2</span><br><span class="line">*)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'脚本的用法'</span></span><br><span class="line">;;</span><br><span class="line"><span class="keyword">esac</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span>会将变量和动作进行判断</span><br><span class="line">可以进行多动作判断，使用   <span class="string">'|'</span>  或</span><br></pre></td></tr></table></figure><h2 id="给shell加颜色"><a href="#给shell加颜色" class="headerlink" title="给shell加颜色"></a>给shell加颜色</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 固定格式</span></span><br><span class="line">\e[1;31mroger\e[0m</span><br><span class="line"></span><br><span class="line">red_start=<span class="string">'\e[1;31m'</span></span><br><span class="line">red_end=<span class="string">'\e[0m'</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$red_start</span> xxx <span class="variable">$red_end</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">'\e[1;31mroger\e[0m'</span></span><br><span class="line"></span><br><span class="line">[root@m01 ~]<span class="comment"># echo -e '\e[5;32;41m roger \e[0m'</span></span><br><span class="line"></span><br><span class="line">\e \033 \E</span><br><span class="line">字体型号;字体颜色;背景颜色m</span><br><span class="line"></span><br><span class="line"><span class="comment">## 字体型号：</span></span><br><span class="line">0：正常字体</span><br><span class="line">1：字体加粗</span><br><span class="line">2：字体变浅</span><br><span class="line">3：字体斜体</span><br><span class="line">4：字体下划线</span><br><span class="line">5：字体闪烁</span><br><span class="line"></span><br><span class="line"><span class="comment">## 字体颜色</span></span><br><span class="line">30m：黑色</span><br><span class="line">31m：红色</span><br><span class="line">32m：绿色</span><br><span class="line">33m：黄色</span><br><span class="line">34m：蓝色</span><br><span class="line">35m：紫色</span><br><span class="line">36m：天蓝</span><br><span class="line">37m：白色</span><br><span class="line"></span><br><span class="line"><span class="comment">## 背景颜色</span></span><br><span class="line">40m：黑色</span><br><span class="line">41m：红色</span><br><span class="line">42m：绿色</span><br><span class="line">43m：黄色</span><br><span class="line">44m：蓝色</span><br><span class="line">45m：紫色</span><br><span class="line">46m：天蓝</span><br><span class="line">47m：白色</span><br></pre></td></tr></table></figure><h1 id="正则表达式-1"><a href="#正则表达式-1" class="headerlink" title="正则表达式"></a>正则表达式</h1><p>正则表达式，简写：re，全拼：（regular expression） 在某些地区，管它叫做，正规表达式、规则表达式</p><p>正则表达式的”祖先”可以一直上溯至对人类神经系统如何工作的早期研究。Warren McCulloch 和 Walter Pitts 这两位神经生理学家研究出一种数学方式来描述这些神经网络。</p><p>1956 年, 一位叫 Stephen Kleene 的数学家在 McCulloch 和 Pitts 早期工作的基础上，发表了一篇标题为”神经网事</p><p>件的表示法”的论文，引入了正则表达式的概念。正则表达式就是用来描述他称为”正则集的代数”的表达式，因此采用”正则表达式”这个术语。</p><p>随后，发现可以将这一工作应用于使用 Ken Thompson 的计算搜索算法的一些早期研究，Ken Thompson 是 Unix的主要发明人。正则表达式的第一个实用应用程序就是 Unix 中的 qed 编辑器。</p><p>如他们所说，剩下的就是众所周知的历史了。从那时起直至现在正则表达式都是基于文本的编辑器和搜索工具中的一个重要部分。</p><h2 id="正则和通配符"><a href="#正则和通配符" class="headerlink" title="正则和通配符"></a>正则和通配符</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 通配符</span></span><br><span class="line"><span class="comment">## 跟下所有文件</span></span><br><span class="line">ls /*</span><br><span class="line"></span><br><span class="line"><span class="comment"># 正则</span></span><br><span class="line">*</span><br><span class="line">前面的字符出现0次或者多次</span><br></pre></td></tr></table></figure><h2 id="为什么使用正则"><a href="#为什么使用正则" class="headerlink" title="为什么使用正则"></a>为什么使用正则</h2><p>1.方便处理文本和字符串内容</p><p>2.处理有规律的内容（手机号，身份证等等有规律的、固定写法的内容）</p><p>3.正则一般给高级的开发语言使用</p><ul><li><p>python</p></li><li><p>GO</p></li><li><p>C++</p></li><li><p>JAVA</p></li></ul><p>awk和sed也是一门语言</p><p><strong>搜索和替换操作</strong> 但是一般的命令，搜索和替换缺乏灵活性，基本写死。 所以我们可以通过正则表达式，灵活的动态</p><p>匹配文本。</p><p><strong>例如：</strong> </p><p>1.可以测试输入字符串 以查看字符串内是否出现电话号码模式或信用卡号码模式。这称为数据验证。</p><p>2.替换文本。 可以使用正则表达式来识别文档中的特定文本，完全删除该文本或者用其他文本替换它。</p><p>3.基于模式匹配从字符串中提取子字符串。</p><p>4.查找文档内或输入域内特定的文本。</p><h3 id="正则表达式在Linux中的分类"><a href="#正则表达式在Linux中的分类" class="headerlink" title="正则表达式在Linux中的分类"></a><strong>正则表达式在</strong>Linux中的分类</h3><p>在正则表达式的语法中，主要有两个部分 修饰符 和 元字符 。 修饰符，我们在后面介绍，它主要不写在正则中，要写在正则的外面。 元字符，在Linux中会把这些符号区分开，划分为 基础正则 和 扩展正则</p><p>所谓的 扩展正则 其实也是元字符中的一部分，只不过在linux中，有些命令不能直接使用某些元字符，需要用一些参</p><p>数，才能使用。所以被一部分人称之为 扩展正则</p><p>那么我们先简单介绍一下，这个分类，然后再总的来介绍所有修饰符和元字符。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 开发里，回车和换行符是两码事</span></span><br><span class="line">\r 回车</span><br><span class="line">\n 换行</span><br></pre></td></tr></table></figure><h3 id="在Linux中的分类"><a href="#在Linux中的分类" class="headerlink" title="在Linux中的分类"></a>在Linux中的分类</h3><ul><li><p>修饰符：它主要不写在正则中，要写在正则的外面</p></li><li><p>元字符：在Linux中会把这些符号区分开</p><ul><li>基础正则</li><li>扩展正则</li></ul></li></ul><h2 id="基础正则-简写bre（basicc-regular-expression）"><a href="#基础正则-简写bre（basicc-regular-expression）" class="headerlink" title="基础正则 简写bre（basicc regular expression）"></a>基础正则 简写bre（basicc regular expression）</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">^ 以什么什么开头</span><br><span class="line">$ 以什么什么结尾</span><br><span class="line">. 匹配任意字符</span><br><span class="line">* 前面的字符出现0次或者多次</span><br><span class="line">.* 配合使用</span><br><span class="line"></span><br><span class="line">[] 字符集合， 匹配多包含的任意一个字符</span><br><span class="line">例如：</span><br><span class="line">[0-9] </span><br><span class="line">[a-z]</span><br><span class="line"></span><br><span class="line">[^] 字符集合的取反</span><br><span class="line">例如：</span><br><span class="line">^[0-9]</span><br><span class="line">^[a-z]</span><br></pre></td></tr></table></figure><h2 id="拓展正则-简写ere（extended-rugular-expression）"><a href="#拓展正则-简写ere（extended-rugular-expression）" class="headerlink" title="拓展正则 简写ere（extended rugular expression）"></a>拓展正则 简写ere（extended rugular expression）</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 比较常见的</span></span><br><span class="line">+ 前面的一个字符出现一次或者多次</span><br><span class="line">cat 1.txt | awk -F <span class="string">'[ :]+'</span> <span class="string">'&#123;print $5&#125;'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 贪婪匹配</span></span><br><span class="line">[ :]+ 里面的任意字符出现一次或者多次</span><br><span class="line">即使是这两个一起出现也会识别成一个</span><br><span class="line"></span><br><span class="line">| 或者的意思</span><br><span class="line">（） 被括起来的内容提供看做是一个整体</span><br><span class="line">也可以在sed命令中后项引用</span><br><span class="line">&#123;&#125; 中间写一个非负整数，表示大括号前面的内容，出现指定次数</span><br><span class="line"> 09:38:41 root@web01:~ <span class="comment"># grep -E 'z&#123;3&#125;'  ## 匹配包含3次的所有</span></span><br><span class="line">z</span><br><span class="line">zz</span><br><span class="line">zzz</span><br><span class="line">zzz</span><br><span class="line">zzzz</span><br><span class="line">zzzz</span><br><span class="line">09:39:45 root@web01:~ <span class="comment"># grep -E 'z&#123;1,3&#125;'  ## 匹配只要包含z的所有</span></span><br><span class="line">z</span><br><span class="line">z</span><br><span class="line">z</span><br><span class="line">z</span><br><span class="line">zz</span><br><span class="line">zz</span><br><span class="line">zzz</span><br><span class="line">zzz</span><br><span class="line">zxc</span><br><span class="line">zxc</span><br><span class="line">asdz</span><br><span class="line">asdz</span><br><span class="line"></span><br><span class="line">?: 前面的内容，出现0次或者1次</span><br><span class="line">grep -E <span class="string">'z?'</span> 出现0次也行</span><br><span class="line">grep -E <span class="string">'z+'</span> 最少出现一次</span><br><span class="line"></span><br><span class="line">比如匹配id</span><br><span class="line">[0-9].*</span><br><span class="line">[0-9]+</span><br></pre></td></tr></table></figure><h2 id="正则表达式使用误区"><a href="#正则表达式使用误区" class="headerlink" title="正则表达式使用误区"></a>正则表达式使用误区</h2><h3 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">*代表所有内容</span><br><span class="line">&#123;&#125;生成序列</span><br><span class="line"><span class="built_in">echo</span> &#123;1..10&#125;</span><br><span class="line"><span class="built_in">echo</span> &#123;1..10..2&#125;</span><br><span class="line">cp /usr/lib/systemd/system/nginx.service&#123;,.bak&#125;  <span class="comment">## 可以给文件做备份</span></span><br><span class="line">cp /usr/lib/systemd/system/&#123;nginx，zzz&#125;.service</span><br><span class="line"></span><br><span class="line">?匹配任意一个字符</span><br><span class="line">touch check_1.txt</span><br><span class="line">ll</span><br><span class="line">ls -l /tmp/c?heck.txt</span><br><span class="line">ls -l /tmp/c?eck.txt</span><br><span class="line">ls -l /tmp/c?eck_1.txt</span><br><span class="line">ls -l /tmp/c?eck_?????</span><br><span class="line">ls -l /tmp/c?eck_?</span><br><span class="line">ls -l /tmp/c?eck_?*</span><br><span class="line">ls -l /tmp/???????????</span><br><span class="line">ll</span><br><span class="line">touch 1234</span><br><span class="line">ls -l /tmp/????</span><br><span class="line">ls -l /tmp/checl_?????</span><br><span class="line">ls -l /tmp/check_?????</span><br><span class="line">ls -l /tmp/c????_?????</span><br><span class="line"></span><br><span class="line">[] 和[^] 与正则表达式中的用法一样</span><br></pre></td></tr></table></figure><p><strong>正则表达式使用注意事项</strong></p><p>1.所有符号皆为英文符号</p><p>2.使用三剑客时加引号</p><p>3.注意字符集，如果出现字符集问题，那么将字符集修改为C（小概率事件）</p><p>4.像素眼（空格，换行符，tab键）</p><p>5.测试的时候，推荐使用grep -E或者egrep，因为过滤出来的内容会加颜色</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cat 1.txt</span></span><br><span class="line">check10.txt</span><br><span class="line">check1.txt</span><br><span class="line">check 2.txt</span><br><span class="line">check 3.txt</span><br><span class="line">check4.txt</span><br><span class="line">check5.txt</span><br><span class="line">check6.txt</span><br><span class="line">check7.txt</span><br><span class="line">check8.txt</span><br><span class="line">check9.txt</span><br><span class="line">cat 1.txt | awk <span class="string">'/\t/&#123;print&#125;'</span>  <span class="comment">###过滤TAB的</span></span><br><span class="line">check 3.txt</span><br><span class="line">cat 1.txt | awk <span class="string">'/ /&#123;print&#125;'</span>  <span class="comment">###过滤空格的</span></span><br><span class="line">check 2.txt</span><br><span class="line"></span><br><span class="line">如果要筛选10：</span><br><span class="line">10:20:53 root@web01:~ <span class="comment"># cat 2.txt | awk '/[0-9]&#123;2&#125;/&#123;print&#125;'</span></span><br><span class="line">check10.txt</span><br><span class="line"></span><br><span class="line">10:19:45 root@web01:~ <span class="comment"># cat 2.txt | awk '/[0-9][0-9]/&#123;print&#125;'</span></span><br><span class="line">check10.txt</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.* 匹配任意字符  <span class="comment">### 匹配所有</span></span><br><span class="line">grep -o <span class="string">'.*'</span></span><br><span class="line">.  匹配任意字符  <span class="comment">### 匹配单个</span></span><br><span class="line">grep -o <span class="string">'.'</span></span><br></pre></td></tr></table></figure><h3 id="正则表达式的修饰符"><a href="#正则表达式的修饰符" class="headerlink" title="正则表达式的修饰符"></a><strong>正则表达式的修饰符</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s<span class="comment">#匹配内容#要替换的内容#g</span></span><br><span class="line"></span><br><span class="line">sed -i <span class="string">'s#查找的内容#替换的内容#g'</span></span><br></pre></td></tr></table></figure><h3 id="正则表达式常用的修饰符"><a href="#正则表达式常用的修饰符" class="headerlink" title="正则表达式常用的修饰符"></a>正则表达式常用的修饰符</h3><table><thead><tr><th>修饰符</th><th>含义</th><th>描述</th></tr></thead><tbody><tr><td>i</td><td>gnore-不区分大小写</td><td>将匹配设置为不区分大小写，搜索时不区分大小写：A和a没有区别。</td></tr><tr><td>g</td><td>global-全局匹配</td><td>查找所有的匹配项</td></tr><tr><td>m</td><td>mu ltiline -多行匹配</td><td>使边界字符^和$匹配每一行的开头和结尾，记住是多行，而不是整个字 符串的开头和结尾</td></tr><tr><td>S</td><td>特殊字符圆点.中包含 换行符\n</td><td>默认情况下的圆点.是匹配除换行符\n之外的任何字符，加上s修饰符 之后，中包含换行符\n</td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">/pattern/fiags</span><br><span class="line">/元字符/修饰符</span><br><span class="line"></span><br><span class="line">11:36:17 root@web01:~ <span class="comment"># cat a.txt </span></span><br><span class="line">check_0.txt</span><br><span class="line">check_10.tx</span><br><span class="line">check_1.txt</span><br><span class="line">check_2.txt</span><br><span class="line">check_3.txt</span><br><span class="line">check_4.txt</span><br><span class="line">check   _5.txt</span><br><span class="line">check_6.txt</span><br><span class="line">check_7.txt</span><br><span class="line">check_8.txt</span><br><span class="line">check_9.txt</span><br><span class="line">CHECK.txt</span><br><span class="line"></span><br><span class="line"> 0 ✓ 11:37:43 root@web01:~ <span class="comment"># awk '/[a-z]&#123;5&#125;_[0-9]+.txt/i&#123;print&#125;' a.txt   ### 加i </span></span><br><span class="line">check_0.txt</span><br><span class="line">check_10.tx</span><br><span class="line">check_1.txt</span><br><span class="line">check_2.txt</span><br><span class="line">check_3.txt</span><br><span class="line">check_4.txt</span><br><span class="line">check   _5.txt</span><br><span class="line">check_6.txt</span><br><span class="line">check_7.txt</span><br><span class="line">check_8.txt</span><br><span class="line">check_9.txt</span><br><span class="line">CHECK.txt</span><br></pre></td></tr></table></figure><h3 id="正则表达式元字符"><a href="#正则表达式元字符" class="headerlink" title="正则表达式元字符"></a>正则表达式元字符</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">grep -帮助</span><br><span class="line">匹配模式选择：</span><br><span class="line">-E-extended-regexp 扩展正则表达式egrep</span><br><span class="line">-F--fixed-strings一个换行符分隔的字符串的集合fgrep</span><br><span class="line">-G-basic-regexp基本正则</span><br><span class="line">-P-perl-regexp调用的实际抽取与汇报语言正则</span><br><span class="line">-e--regexp=PATTERN后面根正则模式,默认无</span><br><span class="line">-f-file=FILE 从文件中获得匹配模式</span><br><span class="line">-i-ignore-case 不区分大小写</span><br><span class="line">-w--word-regexp 匹配整个单词</span><br><span class="line">-x--line-regexp匹配整行</span><br><span class="line">-z-null-data一个O字节的数据行，但不是空行</span><br><span class="line"></span><br><span class="line">12:10:24 root@web01:~ <span class="comment"># grep -E 'zl+'    ### +  1次或多次， 至少要1次</span></span><br><span class="line">zls</span><br><span class="line">zls</span><br><span class="line">zlllls</span><br><span class="line">zlllls</span><br><span class="line">zs</span><br><span class="line"></span><br><span class="line">12:12:08 root@web01:~ <span class="comment"># grep -E 'zl*'      ### *  0次或多次， 可以为0</span></span><br><span class="line">zls</span><br><span class="line">zls</span><br><span class="line">zllls</span><br><span class="line">zllls</span><br><span class="line">zs</span><br><span class="line">zs</span><br><span class="line"></span><br><span class="line">130 ✗ 12:13:21 root@web01:~ <span class="comment"># grep -E 'zl?'   ### ？  0次或1次， 没有多次</span></span><br><span class="line">zls</span><br><span class="line">zls</span><br><span class="line">zllls</span><br><span class="line">zllls</span><br><span class="line">zs</span><br><span class="line">zs</span><br></pre></td></tr></table></figure><h3 id="正则案例"><a href="#正则案例" class="headerlink" title="正则案例"></a>正则案例</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1.匹配身份证号 </span></span><br><span class="line"><span class="comment">#2.匹配手机号 </span></span><br><span class="line"><span class="comment">#3.后项引用</span></span><br><span class="line"><span class="comment">#4.给用户传参中间加上空格（后项引用）</span></span><br><span class="line"><span class="built_in">echo</span> 123456</span><br><span class="line">sed -r <span class="string">'s#(.*)#&lt;\1&gt;#g'</span> </span><br><span class="line">sed -r <span class="string">'s#(.)#&lt;\1&gt;#g '</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> &#123;1..10&#125; 带空格的每个都加上&lt;&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">#5.过滤IP</span></span><br><span class="line"><span class="comment">#6.过滤文件中，oldboy和oldbey的内容</span></span><br><span class="line"><span class="comment">#7.统计上面文件的单词数量 </span></span><br><span class="line"><span class="comment">#8.统计上面文件的字母数量</span></span><br><span class="line"><span class="comment">#9.取出下面的指定内容</span></span><br><span class="line">19:09:03  up 735 day，23:12，2 users，load average: 0.00，0.03，0.05</span><br><span class="line">19:09:03  up 10:20， 3 users，load average: 0.00，0.02，0.05</span><br><span class="line">19:09:03  up 0 min，1 users，load average: 0.31，0.08，0.03</span><br><span class="line"><span class="comment">#如何截取上面的登录用户数？</span></span><br><span class="line"><span class="comment">#如何截取上面的开机时间？</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##因为在Linux中，我们目前只能使用awk grep sed取，而且支持的正则也是基础正则和扩展正则</span></span><br><span class="line"><span class="comment">##但是有些元字符，基础和扩展正则也不支持，我们只能使用其他语言的正则，比如python </span></span><br><span class="line"><span class="comment">##于是，在grep命令中，提供了一个选项叫做-p这个选项的作用就是，使用perl语言的正则</span></span><br><span class="line">uptime| grep -Po <span class="string">'[0-9]+(?= user)'</span></span><br><span class="line">uptime| grep -Po <span class="string">'\d+(？=user)'</span></span><br><span class="line">uptimel grep -Po <span class="string">'(？&lt; =up).*(?=[0-9] user)'</span></span><br><span class="line">uptime| grep -Po <span class="string">'(？&lt; =up).*(?=\d user)'</span></span><br></pre></td></tr></table></figure><h3 id="零宽断言-截取网卡IP的案例"><a href="#零宽断言-截取网卡IP的案例" class="headerlink" title="零宽断言 截取网卡IP的案例"></a>零宽断言 截取网卡IP的案例</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ifconfig eth0|grep -Po <span class="string">'[0-9]&#123;1,3&#125;\.[0-9]&#123;1,3&#125;\.[0-9]&#123;1,3&#125;\.[0-9]&#123;1,3&#125;(?=  netmask)'</span></span><br><span class="line"></span><br><span class="line">12:53:14 root@web01:~ <span class="comment">#  ifconfig eth0|grep -Po '[0-9]&#123;1,3&#125;\.[0-9]&#123;1,3&#125;\.[0-9]&#123;1,3&#125;\.[0-9]&#123;1,3&#125;(?=  netmask)'      </span></span><br><span class="line">10.0.0.7</span><br><span class="line"></span><br><span class="line">ifconfig eth0|grep -Po <span class="string">'[0-9]&#123;1,3&#125;\..+(?=  netmask)'</span> </span><br><span class="line"></span><br><span class="line">12:54:32 root@web01:~ <span class="comment"># ifconfig eth0|grep -Po '[0-9]&#123;1,3&#125;\..+(?=  netmask)'  </span></span><br><span class="line">10.0.0.7</span><br></pre></td></tr></table></figure><h2 id="基础正则表BRE"><a href="#基础正则表BRE" class="headerlink" title="基础正则表BRE"></a>基础正则表BRE</h2><table><thead><tr><th>符号</th><th>描述</th><th>应用场景</th></tr></thead><tbody><tr><td>A</td><td>以 … 开头</td><td>匹配以指定字符开头的内容：^zls</td></tr><tr><td>$</td><td>以 … 结尾</td><td>匹配以指定字符结尾的内容：zls$</td></tr><tr><td>.</td><td>匹配除换行符(\In、\r)之外的任何单个字符</td><td>一般该元字符不单独用，配合*一起使用</td></tr><tr><td>*</td><td>前一个字符连续出现0次或多次</td><td>zl*能匹配”z”以及”zl”,配合.使用要注意贪婪性</td></tr><tr><td>[ ]</td><td>字符集合，匹配所包含的任意一个字符</td><td>1.”[xyz]’可以匹配”zls”中的’z’<br />2.匹配数字[0-9] <br />3.小写字母[a-z] <br />4.大写字母[A-Z] <br />5.大小写都匹配[a-z][A-z]或者[a-Z] <br />6.在中括号中可以让特殊符号失去特殊含义 <br />7.上面的大前提是^不能放第一个</td></tr><tr><td>[^]</td><td>反值字符集合，匹配未包含的任意字符</td><td>1. [^xyz]可以匹配”zls”中的’s’ <br />2.匹配数字和 <br />3.取出/etc/passwd第一列</td></tr><tr><td>\</td><td></td><td></td></tr><tr><td>\</td><td>将下一个字符标记为一个特殊字符、或一个原义字符、或一个向后引用、或一个八进制转义符</td><td></td></tr><tr><td>\n</td><td>匹配一个换行符</td><td>等价于\x0a和\cJ</td></tr><tr><td>\r</td><td>匹配一个回车符(回车键)</td><td>等价于\x0d和\cM</td></tr><tr><td>\t</td><td>匹配一个制表符(Tab键)</td><td>等价于\x09和\cl</td></tr><tr><td>\v</td><td>匹配一个垂直制表符</td><td>等价于\x0b和\cK</td></tr><tr><td>\f</td><td>换页符</td><td>等价于\x0c和\cL</td></tr><tr><td>\b</td><td>匹配一个单词边界，也就是指单词和空格间的位置</td><td>er\b’可以匹配”never”中的’er’,但不能匹配”verb” 中的’er’</td></tr><tr><td>\B</td><td>匹配非单词边界</td><td>er\B’能匹配”verb”中的’er’,但不能匹配”never” 中的’er</td></tr><tr><td>\d</td><td>匹配一个数字字符</td><td>等价于[0-9]</td></tr><tr><td>\D</td><td>匹配一个非数字字符</td><td>等价于 [^0-9]</td></tr><tr><td>\w</td><td>匹配字母、数字、下划线</td><td>等价于[A-Za-z0-9 ]</td></tr><tr><td>W</td><td>匹配非字母、数字、下划线</td><td>等价于[^A-Za-z0-9 ]</td></tr><tr><td>\s</td><td>匹配任何空白字符，包括空格、制表符、  换页符等等</td><td>等价于[\f\n\t\v]</td></tr><tr><td>\S</td><td>匹配任何非空白字符</td><td>等价于[^\f\n\r\t\v]</td></tr></tbody></table><h2 id="扩展正则表ERE"><a href="#扩展正则表ERE" class="headerlink" title="扩展正则表ERE"></a>扩展正则表ERE</h2><table><thead><tr><th align="left">|</th><th>或 者</th><th>等价于[^\f\n\r\t\v]</th></tr></thead><tbody><tr><td align="left">十</td><td>前一个字符出现一次或者多次</td><td>zl+’能匹配”zl”以及”zll”,但不能匹配”z”,+等价于 {1,}</td></tr><tr><td align="left">{n}</td><td>n是一个非负整数。匹配确定的n次。</td><td>o{2}’不能匹配”bo3”中的’o’ <br />但是能匹配”foot”中的两个o</td></tr><tr><td align="left">{n,}</td><td>n是一个非负整数。匹配确定的n次。</td><td>o{2,}’不能匹配”Bob”中的’o’ <br />但能匹配”foooood”中的所有o <br />o{1,}’等价于’o+’ <br />o{0,}’则等价于’o*’</td></tr><tr><td align="left">{n,m}</td><td>m和n均为非负整数，其中n&lt;=m,最少匹配n  次且最多匹配m次</td><td>“o{1,3}”将匹配”fooooood”中的前三个o<br /> o{0,1}’等价于’o?’ <br />请注意在逗号和两个数之间不能有空格</td></tr><tr><td align="left">()</td><td>1.被括起来的内容看做是一个整体  2.在sed命令中做后向引用</td><td>sed -nr’s#(.*)abc#\1#gp’</td></tr><tr><td align="left">(?=pattern)</td><td>正向肯定预查look ahead(零宽断言)</td><td>使用grep-P来使用下面我们在Per语言正则中使用</td></tr><tr><td align="left">(?&lt;=pattern)</td><td>反肯定预查look behind(零宽断言)</td><td>使用grep-P来使用下面我们在Perl语言正则中使用</td></tr><tr><td align="left">?</td><td>匹配前一个字符出现0次或1次</td><td>‘do(es)?”可以匹配”do”或”does”。?等价于{0,1}</td></tr></tbody></table><h2 id="正则支持表"><a href="#正则支持表" class="headerlink" title="正则支持表"></a>正则支持表</h2><table><thead><tr><th>字符</th><th>说明</th><th>Basic RegEx<br />基础正则</th><th>Extended RegEx<br />扩展正则</th><th>python RegEx<br />python正则</th><th>Perl regEx<br />Perl正则</th></tr></thead><tbody><tr><td>转义</td><td></td><td>\</td><td>\</td><td>\</td><td>\</td></tr><tr><td>^</td><td>匹配行首，例如’^dog’匹配以字符串dog开头的行（注意：awk 指令中，’^’则是匹配字符串的开始）</td><td>^</td><td>^</td><td>^</td><td>^</td></tr><tr><td>$</td><td>匹配行尾，例如：’^、dog匹配以字符串为结尾的行（注意：指令中，’则是匹配字符串的结尾）</td><td>$</td><td>$</td><td>$</td><td>$</td></tr><tr><td>^$</td><td>匹配空行</td><td>^$</td><td>^$</td><td>^$</td><td>^$</td></tr><tr><td>^string$</td><td>匹配行，例如：’^dog$’匹配只含一个字符串 dog 的行</td><td>^string$</td><td>^string$</td><td>^string$</td><td>^string$</td></tr><tr><td>&lt;</td><td>匹配单词，例如：’&lt;frog’ （等价于’\bfrog’），匹配以 frog 开头的单词</td><td>&lt;</td><td>&lt;</td><td><strong>不支持</strong></td><td><strong>不支持</strong>（但可以使用\b来匹配单词，例如：’\bfrog’）</td></tr><tr><td>&gt;</td><td>匹配单词，例如：’frog&gt;’（等价于’frog\b ‘），匹配以 frog 结尾的单词</td><td>&gt;</td><td>&gt;</td><td><strong>不支持</strong></td><td><strong>不支持</strong>（但可以使用\b来匹配单词，例如：’frog\b’）</td></tr><tr><td><x></td><td>匹配一个单词或者一个特定字符，例如：’<frog>‘（等价于’\bfrog\b’）、’<G>‘</td><td><x></td><td><x></td><td><strong>不支持</strong></td><td><strong>不支持</strong>（但可以使用\b来匹配单词，例如：’\bfrog\b’</td></tr><tr><td>()</td><td>匹配表达式，例如：不支持’（frog）’</td><td><strong>不支持</strong>（但可以使用，如：dogdog</td><td>()</td><td>()</td><td>()</td></tr><tr><td></td><td>匹配表达式，例如：不支持’（frog）’</td><td></td><td><strong>不支持</strong>（同())</td><td><strong>不支持</strong>（同())</td><td><strong>不支持</strong>（同())</td></tr><tr><td>？</td><td>匹配前面的子表达式 0 次或 1 次（等价于{0,1}），例如：where(is)?能匹配”where” 以及”whereis”</td><td><strong>不支持</strong>（同?)</td><td>？</td><td>？</td><td>？</td></tr><tr><td>?</td><td>匹配前面的子表达式 0 次或 1 次（等价于’{0,1}’），例如：’whereisis? ‘能匹配 “where”以及”whereis”</td><td>?</td><td><strong>不支持</strong>（同?)</td><td><strong>不支持</strong>（同?)</td><td><strong>不支持</strong>（同?)</td></tr><tr><td>?</td><td>当该字符紧跟在任何一个其他限制符（*, +, ?, {n},{n,}, {n,m}） 后面时，匹配模式是非贪婪的。非贪婪模式尽可能少的匹配所搜索的字符串，而默认的贪婪模式则尽可能多的匹配所搜索的字符串。例如，对于字符串 “oooo”，’o+?’ 将匹配单个”o”，而 ‘o+’ 将匹配所有 ‘o’</td><td><strong>不支持</strong></td><td><strong>不支持</strong></td><td><strong>不支持</strong></td><td><strong>不支持</strong></td></tr><tr><td>.</td><td>匹配除换行符（’\n’）之外的任意单个字符（注意：awk 指令中的句点能匹配换行符）</td><td>.</td><td>.（如果要匹配包括“\n”在内的任何一个字符，请使用：’(^$)|（.）</td><td>.</td><td>.（如果要匹配包括“\n”在内的任何一个字符，请使用：’ [.\n] ‘</td></tr><tr><td>*</td><td>匹配前面的子表达式 0 次或多次（等价于{0, }），例如：zo* 能匹配 “z”以及 “zoo”</td><td>*</td><td>*</td><td>*</td><td>*</td></tr><tr><td>+</td><td>匹配前面的子表达式 1 次或多次（等价于’{1, }’），例如：’whereisis+ ‘能匹配 “whereis”以及”whereisis”</td><td>+</td><td><strong>不支持</strong>（同+)</td><td><strong>不支持</strong>（同+)</td><td><strong>不支持</strong>（同+)</td></tr><tr><td>+</td><td>匹配前面的子表达式 1 次或多次（等价于{1, }），例如：zo+能匹配 “zo”以及 “zoo”，但不能匹配 “z”</td><td><strong>不支持</strong>（同+)</td><td>+</td><td>+</td><td>+</td></tr><tr><td>{n}</td><td>n 必须是一个 0 或者正整数，匹配子表达式 n 次，例如：zo{2}能匹配</td><td><strong>不支持</strong>（同{n})</td><td>{n}</td><td>{n}</td><td>{n}</td></tr><tr><td>{n,}</td><td>“zooz”，但不能匹配 “Bob”n 必须是一个 0 或者正整数，匹配子表达式大于等于 n次，例如：go{2,}</td><td><strong>不支持</strong>（同{n,})</td><td>{n,}</td><td>{n,}</td><td>{n,}</td></tr><tr><td>{n,m}</td><td>能匹配 “good”，但不能匹配 godm 和 n 均为非负整数，其中 n &lt;= m，最少匹配 n 次且最多匹配 m 次 ，例如：o{1,3}将配”fooooood” 中的前三个 o（请注意在逗号和两个数之间不能有空格）</td><td><strong>不支持</strong>（同{n,m})</td><td>{n,m}</td><td>{n,m}</td><td>{n,m}</td></tr><tr><td>x|y</td><td>匹配 x 或 y，例如： 不支持’z|（food）’ 能匹配 “z” 或”food”；’（z|f）ood’ 则匹配”zood” 或 “food”</td><td><strong>不支持</strong>（同x|y)</td><td>x|y</td><td>x|y</td><td>x|y</td></tr><tr><td>[0-9]</td><td>匹配从 0 到 9 中的任意一个数字字符（注意：要写成递增）</td><td>[0-9]</td><td>[0-9]</td><td>[0-9]</td><td>[0-9]</td></tr><tr><td>[xyz]</td><td>字符集合，匹配所包含的任意一个字符，例如：’[abc]’可以匹配”lay” 中的 ‘a’（注意：如果元字符，例如：. *等，它们被放在[ ]中，那么它们将变成一个普通字符）</td><td>[xyz]</td><td>[xyz]</td><td>[xyz]</td><td>[xyz]</td></tr><tr><td>[^xyz]</td><td>负值字符集合，匹配未包含的任意一个字符（注意：不包括换行符），例如：’[^abc]’ 可以匹配 “Lay” 中的’L’（注意：[^xyz]在awk 指令中则是匹配未包含的任意一个字符+换行符）</td><td>[^xyz]</td><td>[^xyz]</td><td>[^xyz]</td><td>[^xyz]</td></tr><tr><td>[A-Za-z]</td><td>匹配大写字母或者小写字母中的任意一个字符（注意：要写成递增）</td><td>[A-Za-z]</td><td>[A-Za-z]</td><td>[A-Za-z]</td><td>[A-Za-z]</td></tr><tr><td>[^A-Za-z]</td><td>匹配除了大写与小写字母之外的任意一个字符（注意：写成递增）</td><td>[^A-Za-z]</td><td>[^A-Za-z]</td><td>[^A-Za-z]</td><td>[^A-Za-z]</td></tr><tr><td><strong>\d</strong></td><td>匹配从 0 到 9 中的任意一个数字字符（等价于 [0-9]）</td><td><strong>不支持</strong></td><td><strong>不支持</strong></td><td>\d</td><td>\d</td></tr><tr><td><strong>\D</strong></td><td>匹配非数字字符（等价于 [^0-9]）</td><td><strong>不支持</strong></td><td><strong>不支持</strong></td><td>\D</td><td>\D</td></tr><tr><td>\S</td><td>匹配任何非空白字符（等价于[^\f\n\r\t\v]）</td><td><strong>不支持</strong></td><td><strong>不支持</strong></td><td>\S</td><td>\S</td></tr><tr><td>\s</td><td>匹配任何空白字符，包括空格、制表符、换页符等等（等价于[ \f\n\r\t\v]）</td><td><strong>不支持</strong></td><td><strong>不支持</strong></td><td>\s</td><td>\s</td></tr><tr><td><strong>\W</strong></td><td>匹配任何非单词字符 (等价于[^A-Za-z0-9_])</td><td>\W</td><td>\W</td><td>\W</td><td>\W</td></tr><tr><td><strong>\w</strong></td><td>匹配包括下划线的任何单词字符（等价于[A-Za-z0-9_]）</td><td>\w</td><td>\w</td><td>\w</td><td>\w</td></tr><tr><td>\B</td><td>匹配非单词边界，例如：’er\B’ 能匹配 “verb” 中的’er’，但不能匹配”never” 中的’er’</td><td>\B</td><td>\B</td><td>\B</td><td>\B</td></tr><tr><td>\b</td><td>匹配一个单词边界，也就是指单词和空格间的位置，例如： ‘er\b’ 可以匹配”never” 中的 ‘er’，但不能匹配 “verb” 中的’er’</td><td>\b</td><td>\b</td><td>\b</td><td>\b</td></tr><tr><td>\t</td><td>匹配一个横向制表符（等价于 \x09和 \cI）</td><td><strong>不支持</strong></td><td><strong>不支持</strong></td><td>\t</td><td>\t</td></tr><tr><td>\v</td><td>匹配一个垂直制表符（等价于 \x0b和 \cK）</td><td><strong>不支持</strong></td><td><strong>不支持</strong></td><td>\v</td><td>\v</td></tr><tr><td>\n</td><td>匹配一个换行符（等价于 \x0a 和\cJ）</td><td><strong>不支持</strong></td><td><strong>不支持</strong></td><td>\n</td><td>\n</td></tr><tr><td>\f</td><td>匹配一个换页符（等价于\x0c 和\cL）</td><td><strong>不支持</strong></td><td><strong>不支持</strong></td><td>\f</td><td>\f</td></tr><tr><td>\r</td><td>匹配一个回车符（等价于 \x0d 和\cM）</td><td><strong>不支持</strong></td><td><strong>不支持</strong></td><td>\r</td><td>\r</td></tr><tr><td>\</td><td>匹配转义字符本身””</td><td>\</td><td>\</td><td>\</td><td>\</td></tr><tr><td>\cx</td><td>匹配由 x 指明的控制字符，例如：\cM匹配一个Control-M 或回车符，x 的值必须为A-Z 或 a-z 之一，否则，将 c 视为一个原义的 ‘c’ 字符</td><td><strong>不支持</strong></td><td><strong>不支持</strong></td><td></td><td>\cx</td></tr><tr><td>\xn</td><td>匹配 n，其中 n 为十六进制转义值。十六进制转义值必须为确定的两个数字长，例如：’\x41’ 匹配 “A”。’\x041’ 则等价于’\x04’ &amp; “1”。正则表达式中可以使用 ASCII 编码</td><td><strong>不支持</strong></td><td><strong>不支持</strong></td><td></td><td>\xn</td></tr><tr><td><strong>\num</strong></td><td>匹配 num，其中 num是一个正整数。表示对所获取的匹配的引用</td><td><strong>不支持</strong></td><td>\num</td><td>\num</td><td></td></tr><tr><td>[:alnum:]</td><td>匹配任何一个字母或数字（[A-Za-z0-9]），例如：’[[:alnum:]] ‘</td><td>[:alnum:]</td><td>[:alnum:]</td><td>[:alnum:]</td><td>[:alnum:]</td></tr><tr><td>[:alpha:]</td><td>匹配任何一个字母（[A－Za－z]）， 例如：’ [[:alpha:]] ‘</td><td>[:alpha:]</td><td>[:alpha:]</td><td>[:alpha:]</td><td>[:alpha:]</td></tr><tr><td>[:digit:]</td><td>匹配任何一个数字（[0-9]），例如：’[[:digit:]] ‘</td><td>[:digit:]</td><td>[:digit:]</td><td>[:digit:]</td><td>[:digit:]</td></tr><tr><td>[:lower:]</td><td>匹配任何一个小写字母（[a-z]）， 例如：’ [[:lower:]] ‘</td><td>[:lower:]</td><td>[:lower:]</td><td>[:lower:]</td><td>[:lower:]</td></tr><tr><td>[:upper:]</td><td>匹配任何一个大写字母（[A-Z]）</td><td>[:upper:]</td><td>[:upper:]</td><td>[:upper:]</td><td>[:upper:]</td></tr><tr><td>[:space:]</td><td>任何一个空白字符： 支持制表符、空格，例如：’ [[:space:]] ‘</td><td>[:space:]</td><td>[:space:]</td><td>[:space:]</td><td>[:space:]</td></tr><tr><td>[:blank:]</td><td>空格和制表符（横向和纵向），例如：’[[:blank:]]’ó’[\s\t\v]’</td><td>[:blank:]</td><td>[:blank:]</td><td>[:blank:]</td><td>[:blank:]</td></tr><tr><td>[:graph:]</td><td>任何一个可以看得见的且可以打印的字符（注意：不包括空格和换行符等），例如：’[[:graph:]] ‘</td><td>[:graph:]</td><td>[:graph:]</td><td>[:graph:]</td><td>[:graph:]</td></tr><tr><td>[:print:]</td><td>任何一个可以打印的字符（注意：不包括：[:cntrl:]、字符串结束符’\0’、EOF 文件结束符（-1）， 但包括空格符号），例如：’[[:print:]] ‘</td><td>[:print:]</td><td>[:print:]</td><td>[:print:]</td><td>[:print:]</td></tr><tr><td>[:cntrl:]</td><td>任何一个控制字符（ASCII 字符集中的前 32 个字符，即：用十进制表示为从 0 到31，例如：换行符、制表符等等），例如：’ [[:cntrl:]]’</td><td>[:cntrl:]</td><td>[:cntrl:]</td><td>[:cntrl:]</td><td>[:cntrl:]</td></tr><tr><td>[:punct:]</td><td>任何一个标点符号（不包括：[:alnum:]、[:cntrl:]、[:space:]这些字符集）</td><td>[:punct:]</td><td>[:punct:]</td><td>[:punct:]</td><td>[:punct:]</td></tr><tr><td>[:xdigit:]</td><td>任何一个十六进制数（即：0-9，a-f，A-F）</td><td>[:xdigit:]</td><td>[:xdigit:]</td><td>[:xdigit:]</td><td>[:xdigit:]</td></tr></tbody></table><h1 id="Linux三剑客"><a href="#Linux三剑客" class="headerlink" title="Linux三剑客"></a>Linux三剑客</h1><h2 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">-n：打印行号</span><br><span class="line">-A：after  打印过滤内容的后N行</span><br><span class="line">-B：before 打印过滤内容的前N行</span><br><span class="line">-C：center 打印过滤内容的前后N行</span><br><span class="line">-E:支持扩展正则 ere  <span class="comment">#grep -E 'root|nginx' /etc/passwd</span></span><br><span class="line">-v：取反</span><br><span class="line">-o：只打印匹配到的内容</span><br><span class="line">-w：精确匹配</span><br><span class="line">-P：支持Perl正则</span><br><span class="line">-i：忽略大小写</span><br><span class="line">-r：递归检索文件中的内容  <span class="comment">#grep -r 'www.baidu.com' ./</span></span><br><span class="line">-R：递归检索文件中的内容，包括软链接文件  <span class="comment">#grep -R 'www.baidu.com' ./</span></span><br><span class="line">-l：只显示文件名</span><br><span class="line">-h：只显示文件内容</span><br><span class="line">-f：对比文件内容，内容少的文件在前面，内容多的文件在后面，取反可以看到不同的文件内容</span><br><span class="line">-c：统计行数，类似于 wc -l</span><br><span class="line">-G：支持基础正则 bre</span><br><span class="line">-m：显示前N行 类似于 head -n </span><br><span class="line"></span><br><span class="line">[root@m01 web]<span class="comment"># grep -r 'www.roger.com' /root/web/</span></span><br><span class="line">/root/web/css/style.css:www.roger.com</span><br><span class="line">/root/web/js/main.js:www.roger.com</span><br><span class="line">/root/web/index.html:www.roger.com</span><br><span class="line"></span><br><span class="line">[root@m01 web]<span class="comment"># grep -lr 'www.roger.com' /root/web/|xargs sed -i.roger 's#www.roger.com#www.baidu.com#g'</span></span><br></pre></td></tr></table></figure><h2 id="sed"><a href="#sed" class="headerlink" title="sed"></a>sed</h2><p>在sed中，我们核心的内容，主要分为四个部分：</p><ul><li>增</li><li>删</li><li>改</li><li>查</li></ul><p>当然我们还有一些进阶内容：模式空间与保持空间</p><h3 id="sed命令执行流程"><a href="#sed命令执行流程" class="headerlink" title="sed命令执行流程"></a>sed命令执行流程</h3><p><strong>举个例子：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 以下是roger.txt文件内容</span></span><br><span class="line">1,roger,666</span><br><span class="line">2,wls,777</span><br><span class="line">3,cls,888</span><br><span class="line">4,lls,999</span><br></pre></td></tr></table></figure><p>执行 <code>sed -n &#39;3p&#39; roger.txt</code>命令后，sed都做了啥？</p><p>1.sed先是按行读取文件内容<br>2.每读取一行内容，都会进行一次判断，是不是你想要的行<br>3.如果不是，则判断是不是加了-n选项<br>4.如果加了-n，就读取下一行<br>5.如果没加-n，就会将所有内容输出到命令行（默认输出）<br>6.如果是，你想要的那一行（第三行）则判断执行的后续动作（p d s a i c）<br>7.动作处理完成后，输出指定的内容<br>8.即便是读取完了，内容也输出了，sed也会继续往后读，直到文件的最后一行</p><h3 id="sed-查"><a href="#sed-查" class="headerlink" title="sed - 查"></a>sed - 查</h3><table><thead><tr><th>sed命令选项</th><th>选项含义</th><th>sed命令动作</th><th>动作含义</th></tr></thead><tbody><tr><td>-n</td><td>取消默认输出</td><td>p</td><td>print打印</td></tr><tr><td>-r</td><td>支持扩展正则</td><td>d</td><td>delete删除</td></tr><tr><td></td><td></td><td>a</td><td>append追加</td></tr><tr><td></td><td></td><td>i</td><td>insert插入</td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">p：打印，显示</span><br><span class="line"></span><br><span class="line"><span class="comment">## sed显示单行内容</span></span><br><span class="line">[root@m01 ~]<span class="comment"># sed '3p' roger.txt</span></span><br><span class="line">1,roger,666</span><br><span class="line">2,wls,777</span><br><span class="line">3,cls,888</span><br><span class="line">3,cls,888</span><br><span class="line">4,lls,999</span><br><span class="line"></span><br><span class="line"><span class="comment">## sed取消默认输出</span></span><br><span class="line">[root@m01 ~]<span class="comment"># sed -n '3p' roger.txt</span></span><br><span class="line">3,cls,888</span><br><span class="line"></span><br><span class="line"><span class="comment">## sed显示多行内容并取消默认输出</span></span><br><span class="line">[root@m01 ~]<span class="comment"># sed -n '1,3p' roger.txt</span></span><br><span class="line">1,roger,666</span><br><span class="line">2,wls,777</span><br><span class="line">3,cls,888</span><br><span class="line"></span><br><span class="line"><span class="comment">## sed模糊查询</span></span><br><span class="line">[root@m01 ~]<span class="comment"># sed -n '/roger/p' roger.txt </span></span><br><span class="line">1,roger,666</span><br><span class="line"></span><br><span class="line">[root@m01 ~]<span class="comment"># sed -nr '/roger|cls/p' roger.txt </span></span><br><span class="line">1,roger,666</span><br><span class="line">3,cls,888</span><br><span class="line"></span><br><span class="line">[root@m01 ~]<span class="comment"># sed -n '/roger/,/cls/p' roger.txt </span></span><br><span class="line">1,roger,666</span><br><span class="line">2,wls,777</span><br><span class="line">3,cls,888</span><br><span class="line"></span><br><span class="line"><span class="comment">## sed实现 grep -A</span></span><br><span class="line">[root@m01 ~]<span class="comment"># sed -n '/roger/,+2p' roger.txt</span></span><br><span class="line">1,roger,666</span><br><span class="line">2,wls,777</span><br><span class="line">3,cls,888</span><br><span class="line"></span><br><span class="line">[root@m01 ~]<span class="comment"># grep 'roger' -A 2 roger.txt </span></span><br><span class="line">1,roger,666</span><br><span class="line">2,wls,777</span><br><span class="line">3,cls,888</span><br><span class="line"></span><br><span class="line"><span class="comment">## sed 隔指定行数读取一行</span></span><br><span class="line">[root@m01 ~]<span class="comment"># sed -n '1~2p' roger.txt </span></span><br><span class="line">1,roger,666</span><br><span class="line">3,cls,888</span><br><span class="line">[root@m01 ~]<span class="comment"># sed -n '1~3p' roger.txt </span></span><br><span class="line">1,roger,666</span><br><span class="line">4,lls,999</span><br></pre></td></tr></table></figure><h3 id="sed-删"><a href="#sed-删" class="headerlink" title="sed - 删"></a>sed - 删</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">d：delete 删除</span><br><span class="line"></span><br><span class="line"><span class="comment">## 删除指定行数，不修改原文件</span></span><br><span class="line">[root@m01 ~]<span class="comment"># sed  '2d' roger.txt</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 删除最后一行</span></span><br><span class="line">[root@m01 ~]<span class="comment"># sed  '$d' roger.txt </span></span><br><span class="line">1,roger,666</span><br><span class="line">3,cls,888</span><br><span class="line"></span><br><span class="line"><span class="comment">## 包含roger的行到cls的行都删掉</span></span><br><span class="line">[root@m01 ~]<span class="comment"># sed -n '/roger/,/cls/d' roger.txt</span></span><br></pre></td></tr></table></figure><h3 id="sed-增"><a href="#sed-增" class="headerlink" title="sed - 增"></a>sed - 增</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">c：replace 替换整行内容</span><br><span class="line">[root@m01 ~]<span class="comment"># cat roger.txt </span></span><br><span class="line">1,roger,666</span><br><span class="line">3,cls,888</span><br><span class="line">4,lls,999</span><br><span class="line">[root@m01 ~]<span class="comment"># sed '2c2,huanglong,438' roger.txt </span></span><br><span class="line">1,roger,666</span><br><span class="line">2,huanglong,438</span><br><span class="line">4,lls,999</span><br><span class="line"></span><br><span class="line">a：append  追加</span><br><span class="line"></span><br><span class="line">[root@m01 ~]<span class="comment"># sed '$a5,huanglong,438' roger.txt </span></span><br><span class="line">1,roger,666</span><br><span class="line">3,cls,888</span><br><span class="line">4,lls,999</span><br><span class="line">5,huanglong,438</span><br><span class="line">[root@m01 ~]<span class="comment"># sed '2a5,huanglong,438' roger.txt </span></span><br><span class="line">1,roger,666</span><br><span class="line">3,cls,888</span><br><span class="line">5,huanglong,438</span><br><span class="line">4,lls,999</span><br><span class="line">[root@m01 ~]<span class="comment"># sed '1a2,huanglong,438' roger.txt </span></span><br><span class="line">1,roger,666</span><br><span class="line">2,huanglong,438</span><br><span class="line">3,cls,888</span><br><span class="line">4,lls,999</span><br><span class="line"></span><br><span class="line">i：insert 插入</span><br><span class="line"></span><br><span class="line">[root@m01 ~]<span class="comment"># sed '$i2,huanglong,438' roger.txt </span></span><br><span class="line">1,roger,666</span><br><span class="line">3,cls,888</span><br><span class="line">2,huanglong,438</span><br><span class="line">4,lls,999</span><br><span class="line">[root@m01 ~]<span class="comment"># sed '1i2,huanglong,438' roger.txt </span></span><br><span class="line">2,huanglong,438</span><br><span class="line">1,roger,666</span><br><span class="line">3,cls,888</span><br><span class="line">4,lls,999</span><br></pre></td></tr></table></figure><h3 id="sed-改"><a href="#sed-改" class="headerlink" title="sed - 改"></a>sed - 改</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">s：substitute 替换</span><br><span class="line">g：global 全局</span><br><span class="line">s<span class="comment">###g</span></span><br><span class="line">s@@@g</span><br><span class="line">s啥都行g</span><br><span class="line"></span><br><span class="line"><span class="comment">## 基础用法</span></span><br><span class="line">[root@zabbix01 ~]<span class="comment"># sed 's#roger#roger#g' roger.txt</span></span><br><span class="line">1,roger,666</span><br><span class="line">2,wls,777</span><br><span class="line">3,cls,888</span><br><span class="line">4,lls,999</span><br><span class="line"></span><br><span class="line"><span class="comment">## 使用正则</span></span><br><span class="line">[root@zabbix01 ~]<span class="comment"># sed 's#[0-9]#666#g' roger.txt</span></span><br><span class="line">666,roger,666666666</span><br><span class="line">666,wls,666666666</span><br><span class="line">666,cls,666666666</span><br><span class="line">666,lls,666666666</span><br><span class="line"></span><br><span class="line"><span class="comment">## 后向引用</span></span><br><span class="line">[root@m01 ~]<span class="comment"># ifconfig eth0|sed -nr 's#^.*inet (.*)  net.*#\1#gp'</span></span><br><span class="line">10.0.0.61</span><br><span class="line">[root@m01 ~]<span class="comment"># ip a s eth1|sed -nr 's#^.*inet (.*)/24.*#\1#gp'</span></span><br><span class="line">172.16.1.61</span><br></pre></td></tr></table></figure><h3 id="sed的模式空间"><a href="#sed的模式空间" class="headerlink" title="sed的模式空间"></a>sed的模式空间</h3><p>将文件中的，所有换行符，替换成空格</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">N：在读取文件是，让sed把下一行内容一起读进去</span><br></pre></td></tr></table></figure><h2 id="awk-1"><a href="#awk-1" class="headerlink" title="awk"></a>awk</h2><h3 id="awk的内置变量和动作和选项"><a href="#awk的内置变量和动作和选项" class="headerlink" title="awk的内置变量和动作和选项"></a>awk的内置变量和动作和选项</h3><table><thead><tr><th>awk内置变量</th><th>变量含义</th><th>awk选项</th><th>选项含义</th><th>awk动作</th><th>动作含义</th></tr></thead><tbody><tr><td>NR</td><td>Number of Record 行号</td><td>-F</td><td>指定分隔符</td><td>gsub</td><td>替换</td></tr><tr><td>RS</td><td>Record Separator 行的分隔符(\n)</td><td>-v</td><td>指定变量（内置变量、自定义变量）</td><td>print</td><td>打印</td></tr><tr><td>FS</td><td>Field Separator  列的分隔符(空格)</td><td></td><td></td><td></td><td></td></tr><tr><td>NF</td><td>Number Of Filed 每一行有多少列</td><td></td><td></td><td></td><td></td></tr></tbody></table><p>注意：awk输出变量使用单引号，bash输出变量使用双引号</p><p><code>awk</code>不是一个命令，是一门语言。</p><p><code>awk</code>又叫做GNU awk，gawk</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@m01 ~]<span class="comment"># ls -l $(which awk)</span></span><br><span class="line">lrwxrwxrwx. 1 root root 4 Jul  5  2021 /usr/bin/awk -&gt; gawk</span><br></pre></td></tr></table></figure><h3 id="awk执行流程"><a href="#awk执行流程" class="headerlink" title="awk执行流程"></a>awk执行流程</h3><p><strong>三个阶段</strong></p><ul><li><strong>读取文件之前</strong><ul><li>BEGIN{}</li><li>1.读取文件之前，先看命令的选项，例如 -F，-v</li><li>2.如果写了BEGIN{}则先在BEGIN{}中的指令</li></ul></li><li>读取文件时<ul><li>{}</li><li>1.awk在读取文件时，也是一行一行的读\</li><li>2.读取一行之后，判断是否满足条件，如果是，则执行{对应动作}</li><li>3.如果不满足条件，awk继续读取下一行，直到满足条件或者到文件的最后一行</li></ul></li><li>读取文件之后<ul><li>END{}</li><li>1.所有文件读取完成之后，走END{}中的指令</li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[root@m01 ~]<span class="comment"># awk 'BEGIN&#123;xxx&#125;&#123;print $1&#125;END&#123;print 1/3&#125;'  roger.txt</span></span><br><span class="line"></span><br><span class="line">[root@m01 ~]<span class="comment"># awk -F: 'BEGIN&#123;print "name","uid"&#125;&#123;print $1,$3&#125;END&#123;print "文件处理完成"&#125;' /etc/passwd|column -t</span></span><br><span class="line"></span><br><span class="line">[root@m01 ~]<span class="comment"># awk -F: 'BEGIN&#123;print "name","uid","gid"&#125;&#123;print $1,$3,$4&#125;END&#123;print "sb"&#125;' /etc/passwd|column -t</span></span><br><span class="line">name             uid    gid</span><br><span class="line">root             0      0</span><br><span class="line">bin              1      1</span><br><span class="line">daemon           2      2</span><br><span class="line">adm              3      4</span><br><span class="line">lp               4      7</span><br><span class="line">sync             5      0</span><br><span class="line">shutdown         6      0</span><br><span class="line">halt             7      0</span><br><span class="line">mail             8      12</span><br><span class="line">operator         11     0</span><br><span class="line">games            12     100</span><br><span class="line">ftp              14     50</span><br></pre></td></tr></table></figure><h3 id="awk的行与列"><a href="#awk的行与列" class="headerlink" title="awk的行与列"></a>awk的行与列</h3><p>行：记录 record</p><p>列：字段 field</p><h3 id="awk取行"><a href="#awk取行" class="headerlink" title="awk取行"></a>awk取行</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">NR：Number of Record</span><br><span class="line"></span><br><span class="line">[root@m01 ~]<span class="comment"># awk 'NR==1' /etc/passwd</span></span><br><span class="line">root:x:0:0:root:/root:/bin/bash</span><br><span class="line"></span><br><span class="line"><span class="comment">## 范围取行</span></span><br><span class="line">[root@m01 ~]<span class="comment"># awk 'NR&gt;=1 &amp;&amp; NR&lt;=3' /etc/passwd</span></span><br><span class="line">root:x:0:0:root:/root:/bin/bash</span><br><span class="line">bin:x:1:1:bin:/bin:/sbin/nologin</span><br><span class="line">daemon:x:2:2:daemon:/sbin:/sbin/nologin</span><br><span class="line"></span><br><span class="line">[root@m01 ~]<span class="comment"># awk 'NR==1,NR==3' /etc/passwd</span></span><br><span class="line">root:x:0:0:root:/root:/bin/bash</span><br><span class="line">bin:x:1:1:bin:/bin:/sbin/nologin</span><br><span class="line">daemon:x:2:2:daemon:/sbin:/sbin/nologin</span><br><span class="line"></span><br><span class="line"><span class="comment">## 包含roger和cls的行</span></span><br><span class="line">[root@m01 ~]<span class="comment"># awk '/roger|cls/' roger.txt </span></span><br><span class="line">1,roger,666</span><br><span class="line">3,cls,888</span><br><span class="line">roger,111</span><br><span class="line"></span><br><span class="line">[root@m01 ~]<span class="comment"># awk 'NR&gt;=3' roger.txt </span></span><br><span class="line">/tmp/check_2.txt</span><br><span class="line">/tmp/check_3.txt</span><br><span class="line">/tmp/check_4.txt</span><br><span class="line">/tmp/check_5.txt</span><br><span class="line">3,cls,888</span><br><span class="line">roger,111</span><br><span class="line">4,lls,999</span><br><span class="line"></span><br><span class="line">[root@m01 ~]<span class="comment"># awk '/roger/,/cls/' roger.txt </span></span><br><span class="line">1,roger,666</span><br><span class="line">/tmp/check_1.txt</span><br><span class="line">/tmp/check_2.txt</span><br><span class="line">/tmp/check_3.txt</span><br><span class="line">cls</span><br><span class="line">roger</span><br><span class="line">4,lls,999</span><br><span class="line">cls</span><br><span class="line"></span><br><span class="line"><span class="comment">## awk的控制结束标记</span></span><br><span class="line">Record Separator</span><br><span class="line">[root@m01 ~]<span class="comment"># awk -vRS=,  'NR==1' roger.txt</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 修改输出内容的分割符</span></span><br><span class="line">awk -F : -vOFS=<span class="string">'|'</span> <span class="string">'&#123;print $1,$2,$NF&#125;'</span> /etc/passwd </span><br><span class="line">awk -F : -vOFS=<span class="string">'# '</span>&#123;<span class="built_in">print</span> <span class="variable">$1</span>,<span class="variable">$2</span>,<span class="variable">$NF</span>&#125;<span class="string">' /etc/passwd</span></span><br></pre></td></tr></table></figure><h3 id="awk取列"><a href="#awk取列" class="headerlink" title="awk取列"></a>awk取列</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">FS：内置变量，列分隔符  -F: = -vFS=:</span><br><span class="line"></span><br><span class="line">[root@m01 ~]<span class="comment"># awk -vFS=:  '&#123;print $1&#125;' /etc/passwd</span></span><br><span class="line"></span><br><span class="line">[root@m01 ~]<span class="comment"># awk -vFS=:  '&#123;print $1,$NF&#125;' /etc/passwd</span></span><br><span class="line"></span><br><span class="line">[root@m01 ~]<span class="comment"># awk -F:  '&#123;print $1"#"$2"#"$3"#"$4"#"$5"|"$6","$NF&#125;' /etc/passwd</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 修改输出后内容的分隔符</span></span><br><span class="line">[root@m01 ~]<span class="comment"># awk -F: -vOFS=# '&#123;print $1,$2,$3,$4,$5,$6,$NF&#125;' /etc/passwd</span></span><br><span class="line"></span><br><span class="line">[root@m01 ~]<span class="comment"># awk -F: '&#123;print $0&#125;' /etc/passwd</span></span><br></pre></td></tr></table></figure><h3 id="awk取行取列"><a href="#awk取行取列" class="headerlink" title="awk取行取列"></a>awk取行取列</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 取出top中的运行时间</span></span><br><span class="line">[root@m01 ~]<span class="comment"># top -n1 |awk 'NR==1&#123;print $5&#125;'</span></span><br><span class="line">1</span><br><span class="line"></span><br><span class="line"><span class="comment">## 取出网卡配置文件的IP地址</span></span><br><span class="line">[root@m01 ~]<span class="comment"># awk -F= '/IPADDR/&#123;print $2&#125;' /etc/sysconfig/network-scripts/ifcfg-eth0</span></span><br><span class="line">10.0.0.61</span><br><span class="line"></span><br><span class="line">[root@m01 ~]<span class="comment"># cat user.txt</span></span><br><span class="line">1 Zeng Laoshi       133411023        :110:100:75</span><br><span class="line">2 Deng Ziqi            44002231        :250:10:88</span><br><span class="line">3 Zhang Xinyu      877623568      :120:300:200</span><br><span class="line">4 Gu Linazha         11029987         :120:30:79</span><br><span class="line">5 Di Lireba             253097001      :220:100:200</span><br><span class="line">6 Jiang Shuying    535432779       :309:10:2</span><br><span class="line">7 Ju Jingyi             68005178         :130:280:385</span><br><span class="line">8 Zhang Yuqi         376788757       :500:290:33</span><br><span class="line">9 Wen Zhang         259872003      :100:200:300</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 请找出姓氏是张的人，他们第二次捐款的数额及姓名</span></span><br><span class="line"><span class="comment">############# 有问题的写法 #############</span></span><br><span class="line">[root@m01 ~]<span class="comment"># awk -F '[ :]+' 'BEGIN&#123;print "姓","名","捐款数额"&#125;/^Zhang/&#123;print $2,$3,$6&#125;' user.txt </span></span><br><span class="line">姓 名 捐款数额</span><br><span class="line">[root@m01 ~]<span class="comment"># awk -F '[ :]+' 'BEGIN&#123;print "姓","名","捐款数额"&#125;/Zhang/&#123;print $2,$3,$6&#125;' user.txt </span></span><br><span class="line">姓 名 捐款数额</span><br><span class="line">Zhang Xinyu 300</span><br><span class="line">Zhang Yuqi 290</span><br><span class="line">Wen Zhang 200</span><br><span class="line"></span><br><span class="line"><span class="comment">############# 正确的写法 #############</span></span><br><span class="line">[root@m01 ~]<span class="comment"># awk -F '[ :]+' 'BEGIN&#123;print "姓","名","捐款数额"&#125;$2~/Zhang/&#123;print $2,$3,$6&#125;' user.txt </span></span><br><span class="line">姓 名 捐款数额</span><br><span class="line">Zhang Xinyu 300</span><br><span class="line">Zhang Yuqi 290</span><br><span class="line"></span><br><span class="line">[root@m01 ~]<span class="comment"># awk -F '[ :]+' 'BEGIN&#123;print "姓","名","捐款数额"&#125;$2~/Zhang/ &amp;&amp; $3~/X/&#123;print $2,$3,$6&#125;' user.txt </span></span><br><span class="line">姓 名 捐款数额</span><br><span class="line">Zhang Xinyu 300</span><br><span class="line"></span><br><span class="line">[root@m01 ~]<span class="comment"># awk -F '[ :]+' 'BEGIN&#123;print "姓名","捐款数额"&#125;$2~/Zhang/ &amp;&amp; $3~/X/&#123;print $2 $3,$6&#125;' user.txt |column -t</span></span><br><span class="line">姓名        捐款数额</span><br><span class="line">ZhangXinyu  300</span><br><span class="line"></span><br><span class="line">[root@m01 ~]<span class="comment"># awk -F '[ :]+' 'BEGIN&#123;print "姓名","捐款数额"&#125;$2~/Zhang/ &amp;&amp; $3~/X/&#123;print $2 $3,$(NF-1)&#125;' user.txt |column -t</span></span><br><span class="line">姓名        捐款数额</span><br><span class="line">ZhangXinyu  300</span><br><span class="line"></span><br><span class="line"><span class="comment">### 显示所有以25开头的QQ号及姓名</span></span><br><span class="line">[root@m01 ~]<span class="comment"># awk '$4~/^25/&#123;print $2 $3,$4&#125;' user.txt </span></span><br><span class="line">DiLireba 253097001</span><br><span class="line">WenZhang 259872003</span><br><span class="line"></span><br><span class="line"><span class="comment">### 显示所有QQ号最后一位是1或者3的人，全名及QQ</span></span><br><span class="line">[root@m01 ~]<span class="comment"># awk '$4~/1$|3$/&#123;print $2$3,$4&#125;' user.txt </span></span><br><span class="line">ZengLaoshi 133411023</span><br><span class="line">DengZiqi 44002231</span><br><span class="line">DiLireba 253097001</span><br><span class="line">WenZhang 259872003</span><br><span class="line">[root@m01 ~]<span class="comment"># awk '$4~/(1|3)$/&#123;print $2$3,$4&#125;' user.txt </span></span><br><span class="line">ZengLaoshi 133411023</span><br><span class="line">DengZiqi 44002231</span><br><span class="line">DiLireba 253097001</span><br><span class="line">WenZhang 259872003</span><br><span class="line">[root@m01 ~]<span class="comment"># awk '$4~/[13]$/&#123;print $2$3,$4&#125;' user.txt </span></span><br><span class="line">ZengLaoshi 133411023</span><br><span class="line">DengZiqi 44002231</span><br><span class="line">DiLireba 253097001</span><br><span class="line">WenZhang 259872003</span><br><span class="line"></span><br><span class="line"><span class="comment">### 显示每个捐款值都以$开头 $110:$00$75</span></span><br><span class="line">[root@m01 ~]<span class="comment"># awk  '&#123;gsub(/:/,"$");print $0&#125;' user.txt </span></span><br><span class="line">1 Zeng Laoshi       133411023        <span class="variable">$110</span><span class="variable">$100</span><span class="variable">$75</span></span><br><span class="line">2 Deng Ziqi            44002231        <span class="variable">$250</span><span class="variable">$10</span><span class="variable">$88</span></span><br><span class="line">3 Zhang Xinyu      877623568      <span class="variable">$120</span><span class="variable">$300</span><span class="variable">$200</span></span><br><span class="line">4 Gu Linazha         11029987         <span class="variable">$120</span><span class="variable">$30</span><span class="variable">$79</span></span><br><span class="line">5 Di Lireba             253097001      <span class="variable">$220</span><span class="variable">$100</span><span class="variable">$200</span></span><br><span class="line">6 Jiang Shuying    535432779       <span class="variable">$309</span><span class="variable">$10</span><span class="variable">$2</span></span><br><span class="line">7 Ju Jingyi             68005178         <span class="variable">$130</span><span class="variable">$280</span><span class="variable">$385</span></span><br><span class="line">8 Zhang Yuqi         376788757       <span class="variable">$500</span><span class="variable">$290</span><span class="variable">$33</span></span><br><span class="line">9 Wen Zhang         259872003      <span class="variable">$100</span><span class="variable">$200</span><span class="variable">$300</span></span><br><span class="line"></span><br><span class="line">[root@m01 ~]<span class="comment"># awk  '&#123;gsub(/:/,"$",$5);print $0&#125;' user.txt </span></span><br><span class="line">1 Zeng Laoshi 133411023 <span class="variable">$110</span> :100:75</span><br><span class="line">2 Deng Ziqi 44002231 <span class="variable">$250</span> :10:88</span><br><span class="line">3 Zhang Xinyu 877623568 <span class="variable">$120</span> :300:200</span><br><span class="line">4 Gu Linazha 11029987 <span class="variable">$120</span> :30:79</span><br><span class="line">5 Di Lireba 253097001 <span class="variable">$220</span> :100:200</span><br><span class="line">6 Jiang Shuying 535432779 <span class="variable">$309</span> :10:2</span><br><span class="line">7 Ju Jingyi 68005178 <span class="variable">$130</span> :280:385</span><br><span class="line">8 Zhang Yuqi 376788757 <span class="variable">$500</span> :290:33</span><br><span class="line">9 Wen Zhang 259872003 <span class="variable">$100</span> :200:300</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">gsub</span></span>()&#123;</span><br><span class="line"><span class="variable">$1</span></span><br><span class="line"><span class="variable">$2</span></span><br><span class="line"><span class="variable">$3</span></span><br><span class="line">    xxxx</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">gsub(xx,aaa,d)</span><br><span class="line">gsub(<span class="string">"被替换的内容"</span>,<span class="string">"替换的新内容"</span>)</span><br><span class="line">gsub(<span class="string">"被替换的内容"</span>,<span class="string">"替换的新内容"</span>,第N列)</span><br><span class="line"></span><br><span class="line"><span class="comment">## 综合应用：找出ifconfig中范围是1-255的数字</span></span><br><span class="line">[root@m01 ~]<span class="comment"># ifconfig |awk -vRS='[^0-9]+' '$0&gt;=1 &amp;&amp; $0&lt;=255'</span></span><br><span class="line">10</span><br><span class="line">61</span><br><span class="line">255</span><br><span class="line">255</span><br><span class="line">255</span><br><span class="line">10</span><br><span class="line">255</span><br><span class="line">6</span><br><span class="line">80</span><br><span class="line">20</span><br><span class="line">29</span><br><span class="line">3</span><br><span class="line">64</span><br><span class="line">20</span><br><span class="line">29</span><br><span class="line">3</span><br><span class="line">2</span><br><span class="line">5</span><br><span class="line">2</span><br><span class="line">6</span><br><span class="line">1</span><br><span class="line">172</span><br><span class="line">16</span><br><span class="line">1</span><br><span class="line">61</span><br><span class="line">255</span><br><span class="line">255</span><br><span class="line">255</span><br><span class="line">172</span><br><span class="line">16</span><br><span class="line">1</span><br><span class="line">255</span><br><span class="line">6</span><br><span class="line">80</span><br><span class="line">20</span><br><span class="line">29</span><br><span class="line">3</span><br><span class="line">9</span><br><span class="line">64</span><br><span class="line">20</span><br><span class="line">29</span><br><span class="line">3</span><br><span class="line">9</span><br><span class="line">46</span><br><span class="line">9</span><br><span class="line">117</span><br><span class="line">29</span><br><span class="line">7</span><br><span class="line">73</span><br><span class="line">127</span><br><span class="line">1</span><br><span class="line">255</span><br><span class="line">6</span><br><span class="line">1</span><br><span class="line">128</span><br><span class="line">10</span><br></pre></td></tr></table></figure><h3 id="awk模式与动作"><a href="#awk模式与动作" class="headerlink" title="awk模式与动作"></a>awk模式与动作</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk -F: <span class="string">'NR==1&#123;print $1,$3&#125;'</span> /etc/passwd</span><br></pre></td></tr></table></figure><p>上面这条命令我们可以看到，<code>&#39;NR==1{print $1,$3}&#39;</code><br>可以理解为，<code>&#39;模式{动作}&#39;</code> == <code>&#39;条件{指令}&#39;</code></p><p><strong>awk中的模式</strong></p><ul><li>正则表达式</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 正则表达式写法</span></span><br><span class="line"><span class="string">'/正则表达式/flag'</span></span><br><span class="line"><span class="string">'$1~/正则表达式/flag'</span></span><br><span class="line"><span class="string">'$1!~/正则表达式/flag'</span></span><br><span class="line"></span><br><span class="line">只不过我们在awk中很少使用flag</span><br></pre></td></tr></table></figure><ul><li>比较表达式</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">NR==1</span><br><span class="line">NR&gt;=10</span><br><span class="line">NR&lt;=100</span><br><span class="line">NR&gt;=1 &amp;&amp; NR&lt;=10</span><br><span class="line"><span class="variable">$1</span>&gt;=100</span><br></pre></td></tr></table></figure><ul><li>范围模式</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 精确匹配行号：从第10行到第20行</span></span><br><span class="line">NR==10,NR==20</span><br><span class="line"></span><br><span class="line"><span class="comment">## 精确匹配字符串：从该字符串的行到另一个字符串所在行</span></span><br><span class="line"><span class="string">'/root/,/roger/'</span></span><br><span class="line"><span class="string">'/从哪个字符串所在行/,/到那个字符串所在行/'</span>  <span class="comment">#中间的行都包含进去</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 模糊匹配字符串：从含有该字符串所在行到含有另一字符串所在行</span></span><br><span class="line"><span class="string">'$1~/oo/,$1~/zl/'</span></span><br></pre></td></tr></table></figure><ul><li>特殊模式</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">BEGIN</span><br><span class="line">END</span><br></pre></td></tr></table></figure><p><strong>awk中的动作</strong></p><p>在awk中，我们最常用的动作就是 <code>print</code></p><p>当然我们还有别的动作可以使用：</p><ul><li>print打印</li><li>gsub替换</li><li>变量赋值</li><li>统计计算</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">useradd name;pass=`<span class="built_in">echo</span> <span class="variable">$RANDOM</span>|md5sum|cut -c 1-10`;<span class="built_in">echo</span> <span class="variable">$pass</span>|passwd --stdin name;<span class="built_in">echo</span> <span class="variable">$pass</span>:<span class="variable">$user</span> &gt;&gt; /tmp/user.txt</span><br><span class="line">seq 100|awk <span class="string">'&#123;print "useradd test"$1";pass=`echo $RANDOM|md5sum|cut -c 1-10`;echo $pass|passwd --stdin test"$1";echo $pass:test"$1" &gt;&gt; /tmp/user.txt"&#125;'</span>|bash</span><br></pre></td></tr></table></figure><p>如果要使用BEGIN模式，那么一定要成双成对的出现：<code>BEGIN{}</code></p><p>那么我们要知道，BEGIN{}中，大括号里面的内容，会在读取文件内容之前执行</p><p>主要应用场景：</p><ul><li>1.计算</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@zabbix01 ~]<span class="comment"># awk 'BEGIN&#123;print 1/3&#125;'</span></span><br><span class="line">0.333333</span><br></pre></td></tr></table></figure><ul><li>2.awk功能测试</li><li>3.输出表格的表头</li></ul><h3 id="END模式"><a href="#END模式" class="headerlink" title="END模式"></a>END模式</h3><p>一般来说，END{}要比BEGIN{}重要一些，BEGIN{}可有可无，计算其实可以放在读取文件的时候，也可以执行</p><p>END{}中，大括号里面的内容，会在awk读取完文件的最后一行后，进行处理</p><p>作用：一般我们使用END{}来显示对日志内容分析后的一个结果<br>当然，还有其他功能，比如文件读取完了，可以显示一些尾部信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.统计/etc/service文件中一共有多少行</span></span><br><span class="line">[root@m01 ~]<span class="comment"># awk '&#123;hang++;print hang&#125;' /etc/services</span></span><br><span class="line">1</span><br><span class="line">...</span><br><span class="line">11176</span><br><span class="line"></span><br><span class="line">不需要过程，只要结果</span><br><span class="line"></span><br><span class="line"> [root@m01 ~]<span class="comment"># awk '&#123;hang++&#125;END&#123;print hang&#125;' /etc/services </span></span><br><span class="line">11176</span><br><span class="line"></span><br><span class="line"><span class="comment">### 只能统计文件的所有行数</span></span><br><span class="line">[root@m01 ~]<span class="comment"># awk 'END&#123;print NR&#125;' /etc/services </span></span><br><span class="line">11176</span><br><span class="line"></span><br><span class="line"><span class="comment">### 流氓写法</span></span><br><span class="line">[root@m01 ~]<span class="comment"># sed -n '$=' /etc/services </span></span><br><span class="line">11176</span><br><span class="line">[root@m01 ~]<span class="comment"># grep -c '.*' /etc/services </span></span><br><span class="line">11176</span><br><span class="line">[root@m01 ~]<span class="comment"># wc -l /etc/services </span></span><br><span class="line">11176 /etc/services</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.统计/etc/service中空行的数量</span></span><br><span class="line">[root@m01 ~]<span class="comment"># awk '/^$/&#123;print&#125;' /etc/services</span></span><br><span class="line"></span><br><span class="line">[root@m01 ~]<span class="comment"># awk '/^$/&#123;i++&#125;END&#123;print i&#125;' /etc/services </span></span><br><span class="line">17</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.统计出下列文件中所有人的年龄和</span></span><br><span class="line"><span class="comment">### 脚本方式</span></span><br><span class="line"><span class="meta">#!/usr/bin/bash</span></span><br><span class="line">n=0</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> `cat user.txt`;<span class="keyword">do</span></span><br><span class="line"><span class="keyword">if</span> [[ <span class="variable">$line</span> =~ [0-9]+  ]];<span class="keyword">then</span></span><br><span class="line">        ((n+=<span class="variable">$line</span>))</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$n</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### awk方式</span></span><br><span class="line">[root@m01 ~]<span class="comment"># cat user.txt </span></span><br><span class="line">姓名      年龄</span><br><span class="line">曾老湿    23</span><br><span class="line">苍颈空    18</span><br><span class="line">西冶详    99</span><br><span class="line">[root@m01 ~]<span class="comment"># awk 'NR&gt;1&#123;print $2&#125;' user.txt </span></span><br><span class="line">23</span><br><span class="line">18</span><br><span class="line">99</span><br><span class="line">[root@m01 ~]<span class="comment"># awk 'NR&gt;1&#123;n+=$2&#125;END&#123;print n&#125;' user.txt </span></span><br><span class="line">140</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.统计nginx日志中，状态码是200的次数以及，状态码是200时占用的流量</span></span><br><span class="line">[root@m01 ~]<span class="comment"># zcat blog.driverzeng.com_access.log-20220623.gz |awk 'BEGIN&#123;print "状态码200的次数","总流量"&#125;$10~/200/&#123;code++;byte+=$11&#125;END&#123;print code,byte&#125;'|column -t</span></span><br><span class="line">状态码200的次数  总流量</span><br><span class="line">3100             190477111</span><br><span class="line"></span><br><span class="line">脚本写法：</span><br><span class="line">awk <span class="string">'</span></span><br><span class="line"><span class="string">BEGIN&#123;</span></span><br><span class="line"><span class="string">print "状态码200的次数","总流量"</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">$10~/200/&#123;</span></span><br><span class="line"><span class="string">code++;byte+=$11</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">END&#123;</span></span><br><span class="line"><span class="string">print code,byte</span></span><br><span class="line"><span class="string">&#125;'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 5.统计nginx日志中状态码是4xx和5xx的次数及总流量</span></span><br><span class="line">[root@m01 ~]<span class="comment"># zcat blog.driverzeng.com_access.log-20220623.gz|awk '$10~/^[45]/&#123;i++;n+=$11&#125;END&#123;print i,n&#125;'</span></span><br><span class="line">580 519243</span><br><span class="line"></span><br><span class="line"><span class="comment"># 6.综合应用：分别统计每种状态码的次数和每个状态码的总流量</span></span><br><span class="line">zcat blog.driverzeng.com_access.log-20220623.gz |awk <span class="string">'</span></span><br><span class="line"><span class="string">BEGIN&#123;</span></span><br><span class="line"><span class="string">print "状态码","总流量"</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">$10~/200/&#123;</span></span><br><span class="line"><span class="string">i1++;n1+=$11</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">$10~/^3/&#123;</span></span><br><span class="line"><span class="string">i2++;n2+=$11</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">$10~/^4/&#123;</span></span><br><span class="line"><span class="string">i3++;n3+=$11</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">$10~/^5/&#123;</span></span><br><span class="line"><span class="string">i4++;n4+=$11</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">END&#123;</span></span><br><span class="line"><span class="string">print "200次数："i1,"200的流量："n1</span></span><br><span class="line"><span class="string">print "3xx次数："i2,"3xx的流量："n2</span></span><br><span class="line"><span class="string">print "4xx次数："i3,"4xx的流量："n3</span></span><br><span class="line"><span class="string">print "5xx次数："i4,"5xx的流量："n4</span></span><br><span class="line"><span class="string">&#125;'</span>|column -t</span><br></pre></td></tr></table></figure><h3 id="awk数组"><a href="#awk数组" class="headerlink" title="awk数组"></a>awk数组</h3><p>在awk中的数组数据类型，是非常好用的一个类型，不像是shell，当然shell中数组也有它自己的优点。</p><p>awk中的数组，专门用来统计不同的分类。</p><p>** 例如：**<br>1.nginx日志中每个IP出现的次数<br>2.nginx日志中每种状态码出现的次数<br>3.nginx日志中每个URI的访问次数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@m01 ~]<span class="comment"># zcat blog.driverzeng.com_access.log-20220623.gz|awk '&#123;print $1&#125;'|sort|uniq -c|sort -nr</span></span><br></pre></td></tr></table></figure><p><strong>awk数组赋值</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@m01 ~]<span class="comment"># awk 'BEGIN&#123;array[0]="roger";array[1]="wyk"&#125;'</span></span><br></pre></td></tr></table></figure><p><strong>awk数组取值</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@m01 ~]<span class="comment"># awk 'BEGIN&#123;array[0]="roger";array[1]="wyk";print array[0],array[1]&#125;'</span></span><br><span class="line">roger wyk</span><br></pre></td></tr></table></figure><p><strong>shell中循环数组</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">array[0]=<span class="string">'roger'</span></span><br><span class="line">array[1]=<span class="string">'cls'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> <span class="variable">$&#123;array[*]&#125;</span>;<span class="keyword">do</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="variable">$name</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p><strong>awk循环数组</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(条件)&#123;</span><br><span class="line">    动作</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> 条件;<span class="keyword">do</span></span><br><span class="line">动作</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">[root@m01 ~]<span class="comment"># awk 'BEGIN&#123;array[0]="roger";array[1]="wyk";for(num in array)&#123;print num&#125;&#125;'</span></span><br><span class="line">0</span><br><span class="line">1</span><br><span class="line">[root@m01 ~]<span class="comment"># awk 'BEGIN&#123;array[0]="roger";array[1]="wyk";for(num in array)&#123;print array[num]&#125;&#125;'</span></span><br><span class="line">roger</span><br><span class="line">wyk</span><br><span class="line"></span><br><span class="line"><span class="comment">## 统计nginx日志中的每一个IP地址访问的次数</span></span><br><span class="line">zcat blog.driverzeng.com_access.log-20220623.gz |awk <span class="string">'&#123;array[$1]++&#125;END&#123;for(ip in array)&#123;print ip,array[ip]&#125;&#125;'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#1.取出下列域名并根据域名，进行统计排序处理</span></span><br><span class="line">https://blog.driverzeng.com/index.html</span><br><span class="line">https://blog.driverzeng.com/1.html</span><br><span class="line">http://post.driverzeng.com/index.html</span><br><span class="line">http://mp3.driverzeng.com/index.html</span><br><span class="line">https://blog.driverzeng.com/3.html</span><br><span class="line">http://post.driverzeng.com/2.html</span><br><span class="line"></span><br><span class="line">[root@m01 ~]<span class="comment"># awk -F/ '&#123;domain[$3]++&#125;END&#123;for(name in domain)&#123;print name,domain[name]&#125;&#125;' 1.txt </span></span><br><span class="line">blog.driverzeng.com 3</span><br><span class="line">post.driverzeng.com 2</span><br><span class="line">mp3.driverzeng.com 1</span><br><span class="line"></span><br><span class="line"><span class="comment">#2.统计nginx日志中，每个IP访问使用的流量总和</span></span><br><span class="line">[root@m01 ~]<span class="comment"># zcat blog.driverzeng.com_access.log-20220623.gz |awk '&#123;ip[$1]++;liuliang[$1]+=$11&#125;END&#123;for(i in ip)&#123;print i,ip[i],liuliang[i]&#125;&#125;'</span></span><br></pre></td></tr></table></figure><h3 id="awk的判断"><a href="#awk的判断" class="headerlink" title="awk的判断"></a>awk的判断</h3><p>awk判断与shell判断对比</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## shell</span></span><br><span class="line"><span class="keyword">if</span> [ 条件 ];<span class="keyword">then</span></span><br><span class="line">动作</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ 条件 ];<span class="keyword">then</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ 条件 ];<span class="keyword">then</span></span><br><span class="line"><span class="keyword">elif</span> [ 条件 ];<span class="keyword">then</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## awk</span></span><br><span class="line"><span class="keyword">if</span>(条件)&#123;</span><br><span class="line">    动作</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(条件)&#123;</span><br><span class="line">    动作</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    动作</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(条件)&#123;</span><br><span class="line">    动作</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(条件)&#123;</span><br><span class="line">    动作</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    动作</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">awk <span class="string">'&#123;&#125;END&#123;for(条件)&#123;if(条件)&#123;动作&#125;else if(条件)&#123;动作&#125;else&#123;动作&#125;&#125;&#125;'</span></span><br><span class="line">awk <span class="string">'&#123;</span></span><br><span class="line"><span class="string">    读文件的动作</span></span><br><span class="line"><span class="string">&#125;END&#123;</span></span><br><span class="line"><span class="string">    for(条件)&#123;</span></span><br><span class="line"><span class="string">        if(条件)&#123;</span></span><br><span class="line"><span class="string">            动作</span></span><br><span class="line"><span class="string">        &#125;else if(条件)&#123;</span></span><br><span class="line"><span class="string">            动作</span></span><br><span class="line"><span class="string">        &#125;else&#123;</span></span><br><span class="line"><span class="string">            动作</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#1.判断磁盘使用率大于70%，大于显示磁盘空间不足，不大于显示正常</span></span><br><span class="line"><span class="comment">## 取出磁盘使用率</span></span><br><span class="line"></span><br><span class="line">[root@m01 ~]<span class="comment"># df -h|awk -F '[ %]+' 'NR==2&#123;if($5&gt;70)&#123;print "磁盘空间不足"&#125;else&#123;print "磁盘空间还行"&#125;&#125;'</span></span><br><span class="line">磁盘空间还行</span><br><span class="line">[root@m01 ~]<span class="comment"># df -h|awk -F '[ %]+' 'NR==2&#123;if($5&gt;70)&#123;print "磁盘空间不足"&#125;else&#123;print "磁盘空间还行,当前磁盘使用率："$5"%"&#125;&#125;'</span></span><br><span class="line">磁盘空间还行,当前磁盘使用率：9%</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">### 作业：</span></span><br><span class="line"><span class="comment">#1.从1加到100</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#2.企业面试题：统计每个学生的总成绩和平均成绩</span></span><br><span class="line">stu01 70 80 90 100 90 80</span><br><span class="line">stu02 89 78 98 67 97 90</span><br><span class="line">stu03 56 12 33 44 55 66 77</span><br><span class="line">stu04 89 78 77 99 100 30</span><br><span class="line">stu05 98 97 96 95 94 93</span><br><span class="line">stu06 100 20 20 20 20 20</span><br><span class="line"></span><br><span class="line"><span class="comment">#3.从下面文件内容中取值</span></span><br><span class="line">Zeng Laoshi   133411023     :110:100:75</span><br><span class="line">Deng Ziqi      44002231    :250:10:88</span><br><span class="line">Zhang Xinyu     877623568    :120:300:200</span><br><span class="line">Gu Linazha    11029987      :120:30:79</span><br><span class="line">Di Lireba   253097001     :220:100:200</span><br><span class="line">Jiang Shuying   535432779     :309:10:2</span><br><span class="line">Ju Jingyi     68005178      :130:280:385</span><br><span class="line">Zhang Yuqi   376788757     :500:290:33</span><br><span class="line">Wen Zhang     259872003     :100:200:300</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">1.请找出姓氏是张的人，他们第二次捐款的数额及姓名 </span><br><span class="line">2.显示所有以25开头的QQ号及姓名</span><br><span class="line">3.显示所有QQ号最后一位是1或者3的人，全名及QQ</span><br><span class="line">4.显示每个捐款值都以$开头 <span class="variable">$110</span>:<span class="variable">$00</span><span class="variable">$75</span></span><br><span class="line">5.综合应用:找出ifconfig中范围是1-255的数字</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      Shell脚本与Windows/Dos下的批处理相似，也就是用各类命令预先放入到一个文件中，方便一次性执行的一个程序文件，主要是方便管理员进行设置或者管理用的。但是它比Windows下的批处理更强大，比用其他编程程序编辑的程序效率更高，它使用了Linux/Unix下的...
    
    </summary>
    
    
      <category term="SRE" scheme="http://yoursite.com/categories/SRE/"/>
    
    
      <category term="Linxu持续集成" scheme="http://yoursite.com/tags/Linxu%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/"/>
    
  </entry>
  
</feed>
